#pragma		dynamic 			1000000
#pragma 	warning disable 	239
#pragma 	warning disable 	214
#pragma 	warning disable 	217
#pragma 	warning disable 	218
#pragma 	warning disable 	561
#pragma 	warning disable 	47111
#pragma		tabsize 0

#include 	<a_samp>            // Sürüm: 0.3.DL-R1

#undef		MAX_PLAYERS
#define		MAX_PLAYERS			(750)
#define     INVALID_PICKUP_ID   (-1)

#include 	<a_mysql> 			// Sürüm: R41-4 ~ https://github.com/pBlueG/SA-MP-MySQL/releases
#include 	<sscanf2> 			// Sürüm: 2.8.2 ~ https://github.com/maddinat0r/sscanf/releases
#include 	<streamer> 			// Sürüm: 2.9.2
#include    <dini>              // Sürüm: 1.6
#include 	<izcmd>             // Sürüm: 0.2.3.0
// #include 	<foreach>       // Sürüm: 0.4.3
#include	<YSI_Data\y_iterate>
#include    <mSelection>        // Sürüm: **
#include    <md5>               // Sürüm: 1.0
#include    <callbacks>			// Sürüm: ** ~ https://github.com/emmet-jones/New-SA-MP-callbacks
#include	<weapon-config>     // Sürüm: none ~ https://github.com/oscar-broman/samp-weapon-config
#include 	<FCNPC>             // Sürüm: 2.0 ~ https://github.com/ziggi/1FCNPC/releases
#include    <discord-connector>
//#include    <Pawn.RakNet>


stock _H_GetPlayerWeaponData(playerid, slot, &weapons, &ammo)
{
	return slot = GetPlayerWeaponData(playerid, slot, weapons, ammo), weapons = ammo ? weapons : 0, slot;
}

#if defined _ALS_GetPlayerWeaponData
	#undef GetPlayerWeaponData
#else
	#define _ALS_GetPlayerWeaponData
#endif
 
#define GetPlayerWeaponData _H_GetPlayerWeaponData


native	IsValidVehicle(vehicleid);
native	gpci(playerid, serial [], len);

/* --------------------------------[ Sunucu Bilgileri ]-------------------------------- */
#define SUNUCU_ADI 	 		"Viga Roleplay - www.viga-roleplay.com"
#define SUNUCU_WEBSITE		"www.viga-roleplay.com"
#define SUNUCU_SURUM		"Roleplay V1.0"
#define SUNUCU_MAP          "Los Santos"
#define SUNUCU_DIL          "Turkish/Turkce"

/* --------------------------------[ MySQL Bilgileri ]-------------------------------- */
/*
#define SQL_HOST			"127.0.0.1"
#define SQL_AD				"root"
#define SQL_SIFRE			"burak1999"
#define SQL_DATABASE		"server"
*/


#define SQL_HOST			"localhost"
#define SQL_AD				"root"
#define SQL_SIFRE			"BIScbo4y*h3JVgXJ95h5l22lI"
#define SQL_DATABASE		"samp"

/* --------------------------------[ Kolay Bilgi Mesajlarý ]-------------------------------- */
#define SunucuMesaji(%0,%1) \
	SendClientMessageEx(%0, 0x006118AA, "[V]{D2D2D2} " %1)

#define KullanimMesaji(%0,%1) \
	SendClientMessageEx(%0, 0x0A8CFFAA, "[V]{D2D2D2} "%1)

#define HataMesaji(%0,%1) \
	SendClientMessageEx(%0, 0x811100AA, "[V]{D2D2D2} "%1)

#define AdminMesaji(%0,%1) \
	SendClientMessageEx(%0, RENK_ACIKKIRMIZI, "aLog: "%1)

#define UyariMesaji(%0,%1) \
	SendClientMessageEx(%0, RENK_SARI, "[V]{D2D2D2} "%1)

#define DuyuruMesaji(%0,%1) \
	SendClientMessageEx(%0, RENK_SERVER, "DUYURU:{FFFFFF} "%1)

#define BirlikDuyuruMesaji(%0,%1) \
	SendClientMessageEx(%0, RENK_SERVER, "BIRLIK DUYURU:{FFFFFF} "%1)

#define YETKINIZ_YOK_BILGI			"Bu komutu kullanabilmek için yeterli yetkiye sahip deðilsiniz."
#define ISBASI_YAPMALISIN_BILGI		"Yetkili iþbaþýnda deðilken bazý komutlarý kullanamazsýn, bu da onlardan birisi. (/aduty)"

/* --------------------------------[ Renkler ]-------------------------------- */
#define RENK_VARSAYILAN		(0xFFFFFF00)
#define RENK_SERVER      	(0xa9c4e4FF) // 2497E3 -- 571cba
#define RENK_KARAKTER       (0xa9c4e4FF) // FF8C00
#define RENK_SOKAKTANSESLER (0xC75555FF)
#define RENK_IHBAR          (0x00CC00FF)
#define RENK_RAPOR			(0xFFFF91FF)
#define RENK_SORU           (0x9BBFFDFF) // 66D149
#define RENK_PM				(0xFFBB00FF)
#define RENK_BIRLIK         (0xFF8000FF)
#define RENK_TELSIZ       	(0xFDE39DFF)
#define RENK_DO             (0x81caacFF) // C24748 -- D0AEEB
#define RENK_KIRMIZI        (0xB70000FF)
#define RENK_ACIKKIRMIZI   	(0xFF6347FF)
#define RENK_BEYAZ          (0xFFFFFFFF)
#define RENK_SIYAH          (0x000000FF)
#define RENK_ACIKSIYAH		(0x191919FF)
#define RENK_GRI            (0xAFAFAFFF)
#define RENK_PEMBE      	(0xD0AEEBFF)
#define RENK_ACIKSARI		(0xF5DEB3FF)
#define RENK_KAPALIMAVI		(0x1394BFFF)
#define RENK_TURUNCU		(0xFF8000FF)
#define RENK_SARI           (0xFFF700FF)
#define RENK_YESIL          (0x00CD00FF)
#define RENK_PDISBASI       (0x8D8DFF00)
#define RENK_FMDISBASI      (0xFF828200)
#define RENK_GOVISBASI      (0xAFAFAF00)
#define RENK_ACIKMAVI       (0x33CCFFFF)
#define RENK_YAYIN          (0xFFA500FF)
#define RENK_PRADYO         (0x6DFB6DFF)
#define	RENK_KONUSMA1		(0xFFFFFFFF)
#define	RENK_KONUSMA2		(0xFFFFFFFF) // 0xC8C8C8C8
#define	RENK_KONUSMA3		(0xFFFFFFFF)
#define	RENK_KONUSMA4		(0xE6E6E6E6)
#define	RENK_KONUSMA5		(0xAAAAAAAA)
#define RENK_YARIS          (0x8D8DFFFF)
#define RENK_PAINTBALL      (0x787878FF) // 6DFB6D
#define RENK_NEWBIE         (0x7DAEFFFF)
#define RENK_GOVDUYURU      (0x2641FEFF)
#define RENK_ETKINLIK       (0x1D7A39FF)

/* --------------------------------[ Yetkili Ýþbaþý Renkleri ]-------------------------------- */
#define RENK_Y1     		(0x81000000) // A48282
#define RENK_Y2     		(0x81000000)
#define RENK_Y3     		(0x81000000)
#define RENK_Y4     		(0x81000000)
#define RENK_Y5     		(0x81000000)
#define RENK_Y6     		(0x81000000)
#define RENK_Y7     		(0x81000000)
#define RENK_Y8             (0x81000000)
#define RENK_DESTEK         (0x0ACAFF00)

/* --------------------------------[ Admin Maaþlarý ]-------------------------------- */
#define ADMIN_LEVEL2_MAAS   (5)
#define ADMIN_LEVEL3_MAAS   (15)
#define ADMIN_LEVEL4_MAAS   (20)
#define ADMIN_LEVEL5_MAAS   (25)

/* --------------------------------[ Tuþ Tanýmlamalarý ]-------------------------------- */
#define MOVE_FORWARD    		1
#define MOVE_BACK       		2
#define MOVE_LEFT       		3
#define MOVE_RIGHT      		4
#define MOVE_FORWARD_LEFT       5
#define MOVE_FORWARD_RIGHT      6
#define MOVE_BACK_LEFT          7
#define MOVE_BACK_RIGHT         8

/* --------------------------------[ Tanýmlamalar - #define ]-------------------------------- */
#define SUNUCU_DOSYA					"sunucuayarlari.ini"
#define VARSAYILAN_ISYERI_ADI           "Viga"
#define VARSAYILAN_FABRIKA_ADI          "Viga"
#define VARSAYILAN_SANDIK_SAHIBI        "Viga"
#define VARSAYILAN_BINA_ADI        		"Viga"
#define KONUSMA_MESAFESI                (10.0)
#define BAGIR_MESAFE                    (15.0)
#define OOC_MESAFE                      (15.0)
#define KSES_MESAFE                     (3.0)
#define EMOTE_MESAFE                    (9.0)
#define MEGAFON_MESAFE                  (22.0)
#define ISIM_MESAFESI 					(13.0)
#define EX_SPLITLENGTH					(120)
#define MAKSIMUM_CEZA                   (1500) // Kesilebilecek en yüksek ceza.
#define LEVEL_EXP            			(4)     // Üst level ile çarpýlarak sayý.
#define YARALI_SURE                     (120)   // Yaralanma süresi, saniye cinsinden
#define ILK_YARDIM_SURE                 (40)    // Ýlk yardým süresi, saniye cinsinden
#define ARAC_PARCALATMA_SURE            (180)   // Araç parçalama süresi, saniye cinsinden.
#define ARAC_ARIZATESPIT_SURE           (45)    // Araç arýza tespit süresi, saniye cinsinden.
#define ARAC_ARIZATAMIR_SURE            (90)    // Araç arýza tamir süresi, saniye cinsinden.
#define MESLEK_TEKRARYAPMA_SURE			(300)   // Mesleði iptal ederse tekrardan yapmak için beklemesi gereken süre, saniye cinsinden.
#define DUZKONTAK_SURE                  (90)    // Düz kontak süresi, saniye cinsinden.
#define AFK_SURE            			(600)	// Oyundan atýlma süresi, saniye cinsinden
#define ISLEME_SANIYE                   (90)	// Madde iþleme süresi, saniye cinsinden.
#define TAMIR_UCRET                     (50)   // Araç Tamir Ücreti
#define TAMIR_SURE                      (15)    // Araç Tamir Süresi
#define MAKSIMUM_ODUN                   (3)     // Oyuncunun üzerinde bulundurabileceði maksimum odun.
#define MAKSIMUM_KIBRIT                 (50)    // Oyuncunun üzerinde bulundurabileceði maksimum kibrit.
#define MAKSIMUM_SIGARA                 (40)    // Oyuncunun üzerinde bulundurabileceði maksimum sigara.
#define MAKSIMUM_SAKSI                  (1)     // Oyuncunun üzerinde bulundurabileceði maksimum saksý.
#define BAKIM_SURE                      (10)    // Bakým yapma süresi.
#define TOPLAMA_SURE                    (10)    // Uyuþturucu toplama süresi.
#define MAKSIMUM_PING                   (1000)	// Oyuncunun ulaþabileceði maksimum ping.
#define SMS_UCRET                       (1)     // SMS gönderildiðinde kesilecek para.
#define ARAC_ZIRH_SEVIYE1				(1000)
#define ARAC_ZIRH_SEVIYE2               (2000)
#define ARAC_ZIRH_SEVIYE3				(3000)
#define ARAC_ZIRH_SEVIYE4               (4000)
#define ARACZIRH_SEVIYE1_FIYAT          (50000)
#define ARACZIRH_SEVIYE2_FIYAT          (50000)
#define KASA_KONUMLANDIRMA_UCRET        (2000)
#define RAF_UCRET                       (300)
#define BINA_RAF_UCRET                  (500)
#define EV_LEVEL_UCRET                  (2500)
#define BINA_LEVEL_UCRET				(5000)
#define OBJE_SIL_IADE                   (2)     // Obje silindiðinde iade bakiye
#define GATE_SIL_IADE                   (7)     // Gate silindiðinde iade bakiye
#define EV_MUHUR_UCRET                  (1000)
#define ISLEME_UCRET                    (100)
#define MATERYAL_UCRET                  (1500)
#define KARAKTER_LIMIT                  (2)
#define OYUNCU_EV_LIMIT                 (2)
#define OYUNCU_ARAC_LIMIT               (3)
#define MAKSIMUM_DOLAP_LIMIT            (1)
#define YAT_UCRET                       (0)
#define GUVENLIK_LEVEL_UCRET            (3000)

/* --------------------------------( Arýza Tamir Ücretleri )--------------------------- */
#define ARIZA_MARSMOTORU_UCRET          (400)
#define ARIZA_YAKITPOMPASI_UCRET        (125)
#define ARIZA_YAGPOMPASI_UCRET          (150)
#define ARIZA_MOTORBEYNI_UCRET          (300)
#define ARIZA_BUJI_UCRET                (100)
#define ARIZA_DIFERANSIYEL_UCRET        (225)

/* -----------------------------------( Silah Hasarlarý )------------------------------ */
	
#define SILAH_COLT45_HASAR (8.0)
#define SILAH_SILINCED_HASAR (8.0)
#define SILAH_DEAGLE_HASAR (15.0)
#define SILAH_UZI_HASAR (12.0)
#define SILAH_MP5_HASAR (10.0)
#define SILAH_AK47_HASAR (15.0)
#define SILAH_M4_HASAR (28.0)
#define SILAH_TEC9_HASAR (15.0)
#define SILAH_RIFLE_HASAR (50.0)
#define SILAH_SNIPER_HASAR (200.0)

/* --------------------------------[ Lisans Ücretleri ]-------------------------------- */
#define LISANS_UCRET_SURUCU             (200)
#define LISANS_UCRET_MOTOR              (150)
#define LISANS_UCRET_AGIRVASITA         (300)
#define LISANS_UCRET_AVUKAT             (100000)
#define LISANS_UCRET_ILKYARDIM          (1000)
#define LISANS_UCRET_SILAHBULUNDURMA    (20000)
#define LISANS_UCRET_SILAHTASIMA        (35000)

/* --------------------------------[ Mobilya Sistemi ]-------------------------------- */
#define MOBILYA_SECIM_YOK               (0)
#define MOBILYA_SECIM_DUZENLE           (1)
#define MOBILYA_SECIM_KALDIR            (2)

/* --------------------------------[ Arama Kayýtlarý Sistemi ]-------------------------------- */
#define	TELEFON_GIDEN                   (0)
#define TELEFON_GELEN                   (1)
#define TELEFON_CEVAPSIZ                (2)

/* --------------------------------[ Modifiye Sistemi - Ücretler ]-------------------------------- */
#define MODIFIYE_RENK_UCRET				(50)
#define MODIFIYE_RUZGARLIK_UCRET      	(75)
#define MODIFIYE_PAINTJOB_UCRET			(100)
#define MODIFIYE_HOOD_UCRET            	(100)
#define MODIFIYE_HAVALANDIRMA_UCRET		(50)
#define MODIFIYE_EGZOZ_UCRET         	(50)
#define MODIFIYE_ONTAMPON_UCRET         (100)
#define MODIFIYE_ARKATAMPON_UCRET      	(100)
#define MODIFIYE_TAVAN_UCRET         	(50)
#define MODIFIYE_YANETEK_UCRET         	(50)
#define MODIFIYE_BULLBARS_UCRET         (50)
#define MODIFIYE_TEKERLEK_UCRET         (25)
#define MODIFIYE_STEREO_UCRET         	(10)
#define MODIFIYE_HIDROLIK_UCRET   		(250)
#define MODIFIYE_NOS_UCRET     			(1000)

/* --------------------------------[ OOC MARKET ]-------------------------------- */
#define ISIM_DEGISTIRME_UCRET           (5) // 5
#define SOYADI_KILITLEME_UCRET          (50) // 20
#define KARAKTER_SIFIRLAMA_UCRET        (5) // 5
#define OZEL_NUMARA_UCRET               (25) // 5
#define EK_SLOT_UCRET                   (15) // 15
#define EK_ARACSLOT_UCRET               (10) // 10
#define EK_EVSLOT_UCRET                 (20) // 10
#define MASKE_KULLANIM_UCRET            (25) // 10
#define KMSIFIRLAMA_UCRET               (10) // 10
//#define IKISEVIYEZIRH_UCRET             (15) // 30
// #define BOOMBOXHAKKI_UCRET              (5) // 5
#define BRONZ_VIP_UCRET                 (40) // 25
#define GUMUS_VIP_UCRET                 (60) // 50
#define ALTIN_VIP_UCRET                 (80) // 65
#define BIRLIKKONSEPT_UCRET             (20) // 20
#define MARKETGATE_UCRET                (30) // 20
#define OZELSKIN_UCRET                  (75) // 30
#define OZELOBJE_UCRET                  (10) // 5
#define EVSONLEVEL_UCRET                (20) // 15
#define UYUSTURUCUBOOST_UCRET           (20) // 20
#define IKIXPAYDAY_UCRET                (10) // 20
#define OZELINT_UCRET                   (50) // 30
#define OZELGARAJ_UCRET                 (30) // 30
#define PET_UCRET                       (30) // 20
#define EVVERGIMUAFIYETI_UCRET          (50) // 50

/* --------------------------------[ VP MARKET ]-------------------------------- */
// #define VRP_BOOMBOXHAKKI               	(25)
#define VRP_KMSIFIRLA                  	(100)
#define VRP_OZELNUMARA                 	(100)
#define VRP_SILAHHAKKI					(250)
#define VRP_MASKEHAKKI            		(100)
#define VRP_BRONZVIP                   	(450)
#define VRP_GUMUSVIP                   	(850)
#define VRP_ALTINVIP                   	(1250)

/* --------------------------------[ DIALOG_SATICI_SILAH - Fiyat(Materyal) Listesi ]-------------------------------- */

#define SATICI_DEAGLE_FIYAT				(120000)
#define SATICI_AK47_FIYAT        		(275000)
#define SATICI_MP5_FIYAT                (175000)
#define SATICI_RIFLE_FIYAT              (50000)
#define SATICI_9MM_FIYAT                (30000)
#define SATICI_SHOTGUN_FIYAT           	(75000)

/* --------------------------------[ Balýkçý Mesleði ]-------------------------------- */
#define CIPURA_GRAM_FIYATI              (1)
#define LEVREK_GRAM_FIYATI              (2)
#define LAGOS_GRAM_FIYATI               (2)
#define LAMBUKA_GRAM_FIYATI             (4)
#define ORKINOS_GRAM_FIYATI             (3)
#define MORINA_GRAM_FIYATI              (3)
#define SOMON_GRAM_FIYATI               (3)
#define SARINA_GRAM_FIYATI              (4)
#define BARRAMUNDI_GRAM_FIYATI          (3)
#define ZARGANA_GRAM_FIYATI             (4)
#define KEFAL_GRAM_FIYATI               (3)
#define MAZAK_GRAM_FIYATI               (4)
#define BAKALYARO_GRAM_FIYATI           (3)
#define AKYA_GRAM_FIYATI                (4)
#define AHTAPOT_GRAM_FIYATI             (3)
#define EKMEK_PAKET_FIYAT               (25)
#define BORUKURDU_PAKET_FIYAT           (50)
#define SAHTEYEM_PAKET_FIYAT            (75)
#define TAVUKGOGSU_PAKET_FIYAT          (100)
#define KARIDES_PAKET_FIYAT             (125)

/* --------------------------------[ Madenci Mesleði ]-------------------------------- */
#define KOMUR_GRAM_FIYATI               (2)
#define BAKIR_GRAM_FIYATI               (2)
#define BRONZ_GRAM_FIYATI               (3)
#define GUMUS_GRAM_FIYATI               (4)
#define ALTIN_GRAM_FIYATI               (9)

/* --------------------------------[ VIP Dolap Ücretler ]-------------------------------- */
#define GUMUS_ZIRH_UCRET                (10000)
#define ALTIN_ZIRH_UCRET                (7500)
#define ELMAS_ZIRH_UCRET                (5000)

/* --------------------------------[ Silah Parçalarý - Üretim ]-------------------------------- */
#define GOVDE_UCRET                     (500)
#define NAMLU_UCRET                     (500)
#define HAZNE_UCRET                     (500)
#define COLT45_MATERYAL                 (1500)
#define DEAGLE_MATERYAL                 (21000)
#define SHOTGUN_MATERYAL                (18000)
#define MP5_MATERYAL                    (18000)
#define AK47_MATERYAL                   (30000)
#define M4_MATERYAL                     (30000)
#define UZI_MATERYAL                    (21000)
#define TEC9_MATERYAL                   (21000)
#define COLT45_URETIM_UCRET             (8000)
#define DEAGLE_URETIM_UCRET             (30000)
#define SHOTGUN_URETIM_UCRET            (20000)
#define MP5_URETIM_UCRET                (25000)
#define AK47_URETIM_UCRET               (30000)
#define M4_URETIM_UCRET                 (30000)
#define UZI_URETIM_UCRET                (32000)
#define TEC9_URETIM_UCRET               (32000)

/* --------------------------------[ Mermi Limitleri ]-------------------------------- */
#define DEAGLE_LIMIT     				(42)
#define COLT45_LIMIT        			(90)
#define SHOTGUN_LIMIT        			(50)
#define UZI_LIMIT      					(150)
#define MP5_LIMIT        				(210)
#define AK47_LIMIT      				(120)
#define M4_LIMIT        				(150)
#define TEC9_LIMIT                      (150)
#define RIFLE_LIMIT   					(25)
#define SNIPER_LIMIT					(20)
#define COMBATSHOTGUN_LIMIT             (50)

/* --------------------------------[ Dinamik Sistemler - Maksimum Sayýlarý ]-------------------------------- */
#define MAKSIMUM_HASAR					(15)
#define MAKSIMUM_UYUSTURUCU             (1000)
#define MAKSIMUM_SATICI                 (15)
#define MAKSIMUM_NPC	                (50)
#define MAKSIMUM_ANKESORLU_TELEFON      (20)
#define MAKSIMUM_EKIP                   (25)
#define MAKSIMUM_STAND                  (25)
#define MAKSIMUM_EV                  	(1100)
#define MAKSIMUM_ISYERI					(100)
#define MAKSIMUM_BINA       			(75)
#define MAKSIMUM_BIRLIK					(1000)
#define MAKSIMUM_KASA                   (1000)
#define MAKSIMUM_BIRIM                  (500)
#define MAKSIMUM_ARAC                	(4000)
#define MAKSIMUM_GATE					(75)
#define MAKSIMUM_OBJE                   (100)
#define MAKSIMUM_ATM                    (60)
#define MAKSIMUM_SANDIK                 (10)
#define MAKSIMUM_TUTUKLAMANOKTASI       (15)
#define MAKSIMUM_FABRIKA                (10)
#define MAKSIMUM_MESLEK                 (10)
#define MAKSIMUM_BARIKAT                (100)
#define MAKSIMUM_BENZIN_POMPASI			(100)
#define MAKSIMUM_GPS                    (100)
#define MAKSIMUM_MOBILYA                (100000)
#define MAKSIMUM_RAF 					(1000)
#define MAKSIMUM_CCTV                   (50)
#define MAKSIMUM_ARACLISTE              (10)
#define MAKSIMUM_OYUNCU_GPS             (3) // Oyuncunun kaydedebileceði maksimum GPS Lokasyonu.
#define MAKSIMUM_SUC					(50)
#define MAKSIMUM_DEKOR                  (100)
#define MAKSIMUM_MODIFIYENOKTASI        (20)
#define MAKSIMUM_DESTEK                 (8)
#define MAKSIMUM_KONTRAKT               (20)
#define MAKSIMUM_YAYIN                  (10) // Ayný anda tüm sunucuda açýlabilecek maksimum yayýn sayýsý.
#define MAKSIMUM_REHBER_SAYI            (10) // Oyuncu için rehbere eklenebilecek maksimum kiþi sayýsý.
#define MAKSIMUM_SERVER_LABEL           (31)
#define MAKSIMUM_OYUNCU_LABEL           (100)
#define MAKSIMUM_BALIK_LABEL            (15)
#define MAKSIMUM_MADEN_LABEL            (11)
#define MAKSIMUM_REKLAM                 (250)
#define MAKSIMUM_GARAJ                  (200)
#define MAKSIMUM_YARIS                  (50)
#define MAKSIMUM_PAINTBALL              (10)
#define MAKSIMUM_DOLAP                  (200)
#define MAKSIMUM_BASLANGICPOS   		(5)
#define MAKSIMUM_HIZRADARI              (40)
#define MAKSIMUM_GRAFFITI 				(40)
#define MAKSIMUM_PET                    (250)
#define MAKSIMUM_POINT                  (25)
#define MAKSIMUM_GISE                   (50)

/* --------------------------------[ Birlik Ýþlemleri ]-------------------------------- */
#define BIRLIK_UCRET        			(2500) // Birlik kurma ücreti.
#define BIRLIK_LEVEL        			(3)     // Birlik kurma leveli
#define BIRLIK_LEVELUCRET               (3000)
#define BIRLIK_POLIS        			(1)
#define BIRLIK_MEDIKAL      			(2)
#define BIRLIK_DEVLET       			(3)
#define BIRLIK_HABERAJANSI  			(4)
#define BIRLIK_LEGAL      				(5)
#define BIRLIK_ILLEGAL       			(6)

/* --------------------------------[ Yürüyüþ Stilleri ]-------------------------------- */
#define YURUYUS_NORMAL     				(1)
#define YURUYUS_PED       				(2)
#define YURUYUS_GANGSTER   				(3)
#define YURUYUS_GANGSTER2  				(4)
#define YURUYUS_YASLI       			(5)
#define YURUYUS_SISKO_YASLI   			(6)
#define YURUYUS_SISKO      				(7)
#define YURUYUS_KADIN     				(8)
#define YURUYUS_KADIN2    				(9)
#define YURUYUS_FAHISE    				(10)
#define YURUYUS_FAHISE2   				(11)
#define YURUYUS_SARHOS     				(12)
#define YURUYUS_KOR     				(13)

/* --------------------------------[ Meslek Katýlým Ücretleri ]-------------------------------- */
#define MEKANIK_MESLEK_UCRET            (500)
#define HIRSIZ_MESLEK_UCRET             (500)

/* --------------------------------[ Galeri - Araç Sayýlarý ]-------------------------------- */
#define MOTORGALERISI_ARACSAYISI        (8)
#define DUSUKGALERI_ARACSAYISI          (47)
#define LUKSGALERI_ARACSAYISI           (30)
#define UCAKGALERISI_ARACSAYISI         (4)
#define TEKNEGALERISI_ARACSAYISI        (6)

/* --------------------------------[ ShowModelSelectionMenuEx ID ]-------------------------------- */

#define MODELLER_GROTTI                 (1)
#define MODELLER_MOBILYA				(2)
#define MODELLER_AKSESUAR               (3)
#define MODELLER_AKSESUAR_PD            (4)
#define MODELLER_SOYUN                  (5)
#define MODELLER_KIYAFET                (6)
#define MODELLER_UNIFORMA               (7)
#define MODELLER_GIRISKIYAFET           (8)
#define MODELLER_BARIKAT                (9)
#define MODELLER_VIPSILAH               (10)
#define MODELLER_VIPSKIN                (11)

/* --------------------------------[ Dialog ID Listesi ]-------------------------------- */
#define DIALOG_KAYIT 					(1)
#define DIALOG_GIRIS 					(2)
#define DIALOG_CINSIYET     			(3)
#define DIALOG_DOGUMYERI    			(4)
#define DIALOG_EVINT                    (5)
#define DIALOG_SUNUCU       			(6)
#define DIALOG_SUNUCU1     				(7)
#define DIALOG_SUNUCU2      			(8)
#define DIALOG_BIRLIK					(9)
#define DIALOG_BIRLIK_AYRIL 			(10)
#define DIALOG_BIRLIK_DAVET 			(11)
#define DIALOG_BIRLIK_DAVET1    		(12)
#define DIALOG_BIRLIK_KOV       		(13)
#define DIALOG_BIRLIK_RDUZENLE  		(14) // 15 kullanýlmayacak
#define DIALOG_BIRLIK_RUTBEVER  		(16)
#define DIALOG_BIRLIK_RUTBEVER1 		(17)
#define DIALOG_TEN_RENGI                (18)
#define DIALOG_POLIS_DOLAP              (19)
#define DIALOG_POLIS_EKIPMAN            (20)
#define DIALOG_DEVLET_DOLAP             (21)
#define DIALOG_HABERAJANSI_DOLAP        (22)
#define DIALOG_MEDIKAL_DOLAP            (23)
#define DIALOG_EV_SAHIP                 (24)
#define DIALOG_EV_KAPI                  (25)
#define DIALOG_MARKET                   (26)
#define DIALOG_RESTAURANT               (27)
#define DIALOG_MAAS_PARACEK             (28)
#define DIALOG_ELEKTRONIK               (29)
#define DIALOG_SEXSHOP                  (30)
#define DIALOG_GIYIM					(31)
#define DIALOG_EHLIYET_AYRIL            (32)
#define DIALOG_GIYIM_ONAY               (33)
#define DIALOG_ISYERI                   (34)
#define DIALOG_BANKA                    (35)
#define DIALOG_BANKA_PARACEK            (36)
#define DIALOG_BANKA_PARAYATIR          (37)
#define DIALOG_BANKA_TRANSFER           (38)
#define DIALOG_BANKA_TRANSFERY          (39)
#define DIALOG_TELEFON                  (40)
#define DIALOG_911_SECIM                (41)
#define DIALOG_911_LSPD                 (42)
#define DIALOG_911_LSPD_YER             (43)
#define DIALOG_SATICI                   (44)
#define DIALOG_EVSAT                    (45)
#define DIALOG_ARACSAT                  (46)
#define DIALOG_ISYERISAT                (47)
#define DIALOG_ARAMA                    (48)
#define DIALOG_ARACANAHTAR              (49)
#define DIALOG_MESLEKYOLDA_BIRAK        (50)
#define DIALOG_GIRISUCRET               (51)
#define DIALOG_MESAJ                    (52)
#define DIALOG_MESAJ2                   (53)
#define DIALOG_BIRLIK_ONAY              (54)
#define DIALOG_USTARAMA                 (55)
#define DIALOG_UYUSTURUCU               (56)
#define DIALOG_UYUSTURUCU_SAT			(57)
#define DIALOG_BIRLIK_KALDIR            (58)
#define DIALOG_BIRLIKKUR                (59)
#define DIALOG_911_LSFD                 (60)
#define DIALOG_911_LSFD_YER             (61)
#define DIALOG_GOZBAGLA                 (62)
#define DIALOG_EVANAHTAR                (63)
#define DIALOG_ISYERIKASA               (64)
#define DIALOG_ISYERIKASA_CEK           (65)
#define DIALOG_ISYERIKASA_YATIR         (66)
#define DIALOG_INTERIORLIST             (67)
#define DIALOG_GOVKASA                  (68)
#define DIALOG_GOVPARACEK               (69)
#define DIALOG_GOVPARAYATIR             (70)
#define DIALOG_KIRA_UCRET               (71)
#define DIALOG_MDC                      (72)
#define DIALOG_MDC_SUC                  (73)
#define DIALOG_MDC_SUCEKLE              (74)
#define DIALOG_MDC_KISIARA              (75)
#define DIALOG_MDC_VATANDASLIK          (76)
#define DIALOG_MDC_TELEFON              (77)
#define DIALOG_MDC_CEZA                 (78)
#define DIALOG_MDC_PLAKA                (79)
#define DIALOG_MDC_KISISORGULA2         (80)
#define DIALOG_GALERI_SATINAL			(81)
#define DIALOG_FABRIKALAR               (82)
#define DIALOG_BIRLIK_DUYURU            (83)
#define DIALOG_KAMYONCU             	(84)
#define DIALOG_TELEFON_AYARLAR          (85)
#define DIALOG_ORTAKEKLE                (86)
#define DIALOG_ORTAKONAY                (87)
#define DIALOG_ORTAK_AYRIL              (88)
#define DIALOG_KIRACI_AYRIL             (89)
#define DIALOG_DILSEC					(90)
#define DIALOG_ORTAK_CIKAR              (91)
#define DIALOG_MUZIK_DEGISTIR           (92)
#define DIALOG_OBJELERIM                (93)
#define DIALOG_BENZIN_UCRET             (94)
#define DIALOG_ARANMAKAYITLARI          (95)
#define DIALOG_SUCKONTROL               (96)
#define DIALOG_CEZALAR                  (97)
#define DIALOG_ELKOY                    (98)
#define DIALOG_BOOMBOX                  (99)
#define DIALOG_BOOMBOX_URL              (100)
#define DIALOG_CEZA_KISISEL             (101)
#define DIALOG_CEZA_KISISEL_ODE         (102)
#define DIALOG_ARACBAGAJ                (103)
#define DIALOG_BAGAJ_EKLE               (104)
#define DIALOG_OOCMARKET                (105)
#define DIALOG_KARAKTERSEC              (106)
#define DIALOG_KARAKTER_YARAT           (107)
#define DIALOG_BAR                      (108)
#define DIALOG_MDC_SUCEKLE2             (109)
#define DIALOG_MDC_ARANMAKALDIR         (110)
#define DIALOG_MDC_CEZAEKLE_UCRET       (111)
#define DIALOG_MDC_CEZAEKLE             (112)
#define DIALOG_OBJESIL_ONAY             (113)
#define DIALOG_GATESIL_ONAY             (114)
#define DIALOG_BIRLIK_MAKSRUTBE         (115)
#define DIALOG_BIRLIK_ARACEKLE          (116)
#define DIALOG_BIRLIK_ARACLAR           (117)
#define DIALOG_KASAAYARLA               (118)
#define DIALOG_KASAISLEM                (119)
#define DIALOG_KASAISLEM_PARAYATIR      (120)
#define DIALOG_KASAISLEM_PARACEK        (121)
#define DIALOG_ARACBAGAJ_ELKOY          (122)
#define DIALOG_GPS                      (123)
#define DIALOG_ADMIN_GPS                (124)
#define DIALOG_KONUM_EKLE               (125)
#define DIALOG_KONUM_DUZENLE            (126)
#define DIALOG_KONUM_ISIM               (127)
#define DIALOG_KAYITLI_LOKASYONLAR      (128)
#define DIALOG_ADRES_BUL                (129)
#define DIALOG_AYARLAR                  (130)
#define DIALOG_MOBILYALAR               (131)
#define DIALOG_MOBILYAKALDIR_ONAY       (132)
#define DIALOG_MOBILYA_EKLE_ID 			(133)
#define DIALOG_MOBILYA_EKLE_ONAY        (134)
#define DIALOG_RAF_SILAHLAR             (135)
#define DIALOG_RAF_EKLE                 (136)
#define DIALOG_RAF_ELKOY                (137)
#define DIALOG_SICIL_KONTROL            (138)
#define DIALOG_BINA_KAPI                (139)
#define DIALOG_BINA_SAHIP               (140)
#define DIALOG_BINAANAHTAR              (141)
#define DIALOG_MDC_ARACLISTESI          (142)
#define DIALOG_BIRLIK_MAAS				(143)
#define DIALOG_BIRLIK_MAASDUZENLE       (144)
#define DIALOG_BIRIMLER                 (145)
#define DIALOG_BIRIM_OLUSTUR            (146)
#define DIALOG_BIRIM_DAVET              (147)
#define DIALOG_BIRIM_OYUNCUDAVET        (148)
#define DIALOG_BIRIM_KALDIR             (149)
#define DIALOG_BIRIM_DUZENLE            (150)
#define DIALOG_BIRIM_ISIM               (151)
#define DIALOG_ADMIN_CCTV               (152)
#define DIALOG_CCTV_EKLE                (153)
#define DIALOG_CCTV_ISIM                (154)
#define DIALOG_CCTV_MENZIL              (155)
#define DIALOG_CCTV_DUZENLE             (156)
#define DIALOG_MUHURKALDIR              (157)
#define DIALOG_BOLOEKLE                 (158)
#define DIALOG_BOLOKAYITLARI            (159)
#define DIALOG_BOLOICERIK               (160)
#define DIALOG_MAYMUNCUK                (161)
#define DIALOG_MAYMUNCUK_KELEPCE        (162)
#define DIALOG_YONETIMGOREV             (163)
#define DIALOG_LEVELDUZENLE             (164)
#define DIALOG_GOREVDUZENLE             (165)
#define DIALOG_BILDIRIMLER              (166)
#define DIALOG_BILDIRIMICERIK           (167)
#define DIALOG_HIRSIZLISTE              (168)
#define DIALOG_HIRSIZ_ARACEKLE          (169)
#define DIALOG_MESLEK_MEKANIK           (170)
#define DIALOG_ARACSIGORTA              (171)
#define DIALOG_OYUNCU_GPS               (172)
#define DIALOG_OYUNCU_KONUM_EKLE        (173)
#define DIALOG_OYUNCU_KONUM_DUZENLE     (174)
#define DIALOG_OYUNCU_KONUM_ISIM        (175)
#define DIALOG_UYUSTURUCU_SAT_MIKTAR    (176)
#define DIALOG_UYUSTURUCU_SAT_FIYAT     (177)
#define DIALOG_UYUSTURUCU_ONAY          (178)
#define DIALOG_SILAH_YOKET         		(179)
#define DIALOG_BIRLIK_YETKILI           (180)
#define DIALOG_HABERAJANSI_EKIPMAN      (181)
#define DIALOG_MDC_HESAPNO              (182)
#define DIALOG_BAGAJ_AL                 (183)
#define DIALOG_BAGAJ_AL_SAYI            (184)
#define DIALOG_BAGAJ_EKLE_SAYI          (185)
#define DIALOG_BAGAJ_EKLEME             (186)
#define DIALOG_SUC_LISTESI              (187)
#define DIALOG_SUC_LISTESI_EKLE         (188)
#define DIALOG_SUC_LISTESI_DAKIKA       (189)
#define DIALOG_ARAC_MENU                (190)
#define DIALOG_ARAC_SAT                 (191)
#define DIALOG_ARAC_FIYAT               (192)
#define DIALOG_ARAC_SATILIK_BILGI       (193)
#define DIALOG_ARAC_SATILIK_FIYAT       (194)
#define DIALOG_ARAC_SATINAL             (195)
#define DIALOG_MOBILYA_EKLE             (196)
#define DIALOG_VERGILER                 (197)
#define DIALOG_EV_VERGIODE              (198)
#define DIALOG_ARAC_VERGIODE            (199)
#define DIALOG_AKSESUAR					(200)
#define DIALOG_AKSESUAR_DUZENLE			(201)
#define DIALOG_AKSESUAR_KEMIK           (202)
#define DIALOG_AKSESUAR_KEMIK_DUZENLE   (203)
#define DIALOG_AKSESUAR_ONAY            (204)
#define DIALOG_SATINAL                  (205)
#define DIALOG_ISLEMLER                 (206)
#define DIALOG_ADMIN_DEKORLAR           (207)
#define DIALOG_DEKOREKLE_TUR            (208)
#define DIALOG_DEKOREKLE_ISIM           (209)
#define DIALOG_DEKOR_DUZENLE            (210)
#define DIALOG_DEKOR_ISIM               (211)
#define DIALOG_DEKOR_TUR                (212)
#define DIALOG_DEKOR_UCRET              (213)
#define DIALOG_DEKORLAR                 (214)
#define DIALOG_DEKORSECIM               (215)
#define DIALOG_DEKORSECIM_ISLEM         (216)
#define DIALOG_TEAMSPEAK                (217)
#define DIALOG_SATICI_SILAH             (218)
#define DIALOG_DMV                      (219)
#define DIALOG_BIDON                    (220)
#define DIALOG_CKOL                     (221)
#define DIALOG_ARACHURDA                (222)
#define DIALOG_ARAC_KIRA                (223)
#define DIALOG_MODIFIYE_RENK            (224)
#define DIALOG_MODIFIYE_RENKLISTE       (225)
#define DIALOG_MODIFIYE_RENK_1          (226)
#define DIALOG_MODIFIYE_RENK_2          (227)
#define DIALOG_MODIFIYE_RUZGARLIK		(228)
#define DIALOG_MODIFIYE_PAINTJOB        (229)
#define DIALOG_MODIFIYE_HOOD            (230)
#define DIALOG_MODIFIYE_HAVALANDIRMA    (231)
#define DIALOG_MODIFIYE_EGZOZ           (232)
#define DIALOG_MODIFIYE_ONTAMPON        (233)
#define DIALOG_MODIFIYE_ARKATAMPON      (234)
#define DIALOG_MODIFIYE_TAVAN           (235)
#define DIALOG_MODIFIYE_YANETEK         (236)
#define DIALOG_MODIFIYE_BULLBARS        (237)
#define DIALOG_MODIFIYE_TEKERLEK        (238)
#define DIALOG_MODIFIYE                 (239)
#define DIALOG_KAMYONCU_YUKLE           (240)
#define DIALOG_GATE_PAROLA              (241)
#define DIALOG_GATELERIM                (242)
#define DIALOG_GATE_PAROLADUZENLE       (243)
#define DIALOG_GATELERIM_DUZENLE        (244)
#define DIALOG_KONTRAKT                 (245)
#define DIALOG_KONTRAKTLAR              (246)
#define DIALOG_KONTRAKT_EKLE            (247)
#define DIALOG_KONTRAKT_DUZENLE         (248)
#define DIALOG_KONTRAKT_UCRET           (249)
#define DIALOG_KONTRAKT_YENIFIYAT       (250)
#define DIALOG_HITMAN_UYELER            (251)
#define DIALOG_HITMAN_UYEEKLE           (252)
#define DIALOG_KAMYONCU_KIRALA          (253)
#define DIALOG_MAYMUNCUK_SATINAL        (254)
#define DIALOG_MAYMUNCUK_SAT_OYUNCU     (255)
#define DIALOG_MAYMUNCUK_SAT_FIYAT      (256)
#define DIALOG_MAYMUNCUK_SAT            (257)
#define DIALOG_EV_SISTEMESAT            (258)
#define DIALOG_ISIM_DEGISTIR            (259)
#define DIALOG_SOYADI_KILITLE           (260)
#define DIALOG_SOYADI_LISTE             (261)
#define DIALOG_SOYADI_IZIN              (262)
#define DIALOG_EV_SATILIGACIKAR         (263)
#define DIALOG_EVKAPI_SAT               (264)
#define DIALOG_OOCMARKET_ENVANTER       (265)
#define DIALOG_OZEL_NUMARA              (266)
#define DIALOG_OZEL_PLAKA               (267)
#define DIALOG_VIP_YUKSELT              (268)
#define DIALOG_TEMIZLIK_SOFORU          (269)
#define DIALOG_TEMIZLIK_AYRIL           (270)
#define DIALOG_YAYIN                    (271)
#define DIALOG_YAYIN_DINLE              (272)
#define DIALOG_YAYIN_DAVET              (273)
#define DIALOG_YAYIN_DAVET_ONAY         (274)
#define DIALOG_BIRLIK_UYELER            (275)
#define DIALOG_REHBER                   (276)
#define DIALOG_REHBER_OLUSTUR           (277)
#define DIALOG_REHBER_OLUSTUR_ISIM      (278)
#define DIALOG_REHBER_NUMARADUZENLE     (279)
#define DIALOG_REHBER_ISIMDUZENLE       (280)
#define DIALOG_REHBER_DUZENLE           (281)
#define DIALOG_REHBER_MESAJGONDER       (282)
#define DIALOG_GPS_ARACBUL              (283)
#define DIALOG_NONRPNAME                (284)
#define DIALOG_MODIFIYE_SIL             (285)
#define DIALOG_EVSONSEVIYE              (286)
#define DIALOG_REKLAMLAR                (287)
#define DIALOG_REKLAM_AJANSSEC          (288)
#define DIALOG_REKLAM_ICERIK            (289)
#define DIALOG_REKLAM_ILETISIM          (290)
#define DIALOG_REKLAM_SURE              (291)
#define DIALOG_REKLAM_ONCELIK           (292)
#define DIALOG_AJANS_REKLAMLAR          (293)
#define DIALOG_SATICI_MERMI             (294)
#define DIALOG_MOBILYA_DSECIM           (295)
#define DIALOG_MOBILYA_KSECIM           (296)
#define DIALOG_DOVUSSTILI               (297)
#define DIALOG_GASP_ONAY                (298)
#define DIALOG_GASP                     (299)
#define DIALOG_KONUM_GONDER             (300)
#define DIALOG_TOHUM_VER                (301)
#define DIALOG_TOHUM_VER_MIKTAR         (302)
#define DIALOG_GARAJ                    (303)
#define DIALOG_GARAJ_ARACLARIM          (304)
#define DIALOG_GARAJ_CIKART             (305)
#define DIALOG_GARAJ_ARACLAR            (306)
#define DIALOG_UBERLISANS               (307)
#define DIALOG_TELEFON_UBER             (308)
#define DIALOG_UBER_CAGIR               (309)
#define DIALOG_YARIS                    (310)
#define DIALOG_YARIS_TURSAYISI          (311)
#define DIALOG_YARIS_CPSAYISI           (312)
#define DIALOG_YARIS_DAVET              (313)
#define DIALOG_YARIS_CPDUZENLE          (314)
#define DIALOG_YARIS_OYUNCULAR          (315)
#define DIALOG_YAYIN_MUZIK              (316)
#define DIALOG_YAYIN_CEKILIS            (317)
#define DIALOG_PAINTBALL                (318)
#define DIALOG_PAINTBALL_ARENA          (319)
#define DIALOG_PAINTBALL_LOBILER        (320)
#define DIALOG_GARAJ_UCRET              (321)
#define DIALOG_MESLEK_HIRSIZ            (322)
#define DIALOG_OOCMARKET_GALERI         (323)
#define DIALOG_MESLEKBUL                (324)
#define DIALOG_MESLEKAYRIL              (325)
#define DIALOG_VPMARKET	                (326)
#define DIALOG_ENVANTER                 (327)
#define DIALOG_PRADYO_FREKANS           (328)
#define DIALOG_MATERYAL_MIKTAR          (329)
#define DIALOG_MATERYAL_FIYAT           (330)
#define DIALOG_MATERYAL_OYUNCU          (331)
#define DIALOG_MATERYAL_ONAYLA          (332)
#define DIALOG_RAF_DUZENLE              (333)
#define DIALOG_ADMINMAAS                (334)
#define DIALOG_BIRLIKTURU               (335)
#define DIALOG_MDC_CEZAKES              (336)
#define DIALOG_MDC_ACEZASEBEP           (337)
#define DIALOG_ACEZAODE                 (338)
#define DIALOG_ACEZALAR                 (339)
#define DIALOG_LISANSMERKEZI            (340)
#define DIALOG_AVUKAT                   (341)
#define DIALOG_SUCTEMIZLE               (342)
#define DIALOG_SUCTEMIZLE_SECIM         (343)
#define DIALOG_SUCINDIRIM               (344)
#define DIALOG_EHLIYET_YAZILI           (345)
#define DIALOG_REFERANS                 (346)
#define DIALOG_BANKASIFRE               (347)
#define DIALOG_BANKASIFRE_BELIRLE       (348)
#define DIALOG_KARAKTER                 (349)
#define DIALOG_ILANLAR                  (350)
#define DIALOG_ILANLAR_EV               (351)
#define DIALOG_ILANLAR_ISYERI           (352)
#define DIALOG_ILANLAR_ARAC             (353)
#define DIALOG_MOBILBANKA               (354)
#define DIALOG_ODEMESEC                 (355)
#define DIALOG_DOLAPLAR                 (356)
#define DIALOG_ARACLARIM                (357)
#define DIALOG_ARAC_ICERIK              (358)
#define DIALOG_ARAC_KUMANDA             (359)
#define DIALOG_BASLANGICPOSLARI         (360)
#define DIALOG_BASLANGIC_POSEKLE        (361)
#define DIALOG_BASLANGIC_DUZENLE        (362)
#define DIALOG_BASLANGIC_ISIM           (363)
#define DIALOG_BASLANGICPOS_SEC         (364)
#define DIALOG_BALIKCI                  (365)
#define DIALOG_YEMAL                    (366)
#define DIALOG_YEMSEC                   (367)
#define DIALOG_BALIK_SAT                (368)
#define DIALOG_BANKASIFRE_SIFIRLA       (369)
#define DIALOG_MADENCI                  (370)
#define DIALOG_MADEN_SAT                (371)
#define DIALOG_HITMANDOLAP              (372)
#define DIALOG_HITMAN_EKIPMANLAR        (373)
#define DIALOG_HITMAN_SAHTEISIM         (374)
#define DIALOG_HITMAN_SAHTELEVEL        (375)
#define DIALOG_VIP_DOLAP                (376)
#define DIALOG_VIP_SILAHONAY            (377)
#define DIALOG_HITMAN_BIRLIK            (378)
#define DIALOG_HITMAN_BIRLIKRUTBE       (379)
#define DIALOG_GRAFFITI_RENK            (380)
#define DIALOG_GRAFFITI_YAZI            (381)
#define DIALOG_YAT                      (382)
#define DIALOG_YAT_MUZIK                (383)
#define DIALOG_YAT_KIRAUZAT             (384)
#define DIALOG_YAT_KIRALA               (385)
#define DIALOG_VNMARKET_OZELNUMARA      (386)
#define DIALOG_PET                      (387)
#define DIALOG_PET_ISIMDEGISTIR         (388)
#define DIALOG_PET_RENKSEC              (389)
#define DIALOG_PET_TURSEC               (390)
#define DIALOG_PETLERIM                 (391)
#define DIALOG_PET_IYILESTIR            (392)
#define DIALOG_REFMARKET                (393)
#define DIALOG_OOCMARKETPET_TURSEC      (394)
#define DIALOG_PET_TURBAKIYEONAY        (395)
#define DIALOG_ARACHIZ                  (396)
#define DIALOG_EVMUAFIYET               (397)
#define DIALOG_OOCBAGIS                 (398)
#define DIALOG_KEFALET                  (399)
#define DIALOG_SILAHENVANTER            (400)
#define DIALOG_SILAHENVANTER_KURTAR     (401)
#define DIALOG_KUMAR                    (402)
#define DIALOG_KUMAR_KURPIYER           (403)
#define DIALOG_KUMAR_TEKCIFT            (404)
#define DIALOG_ETKINLIKPANEL            (405)
#define DIALOG_ETKINLIK_CAN             (406)
#define DIALOG_ETKINLIK_ZIRH            (407)
#define DIALOG_ETKINLIK_SILAH1          (408)
#define DIALOG_ETKINLIK_SILAH2          (409)
#define DIALOG_ISYERI_ISIM              (410)
#define DIALOG_VIPMENU           		(411)
#define DIALOG_EVKASA                   (412)
#define DIALOG_EVKASA_PARACEK           (413)
#define DIALOG_EVKASA_PARAYATIR         (414)
#define DIALOG_IPBAGLAMA                (415)
#define DIALOG_KUMAR_OYUNCU             (416)
#define DIALOG_KUMAR_OYUNCU_FIYAT       (417)
#define DIALOG_ZARDUELLO                (418)
#define DIALOG_EVDOLAP                  (419)
#define DIALOG_DOLAPLAR_EKLE            (420)
#define DIALOG_DOLAPLAR_KALDIR          (421)
#define DIALOG_PARCA_URETIM             (422)
#define DIALOG_URETIM_BILGI             (423)
#define DIALOG_SILAH_URETIM             (424)
#define DIALOG_ZARDUELLO_ONAY           (425)
#define DIALOG_YARDIM                   (426)
#define DIALOG_YARDIMGENELYARDIM        (427)
#define DIALOG_ARIZATAMIR               (428)
#define DIALOG_TEZGAHKUR     	        (429)
#define DIALOG_TEZGAH_SLOGAN   	        (430)
#define DIALOG_TELEFONAC_ONAY           (431)
#define DIALOG_MULKLERIM                (432)
#define DIALOG_GPS_ENYAKIN              (433)
#define DIALOG_KARAKTERGORUNUS          (434)
#define DIALOG_SACRENGI                 (435)
#define DIALOG_GOZRENGI                 (436)
#define DIALOG_KARAKTERDETAY            (437)

/* --------------------------------[ forward Listesi ]-------------------------------- */
forward PlayerText:ShowPlayerBox(playerid, color);
forward Yasaklama_Kontrol(playerid);
forward IPYasaklama_Kontrol(playerid);
forward SerialYasaklama_Kontrol(playerid);
forward Admin_IsimKontrol(playerid, oyuncuid, isim[]);
forward Yonetim_YasaklamaKontrol(playerid);
forward Yonetim_IPYasaklamaKontrol(playerid);
forward Karakter_YasaklamaKontrol(playerid);
forward HesapBan_Kontrol(playerid, isim[], sebep[]);
forward Hesap_YasaklamaKontrol(playerid, sebep[]);
forward Hesap_YasaklamaDene(playerid, hesap, sebep[]);
forward YasaklamaDene(playerid, isim[], sebep[]);
forward Oyuncu_Kontrol(playerid);
forward Arac_SahipArat(playerid);
forward GirisTest(playerid);
forward Oyuncu_Liste(playerid);
forward HesapYukle(playerid);
forward OyuncuYukle(playerid);
forward Float:vericek_float(row, const field_name[]);
forward DakikaTimer(playerid);
forward levelsenk(oyuncuid);
forward OyuncuSaniyeTimer(playerid);
forward OyuncuKucukKontrol(oyuncuid);
forward SunucuDakikaTimer();
forward SunucuRestart();
forward SaniyeTimer();
forward EvYaratildi(evid);
forward PointYaratildi(id);
forward GarajYaratildi(id);
forward FabrikaYaratildi(fabrikaid);
forward IsyeriYaratildi(isyeriid);
forward BenzinPompasiYaratildi(pompaid);
forward KasaYaratildi(kasaid);
forward BinaYaratildi(binaid);
forward AnkesorluTelefonYaratildi(atelid);
forward ATMYaratildi(atmid);
forward UyusturucuYaratildi(uid);
forward SaticiYaratildi(id);
forward NPCYaratildi(id);
forward KonumYaratildi(konumid);
forward OyuncuKonumYaratildi(playerid, konumid);
forward BirlikYaratildi(birlikid);
forward BirimYaratildi(id);
forward MeslekYaratildi(meslekid);
forward SandikYaratildi(sid);
forward TNoktasiYaratildi(tid);
forward ModifiyeNoktasiYaratildi(id);
forward Garajlari_Yukle();
forward Evleri_Yukle();
forward Fabrikalari_Yukle();
forward Isyerlerini_Yukle();
forward Pompalari_Yukle(isyeriid);
forward Kasalari_Yukle();
forward Raflari_Yukle();
forward Konumlari_Yukle();
forward CCTV_Yukle();
forward Dekorlari_Yukle();
forward BaslangicPos_Yukle();
forward Radarlari_Yukle();
forward Binalari_Yukle();
forward Atmleri_Yukle();
forward Meslekleri_Yukle();
forward Sandiklari_Yukle();
forward Uyusturuculari_Yukle();
forward	TutuklamaNoktasi_Yukle();
forward ModifiyeNoktasi_Yukle();
forward Saticilari_Yukle();
forward Npcleri_Yukle();
forward Ankesorlu_Telefonlari_Yukle();
forward Araclari_Yukle();
forward Birlikleri_Yukle();
forward Birimleri_Yukle();
forward Gateleri_Yukle();
forward Giseleri_Yukle();
forward Objeleri_Yukle();
forward Mobilyalari_Yukle();
forward OyuncuYaratildi(playerid);
forward HesapYaratildi(playerid);
forward GateYaratildi(gateid);
forward GiseYaratildi(giseid);
forward ObjeYaratildi(objeid);
forward DolapYaratildi(id);
forward MobilyaYaratildi(id);
forward KickTimer(playerid);
forward GirisKick(playerid);
forward AFKKick(playerid);
forward AracYaratildi(aracid);
forward araccalistir(playerid, aracid);
forward BayginlikBitir(playerid);
forward evisimarat(evid);
forward Garaj_SahipArat(id);
forward binasahiparat(binaid);
forward evkiraciisimarat(evid);
forward isyeriisimarat(isyeriid);
forward DondurulmaIptal(oyuncuid);
forward Eski_Virtual(oyuncuid, dunya);
forward Surucusuz_Arac_Respawn(playerid);
forward Banka_Kontrol(playerid, hesapno);
forward Vatandaslik_Numarasi(playerid, vno);
forward Maske_Sorgula(playerid, maskeid);
forward SimNumara_Kontrol(playerid, telefon_num);
forward pdaractamir(playerid, aracid);
forward KapiKir_Ev(playerid, id);
forward KapiKir_Bina(playerid, id);
forward KapiKir_Isyeri(playerid, id);
forward UyusturucuBakimYap(playerid, id);
forward UyusturucuTopla(playerid, id);
forward HapisDene(playerid, isim[], dakika, sebep[]);
forward ParaDene(playerid, isim[], miktar);
forward ParaKesDene(playerid, isim[], miktar);
forward EtkiSifirla(playerid);
//forward HileKontrol1(playerid);
forward Benzin_Al(oyuncuid, aracid);
forward Float:AracCan(aracid);
forward CezaListele(oyuncuid, isim[]);
forward SilahEnvanter(oyuncuid);
forward CezaArat(oyuncuid, aranan[]);
forward CezaOdeme(oyuncuid, odeme);
forward AranmaSorgula(oyuncu[], gosterilenid);
forward KisiSorgula(oyuncu[], gosterilenid, secenek);
forward AranmaKayitlari(oyuncuid);
forward Kiyafet_Duzelt(oyuncuid);
forward Isim_Degistir(oyuncuid, isim[]);
forward Soyadi_Kontrol(oyuncuid, isim[], tur);
forward yetkilihesaplar(playerid);
forward Admin_Maas(playerid);
forward Birlik_UyeArat(oyuncuid);
forward Hitman_UyeArat(oyuncuid);
forward KarakterKontrol(oyuncuid, isim[]);
forward BagajSilah(oyuncuid);
forward Bagaj_Kontrol(oyuncuid, aracid);
forward BagajEsya(oyuncuid, esya);
forward PlakaSorgula(oyuncuid, aracid);
forward MDC_AranmaSil(oyuncuid);
forward RutbeDuzenlemeBirlik(oyuncuid);
forward Birlik_LevelYukselt(oyuncuid);
forward Maske_Isim(oyuncuid);
forward BagajSifirla();
forward Bagaj_ElKoy(oyuncuid, aracid);
forward Bagaj_Elkoyuldu(oyuncuid);
forward RafYaratildi(rafid);
forward Hapis_Sicil(playerid, oyuncuid);
forward Sicil_Kontrol(oyuncuid);
forward Avukat_SucTemizle(oyuncuid);
forward Obje_BakiyeEkle();
forward Obje_HesapKontrol();
forward Gate_HesapKontrol();
forward Gate_BakiyeEkle();
forward CCTVYaratildi(cctvid);
forward DekorYaratildi(dekorid);
forward BaslangicPosYaratildi(baslangicid);
forward BoloSorgula(gosterilenid);
forward BoloKayitlari(oyuncuid);
forward Gorev_Sorgula(playerid);
forward Bildirim_Ekle(oyuncuid, sebep[]);
forward BildirimKayitlari(oyuncuid);
forward Arac_CezaListele(oyuncuid);
forward BildirimSorgula(oyuncuid);
forward MDC_CezaSorgula(oyuncuid);
forward Bildirim_Kontrol(oyuncuid);
forward RadarGuncelle(aracid);
forward Ceza_Toplam();
forward HirsizListeEklendi(id);
forward Liste_Yukle();
forward GPSYukle(oyuncuid);
forward RehberYukle(oyuncuid);
forward BagajEsyaSayi(oyuncuid, sayi);
forward BagajEsyaSayiEkle(oyuncuid, sayi);
forward SucListeEklendi(id);
forward SucListesi_Yukle();
forward AracSatildi(sahip, fiyat, model);
forward AksesuarYaratildi(oyuncuid, slot);
forward AksesuarYukle(playerid);
forward CKIptal(playerid, isim[]);
forward CK_Kontrol(playerid, isim[]);
forward Uyari_Kontrol(playerid, isim[], sebep[]);
forward Offline_Karakter(playerid, isim[]);
forward Kamyoncu_Yukle(oyuncuid, tur);
forward Hitman_KontraktKontrol(oyuncuid, ucret);
forward KontraktEklendi(id);
forward Kontraktlari_Yukle();
forward Client_Kontrol(oyuncuid);
forward Soyadi_Liste(oyuncuid);
forward TamirSifirla(id, oyuncuid);
forward EvSatildi(sahip, id, fiyat);
forward Market_Envanter(oyuncuid);
forward Birlik_Kov(oyuncuid);
forward Forum_ID(oyuncuid);
forward PD_AksesuarSifirla();
forward RehberKisiYaratildi(playerid, id);
forward AracaBindir(playerid, aracid, koltuk);
forward fcreate(filename[]);
forward YuruyusAnim(playerid);
forward CanlandirmaTimer(oyuncuid);
forward Arac_CezaOdeme(oyuncuid);
forward InsaatAyar_Yukle();
forward IslemGecmisi(oyuncuid);
forward RadarYaratildi(radarid);
forward BoxGizle(playerid, PlayerText:boxid);
forward Graffiti_Yukle();
forward GraffitiYaratildi(id);
forward Yat_Yenile();
forward Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2);
forward Pet_Yenile();
forward Pet_Kaldir(id);
forward KonusmaAnimDurdur(oyuncuid);
forward AramaKayitlari(oyuncuid);
forward Pointleri_Yukle();
forward Karakter_Yukle(playerid, satir);
forward Karakter_Liste(oyuncuid);
forward Gise_Kapat(giseid);
forward Dolaplari_Yukle();

enum oyuncuBilgi {
	oID,
	oHesap,
	pLegalTeleport,
	oIsim[32],
	oSahteIsim[MAX_PLAYER_NAME],
	oReferans[32],
	oOneriJetonu,
	Text3D:AFKLabel,
	Text3D:oIsimLabel,
	oKarakterYaratildi,
	bool:oGiris,
	bool:oIlkGiris,
	bool:oAdminDurum,
	bool:oEtkinlikDurum,
	oTSBilgi[128],
    oTSOda,
	oGirisTimer,
	oGirisTest,
	oKiyafet,
	oGeciciKiyafet,
	oAdmin,
	oDestekEkibi,
	oAdminNick[20],
	Float:oCan,
	Float:oZirh,
	Float:oPos[4],
	oPara,
	oVPoint,
	oVW,
	oInterior,
	oCinsiyet,
	oSeviye,
	oSahteLevel,
	oExp,
	oDakika,
	oOynamaSaati,
	OyuncuTimer,
	oSaniyeTimer,
	oUyusturucuTimer,
	oKucukTimer,
	oDogumYeri,
	oIzlenen,
	oRapor[144],
	oRaporGecikme,
	oRaporSure,
	oIncelenenRaporSahibi,
	oIlgilenenAdmin,
	oRaporSayisi,
	oSoru[144],
	oIlgilenenYetkili,
	oSoruSure,
	oSoruGecikme,
	bool:oSoruGoruntule,
	bool:oCezaDurum,
	bool:oReklamDurum,
	oIncelenenSoruSahibi,
	oSoruSayisi,
	bool:oRaporGoruntule,
	bool:oDestekSohbet,
	oBirlikSQLID,
	oBirlik,
	oBirlikRutbe,
	oBirlikDavetEden,
	oDuzenlenenRutbe,
	oBirlikLider,
	oAltTab,
	oAFK,
	oAFKTimer,
	oMotorCalistir,
	oEditlenenGate,
	oEditlenenGise,
    oEditlenenObje,
    oDuzenlenenRadar,
    oEditlenenBarikat,
	oDuzenlemeTipi,
	oYaraliSure,
	oYaraliTimer,
	oTedaviSure,
	oTenRengi,
	oSonBinilenArac,
	PlayerText:oGirisTextdraw[20],
	PlayerText:oiphone[21],
	bool:oIsbasi,
	bool:oMeslekIsbasi,
	bool:oVIPTag,
	oSilah[13],
	oMermi[13],
	oDonduruldu,
	oKelepceli,
	bool:oEhliyet,
	oEhliyetTesti,
	oKibrit,
	bool:oCakmak,
	oOdun,
	bool:oPMDurum,
	bool:oBirlikKanal,
	bool:oPMIzlemeDurum,
	bool:oSpecDurum,
	bool:oHileKontrol,
	bool:oBoomboxDurum,
	oYarali,
	bool:oTaser,
	bool:oBeanbag,
	bool:oDestek,
	bool:oJetpack,
	bool:oKampAtesi,
	oKampAtesiObje[2],
	oATMDuzenliyor,
	oHesapNumarasi,
	oBankaPara,
	oBankaSifre,
	oSigara,
	oSigaraDurum,
	oSigaraIciyor,
	oSigaraKalanHak,
	oIckiIciyor,
	oTamirSure,
	oIslemeSure,
	oTelefon,
	bool:oTelefonDurum,
	bool:oTelefonSes,
	bool:oTelefonAcik,
	bool:oGizliNumara,
	bool:oCevaplandi,
	oTelefonNumarasi,
	oArama,
	oAramaSure,
	Text3D:oApolet,
	oGubre,
	oSaksi,
	oBakim,
	oTohum,
	oIslenmemisMadde,
	oMaymuncuk,
	oUyusturucu,
	oSonGiris[36],
	oHapisSure[2],
	oyuncuKod[12],
	oVatandaslikNo,
	oRuhsat,
	oHapisID,
	bool:oGozBagli,
	uDuzenliyor,
	bool:oKontrol,
	oEkstraDil,
	oBirim,
	oDuzenlenenPompa,
    oDuzenlenenKasa,
    oKasa,
	oBoombox,
	oEkstraPayday,
	oMuzikKutusu,
	bool:oPDgps,
	oAktif,
	oEhliyetUyari,
	oBagaj,
	oUyari,
	oMaske,
	oMaskeID,
	oMaskeDurum,
	oLabelDurum,
	oMarker,
	oIlkYardim,
	oTamirKiti,
	oIpUrun,
	oTamirArac,
	oTamirKitiSure,
	oIlkYardimSure,
	oDekorSure,
	oIlkYardimYapilan,
	oKonum,
	oRehber,
	oLokasyon,
	oAdres,
	bool:objeIzin,
	objeLokasyon,
	oGPS,
	oMobilyaSecim,
	oDuzenlenenMobilya,
	oDuzenlenenRaf,
	oMobilyaOnay,
	oRaf,
	oEkSlot,
	oEkEvSlot,
	oEkAracSlot,
	oVIP,
	oVIPSure,
	oHirsizVIPTeslim,
	oGaspSure,
	oBildirim,
	oHirsizSure,
	oHirsizArac,
	oDuzKontak,
	oBidon,
	oBidonBenzin,
	oBenzinDolduruyor,
	oCK,
	oHediye,
	oUyusturucuBoost,
	oSuruklenen,
	oSurukleniyor,
	oSuruklemeTipi,
	oKamyoncu,
	oKamyoncuTeslimat,
	oMeslekDelay,
	oUyusturucuDelay,
	oTemizlikCP,
	oHitman,
	/*oMateryal,
	oMateryalSat[3],
	bool:oMateryalTasiyor,*/
	oDinlenenYayin,
	oGPSArac,
	bool:oSSMod,
	oDovusStil,
	oPortatifRadyo,
	oFrekans,
	oYuruyusStil,
	oZar,
	oGasp,
	oKonumGonderilme,
	oIsaretliKonum,
	bool:oUberIsbasi,
	oUberIsaret,
	oUberTalep,
	oYaris,
	oYarisCP,
	oYarisTur,
	oYarisDavet,
	oPaintball,
	oPBOldurme,
	oPBOlum,
	oSilahDelay,
	oSilahHakki,
	oMeslek,
	oIsaretliMeslek,
	bool:oNewbieDurum,
	oNewbieSure,
	oNewbieMute,
    oAracBagla,
    oBaglamaSure,
    oAvukatLisans,
	oAvukatSecim,
	oSilmeSure,
	oSucSecim,
	oAvukatYetenek,
	oAvukatBekleme,
	oSucIndirimiSure,
	oSorulanSoru,
	oDogruCevap,
	oYanlisCevap,
	oSoruListesi[5],
	oSOSGecikme,
	oBalikTutuyor,
	oBalikYetenek,
	oBaliklar[15],
	oMadenler[5],
	oMadenYetenek,
	oYemler[5],
	oDogrulamaKodu,
	oSonVurus,
	oMadenKaziyor,
	oBodyguardOneren,
	oBodyguardFiyat,
	oBodyguardBekleme,
	oRadarGecikme,
	oGraffiti,
	oGraffitiSure,
	oGraffitiRenk,
	oGraffitiYazi[64 char],
	oGraffitiDuzenliyor,
	oYatKontrol[5],
	oSonAtis,
	oAtisSayisi,
	oTokalasIstek,
	oTokalasStil,
	bool:oKonusmaAnim,
	bool:oEmniyetKemeri,
	oKumarBahis,
	oBenzinIsyeri,
	oBenzinAliyor,
	oDialog,
	oEleGecirme,
	oEleGecirmeSure,
	oKumarBahis_Duello,
	oKumarDialog,
	bool:oKumarBaslatan,
	bool:oBagli,
	oEditlenenDolap,
	/*oUretimYapiyor,
	oUretimTuru,
	oGovde,
	oNamlu,
	oHazne,
	oUretimSecilen[32],
	oUretimSure,
	oUretimSilah,*/
	oUnlu,
	oEventMod,
	oPartner,
	oPapaz,
	oBowlingIstek,
	bool:oBowling,
	oBowlingPartner,
	oBowlingSayi,
	oBowlingSira,
	oArizaTespitDelay,
	oArizaTamirDelay,
	oArizaTespitSure,
	oArizaTamirSure,
	oArizaliArac,
	oYayinIzliyor,
	bool:oAnkesorluTelefon,
	oEkip,
	bool:oEkipYoneticisi,
	bool:oEkipIstek,
	oEkipDavet,
	oStandLisans,
	oTezgahtar,
	oSonPM,
	bool:oPMAldi,
	oKilogram,
	oBoy,
	oKarakterDetay[96],
	oSacRengi,
	oGozRengi,
	oBirlikMod
};

enum hasarBilgi {
	hasarVarmi,
	hasarBolge,
	Float:hasarDeger,
	hasarVeren,
	hasarSilah
};

enum canliBilgi {
	canliSahip,
	canliNick[16],
	canliTakipci,
	canliAbone,
	canliDonateMesaj,
	canliBaslik[16],
	canliAciklama[64]
}

enum evBilgi {
	evID,
	bool:evKullanimda,
	bool:evLamba,
	evTur,
	evAdres[64],
	Float:evPos[4],
	Float:evIcPos[4],
	evDisInt,
	evDisVW,
	evInterior,
	evVW,
	Text3D:evText,
	evPickup,
	evDurum,
	evSahip,
	evFiyat,
	evSahipIsim[32],
	evKiraciIsim[32],
	evBakimSure,
	evAnahtar[5],
	evKiralik,
	evKiraci,
	evKiraUcret,
	evKasa,
	evLevel,
	evVergi,
	evSatilik,
	evMuafiyet
};

enum objeBilgi {
	objeID,
	bool:objeKullanimda,
	objeModel,
	objeSahip,
	Float:objePos[6],
	objeInterior,
	objeWorld,
	objeBirlik,
	objeYarat
};

enum mobilyaBilgi {
	mobilyaID,
	bool:mobilyaKullanimda,
	Float:mobilyaPos[6],
	mobilyaInt,
	mobilyaVW,
	mobilyaEv,
	mobilyaYarat,
	mobilyaModel
};

enum isyeriBilgi {
	isyeriID,
	bool:isyeriKullanimda,
	isyeriAd[128],
	Float:isyeriPos[4],
	Float:isyeriIcPos[4],
	isyeriInterior,
	isyeriVW,
	isyeriDisInt,
	isyeriDisVW,
	isyeriFiyat,
	isyeriSahip,
	isyeriDurum,
	Text3D:isyeriText,
	isyeriPickup,
	isyeriSahipIsim[32],
	isyeriTur,
	isyeriKasa,
	iGirisUcret,
	isyeriOrtak,
	isyeriMuzik[128],
	isyeriUrun
};

enum binaBilgi {
	bID,
	bool:bKullanimda,
	bIsim[32],
	bModel,
	Float:bPos[4],
	Float:bIPos[4],
	Text3D:binaText,
	bPickup,
	bIntPickup,
	bVW,
	bInterior,
	bDisVW,
	bDisInt,
	binaDurum,
	binaTur,
	binaSahip,
	binaSahipIsim[32],
	binaAnahtar[5],
	binaLevel,
	binaBakimSure
};

enum labelBilgi {
	Text3D:labelID,
	bool:labelKullanimda,
	Float:labelPos[3],
	labelYazi[128],
	labelVW,
	labelSahip
};

enum ekipBilgi {
	ekipID,
	bool:ekipKullanimda,
	ekipAd[32],
	ekipBirlik,
	ekipYoneticisi
}

enum birlikBilgi {
	birlikID,
	bool:birlikKullanimda,
	birlikAd[32],
	birlikTur,
	Float:bDolapPos[3],
	birlikMaksRutbe,
	bDolapInt,
	bDolapVW,
	Text3D:bDolapText3D,
	bDolapPickup,
	oKanal,
	birlikMaas[20],
	birlikR1[32],
	birlikR2[32],
	birlikR3[32],
	birlikR4[32],
	birlikR5[32],
	birlikR6[32],
	birlikR7[32],
	birlikR8[32],
	birlikR9[32],
	birlikR10[32],
	birlikR11[32],
	birlikR12[32],
	birlikR13[32],
	birlikR14[32],
	birlikR15[32],
	birlikR16[32],
	birlikR17[32],
	birlikR18[32],
	birlikR19[32],
	birlikR20[32],
	birlikLevel,
	birlikDuyuru[48],
	birlikOnay[8],
	Float:birlikPos[3],
	birlikPosDurum,
	birlikOnayDurum,
	Text3D:birlikPosText3D,
	birlikPosPickup,
	birlikYayinKamera,
	Float:yKameraPos[3]
};

enum birimBilgi {
	birimID,
	bool:birimKullanimda,
	birimAd[32],
	birimBirlik,
	birimTur
};

enum aracBilgi {
	aracID,
	bool:aracKullanimda,
	aracModel,
	aracTur,
	aracPlaka[12],
	aracSahip,
	Float:aracPos[4],
	aracRenk1,
	aracRenk2,
	aracPaintjob,
	aracKilit,
	aracBirlik,
	aracYarat,
	aracYazi[128],
	sirenDurum,
	sirenObje,
	aracAnahtar,
	aracKiralik,
	aKiraUcret,
 	aKiraZaman,
 	aracInt,
 	aracWorld,
    Text3D:aracText,
    Float:aracKM,
	Float:aracBenzin,
	aracZirh,
	aracDurum,
	aracVergi,
	aracSatilik,
	aracFiyat,
	aracIletisim[144],
	Text3D:aracIlan,
	aracBaglama,
	aracModifiye[14],
	aracGaraj,
	uberLisans,
	bool:aTaksiMetreDurum,
	Float:aTaksiMetre,
	aracVip,
	aracGuvenlik,
	aracArizaTur,
	aracTamirde,
	aracArizaBolge,
	aracArizaAdim,
};

enum gateBilgi {
	gateID,
	bool:gateKullanimda,
	gateDurum,
	gateModel,
	gateSahip,
	Float:gateHiz,
	Float:gateMenzil,
	Float:gatePos[6],
	gateInterior,
	gateWorld,
	Float:gateAcilis[6],
	gateBirlik,
	gateObje,
	gateParola
};

enum atmBilgi {
	atmID,
	bool:atmKullanimda,
	Float:atmPos[4],
	atmInterior,
	atmWorld,
	atmObje,
	Text3D:atmText3D
};

enum aTelefon {
	aTelID,
	bool:aTelKullanimda,
	Float:aTelPos[4],
	aTelInterior,
	aTelWorld,
	Text3D:aTelText,
	aTelObje,
	bool:aTelKullaniliyor
};

enum standBilgi {
	standID,
	bool:standKullanimda,
	Float:standPos[4],
	standInterior,
	standWorld,
	Text3D:standText,
	standObje,
	standSahip,
	standSlogan[128],
	standTur
}

enum uyusturucuBilgi {
	uID,
	bool:uKullanimda,
	Float:uPos[4],
	uInterior,
	uWorld,
	Text3D:uText,
	uDakika,
	uGenelDakika,
	uEv,
	uBina,
	uDurum,
	uBakim,
	uObje,
	uSahip,
	uTur
};

enum saticiBilgi {
	sID,
	sKullanimda,
	Float:sPos[4],
	sInterior,
	sWorld,
	Text3D:sText,
	sFiyat,
	sAdet,
	sKiyafet,
	sTur,
	sActor
};

enum npcBilgi {
	nID,
	nKullanimda,
	Float:nPos[4],
	nInterior,
	nWorld,
	Text3D:nText,
	nKiyafet,
	nTur,
	nActor,
	nAd[32]
};

enum meslekBilgi {
	mID,
	bool:mKullanimda,
	Float:mPos[4],
	mInterior,
	mWorld,
	Text3D:mText,
	mPickup,
	mTur
};

enum sandikBilgi {
	sID,
	bool:sKullanimda,
	Float:sPos[4],
	sInterior,
	sWorld,
	Text3D:sandikText,
	sPickup,
	sOy,
	sandikSahip[32],
	sObje
};

enum tutuklamaNoktasi {
	tID,
	tKullanimda,
	Float:tPos[4],
	Float:hPos[4],
	tInterior,
	tWorld,
	hInterior,
	hWorld,
	tPickup,
	Text3D:tText
};

enum fabrikaBilgi {
	fID,
	bool:fKullanimda,
	Float:fPos[4],
	fPickup,
	Text3D:fText,
	fSahip[32],
    fabrikaAd[48],
	fUrun[64],
	fUcret,
	fKapasite
};

enum barikatBilgi {
	bool:barikatKullanimda,
	barikatModel,
	Float:barikatPos[6],
	Text3D:barikatText,
	barikatObje
}

enum benzinPompasi {
	pompaID,
	pompaKullanimda,
	pompaIsyeri,
	Float:pompaPos[4],
	pompaBenzin,
	pompaObje,
	Text3D:pompaText3D,
	pompaUcret,
	pompaTur
};

enum boomboxBilgi {
	boomboxKullanimda,
	Float:boomboxPos[3],
	boomboxInterior,
	boomboxWorld,
	boomboxObje,
	boomboxURL[128 char],
	Text3D:boomboxText3D
};

enum kasaBilgi {
	kasaID,
	bool:kasaKullanimda,
	kasaBirlik,
	kasaPara,
	Float:kasaPos[4],
	kasaVW,
	kasaInt,
	kasaObje,
	Text3D:kasaText3D
};

enum eskiVeriler {
	Float:eskiPos[4],
	eskiPara,
	eskiVW,
	eskiInt,
	eskiRenk,
	Float:eskiCan,
	Float:eskiZirh
};

enum GPSVerileri {
	gpsID,
	Float:gpsPos[3],
	bool:gpsKullanimda,
	gpsIsim[64]
};

enum rafBilgi {
	rafID,
	bool:rafKullanimda,
	rafEv,
	rafBina,
	Float:rafPos[4],
	rafInt,
	rafVW,
	rafSilahlar[4],
	rafMermiler[4],
	rafObje[5],
	Text3D:rafText3D
};

enum cctvVerileri {
	cctvID,
	Float:cctvPos[3],
	bool:cctvKullanimda,
	cctvIsim[64],
	Float:cctvMenzil,
	cctvDelay
};

enum maymuncukVeri {
	mTur,
	mHedef,
	mSaniye
};

enum aracHirsiz {
	hirsizID,
	bool:hKullanimda,
	hModel,
	hTeslim
};

enum gpsOyuncu {
	gpsID,
	Float:gpsPos[3],
	bool:gpsKullanimda,
	gpsIsim[64]
};

enum sucListesi {
	sucID,
	bool:sKullanimda,
	sIsim[144],
	sDakika
};

enum aksesuarListesi {
	aksesuarID,
	aksesuarKullanimda,
	aksesuarKemik,
	aksesuarModel,
	Float:aksesuarPos[9]
};

enum dekorListesi {
	dekorID,
	bool:dekorKullanimda,
	dekorInterior,
	Float:dekorPos[4],
	dekorIsim[64],
	dekorTur,
	dekorUcret,
	dekorOOC
};

enum modifiyeNoktasi {
	modifiyeID,
	bool:modifiyeKullanimda,
	modifiyeKullanan,
	Float:modifiyePos[3],
	modifiyeInt,
	modifiyeDunya,
	modifiyeBirlik,
	modifiyeUcret,
	mPickup,
	Text3D:mText
};

enum destekVerileri {
	bool:destekKullanimda,
	destekOyuncu,
	destekRenk
};

enum kontraktVerileri {
	kontraktID,
	kontraktIsim[32],
	bool:kontraktKullanimda,
	kontraktUcret
};

enum yayinVerileri {
	yayinYapan,
	bool:yayinKullanimda,
	yayinDavetli,
	yayinBirlik,
	yayinMuzik[144],
	yayinCekilis
};

enum rehberBilgi {
	rehberID,
	bool:rehberKullanimda,
	rehberIsim[32],
	rehberNumara
};

enum serverLabel {
	Text3D:serverText,
	serverPickup
};

enum madenLabel {
	Text3D:madenText,
	madenPickup
};

enum reklamBilgi {
	reklamAjans,
	reklamIcerik[144],
	reklamIletisim,
	reklamVeren,
	reklamOncelik,
	reklamSure
};

enum garajBilgi {
	garajID,
	bool:garajKullanimda,
	Float:garajPos[6],
	garajSahip,
	garajInt,
	garajDunya,
	garajDurum,
	Text3D:garajText,
	garajPickup,
	garajLimit,
	garajSahipIsim[32],
	garajUcret
};

enum yarisBilgi {
	bool:yarisKullanimda,
	bool:yarisBasladi,
	yarisTur,
	Float:yarisPos[60],
	yarisSahip,
	yarisMaksCP,
	yarisSiralama
};

enum paintballBilgi {
	bool:pKullanimda,
	paintballSure,
	paintballArena,
	paintballSahip
};

enum dolapBilgi {
	dolapID,
	bool:dolapKullanimda,
	dolapEv,
	dolapKiyafet[13],
	Text3D:dolapText,
	dolapObje,
	dolapModel,
	Float:dolapPos[6],
	dolapInt,
	dolapVW
};

enum baslangicPoslari {
	posID,
	bool:posKullanimda,
	Float:baslangic_pos[4],
	baslangic_int,
	baslangic_vw,
	pos_adi[64]
};

enum radarBilgi {
	radarID,
	radarKullanimda,
	Float:radarPos[4],
	Float:radarMenzil,
	Float:radarLimit,
	radarObje,
	Text3D:radarText3D
};

enum graffitiBilgi {
	graffitiID,
	bool:graffitiKullanimda,
	Float:graffitiPos[4],
	graffitiObje,
	graffitiRenk,
	graffitiYazi[64]
};

enum yatBilgi
{
	yatObject,
	yatSurObject,
	yatKiralayan,
	yatKiraSure,
	yatOto,
	yatStep,
	yatUyari,
	yatTeslimSure
};

enum petBilgi
{
	petID,
	NPCID,
	petAdi[24],
	petSahip,
	petTuru,
	petCinsiyet,
	petRenk,
	petAclik,
	Float:petSaglik,
	petTakip,
	petYarali,
	bool:petDurum,
	petSaldir,
	Text3D:petText,
	petAcikma,
};

enum etkinlikBilgi
{
	Float:etkCan,
	Float:etkZirh,
	Float:etkPos[4],
	etkSilah[2],
	etkVirtualWorld,
	etkInterior,
	bool:etkGiris,
	bool:etkDurum
};

enum pointBilgi
{
	pointID,
	bool:pointKullanimda,
	bool:pointSavas,
	pointBolge[64],
	pointBirlik,
	Float:pointPos[4],
	Text3D:pointText,
	pointPickup
};

enum giseBilgi
{
	giseID,
	bool:giseKullanimda,
	giseDurum,
	giseModel,
	Float:giseHiz,
	Float:giseMenzil,
	Float:gisePos[6],
	Float:giseAcilis[6],
	giseObje,
	giseUcret
};

#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.6)

 //Yeni deðiþkenler, tanýmlamalar.
//new CanliBilgi[MAX_PLAYERS][MAKSIMUM_CANLI][canliBilgi];
new forummodel[] = "http://cagatayzcn.xyz/models", LabelBilgi[MAKSIMUM_OYUNCU_LABEL][labelBilgi], NPCBilgi[MAKSIMUM_NPC][npcBilgi], ATelBilgi[MAKSIMUM_ANKESORLU_TELEFON][aTelefon], EkipBilgi[MAKSIMUM_EKIP][ekipBilgi], StandBilgi[MAKSIMUM_STAND][standBilgi];
new MySQL:mysqlB, restarttimer, bool:restart, bool:oockanal = false, bool:akanal = true, bool:hkanal = true, bool:sunucukilit = false, bool:afk_aktif = false, bool:techizatizni = false, bool:ikixpayday = false;
new otokayit = 0, vergidakika = 0, AracZaman[MAX_VEHICLES] = {0, ...}, Float:AracSonPos[MAX_VEHICLES][3], bool:anti_afk = false, bool:ucxpayday = false, bool:yat_kiralama = true;
new OyuncuBilgi[MAX_PLAYERS][oyuncuBilgi], BinaBilgi[MAKSIMUM_BINA][binaBilgi], BirlikBilgi[MAKSIMUM_BIRLIK][birlikBilgi], SandikBilgi[MAKSIMUM_SANDIK][sandikBilgi], InsideShamal[MAX_PLAYERS];
new AracBilgi[MAKSIMUM_ARAC][aracBilgi], EvBilgi[MAKSIMUM_EV][evBilgi], GateBilgi[MAKSIMUM_GATE][gateBilgi], ObjeBilgi[MAKSIMUM_OBJE][objeBilgi];
new IsyeriBilgi[MAKSIMUM_ISYERI][isyeriBilgi], ATMBilgi[MAKSIMUM_ATM][atmBilgi], TutuklamaNoktasi[MAKSIMUM_TUTUKLAMANOKTASI][tutuklamaNoktasi], PaintballBilgi[MAKSIMUM_PAINTBALL][paintballBilgi];
new HavaAlaniKapi[2], bool:hdurum = false, bool:aracrespawn = false, arespawntimer, aractabeladurum[MAX_VEHICLES], UyusturucuBilgi[MAKSIMUM_UYUSTURUCU][uyusturucuBilgi], PointBilgi[MAKSIMUM_POINT][pointBilgi];
new HasarBilgi[MAX_PLAYERS][MAKSIMUM_HASAR][hasarBilgi], PlayerText:siyahekran[MAX_PLAYERS], Text:AnimBozText, MeslekBilgi[MAKSIMUM_MESLEK][meslekBilgi], HizLimiti[MAX_VEHICLES] = 0;
new SonArac[MAX_PLAYERS], DegistirilenArac[MAX_PLAYERS], DegistirmeSuresi[MAX_PLAYERS], bool:OyuncuGiris[MAX_PLAYERS], OlumSayisi[MAX_PLAYERS], OlumSuresi[MAX_PLAYERS];
new Float:eskipos[MAX_PLAYERS][4], eskiworld[MAX_PLAYERS], SaticiBilgi[MAKSIMUM_SATICI][saticiBilgi], HileKontrolGecikme[MAX_PLAYERS], Iterator:Petler<MAKSIMUM_PET>;
new eskiint[MAX_PLAYERS], FabrikaBilgi[MAKSIMUM_FABRIKA][fabrikaBilgi], BarikatBilgi[MAKSIMUM_BARIKAT][barikatBilgi], bool:AracMotor[MAX_VEHICLES], PetBilgi[MAKSIMUM_PET][petBilgi], PetKontrol[MAX_PLAYERS];
new BirimBilgi[MAKSIMUM_BIRIM][birimBilgi], BoomboxBilgi[MAX_PLAYERS][boomboxBilgi], bool: ilkharf = false, ElKoy[MAX_PLAYERS], GarajBilgi[MAKSIMUM_GARAJ][garajBilgi], bool:AracCamDurum[MAX_VEHICLES];
new cezaodemesebep[MAX_PLAYERS][96], AracZirh[MAX_VEHICLES], KasaBilgi[MAKSIMUM_KASA][kasaBilgi], EskiVeriler[MAX_PLAYERS][eskiVeriler], GPSVeri[MAKSIMUM_GPS][GPSVerileri], MobilyaBilgi[MAKSIMUM_MOBILYA][mobilyaBilgi];
new RafBilgi[MAKSIMUM_RAF][rafBilgi], CCTVVeri[MAKSIMUM_CCTV][cctvVerileri], MaymuncukVeri[MAX_PLAYERS][maymuncukVeri], MDCTimer[MAX_VEHICLES], Text:DashcamText[MAX_VEHICLES][4], AracHirsiz[MAKSIMUM_ARACLISTE][aracHirsiz];
new GPSOyuncu[MAX_PLAYERS][MAKSIMUM_OYUNCU_GPS][gpsOyuncu], SucListesi[MAKSIMUM_SUC][sucListesi], AksesuarListesi[MAX_PLAYERS][MAX_PLAYER_ATTACHED_OBJECTS - 3][aksesuarListesi], BenzinPompasi[MAKSIMUM_BENZIN_POMPASI][benzinPompasi];
new AracDeneme[MAX_PLAYERS], bool:OyuncuYuklemeYapiyor[MAX_PLAYERS] = false, DekorListesi[MAKSIMUM_DEKOR][dekorListesi], GraffitiBilgi[MAKSIMUM_GRAFFITI][graffitiBilgi], EtkinlikBilgi[etkinlikBilgi];
new ModifiyeNoktasi[MAKSIMUM_MODIFIYENOKTASI][modifiyeNoktasi], DestekBilgi[MAKSIMUM_DESTEK][destekVerileri], KamyoncuYuk[MAX_VEHICLES], KamyoncuCP[MAX_VEHICLES], KontraktVeri[MAKSIMUM_KONTRAKT][kontraktVerileri];
new YayinBilgi[MAKSIMUM_YAYIN][yayinVerileri], RehberBilgi[MAX_PLAYERS][MAKSIMUM_REHBER_SAYI][rehberBilgi], ServerLabel[MAKSIMUM_SERVER_LABEL][serverLabel], KamyoncuHileKontrol[MAX_VEHICLES];
new ReklamBilgi[MAKSIMUM_REKLAM][reklamBilgi], CanHileUyari[MAX_PLAYERS], ZirhHileUyari[MAX_PLAYERS], YuruyusTimer[MAX_PLAYERS], AracHilesiUyari[MAX_PLAYERS], YarisBilgi[MAKSIMUM_YARIS][yarisBilgi];
new Float:insaat_Pos[3], insaat_Ucret, insaat_Kota, DondurulmaTimer[MAX_PLAYERS], DolapBilgi[MAKSIMUM_DOLAP][dolapBilgi], BaslangicPoslari[MAKSIMUM_BASLANGICPOS][baslangicPoslari];
new IsyeriUrun[MAX_PLAYERS][128], MadenLabel[MAKSIMUM_MADEN_LABEL][madenLabel], RadarBilgi[MAKSIMUM_HIZRADARI][radarBilgi], YatBilgi[yatBilgi], GiseBilgi[MAKSIMUM_GISE][giseBilgi];
new bool:avyasagi = false, bool:paintball_sistemi = true, bool:newbie_kanali = false, bool:oocmarket_kullanim = true, bool:vmarket_kullanim = true, bool:vergiler_durum = true;
new Spawned[MAX_PLAYERS];
new PlayerText:adminduty[MAX_PLAYERS];
new PlayerText:godduty[MAX_PLAYERS];


new stock aracIsimler[][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Devriye Aracý", "SFPD Devriye Aracý", "LVPD Devriye Aracý",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};

new ColorList[][121] =
{
    "{000000}000 {F5F5F5}001 {2A77A1}002 {840410}003 {263739}004 {86446E}005 {D78E10}006 {4C75B7}007 {BDBEC6}008 {5E7072}009\n",
    "{46597A}010 {656A79}011 {5D7E8D}012 {58595A}013 {D6DAD6}014 {9CA1A3}015 {335F3F}016 {730E1A}017 {7B0A2A}018 {9F9D94}019\n",
    "{3B4E78}020 {732E3E}021 {691E3B}022 {96918C}023 {515459}024 {3F3E45}025 {A5A9A7}026 {635C5A}027 {3D4A68}028 {979592}029\n",
    "{421F21}030 {5F272B}031 {8494AB}032 {767B7C}033 {646464}034 {5A5752}035 {252527}036 {2D3A35}037 {93A396}038 {6D7A88}039\n",
    "{221918}040 {6F675F}041 {7C1C2A}042 {5F0A15}043 {193826}044 {5D1B20}045 {9D9872}046 {7A7560}047 {989586}048 {ADB0B0}049\n",
    "{848988}050 {304F45}051 {4D6268}052 {162248}053 {272F4B}054 {7D6256}055 {9EA4AB}056 {9C8D71}057 {6D1822}058 {4E6881}059\n",
    "{9C9C98}060 {917347}061 {661C26}062 {949D9F}063 {A4A7A5}064 {8E8C46}065 {341A1E}066 {6A7A8C}067 {AAAD8E}068 {AB988F}069\n",
    "{851F2E}070 {6F8297}071 {585853}072 {9AA790}073 {601A23}074 {20202C}075 {A4A096}076 {AA9D84}077 {78222B}078 {0E316D}079\n",
    "{722A3F}080 {7B715E}081 {741D28}082 {1E2E32}083 {4D322F}084 {7C1B44}085 {2E5B20}086 {395A83}087 {6D2837}088 {A7A28F}089\n",
    "{AFB1B1}090 {364155}091 {6D6C6E}092 {0F6A89}093 {204B6B}094 {2B3E57}095 {9B9F9D}096 {6C8495}097 {4D8495}098 {AE9B7F}099\n",
    "{406C8F}100 {1F253B}101 {AB9276}102 {134573}103 {96816C}104 {64686A}105 {105082}106 {A19983}107 {385694}108 {525661}109\n",
    "{7F6956}110 {8C929A}111 {596E87}112 {473532}113 {44624F}114 {730A27}115 {223457}116 {640D1B}117 {A3ADC6}118 {695853}119\n",
    "{9B8B80}120 {620B1C}121 {5B5D5E}122 {624428}123 {731827}124 {1B376D}125 {EC6AAE}126 {000000}127 {177517}128 {210606}129\n",
    "{125478}130 {452A0D}131 {571E1E}132 {010701}133 {25225A}134 {2C89AA}135 {8A4DBD}136 {35963A}137 {B7B7B7}138 {464C8D}139\n",
    "{84888C}140 {817867}141 {817A26}142 {6A506F}143 {583E6F}144 {8CB972}145 {824F78}146 {6D276A}147 {1E1D13}148 {1E1306}149\n",
    "{1F2518}150 {2C4531}151 {1E4C99}152 {2E5F43}153 {1E9948}154 {1E9999}155 {999976}156 {7C8499}157 {992E1E}158 {2C1E08}159\n",
    "{142407}160 {993E4D}161 {1E4C99}162 {198181}163 {1A292A}164 {16616F}165 {1B6687}166 {6C3F99}167 {481A0E}168 {7A7399}169\n",
    "{746D99}170 {53387E}171 {222407}172 {3E190C}173 {46210E}174 {991E1E}175 {8D4C8D}176 {805B80}177 {7B3E7E}178 {3C1737}179\n",
    "{733517}180 {781818}181 {83341A}182 {8E2F1C}183 {7E3E53}184 {7C6D7C}185 {020C02}186 {072407}187 {163012}188 {16301B}189\n",
    "{642B4F}190 {368452}191 {999590}192 {818D96}193 {99991E}194 {7F994C}195 {839292}196 {788222}197 {2B3C99}198 {3A3A0B}199\n",
    "{8A794E}200 {0E1F49}201 {15371C}202 {15273A}203 {375775}204 {060820}205 {071326}206 {20394B}207 {2C5089}208 {15426C}209\n",
    "{103250}210 {241663}211 {692015}212 {8C8D94}213 {516013}214 {090F02}215 {8C573A}216 {52888E}217 {995C52}218 {99581E}219\n",
    "{993A63}220 {998F4E}221 {99311E}222 {0D1842}223 {521E1E}224 {42420D}225 {4C991E}226 {082A1D}227 {96821D}228 {197F19}229\n",
    "{3B141F}230 {745217}231 {893F8D}232 {7E1A6C}233 {0B370B}234 {27450D}235 {071F24}236 {784573}237 {8A653A}238 {732617}239\n",
    "{319490}240 {56941D}241 {59163D}242 {1B8A2F}243 {38160B}244 {041804}245 {355D8E}246 {2E3F5B}247 {561A28}248 {4E0E27}249\n",
    "{706C67}250 {3B3E42}251 {2E2D33}252 {7B7E7D}253 {4A4442}254 {28344E}255\n"
};

new const Float:YatRota[][] = {
	{106.274314, -2004.398315, 4.759998, 0.000000, 0.000000, 149.649398},
	{86.316535, -2048.772949, 4.759998, 0.000000, 0.000000, 165.649398},
	{94.522018, -2117.712890, 4.759998, 0.000000, 0.000000, 207.649398},
	{120.338302, -2167.082763, 4.759998, 0.000000, 0.000000, 207.649398},
	{149.443557, -2222.746826, 4.759998, 0.000000, 0.000000, 207.649398},
	{173.125274, -2268.031005, 4.759998, 0.000000, 0.000000, 207.649398},
	{212.158126, -2342.680419, 4.759998, 0.000000, 0.000000, 207.649398},
	{233.698867, -2383.877685, 4.759998, 0.000000, 0.000000, 207.649398},
	{263.521087, -2437.314941, 4.759998, 0.000000, 0.000000, 216.649398},
	{316.610504, -2492.846679, 4.759998, 0.000000, 0.000000, 225.149398},
	{356.685150, -2529.804931, 4.759998, 0.000000, 0.000000, 228.149398},
	{391.838073, -2561.186523, 4.759998, 0.000000, 0.000000, 228.149398},
	{424.943725, -2590.749755, 4.759998, 0.000000, 0.000000, 228.149398},
	{458.359161, -2620.578857, 4.759998, 0.000000, 0.000000, 228.149398},
	{488.869262, -2647.818847, 4.759998, 0.000000, 0.000000, 228.149398},
	{522.122863, -2677.499511, 4.759998, 0.000000, 0.000000, 228.149398},
	{544.689941, -2697.653564, 4.759998, 0.000000, 0.000000, 228.149398},
	{564.278076, -2715.141845, 4.759998, 0.000000, 0.000000, 228.149398},
	{586.927246, -2735.364990, 4.759998, 0.000000, 0.000000, 228.149398},
	{638.186767, -2799.054199, 4.759998, 0.000000, 0.000000, 209.649398},
	{658.201110, -2834.135986, 4.759998, 0.000000, 0.000000, 209.649398},
	{680.734497, -2873.631591, 4.759998, 0.000000, 0.000000, 209.649398},
	{715.307556, -2934.214355, 4.759998, 0.000000, 0.000000, 209.649398},
	{740.472106, -2978.317138, 4.759998, 0.000000, 0.000000, 209.649398},
	{763.808044, -3018.307617, 4.759998, 0.000000, 0.000000, 210.649398},
	{785.183166, -3054.329101, 4.759998, 0.000000, 0.000000, 210.649398},
	{816.973266, -3107.894042, 4.759998, 0.000000, 0.000000, 210.649398},
	{849.983276, -3179.270507, 4.759998, 0.000000, 0.000000, 200.149398},
	{867.854553, -3230.547607, 4.759998, 0.000000, 0.000000, 200.149398},
	{870.955200, -3303.787597, 4.759998, 0.000000, 0.000000, 155.649398},
	{827.091186, -3345.155029, 4.759998, 0.000000, 0.000000, 111.149398},
	{781.983398, -3349.314208, 4.759998, 0.000000, 0.000000, 78.649398},
	{750.684020, -3336.055419, 4.759998, 0.000000, 0.000000, 54.649398},
	{706.926452, -3292.001953, 4.759998, 0.000000, 0.000000, 46.149398},
	{660.065917, -3247.242431, 4.759998, 0.000000, 0.000000, 47.149398},
	{621.691223, -3211.523193, 4.759998, 0.000000, 0.000000, 47.149398},
	{587.159057, -3179.393310, 4.759998, 0.000000, 0.000000, 47.149398},
	{557.500061, -3151.795898, 4.759998, 0.000000, 0.000000, 47.149398},
	{523.368164, -3120.039062, 4.759998, 0.000000, 0.000000, 47.149398},
	{494.881958, -3093.552490, 4.759998, 0.000000, 0.000000, 47.149398},
	{468.762695, -3069.247070, 4.759998, 0.000000, 0.000000, 47.149398},
	{434.006927, -3034.723144, 4.759998, 0.000000, 0.000000, 43.649398},
	{391.109527, -2985.586914, 4.759998, 0.000000, 0.000000, 38.649398},
	{362.182098, -2948.568847, 4.759998, 0.000000, 0.000000, 36.649398},
	{331.599090, -2907.395263, 4.759998, 0.000000, 0.000000, 36.649398},
	{294.943481, -2857.514404, 4.759998, 0.000000, 0.000000, 35.649398},
	{269.925567, -2822.623291, 4.759998, 0.000000, 0.000000, 35.649398},
	{245.550979, -2786.340332, 4.759998, 0.000000, 0.000000, 33.649398},
	{225.232421, -2755.528564, 4.759998, 0.000000, 0.000000, 32.649398},
	{178.674957, -2666.307128, 4.759998, 0.000000, 0.000000, 26.649398},
	{144.761932, -2575.135253, 4.759998, 0.000000, 0.000000, -2.850601},
	{145.372604, -2516.161865, 4.759998, 0.000000, 0.000000, 8.649398},
	{125.567817, -2434.824951, 4.759998, 0.000000, 0.000000, 14.149398},
	{110.223579, -2373.901123, 4.759998, 0.000000, 0.000000, 14.149398},
	{97.141044, -2319.266601, 4.759998, 0.000000, 0.000000, 12.149398},
	{80.015571, -2234.709716, 4.759998, 0.000000, 0.000000, 11.149398},
	{60.563591, -2136.043945, 4.759998, 0.000000, 0.000000, 11.149398},
	{45.770820, -2061.012695, 4.759998, 0.000000, 0.000000, 11.149398},
	{35.780719, -2010.341796, 4.759998, 0.000000, 0.000000, 11.149398},
	{22.587406, -1931.224487, 4.759998, 0.000000, 0.000000, -0.350601},
	{22.981847, -1866.670043, 4.759998, 0.000000, 0.000000, -0.350601},
	{24.120262, -1800.271972, 4.759998, 0.000000, 0.000000, -18.350601},
	{34.970695, -1778.592773, 4.759998, 0.000000, 0.000000, -35.350601},
	{72.581138, -1748.838623, 4.759998, 0.000000, 0.000000, -70.350601},
	{47.921070, -1753.640502, 4.759998, 0.000000, 0.000000, -88.850601},
	{104.203491, -1773.941894, 4.759998, 0.000000, 0.000000, -131.350601},
	{127.934700, -1802.309448, 4.759998, 0.000000, 0.000000, -151.850601},
	{137.774124, -1838.183959, 4.759998, 0.000000, 0.000000, -177.850601}

};

new SilahKemikSlot[47] = {
	-1, -1, 1, 7, 7, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1
};

new Float:SilahAksesuarPos[47][9] = {
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.354000, -0.095000, -0.067000, 8.399996, -61.099990, -177.199996, 1.000000, 1.000000, 1.000000 },
	{ 0.017000, -0.114999, -0.140000, 88.999992, 86.500015, -1.800061, 1.000000, 1.000000, 1.000000 },
	{ 0.059000, 0.070000, -0.049000, -22.500000, 90.099998, -43.800014, 1.000000, 1.000000, 1.000000 },
	{ 0.354000, -0.095000, -0.067000, 8.399996, -61.099990, -177.199996, 1.000000, 1.000000, 1.000000 },
	{ 0.354000, -0.095000, -0.067000, 8.399996, -61.099990, -177.199996, 1.000000, 1.000000, 1.000000 },
	{ 0.354000, -0.095000, -0.067000, 8.399996, -61.099990, -177.199996, 1.000000, 1.000000, 1.000000 },
	{ 0.354000, -0.095000, -0.067000, 8.399996, -61.099990, -177.199996, 1.000000, 1.000000, 1.000000 },
	{ 0.422000, -0.168000, 0.193000, -7.400008, -34.300003, 173.700027, 1.000000, 1.000000, 1.000000 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ -0.067999, -0.059000, 0.131000, -102.499969, 0.000000, 0.400004, 0.790000, 1.000000, 1.000000 },
	{ -0.067999, -0.059000, 0.131000, -102.499969, 0.000000, 0.400004, 0.790000, 1.000000, 1.000000 },
	{ -0.067999, -0.059000, 0.131000, -102.499969, 0.000000, 0.400004, 0.790000, 1.000000, 1.000000 },
	{ 0.159000, 0.146999, 0.164000, -13.199998, 150.000045, 25.100008, 1.000000, 1.059000, 1.000000 },
	{ -0.067999, -0.059000, 0.131000, -102.499969, 0.000000, 0.400004, 0.790000, 1.000000, 1.000000 },
	{ 0.159000, 0.146999, 0.164000, -13.199998, 150.000045, 25.100008, 1.000000, 1.059000, 1.000000 },
	{ -0.153000, -0.092000, 0.074000, 155.699951, -8.700000, 4.100007, 0.790000, 1.000000, 1.000000 },
	{ 0.159000, 0.146999, 0.164000, -13.199998, 150.000045, 25.100008, 1.000000, 1.059000, 1.000000 },
	{ 0.159000, 0.146999, 0.164000, -13.199998, 150.000045, 25.100008, 1.000000, 1.059000, 1.000000 },
	{ 0.159000, 0.146999, 0.164000, -13.199998, 150.000045, 25.100008, 1.000000, 1.059000, 1.000000 },
	{ -0.153000, -0.092000, 0.074000, 155.699951, -8.700000, 4.100007, 0.790000, 1.000000, 1.000000 },
	{ -0.154000, -0.101999, -0.021999, 176.299926, 34.300022, 7.500000, 1.000000, 1.000000, 1.000000 },
	{ -0.154000, -0.101999, -0.021999, 176.299926, 34.300022, 7.500000, 1.000000, 1.000000, 1.000000 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ -0.067999, -0.059000, 0.131000, -102.499969, 0.000000, 0.400004, 0.790000, 1.000000, 1.000000 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
};

new Kokenler[][43] = {
    {"Almanya"}, {"Amerika"}, {"Arjantin"}, {"Avusturya"}, {"Avustralya"}, {"Belçika"}, {"Brezilya"}, {"Çin"}, {"Danimarka"}, {"Ermenistan"},
	{"Filipinler"}, {"Findanliya"}, {"Fransa"}, {"Gürcistan"}, {"Güney Kore"}, {"Hýrvatistan"}, {"Hindistan"}, {"Hollanda"}, {"Ýngiltere"}, {"Ýrlanda"},
	{"Ýspanya"}, {"Ýsrail"}, {"Ýsveç"}, {"Ýsviçre"}, {"Ýtalya"}, {"Ýzlanda"}, {"Jamaika"}, {"Japonya"}, {"Kanada"}, {"Küba"},
	{"Kolombiya"}, {"Kuzey Kore"}, {"Meksika"}, {"Norveç"}, {"Polonya"}, {"Portekiz"}, {"Romanya"}, {"Rusya"}, {"Sýrbistan"}, {"Tayland"}, 
	{"Tayvan"}, {"Ukrayna"}, {"Yunanistan"}
};

new EkstraDiller[][25] = {
    {"Almanca"}, {"Arapça"}, {"Çince"}, {"Danca"}, {"Ermenice"}, {"Fransýzca"}, {"Fince"}, {"Hýrvatça"}, {"Hintçe"}, {"Hollandaca"},
	{"Gürcüce"}, {"Hollandaca"}, {"Ýbranice"}, {"Ýtalyanca"}, {"Ýspanyolca"}, {"Ýzlandaca"}, {"Japonca"}, {"Keltçe"}, {"Lehçe"}, {"Norveççe"},
	{"Portekizce"}, {"Romence"}, {"Rusça"}, {"Sýrpça"},  {"Yunanca"}
};

new VIP_Silahlar[4][] = {
	{25, 349, 75000}, {29, 353, 90000}, {24, 348, 100000}, {30, 355, 120000}
};

new Barikatlar[][57] = {
	{1237}, {1282},	{1251},	{968},	{1374},	{966}, {8042}, {8041}, {981}, {19834},
	{1427}, {1425}, {1422}, {3091}, {1228}, {1459}, {1424}, {1423}, {997}, {996},
	{19971}, {19955}, {19957}, {19992}, {19986}, {19984}, {19979}, {19975}, {19974}, {19989},
	{19970}, {19969}, {19968}, {19967}, {19962}, {19991}, {19951}, {19959}, {19950}, {19949},
	{19948}, {19952}, {19972}, {19973}, {19976}, {19977}, {19978}, {19988}, {19983}, {19985},
	{19987}, {19965}, {19990}, {19966}, {19960}, {19964}, {-2020}
};

new SatilikAraclar[94][] = {
	{413, 8850, 2}, {415, 95000, 3}, {418, 10000, 2}, {419, 9000, 2}, {420, 20000, 2}, {421, 9500, 2},
	{422, 12000, 2}, {424, 30000, 3}, {426, 11000, 2}, {429, 42500, 3}, {436, 9000, 2},
	{438, 18000, 2}, {439, 10000, 2}, {445, 30000, 3}, {451, 80000, 3}, {458, 9500, 2}, {460, 150000, 4},
	{461, 5000, 1}, {462, 4000, 1}, {463, 8000, 1}, {466, 13000, 2}, {467, 11000, 2}, {468, 12500, 1},
	{474, 20000, 3}, {475, 25000, 2}, {477, 60000, 3}, {478, 25000, 2}, {479, 9000, 2}, {480, 35000, 3}, {482, 15000, 3},
	{483, 20000, 3}, {487, 180000, 4}, {489, 40000, 3}, {491, 13000, 2}, {492, 13000, 2}, {496, 9000, 2},
	{499, 20000, 2}, {500, 30000, 3}, {506, 72500, 3}, {507, 13000, 2}, {508, 45000, 3}, {516, 11500, 2}, {517, 12000, 2},
	{518, 12000, 2}, {519, 450000, 4}, {521, 14000, 1}, {522, 40000, 1}, {526, 8000, 2}, {527, 9500, 2}, {529, 10000, 2},
	{533, 11000, 3}, {534, 27000, 3}, {535, 22500, 3}, {536, 10000, 2}, {540, 9000, 2}, {541, 92500, 3}, {542, 8750, 2},
	{543, 13000, 2}, {545, 32000, 3}, {546, 10250, 2}, {547, 10500, 2}, {549, 8000, 2}, {550, 11000, 2}, {551, 12000, 2},
	{554, 26500, 3}, {555, 22500, 3}, {558, 11000, 2}, {559, 23000, 3}, {560, 40000, 3}, {561, 12000, 2}, {562, 30000, 3},
	{565, 25000, 3}, {566, 7800, 2}, {567, 13000, 2}, {575, 15000, 3}, {576, 11600, 2}, {579, 55000, 3}, {580, 35000, 3},
	{581, 6500, 1}, {585, 14000, 2}, {586, 9600, 1}, {587, 18000, 2}, {589, 9300, 2}, {593, 300000, 4}, {600, 10600, 2},
	{602, 13100, 2}, {603, 36300, 3}, {493, 60000, 5}, {484, 50000, 5}, {453, 40000, 5}, {452, 30000, 5}, {446, 35000, 5},
	{454, 60000, 5}, {525, 10500, 2}
};

new Mobilyalar[1099][] = {
	{3002, 15}, {14537, 20}, {15039, 10}, {3533, 15}, {14805, 15}, {11334, 15}, {16151, 10}, {2784, 10},
	{2564, 15}, {15036, 15}, {14720, 15}, {2565, 15}, {2300, 15}, {2563, 15}, {2298, 25}, {14446, 10},
	{1575, 15}, {1978, 15}, {1710, 15}, {11665, 15}, {947, 15}, {946, 15}, {11686, 10}, {2301, 15},
	{14806, 15}, {2592, 15}, {2566, 15}, {2604, 15}, {2131, 15}, {3441, 15}, {2090, 15}, {2357, 15},
	{1700, 15}, {1824, 15}, {627, 15}, {1794, 15}, {2617, 15}, {2296, 15}, {638, 13}, {2208, 15},
	{2290, 15}, {1753, 15}, {1723, 15}, {19474, 15}, {632, 15}, {1745, 15}, {1756, 30}, {1760, 15},
	{2571, 15}, {3390, 15}, {1761, 15}, {1798, 15}, {2302, 15}, {11720, 15}, {1703, 30}, {2299, 25},
	{3962, 15}, {14866, 15}, {1713, 15}, {1802, 15}, {2184, 15}, {1757, 15}, {2188, 15}, {1766, 20},
	{1726, 15}, {11691, 15}, {1793, 10}, {1801, 15}, {1768, 15}, {2627, 15}, {2628, 10}, {1706, 20},
	{1797, 15}, {1799, 15}, {2025, 15}, {2887, 15}, {1795, 15}, {2207, 15}, {2151, 15}, {19609, 15},
	{2775, 15}, {2510, 10}, {2511, 10}, {1800, 15}, {2522, 15}, {1702, 15}, {2745, 25}, {1771, 15},
	{2206, 15}, {2328, 10}, {19929, 15}, {2305, 15}, {1728, 15}, {1712, 15}, {19175, 15}, {19174, 15},
	{19172, 15}, {1796, 15}, {2135, 15}, {1998, 15}, {2127, 20}, {2138, 15}, {2137, 15}, {2129, 15},
	{2294, 15}, {1763, 15}, {1963, 15}, {1764, 15}, {2200, 15}, {2964, 10}, {1463, 15}, {2257, 10},
	{19924, 15}, {2185, 15}, {1491, 15}, {2372, 15}, {1812, 15}, {2172, 12}, {941, 10}, {2629, 15},
	{1255, 15}, {1707, 15}, {11733, 15}, {2605, 15}, {2165, 15}, {2199, 15}, {2520, 15}, {2205, 15},
	{19786, 15}, {2529, 15}, {19923, 15}, {2517, 20}, {2371, 10}, {2311, 20}, {2315, 20}, {2321, 15},
	{2304, 15}, {2366, 13}, {2314, 15}, {2164, 15}, {2637, 15}, {2699, 13}, {2136, 15}, {19916, 15},
	{2198, 15}, {2313, 13}, {2336, 15}, {2111, 15}, {2109, 15}, {2030, 15}, {2128, 15}, {633, 15},
	{2024, 15}, {2130, 15}, {11724, 15}, {1742, 10}, {2526, 15}, {11717, 15}, {2608, 23}, {2370, 15},
	{2108, 15}, {1985, 20}, {2132, 15}, {1601, 15}, {2008, 15}, {2087, 15}, {1767, 25}, {937, 23},
	{2173, 15}, {2414, 15}, {2527, 15}, {1708, 25}, {2020, 15}, {2069, 15}, {1762, 25}, {2191, 23},
	{2162, 15}, {936, 15}, {11690, 15}, {1741, 20}, {2100, 15}, {2171, 20}, {2117, 15}, {2032, 15},
	{2239, 15}, {2118, 15}, {2116, 15}, {2029, 17}, {2115, 15}, {1727, 25}, {2323, 15}, {913, 25},
	{16377, 15}, {2202, 15}, {2737, 15}, {1737, 15}, {2110, 15}, {2031, 15}, {2484, 15}, {1999, 25},
	{19927, 15}, {2094, 20}, {19926, 15}, {2080, 20}, {2089, 20}, {2607, 15}, {2180, 13}, {2333, 13},
	{19173, 15}, {1724, 15}, {1704, 15}, {2169, 10}, {2442, 15}, {1705, 25}, {1769, 25}, {1755, 25},
	{1818, 15}, {14604, 30}, {1616, 15}, {2112, 15}, {2606, 25}, {2413, 15}, {1758, 15}, {2630, 10},
	{911, 15}, {14820, 10}, {2163, 15}, {1765, 10}, {2254, 10}, {2154, 15}, {2001, 60}, {1739, 70},
	{2099, 15}, {2491, 10}, {1817, 20}, {1814, 13}, {2835, 30}, {2160, 15}, {2143, 15}, {912, 18},
	{1416, 15}, {19997, 15}, {2161, 15}, {19999, 12}, {1754, 15}, {2195, 7}, {2159, 15}, {2157, 15},
	{2156, 15}, {2434, 15}, {2093, 15}, {2292, 12}, {2291, 15}, {1808, 20}, {11685, 15}, {2415, 15},
	{1481, 15}, {2142, 15}, {2152, 15}, {2002, 15}, {948, 15}, {2841, 20}, {2251, 10}, {2454, 15},
	{1759, 15}, {2167, 15}, {2084, 12}, {2338, 15}, {2124, 10}, {1735, 20}, {1827, 10}, {2423, 15},
	{1417, 15}, {19831, 15}, {11734, 15}, {2007, 10}, {2811, 10}, {1433, 20}, {19787, 15}, {2144, 15},
	{1738, 15}, {2440, 15}, {2259, 15}, {2235, 10}, {2341, 10}, {2337, 15}, {2066, 15}, {2065, 50},
	{2267, 15}, {1714, 15}, {2334, 15}, {19930, 15}, {1819, 10}, {19611, 15}, {2335, 15}, {2417, 20},
	{2258, 15}, {2763, 15}, {2288, 10}, {1815, 15}, {2240, 20}, {1516, 15}, {2609, 15}, {19936, 15},
	{2635, 15}, {2283, 15}, {2435, 15}, {2067, 15}, {2346, 10}, {2644, 15}, {949, 15}, {2081, 10},
	{2444, 15}, {2445, 15}, {2439, 15}, {2441, 15}, {2857, 15}, {2236, 10}, {2340, 15}, {2339, 15},
	{2134, 15}, {2133, 15}, {11721, 15}, {11684, 15}, {11682, 15}, {2913, 10}, {11683, 70}, {2602, 13},
	{2724, 15}, {1822, 15}, {1811, 15}, {19317, 25}, {2286, 15}, {1717, 15}, {2303, 15}, {2139, 15},
	{2636, 15}, {2289, 15}, {2120, 15}, {1820, 12}, {1823, 10}, {2738, 10}, {2280, 10}, {2465, 10},
	{19919, 15}, {2000, 15}, {1711, 15}, {2232, 25}, {19928, 15}, {1715, 15}, {19925, 15}, {1792, 15},
	{2229, 15}, {2104, 15}, {2155, 15}, {2281, 10}, {2123, 20}, {2241, 15}, {15038, 15}, {19318, 15},
	{1746, 15}, {19319, 15}, {1778, 15}, {1806, 15}, {1786, 15}, {14890, 15}, {2079, 15}, {2224, 15},
	{2293, 15}, {19931, 15}, {2654, 15}, {2328, 15}, {2309, 20}, {2082, 10}, {2807, 30}, {1729, 10},
	{2788, 15}, {2356, 15}, {2095, 10}, {2230, 13}, {1722, 10}, {2528, 17}, {1721, 30}, {1821, 15},
	{2273, 15}, {2777, 15}, {2776, 15}, {2285, 10}, {2284, 10}, {2310, 15}, {2276, 10}, {2287, 10},
	{2255, 15}, {2525, 15}, {2312, 15}, {2619, 20}, {2121, 15}, {1370, 10}, {2838, 10}, {2523, 10},
	{2282, 15}, {2096, 15}, {2377, 15}, {2473, 15}, {2083, 15}, {2725, 15}, {2712, 10}, {2262, 10},
	{2272, 15}, {2392, 15}, {2378, 15}, {2397, 15}, {2401, 15}, {2390, 15}, {2398, 30}, {1720, 45},
	{2103, 15}, {1752, 15}, {2233, 15}, {2801, 15}, {2844, 15}, {1671, 15}, {1663, 10}, {2596, 15},
	{2524, 15}, {11706, 10}, {11725, 15}, {2469, 15}, {2860, 15}, {2429, 15}, {2260, 10}, {2316, 15},
	{19994, 15}, {2383, 10}, {2374, 15}, {2399, 15}, {19871, 15}, {1736, 15}, {2396, 15}, {2389, 10},
	{2514, 15}, {2227, 10}, {2225, 15}, {11707, 20}, {2739, 15}, {2832, 15}, {19996, 15}, {2264, 10},
	{1810, 15}, {2518, 12}, {2470, 15}, {2689, 15}, {2704, 15}, {2270, 10}, {2261, 10}, {2850, 15},
	{2231, 15}, {18890, 15}, {19617, 15}, {2595, 17}, {2278, 10}, {2245, 15}, {1541, 20}, {19525, 15},
	{2051, 15}, {2050, 15}, {2049, 15}, {2275, 10}, {2269, 10}, {2266, 10}, {2243, 15}, {1749, 10},
	{2252, 15}, {2059, 15}, {2862, 15}, {1429, 15}, {19878, 15}, {1751, 15}, {918, 15}, {2322, 15},
	{1839, 15}, {2853, 15}, {2816, 15}, {2826, 15}, {2723, 15}, {19639, 15}, {19638, 20}, {19637, 20},
	{19636, 15}, {2350, 15}, {11687, 15}, {1355, 10}, {2839, 15}, {2866, 15}, {2246, 25}, {2852, 15},
	{2858, 15}, {11704, 15}, {2812, 15}, {2865, 15}, {2317, 15}, {2125, 15}, {2915, 10}, {3015, 15},
	{2706, 15}, {2705, 20}, {2421, 10}, {19631, 20}, {1886, 15}, {2226, 20}, {1518, 15}, {2648, 15},
	{1809, 15}, {1582, 15}, {1791, 15}, {2827, 15}, {2101, 15}, {2238, 15}, {2318, 15}, {1781, 15},
	{1549, 10}, {2859, 15}, {2824, 15}, {1957, 19}, {1954, 17}, {2190, 10}, {2320, 15}, {1748, 15},
	{2057, 10}, {2194, 15}, {916, 15}, {19581, 15}, {2515, 15}, {2263, 10}, {2854, 10}, {2203, 20},
	{1670, 15}, {2690, 15}, {2828, 15}, {1600, 25}, {2277, 10}, {2268, 10}, {1747, 15}, {2265, 10},
	{2244, 15}, {1782, 15}, {1716, 15}, {1788, 10}, {2837, 15}, {19423, 20}, {19424, 20}, {19422, 20},
	{19421, 20}, {1805, 25}, {1785, 15}, {2821, 15}, {1787, 15}, {1599, 15}, {2192, 15}, {1783, 10},
	{1790, 10}, {14772, 15}, {2279, 10}, {2102, 10}, {2077, 15}, {19921, 15}, {2849, 15}, {11705, 30},
	{19825, 15}, {2253, 15}, {2742, 15}, {19079, 10}, {19078, 15}, {2813, 15}, {2221, 15}, {2223, 15},
	{2222, 15}, {11745, 15}, {2070, 15}, {19830, 15}, {2694, 15}, {2216, 15}, {2028, 175}, {2353, 15},
	{2726, 15}, {2868, 15}, {1488, 15}, {1511, 15}, {14705, 15}, {18634, 15}, {19624, 55}, {2848, 15},
	{2814, 15}, {2863, 15}, {2965, 15}, {2149, 15}, {11743, 15}, {1719, 15}, {19573, 35}, {11718, 15},
	{2386, 15}, {2384, 15}, {19632, 15}, {2485, 15}, {917, 15}, {18633, 15}, {2820, 15}, {19612, 15},
	{1840, 15}, {11728, 15}, {2855, 15}, {19586, 15}, {1210, 15}, {19821, 15}, {1958, 20}, {19820, 10},
	{2342, 15}, {2831, 15}, {2822, 15}, {1604, 15}, {2663, 15}, {2829, 15}, {3026, 10}, {1961, 10},
	{1962, 15}, {1960, 15}, {2851, 15}, {19167, 15}, {11735, 15}, {19584, 15}, {19793, 15}, {19893, 10},
	{19159, 15}, {19847, 15}, {19571, 15}, {19585, 15}, {19824, 90}, {19094, 15}, {2056, 25}, {19809, 20},
	{19566, 15}, {19565, 15}, {19822, 15}, {2196, 15}, {1551, 5}, {2830, 15}, {19808, 15}, {19305, 10},
	{19273, 15}, {2886, 10}, {11719, 15}, {19583, 15}, {2864, 10}, {19562, 15}, {19561, 15}, {2823, 10},
	{371, 15}, {366, 15}, {339, 10}, {338, 15}, {337, 15}, {336, 65}, {335, 15}, {333, 15},
	{326, 15}, {331, 15}, {325, 50}, {324, 15}, {323, 75}, {322, 50}, {321, 15}, {2916, 15},
	{1650, 15}, {19832, 15}, {19918, 15}, {2685, 15}, {2684, 15}, {2040, 15}, {1943, 15}, {18635, 15},
	{2856, 15}, {19568, 15}, {19567, 15}, {1520, 5}, {1950, 5}, {1951, 15}, {1487, 5}, {1517, 5},
	{1512, 15}, {11738, 15}, {19894, 15}, {11744, 15}, {1946, 25}, {1509, 15}, {2922, 10}, {19623, 20},
	{19823, 15}, {2647, 15}, {19621, 15}, {1544, 5}, {1543, 5}, {3072, 15}, {3071, 50}, {19570, 5},
	{1664, 5}, {1669, 15}, {2966, 10}, {18644, 25}, {1668, 10}, {19630, 15}, {19819, 10}, {19579, 15},
	{11723, 15}, {11722, 15}, {1665, 15}, {1944, 35}, {19807, 30}, {2710, 15}, {2967, 60}, {2749, 15},
	{11715, 15}, {1484, 15}, {11716, 10}, {19942, 75}, {19564, 10}, {19563, 15}, {19818, 15}, {19578, 15},
	{19582, 15}, {1486, 15}, {19811, 15}, {2752, 10}, {2709, 10}, {19813, 15}, {2114, 15}, {19610, 15},
	{19556, 15}, {19555, 15}, {19814, 20}, {19569, 15}, {1644, 15}, {11712, 15}, {3065, 15}, {18641, 15},
	{19835, 15}, {2711, 15}, {1510, 15}, {1945, 30}, {19826, 20}, {19829, 15}, {19828, 10}, {19627, 15},
	{19998, 15}, {19827, 15}, {2961, 15}, {19035, 50}, {19034, 50}, {19033, 15}, {19993, 10}, {19873, 5},
	{2768, 15}, {1546, 10}, {1667, 15}, {19897, 10}, {19896, 10}, {11748, 15}, {2958, 5}, {19874, 5},
	{2344, 15}, {19920, 15}, {19513, 10}, {18874, 100}, {18873, 100}, {18872, 15}, {18871, 10}, {18870, 10},
	{18869, 15}, {18868, 15}, {18867, 10}, {18866, 100}, {18865, 10}, {19883, 15}, {1974, 15}, {2880, 15},
	{2703, 15}, {19576, 15}, {19575, 15}, {19574, 15}, {11747, 15}, {19577, 15}, {19053, 15}, {19052, 15},
	{19051, 10}, {19050, 15}, {19049, 15}, {19048, 50}, {19047, 50}, {19046, 15}, {19045, 15}, {19044, 15},
	{19043, 10}, {19042, 15}, {19041, 15}, {19040, 50}, {19039, 50}, {19625, 15}, {3001, 15}, {3000, 15},
	{2999, 15}, {2998, 15}, {2997, 25}, {2996, 25}, {2995, 25}, {3003, 15}, {3106, 15}, {3105, 15},
	{3104, 15}, {3103, 15}, {3102, 25}, {3101, 25}, {3100, 25}, {2141, 15}, {2147, 15}, {2158, 15},
	{2170, 15}, {2140, 30}, {2153, 30}, {2654, 10}, {2465, 10}, {2466, 15}, {2654, 10}, {2483, 10},
	{2477, 15}, {1455, 10}, {1484, 10}, {1485, 10}, {1486, 10}, {1487, 15}, {1488, 10}, {1509, 10},
	{1510, 15}, {1511, 10}, {1512, 10}, {1517, 10}, {1520, 10}, {1541, 15}, {1542, 10}, {1543, 10},
	{1545, 15}, {1544, 10}, {1551, 10}, {1546, 10}, {1669, 10}, {1978, 15}, {1979, 15}, {2618, 10},
	{2188, 15}, {1933, 10}, {1932, 10}, {1931, 10}, {1930, 10}, {1940, 15}, {1941, 15}, {1670, 10},
	{2052, 15}, {2053, 15}, {2054, 10}, {2374, 20}, {2377, 20}, {2378, 15}, {2380, 15}, {2381, 20},
	{2382, 15}, {2383, 15}, {2384, 20}, {2386, 20}, {2389, 20}, {2390, 15}, {2391, 15}, {2392, 20},
	{2394, 15}, {2396, 15}, {2397, 20}, {2398, 20}, {2399, 20}, {2407, 15}, {2408, 15}, {2411, 20},
	{2689, 15}, {2704, 15}, {2705, 20}, {2706, 20}, {2843, 20}, {2844, 15}, {2845, 20}, {2846, 20},
	{18094, 15}, {19433, 15}, {19437, 15}, {19438, 10}, {19439, 10}, {19440, 10}, {19441, 15},
	{19442, 10}, {19443, 15}, {19444, 10}, {19436, 10}, {19435, 10}, {19434, 10}, {19426, 15},
	{19427, 10}, {19428, 15}, {19429, 10}, {19430, 10}, {19431, 10}, {19432, 10}, {19368, 10},
	{19367, 10}, {19366, 15}, {19370, 10}, {19362, 10}, {19369, 10}, {19376, 10}, {19371, 10},
	{19372, 10}, {19464, 15}, {19373, 10}, {19374, 10}, {19375, 10}, {19377, 10}, {19378, 10},
	{19379, 10}, {19380, 15}, {19381, 10}, {19382, 10}, {19365, 10}, {19355, 10}, {19364, 10},
	{19353, 10}, {19354, 15}, {19356, 10}, {19357, 10}, {19358, 10}, {19359, 10}, {19360, 10},
	{19361, 10}, {19363, 15}, {19462, 10}, {19447, 10}, {19456, 10}, {19463, 10}, {19445, 10},
	{19455, 10}, {19446, 15}, {19457, 10}, {19448, 10}, {19449, 10}, {19450, 10}, {19451, 10},
	{19452, 10}, {19453, 15}, {19454, 10}, {19458, 10}, {19460, 10}, {19461, 10}, {19459, 10},
	{19387, 10}, {19411, 15}, {19392, 10}, {19395, 10}, {19389, 10}, {19390, 10}, {19391, 10},
	{19392, 10}, {19393, 15}, {19394, 10}, {19397, 10}, {19396, 10}, {19398, 10}, {19399, 10},
	{19402, 10}, {19401, 15}, {19400, 10}, {19403, 10}, {19388, 10}, {19385, 10}, {19465, 10},
	{19405, 10}, {19383, 15}, {19384, 10}, {19404, 10}, {19406, 10}, {19407, 10}, {19416, 10},
	{19408, 10}, {19409, 15}, {19410, 10}, {19412, 10}, {19414, 10}, {19415, 10}, {19417, 10},
	{19413, 10}, {19386, 15}, {1491, 15}, {1492, 15}, {1493, 15}, {1494, 15}, {1495, 15}, {1498, 15},
	{1499, 15}, {1500, 15}, {1501, 15}, {1502, 15}, {1504, 15}, {1505, 15}, {1506, 15}, {1507, 15},
	{1522, 15}, {1523, 15}, {1535, 15}, {1536, 15}, {1557, 15}, {1649, 15}, {936, 15}, {937, 15},
	{941, 15}, {1416, 15}, {1741, 15}, {1742, 15}, {1743, 15}, {1744, 15}, {2025, 15}, {2161, 15},
	{2162, 15}, {2164, 15}, {2167, 15}, {2199, 15}, {2204, 15}, {2208, 15}, {2191, 15}, {2197, 15},
	{2307, 15}, {2020, 15}, {2046, 15}, {2296, 15}, {2297, 15}, {2308, 15}, {2009, 15}, {2607, 15},
	{2181, 15}, {2180, 15}, {643, 15}, {1968, 15}, {2122, 15}, {2123, 15}, {2124, 15}, {1726, 15},
	{1727, 15}, {1210, 10}, {1253, 15}, {1550, 15}, {1575, 15}, {1576, 15}, {1577, 15}, {1578, 15},
	{1579, 15}, {1580, 15}, {2086, 15}, {1217, 15}, {1218, 20}, {1222, 20}, {1225, 20}, {1985, 20},
	{3057, 15}, {1235, 15}, {1327, 15}, {1329, 15}, {1330, 20}, {1300, 20}, {1327, 20}, {1328, 20},
	{1442, 15}, {1337, 15}, {1339, 15}, {1343, 15}, {1369, 20}, {1359, 20}, {1574, 20}, {2047, 20},
	{2048, 15}, {2685, 15}, {2714, 15}, {1208, 15}, {2047, 20}, {639, 20}, {19815, 15}, {2481, 10},
	{2481, 15}, {2480, 15}
};

new Sandalyeler[28][] = {
	{1811}, {2636}, {2356}, {2121}, {2079}, {1720}, {1716}, {2776}, {1721}, {2350}, {1724}, {2125}, {2124}, {2123}, {2120}, {1806},
	{1739}, {2807}, {1671}, {19999}, {11665}, {19996}, {11734}, {1714}, {1722}, {1810}, {2096}, {1805}
};

new Koltuklar[16][] = {
	{1727}, {1704}, {1705}, {1708}, {1711}, {1735}, {2571}, {2293}, {11682}, {2291}, {1723}, {1764}, {1702}, {1713}, {1757}, {1728}
};

new Yataklar[23][] = {
	{1771}, {2564}, {2565}, {2300}, {2563}, {2298}, {14446}, {2566}, {2301}, {1700}, {1794}, {2090}, {1745}, {1798},
	{2302}, {2299}, {14866}, {1802}, {1793}, {1801}, {1797}, {1799}, {1795}
};

new BanyoEsyalari[19][] = {
	{19874}, {19873}, {2742}, {2515}, {2518}, {2739}, {11707}, {2514}, {2524}, {2523}, {2525}, {2528},
	{2602}, {2738}, {2527}, {2526}, {2517}, {2520}, {2522}
};

new ElektronikEsyalari[47][] = {
	{1840}, {19612}, {1719}, {2028}, {2102}, {14772}, {1790}, {1783}, {1787}, {1785}, {1788}, {1782},
	{1747}, {2320}, {2190}, {1781}, {2318}, {2101}, {1791}, {1809}, {2648}, {2226}, {2317}, {2322},
	{1839}, {1749}, {2595}, {2231}, {2225}, {2227}, {2316}, {2233}, {2103}, {2312}, {2230},
	{1786}, {2224}, {2104}, {2229}, {1792}, {2232}, {1717}, {2099}, {14604}, {2100}, {1954}, {1957}
};

new MutfakEsyalari[53][] = {
	{2303}, {11743}, {2149}, {19830}, {2147}, {2170}, {2417}, {2002}, {2415}, {1808}, {2294}, {2147},
	{2131}, {2132}, {2133}, {2134}, {2141}, {2340}, {2341}, {2334}, {2335}, {2336}, {2337}, {2338},
	{2158}, {2156}, {2157}, {2159}, {2160}, {2135}, {2136}, {2137}, {2138}, {2139}, {2140}, {2151},
	{2152}, {2153}, {2154}, {2155}, {2127}, {2128}, {2129}, {2130}, {2304}, {2294}, {19931},
	{19930}, {19929}, {19928}, {19927}, {19926}, {19925}
};

new Masalar[34][] = {
	{2008}, {2184}, {2206}, {2185}, {2604}, {2725}, {2637}, {2314}, {2321}, {2315}, {2313}, {2311},
	{11690}, {2635}, {19997}, {2763}, {2346}, {1516}, {1433}, {1817}, {2699}, {2030}, {2333}, {2111},
	{2115}, {2165}, {2357}, {1814}, {2083}, {1820}, {11691}, {1827}, {2370}, {2644}
};

new DigerMobilyalar[24][] = {
	{2592}, {1824}, {2784}, {19474}, {2964}, {2188}, {2998}, {3100}, {3106}, {3105}, {3104}, {3103},
	{3102}, {3101}, {3003}, {3002}, {3001}, {3000}, {2999}, {2997}, {2996}, {2995}, {2965}, {338}
};

new RestoranAksesuar[4][] = {
	{2880, 15}, {2768, 15}, {19835, 10}, {2647, 10}
};

new ElektronikAksesuar[20][] = {
	{18865, 250}, {18866, 250}, {18867, 250}, {18868, 250}, {18869, 250}, {18870, 250}, {18871, 250}, {18872, 250},
	{18873, 250}, {18874, 250}, {18875, 300}, {19942, 150}, {19893, 700}, {19317, 500}, {19318, 500}, {19319, 500},
	{19421, 250}, {19422, 250}, {19423, 250}, {19424, 250}
};

new MarketAksesuar[19][] = {
	{18642, 100}, {18641, 20}, {3065, 5}, {19610, 10}, {19578, 5}, {19563, 5}, {18644, 10}, {19570, 5},
	{11738, 250}, {2663, 5}, {2690, 150}, {2228, 50}, {3027, 10}, {3044, 10}, {2958, 5}, {19847, 100},
	{19835, 50}, {19822, 50}, {19811, 20}
};

new KiyafetciAksesuar[203][] = {
	{2710, 10}, {19039, 10}, {19040, 10}, {19041, 10}, {19042, 10}, {19043, 10}, {19044, 10}, {19045, 10},
	{19046, 10}, {19047, 10}, {19048, 10}, {19049, 10}, {19050, 10}, {19051, 10}, {19052, 10}, {19053, 10},
	{19904, 10}, {19090, 10}, {19091, 10}, {19092, 10}, {19555, 10}, {19556, 10}, {18952, 10}, {19517, 10},
	{19077, 10}, {18975, 10}, {19516, 10}, {19136, 10}, {19518, 10}, {19274, 10}, {19351, 10},
	{19350, 10}, {19349, 10}, {1210, 10}, {19559, 10}, {3026, 10}, {19085, 10}, {18974, 10}, {19036, 10},
	{19037, 10}, {19038, 10}, {19163, 10}, {19801, 10}, {18911, 10}, {18912, 10}, {18913, 10}, {18914, 10},
	{18915, 10}, {18916, 10}, {18917, 10}, {18918, 10}, {18919, 10}, {18920, 10}, {18953, 10}, {18954, 10},
	{19554, 10}, {18960, 10}, {18891, 10}, {18892, 10}, {18893, 10}, {18894, 10}, {18895, 10}, {18896, 10},
	{18897, 10}, {18898, 10}, {18899, 10}, {18900, 10}, {18901, 10}, {18902, 10}, {18903, 10}, {18904, 10},
	{18905, 10}, {18906, 10}, {18907, 10}, {18908, 10}, {18909, 10}, {18910, 10}, {18921, 10}, {18922, 10},
	{18923, 10}, {18924, 10}, {18925, 10}, {18939, 10}, {18940, 10}, {18941, 10}, {18942, 10}, {18943, 10},
	{19160, 10}, {18926, 10}, {18927, 10}, {18928, 10}, {18929, 10}, {18930, 10}, {18931, 10}, {18932, 10},
	{18933, 10}, {18934, 10}, {18935, 10}, {18961, 10}, {19558, 10}, {18964, 10}, {18965, 10}, {18966, 10},
	{18955, 10}, {18956, 10}, {18957, 10}, {18958, 10}, {18959, 10}, {19064, 10}, {18967, 10}, {18968, 10},
	{18969, 15}, {18947, 10}, {18948, 10}, {18949, 10}, {18950, 10}, {18951, 10}, {19488, 10}, {18944, 10},
	{18945, 15}, {18946, 10}, {18639, 10}, {18970, 10}, {18971, 10}, {18972, 10}, {18973, 10}, {18553, 10},
	{19487, 15}, {18962, 10}, {19095, 10}, {19096, 10}, {19097, 10}, {19098, 10}, {19352, 10}, {19114, 10},
	{19115, 10}, {19116, 10}, {19117, 10}, {19118, 10}, {19119, 10}, {19120, 10}, {2053, 10}, {18638, 10},
	{19520, 10}, {2054, 10}, {19067, 10}, {19068, 10}, {19069, 10}, {18936, 10}, {18937, 10}, {18938, 10},
	{18976, 10}, {18977, 10}, {18978, 10}, {18979, 10}, {18645, 10}, {19528, 10}, {19006, 10}, {19007, 10},
	{19008, 10}, {19009, 10}, {19010, 10}, {19011, 10}, {19012, 10}, {19013, 10}, {19014, 10}, {19015, 10},
	{19016, 10}, {19017, 10}, {19018, 10}, {19019, 10}, {19020, 10}, {19021, 10}, {19022, 10}, {19023, 10},
	{19024, 10}, {19025, 10}, {19026, 10}, {19027, 10}, {19028, 10}, {19029, 10}, {19030, 10}, {19031, 10},
	{19032, 10}, {19033, 10}, {19034, 10}, {19035, 10}, {19469, 10}, {19904, 10}, {11749, 10}, {11738, 10},
	{19306, 10}, {19942, 10}, {19557, 10}, {-2010, 10}, {-2011, 10}, {-2012, 10}, {-2012, 10}, {-2013, 10},
 	{-2015, 10}, {-2016, 10}, {-2017, 0}, {11712, 0}
};

new PolisAksesuar[31][] = {
	{18636}, {19161}, {19162}, {19141}, {19200}, {19521}, {19099}, {19100}, {19472}, {19142},
	{19773}, {19347}, {18637}, {-2003}, {-2004}, {-2005}, {-2006}, {-2007}, {-2008}, {-2009},
	{-2021}, {-2022}, {-2023}, {-2024}, {-2025}, {-2026}, {-2027}, {-2028}, {-2029}, {-2030},
	{-2031}
};

new MedikalAksesuar[6][] = {
    {11738}, {18961}, {18950}, {19026}, {19019}, {19098}
};

new AksesuarKemik[][24] = {
    {"Omurga"},
    {"Kafa"},
    {"Sol Üst Kol"},
    {"Sað Üst Kol"},
    {"Sol El"},
    {"Sað El"},
    {"Sol Uyluk"},
    {"Sað Uyluk"},
    {"Sol Ayak"},
    {"Sað Ayak"},
    {"Sað Baldýr"},
    {"Sol Baldýr"},
    {"Sol Önkol"},
    {"Sað Önkol"},
    {"Sol Köprücük"},
    {"Sað Köprücük"},
    {"Boyun"},
    {"Çene"}
};

new const s_TopSpeed[212] = {
	157, 147, 186, 110, 133, 164, 110, 148, 100, 158, 129, 221, 168, 110, 105, 192, 154, 270,
	115, 149, 145, 154, 140, 99, 135, 270, 173, 165, 157, 201, 190, 130, 94, 110, 167, 0, 149,
	158, 142, 168, 136, 145, 139, 126, 110, 164, 270, 270, 111, 0, 0, 193, 270, 60, 135, 157,
	106, 95, 157, 136, 270, 160, 111, 142, 145, 145, 147, 140, 144, 270, 157, 110, 190, 190,
	149, 173, 270, 186, 117, 140, 184, 73, 156, 122, 190, 99, 64, 270, 270, 139, 157, 149, 140,
	270, 214, 176, 162, 270, 108, 123, 140, 145, 216, 216, 173, 140, 179, 166, 108, 79, 101, 270,
    270, 270, 120, 142, 157, 157, 164, 270, 270, 160, 176, 151, 130, 160, 158, 149, 176, 149, 60,
    70, 110, 167, 168, 158, 173, 0, 0, 270, 149, 203, 164, 151, 150, 147, 149, 142, 270, 153, 145,
    157, 121, 270, 144, 158, 113, 113, 156, 178, 169, 154, 178, 270, 145, 165, 160, 173, 146, 0, 0,
    93, 60, 110, 60, 158, 158, 270, 130, 158, 153, 151, 136, 85, 0, 153, 142, 165, 108, 162, 0, 0,
    270, 270, 130, 190, 175, 175, 175, 158, 151, 110, 169, 171, 148, 152, 0, 0, 0, 108, 0, 0
};

new SoyunKadinBeyaz[22][] = {
    {87}, {92}, {138}, {140}, {251}, {21515}, {21517}, {21519}, {21524}, {21525},
    {21526}, {21527}, {21528}, {21529}, {21530}, {21534}, {21543}, {21547}, {21560}, {21570},
    {21577}, {21581}
};

new SoyunKadinSiyah[4][] = {
    {139}, {22019}, {22033}, {22034}
};

new SoyunErkekBeyaz[5][] = {
    {97}, {154}, {45}, {252}, {20036}
};

new SoyunErkekSiyah[1][] = {
    {18}
};

new VIPKadinBeyaz[1][] = {
    {192}
};

new VIPKadinSiyah[1][] = {
    {9}
};

new VIPErkekBeyaz[1][] = {
    {294}
};

new VIPErkekSiyah[1][] = {
    {4}
};

new ErkekBeyaz[272][] = {
    {1}, {2}, {3}, {23}, {26}, {27}, {29}, {30}, {32}, {33},
	{34}, {37}, {42}, {44}, {47}, {48}, {49}, {52}, {57}, {58},
	{59}, {60}, {61}, {62}, {68}, {73}, {81}, {94}, {95}, {96},
	{100}, {101}, {108}, {109}, {110}, {111}, {112}, {113}, {114}, {115},
	{116}, {117}, {118}, {119}, {120}, {121}, {122}, {123}, {124}, {125},
	{126}, {127}, {128}, {132}, {133}, {135}, {137}, {147}, {153}, {158},
	{159}, {160}, {161}, {164}, {165}, {170}, {171}, {173}, {174}, {175},
	{177}, {179}, {181}, {184}, {186}, {187}, {188}, {189}, {200}, {202},
	{203}, {204}, {206}, {208}, {210}, {212}, {213}, {217}, {223}, {227},
	{228}, {229}, {230}, {234}, {235}, {236}, {240}, {241}, {242}, {247},
	{248}, {250}, {254}, {255}, {258}, {259}, {261}, {268}, {272}, {273},
	{289}, {290}, {291}, {292}, {294}, {299}, {303}, {304}, {305}, {20001},
	{20002}, {20003}, {20004}, {20005}, {20006}, {20007}, {20008}, {20009}, {20010}, {20011},
	{20012}, {20013}, {20014}, {20017}, {20018}, {20019}, {20020}, {20021}, {20022}, {20023},
	{20024}, {20025}, {20026}, {20027}, {20028}, {20029}, {20030}, {20031}, {20032}, {20033},
	{20034}, {20035}, {20110}, {20037}, {20038}, {20039}, {20040}, {20041}, {20042}, {20043},
	{20044}, {20045}, {20046}, {20047}, {20048}, {20049}, {20050}, {20052}, {20053}, {20054},
	{20055}, {20056}, {20057}, {20058}, {20059}, {20060}, {20061}, {20062}, {20063}, {20064},
	{20065}, {20066}, {20067}, {20068}, {20069}, {20070}, {20071}, {20072}, {20073}, {20074},
	{20075}, {20076}, {20077}, {20078}, {20079}, {20080}, {20081}, {20082}, {20083}, {20084},
	{20085}, {20086}, {20087}, {20088}, {20089}, {20090}, {20091}, {20092}, {20093}, {20094},
	{20096}, {20097}, {20098}, {20099}, {20100}, {20101}, {20102}, {20103}, {20104}, {20105},
	{20107}, {20108}, {20109}, {20110}, {20111}, {20112}, {20113}, {20114}, {20115}, {20116},
	{20117}, {20118}, {20119}, {20120}, {20121}, {20122}, {20123}, {20124}, {20125}, {20126},
	{20127}, {20128}, {20129}, {20130}, {20131}, {20132}, {20133}, {20135}, {20136}, {20137},
	{20138}, {20139}, {20140}, {20141}, {20142}, {20143}, {20148}, {20149}, {20155}, {20156},
	{20157}, {20158}, {20160}, {20161}, {20164}, {20167}, {20168}, {20169}, {20170}, {20171},
	{21045}, {20172}
};

new ErkekSiyah[91][] = {
    {4}, {5}, {6}, {7}, {14}, {15}, {16}, {17}, {19}, {20},
	{21}, {22}, {24}, {25}, {28}, {36}, {51}, {66}, {67}, {79},
	{80}, {83}, {84}, {86}, {102}, {103}, {104}, {105}, {106}, {107},
	{134}, {136}, {142}, {143}, {156}, {163}, {168}, {180}, {182}, {183},
	{185}, {220}, {221}, {222}, {249}, {253}, {260}, {262}, {293}, {296},
	{297}, {21001}, {21002}, {21003}, {21004}, {21005}, {21006}, {21007}, {21008}, {21009},
	{21010}, {21011}, {21012}, {21014}, {21017}, {21018}, {21019}, {21020}, {21021}, {21022},
	{21023}, {21024}, {21025}, {21026}, {21027}, {21028}, {21029}, {21030}, {21031}, {21032},
	{21033}, {21034}, {21035}, {21036}, {21039}, {21040}, {21041}, {21042}, {21043}, {21044},
	{21045}
};

new KadinBeyaz[125][] = {
	{12}, {31}, {38}, {39}, {41}, {53}, {54}, {55}, {56}, {75},
	{85}, {88}, {89}, {90}, {91}, {93}, {129}, {130}, {131}, {141},
	{151}, {152}, {157}, {169}, {172}, {191}, {193}, {194}, {196}, {197},
	{198}, {201}, {211}, {214}, {216}, {224}, {225}, {226}, {232}, {233},
	{237}, {246}, {263}, {21500}, {21501}, {21502}, {21503}, {21504}, {21505}, {21506},
	{21508}, {21510}, {21511}, {21512}, {21513}, {21514}, {21518}, {21520}, {21521}, {21522},
	{21523}, {21531}, {21532}, {21533}, {21535}, {21536}, {21537}, {21538}, {21539}, {21540},
	{21541}, {21542}, {21544}, {21545}, {21546}, {21548}, {21549}, {21550}, {21551}, {21552},
	{21553}, {21554}, {21555}, {21556}, {21557}, {21558}, {21559}, {21561}, {21562}, {21563},
	{21564}, {21565}, {21566}, {21567}, {21568}, {21569}, {21571}, {21572}, {21573}, {21574},
	{21575}, {21576}, {21578}, {21579}, {21580}, {21582}, {21583}, {21584}, {21585}, {21586},
	{21587}, {21588}, {21589}, {21590}, {21591}, {21592}, {21593}, {21594}, {21595}, {21596},
	{21597}, {21598}, {21599}, {21600}, {21604}
};

new KadinSiyah[55][] = {
	{11}, {12}, {9}, {10}, {40}, {64}, {69}, {76}, {190}, {131},
	{195}, {207}, {214}, {215}, {218}, {219}, {238}, {243}, {244}, {245},
	{256}, {298}, {22000}, {22001}, {22003}, {22004}, {22005}, {22006}, {22007}, {22009},
	{22010}, {22011}, {22012}, {22013}, {22014}, {22015}, {22016}, {22017}, {22018}, {22020},
	{22021}, {22022}, {22023}, {22024}, {22025}, {22026}, {22027}, {22028}, {22029}, {22030},
	{22031}, {22032}, {22035}, {22036}, {22037}
};

new LSPDUniforma_ErkekBeyaz[7][] = {
	{281}, {24008}, {24009}, {24011}, {24012}, {24013}, {24015}
};

new LSPDUniforma_ErkekSiyah[4][] = {
	{284}, {24007}, {24010}, {24014}
};

new LSPDUniforma_KadinBeyaz[5][] = {
	{306}, {24001}, {24002}, {24003}, {24004}
};

new LSPDUniforma_KadinSiyah[3][] = {
	{20062}, {24005}, {24006}
};

new LSFMDUniforma_ErkekBeyaz[8][] = {
    {276}, {277}, {20161}, {20163}, {20164}, {20166}, {20168}, {20169}
};

new LSFMDUniforma_ErkekSiyah[3][] = {
    {274}, {275}, {278}
};

new LSFMDUniforma_KadinBeyaz[4][] = {
    {308}, {20162}, {20165}, {20167}
};

new UberAraclari[31][] = {
	{400, 5000}, {402, 7500}, {405, 5000}, {409, 10000}, {411, 15000}, {415, 7500}, {418, 3500}, {421, 4000}, {426, 5000},
	{429, 7500}, {445, 4500}, {451, 10000}, {462, 1500}, {461, 2500}, {522, 15000}, {466, 1000}, {482, 3000}, {492, 2000},
	{507, 2000}, {529, 2000}, {540, 2500}, {541, 10000}, {546, 2000}, {547, 2000}, {550, 3000}, {551, 3500}, {560, 7500},
	{566, 2500}, {567, 4000}, {579, 7500}, {580, 8500}
};

enum a_BaliktutPos {
	Float:balikPosX,
	Float:balikPosY,
	Float:balikPosZ
};

enum a_MadenciPos {
	Float:madenciPosX,
	Float:madenciPosY,
	Float:madenciPosZ
};

enum a_InteriorBilgi {
	intIsim[32],
	intInterior,
	Float:intX,
	Float:intY,
	Float:intZ
};

enum ev_InteriorBilgi {
	intIsim[32],
	intInterior,
	Float:intX,
	Float:intY,
	Float:intZ
};

enum ehliyetSoru {
	sinav_Soru[144],
	ilk_Cevap[64],
	ikinci_Cevap[64],
	ucuncu_Cevap[64],
	dogru_Cevap
};

new const EhliyetSorular[][ehliyetSoru] = {
	{"Aþaðýdakilerden hangisi araç sürerken yapýlmamalýdýr?", "Alkollü araç sürmek.", "Ehliyeti yanýmýzda bulundurmak.", "Telefonla konuþmamak.", 2},
	{"Motor karterindeki yað seviyesi normalin çok altýnda iken motor çalýþtýrýlýrsa ne olur?", "Motor ýsýnýr, yanar.", "Motor çok soður.", "Motor suyuna yað karýþýr.", 0},
	//{"Aþaðýdakilerden hangisi bir kontrol noktasýna geldiðimizde yapýlmalýdýr?", "Son sürat kontrol noktasýný geçmek.", "Silahýmýzý camdan çýkartýp görevlilere ateþ açmak.", "Görevlilerinin ikazlarýna uyarak aracýmýzý uygun þekilde durdurmak.", 2},
	{"Aþaðýdakilerden hangisi hoþgörü sahibi olmayan sürücülerin özelliklerindendir?", "Bencillikten uzak durmak.", "Öfkeli olmak ", "Baþarýlý Ýletiþim kurmak.", 1},
	{"Aþaðýdakilerden hangisi bilinç kaybýnýn baþlýca nedenlerinden biri deðildir?", "Beyin kanamasý.", "Aþýrý dozda alkol alýmý.", "Yüzün kýzarmasý.", 2},
	{"Aþaðýdakilerden hangisi geçiþ üstünlüðüne sahip araçlardandýr?", "Motosiklet", "Tarým traktörü", "Ýtfaiye aracý", 2},
	{"Aþaðýdakilerin hangisinde oynamaz eklem bulunur?", "Kafatasý", "El bileði", "Dirsek", 0},
	{"Park edilmiþ araçta aþaðýdakilerden hangisinin yapýlmasýna gerek yoktur?", "El freninin çekilmesine", "Park lambasýnýn yakýlmasýna", "Motorun durdurulmasýna", 1}
};

new const EvInterior[][ev_InteriorBilgi] = {
	{"Interior 1", 5, 1260.64, -785.37, 1091.91},
	{"Interior 2", 5, 140.17, 1366.07, 1083.65},
	{"Interior 3", 12, 2324.53, -1149.54, 1050.71},
	{"Interior 4", 7, 225.68, 1021.45, 1084.02},
	{"Interior 5", 6, 234.19, 1063.73, 1084.21},
	{"Interior 6", 5, 226.30, 1114.24, 1080.99},
	{"Interior 7", 3, 235.34, 1186.68, 1080.26},
	{"Interior 8", 2, 491.07, 1398.50, 1080.26},
	{"Interior 9", 10, 24.04, 1340.17, 1084.38},
	{"Interior 10", 15, -283.44, 1470.93, 1084.38},
	{"Interior 11", 4, -260.49, 1456.75, 1084.37},
	{"Interior 12", 9, 83.03, 1322.28, 1083.87},
	{"Interior 13", 9, 2317.89, -1026.76, 1050.22},
	{"Interior 14", 3, 2495.98, -1692.08, 1014.74},
	{"Interior 15", 8, 2807.48, -1174.76, 1025.57},
	{"Interior 16", 6, 2196.85, -1204.25, 1049.02},
	{"Interior 17", 15, 377.15, 1417.41, 1081.33},
	{"Interior 18", 10, 2270.38, -1210.35, 1047.56},
	{"Interior 19", 12, 446.99, 1397.07, 1084.30},
	{"Interior 20", 15, 387.22, 1471.70, 1080.19},
	{"Interior 21", 5, 22.88, 1403.33, 1084.44},
	{"Interior 22", 8, 2365.31, -1135.60, 1050.88},
	{"Interior 23", 2, 2237.59, -1081.64, 1049.02},
	{"Interior 24", 15, 295.04, 1472.26, 1080.26},
	{"Interior 25", 4, 261.12, 1284.30, 1080.26},
	{"Interior 26", 4, 221.92, 1140.20, 1082.61},
	{"Interior 27", 6, -68.81, 1351.21, 1080.21},
	{"Interior 28", 9, 260.85, 1237.24, 1084.26},
	{"Interior 29", 2, 2468.84, -1698.24, 1013.51},
	{"Interior 30", 1, 223.20, 1287.08, 1082.14},
	{"Interior 31", 11, -1140.28, 1287.08, 1050.90},
	{"Interior 32", 15, 328.05, 1477.73, 1084.44},
	{"Interior 33", 1, 223.20, 1287.08, 1082.14},
	{"Interior 34", 8, -42.59, 1405.47, 1084.43},
	{"Interior 35", 12, 446.90, 506.35, 1001.42},
	{"Interior 36", 4, 299.78, 309.89, 1003.30},
	{"Interior 37", 6, 2308.77, -1212.94, 11049.02},
	{"Interior 38", 5, 2233.64, -1115.26, 1050.88},
	{"Interior 39", 1, 2218.40, -1076.18, 1050.48},
	{"Interior 40", 2, 266.50, 304.90, 999.15},
	{"Interior 41", 1, 243.72, 304.91, 999.15},
	{"Interior 42", 6, 343.81, 304.86, 999.15},
	{"Interior 43", 10, 2259.38, -1135.77, 1050.64}
};

new const BalikTutPos[][a_BaliktutPos] = {
	{403.8266, -2088.7598, 7.8359},
	{398.7553, -2088.7490, 7.8359},
	{396.2197, -2088.6692, 7.8359},
	{391.1094, -2088.7976, 7.8359},
	{383.4157, -2088.7849, 7.8359},
	{374.9598, -2088.7979, 7.8359},
	{369.8107, -2088.7927, 7.8359},
	{367.3637, -2088.7925, 7.8359},
	{362.2244, -2088.7981, 7.8359},
	{354.5382, -2088.7979, 7.8359},
	{349.9572, -2072.5161, 7.8359},
	{349.9332, -2067.4265, 7.8359},
	{349.9214, -2064.8467, 7.8359},
	{349.8975, -2059.7083, 7.8359},
	{349.8622, -2052.0417, 7.8359}
};

new const MadenciPos[][a_MadenciPos] = {
	{656.7435, 913.8972, -40.4886},
	{669.1951, 913.5421, -40.5918},
	{642.9830, 863.6428, -42.7746},
	{645.0585, 855.0717, -42.9464},
	{632.8987, 856.0295, -42.8901},
	{613.8811, 864.3517, -42.9609},
	{605.0392, 922.2003, -42.1474},
	{589.6326, 917.2314, -42.9325},
	{630.4084, 826.9768, -42.9609},
	{635.3353, 819.4755, -42.9609},
	{644.4871, 825.9365, -42.9609}
};

new const InteriorListesi[][a_InteriorBilgi] = {
	{"Green Screen", 2, 1526.28, -1628.49, 13.80},
	{"East Los Santos PD", 102, 2863.0036, -858.3316, -21.6994},
	{"Wilshire PD Station Interior", 103, -1182.7446, -1675.3814, 897.1372},
	{"PD Harbor", 68, 1556.0610, -1375.4938, 1395.2989},
	{"PD Carbon", 98, -959.5805, -2360.2995, 1701.0859},
	{"PD Tevir", 99, 622.7288, -567.2826, 1929.6149},
	{"PD Halkla Ýliþkiler", 100, 1409.3210, -2.3853, 1000.9291},
	{"Senatörlük - Giriþ", 4, 2355.2995, 1456.9222, -43.7090},
	{"Senatörlük - Orta Kat", 4, 2382.9179, 1542.7728, -43.7149},
	{"Senatörlük - Konferans Salonu", 4, 2440.7187, 1499.2496, -37.3239},
	{"San News", 234, -193.9348, 1344.3330, 1500.9787},
	{"TV Stüdyo", 234, 2498.1088, 2482.2243, -84.8992},
	{"Müzik Stüdyo", 16, 995.9124, 1000.0020, 2001.0859},
	{"Müzik Stüdyo 2", 145, 228.0001, 1764.0433, 1499.2519},
	{"Dövmeci", 23, 2147.5654, -1652.2697, 2001.0948},
	{"Hastane Giriþ Kat", 1, 1351.4143, 1583.0238, 2010.0701},
	{"Hastane 2.kat", 199, 1276.6038, 1589.7651, 3692.2253},
	{"Hastane 3.kat", 196, 1247.9532, 1585.3195, 3695.7729},
	{"Hastane 4.kat - Ameliyathane", 197, 1338.5119, 1680.1451, 3701.2961},
	{"Hastane Zemin Kat - Morg", 198, 1164.8487, 1597.9659, 3699.4404},
	{"Hastane Kantin, Tuvalet", 195, 1341.6347, 1545.3918, 3695.7761},
	{"Brow Bar", 123, 163.7780, 1717.1520, 2059.5570},
	{"Mastro Bar", 19, 2352.1633, -1319.9124, 2501.0947},
	{"Zeta Bar", 7, 1049.3857, 2822.7900, 917.1139},
	{"Prescott Bar", 207, 251.7988, 1833.8468, 2024.5439},
	{"Ernesto Bar", 245, 585.8118, 283.0331, 2218.6008},
	{"Surprise Bar", 33, 1550.6979, 2241.7348, 1117.8762},
	{"Motorcu Bar", 34, 1387.6317, -24.4928, 1000.9175},
	{"Strip Club", 250, 1376.3502, -113.7880, 1502.0252},
	{"Strip Club 2", 128, 1373.9200, -124.7371, 1499.9801},
	{"Strip Club 3", 242, 199.2841, 1743.1093, 3001.0859},
	{"Strip Club 4 - Çaðatay Fav", 176, 136.4736, -99.6797, 2501.0878},
	{"Strip Club 5 - Pavyon", 177, 306.6446, 1846.0159, 3000.9450},
	{"ZCN Club", 67, 2088.2812, -1680.5783, 1913.6269},
	{"Complex 1", 14, 2787.4714, -2142.1501, 3000.9729},
	{"Complex 2", 15, -160.2411, 2448.2734, 3001.0859},
	{"Complex 3", 21, 2538.4711, 461.1843, 3312.0610},
	{"Complex 4", 20, -1345.9189, -1068.5667, 3174.8640},
	{"Complex 5", 16, 1281.9857, 1273.2426, 2107.7500},
	{"Complex 6", 66, 1041.8979, 2370.7229, 1111.2139},
	{"Complex 7", 67, 1471.4035, 1555.2584, 17.0279},
	{"Complex 8", 68, -1284.6640, -382.5600, 14.7839},
	{"Complex 9", 78, 1411.4956, -14.3706, 1001.1855},
	{"Complex 10", 79, 1390.3171, -3.3051, 1026.0100},
	{"Complex 11", 80, 1379.6895, 1594.4921, 913.1970},
	{"GYM - 1", 53, 714.0800, 1457.5192, 3001.0859},
	{"GYM - 2", 209, -11.4103, 2766.6982, 2085.0703},
	{"GYM - 3", 128, 648.0668, 54.7856, 2422.4638},
	{"GYM - 4", 36, 2002.6098, 1106.0518, 330.8099},
	{"Kasaba Medikal - Pasif", 1, -319.4891, 1052.0767, 1028.0284},
	{"Küçük Kafe", 129, 1643.6505, -1574.3663, 2317.0100},
	{"Burger Interior", 55, 395.9206, -185.5299, 1001.1323},
	{"Lüks Ofis", 10, 1829.2136, -1316.3031, 131.7393},
	{"Çete Apartmaný", 1, 218.4975, 1795.9945, 386.3041},
	{"Garaj", 10, 1381.3129, -40.0591, 1001.0511},
	{"Apartman 1", 1, 1285.8937, -1179.4040, 1990.0286},
	{"Minnacýk Bar", 23, 2322.4865, -1637.1357, 3001.0859},
	{"Mini Bar", 1, 2008.6351, 1550.3802, 3020.1992},
	{"Kilise", 1, -2022.1848, 1020.4279, 1418.4869},
	{"Hapishane", 1, 1317.1472, -894.8569, 7.8713},
	{"Denizaltý Restoran", 0, 1432.1198, 605.1741, -12.4867},
	{"Mahkeme Bekleme Salonu", 1, 913.6067, -2176.9565, 2527.3217},
	{"Mahkeme Salonu", 26, -2293.4443, -2310.2709, 4500.9687},
	{"Çamaþýrhane", 1, 299.4144, 218.1392, 2200.9648},
	{"Reseptiyon", 1, 1319.0628, 1524.9776, 1514.2908},
	{"Bowling Salonu", 1, 2765.8688, 1403.0198, 801.9828},
	{"Elektronikçi", 1, 1004.28, 52.43, 55.32},
	{"Elektronikçi 2", 1, 877.9265, 2009.5904, -15.3484},
	{"Büyük Casino", 1, 1098.9401, 2621.1704, 1049.8859},
	{"Belediye Lobi", 1, 1537.0412, 1047.4168, 1033.8420},
	{"Belediye 2.Kat", 1, 1488.8686, -1260.2191, 113.8043},
	{"FBI Zemin Kat", 75, 1473.1910, 256.2698, 1000.9759},
	{"FBI 2.Kat", 75, 1477.5573, 275.6053, 1020.4249},
	{"FBI 3.Kat", 75, 1479.3006, 268.8932, 1013.6290},
	{"Grotti", 1, 850.31, -973.81, 1090.10},
	{"24/7 1", 17, -25.884498, -185.868988, 1003.546875},
    {"24/7 2", 10, 6.091179, -29.271898, 1003.549438},
    {"24/7 3", 18, -30.946699, -89.609596, 1003.546875},
    {"24/7 4", 16, -25.132598, -139.066986, 1003.546875},
    {"24/7 5", 4, -27.312299, -29.277599, 1003.557250},
    {"24/7 6", 6, -26.691598, -55.714897, 1003.546875},
    {"Airport Ticket", 14, -1827.147338, 7.207417, 1061.143554},
    {"Airport Baggage", 14, -1861.936889, 54.908092, 1061.143554},
    {"Shamal", 1, 1.808619, 32.384357, 1199.593750},
    {"Andromada", 9, 315.745086, 984.969299, 1958.919067},
    {"Ammunation 1", 1, 286.148986, -40.644397, 1001.515625},
    {"Ammunation 2", 4, 286.800994, -82.547599, 1001.515625},
    {"Ammunation 3", 6, 296.919982, -108.071998, 1001.515625},
    {"Ammunation 4", 7, 314.820983, -141.431991, 999.601562},
    {"Ammunation 5", 6, 316.524993, -167.706985, 999.593750},
    {"Ammunation Booths", 7, 302.292877, -143.139099, 1004.062500},
    {"Ammunation Range", 7, 298.507934, -141.647048, 1004.054748},
    {"Blastin Fools Hallway", 3, 1038.531372, 0.111030, 1001.284484},
    {"Budget Inn Motel Room", 12, 444.646911, 508.239044, 1001.419494},
    {"Jefferson Motel", 15, 2215.454833, -1147.475585, 1025.796875},
    {"Off Track Betting Shop", 3, 833.269775, 10.588416, 1004.179687},
    {"Sex Shop", 3, -103.559165, -24.225606, 1000.718750},
    {"Meat Factory", 1, 963.418762, 2108.292480, 1011.030273},
    {"Zero's RC shop", 6, -2240.468505, 137.060440, 1035.414062},
    {"Dillimore Gas", 0, 663.836242, -575.605407, 16.343263},
    {"Catigula's Basement", 1, 2169.461181, 1618.798339, 999.976562},
    {"FC Janitor Room", 10, 1889.953369, 1017.438293, 31.882812},
    {"Woozie's Office", 1, -2159.122802, 641.517517, 1052.381713},
    {"Binco", 15, 207.737991, -109.019996, 1005.132812},
    {"Didier Sachs", 14, 204.332992, -166.694992, 1000.523437},
    {"Prolaps", 3, 207.054992, -138.804992, 1003.507812},
    {"Suburban", 1, 203.777999, -48.492397, 1001.804687},
    {"Victim", 5, 226.293991, -7.431529, 1002.210937},
    {"Zip", 18, 161.391006, -93.159156, 1001.804687},
    {"Club", 17, 493.390991, -22.722799, 1000.679687},
    {"Bar", 11, 501.980987, -69.150199, 998.757812},
    {"Lil' Probe Inn", 18, -227.027999, 1401.229980, 27.765625},
    {"Jay's Diner", 4, 457.304748, -88.428497, 999.554687},
    {"Gant Bridge Diner", 5, 454.973937, -110.104995, 1000.077209},
    {"Secret Valley Diner", 6, 435.271331, -80.958938, 999.554687},
    {"World of Coq", 1, 452.489990, -18.179698, 1001.132812},
    {"Welcome Pump", 1, 681.557861, -455.680053, -25.609874},
    {"Burger Shot", 10, 375.962463, -65.816848, 1001.507812},
    {"Cluckin' Bell", 9, 369.579528, -4.487294, 1001.858886},
    {"Well Stacked Pizza", 5, 373.825653, -117.270904, 1001.499511},
    {"Rusty Browns Donuts", 17, 381.169189, -188.803024, 1000.632812},
    {"Denise's Room", 1, 244.411987, 305.032989, 999.148437},
    {"Katie's Room", 2, 271.884979, 306.631988, 999.148437},
    {"Helena's Room", 3, 291.282989, 310.031982, 999.148437},
    {"Michelle's Room", 4, 302.180999, 300.722991, 999.148437},
    {"Barbara's Room", 5, 322.197998, 302.497985, 999.148437},
    {"Millie's Room", 6, 346.870025, 309.259033, 999.155700},
    {"Sherman Dam", 17, -959.564392, 1848.576782, 9.000000},
    {"Planning Dept", 3, 384.808624, 173.804992, 1008.382812},
    {"Area 51", 0, 223.431976, 1872.400268, 13.734375},
    {"LS Gym", 5, 772.111999, -3.898649, 1000.728820},
    {"SF Gym", 6, 774.213989, -48.924297, 1000.585937},
    {"LV Gym", 7, 773.579956, -77.096694, 1000.655029},
    {"B-Dup's House", 3, 1527.229980, -11.574499, 1002.097106},
    {"B-Dup's Crack Pad", 2, 1523.509887, -47.821197, 1002.130981},
    {"CJ's House", 3, 2496.049804, -1695.238159, 1014.742187},
    {"Madd Doggs Mansion", 5, 1267.663208, -781.323242, 1091.906250},
    {"OG Loc's House", 3, 513.882507, -11.269994, 1001.565307},
    {"Ryders House", 2, 2454.717041, -1700.871582, 1013.515197},
    {"Sweet's House", 1, 2527.654052, -1679.388305, 1015.498596},
    {"Crack Factory", 2, 2543.462646, -1308.379882, 1026.728393},
    {"Big Spread Ranch", 3, 1212.019897, -28.663099, 1000.953125},
    {"Fanny batters", 6, 761.412963, 1440.191650, 1102.703125},
    {"Strip Club", 2, 1204.809936, -11.586799, 1000.921875},
    {"Strip Club (Private Room)", 2, 1204.809936, 13.897239, 1000.921875},
    {"Unnamed Brothel", 3, 942.171997, -16.542755, 1000.929687},
    {"Tiger Skin Brothel", 3, 964.106994, -53.205497, 1001.124572},
    {"Pleasure Domes", 3, -2640.762939, 1406.682006, 906.460937},
    {"Liberty City Outside", 1, -729.276000, 503.086944, 1371.971801},
    {"Liberty City Inside", 1, -794.806396, 497.738037, 1376.195312},
    {"Gang House", 5, 2350.339843, -1181.649902, 1027.976562},
    {"Colonel Furhberger's", 8, 2807.619873, -1171.899902, 1025.570312},
    {"Crack Den", 5, 318.564971, 1118.209960, 1083.882812},
    {"Warehouse 1", 1, 1412.639892, -1.787510, 1000.924377},
    {"Warehouse 2", 18, 1302.519897, -1.787510, 1001.028259},
    {"Sweet's Garage", 0, 2522.000000, -1673.383911, 14.866223},
    {"Lil' Probe Inn Toilet", 18, -221.059051, 1408.984008, 27.773437},
    {"Unused Safe House", 12, 2324.419921, -1145.568359, 1050.710083},
    {"RC Battlefield", 10, -975.975708, 1060.983032, 1345.671875},
    {"Barber 1", 2, 411.625976, -21.433298, 1001.804687},
    {"Barber 2", 3, 418.652984, -82.639793, 1001.804687},
    {"Barber 3", 12, 412.021972, -52.649898, 1001.898437},
    {"Tatoo Parlor 1", 16, -204.439987, -26.453998, 1002.273437},
    {"Tatoo Parlor 2", 17, -204.439987, -8.469599, 1002.273437},
    {"Tatoo Parlor 3", 3, -204.439987, -43.652496, 1002.273437},
    {"LS Police HQ", 6, 246.783996, 63.900199, 1003.640625},
    {"SF Police HQ", 10, 246.375991, 109.245994, 1003.218750},
    {"LV Police HQ", 3, 288.745971, 169.350997, 1007.171875},
    {"3 School", 3, -2029.798339, -106.675910, 1035.171875},
    {"8-Track", 7, -1398.065307, -217.028900, 1051.115844},
    {"Bloodbowl", 15, -1398.103515, 937.631164, 1036.479125},
    {"Dirt Track", 4, -1444.645507, -664.526000, 1053.572998},
    {"Kickstart", 14, -1465.268676, 1557.868286, 1052.531250},
    {"Vice Stadium", 1, -1401.829956, 107.051300, 1032.273437},
    {"SF Garage", 0, -1790.378295, 1436.949829, 7.187500},
    {"LS Garage", 0, 1643.839843, -1514.819580, 13.566620},
    {"SF Bomb Shop", 0, -1685.636474, 1035.476196, 45.210937},
    {"Blueberry Warehouse", 0, 76.632553, -301.156829, 1.578125},
    {"LV Warehouse 1", 0, 1059.895996, 2081.685791, 10.820312},
    {"LV Warehouse 2 (hidden part)", 0, 1059.180175, 2148.938720, 10.820312},
    {"Caligula's Hidden Room", 1, 2131.507812, 1600.818481, 1008.359375},
    {"Bank", 0, 2315.952880, -1.618174, 26.742187},
    {"Bank (Behind Desk)", 0, 2319.714843, -14.838361, 26.749565},
    {"LS Atrium", 18, 1710.433715, -1669.379272, 20.225049}
};

new const SilahSlotBul[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
};

// Kendi eklediklerim
new
	PlayerText: Hud_SagAlt[MAX_PLAYERS][7],
	PlayerText: AracHizGosterge[MAX_PLAYERS],
	PlayerText: BirlikBolgesiText[MAX_PLAYERS][2],
	PlayerText: LambaText[MAX_PLAYERS]
;

main() {
	new ys[144];
	format(ys, sizeof(ys), "[SUNUCU] %s © Texa - @2022", SUNUCU_ADI);
	printf(ys);
	format(ys, sizeof(ys), "[SUNUCU] Maksimum Oyuncu: %d (mod)", MAX_PLAYERS);
	printf(ys);
	/*
	new DCC_Channel:dcid = DCC_FindChannelById("644337311370182666"), duzeltmeli[144];
	format(duzeltmeli, sizeof(duzeltmeli), "```[%s] %s```", Tarih(), ConvertToTurkish("Oyun sunucusu via tarafýndan aktif edildi."));
    DCC_SendChannelMessage(dcid, duzeltmeli);
	*/
	return 1;
}

public OnGameModeInit()
{
	SQL_Baglan();
	AntiDeAMX();
	WasteDeAMXersTime();
	if(mysql_errno(mysqlB) != 0) return false;
	ManualVehicleEngineAndLights();
	DisableInteriorEnterExits();
    for(new i = 0; i != MAKSIMUM_DESTEK; i++) DestekBilgi[i][destekKullanimda] = false, DestekBilgi[i][destekOyuncu] = INVALID_PLAYER_ID;
	EnableStuntBonusForAll(0);
	ShowNameTags(0);
	SetNameTagDrawDistance(0.0);
	new rcon[80];
	format(rcon, sizeof(rcon), "hostname %s", SUNUCU_ADI);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "weburl %s", SUNUCU_WEBSITE);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "mapname %s", SUNUCU_MAP);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "language %s", SUNUCU_DIL);
	SendRconCommand(rcon);
	SetGameModeText(SUNUCU_SURUM);
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 2500);
	Streamer_TickRate(96);
	Streamer_ToggleChunkStream(true);
	SetVehiclePassengerDamage(true);
    SetDisableSyncBugs(true);
	SetDamageFeed(false);
    SetDamageSounds(0, 0);
	SetTimer("SunucuDakikaTimer", 60 * 1000, true);
    SetTimer("SaniyeTimer", 1000, true);
    SetTimer("Pet_Yenile", 1000, true);
    SetTimer("Slapper", 500, true);
    SetTimer("AntiSlap", 500, true);
	ObjeleriYarat();
	/*
		CreateDynamic3DTextLabel(const text[], color, Float:x, Float:y, Float:z, Float:drawdistance, attachedplayer = INVALID_PLAYER_ID, attachedvehicle = INVALID_VEHICLE_ID, testlos = 0, worldid = -1, interiorid = -1, playerid = -1, Float:distance = 100.0);
        CreateDynamicPickup(modelid, type, Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_PICKUP_SD, STREAMER_TAG_AREA areaid = STREAMER_TAG_AREA -1, priority = 0);
	*/
	for(new i = 0; i != MAKSIMUM_SERVER_LABEL; i++) {
		if(IsValidDynamic3DTextLabel(ServerLabel[i][serverText])) DestroyDynamic3DTextLabel(ServerLabel[i][serverText]), ServerLabel[i][serverText] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicPickup(ServerLabel[i][serverPickup])) DestroyDynamicPickup(ServerLabel[i][serverPickup]), ServerLabel[i][serverPickup] = INVALID_PICKUP_ID;
	}
	for(new i = 0; i < sizeof(MadenciPos); i++) {
		MadenLabel[i][madenPickup] = CreateDynamicPickup(19133, 23, MadenciPos[i][madenciPosX], MadenciPos[i][madenciPosY], MadenciPos[i][madenciPosZ]);
		MadenLabel[i][madenText] = CreateDynamic3DTextLabel("[Madenci Noktasý]\n{FFFFFF}/maden", RENK_SERVER, MadenciPos[i][madenciPosX], MadenciPos[i][madenciPosY], MadenciPos[i][madenciPosZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
	}
	ServerLabel[0][serverPickup] = CreateDynamicPickup(1240, 23, -28.7558, 152.2807, 999.0613);
	ServerLabel[0][serverText] = CreateDynamic3DTextLabel("[Tedavi Noktasý]\n{FFFFFF}Tedavi olmak için /tedaviol komutunu kullan.", RENK_SERVER, -28.7558, 152.2807, 999.0613, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
	ServerLabel[8][serverPickup] = CreateDynamicPickup(1239, 23, 1483.3546, -1840.8188, 3645.6270);
	ServerLabel[8][serverText] = CreateDynamic3DTextLabel("[Government - Kasa]\n{FFFFFF}Kullanmak için /kasa", RENK_SERVER, 1483.3546, -1840.8188, 3645.6270, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
	/*ServerLabel[14][serverPickup] = CreateDynamicPickup(1239, 23, 360.7297, -2036.2222, 7.8556);
	ServerLabel[14][serverText] = CreateDynamic3DTextLabel("[Balýkçý Dükkaný]\n{FFFFFF}Menüye eriþmek için /balikci komutunu kullanýn.", RENK_SERVER, 360.7297, -2036.2222, 7.8556, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);*/
	ServerLabel[16][serverPickup] = CreateDynamicPickup(335, 23, 1261.7869, -795.8909, 1084.2415, 1);
	ServerLabel[16][serverText] = CreateDynamic3DTextLabel("[Hitman Dolabý]\n{FFFFFF}Hitman dolabýna ulaþmak için /hdolap komutunu kullanýn.", RENK_SERVER, 1261.7869, -795.8909, 1084.2415, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 1, 5);
	ServerLabel[17][serverPickup] = CreateDynamicPickup(2061, 23, -2108.7786, 4509.6445, 65.7870, 1);
	ServerLabel[17][serverText] = CreateDynamic3DTextLabel("[VIP Dolabý]\n{FFFFFF}VIP Dolabýna eriþmek için /vipdolap komutunu kullanýn.", RENK_SERVER, -2108.7786, 4509.6445, 65.7870, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, 1);
	ServerLabel[19][serverPickup] = CreateDynamicPickup(1239, 23, -1863.6262, -1683.7197, 21.7500);
	ServerLabel[19][serverText] = CreateDynamic3DTextLabel("[Hurdacý]\n{FFFFFF}Araç parçalatmak için /hurdaci komutunu kullanýn.", RENK_SERVER, -1863.6262, -1683.7197, 21.7500, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
	ServerLabel[20][serverPickup] = CreateDynamicPickup(1239, 23, 4524.1831, 1788.9287, 108.3460, 1);
	ServerLabel[20][serverText] = CreateDynamic3DTextLabel("[Mimarlýk Ofisi]\n{FFFFFF}Menüye ulaþmak için /dekor komutunu kullanýn.", RENK_SERVER, 4524.1831, 1788.9287, 108.3460, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
	ServerLabel[21][serverPickup] = CreateDynamicPickup(1239, 23, -1263.9143, 2436.5393, 3501.4866);
	ServerLabel[21][serverText] = CreateDynamic3DTextLabel("[DMV Noktasý]\n{FFFFFF}Menüyü açmak için /dmv komutunu kullanýn.", RENK_SERVER, -1263.9143, 2436.5393, 3501.4866, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 7001, 1);
	ServerLabel[22][serverPickup] = CreateDynamicPickup(1239, 23, 769.40, -335.17, 715.62);
	ServerLabel[22][serverText] = CreateDynamic3DTextLabel("[Uyuþturucu Ýþleme Noktasý]\n{FFFFFF}Uyuþturucu iþlemek için /uisle komutunu kullanýn.", RENK_SERVER, 769.40, -335.17, 715.62, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
	/*ServerLabel[23][serverPickup] = CreateDynamicPickup(1575, 23, 2394.3757, -1204.5647, 27.8816);
	ServerLabel[23][serverText] = CreateDynamic3DTextLabel("[Materyal Paketi]\n{FFFFFF}Paket almak için /paketal komutunu kullanýn.", RENK_SERVER, 2394.3757, -1204.5647, 27.8816, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);*/
	ServerLabel[24][serverPickup] = CreateDynamicPickup(1239, 23, 1135.9270, -1333.9471, 13.6847);
	ServerLabel[24][serverText] = CreateDynamic3DTextLabel("[Hasta Teslim Noktasý]\n{FFFFFF}/hastateslim", RENK_SERVER, 1135.9270, -1333.9471, 13.6847, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
	ServerLabel[27][serverPickup] = CreateDynamicPickup(1242, 23, 1726.88, -1636.61, 20.22);
	ServerLabel[27][serverText] = CreateDynamic3DTextLabel("[Paintball Alaný]\n{FFFFFF}Lobi kurmak veya katýlmak için /paintball komutunu kullanýn.", RENK_SERVER, 1726.88, -1636.61, 20.22, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
	ServerLabel[28][serverPickup] = CreateDynamicPickup(1247, 23, 772.7415, -1349.4595, 13.4830);
	ServerLabel[28][serverText] = CreateDynamic3DTextLabel("[LSPD Garajý]\n{FFFFFF}Giriþ yapmak için {a9c4e4}~k~~CONVERSATION_YES~{FFFFFF} tuþunu kullanýn.", RENK_SERVER, 772.7415, -1349.4595, 13.4830, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
	ServerLabel[29][serverPickup] = CreateDynamicPickup(1247, 23, 2298.8982, 2497.3420, -7.4531);
	ServerLabel[29][serverText] = CreateDynamic3DTextLabel("[LSPD Garajý]\n{FFFFFF}Çýkýþ yapmak için {a9c4e4}~k~~CONVERSATION_YES~{FFFFFF} tuþunu kullanýn.", RENK_SERVER, 2298.8982, 2497.3420, -7.4531, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
	ServerLabel[30][serverPickup] = CreateDynamicPickup(1239, 23, 148.4463, -1854.9377, 3.7734);
	ServerLabel[30][serverText] = CreateDynamic3DTextLabel("[Yat Kiralama Noktasý]\n{FFFFFF}Bilgi almak için /yat komutunu kullanýn.", RENK_SERVER, 148.4463, -1854.9377, 3.7734, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);

	for(new i = 0; i != MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracKullanimda])
	{
		if(IsValidVehicle(AracBilgi[i][aracYarat])) DestroyVehicle(AracBilgi[i][aracYarat]), AracBilgi[i][aracYarat] = INVALID_VEHICLE_ID;
        AracBilgi[i][aracKullanimda] = false;
        AracBilgi[i][aracBirlik] = 0;
	    AracBilgi[i][aracID] = 0;
	    AracBilgi[i][aracSahip] = 0;
	    AracBilgi[i][aracYarat] = 0;
	    AracBilgi[i][aracVergi] = 0;
	    AracBilgi[i][aracZirh] = 0;
	    AracBilgi[i][aracGaraj] = 0;
	}
	for(new i = 0; i != MAKSIMUM_YARIS; i++) {
		YarisBilgi[i][yarisKullanimda] = false;
		YarisBilgi[i][yarisTur] = 0;
		YarisBilgi[i][yarisSahip] = INVALID_PLAYER_ID;
		YarisBilgi[i][yarisMaksCP] = 0;
		YarisBilgi[i][yarisBasladi] = false;
		YarisBilgi[i][yarisSiralama] = 0;
		for(new s = 0; s != 60; s++) YarisBilgi[i][yarisPos][s] = 0.0;
	}
	
	EtkinlikBilgi[etkCan] = 100.0;
	EtkinlikBilgi[etkZirh] = 0.0;
	EtkinlikBilgi[etkPos][0] = 0.0, EtkinlikBilgi[etkPos][1] = 0.0, EtkinlikBilgi[etkPos][2] = 0.0, EtkinlikBilgi[etkPos][3] = 0.0;
	EtkinlikBilgi[etkSilah][0] = 0;
	EtkinlikBilgi[etkSilah][1] = 0;
	EtkinlikBilgi[etkVirtualWorld] = 0;
	EtkinlikBilgi[etkInterior] = 0;
	EtkinlikBilgi[etkGiris] = false;
	EtkinlikBilgi[etkDurum] = false;
	
	mysql_query(mysqlB, "UPDATE oyuncular SET Aktif = '0' WHERE Aktif = '1'");
    mysql_tquery(mysqlB, "SELECT * FROM `binalar`", "Binalari_Yukle", "");
    mysql_tquery(mysqlB, "SELECT * FROM `birlikler`", "Birlikleri_Yukle", "");
    mysql_tquery(mysqlB, "SELECT * FROM `birimler`", "Birimleri_Yukle", "");
    mysql_tquery(mysqlB, "SELECT * FROM `araclar`", "Araclari_Yukle", "");
    mysql_tquery(mysqlB, "SELECT * FROM `gateler`", "Gateleri_Yukle", "");
    mysql_tquery(mysqlB, "SELECT * FROM `giseler`", "Giseleri_Yukle", "");
    mysql_tquery(mysqlB, "SELECT * FROM `atm`", "Atmleri_Yukle", "");
    mysql_tquery(mysqlB, "SELECT * FROM `meslekler`", "Meslekleri_Yukle", "");
    mysql_tquery(mysqlB, "SELECT * FROM `sandiklar`", "Sandiklari_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `isyerleri`", "Isyerlerini_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `benzinpompalari`", "Pompalari_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `kasalar`", "Kasalari_Yukle", "");
    mysql_tquery(mysqlB, "SELECT * FROM `evler`", "Evleri_Yukle", "");
    mysql_tquery(mysqlB, "SELECT * FROM `fabrikalar`", "Fabrikalari_Yukle", "");
    mysql_tquery(mysqlB, "SELECT * FROM `uyusturucular`", "Uyusturuculari_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `tutuklamanoktalari`", "TutuklamaNoktasi_Yukle", "");
    mysql_tquery(mysqlB, "SELECT * FROM `saticilar`", "Saticilari_Yukle", "");
    mysql_tquery(mysqlB, "SELECT * FROM `npcler`", "Npcleri_Yukle", "");
    mysql_tquery(mysqlB, "SELECT * FROM `anktelefonlar`", "Ankesorlu_Telefonlari_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `objeler`", "Objeleri_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `mobilyalar`", "Mobilyalari_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `konumlar`", "Konumlari_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `cctv`", "CCTV_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `dekorlar`", "Dekorlari_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `raflar`", "Raflari_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `hliste`", "Liste_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `suclistesi`", "SucListesi_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `modifiyenoktalari`", "ModifiyeNoktasi_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `garajlar`", "Garajlari_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `kontraktlar`", "Kontraktlari_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `baslangicposlari`", "BaslangicPos_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `hizradarlari`", "Radarlari_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `graffiti`", "Graffiti_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `insaatayarlar` WHERE `ID` = '1' LIMIT 1", "InsaatAyar_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `pointler`", "Pointleri_Yukle", "");
	mysql_tquery(mysqlB, "SELECT * FROM `dolaplar`", "Dolaplari_Yukle", "");
	PetleriYukle();
	
	SetWeaponDamage(WEAPON_COLT45, DAMAGE_TYPE_RANGE, 8.0, 20.0, 4.5, 60.0, 2.0);
	SetWeaponDamage(WEAPON_SILENCED, DAMAGE_TYPE_RANGE, 8.0, 20.0, 4.5, 60.0, 2.0);
	SetWeaponDamage(WEAPON_DEAGLE, DAMAGE_TYPE_RANGE, 20.0, 20.0, 12.5, 60.0, 10.0);
	//SetWeaponDamage(WEAPON_SHOTGUN, DAMAGE_TYPE_RANGE, 60.0, 20.0, 27.5, 60.0, 15.0);
	SetWeaponDamage(WEAPON_SAWEDOFF, DAMAGE_TYPE_RANGE, 32.0, 20.0, 15.5, 60.0, 7.0);
	SetWeaponDamage(WEAPON_SHOTGSPA, DAMAGE_TYPE_RANGE, 30.0, 20.0, 17.5, 60.0, 8.0);
	SetWeaponDamage(WEAPON_UZI, DAMAGE_TYPE_RANGE, 12.0, 20.0, 6.5, 60.0, 4.0);
	SetWeaponDamage(WEAPON_MP5, DAMAGE_TYPE_RANGE, 10.0, 20.0, 7.5, 60.0, 5.0);
	SetWeaponDamage(WEAPON_AK47, DAMAGE_TYPE_RANGE, 15.0, 20.0, 10.0, 60.0, 7.0);
	SetWeaponDamage(WEAPON_M4, DAMAGE_TYPE_RANGE, 28.0, 20.0, 15.0, 60.0, 8.0);
	SetWeaponDamage(WEAPON_TEC9, DAMAGE_TYPE_RANGE, 15.0, 20.0, 8.5, 60.0, 5.0);
	SetWeaponDamage(WEAPON_RIFLE, DAMAGE_TYPE_RANGE, 50.0, 20.0, 35.0, 60.0, 15.0);
	SetWeaponDamage(WEAPON_SNIPER, DAMAGE_TYPE_RANGE, 200.0, 20.0, 200.0, 60.0, 200.0);
	SetWeaponDamage(WEAPON_KNIFE, DAMAGE_TYPE_RANGE, 15.0, 20.0, 200.0, 60.0, 200.0);
	
	// Yat Sistemi
	new Float:yeniPos[3];
    YatBilgi[yatObject] = CreateObject(-1000, 121.1824, -1892.1000, 4.759999, 0.000000, 0.000000, 183.149398, 100.0);
    YatBilgi[yatSurObject] = CreateObject(19300, 132.2262,-1804.4701,36.2415,0.0, 0.0, 266.4503, 10.0);
	GetPosOffset(132.2262,-1804.4701,36.2415, 134.063171, -1829.491333, 4.759999, yeniPos[0], yeniPos[1], yeniPos[2]);
	AttachObjectToObject(YatBilgi[yatSurObject], YatBilgi[yatObject], yeniPos[0], yeniPos[1]-50, yeniPos[2]-17, 0.0, 0.0, 0.0,0);
    YatBilgi[yatKiralayan] = -1;
    YatBilgi[yatKiraSure] = 0;
    YatBilgi[yatOto] = 0;
    YatBilgi[yatStep] = 0;
    YatBilgi[yatTeslimSure] = 0;
    SetTimer("Yat_Yenile", 1000, true);
    
	/*=====[ Animasyonu durdurmak için ]=====*/
	/*AnimBozText = TextDrawCreate(481.000030, 314.029632, "~w~animasyonu durdurmak icin ~y~~k~~PED_SPRINT~");
	TextDrawLetterSize(AnimBozText, 0.200000, 1.000000);
	TextDrawTextSize(AnimBozText, 638.000000, 0.000000);
	TextDrawAlignment(AnimBozText, 1);
	TextDrawColor(AnimBozText, -1);
	TextDrawSetShadow(AnimBozText, 1);
	TextDrawSetOutline(AnimBozText, 1);
	TextDrawBackgroundColor(AnimBozText, 255);
	TextDrawFont(AnimBozText, 2);
	TextDrawSetProportional(AnimBozText, 1);*/ 

	for(new i = 1; i < MAX_VEHICLES; i++)
	{
		DashcamText[i][0] = TextDrawCreate(368.000030, -13.414813, "mdl-2001:dashcam");
		TextDrawTextSize(DashcamText[i][0], 173.000000, 105.000000);
		TextDrawAlignment(DashcamText[i][0], 1);
		TextDrawColor(DashcamText[i][0], -1);
		TextDrawSetShadow(DashcamText[i][0], 0);
		TextDrawBackgroundColor(DashcamText[i][0], 255);
		TextDrawFont(DashcamText[i][0], 4);
		TextDrawSetProportional(DashcamText[i][0], 0);

		DashcamText[i][1] = TextDrawCreate(411.999938, 22.714790, "MODEL: ~w~N/A");
		TextDrawLetterSize(DashcamText[i][1], 0.119999, 0.800000);
		TextDrawTextSize(DashcamText[i][1], 531.000000, 0.000000);
		TextDrawAlignment(DashcamText[i][1], 1);
		TextDrawColor(DashcamText[i][1], 613934079);
		TextDrawSetShadow(DashcamText[i][1], 0);
		TextDrawSetOutline(DashcamText[i][1], 1);
		TextDrawBackgroundColor(DashcamText[i][1], 255);
		TextDrawFont(DashcamText[i][1], 2);
		TextDrawSetProportional(DashcamText[i][1], 1);

		DashcamText[i][2] = TextDrawCreate(411.933166, 29.466642, "PLAKA: ~w~N/A");
		TextDrawLetterSize(DashcamText[i][2], 0.119999, 0.800000);
		TextDrawTextSize(DashcamText[i][2], 534.000000, 0.000000);
		TextDrawAlignment(DashcamText[i][2], 1);
		TextDrawColor(DashcamText[i][2], 613934079);
		TextDrawSetShadow(DashcamText[i][2], 0);
		TextDrawSetOutline(DashcamText[i][2], 1);
		TextDrawBackgroundColor(DashcamText[i][2], 255);
		TextDrawFont(DashcamText[i][2], 2);
		TextDrawSetProportional(DashcamText[i][2], 1);

		DashcamText[i][3] = TextDrawCreate(412.000000, 36.518508, "HIZ: ~w~N/A");
		TextDrawLetterSize(DashcamText[i][3], 0.119999, 0.800000);
		TextDrawTextSize(DashcamText[i][3], 510.000000, 0.000000);
		TextDrawAlignment(DashcamText[i][3], 1);
		TextDrawColor(DashcamText[i][3], 613934079);
		TextDrawSetShadow(DashcamText[i][3], 0);
		TextDrawSetOutline(DashcamText[i][3], 1);
		TextDrawBackgroundColor(DashcamText[i][3], 255);
		TextDrawFont(DashcamText[i][3], 2);
		TextDrawSetProportional(DashcamText[i][3], 1);
	}
	// Door fix for Denise's house and covered pilot area for Shamal interior
	CreateDynamicObject(1498,2401.75927734,-1714.56994629,13.13000011,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2634,1.74394608,31.97999954,1199.72998047,0.00000000,0.00000000,0.00000000, .interiorid = 1);
	CreateDynamicObject(2634,1.74316406,31.97949219,1202.69995117,0.00000000,0.00000000,0.00000000, .interiorid = 1);
	return 1;
}

public OnGameModeExit()
{
	foreach (new i : Player) KickEx(i);
	mysql_close(mysqlB);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    SetSpawnInfo(playerid, 0, 299, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
    TogglePlayerSpectating(playerid, true);
	return 1;
}


public OnPlayerRequestDownload(playerid, type, crc)
{
	if(!IsPlayerConnected(playerid)) return 0;
	OyuncuYuklemeYapiyor[playerid] = true;
    new fullurl[256], dlfilename[64], foundfilename = 0;
	if(type == DOWNLOAD_REQUEST_TEXTURE_FILE) foundfilename = FindTextureFileNameFromCRC(crc, dlfilename, 64);
	else if(type == DOWNLOAD_REQUEST_MODEL_FILE) foundfilename = FindModelFileNameFromCRC(crc, dlfilename, 64);
	if(foundfilename) {
		format(fullurl, sizeof(fullurl), "%s/%s", forummodel, dlfilename);
		SendClientMessageEx(playerid, -1, "{afafaf}V-0x%x {FFFFFF}indirme sunucusu {afafaf}#%d {FFFFFF}kullanarak indiriliyor.", crc, random(3) + 1);
		RedirectDownload(playerid, fullurl);
	}
	return 1;
}


public OnPlayerFinishedDownloading(playerid, virtualworld)
{
    if(!IsPlayerConnected(playerid)) return false;
	if(OyuncuBilgi[playerid][oGiris] == true) return false;
    OyuncuYuklemeYapiyor[playerid] = false;
    GirisDuzelt(playerid);
    return 1;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float: x, Float: y, Float: z)
{
	switch(OyuncuBilgi[playerid][oMobilyaSecim])
	{
	    case MOBILYA_SECIM_DUZENLE:
		{
 	        CancelEdit(playerid);
            for(new i = 0; i != MAKSIMUM_MOBILYA; i ++) if(MobilyaBilgi[i][mobilyaYarat] == objectid) {
                EditlemeSifirla(playerid);
				OyuncuBilgi[playerid][oDuzenlenenMobilya] = i;
				EditDynamicObject(playerid, objectid);
				SunucuMesaji(playerid, "Mobilya düzenleniyor. (%d)", MobilyaBilgi[i][mobilyaModel]);
				break;
			}
		}
	    case MOBILYA_SECIM_KALDIR:
	    {
	        CancelEdit(playerid);
            for(new i = 0; i != MAKSIMUM_MOBILYA; i ++) if(MobilyaBilgi[i][mobilyaYarat] == objectid) {
				OyuncuBilgi[playerid][oDuzenlenenMobilya] = i;
            	new bilgi[256];
            	format(bilgi, sizeof(bilgi), "{FFFFFF}%d modeline sahip mobilyaný silmek üzeresin, onaylýyor musun?\n{B70000}UYARI: {FFFFFF}Bu iþlemin geri dönüþü yoktur.", MobilyaBilgi[OyuncuBilgi[playerid][oDuzenlenenMobilya]][mobilyaModel]);
            	DialogGoster(playerid, DIALOG_MOBILYAKALDIR_ONAY, DIALOG_STYLE_MSGBOX, "vRP: Mobilya Kaldýr", bilgi, "Onayla", "Ýptal");
            	break;
			}
		}
	}
    if(OyuncuBilgi[playerid][oMobilyaSecim] != MOBILYA_SECIM_YOK) OyuncuBilgi[playerid][oMobilyaSecim] = MOBILYA_SECIM_YOK;
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(response)
	{
		if(fScaleX < 0.1) fScaleX = 0.1;
		if(fScaleX > 1.5) fScaleX = 1.5;
		if(fScaleY < 0.1) fScaleY = 0.1;
		if(fScaleY > 1.5) fScaleY = 1.5;
		if(fScaleZ < 0.1) fScaleZ = 0.1;
		if(fScaleZ > 1.5) fScaleZ = 1.5;
		if(fOffsetX < -100) fOffsetX = 0;
		if(fOffsetX > 100) fOffsetX = 100;
		if(fOffsetY < -100) fOffsetY = 0;
		if(fOffsetY > 100) fOffsetY = 100;
		if(fOffsetZ < -100) fOffsetZ = 0;
		if(fOffsetZ > 100) fOffsetZ = 100;
	    AksesuarListesi[playerid][index][aksesuarPos][0] = fOffsetX;
	    AksesuarListesi[playerid][index][aksesuarPos][1] = fOffsetY;
	    AksesuarListesi[playerid][index][aksesuarPos][2] = fOffsetZ;
	   	AksesuarListesi[playerid][index][aksesuarPos][3] = fRotX;
	   	AksesuarListesi[playerid][index][aksesuarPos][4] = fRotY;
	    AksesuarListesi[playerid][index][aksesuarPos][5] = fRotZ;
	    AksesuarListesi[playerid][index][aksesuarPos][6] = (fScaleX > 3.0) ? (3.0) : (fScaleX);
	    AksesuarListesi[playerid][index][aksesuarPos][7] = (fScaleY > 3.0) ? (3.0) : (fScaleY);
		AksesuarListesi[playerid][index][aksesuarPos][8] = (fScaleZ > 3.0) ? (3.0) : (fScaleZ);
		AksesuarListesi[playerid][index][aksesuarKemik] = boneid;
		AksesuarListesi[playerid][index][aksesuarKullanimda] = 1;
		AksesuarListesi[playerid][index][aksesuarModel] = modelid;

		SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	    SunucuMesaji(playerid, "Aksesuar düzenlendi.");
	    Aksesuar_Kaydet(playerid);
	}
	else HataMesaji(playerid, "Aksesuar düzenlenemedi.");
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(response == EDIT_RESPONSE_FINAL)
	{
		if(OyuncuBilgi[playerid][oGraffitiDuzenliyor] != -1 && GraffitiBilgi[OyuncuBilgi[playerid][oGraffitiDuzenliyor]][graffitiKullanimda])
	    {
			GraffitiBilgi[OyuncuBilgi[playerid][oGraffitiDuzenliyor]][graffitiPos][0] = x;
			GraffitiBilgi[OyuncuBilgi[playerid][oGraffitiDuzenliyor]][graffitiPos][1] = y;
			GraffitiBilgi[OyuncuBilgi[playerid][oGraffitiDuzenliyor]][graffitiPos][2] = z;
			GraffitiBilgi[OyuncuBilgi[playerid][oGraffitiDuzenliyor]][graffitiPos][3] = rz;

			Graffiti_Yenile(OyuncuBilgi[playerid][oGraffitiDuzenliyor]);
			Graffiti_Kaydet(OyuncuBilgi[playerid][oGraffitiDuzenliyor]);
		}
		if(OyuncuBilgi[playerid][oEditlenenGise] != -1 && GiseBilgi[OyuncuBilgi[playerid][oEditlenenGise]][giseKullanimda])
	    {
	        switch(OyuncuBilgi[playerid][oDuzenlemeTipi])
	        {
	            case 1:
	            {
	                new id = OyuncuBilgi[playerid][oEditlenenGise];

	                GiseBilgi[OyuncuBilgi[playerid][oEditlenenGise]][gisePos][0] = x;
	                GiseBilgi[OyuncuBilgi[playerid][oEditlenenGise]][gisePos][1] = y;
	                GiseBilgi[OyuncuBilgi[playerid][oEditlenenGise]][gisePos][2] = z;
	                GiseBilgi[OyuncuBilgi[playerid][oEditlenenGise]][gisePos][3] = rx;
	                GiseBilgi[OyuncuBilgi[playerid][oEditlenenGise]][gisePos][4] = ry;
	                GiseBilgi[OyuncuBilgi[playerid][oEditlenenGise]][gisePos][5] = rz;

	                DestroyDynamicObject(GiseBilgi[id][giseObje]);
					GiseBilgi[id][giseObje] = CreateDynamicObject(GiseBilgi[id][giseModel], GiseBilgi[id][gisePos][0], GiseBilgi[id][gisePos][1], GiseBilgi[id][gisePos][2], GiseBilgi[id][gisePos][3], GiseBilgi[id][gisePos][4], GiseBilgi[id][gisePos][5], 0, 0);

					Gise_Kaydet(id);
                    SunucuMesaji(playerid, "Kapalý pozisyon kaydedildi. (GÝÞE ID: %d)", id);
					new log_icerik[144];
					format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir giþenin kapalý pozisyonunu deðiþtirdi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], id);
					Gunluk_LogKaydet(log_icerik);
					Log_Kaydet("loglar/gise.txt", "%s", log_icerik);
				}
				case 2:
	            {
	                new id = OyuncuBilgi[playerid][oEditlenenGise];

	                GiseBilgi[OyuncuBilgi[playerid][oEditlenenGise]][giseAcilis][0] = x;
	                GiseBilgi[OyuncuBilgi[playerid][oEditlenenGise]][giseAcilis][1] = y;
	                GiseBilgi[OyuncuBilgi[playerid][oEditlenenGise]][giseAcilis][2] = z;
	                GiseBilgi[OyuncuBilgi[playerid][oEditlenenGise]][giseAcilis][3] = rx;
	                GiseBilgi[OyuncuBilgi[playerid][oEditlenenGise]][giseAcilis][4] = ry;
	                GiseBilgi[OyuncuBilgi[playerid][oEditlenenGise]][giseAcilis][5] = rz;

	                DestroyDynamicObject(GiseBilgi[id][giseObje]);
					GiseBilgi[id][giseObje] = CreateDynamicObject(GiseBilgi[id][giseModel], GiseBilgi[id][gisePos][0], GiseBilgi[id][gisePos][1], GiseBilgi[id][gisePos][2], GiseBilgi[id][gisePos][3], GiseBilgi[id][gisePos][4], GiseBilgi[id][gisePos][5], 0, 0);

					Gise_Kaydet(id);
                    SunucuMesaji(playerid, "Açýk pozisyon kaydedildi. (GÝÞE ID: %d)", id);
					new log_icerik[144];
					format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir giþenin açýk pozisyonunu deðiþtirdi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], id);
					Gunluk_LogKaydet(log_icerik);
					Log_Kaydet("loglar/gise.txt", "%s", log_icerik);
				}
			}
		}
		if(OyuncuBilgi[playerid][oEditlenenGate] != -1 && GateBilgi[OyuncuBilgi[playerid][oEditlenenGate]][gateKullanimda])
	    {
	        switch(OyuncuBilgi[playerid][oDuzenlemeTipi])
	        {
	            case 1:
	            {
	                new id = OyuncuBilgi[playerid][oEditlenenGate];

	                GateBilgi[OyuncuBilgi[playerid][oEditlenenGate]][gatePos][0] = x;
	                GateBilgi[OyuncuBilgi[playerid][oEditlenenGate]][gatePos][1] = y;
	                GateBilgi[OyuncuBilgi[playerid][oEditlenenGate]][gatePos][2] = z;
	                GateBilgi[OyuncuBilgi[playerid][oEditlenenGate]][gatePos][3] = rx;
	                GateBilgi[OyuncuBilgi[playerid][oEditlenenGate]][gatePos][4] = ry;
	                GateBilgi[OyuncuBilgi[playerid][oEditlenenGate]][gatePos][5] = rz;

	                DestroyDynamicObject(GateBilgi[id][gateObje]);
					GateBilgi[id][gateObje] = CreateDynamicObject(GateBilgi[id][gateModel], GateBilgi[id][gatePos][0], GateBilgi[id][gatePos][1], GateBilgi[id][gatePos][2], GateBilgi[id][gatePos][3], GateBilgi[id][gatePos][4], GateBilgi[id][gatePos][5], GateBilgi[id][gateWorld], GateBilgi[id][gateInterior]);

					Gate_Kaydet(id);
                    SunucuMesaji(playerid, "Kapalý pozisyon kaydedildi. (GATE ID: %d)", id);
					new log_icerik[144];
					format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir gatenin kapalý pozisyonunu deðiþtirdi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], id);
					Gunluk_LogKaydet(log_icerik);
					Log_Kaydet("loglar/gate.txt", "%s", log_icerik);
				}
				case 2:
	            {
	                new id = OyuncuBilgi[playerid][oEditlenenGate];

	                GateBilgi[OyuncuBilgi[playerid][oEditlenenGate]][gateAcilis][0] = x;
	                GateBilgi[OyuncuBilgi[playerid][oEditlenenGate]][gateAcilis][1] = y;
	                GateBilgi[OyuncuBilgi[playerid][oEditlenenGate]][gateAcilis][2] = z;
	                GateBilgi[OyuncuBilgi[playerid][oEditlenenGate]][gateAcilis][3] = rx;
	                GateBilgi[OyuncuBilgi[playerid][oEditlenenGate]][gateAcilis][4] = ry;
	                GateBilgi[OyuncuBilgi[playerid][oEditlenenGate]][gateAcilis][5] = rz;

	                DestroyDynamicObject(GateBilgi[id][gateObje]);
					GateBilgi[id][gateObje] = CreateDynamicObject(GateBilgi[id][gateModel], GateBilgi[id][gatePos][0], GateBilgi[id][gatePos][1], GateBilgi[id][gatePos][2], GateBilgi[id][gatePos][3], GateBilgi[id][gatePos][4], GateBilgi[id][gatePos][5], GateBilgi[id][gateWorld], GateBilgi[id][gateInterior]);

					Gate_Kaydet(id);
                    SunucuMesaji(playerid, "Açýk pozisyon kaydedildi. (GATE ID: %d)", id);
					new log_icerik[144];
					format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir gatenin açýk pozisyonunu deðiþtirdi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], id);
					Gunluk_LogKaydet(log_icerik);
					Log_Kaydet("loglar/gate.txt", "%s", log_icerik);
				}
			}
		}
		else if(OyuncuBilgi[playerid][oEditlenenDolap] != -1 && DolapBilgi[OyuncuBilgi[playerid][oEditlenenDolap]][dolapKullanimda])
	    {
            DolapBilgi[OyuncuBilgi[playerid][oEditlenenDolap]][dolapPos][0] = x;
            DolapBilgi[OyuncuBilgi[playerid][oEditlenenDolap]][dolapPos][1] = y;
            DolapBilgi[OyuncuBilgi[playerid][oEditlenenDolap]][dolapPos][2] = z;
            DolapBilgi[OyuncuBilgi[playerid][oEditlenenDolap]][dolapPos][3] = rx;
            DolapBilgi[OyuncuBilgi[playerid][oEditlenenDolap]][dolapPos][5] = ry;
            DolapBilgi[OyuncuBilgi[playerid][oEditlenenDolap]][dolapPos][5] = rz;

			Dolap_Yenile(OyuncuBilgi[playerid][oEditlenenDolap]);
			Dolap_Kaydet(OyuncuBilgi[playerid][oEditlenenDolap]);

			SunucuMesaji(playerid, "Kýyafet dolabý(%d) düzenlemesini baþarýyla bitirdin ve kaydettin.", OyuncuBilgi[playerid][oEditlenenDolap]);
	    }
	    else if(OyuncuBilgi[playerid][oDuzenlenenRadar] != -1 && RadarBilgi[OyuncuBilgi[playerid][oDuzenlenenRadar]][radarKullanimda])
	    {
            RadarBilgi[OyuncuBilgi[playerid][oDuzenlenenRadar]][radarPos][0] = x;
            RadarBilgi[OyuncuBilgi[playerid][oDuzenlenenRadar]][radarPos][1] = y;
            RadarBilgi[OyuncuBilgi[playerid][oDuzenlenenRadar]][radarPos][2] = z;
            RadarBilgi[OyuncuBilgi[playerid][oDuzenlenenRadar]][radarPos][3] = rz;

			Radar_Yenile(OyuncuBilgi[playerid][oDuzenlenenRadar]);
			Radar_Kaydet(OyuncuBilgi[playerid][oDuzenlenenRadar]);

			SunucuMesaji(playerid, "Hýz radarý düzenlemesini baþarýyla bitirdin ve kaydettin. (ID: %d)", OyuncuBilgi[playerid][oDuzenlenenRadar]);
	    }
		else if(OyuncuBilgi[playerid][oEditlenenObje] != -1 && ObjeBilgi[OyuncuBilgi[playerid][oEditlenenObje]][objeKullanimda])
	    {
			new id = OyuncuBilgi[playerid][oEditlenenObje];
			ObjeBilgi[id][objePos][0] = x;
			ObjeBilgi[id][objePos][1] = y;
			ObjeBilgi[id][objePos][2] = z;
			ObjeBilgi[id][objePos][3] = rx;
			ObjeBilgi[id][objePos][4] = ry;
			ObjeBilgi[id][objePos][5] = rz;
			DestroyDynamicObject(ObjeBilgi[id][objeYarat]);
			ObjeBilgi[id][objeYarat] = CreateDynamicObject(ObjeBilgi[id][objeModel], ObjeBilgi[id][objePos][0], ObjeBilgi[id][objePos][1], ObjeBilgi[id][objePos][2], ObjeBilgi[id][objePos][3], ObjeBilgi[id][objePos][4], ObjeBilgi[id][objePos][5], ObjeBilgi[id][objeWorld], ObjeBilgi[id][objeInterior]);
			Obje_Kaydet(id);
			SunucuMesaji(playerid, "Pozisyon kaydedildi. (OBJE ID: %d)", id);
		}
	    else if(OyuncuBilgi[playerid][oATMDuzenliyor] != -1 && ATMBilgi[OyuncuBilgi[playerid][oATMDuzenliyor]][atmKullanimda])
	    {
            ATMBilgi[OyuncuBilgi[playerid][oATMDuzenliyor]][atmPos][0] = x;
            ATMBilgi[OyuncuBilgi[playerid][oATMDuzenliyor]][atmPos][1] = y;
            ATMBilgi[OyuncuBilgi[playerid][oATMDuzenliyor]][atmPos][2] = z;
            ATMBilgi[OyuncuBilgi[playerid][oATMDuzenliyor]][atmPos][3] = rz;

			ATM_Yenile(OyuncuBilgi[playerid][oATMDuzenliyor]);
			ATM_Kaydet(OyuncuBilgi[playerid][oATMDuzenliyor]);

			SunucuMesaji(playerid, "ATM düzenlendi. (ATM ID: %d)", OyuncuBilgi[playerid][oATMDuzenliyor]);
	    }
	    else if(OyuncuBilgi[playerid][uDuzenliyor] != -1 && UyusturucuBilgi[OyuncuBilgi[playerid][uDuzenliyor]][uKullanimda])
	    {
            UyusturucuBilgi[OyuncuBilgi[playerid][uDuzenliyor]][uPos][0] = x;
            UyusturucuBilgi[OyuncuBilgi[playerid][uDuzenliyor]][uPos][1] = y;
            UyusturucuBilgi[OyuncuBilgi[playerid][uDuzenliyor]][uPos][2] = z;

			Uyusturucu_Yenile(OyuncuBilgi[playerid][uDuzenliyor]);
			Uyusturucu_Kaydet(OyuncuBilgi[playerid][uDuzenliyor]);

			SunucuMesaji(playerid, "Uyuþturucu düzenlendi. (Uyuþturucu ID: %d)", OyuncuBilgi[playerid][uDuzenliyor]);
	    }
	    else if(OyuncuBilgi[playerid][oEditlenenBarikat] != -1 && BarikatBilgi[OyuncuBilgi[playerid][oEditlenenBarikat]][barikatKullanimda])
	    {
	        new id = OyuncuBilgi[playerid][oEditlenenBarikat];
			BarikatBilgi[id][barikatPos][0] = x;
			BarikatBilgi[id][barikatPos][1] = y;
			BarikatBilgi[id][barikatPos][2] = z;
			BarikatBilgi[id][barikatPos][3] = rx;
			BarikatBilgi[id][barikatPos][4] = ry;
			BarikatBilgi[id][barikatPos][5] = rz;

			Barikat_Yenile(id);
			SunucuMesaji(playerid, "Barikat düzenlendi. (Barikat ID: %d)", id);
	    }
	    else if(OyuncuBilgi[playerid][oDuzenlenenPompa] != -1 && BenzinPompasi[OyuncuBilgi[playerid][oDuzenlenenPompa]][pompaKullanimda])
	    {
			BenzinPompasi[OyuncuBilgi[playerid][oDuzenlenenPompa]][pompaPos][0] = x;
			BenzinPompasi[OyuncuBilgi[playerid][oDuzenlenenPompa]][pompaPos][1] = y;
			BenzinPompasi[OyuncuBilgi[playerid][oDuzenlenenPompa]][pompaPos][2] = z;
			BenzinPompasi[OyuncuBilgi[playerid][oDuzenlenenPompa]][pompaPos][3] = rz;

			Pompa_Yenile(OyuncuBilgi[playerid][oDuzenlenenPompa]);
			Pompa_Kaydet(OyuncuBilgi[playerid][oDuzenlenenPompa]);

			SunucuMesaji(playerid, "Benzin pompasý düzenlendi. (Pompa ID: %d)", OyuncuBilgi[playerid][oDuzenlenenPompa]);
	    }
	    else if(OyuncuBilgi[playerid][oDuzenlenenKasa] != -1 && KasaBilgi[OyuncuBilgi[playerid][oDuzenlenenKasa]][kasaKullanimda])
	    {
			KasaBilgi[OyuncuBilgi[playerid][oDuzenlenenKasa]][kasaPos][0] = x;
			KasaBilgi[OyuncuBilgi[playerid][oDuzenlenenKasa]][kasaPos][1] = y;
			KasaBilgi[OyuncuBilgi[playerid][oDuzenlenenKasa]][kasaPos][2] = z;
			KasaBilgi[OyuncuBilgi[playerid][oDuzenlenenKasa]][kasaPos][3] = rz;

			Kasa_Yenile(OyuncuBilgi[playerid][oDuzenlenenKasa]);
			Kasa_Kaydet(OyuncuBilgi[playerid][oDuzenlenenKasa]);
			ParaEkle(playerid, -KASA_KONUMLANDIRMA_UCRET);

			SunucuMesaji(playerid, "Kasa düzenlendi. (Kasa ID: %d)", OyuncuBilgi[playerid][oDuzenlenenKasa]);
	    }
	    else if(OyuncuBilgi[playerid][oDuzenlenenMobilya] != -1 && MobilyaBilgi[OyuncuBilgi[playerid][oDuzenlenenMobilya]][mobilyaKullanimda])
	    {
	        new id = OyuncuBilgi[playerid][oDuzenlenenMobilya];
			MobilyaBilgi[id][mobilyaPos][0] = x;
			MobilyaBilgi[id][mobilyaPos][1] = y;
			MobilyaBilgi[id][mobilyaPos][2] = z;
			MobilyaBilgi[id][mobilyaPos][3] = rx;
			MobilyaBilgi[id][mobilyaPos][4] = ry;
			MobilyaBilgi[id][mobilyaPos][5] = rz;
			DestroyDynamicObject(MobilyaBilgi[id][mobilyaYarat]);
			MobilyaBilgi[id][mobilyaYarat] = CreateDynamicObject(MobilyaBilgi[id][mobilyaModel], MobilyaBilgi[id][mobilyaPos][0], MobilyaBilgi[id][mobilyaPos][1], MobilyaBilgi[id][mobilyaPos][2], MobilyaBilgi[id][mobilyaPos][3], MobilyaBilgi[id][mobilyaPos][4], MobilyaBilgi[id][mobilyaPos][5], MobilyaBilgi[id][mobilyaVW], MobilyaBilgi[id][mobilyaInt]);

			Mobilya_Kaydet(id);
			SunucuMesaji(playerid, "Mobilya düzenlendi.");
	    }
	    else if(OyuncuBilgi[playerid][oDuzenlenenRaf] != -1 && RafBilgi[OyuncuBilgi[playerid][oDuzenlenenRaf]][rafKullanimda])
	    {
			RafBilgi[OyuncuBilgi[playerid][oDuzenlenenRaf]][rafPos][0] = x;
			RafBilgi[OyuncuBilgi[playerid][oDuzenlenenRaf]][rafPos][1] = y;
			RafBilgi[OyuncuBilgi[playerid][oDuzenlenenRaf]][rafPos][2] = z;
			RafBilgi[OyuncuBilgi[playerid][oDuzenlenenRaf]][rafPos][3] = rz;

			Raf_Yenile(OyuncuBilgi[playerid][oDuzenlenenRaf]);
			Raf_Kaydet(OyuncuBilgi[playerid][oDuzenlenenRaf]);
		}
	}
	if(response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL)
	{
	    if(OyuncuBilgi[playerid][oATMDuzenliyor] != -1)
			ATM_Yenile(OyuncuBilgi[playerid][oATMDuzenliyor]);

	    OyuncuBilgi[playerid][oDuzenlemeTipi] = 0;
	    OyuncuBilgi[playerid][oEditlenenGate] = -1;
	    OyuncuBilgi[playerid][oEditlenenGise] = -1;
	    OyuncuBilgi[playerid][oEditlenenObje] = -1;
	    OyuncuBilgi[playerid][oEditlenenBarikat] = -1;
	    OyuncuBilgi[playerid][oATMDuzenliyor] = -1;
	    OyuncuBilgi[playerid][uDuzenliyor] = -1;
	    OyuncuBilgi[playerid][oDuzenlenenPompa] = -1;
	    OyuncuBilgi[playerid][oDuzenlenenKasa] = -1;
	    OyuncuBilgi[playerid][oDuzenlenenMobilya] = -1;
	    OyuncuBilgi[playerid][oDuzenlenenRaf] = -1;
	    OyuncuBilgi[playerid][oDuzenlenenRadar] = -1;
	    OyuncuBilgi[playerid][oGraffitiDuzenliyor] = -1;
	    OyuncuBilgi[playerid][oEditlenenDolap] = -1;
	}
	return 1;
}

stock EditlemeSifirla(playerid)
{
	if(OyuncuBilgi[playerid][oDuzenlenenPompa] != -1) Pompa_Yenile(OyuncuBilgi[playerid][oDuzenlenenPompa]);
	if(OyuncuBilgi[playerid][oATMDuzenliyor] != -1) ATM_Yenile(OyuncuBilgi[playerid][oATMDuzenliyor]);

	OyuncuBilgi[playerid][oDuzenlemeTipi] = 0;
	OyuncuBilgi[playerid][oEditlenenGate] = -1;
	OyuncuBilgi[playerid][oEditlenenGise] = -1;
	OyuncuBilgi[playerid][oEditlenenObje] = -1;
	OyuncuBilgi[playerid][oEditlenenBarikat] = -1;
    OyuncuBilgi[playerid][oATMDuzenliyor] = -1;
    OyuncuBilgi[playerid][uDuzenliyor] = -1;
    OyuncuBilgi[playerid][oDuzenlenenPompa] = -1;
    OyuncuBilgi[playerid][oDuzenlenenKasa] = -1;
    OyuncuBilgi[playerid][oDuzenlenenMobilya] = -1;
    OyuncuBilgi[playerid][oDuzenlenenRaf] = -1;
    OyuncuBilgi[playerid][oDuzenlenenRadar] = -1;
    OyuncuBilgi[playerid][oEditlenenDolap] = -1;
	return 1;
}

stock ShowCarColorList(playerid,dialogid,Caption[],Button1[],Button2[])
{
    new BigString[3098];
    for(new i = 0; i < sizeof(ColorList); i++)
	{
		format(BigString, sizeof(BigString), "%s%s", BigString, ColorList[i]);
	}
	DialogGoster(playerid,dialogid,DIALOG_STYLE_MSGBOX,Caption,BigString,Button1,Button2);
}

stock bool:OyuncuBisiklette(oyuncuid)
{
	if(!IsPlayerInAnyVehicle(oyuncuid)) return false;
	switch(GetVehicleModel(GetPlayerVehicleID(oyuncuid))) {
		case 481, 509, 510: return true;
		default: return false;
	}
	return false;
}

stock OyuncuSifirla(playerid)
{
	if(BoomboxBilgi[playerid][boomboxKullanimda]) Boombox_Kaldir(playerid);
	for(new i = 0; i < 13; i ++) {
	    OyuncuBilgi[playerid][oSilah][i] = 0;
	    OyuncuBilgi[playerid][oMermi][i] = 0;
	}
	OyuncuBilgi[playerid][oGirisTest] = 0;
	AracDeneme[playerid] = gettime();
	OyuncuBilgi[playerid][oKiyafet] = 3;
	OyuncuBilgi[playerid][oSahteIsim][0] = 0;
	OyuncuBilgi[playerid][oHesap] = 0;
	OyuncuBilgi[playerid][oReferans] = 0;
	OyuncuBilgi[playerid][oOneriJetonu] = 0;
	CanDuzenle(playerid, 100);
	ZirhDuzenle(playerid, 0);
	OyuncuBilgi[playerid][oZirh] = 0.0;
	OyuncuBilgi[playerid][oCan] = 100.0;
	OyuncuBilgi[playerid][oGeciciKiyafet] = 0;
	OyuncuBilgi[playerid][oAdmin] = 0;
	OyuncuBilgi[playerid][oDestekEkibi] = 0;
	OyuncuBilgi[playerid][oInterior] = 0;
	OyuncuBilgi[playerid][oVW] = 0;
	format(OyuncuBilgi[playerid][oAdminNick], 20, "Yok");
	OyuncuBilgi[playerid][oDogumYeri] = -1;
	OyuncuBilgi[playerid][oKarakterYaratildi] = 0;
	OyuncuBilgi[playerid][oCinsiyet] = 0;
	OyuncuBilgi[playerid][oAdminDurum] = false;
	OyuncuBilgi[playerid][oPMDurum] = true;
	OyuncuBilgi[playerid][oBirlikKanal] = true;
	OyuncuBilgi[playerid][oBoomboxDurum] = true;
	OyuncuBilgi[playerid][oBoomboxDurum] = true;
	OyuncuBilgi[playerid][oPMIzlemeDurum] = false;
	OyuncuBilgi[playerid][oSpecDurum] = true;
	OyuncuBilgi[playerid][oHileKontrol] = false;
	OyuncuBilgi[playerid][oSeviye] = 1;
	OyuncuBilgi[playerid][oSahteLevel] = 0;
	OyuncuBilgi[playerid][oExp] = 0;
	OyuncuBilgi[playerid][oDakika] = 0;
	OyuncuBilgi[playerid][oOynamaSaati] = 0;
	OyuncuBilgi[playerid][oPara] = 1000;
	OyuncuBilgi[playerid][oVPoint] = 0;
	OyuncuBilgi[playerid][oIncelenenRaporSahibi] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oIlgilenenAdmin] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oBirlikSQLID] = 0;
	OyuncuBilgi[playerid][oBirlikLider] = 0;
	OyuncuBilgi[playerid][oBirlik] = -1;
	OyuncuBilgi[playerid][oBirlikDavetEden] = -1;
	OyuncuBilgi[playerid][oBirlikRutbe] = 0;
	OyuncuBilgi[playerid][oAltTab] = 0;
	OyuncuBilgi[playerid][oAFK] = 0;
	OyuncuBilgi[playerid][oEditlenenGate] = -1;
	OyuncuBilgi[playerid][oEditlenenGise] = -1;
	OyuncuBilgi[playerid][oEditlenenObje] = -1;
	OyuncuBilgi[playerid][oDuzenlenenRadar] = -1;
	OyuncuBilgi[playerid][oDuzenlemeTipi] = 0;
	OyuncuBilgi[playerid][oYaraliSure] = 0;
	OyuncuBilgi[playerid][oTedaviSure] = 0;
	OyuncuBilgi[playerid][oYarali] = 0;
	OyuncuBilgi[playerid][oTezgahtar] = 0;
	OyuncuBilgi[playerid][oTenRengi] = 0;
	OyuncuBilgi[playerid][oSonBinilenArac] = 0;
	OyuncuBilgi[playerid][oBeanbag] = false;
	OyuncuBilgi[playerid][oTaser] = false;
	OyuncuBilgi[playerid][oIsbasi] = false;
	OyuncuBilgi[playerid][oMeslekIsbasi] = false;
	OyuncuBilgi[playerid][oDonduruldu] = 0;
	OyuncuBilgi[playerid][oKelepceli] = 0;
	OyuncuBilgi[playerid][oEhliyet] = false;
	OyuncuBilgi[playerid][oEhliyetTesti] = 0;
	OyuncuBilgi[playerid][oKibrit] = 0;
	OyuncuBilgi[playerid][oCakmak] = false;
	OyuncuBilgi[playerid][oOdun] = 0;
	OyuncuBilgi[playerid][oKampAtesi] = false;
	OyuncuBilgi[playerid][oATMDuzenliyor] = -1;
	OyuncuBilgi[playerid][oHesapNumarasi] = 0;
	OyuncuBilgi[playerid][oBankaPara] = 100;
	OyuncuBilgi[playerid][oBankaSifre] = 0;
	OyuncuBilgi[playerid][oSigara] = 0;
	OyuncuBilgi[playerid][oSigaraDurum] = 0;
	OyuncuBilgi[playerid][oSigaraIciyor] = 0;
	OyuncuBilgi[playerid][oIckiIciyor] = 0;
	OyuncuBilgi[playerid][oSigaraKalanHak] = 0;
	OyuncuBilgi[playerid][oTamirSure] = 0;
	OyuncuBilgi[playerid][oIslemeSure] = 0;
	OyuncuBilgi[playerid][oTelefon] = 0;
	OyuncuBilgi[playerid][oTelefonNumarasi] = 0;
	OyuncuBilgi[playerid][oTelefonDurum] = true;
	OyuncuBilgi[playerid][oTelefonSes] = true;
	OyuncuBilgi[playerid][oTelefonAcik] = false;
	OyuncuBilgi[playerid][oGizliNumara] = false;
	OyuncuBilgi[playerid][oArama] = -1;
	OyuncuBilgi[playerid][oAramaSure] = -1;
	OyuncuBilgi[playerid][oCevaplandi] = false;
	OyuncuBilgi[playerid][oDestek] = false;
	OyuncuBilgi[playerid][oSaksi] = 0;
	OyuncuBilgi[playerid][oGubre] = 0;
	OyuncuBilgi[playerid][oTohum] = 0;
	OyuncuBilgi[playerid][oIslenmemisMadde] = 0;
	OyuncuBilgi[playerid][oMaymuncuk] = 0;
	MaymuncukVeri[playerid][mSaniye] = 0;
	MaymuncukVeri[playerid][mHedef] = -1;
	OyuncuBilgi[playerid][oUyusturucu] = 0;
	OyuncuBilgi[playerid][oBakim] = -1;
	OyuncuBilgi[playerid][oJetpack] = false;
	OyuncuBilgi[playerid][oRaporSayisi] = 0;
	OyuncuBilgi[playerid][oHapisSure][0] = 0;
	OyuncuBilgi[playerid][oHapisSure][1] = 0;
	OyuncuBilgi[playerid][oyuncuKod][0] = 0;
	OyuncuBilgi[playerid][oVatandaslikNo] = 0;
	OyuncuBilgi[playerid][oRuhsat] = 0;
	OyuncuBilgi[playerid][oHapisID] = -1;
	OyuncuBilgi[playerid][oGozBagli] = false;
	OyuncuBilgi[playerid][uDuzenliyor] = -1;
	OyuncuBilgi[playerid][oKontrol] = true;
	OyuncuBilgi[playerid][oEkstraDil] = -1;
	OyuncuBilgi[playerid][oEditlenenBarikat] = -1;
	OyuncuBilgi[playerid][oBirim] = 0;
	OyuncuBilgi[playerid][oDuzenlenenPompa] = -1;
	OyuncuBilgi[playerid][oDuzenlenenKasa] = -1;
	OyuncuBilgi[playerid][oDuzenlenenRaf] = -1;
	OyuncuBilgi[playerid][oMobilyaSecim] = MOBILYA_SECIM_YOK;
	OyuncuBilgi[playerid][oDuzenlenenMobilya] = -1;
	OyuncuBilgi[playerid][oMobilyaOnay] = -1;
	OyuncuBilgi[playerid][oKasa] = -1;
	OyuncuBilgi[playerid][oBoombox] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oEkstraPayday] = 0;
	OyuncuBilgi[playerid][oMuzikKutusu] = 0;
	OyuncuBilgi[playerid][oGPS] = 0;
	OyuncuBilgi[playerid][oAdres] = -1;
	OyuncuBilgi[playerid][objeLokasyon] = -1;
	OyuncuBilgi[playerid][objeIzin] = false;
	OyuncuBilgi[playerid][oSSMod] = false;
	OyuncuBilgi[playerid][oAktif] = 1;
	OyuncuBilgi[playerid][oEhliyetUyari] = 0;
	OyuncuBilgi[playerid][oPDgps] = false;
	OyuncuBilgi[playerid][oBagaj] = -1;
	OyuncuBilgi[playerid][oRaf] = -1;
	OyuncuBilgi[playerid][oBildirim] = 0;
	OyuncuBilgi[playerid][oUyari] = 0;
	OyuncuBilgi[playerid][oMaske] = 0;
	OyuncuBilgi[playerid][oMaskeDurum] = 0;
	OyuncuBilgi[playerid][oLabelDurum] = 0;
	OyuncuBilgi[playerid][oMarker] = -1;
	OyuncuBilgi[playerid][oKonum] = -1;
	OyuncuBilgi[playerid][oGPSArac] = INVALID_VEHICLE_ID;
	OyuncuBilgi[playerid][oRehber] = -1;
	OyuncuBilgi[playerid][oLokasyon] = -1;
	OyuncuBilgi[playerid][oIlkYardim] = 0;
	OyuncuBilgi[playerid][oTamirKiti] = 0;
	OyuncuBilgi[playerid][oKilogram] = 0;
	OyuncuBilgi[playerid][oBoy] = 0;
	OyuncuBilgi[playerid][oGozRengi] = 0;
	OyuncuBilgi[playerid][oSacRengi] = 0;
	OyuncuBilgi[playerid][oIpUrun] = 0;
	OyuncuBilgi[playerid][oTamirArac] = INVALID_VEHICLE_ID;
	OyuncuBilgi[playerid][oTamirKitiSure] = 0;
	OyuncuBilgi[playerid][oIlkYardimSure] = 0;
	OyuncuBilgi[playerid][oDekorSure] = 0;
	OyuncuBilgi[playerid][oHirsizSure] = 0;
	OyuncuBilgi[playerid][oArizaTamirSure] = 0;
	OyuncuBilgi[playerid][oArizaTespitSure] = 0;
	OyuncuBilgi[playerid][oDuzKontak] = 0;
	OyuncuBilgi[playerid][oHirsizArac] = INVALID_VEHICLE_ID;
	OyuncuBilgi[playerid][oIlkYardimYapilan] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][AFKLabel] = Text3D:INVALID_3DTEXT_ID;
	OyuncuBilgi[playerid][oIsimLabel] = Text3D:INVALID_3DTEXT_ID;
	OyuncuBilgi[playerid][oApolet] = Text3D:INVALID_3DTEXT_ID;
	OyuncuBilgi[playerid][oRaporGoruntule] = true;
	OyuncuBilgi[playerid][oDestekSohbet] = true;
	OyuncuBilgi[playerid][oEkSlot] = 0;
	OyuncuBilgi[playerid][oEkEvSlot] = 0;
	OyuncuBilgi[playerid][oEkAracSlot] = 0;
	OyuncuBilgi[playerid][oVIP] = 0;
	OyuncuBilgi[playerid][oVIPSure] = 0;
	OyuncuBilgi[playerid][oHirsizVIPTeslim] = 0;
	OyuncuBilgi[playerid][oGaspSure] = 0;
	OyuncuBilgi[playerid][oTSBilgi][0] = 0;
	OyuncuBilgi[playerid][oTSOda] = 0;
	OyuncuBilgi[playerid][oBidon] = 0;
	OyuncuBilgi[playerid][oBidonBenzin] = 0;
	OyuncuBilgi[playerid][oBenzinDolduruyor] = -1;
	OyuncuBilgi[playerid][oCK] = 0;
	OyuncuBilgi[playerid][oUyusturucuBoost] = 0;
	OyuncuBilgi[playerid][oSuruklenen] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oSurukleniyor] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oSuruklemeTipi] = 0;
	OyuncuBilgi[playerid][oKamyoncu] = -1;
	OyuncuBilgi[playerid][oKamyoncuTeslimat] = 0;
	OyuncuBilgi[playerid][oMeslekDelay] = gettime();
	OyuncuBilgi[playerid][oUyusturucuDelay] = gettime();
	OyuncuBilgi[playerid][oArizaTespitDelay] = gettime();
	OyuncuBilgi[playerid][oArizaTamirDelay] = gettime();
	OyuncuBilgi[playerid][oTemizlikCP] = 0;
	OyuncuBilgi[playerid][oHitman] = 0;
	OyuncuBilgi[playerid][oRaporSure] = gettime();
	OyuncuBilgi[playerid][oRaporGecikme] = 0;
	OyuncuBilgi[playerid][oDinlenenYayin] = 0;
	OyuncuBilgi[playerid][oRapor][0] = 0;
	OyuncuBilgi[playerid][oHediye] = 0;
	OyuncuBilgi[playerid][oDovusStil] = FIGHT_STYLE_NORMAL;
	OyuncuBilgi[playerid][oPortatifRadyo] = 0;
	OyuncuBilgi[playerid][oFrekans] = 0;
	OyuncuBilgi[playerid][oYuruyusStil] = 0;
	OyuncuBilgi[playerid][oZar] = 0;
	OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oKonumGonderilme] = 0;
	OyuncuBilgi[playerid][oIsaretliKonum] = 0;
	OyuncuBilgi[playerid][oIsaretliMeslek] = -1;
	OyuncuBilgi[playerid][oSoru][0] = 0;
	OyuncuBilgi[playerid][oIlgilenenYetkili] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oSoruSure] = gettime();
	OyuncuBilgi[playerid][oSoruGecikme] = 0;
	OyuncuBilgi[playerid][oSoruGoruntule] = true;
	OyuncuBilgi[playerid][oCezaDurum] = true;
	OyuncuBilgi[playerid][oReklamDurum] = true;
	OyuncuBilgi[playerid][oIncelenenSoruSahibi] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oSoruSayisi] = 0;
	OyuncuBilgi[playerid][oUberIsbasi] = false;
	OyuncuBilgi[playerid][oUberIsaret] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oUberTalep] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oYaris] = -1;
	OyuncuBilgi[playerid][oYarisTur] = 0;
	OyuncuBilgi[playerid][oYarisCP] = 0;
	OyuncuBilgi[playerid][oYarisDavet] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oPaintball] = -1;
	OyuncuBilgi[playerid][oPBOldurme] = 0;
	OyuncuBilgi[playerid][oPBOlum] = 0;
	OyuncuBilgi[playerid][oSilahDelay] = 0;
	OyuncuBilgi[playerid][oSilahHakki] = 0;
	OyuncuBilgi[playerid][oMeslek] = 0;
	OyuncuBilgi[playerid][oNewbieDurum] = true;
	OyuncuBilgi[playerid][oNewbieSure] = 0;
	OyuncuBilgi[playerid][oNewbieMute] = 0;
	OyuncuBilgi[playerid][oAracBagla] = INVALID_VEHICLE_ID;
	OyuncuBilgi[playerid][oBaglamaSure] = 0;
	OyuncuBilgi[playerid][oAvukatLisans] = 0;
	OyuncuBilgi[playerid][oAvukatSecim] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oSilmeSure] = 0;
	OyuncuBilgi[playerid][oSucSecim] = -1;
	OyuncuBilgi[playerid][oAvukatYetenek] = 0;
	OyuncuBilgi[playerid][oAvukatBekleme] = 0;
	OyuncuBilgi[playerid][oSucIndirimiSure] = 0;
	OyuncuBilgi[playerid][oSorulanSoru] = 0;
	OyuncuBilgi[playerid][oSonPM] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oPMAldi] = false;
	OyuncuBilgi[playerid][oDogruCevap] = 0;
	OyuncuBilgi[playerid][oYanlisCevap] = 0;
	OyuncuBilgi[playerid][oSOSGecikme] = gettime();
	OyuncuBilgi[playerid][oBalikTutuyor] = 0;
	OyuncuBilgi[playerid][oMadenKaziyor] = 0;
	OyuncuBilgi[playerid][oDogrulamaKodu] = 0;
	OyuncuBilgi[playerid][oSonVurus] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oBodyguardOneren] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oRadarGecikme] = gettime();
	OyuncuBilgi[playerid][oGraffiti] = -1;
	OyuncuBilgi[playerid][oGraffitiSure] = 0;
	OyuncuBilgi[playerid][oGraffitiDuzenliyor] = -1;
	OyuncuBilgi[playerid][oYatKontrol][0] = 0;
	OyuncuBilgi[playerid][oYatKontrol][1] = 0;
	OyuncuBilgi[playerid][oYatKontrol][2] = 0;
	OyuncuBilgi[playerid][oYatKontrol][3] = 0;
	OyuncuBilgi[playerid][oYatKontrol][4] = 0;
	OyuncuBilgi[playerid][oSonAtis] = gettime();
	OyuncuBilgi[playerid][oAtisSayisi] = 1;
	OyuncuBilgi[playerid][oTokalasIstek] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oTokalasStil] = 0;
	OyuncuBilgi[playerid][oKonusmaAnim] = false;
	OyuncuBilgi[playerid][oEmniyetKemeri] = false;
	OyuncuBilgi[playerid][oKumarBahis] = 0;
	OyuncuBilgi[playerid][oEtkinlikDurum] = false;
	OyuncuBilgi[playerid][oBenzinIsyeri] = -1;
	OyuncuBilgi[playerid][oBenzinAliyor] = -1;
	OyuncuBilgi[playerid][oDialog] = -1;
	OyuncuBilgi[playerid][oEleGecirme] = -1;
	OyuncuBilgi[playerid][oEleGecirmeSure] = 0;
	OyuncuBilgi[playerid][oKumarBahis_Duello] = 0;
	OyuncuBilgi[playerid][oKumarDialog] = INVALID_PLAYER_ID;
	OyuncuBilgi[playerid][oKumarBaslatan] = false;
	OyuncuBilgi[playerid][oBagli] = false;
	/*OyuncuBilgi[playerid][oUretimYapiyor] = 0;
	OyuncuBilgi[playerid][oUretimTuru] = 0;
	OyuncuBilgi[playerid][oUretimSure] = 0;
	OyuncuBilgi[playerid][oUretimSilah] = 0;*/
	OyuncuBilgi[playerid][oEditlenenDolap] = -1;
	PetKontrol[playerid] = -1;
	InsideShamal[playerid] = INVALID_VEHICLE_ID;
	//format(OyuncuBilgi[playerid][oUretimSecilen], 32, "Yok");
	for(new i = 0; i != 5; i ++) OyuncuBilgi[playerid][oSoruListesi][i] = -1;
	for(new i = 0; i != 15; i++) OyuncuBilgi[playerid][oBaliklar][i] = 0;
	eskiworld[playerid] = -1;
	HileKontrolGecikme[playerid] = gettime();
	ElKoy[playerid] = -1;
	SetPVarInt(playerid, "aracsatan", -1);
	SetPVarInt(playerid, "satilanarac", -1);
	SetPVarInt(playerid, "aracfiyat", -1);
	SetPVarInt(playerid, "evsatan", -1);
	SetPVarInt(playerid, "satilanev", -1);
	SetPVarInt(playerid, "evfiyat", -1);
	SetPVarInt(playerid, "isyerisatan", -1);
	SetPVarInt(playerid, "satilanisyeri", -1);
	SetPVarInt(playerid, "isyerifiyat", -1);
	SetPVarInt(playerid, "mNumara", 0);
	SetPVarInt(playerid, "Oy", 0);
	SetPVarInt(playerid, "ustarayan", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "utur", -1);
	SetPVarInt(playerid, "gozbaglayanid", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "ipbaglama_id", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "anahtarsahip", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "evanahtaroneren", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "AnahtarOneren", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "UyusturucuSat", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "anim", 0);
	SetPVarInt(playerid, "paraver_delay", gettime());
	SetPVarInt(playerid, "kelepce_anim", 0);
	SetPVarInt(playerid, "silah_satiyor", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "silah_satis", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "silah_satiliyor", 0);
	SetPVarInt(playerid, "silah_fiyat", 0);
	SetPVarInt(playerid, "Destek_Soru", 0);
	for(new i = 0; i != MAKSIMUM_HASAR; i ++) {
		HasarBilgi[playerid][i][hasarVarmi] = false;
		HasarBilgi[playerid][i][hasarBolge] = 0;
		HasarBilgi[playerid][i][hasarVeren] = INVALID_PLAYER_ID;
        HasarBilgi[playerid][i][hasarDeger] = 0;
        HasarBilgi[playerid][i][hasarSilah] = 0;
	}
	TogglePlayerSpectating(playerid, 0);
	OyuncuBilgi[playerid][oIzlenen] = INVALID_PLAYER_ID;
	TextdrawlariYarat(playerid);
	SetPVarInt(playerid, "state", GetTickCount());
	BoomboxBilgi[playerid][boomboxKullanimda] = 0;
	BoomboxBilgi[playerid][boomboxPos][0] = 0.0;
	BoomboxBilgi[playerid][boomboxPos][1] = 0.0;
	BoomboxBilgi[playerid][boomboxPos][2] = 0.0;
	CanHileUyari[playerid] = 0;
	ZirhHileUyari[playerid] = 0;
	AracHilesiUyari[playerid] = 0;
	for(new r = 0; r != MAKSIMUM_REHBER_SAYI; r++) if(RehberBilgi[playerid][r][rehberKullanimda]) {
	    RehberBilgi[playerid][r][rehberKullanimda] = false;
		format(RehberBilgi[playerid][r][rehberIsim], 64, "NULL");
		RehberBilgi[playerid][r][rehberNumara] = 0;
	}
	return 1;
}

public OnPlayerConnect(playerid)
{
	Hud_SagAlt[playerid][0] = CreatePlayerTextDraw(playerid, 5.000000, 436.000000, "V1");
	PlayerTextDrawFont(playerid, Hud_SagAlt[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, Hud_SagAlt[playerid][0], 0.162497, 0.999997);
	PlayerTextDrawTextSize(playerid, Hud_SagAlt[playerid][0], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Hud_SagAlt[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, Hud_SagAlt[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, Hud_SagAlt[playerid][0], 1);
	PlayerTextDrawColor(playerid, Hud_SagAlt[playerid][0], -1962934017);
	PlayerTextDrawBackgroundColor(playerid, Hud_SagAlt[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, Hud_SagAlt[playerid][0], 50);
	PlayerTextDrawUseBox(playerid, Hud_SagAlt[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, Hud_SagAlt[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, Hud_SagAlt[playerid][0], 0);

	Hud_SagAlt[playerid][1] = CreatePlayerTextDraw(playerid, 14.000000, 436.000000, "www.viga-roleplay.com");
	PlayerTextDrawFont(playerid, Hud_SagAlt[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, Hud_SagAlt[playerid][1], 0.137499, 0.999999);
	PlayerTextDrawTextSize(playerid, Hud_SagAlt[playerid][1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Hud_SagAlt[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, Hud_SagAlt[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, Hud_SagAlt[playerid][1], 1);
	PlayerTextDrawColor(playerid, Hud_SagAlt[playerid][1], -741092353);
	PlayerTextDrawBackgroundColor(playerid, Hud_SagAlt[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, Hud_SagAlt[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, Hud_SagAlt[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, Hud_SagAlt[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, Hud_SagAlt[playerid][1], 0);

	Hud_SagAlt[playerid][2] = CreatePlayerTextDraw(playerid, 564.000000, 417.000000, "mdl-2002:vigahud");
	PlayerTextDrawFont(playerid, Hud_SagAlt[playerid][2], 4);
	PlayerTextDrawLetterSize(playerid, Hud_SagAlt[playerid][2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, Hud_SagAlt[playerid][2], 75.000000, 35.500000);
	PlayerTextDrawSetOutline(playerid, Hud_SagAlt[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, Hud_SagAlt[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, Hud_SagAlt[playerid][2], 1);
	PlayerTextDrawColor(playerid, Hud_SagAlt[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, Hud_SagAlt[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, Hud_SagAlt[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, Hud_SagAlt[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, Hud_SagAlt[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, Hud_SagAlt[playerid][2], 0);

	Hud_SagAlt[playerid][3] = CreatePlayerTextDraw(playerid, 623.000000, 422.000000, "100");
	PlayerTextDrawFont(playerid, Hud_SagAlt[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, Hud_SagAlt[playerid][3], 0.191666, 1.050001);
	PlayerTextDrawTextSize(playerid, Hud_SagAlt[playerid][3], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Hud_SagAlt[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, Hud_SagAlt[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, Hud_SagAlt[playerid][3], 1);
	PlayerTextDrawColor(playerid, Hud_SagAlt[playerid][3], -1061109505);
	PlayerTextDrawBackgroundColor(playerid, Hud_SagAlt[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, Hud_SagAlt[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, Hud_SagAlt[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, Hud_SagAlt[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, Hud_SagAlt[playerid][3], 0);

	Hud_SagAlt[playerid][4] = CreatePlayerTextDraw(playerid, 593.000000, 434.000000, "10.11.1938_09.05");
	PlayerTextDrawFont(playerid, Hud_SagAlt[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, Hud_SagAlt[playerid][4], 0.120833, 1.000000);
	PlayerTextDrawTextSize(playerid, Hud_SagAlt[playerid][4], 385.500000, 5.000000);
	PlayerTextDrawSetOutline(playerid, Hud_SagAlt[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, Hud_SagAlt[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, Hud_SagAlt[playerid][4], 1);
	PlayerTextDrawColor(playerid, Hud_SagAlt[playerid][4], -1061109505);
	PlayerTextDrawBackgroundColor(playerid, Hud_SagAlt[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, Hud_SagAlt[playerid][4], 50);
	PlayerTextDrawUseBox(playerid, Hud_SagAlt[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, Hud_SagAlt[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, Hud_SagAlt[playerid][4], 0);

	Hud_SagAlt[playerid][5] = CreatePlayerTextDraw(playerid, 595.000000, 422.000000, "099");
	PlayerTextDrawFont(playerid, Hud_SagAlt[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, Hud_SagAlt[playerid][5], 0.191666, 1.050001);
	PlayerTextDrawTextSize(playerid, Hud_SagAlt[playerid][5], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Hud_SagAlt[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, Hud_SagAlt[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, Hud_SagAlt[playerid][5], 1);
	PlayerTextDrawColor(playerid, Hud_SagAlt[playerid][5], -1094795521);
	PlayerTextDrawBackgroundColor(playerid, Hud_SagAlt[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, Hud_SagAlt[playerid][5], 50);
	PlayerTextDrawUseBox(playerid, Hud_SagAlt[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, Hud_SagAlt[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, Hud_SagAlt[playerid][5], 0);
	
	Hud_SagAlt[playerid][6] = CreatePlayerTextDraw(playerid, 608.000000, 414.000000, "Cagatay_Ozcan");
	PlayerTextDrawFont(playerid, Hud_SagAlt[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, Hud_SagAlt[playerid][6], 0.133333, 0.900000);
	PlayerTextDrawTextSize(playerid, Hud_SagAlt[playerid][6], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Hud_SagAlt[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, Hud_SagAlt[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, Hud_SagAlt[playerid][6], 2);
	PlayerTextDrawColor(playerid, Hud_SagAlt[playerid][6], -741092353);
	PlayerTextDrawBackgroundColor(playerid, Hud_SagAlt[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, Hud_SagAlt[playerid][6], 50);
	PlayerTextDrawUseBox(playerid, Hud_SagAlt[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, Hud_SagAlt[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, Hud_SagAlt[playerid][6], 0);

	// Arac Hýz Göstergesi Vs..
	AracHizGosterge[playerid] = CreatePlayerTextDraw(playerid, 322.000, 420.000, "_");
	PlayerTextDrawLetterSize(playerid, AracHizGosterge[playerid], 0.180, 1.000);
	PlayerTextDrawAlignment(playerid, AracHizGosterge[playerid], 2);
	PlayerTextDrawColor(playerid, AracHizGosterge[playerid], -1);
	PlayerTextDrawSetShadow(playerid, AracHizGosterge[playerid], 1);
	PlayerTextDrawSetOutline(playerid, AracHizGosterge[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, AracHizGosterge[playerid], 110);
	PlayerTextDrawFont(playerid, AracHizGosterge[playerid], 1);
	PlayerTextDrawSetProportional(playerid, AracHizGosterge[playerid], 1);
	

	OyuncuBilgi[playerid][oiphone][0] = CreatePlayerTextDraw(playerid, 542.00, 184.00, "mdl-2019:iphone1");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][0], 4);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][0], 85.500000, 182.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][0], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][0], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][0], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][0], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][0], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][0], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][0], 1);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][0], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][0], 0);

	OyuncuBilgi[playerid][oiphone][1] = CreatePlayerTextDraw(playerid, 578.000000, 258.000000, "mdl-2019:ayarlar");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][1], 4);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][1], 15.500000, 14.500000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][1], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][1], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][1], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][1], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][1], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][1], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][1], 1);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][1], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][1], 1);

	OyuncuBilgi[playerid][oiphone][2] = CreatePlayerTextDraw(playerid, 555.000000, 333.000000, "mdl-2019:arama");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][2], 4);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][2], 16.000000, 15.500000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][2], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][2], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][2], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][2], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][2], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][2], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][2], 1);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][2], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][2], 1);

	OyuncuBilgi[playerid][oiphone][3] = CreatePlayerTextDraw(playerid, 586.000000, 194.000000, "00:00");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][3], 2);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][3], 0.358332, 1.999999);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][3], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][3], 2);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][3], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][3], 2);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][3], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][3], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][3], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][3], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][3], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][3], 0);

	OyuncuBilgi[playerid][oiphone][4] = CreatePlayerTextDraw(playerid, 586.000000, 213.000000, "00.00.0000");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][4], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][4], 0.216665, 0.849999);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][4], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][4], 2);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][4], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][4], 2);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][4], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][4], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][4], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][4], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][4], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][4], 0);

	OyuncuBilgi[playerid][oiphone][5] = CreatePlayerTextDraw(playerid, 552.000000, 225.000000, "mdl-2019:haritalar");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][5], 4);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][5], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][5], 16.000000, 16.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][5], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][5], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][5], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][5], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][5], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][5], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][5], 1);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][5], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][5], 1);

	OyuncuBilgi[playerid][oiphone][6] = CreatePlayerTextDraw(playerid, 577.000000, 225.000000, "mdl-2019:rehber");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][6], 4);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][6], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][6], 17.500000, 17.500000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][6], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][6], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][6], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][6], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][6], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][6], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][6], 1);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][6], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][6], 1);

	OyuncuBilgi[playerid][oiphone][7] = CreatePlayerTextDraw(playerid, 602.000000, 225.000000, "mdl-2019:whatsapp");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][7], 4);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][7], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][7], 18.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][7], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][7], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][7], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][7], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][7], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][7], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][7], 1);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][7], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][7], 1);

	OyuncuBilgi[playerid][oiphone][8] = CreatePlayerTextDraw(playerid, 551.000000, 257.000000, "mdl-2019:uber");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][8], 4);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][8], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][8], 16.000000, 16.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][8], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][8], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][8], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][8], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][8], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][8], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][8], 1);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][8], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][8], 1);

	OyuncuBilgi[playerid][oiphone][9] = CreatePlayerTextDraw(playerid, 602.000000, 257.000000, "mdl-2019:notdefteri");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][9], 4);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][9], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][9], 16.500000, 15.500000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][9], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][9], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][9], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][9], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][9], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][9], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][9], 1);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][9], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][9], 1);

	OyuncuBilgi[playerid][oiphone][10] = CreatePlayerTextDraw(playerid, 548.000000, 282.000000, "mdl-2019:zcnbank");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][10], 4);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][10], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][10], 21.500000, 21.500000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][10], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][10], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][10], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][10], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][10], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][10], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][10], 1);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][10], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][10], 1);

	OyuncuBilgi[playerid][oiphone][11] = CreatePlayerTextDraw(playerid, 601.000000, 333.000000, "mdl-2019:mesaj");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][11], 4);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][11], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][11], 15.500000, 16.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][11], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][11], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][11], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][11], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][11], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][11], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][11], 1);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][11], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][11], 1);

	OyuncuBilgi[playerid][oiphone][12] = CreatePlayerTextDraw(playerid, 577.000000, 284.000000, "mdl-2019:ilanlar");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][12], 4);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][12], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][12], 16.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][12], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][12], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][12], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][12], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][12], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][12], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][12], 1);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][12], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][12], 1);

	OyuncuBilgi[playerid][oiphone][13] = CreatePlayerTextDraw(playerid, 560.000000, 242.000000, "GPS");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][13], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][13], 0.137500, 0.750000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][13], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][13], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][13], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][13], 2);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][13], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][13], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][13], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][13], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][13], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][13], 0);

	OyuncuBilgi[playerid][oiphone][14] = CreatePlayerTextDraw(playerid, 586.000000, 242.000000, "Rehber");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][14], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][14], 0.108332, 0.750000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][14], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][14], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][14], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][14], 2);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][14], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][14], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][14], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][14], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][14], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][14], 0);

	OyuncuBilgi[playerid][oiphone][15] = CreatePlayerTextDraw(playerid, 611.000000, 242.000000, "Whatsapp");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][15], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][15], 0.100000, 0.750000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][15], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][15], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][15], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][15], 2);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][15], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][15], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][15], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][15], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][15], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][15], 0);

	OyuncuBilgi[playerid][oiphone][16] = CreatePlayerTextDraw(playerid, 559.000000, 273.000000, "Uber");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][16], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][16], 0.112499, 0.750000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][16], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][16], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][16], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][16], 2);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][16], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][16], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][16], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][16], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][16], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][16], 0);

	OyuncuBilgi[playerid][oiphone][17] = CreatePlayerTextDraw(playerid, 586.000000, 273.000000, "Ayarlar");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][17], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][17], 0.104166, 0.750000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][17], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][17], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][17], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][17], 2);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][17], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][17], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][17], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][17], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][17], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][17], 0);

	OyuncuBilgi[playerid][oiphone][18] = CreatePlayerTextDraw(playerid, 610.000000, 273.000000, "Not");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][18], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][18], 0.104166, 0.750000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][18], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][18], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][18], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][18], 2);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][18], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][18], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][18], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][18], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][18], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][18], 0);

	OyuncuBilgi[playerid][oiphone][19] = CreatePlayerTextDraw(playerid, 586.000000, 302.000000, "Reklamlar");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][19], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][19], 0.112499, 0.750000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][19], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][19], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][19], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][19], 2);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][19], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][19], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][19], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][19], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][19], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][19], 0);

	OyuncuBilgi[playerid][oiphone][20] = CreatePlayerTextDraw(playerid, 559.000000, 302.000000, "Banka");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oiphone][20], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oiphone][20], 0.112499, 0.750000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oiphone][20], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oiphone][20], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oiphone][20], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oiphone][20], 2);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oiphone][20], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oiphone][20], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oiphone][20], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oiphone][20], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oiphone][20], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oiphone][20], 0);
	
	if(IsPlayerNPC(playerid)) if(!!strcmp(OyuncuIP(playerid), "127.0.0.1"))
	{
		UyariMesaji(playerid, "Sunucuya bot sokamazsýnýz.", OyuncuIsim(playerid));
		return KickEx(playerid);
	}
	if(IsPlayerNPC(playerid)) return SetPlayerColor(playerid, RENK_VARSAYILAN);
	if(OyuncuGiris[playerid] || IsPlayerBot(playerid)) return HileKickle(playerid, 1);
	OyuncuGiris[playerid] = true;
	new sayi = 0;
	foreach(new o : Player) if(!!strcmp(OyuncuIP(o), "127.0.0.1") && !strcmp(OyuncuIP(o), OyuncuIP(playerid), true) && o != playerid && !IsPlayerAdmin(playerid)) sayi++;
	if(sayi > 2) {
		UyariMesaji(playerid, "Ayný IP üzerinden sadece iki kiþi giriþ yapabilir.");
		return KickEx(playerid);
	}
 	OlumSayisi[playerid] = 0, OlumSuresi[playerid] = 0;
	/*SetSpawnInfo(playerid, 0, 299, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
	SpawnPlayer(playerid);
	SetSpawnInfo(playerid, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
	SpawnPlayer(playerid);
	OyuncuPosDegistir(playerid, 1045.441040, -918.800231, -80.0);
	InterpolateCameraPos(playerid, 437.747619, -1469.347900, 36.590827, 1045.441040, -918.800231, 92.159584, 10000);
	InterpolateCameraLookAt(playerid, 442.437072, -1467.623413, 36.778285, 1049.376220, -921.691528, 93.234367, 1000);*/ //  burada kaldým
	SetPlayerColor(playerid, RENK_VARSAYILAN);
	OyuncuSifirla(playerid);
	Aksesuar_Sifirla(playerid);
	DisablePlayerCheckpoint(playerid);
	OyuncuBilgi[playerid][oGiris] = false;
	OyuncuBilgi[playerid][oIlkGiris] = false;
	SetPVarInt(playerid, "Kick", 0);
	PlayerTextDrawHide(playerid, adminduty[playerid]);
	PlayerTextDrawHide(playerid, godduty[playerid]);
	if(IsValidDynamic3DTextLabel(OyuncuBilgi[playerid][oIsimLabel])) DestroyDynamic3DTextLabel(OyuncuBilgi[playerid][oIsimLabel]), OyuncuBilgi[playerid][oIsimLabel] = Text3D:INVALID_3DTEXT_ID;
	if(IsValidDynamic3DTextLabel(OyuncuBilgi[playerid][oApolet])) DestroyDynamic3DTextLabel(OyuncuBilgi[playerid][oApolet]), OyuncuBilgi[playerid][oApolet] = Text3D:INVALID_3DTEXT_ID;
	OyuncuBilgi[playerid][oApolet] = CreateDynamic3DTextLabel("", 0xFFFFFFFF, 0.0, 0.0, 0.2, ISIM_MESAFESI, .attachedplayer = playerid, .testlos = 1);
	OyuncuBilgi[playerid][oIsimLabel] = CreateDynamic3DTextLabel("", 0xFFFFFFFF, 0.0, 0.0, 0.1, ISIM_MESAFESI, .attachedplayer = playerid, .testlos = 1);
	for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS; i++) if(IsPlayerAttachedObjectSlotUsed(playerid, i)) RemovePlayerAttachedObject(playerid, i);
	new oyuncu_isim[MAX_PLAYER_NAME + 1], log_icerik[144];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%s) sunucuya giriþ yaptý.", Tarih(), oyuncu_isim, OyuncuIP(playerid));
	Gunluk_LogKaydet(log_icerik);
	GirisDuzelt(playerid);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
    if(IsPlayerNPC(playerid)) return false;
	if(IsValidDynamic3DTextLabel(OyuncuBilgi[playerid][AFKLabel])) DestroyDynamic3DTextLabel(OyuncuBilgi[playerid][AFKLabel]), OyuncuBilgi[playerid][AFKLabel] = Text3D:INVALID_3DTEXT_ID;
	if(IsValidDynamic3DTextLabel(OyuncuBilgi[playerid][oIsimLabel])) DestroyDynamic3DTextLabel(OyuncuBilgi[playerid][oIsimLabel]), OyuncuBilgi[playerid][oIsimLabel] = Text3D:INVALID_3DTEXT_ID;
	if(IsValidDynamic3DTextLabel(OyuncuBilgi[playerid][oApolet])) DestroyDynamic3DTextLabel(OyuncuBilgi[playerid][oApolet]), OyuncuBilgi[playerid][oApolet] = Text3D:INVALID_3DTEXT_ID;
	if(OyuncuGiris[playerid] == false) return false;
    OyuncuGiris[playerid] = false;
    OlumSayisi[playerid] = 0, OlumSuresi[playerid] = 0;
	if(Paintball_ID(playerid) != -1) {
		ResetPlayerWeapons(playerid);
		new id = Paintball_ID(playerid);
	    foreach(new o : Player) if(OyuncuBilgi[o][oGiris] == true && OyuncuBilgi[o][oPaintball] == id && o != playerid) {
			SendClientMessageEx(o, RENK_BEYAZ, "{%06x}[PAINTBALL]: {FFFFFF}%s lobiyi kapattý.", RENK_PAINTBALL >>> 8, OyuncuIsim(playerid));
			ResetPlayerWeapons(o);
			CanDuzenle(o, EskiVeriler[o][eskiCan]);
			ZirhDuzenle(o, EskiVeriler[o][eskiZirh]);
		   	OyuncuBilgi[o][oPaintball] = -1;
		   	SendClientMessageEx(o, RENK_BEYAZ, "{%06x}[PAINTBALL-ISTATISTIK]: {FFFFFF}%s öldürme, %s ölüm.", RENK_PAINTBALL >>> 8, NumaraFormati(OyuncuBilgi[o][oPBOldurme], ""), NumaraFormati(OyuncuBilgi[o][oPBOlum], ""));
			OyuncuBilgi[o][oPBOldurme] = 0;
			OyuncuBilgi[o][oPBOlum] = 0;
		    SetPlayerVirtualWorld(o, 0);
		    SetPlayerInterior(o, 0);
		    OyuncuPosDegistir(o, 1726.88, -1636.61, 20.22);
		    SilahAyarla(o);
			IsimLabelGuncelle(o);
		}
		PaintballBilgi[id][pKullanimda] = false;
		PaintballBilgi[id][paintballSahip] = INVALID_PLAYER_ID;
		PaintballBilgi[id][paintballSure] = 0;
		PaintballBilgi[id][paintballArena] = 0;
		SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[PAINTBALL]: {FFFFFF}%s lobiyi kapattý.", RENK_PAINTBALL >>> 8, OyuncuIsim(playerid));
		SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[PAINTBALL-ISTATISTIK]: {FFFFFF}%s öldürme, %s ölüm.", RENK_PAINTBALL >>> 8, NumaraFormati(OyuncuBilgi[playerid][oPBOldurme], ""), NumaraFormati(OyuncuBilgi[playerid][oPBOlum], ""));
		OyuncuBilgi[playerid][oPBOldurme] = 0;
		OyuncuBilgi[playerid][oPBOlum] = 0;
		CanDuzenle(playerid, EskiVeriler[playerid][eskiCan]);
		ZirhDuzenle(playerid, EskiVeriler[playerid][eskiZirh]);
		OyuncuBilgi[playerid][oInterior] = 0;
		OyuncuBilgi[playerid][oVW] = 0;
		OyuncuPosDegistir(playerid, 1726.88, -1636.61, 20.22);
		SilahAyarla(playerid);
	}
	if(OyuncuBilgi[playerid][oPaintball] != -1 && Paintball_ID(playerid) == -1) {
	    ResetPlayerWeapons(playerid);
		foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oPaintball] == OyuncuBilgi[playerid][oPaintball]) SendClientMessageEx(i, RENK_BEYAZ, "{%06x}[PAINTBALL]: {FFFFFF}%s arenadan ayrýldý.", RENK_PAINTBALL >>> 8, OyuncuIsim(playerid));
		OyuncuBilgi[playerid][oInterior] = 0;
		OyuncuBilgi[playerid][oVW] = 0;
		OyuncuBilgi[playerid][oPBOldurme] = 0;
		OyuncuBilgi[playerid][oPBOlum] = 0;
		OyuncuPosDegistir(playerid, 1726.88, -1636.61, 20.22);
		SilahAyarla(playerid);
		CanDuzenle(playerid, EskiVeriler[playerid][eskiCan]);
		ZirhDuzenle(playerid, EskiVeriler[playerid][eskiZirh]);
	}
	if(OyuncuBilgi[playerid][oYatKontrol][0] == 1)
	{
		new Float:yatX, Float:yatY, Float:yatZ;
		OyuncuBilgi[playerid][oYatKontrol][0] = 0;
		TogglePlayerSpectating(playerid, false);
		GetObjectPos(YatBilgi[yatObject], yatX, yatY, yatZ);
		OyuncuPosDegistir(playerid, yatX, yatY, yatZ+3);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SilahAyarla(playerid);
	}
	foreach(new i : Petler) if(PetBilgi[i][petSahip] == OyuncuBilgi[playerid][oID] && PetBilgi[i][petDurum] == true)
	{
	    PetBilgi[i][petSaglik] = FCNPC_GetHealth(PetBilgi[i][NPCID]);
     	FCNPC_Destroy(PetBilgi[i][NPCID]);
      	PetBilgi[i][petTakip] = -1;
       	PetBilgi[i][NPCID] = -1;
        PetBilgi[i][petDurum] = false;
        if(IsValidDynamic3DTextLabel(PetBilgi[i][petText])) DestroyDynamic3DTextLabel(PetBilgi[i][petText]), PetBilgi[i][petText] = Text3D:INVALID_3DTEXT_ID;
        Pet_Kaydet(i);
	}
	if(OyuncuBilgi[playerid][oTemizlikCP] > 0 && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 574) {
		DisablePlayerCheckpoint(playerid);
	    OyuncuBilgi[playerid][oTemizlikCP] = 0;
	    new id = Arac_IDBul(GetPlayerVehicleID(playerid));
	    Arac_Sil(id);
	}
	if(OyuncuBilgi[playerid][oEtkinlikDurum] == true) {
	    OyuncuBilgi[playerid][oPos][0] = EskiVeriler[playerid][eskiPos][0], OyuncuBilgi[playerid][oPos][1] = EskiVeriler[playerid][eskiPos][1], OyuncuBilgi[playerid][oPos][2] = EskiVeriler[playerid][eskiPos][2];
		SetPlayerColor(playerid, EskiVeriler[playerid][eskiRenk]);
		OyuncuPosDegistir(playerid, EskiVeriler[playerid][eskiPos][0], EskiVeriler[playerid][eskiPos][1], EskiVeriler[playerid][eskiPos][2]);
		SetPlayerFacingAngle(playerid, EskiVeriler[playerid][eskiPos][3]);
		OyuncuBilgi[playerid][oVW] = EskiVeriler[playerid][eskiVW];
		OyuncuBilgi[playerid][oInterior] = EskiVeriler[playerid][eskiInt];
		SetPlayerVirtualWorld(playerid, EskiVeriler[playerid][eskiVW]);
		SetPlayerInterior(playerid, EskiVeriler[playerid][eskiInt]);
		SetCameraBehindPlayer(playerid);
		CanDuzenle(playerid, EskiVeriler[playerid][eskiCan]);
		ZirhDuzenle(playerid, EskiVeriler[playerid][eskiZirh]);
	}
	if(OyuncuBilgi[playerid][oAdminDurum] == true) {
	    OyuncuBilgi[playerid][oPos][0] = EskiVeriler[playerid][eskiPos][0], OyuncuBilgi[playerid][oPos][1] = EskiVeriler[playerid][eskiPos][1], OyuncuBilgi[playerid][oPos][2] = EskiVeriler[playerid][eskiPos][2];
		if(OyuncuBilgi[playerid][oIzlenen] != INVALID_PLAYER_ID) cmd_spec(playerid, "bitir");
		SetPlayerName(playerid, OyuncuBilgi[playerid][oIsim]);
		SetPlayerColor(playerid, EskiVeriler[playerid][eskiRenk]);
		OyuncuPosDegistir(playerid, EskiVeriler[playerid][eskiPos][0], EskiVeriler[playerid][eskiPos][1], EskiVeriler[playerid][eskiPos][2]);
		SetPlayerFacingAngle(playerid, EskiVeriler[playerid][eskiPos][3]);
		OyuncuBilgi[playerid][oVW] = EskiVeriler[playerid][eskiVW];
		OyuncuBilgi[playerid][oInterior] = EskiVeriler[playerid][eskiInt];
		SetPlayerVirtualWorld(playerid, EskiVeriler[playerid][eskiVW]);
		SetPlayerInterior(playerid, EskiVeriler[playerid][eskiInt]);
		SetCameraBehindPlayer(playerid);
		OyuncuBilgi[playerid][oPara] = EskiVeriler[playerid][eskiPara];
		CanDuzenle(playerid, EskiVeriler[playerid][eskiCan]);
		ZirhDuzenle(playerid, EskiVeriler[playerid][eskiZirh]);
		SilahKaydet(playerid);
	}
	foreach(new i : Player) {
		if(OyuncuBilgi[i][oBirlikDavetEden] == playerid) OyuncuBilgi[i][oBirlikDavetEden] = -1;
		if(ElKoy[i] == playerid) ElKoy[i] = -1;
	}
	if(OyuncuBilgi[playerid][oKampAtesi] == true) {
		DestroyDynamicObject(OyuncuBilgi[playerid][oKampAtesiObje][0]);
		DestroyDynamicObject(OyuncuBilgi[playerid][oKampAtesiObje][1]);
	}
	if(OyuncuBilgi[playerid][oCevaplandi] == true) {
		new oyuncuid = OyuncuBilgi[playerid][oArama];
		OyuncuBilgi[playerid][oAramaSure] = -1;
		OyuncuBilgi[oyuncuid][oAramaSure] = -1;
		OyuncuBilgi[playerid][oArama] = -1;
		OyuncuBilgi[oyuncuid][oArama] = -1;
		OyuncuBilgi[playerid][oCevaplandi] = false;
		OyuncuBilgi[oyuncuid][oCevaplandi] = false;
		SunucuMesaji(oyuncuid, "Hat kesildi.");
	}
	for(new i = 0; i != MAKSIMUM_YAYIN; i++) if(YayinBilgi[i][yayinKullanimda] == true && YayinBilgi[i][yayinYapan] == playerid)
	{
	    foreach(new o : Player) if(OyuncuBilgi[o][oGiris] == true && OyuncuBilgi[o][oDinlenenYayin] == YayinBilgi[i][yayinBirlik] && YayinBilgi[i][yayinYapan] != o) SendClientMessageEx(o, RENK_BEYAZ, "{%06x}[YAYIN] {FFFFFF}Yayýn kesildi.", RENK_YAYIN >>> 8);
	    
		YayinBilgi[i][yayinKullanimda] = false;
	    YayinBilgi[i][yayinYapan] = INVALID_PLAYER_ID;
	    YayinBilgi[i][yayinDavetli] = INVALID_PLAYER_ID;
		YayinBilgi[i][yayinBirlik] = -1;
		YayinBilgi[i][yayinMuzik][0] = 0;
		YayinBilgi[i][yayinCekilis] = 0;
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) oyundan çýktýðý için yayýn bitirdi. (Birlik: %s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd]);
		Gunluk_LogKaydet(log_icerik);
	}
	if(OyuncuBilgi[playerid][oDestek] == true)  cmd_destek(playerid, "");
	if(OyuncuBilgi[playerid][oIncelenenRaporSahibi] != INVALID_PLAYER_ID) {
		new oyuncuid = OyuncuBilgi[playerid][oIncelenenRaporSahibi];
		UyariMesaji(oyuncuid, "Raporunuz ilgilenen yetkili tarafý oyundan çýktýðý için kapatýldý.");
		OyuncuBilgi[playerid][oIncelenenRaporSahibi] = INVALID_PLAYER_ID;
		OyuncuBilgi[oyuncuid][oIlgilenenAdmin] = INVALID_PLAYER_ID;
	}
	if(OyuncuBilgi[playerid][oIlgilenenAdmin] != INVALID_PLAYER_ID) {
		new oyuncuid = OyuncuBilgi[playerid][oIlgilenenAdmin];
		UyariMesaji(oyuncuid, "Ýlgilendiðiniz raporun sahibi oyundan çýktýðý için rapor kapatýldý.");
		OyuncuBilgi[playerid][oIlgilenenAdmin] = INVALID_PLAYER_ID;
		OyuncuBilgi[oyuncuid][oIncelenenRaporSahibi] = INVALID_PLAYER_ID;
	}
	if(GetPVarInt(playerid, "aracsatan") > -1) {
		SetPVarInt(playerid, "aracsatan", -1);
		SetPVarInt(playerid, "satilanarac", -1);
		SetPVarInt(playerid, "aracfiyat", -1);
	}
	if(OyuncuBilgi[playerid][oSuruklenen] != INVALID_PLAYER_ID) cmd_surukle(playerid, "");
	if(OyuncuBilgi[playerid][oSurukleniyor] != INVALID_PLAYER_ID && IsPlayerConnected(OyuncuBilgi[playerid][oSurukleniyor])) {
	    new hedefid = OyuncuBilgi[playerid][oSurukleniyor];
		OyuncuBilgi[hedefid][oSuruklenen] = INVALID_PLAYER_ID;
		UyariMesaji(hedefid, "Sürüklediðiniz oyuncu oyundan çýktý.");
	}
	for(new i = 0; i < MAKSIMUM_MODIFIYENOKTASI; i++) if(ModifiyeNoktasi[i][modifiyeKullanimda] == true && ModifiyeNoktasi[i][modifiyeKullanan] == playerid) ModifiyeNoktasi[i][modifiyeKullanan] = INVALID_PLAYER_ID;
    foreach(new i : Player) {
		if(GetPVarInt(i, "ustarayan") == playerid) SetPVarInt(i, "ustarayan", INVALID_PLAYER_ID);
	    if(GetPVarInt(i, "gozbaglayanid") == playerid) SetPVarInt(i, "gozbaglayanid", INVALID_PLAYER_ID);
		if(GetPVarInt(i, "ipbaglama_id") == playerid) SetPVarInt(i, "ipbaglama_id", INVALID_PLAYER_ID);
	    if(GetPVarInt(i, "anahtarsahip") == playerid) SetPVarInt(i, "anahtarsahip", INVALID_PLAYER_ID);
		if(GetPVarInt(i, "evanahtaroneren") == playerid) SetPVarInt(i, "evanahtaroneren", INVALID_PLAYER_ID);
		if(GetPVarInt(i, "AnahtarOneren") == playerid) SetPVarInt(i, "AnahtarOneren", INVALID_PLAYER_ID);
		if(GetPVarInt(i, "UyusturucuSat") == playerid) SetPVarInt(i, "UyusturucuSat", INVALID_PLAYER_ID);
		if(OyuncuBilgi[i][oMarker] == playerid) OyuncuBilgi[i][oMarker] = -1, DisablePlayerCheckpoint(i);
		if(OyuncuBilgi[i][oIlkYardimYapilan] == playerid) ClearAnimations(i), HataMesaji(i, "Ýlk yardýmý yaptýðýn kiþi oyundan çýktý."), OyuncuBilgi[i][oIlkYardimYapilan] = INVALID_PLAYER_ID, OyuncuBilgi[i][oIlkYardimSure] = 0;
		if(OyuncuBilgi[playerid][oIlkYardimYapilan] == i) HataMesaji(i, "Sana ilk yardým yapan kiþi oyundan çýktý.");
		if(MaymuncukVeri[i][mSaniye] > 0 && MaymuncukVeri[i][mHedef] == playerid) SunucuMesaji(i, "Maymuncuk kullandýðýn kiþi oyundan çýktýðý için iþlem iptal oldu, maymuncuðun kýrýldý."), MaymuncukVeri[i][mSaniye] = 0, OyuncuBilgi[i][oMaymuncuk]--;
		if(OyuncuBilgi[i][oGasp] == playerid) HataMesaji(i, "Karþýndaki oyuncu oyundan çýktý, gasp iþlemin iptal edildi."), DialogGoster(i, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " "), OyuncuBilgi[i][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID;
		if(OyuncuBilgi[i][oUberIsaret] == playerid) OyuncuBilgi[i][oUberIsaret] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oUberTalep] = INVALID_PLAYER_ID, SunucuMesaji(i, "Müþteri oyundan çýktý, talep sonlandýrýldý.");
		if(OyuncuBilgi[i][oUberTalep] == playerid) OyuncuBilgi[playerid][oUberIsaret] = INVALID_PLAYER_ID, OyuncuBilgi[i][oUberTalep] = INVALID_PLAYER_ID, SunucuMesaji(i, "Sürücü oyundan çýktý, talebiniz iptal edildi.");
		/*if(OyuncuBilgi[i][oMateryalSat][2] == playerid) {
			HataMesaji(i, "Materyal satýþ iþleminde olduðunuz oyuncu oyundan çýktý."), OyuncuBilgi[i][oMateryalSat][2] = INVALID_PLAYER_ID;
			if(OyuncuBilgi[i][oDialog] == DIALOG_MATERYAL_ONAYLA) DialogGoster(i, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
		}*/
	}
	if(GetPVarInt(playerid, "silah_satiyor") != INVALID_PLAYER_ID) {
		SetPVarInt(GetPVarInt(playerid, "silah_satiyor"), "silah_satis", INVALID_PLAYER_ID);
		SetPVarInt(GetPVarInt(playerid, "silah_satiyor"), "silah_satiliyor", 0);
		SetPVarInt(GetPVarInt(playerid, "silah_satiyor"), "silah_fiyat", 0);
		SunucuMesaji(GetPVarInt(playerid, "silah_satiyor"), "Size silah satmak isteyen oyuncu oyundan çýktý, iþlem iptal edildi.");
		SetPVarInt(playerid, "silah_satiyor", INVALID_PLAYER_ID);
	}
	if(GetPVarInt(playerid, "silah_satis") != INVALID_PLAYER_ID) {
		SunucuMesaji(GetPVarInt(playerid, "silah_satis"), "Silah satmak istediðiniz oyuncu oyundan çýktý, iþlem iptal edildi.");
		SetPVarInt(GetPVarInt(playerid, "silah_satis"), "silah_satiyor", INVALID_PLAYER_ID);
		SetPVarInt(playerid, "silah_satis", INVALID_PLAYER_ID);
		SetPVarInt(playerid, "silah_satiliyor", 0);
		SetPVarInt(playerid, "silah_fiyat", 0);
	}
	if(Yaris_ID(playerid) != -1) {
		new id = Yaris_ID(playerid);
		YarisBilgi[id][yarisKullanimda] = false;
		YarisBilgi[id][yarisTur] = 1;
		YarisBilgi[id][yarisSahip] = INVALID_PLAYER_ID;
		YarisBilgi[id][yarisMaksCP] = 0;
		YarisBilgi[id][yarisBasladi] = false;
		YarisBilgi[id][yarisSiralama] = 0;
		for (new s = 0; s < 60; s++) YarisBilgi[id][yarisPos][s] = 0.0;
		foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oYaris] == id) OyuncuBilgi[i][oYaris] = -1, DisablePlayerCheckpoint(i), SendClientMessageEx(i, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþ sahibi oyundan çýktýðý için bitirildi.", RENK_YARIS >>> 8);
	}
	if(OyuncuBilgi[playerid][oTedaviSure] > 0) SetPlayerVirtualWorld(playerid, 7007);
    if(BoomboxBilgi[playerid][boomboxKullanimda]) Boombox_Kaldir(playerid);
    if(OyuncuBilgi[playerid][oBagaj] > -1) SetTrunkStatus(AracBilgi[OyuncuBilgi[playerid][oBagaj]][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
    if(OyuncuBilgi[playerid][oRaf] > -1) OyuncuBilgi[playerid][oRaf] = -1;
	OyuncuBilgi[playerid][oAktif] = 0;
	OyuncuKaydet(playerid);
    OyuncuBilgi[playerid][oBakim] = -1;
	if(InsideShamal[playerid] != INVALID_VEHICLE_ID) {
		if(InsideShamal[playerid] == INVALID_VEHICLE_ID || GetVehicleModel(InsideShamal[playerid]) != 519)
		{
			Silahver(playerid, 46, 1);
			OyuncuBilgi[playerid][oPos][0] = 0.000000;
			OyuncuBilgi[playerid][oPos][1] = 0.000000;
			OyuncuBilgi[playerid][oPos][2] = 420.000000;
		}
		else
		{
			new Float:XB, Float:YB, Float:ZB;
			GetVehiclePos(InsideShamal[playerid], XB, YB, ZB);
			OyuncuBilgi[playerid][oPos][0] = XB;
			OyuncuBilgi[playerid][oPos][1] = YB;
			OyuncuBilgi[playerid][oPos][2] = ZB;
			if(ZB > 50.0) Silahver(playerid, 46, 1);
		}
		OyuncuBilgi[playerid][oVW] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		OyuncuBilgi[playerid][oInterior] = 0;
		SetPlayerInterior(playerid, 0);
		InsideShamal[playerid] = INVALID_VEHICLE_ID;
	}
    DeletePVar(playerid, "mdcsucekle");
	KillTimer(OyuncuBilgi[playerid][OyuncuTimer]);
	KillTimer(OyuncuBilgi[playerid][oSaniyeTimer]);
	KillTimer(OyuncuBilgi[playerid][oUyusturucuTimer]);
	KillTimer(OyuncuBilgi[playerid][oGirisTimer]), OyuncuBilgi[playerid][oGirisTimer] = -1;
	KillTimer(OyuncuBilgi[playerid][oAFKTimer]);
	KillTimer(OyuncuBilgi[playerid][oYaraliTimer]);
	KillTimer(OyuncuBilgi[playerid][oKucukTimer]);
	if(OyuncuBilgi[playerid][oAdminDurum] == false || OyuncuBilgi[playerid][oAdminDurum] == true && OyuncuBilgi[playerid][oIzlenen] == INVALID_PLAYER_ID) {
	 	new bilgi[128];
	 	switch(reason)
		{
		    case 0: format(bilgi, sizeof(bilgi), "%s oyundan düþtü. (baðlantýsý koptu)", OyuncuIsim(playerid));
		    case 1: format(bilgi, sizeof(bilgi), "%s oyundan çýktý. (kendi isteðiyle)", OyuncuIsim(playerid));
		    case 2: format(bilgi, sizeof(bilgi), "%s oyundan çýktý. (atýldý/yasaklandý)", OyuncuIsim(playerid));
		}
		SendNearbyMessage(playerid, OOC_MESAFE, RENK_GRI, bilgi);
	}
	new oyuncu_isim[MAX_PLAYER_NAME + 1], log_icerik[144];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%s) oyundan çýkýþ yaptý.", Tarih(), oyuncu_isim, OyuncuIP(playerid));
	Gunluk_LogKaydet(log_icerik);
	if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
	if(OyuncuBilgi[playerid][oPaintball] != -1) OyuncuBilgi[playerid][oPaintball] = -1;
	if(OyuncuBilgi[playerid][oAdminDurum] == true) OyuncuBilgi[playerid][oAdminDurum] = false;
	if(OyuncuBilgi[playerid][oEtkinlikDurum] == true) OyuncuBilgi[playerid][oEtkinlikDurum] = false;
	if(OyuncuBilgi[playerid][oHesap] > 0) {
		new hesap[MAX_PLAYER_NAME];
		format(hesap, sizeof(hesap), "%03d", OyuncuBilgi[playerid][oHesap]);
		if(!!strcmp(hesap, OyuncuIsim(playerid))) SetPlayerName(playerid, hesap);
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
    if(OyuncuBilgi[playerid][oGiris] == false) return 0;
	if(OyuncuBilgi[playerid][oPaintball] != -1) Paintball_Arena(playerid);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
	//SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);
	switch(OyuncuBilgi[playerid][oGeciciKiyafet]) {
		case 0: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oKiyafet]);
		default: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oGeciciKiyafet]);
	}
	if(OyuncuBilgi[playerid][oGiris] == true && OyuncuBilgi[playerid][oIlkGiris] == true) {
		KillTimer(OyuncuBilgi[playerid][OyuncuTimer]);
		KillTimer(OyuncuBilgi[playerid][oSaniyeTimer]);
		KillTimer(OyuncuBilgi[playerid][oKucukTimer]);
		OyuncuBilgi[playerid][OyuncuTimer] = SetTimerEx("DakikaTimer", 60000, true, "d", playerid);
		OyuncuBilgi[playerid][oSaniyeTimer] = SetTimerEx("OyuncuSaniyeTimer", 1000, true, "d", playerid);
		OyuncuBilgi[playerid][oKucukTimer] = SetTimerEx("OyuncuKucukKontrol", 400, true, "d", playerid);
		AnimleriYukle(playerid);
		SilahAyarla(playerid);
		OyuncuBilgi[playerid][oIlkGiris] = false;
		OyuncuBilgi[playerid][oEkip] = -1;

		new pIsim[32]; GetPlayerName(playerid, pIsim, sizeof(pIsim));
		PlayerTextDrawSetString(playerid, Hud_SagAlt[playerid][6], pIsim);
		for(new i = 0; i < sizeof(Hud_SagAlt[]); i++)
		{
			PlayerTextDrawShow(playerid, Hud_SagAlt[playerid][i]);
		}
	}
	if(OyuncuBilgi[playerid][oYaraliSure] > 0 && OyuncuBilgi[playerid][oGiris] == true) {
		CanDuzenle(playerid, 100);
		ZirhDuzenle(playerid, 0);
        OyuncuPosDegistir(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
        SetPlayerFacingAngle(playerid, OyuncuBilgi[playerid][oPos][3]);
        SetPlayerInterior(playerid, OyuncuBilgi[playerid][oInterior]);
        ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 0);
        SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, false);
		SilahAyarla(playerid);
		SetPlayerArmedWeapon(playerid, 0);
		SetPlayerCameraPos(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2] + 2.5);
		SetPlayerCameraLookAt(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
	}
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) CanDuzenle(playerid, 100), HapiseAt(playerid);
	//SilahAyarla(playerid);
	return 1;
}

public BayginlikBitir(playerid)
{
	IsimLabelGuncelle(playerid);
    ClearAnimations(playerid);
    TogglePlayerControllable(playerid, true);
    DondurulmaTimer[playerid] = SetTimerEx("DondurulmaIptal", 50, false, "i", playerid);
    SetCameraBehindPlayer(playerid);
    SilahAyarla(playerid);
	for(new i = 0; i != MAKSIMUM_HASAR; i ++) {
		HasarBilgi[playerid][i][hasarVarmi] = false;
		HasarBilgi[playerid][i][hasarBolge] = 0;
		HasarBilgi[playerid][i][hasarVeren] = INVALID_PLAYER_ID;
        HasarBilgi[playerid][i][hasarDeger] = 0;
        HasarBilgi[playerid][i][hasarSilah] = 0;
	}
	return true;
}

public OnPlayerPrepareDeath(playerid, animlib[32], animname[32], &anim_lock, &respawn_time)
{
	respawn_time = 100;
	return 1;
}

public OnPlayerDamageDone(playerid, Float:amount, issuerid, weapon, bodypart)
{
	OyuncuBilgi[playerid][oSonVurus] = issuerid;
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(PetKontrol[playerid] != -1)
	{
	    new Float:pos[4], Float:can;
	    GetPlayerHealth(playerid, can);
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    GetPlayerFacingAngle(playerid, pos[3]);
	    FCNPC_SetPosition(PetBilgi[PetKontrol[playerid]][NPCID], pos[0], pos[1], pos[2]);
        FCNPC_SetAngle(PetBilgi[PetKontrol[playerid]][NPCID], pos[3]);
	    FCNPC_SetVirtualWorld(PetBilgi[PetKontrol[playerid]][NPCID], GetPlayerVirtualWorld(playerid));
	    FCNPC_SetInterior(PetBilgi[PetKontrol[playerid]][NPCID], GetPlayerInterior(playerid));
	    FCNPC_SetHealth(PetBilgi[PetKontrol[playerid]][NPCID], can);
	    FCNPC_SetInvulnerable(PetBilgi[PetKontrol[playerid]][NPCID], true);
	    OyuncuBilgi[playerid][oPos][0] = EskiVeriler[playerid][eskiPos][0], OyuncuBilgi[playerid][oPos][1] = EskiVeriler[playerid][eskiPos][1], OyuncuBilgi[playerid][oPos][2] = EskiVeriler[playerid][eskiPos][2];
		OyuncuPosDegistir(playerid, EskiVeriler[playerid][eskiPos][0], EskiVeriler[playerid][eskiPos][1], EskiVeriler[playerid][eskiPos][2]);
		SetPlayerFacingAngle(playerid, EskiVeriler[playerid][eskiPos][3]);
		OyuncuBilgi[playerid][oVW] = EskiVeriler[playerid][eskiVW];
		OyuncuBilgi[playerid][oInterior] = EskiVeriler[playerid][eskiInt];
		SetPlayerVirtualWorld(playerid, EskiVeriler[playerid][eskiVW]);
		SetPlayerInterior(playerid, EskiVeriler[playerid][eskiInt]);
		DondurulmaEtkisi(playerid);
		SetCameraBehindPlayer(playerid);
		CanDuzenle(playerid, EskiVeriler[playerid][eskiCan]);
		ZirhDuzenle(playerid, EskiVeriler[playerid][eskiZirh]);
		SilahAyarla(playerid);
		switch(OyuncuBilgi[playerid][oGeciciKiyafet]) {
			case 0: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oKiyafet]);
			default: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oGeciciKiyafet]);
		}

        PetKontrol[playerid] = -1;
	    PetBilgi[PetKontrol[playerid]][petYarali] = 1;
	    FCNPC_Destroy(PetBilgi[PetKontrol[playerid]][NPCID]);
      	PetBilgi[PetKontrol[playerid]][petTakip] = -1;
       	PetBilgi[PetKontrol[playerid]][NPCID] = -1;
        PetBilgi[PetKontrol[playerid]][petDurum] = false;
        if(IsValidDynamic3DTextLabel(PetBilgi[PetKontrol[playerid]][petText])) DestroyDynamic3DTextLabel(PetBilgi[PetKontrol[playerid]][petText]), PetBilgi[PetKontrol[playerid]][petText] = Text3D:INVALID_3DTEXT_ID;
        return 1;
	}
	if(OyuncuBilgi[playerid][oPaintball] != -1) {
	    OyuncuBilgi[playerid][oPBOlum]++;
	    if(IsPlayerConnected(killerid)) {
			OyuncuBilgi[killerid][oPBOldurme]++;
	    	foreach(new o : Player) if(OyuncuBilgi[o][oGiris] == true && OyuncuBilgi[o][oPaintball] == OyuncuBilgi[playerid][oPaintball]) SendClientMessageEx(o, RENK_BEYAZ, "{%06x}[PAINTBALL]: {FFFFFF}%s, %s adlý kiþiyi %s ile öldürdü.", RENK_PAINTBALL >>> 8, OyuncuIsim(killerid), OyuncuIsim(playerid), SilahIsim(reason));
		}
		else foreach(new o : Player) if(OyuncuBilgi[o][oGiris] == true && OyuncuBilgi[o][oPaintball] == OyuncuBilgi[playerid][oPaintball]) SendClientMessageEx(o, RENK_BEYAZ, "{%06x}[PAINTBALL]: {FFFFFF}%s nedensizce öldü, garip bir þeyler mi var?", RENK_PAINTBALL >>> 8, OyuncuIsim(playerid));
		new kiyafet;
		switch(OyuncuBilgi[playerid][oGeciciKiyafet]) {
			case 0: kiyafet = OyuncuBilgi[playerid][oKiyafet];
			default: kiyafet = OyuncuBilgi[playerid][oGeciciKiyafet];
		}
		SetSpawnInfo(playerid, 0, kiyafet, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
 		return 1;
	}
	if(OyuncuBilgi[playerid][oEtkinlikDurum] == true) {
	    OyuncuBilgi[playerid][oEtkinlikDurum] = false;
	    SunucuMesaji(playerid, "Öldüðün için etkinlikten çýkarýldýn.");
	    OyuncuBilgi[playerid][oPos][0] = EskiVeriler[playerid][eskiPos][0], OyuncuBilgi[playerid][oPos][1] = EskiVeriler[playerid][eskiPos][1], OyuncuBilgi[playerid][oPos][2] = EskiVeriler[playerid][eskiPos][2];
		SetPlayerColor(playerid, EskiVeriler[playerid][eskiRenk]);
		OyuncuPosDegistir(playerid, EskiVeriler[playerid][eskiPos][0], EskiVeriler[playerid][eskiPos][1], EskiVeriler[playerid][eskiPos][2]);
		SetPlayerFacingAngle(playerid, EskiVeriler[playerid][eskiPos][3]);
		OyuncuBilgi[playerid][oVW] = EskiVeriler[playerid][eskiVW];
		OyuncuBilgi[playerid][oInterior] = EskiVeriler[playerid][eskiInt];
		SetPlayerVirtualWorld(playerid, EskiVeriler[playerid][eskiVW]);
		SetPlayerInterior(playerid, EskiVeriler[playerid][eskiInt]);
  		DondurulmaEtkisi(playerid);
		SetCameraBehindPlayer(playerid);
		CanDuzenle(playerid, EskiVeriler[playerid][eskiCan]);
		ZirhDuzenle(playerid, EskiVeriler[playerid][eskiZirh]);
		SilahAyarla(playerid);
		new kiyafet;
		switch(OyuncuBilgi[playerid][oGeciciKiyafet]) {
			case 0: kiyafet = OyuncuBilgi[playerid][oKiyafet];
			default: kiyafet = OyuncuBilgi[playerid][oGeciciKiyafet];
		}
		SetSpawnInfo(playerid, 0, kiyafet, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2], OyuncuBilgi[playerid][oPos][3], 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
		SetTimerEx("Kiyafet_Duzelt", 100, false, "i", playerid);
		return 1;
	}
	if(gettime() - OlumSuresi[playerid] < 3)
	{
		OlumSayisi[playerid]++;
		if(OlumSayisi[playerid] > 4 && !IsPlayerConnected(killerid)) HileKickle(playerid, 2);
	}
	else OlumSayisi[playerid] = 1;
	OlumSuresi[playerid] = gettime();
	if(OyuncuBilgi[playerid][oGiris] == false || OyuncuBilgi[playerid][oIlkGiris] == true) return 0;
	if(IsPlayerConnected(killerid)) {
		new oyuncu_isim[MAX_PLAYER_NAME + 1], log_icerik[144], olduren_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		GetPlayerName(killerid, olduren_isim, sizeof(olduren_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) tarafýndan öldürüldü. (sebep: %d)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], olduren_isim, OyuncuBilgi[killerid][oID], reason);
		Gunluk_LogKaydet(log_icerik);
	}
	if(OyuncuBilgi[playerid][oTaser] == true)
	{
	    OyuncuBilgi[playerid][oTaser] = false;
		SilahAyarla(playerid);
		SetPlayerArmedWeapon(playerid, 0);
	}
	if(OyuncuBilgi[playerid][oBeanbag] == true) {
		OyuncuBilgi[playerid][oBeanbag] = false;
		SilahAyarla(playerid);
		SetPlayerArmedWeapon(playerid, 0);
	}
    TextDrawHideForPlayer(playerid, AnimBozText);
    if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
	GetPlayerPos(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
	GetPlayerFacingAngle(playerid, OyuncuBilgi[playerid][oPos][3]);
	OyuncuBilgi[playerid][oInterior] = GetPlayerInterior(playerid);
	OyuncuBilgi[playerid][oVW] = GetPlayerVirtualWorld(playerid);
	if(OyuncuBilgi[playerid][oAdminDurum] == true) CanDuzenle(playerid, 100);
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) HapiseAt(playerid);
	else if(OyuncuBilgi[playerid][oHapisSure][1] > 0) ICHapiseAt(playerid, OyuncuBilgi[playerid][oHapisID]);
	else if(OyuncuBilgi[playerid][oYaraliSure] == 0 && OyuncuBilgi[playerid][oAdminDurum] == false && OyuncuBilgi[playerid][oDonduruldu] == 0 && OyuncuBilgi[playerid][oHapisSure][1] == 0 && OyuncuBilgi[playerid][oHapisSure][0] == 0) {
		if(OyuncuBilgi[playerid][oSuruklenen] != INVALID_PLAYER_ID) {
		    new hedefid = OyuncuBilgi[playerid][oSuruklenen];
			OyuncuBilgi[playerid][oSuruklenen] = INVALID_PLAYER_ID;
			if(IsPlayerConnected(hedefid)) {
				OyuncuBilgi[hedefid][oSurukleniyor] = INVALID_PLAYER_ID;
				new emote[64];
				format(emote, sizeof(emote), "%s isimli kiþiyi sürüklemeyi býrakýr.", OyuncuIsim(hedefid));
				cmd_me(playerid, emote);
				TogglePlayerControllable(hedefid, true);
			}
		}
		OyuncuBilgi[playerid][oYaraliSure] = YARALI_SURE;
		if(OyuncuBilgi[playerid][oBaglamaSure] > 1) return HataMesaji(playerid, "Yaralandýðýn için iþlem iptal edildi."), OyuncuBilgi[playerid][oBaglamaSure] = 0, OyuncuBilgi[playerid][oAracBagla] = INVALID_VEHICLE_ID;
		OyuncuBilgi[playerid][oYarali] = 1;
		SilahKaydet(playerid);
		SunucuMesaji(playerid, "%d saniye boyunca yaralandýn, tedavi olana kadar bazý eylemlerin kýsýtlanacak.", YARALI_SURE);
		IsimLabelGuncelle(playerid);
		if(OyuncuBilgi[playerid][oIlkYardimYapilan] != INVALID_PLAYER_ID) ClearAnimations(playerid), HataMesaji(playerid, "Yaralandýðýn için ilk yardým iptal edildi."), OyuncuBilgi[playerid][oIlkYardimYapilan] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oIlkYardimSure] = 0;
        if(MaymuncukVeri[playerid][mSaniye] > 0) return HataMesaji(playerid, "Etkisiz hale geldiðin için maymuncuk iþlemin iptal edildi."), MaymuncukVeri[playerid][mSaniye] = 0, OyuncuBilgi[playerid][oMaymuncuk]--;
	}
	new kiyafet;
	switch(OyuncuBilgi[playerid][oGeciciKiyafet]) {
		case 0: kiyafet = OyuncuBilgi[playerid][oKiyafet];
		default: kiyafet = OyuncuBilgi[playerid][oGeciciKiyafet];
	}
	SetSpawnInfo(playerid, 0, kiyafet, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2], OyuncuBilgi[playerid][oPos][3], 0, 0, 0, 0, 0, 0);
	SpawnPlayer(playerid);
	SetTimerEx("Kiyafet_Duzelt", 100, false, "i", playerid);
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(gettime() != OyuncuBilgi[playerid][oSonAtis]) OyuncuBilgi[playerid][oAtisSayisi] = 0;
	OyuncuBilgi[playerid][oSonAtis] = gettime();
    if(OyuncuBilgi[playerid][oTaser] && weaponid == 23 || OyuncuBilgi[playerid][oBeanbag] && weaponid == 25) SarjorYenilemeAnimasyon(playerid, weaponid);
    if(OyuncuBilgi[playerid][oSilah][SilahSlotBul[weaponid]] != weaponid || IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && weaponid != WEAPON_VEHICLE && weaponid != 0) return SilahHilesiIslem(playerid, weaponid);
    if(OyuncuBilgi[playerid][oSilah][SilahSlotBul[weaponid]] == weaponid && OyuncuBilgi[playerid][oMermi][SilahSlotBul[weaponid]] > 0) OyuncuBilgi[playerid][oMermi][SilahSlotBul[weaponid]]--;
    if(OyuncuBilgi[playerid][oAltTab] > 10 && IsPlayerPaused(playerid)) {
		new oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		for(new i = 0, len = strlen(oyuncu_isim); i < len; i ++) if(oyuncu_isim[i] == '_') oyuncu_isim[i] = ' ';

		return HileKickle(playerid, 17);
 }
    if(OyuncuBilgi[playerid][oYaraliSure] > 0) return 0, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s(%d), yaralýyken sýkmaya çalýþtýðý için sunucudan atýldý. (CODE-1)", OyuncuIsim(playerid), playerid), KickEx(playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	   YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s(%d), isimli oyuncu þöförken ateþ etmeye çalýþtýðý için sunucudan atýldý. (CODE-1)", OyuncuIsim(playerid), playerid);
	}
	if(MaymuncukVeri[playerid][mSaniye] > 0) SunucuMesaji(playerid, "Maymuncuk ateþ ettiðin için kýrýldý."), MaymuncukVeri[playerid][mSaniye] = 0, OyuncuBilgi[playerid][oMaymuncuk]--;
    if(fX > 2140000000 || fY > 2140000000 || fZ > 2140000000) return HileKickle(playerid, 3);
    /*
	if((22 <= weaponid <= 38) && GetPlayerWeaponState(playerid) == WEAPONSTATE_LAST_BULLET && (GetPlayerAmmo(playerid) == 1 || GetPlayerAmmo(playerid) == 0) && OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) // (GetPlayerAmmo(playerid) == 1 || GetPlayerAmmo(playerid) == 0)
 	{
		SilahSil(playerid, weaponid);
	 	new sorgu[256];
		format(sorgu, sizeof(sorgu), "INSERT INTO `silahenvanter` (`karakterID`, `silahID`) VALUES ('%d', '%d')", OyuncuBilgi[playerid][oID], weaponid);
		mysql_query(mysqlB, sorgu);
		SetPlayerArmedWeapon(playerid, 0);
        ClearAnimations(playerid);
		SunucuMesaji(playerid, "%s model silahýnýn mermisi bitti, silah envanterine eklendi. (/senvanter)", SilahIsim(weaponid));
		SilahKaydet(playerid);
		return 1;
	}
	*/
	if(weaponid != 38 && weaponid != 29 && GetPlayerPing(playerid) < 300)
	{
		new zaman = gettime();
		if(OyuncuBilgi[playerid][oSonAtis] == zaman) {
            OyuncuBilgi[playerid][oAtisSayisi]++;
            switch(weaponid) {
				case WEAPON_DEAGLE, WEAPON_SHOTGUN, WEAPON_SNIPER: if(OyuncuBilgi[playerid][oAtisSayisi] >= 3) return HileKickle(playerid, 24);
				case WEAPON_SHOTGSPA: if(OyuncuBilgi[playerid][oAtisSayisi] >= 6) return HileKickle(playerid, 24);
				default: if(OyuncuBilgi[playerid][oAtisSayisi] >= 14) return HileKickle(playerid, 24);
            }
		}
		SetPVarInt(playerid, "yeniatis", zaman);
		if(GetPVarInt(playerid, "eskiatis") == GetPVarInt(playerid, "yeniatis"))
		{
			SetPVarInt(playerid, "tespit", GetPVarInt(playerid, "tespit") + 1);
			if(GetPVarInt(playerid,"tespit") >= 9) HileKickle(playerid, 4);
		}
		else SetPVarInt(playerid, "tespit", 0);
		SetPVarInt(playerid, "eskiatis", zaman);
	}
	if(CCTV_Yakin(playerid) != -1 && (22 <= weaponid <= 38) && GetPlayerWeapon(playerid) != 23 && gettime() >= CCTVVeri[CCTV_Yakin(playerid)][cctvDelay]) {
	    new cctv = CCTV_Yakin(playerid);
	    CCTVVeri[cctv][cctvDelay] = gettime() + 150;
		foreach(new i : Player) if(OyuncuBirlikTuru(i) == BIRLIK_POLIS && OyuncuBilgi[i][oIsbasi] == true) SendClientMessageEx(i, RENK_BIRLIK, "[CCTV] {FFFFFF}%s bölgesinde silah sesleri duyuldu.", CCTVVeri[cctv][cctvIsim]);
	}
	return 1;
}

public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart)
{
    if(IsPlayerConnected(issuerid) && GetPVarInt(issuerid, "Kick") == 1) return 0;
    if(IsPlayerConnected(playerid) && OyuncuBilgi[playerid][oAltTab] > 10) return 0;
	if(OyuncuBilgi[playerid][oAdminDurum] == true || OyuncuBilgi[playerid][oYaraliSure] > 0 || OyuncuBilgi[playerid][oKontrol] == false) return 0;
    if(OyuncuBilgi[playerid][oEtkinlikDurum] == true && EtkinlikBilgi[etkDurum] == false) {
        if(issuerid != INVALID_PLAYER_ID && IsPlayerConnected(issuerid)) UyariMesaji(issuerid, "Etkinlik baþlamadan diðer etkinlik üyelerine hasar veremezsin.");
        return 0;
    }
    	new
        Float:fOriginX, Float:fOriginY, Float:fOriginZ,
        Float:fHitPosX, Float:fHitPosY, Float:fHitPosZ;

    GetPlayerLastShotVectors(issuerid, fOriginX, fOriginY, fOriginZ, fHitPosX, fHitPosY, fHitPosZ);
    new Float:camX, Float:camY, Float:camZ;
    GetPlayerCameraPos(issuerid, camX, camY, camZ);
    new Float:cameradistance = GetPlayerDistanceFromPoint(playerid, camX, camY, camZ);
    new Float:playerdistance = GetPlayerDistanceFromPoint(issuerid, fHitPosX, fHitPosY, fHitPosZ);
    new Float:hitdistance = GetPlayerDistanceFromPoint(playerid, fHitPosX, fHitPosY, fHitPosZ);
	if(!IsPlayerPaused(playerid))

    if(IsBulletWeapon(weapon) && GetPlayerCameraMode(issuerid) == 53 || GetPlayerCameraMode(issuerid) == 55)
    {
    	if (cameradistance < 1 && hitdistance == 0)
		{
            YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s (%d), WallShot kullanmaya çalýþýyor olabilir.", OyuncuIsim(issuerid), issuerid);
            return 0;
		}
		else if (hitdistance == 0 && cameradistance > 1)
		{
            YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s (%d), Silent Aim kullanmaya çalýþýyor. (CODE-1) (bullet distance: %0.2f %0.2f %0.2f)", OyuncuIsim(issuerid), issuerid, camX, camY, camZ);
            return 0;
		}
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, camX, camY, camZ) && !IsPlayerInRangeOfPoint(issuerid, 1.0, fOriginX, fOriginY, fOriginZ) && !IsPlayerInAnyVehicle(issuerid) && !IsPlayerInAnyVehicle(playerid))
        {
            YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s (%d), Silent Aim kullanmaya çalýþýyor. (CODE-2) (bullet distance: %0.2f %0.2f %0.2f)", OyuncuIsim(issuerid), issuerid, camX, camY, camZ);
            return 0;
        }
        if (playerdistance < 50.0 && GetPlayerTargetPlayer(issuerid) != playerid && GetPlayerTargetPlayer(issuerid) == INVALID_PLAYER_ID && !IsPlayerInAnyVehicle(playerid) && !IsPlayerInAnyVehicle(issuerid))
        {
            YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s (%d), Silent Aim kullanmaya çalýþýyor. (CODE-3) (bullet distance: %0.2f %0.2f %0.2f)", OyuncuIsim(issuerid), issuerid, camX, camY, camZ);
            return 0;
		}
		new Float:fOriginX2, Float:fOriginY2, Float:fOriginZ2;
        fOriginX2 = fOriginX + RandomEx(1, 5);
        fOriginY2 = fOriginY + RandomEx(1, 5);
        fOriginZ2 = fOriginZ + RandomEx(1, 5);
        if(!IsPlayerInRangeOfPoint(issuerid, 10.0, fOriginX2, fOriginY2, fOriginZ2))
        {
            YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s (%d), Silent Aim kullanmaya çalýþýyor. (CODE-4) (fdistance: %0.2f %0.2f %0.2f)", OyuncuIsim(issuerid), issuerid, fOriginX2, fOriginY2, fOriginZ2);
            return 0;
        }
    }
    else if(IsBulletWeapon(weapon) && GetPlayerCameraMode(issuerid) == 4)
    {
    	if (cameradistance < 1 && hitdistance == 0)
		{
            YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s (%d), Wallshot kullanmaya çalýþýyor.", OyuncuIsim(issuerid), issuerid);
            return 0;
		}
		else if (hitdistance == 0 && cameradistance > 1)
  {
            YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s (%d), Silent Aim kullanmaya çalýþýyor. (CODE-5) (bullet distance: %0.2f %0.2f %0.2f)", OyuncuIsim(issuerid), issuerid, camX, camY, camZ);
            return 0;
		}
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, camX, camY, camZ) && !IsPlayerInRangeOfPoint(issuerid, 1.0, fOriginX, fOriginY, fOriginZ) && !IsPlayerInAnyVehicle(issuerid))
        {
            YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s (%d), Silent Aim kullanmaya çalýþýyor. (CODE-6) (bullet distance: %0.2f %0.2f %0.2f) (fdistance: %0.2f %0.2f %0.2f)", OyuncuIsim(issuerid), issuerid, camX, camY, camZ, fOriginX, fOriginY, fOriginZ);
            return 0;
        }
		new Float:fOriginX2, Float:fOriginY2, Float:fOriginZ2;
        fOriginX2 = fOriginX + RandomEx(1, 5);
        fOriginY2 = fOriginY + RandomEx(1, 5);
        fOriginZ2 = fOriginZ + RandomEx(1, 5);
        if(!IsPlayerInRangeOfPoint(issuerid, 10.0, fOriginX2, fOriginY2, fOriginZ2))
        {
            YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s (%d), Silent Aim kullanmaya çalýþýyor. (CODE-7) (fdistance: %0.2f %0.2f %0.2f)", OyuncuIsim(issuerid), issuerid, fOriginX2, fOriginY2, fOriginZ2);
            return 0;
        }
    }
    else if(IsBulletWeapon(weapon) && GetPlayerCameraMode(issuerid) == 4)
    {
    	if (cameradistance < 1 && hitdistance == 0)
		{
            YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s (%d), Silent Aim kullanmaya çalýþýyor. (CODE-8) (bullet distance: %0.2f %0.2f %0.2f)", OyuncuIsim(issuerid), issuerid, camX, camY, camZ);
            return 0;
		}
		else if (hitdistance == 0 && cameradistance > 1)
		{
            YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s (%d), Silent Aim kullanmaya çalýþýyor. (CODE-9) (bullet distance: %0.2f %0.2f %0.2f)", OyuncuIsim(issuerid), issuerid, camX, camY, camZ);
            return 0;
		}
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, camX, camY, camZ) && !IsPlayerInRangeOfPoint(issuerid, 1.0, fOriginX, fOriginY, fOriginZ) && !IsPlayerInAnyVehicle(issuerid))
        {
            YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s (%d), Silent Aim kullanmaya çalýþýyor. (CODE-10) (bullet distance: %0.2f %0.2f %0.2f)", OyuncuIsim(issuerid), issuerid, camX, camY, camZ);
            return 0;
        }
		new Float:fOriginX2, Float:fOriginY2, Float:fOriginZ2;
        fOriginX2 = fOriginX + RandomEx(1, 5);
        fOriginY2 = fOriginY + RandomEx(1, 5);
        fOriginZ2 = fOriginZ + RandomEx(1, 5);
        if(!IsPlayerInRangeOfPoint(issuerid, 10.0, fOriginX2, fOriginY2, fOriginZ2))
        {
            YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s (%d), Silent Aim kullanmaya çalýþýyor. (CODE-11) (fdistance: %0.2f %0.2f %0.2f)", OyuncuIsim(issuerid), issuerid, fOriginX2, fOriginY2, fOriginZ2);
            return 0;
        }
    }
    if (weapon == WEAPON_CARPARK && weapon == WEAPON_KNIFE && WEAPON_GRENADE && weapon == WEAPON_HELIBLADES && weapon == WEAPON_CHAINSAW && weapon == WEAPON_MINIGUN && weapon == WEAPON_ROCKETLAUNCHER)
	{
	    YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s (%d), Crasher kullanmaya çalýþtýðý için sunucudan atýldý. (CODE-1)", OyuncuIsim(issuerid), issuerid);
        KickEx(issuerid);
        return 0;
	}
    if(GetPlayerAnimationIndex(issuerid) == 745 || GetPlayerAnimationIndex(issuerid) == 746 || GetPlayerAnimationIndex(issuerid) == 747 || GetPlayerAnimationIndex(issuerid) == 748)
    {
       YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s (%d), Knife Crasher kullanmaya çalýþtýðý için sunucudan atýldý. (CODE-1)", OyuncuIsim(issuerid), issuerid);
	   KickEx(issuerid);
	   return 0;
    }
	if (weapon == WEAPON_KNIFE)
	{
	    YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s (%d), Crasher kullanmaya çalýþtýðý için sunucudan atýldý. (CODE-3)", OyuncuIsim(issuerid), issuerid);
        KickEx(issuerid);
        return 0;
	}
	if (weapon == WEAPON_KNIFE) return 0;
	if(issuerid != INVALID_PLAYER_ID && IsPlayerConnected(issuerid))
	{
	    if(!TaserKontrol(issuerid) && !BeanbagKontrol(issuerid) && (OyuncuBilgi[issuerid][oSilah][SilahSlotBul[weapon]] != weapon || IsPlayerInAnyVehicle(issuerid) && GetPlayerState(issuerid) == PLAYER_STATE_DRIVER && weapon != WEAPON_VEHICLE && weapon != 0)) return SilahHilesiIslem(issuerid, weapon);
	    if(OyuncuBilgi[issuerid][oPaintball] != OyuncuBilgi[playerid][oPaintball]) return 0;
		new mesaj[256], Float:can, Float:zirh;
	    GetPlayerHealth(playerid, can);
	    GetPlayerArmour(playerid, zirh);
		if(zirh > 0 && TaserKontrol(issuerid) || zirh > 0 && BeanbagKontrol(issuerid)) ZirhDuzenle(playerid, zirh);
		else if(zirh == 0 && TaserKontrol(issuerid) || zirh == 0 && BeanbagKontrol(issuerid)) CanDuzenle(playerid, can);
        if(OyuncuBirlikTuru(issuerid) == BIRLIK_POLIS && OyuncuBilgi[issuerid][oTaser] == true && OyuncuBilgi[playerid][oDonduruldu] < 1 && weapon == 23)
        {
            if(OyuncuBilgi[issuerid][oTaser] && weapon == 23 || OyuncuBilgi[issuerid][oBeanbag] && weapon == 25) SarjorYenilemeAnimasyon(issuerid, weapon);
            if(!YakinlikKontrol(issuerid, playerid, 5.5)) return HataMesaji(issuerid, "Taser bu mesafede etkili deðil.");
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return HataMesaji(issuerid, "Taser etkilemedi oyuncu hareket ediyor.");
			if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(issuerid, "Yaralý birisini taserleyemezsin.");

            OyuncuBilgi[playerid][oDonduruldu] = 10;
            TogglePlayerControllable(playerid, false);
			format(mesaj, sizeof(mesaj), "~r~TASER ETKISI: ~w~%d saniye", OyuncuBilgi[playerid][oDonduruldu]);
			GameTextForPlayer(playerid, mesaj, 1000, 3);
            ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0);
			format(mesaj, sizeof(mesaj), "%s adlý kiþiyi taser ile etkisiz hale getirir.", OyuncuIsim(playerid));
			cmd_me(issuerid, mesaj);
			if(OyuncuBilgi[playerid][oSuruklenen] != INVALID_PLAYER_ID) {
			    new hedefid = OyuncuBilgi[playerid][oSuruklenen];
				OyuncuBilgi[playerid][oSuruklenen] = INVALID_PLAYER_ID;
				if(IsPlayerConnected(hedefid)) {
					OyuncuBilgi[hedefid][oSurukleniyor] = INVALID_PLAYER_ID;
					new emote[64];
					format(emote, sizeof(emote), "%s isimli kiþiyi sürüklemeyi býrakýr.", OyuncuIsim(hedefid));
					cmd_me(playerid, emote);
					TogglePlayerControllable(hedefid, true);
				}
			}
			if(OyuncuBilgi[playerid][oIlkYardimYapilan] != INVALID_PLAYER_ID) ClearAnimations(playerid), HataMesaji(playerid, "Etkisiz hale geldiðin için ilk yardým iptal edildi."), OyuncuBilgi[playerid][oIlkYardimYapilan] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oIlkYardimSure] = 0;
            if(MaymuncukVeri[playerid][mSaniye] > 0) return HataMesaji(playerid, "Etkisiz hale geldiðin için maymuncuk iþlemin iptal edildi."), MaymuncukVeri[playerid][mSaniye] = 0, OyuncuBilgi[playerid][oMaymuncuk]--;
            if(OyuncuBilgi[playerid][oTamirKitiSure] > 0) return HataMesaji(playerid, "Etkisiz hale geldiðin için tamir iþlemin iptal edildi."), OyuncuBilgi[playerid][oTamirArac] = INVALID_VEHICLE_ID, OyuncuBilgi[playerid][oTamirKiti]--;
		}
        if(OyuncuBirlikTuru(issuerid) == BIRLIK_POLIS && OyuncuBilgi[issuerid][oBeanbag] && OyuncuBilgi[playerid][oDonduruldu] < 1 && weapon == 25)
        {
            if(OyuncuBilgi[issuerid][oTaser] && weapon == 23 || OyuncuBilgi[issuerid][oBeanbag] && weapon == 25) SarjorYenilemeAnimasyon(issuerid, weapon);
            if(!YakinlikKontrol(issuerid, playerid, 10.0)) return HataMesaji(issuerid, "Beanbag bu mesafede etkili deðil.");
			if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(issuerid, "Yaralý birisini beanbag ile vuramazsýn.");
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return HataMesaji(issuerid, "Beanbag etkilemedi oyuncu hareket ediyor.");

			if(OyuncuBilgi[playerid][oSuruklenen] != INVALID_PLAYER_ID) {
			    new hedefid = OyuncuBilgi[playerid][oSuruklenen];
				OyuncuBilgi[playerid][oSuruklenen] = INVALID_PLAYER_ID;
				if(IsPlayerConnected(hedefid)) {
					OyuncuBilgi[hedefid][oSurukleniyor] = INVALID_PLAYER_ID;
					new emote[64];
					format(emote, sizeof(emote), "%s isimli kiþiyi sürüklemeyi býrakýr.", OyuncuIsim(hedefid));
					cmd_me(playerid, emote);
					TogglePlayerControllable(hedefid, true);
				}
			}
            OyuncuBilgi[playerid][oDonduruldu] = 5;
            TogglePlayerControllable(playerid, false);
			format(mesaj, sizeof(mesaj), "~r~BEANBAG ETKISI: ~w~%d saniye", OyuncuBilgi[playerid][oDonduruldu]);
			GameTextForPlayer(playerid, mesaj, 1000, 3);
            ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 1, 1, 1, 1, 1);
            format(mesaj, sizeof(mesaj), "%s adlý kiþiyi beanbag ile etkisiz hale getirir.", OyuncuIsim(playerid));
			cmd_me(issuerid, mesaj);
			if(OyuncuBilgi[playerid][oIlkYardimYapilan] != INVALID_PLAYER_ID) ClearAnimations(playerid), HataMesaji(playerid, "Etkisiz hale geldiðin için ilk yardým iptal edildi."), OyuncuBilgi[playerid][oIlkYardimYapilan] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oIlkYardimSure] = 0;
            if(MaymuncukVeri[playerid][mSaniye] > 0) return HataMesaji(playerid, "Etkisiz hale geldiðin için maymuncuk iþlemin iptal edildi."), MaymuncukVeri[playerid][mSaniye] = 0, OyuncuBilgi[playerid][oMaymuncuk]--;
            if(OyuncuBilgi[playerid][oTamirKitiSure] > 0) return HataMesaji(playerid, "Etkisiz hale geldiðin için tamir iþlemin iptal edildi."), OyuncuBilgi[playerid][oTamirArac] = INVALID_VEHICLE_ID, OyuncuBilgi[playerid][oTamirKiti]--;
		}
	    if(weapon == WEAPON_SNIPER && bodypart == 9) {
	        Hasar_Ekle(playerid, bodypart, 200.0, issuerid, weapon);
			ZirhDuzenle(playerid, 0.0);
			CanDuzenle(playerid, 0.0);
	        return 0;
	    }
        Hasar_Ekle(playerid, bodypart, amount, issuerid, weapon);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    SetVehicleHealth(vehicleid, 999.9);
    AracZaman[vehicleid] = 0;
    HizLimiti[vehicleid] = 0;
	new id = Arac_IDBul(vehicleid);
	if(id != -1) ChangeVehicleColor(vehicleid, AracBilgi[id][aracRenk1], AracBilgi[id][aracRenk2]);
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	if(Arac_BirlikTuru(vehicleid) == BIRLIK_POLIS) {
		KillTimer(MDCTimer[vehicleid]);
		foreach(new o : Player) for(new i = 0; i < 4; i++) TextDrawHideForPlayer(o, DashcamText[vehicleid][i]);
	}
	foreach(new i : Player)
	{
	    if(InsideShamal[i] == vehicleid)
	    {
  			new Float:XB, Float:YB, Float:ZB;
			GetVehiclePos(InsideShamal[i], XB, YB, ZB);
			OyuncuPosDegistir(i, XB-4, YB-2.3, ZB);
			if(ZB > 50.0) Silahver(i, 46, 1);
   			OyuncuBilgi[i][oVW] = 0;
			SetPlayerVirtualWorld(i, 0);
			OyuncuBilgi[i][oInterior] = 0;
			SetPlayerInterior(i, 0);
			UyariMesaji(i, "Uçak hasar aldý, içinde olamazsýn.");
			InsideShamal[i] = INVALID_VEHICLE_ID;
	    }
	}
    AracZaman[vehicleid] = 0;
    HizLimiti[vehicleid] = 0;
	new id = Arac_IDBul(vehicleid);
	if(id != -1) {
		if(AracBilgi[id][aracSatilik] > 0) if(IsValidDynamic3DTextLabel(AracBilgi[id][aracIlan])) DestroyDynamic3DTextLabel(AracBilgi[id][aracIlan]), AracBilgi[id][aracIlan] = Text3D:INVALID_3DTEXT_ID;
		Arac_Spawn(id);
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) {
		cmd_ame(playerid, "konuþmaya çalýþýr ancak etkisiz halde olduðu için söylediði anlaþýlmaz.");
		return 0;
	} // Konuþamama Etkisi
	if(!strcmp(text, ":)", true) && OyuncuBilgi[playerid][oAdminDurum] == false)
	{
		cmd_ame(playerid, "gülümser.");
		return false;
	}
	if(!strcmp(text, ";)", true) && OyuncuBilgi[playerid][oAdminDurum] == false)
	{
		cmd_ame(playerid, "göz kýrpar.");
		return false;
	}
	if(!strcmp(text, ":D", true) && OyuncuBilgi[playerid][oAdminDurum] == false)
	{
		cmd_ame(playerid, "kahkaha atar.");
		return false;
	}
	if(!strcmp(text, ":P", true) && OyuncuBilgi[playerid][oAdminDurum] == false)
	{
		cmd_ame(playerid, "dil çýkarýr.");
		return false;
	}
	if(!strcmp(text, ":(", true) && OyuncuBilgi[playerid][oAdminDurum] == false)
	{
		cmd_ame(playerid, "somurtur.");
		return false;
	}
	if(!strcmp(text, ":*", true) && OyuncuBilgi[playerid][oAdminDurum] == false)
	{
		cmd_ame(playerid, "öpücük gönderir.");
		return false;
	}
	if(!strcmp(text, ":/", true) && OyuncuBilgi[playerid][oAdminDurum] == false)
	{
		cmd_ame(playerid, "dudaklarýný büzer.");
		return false;
	}
    if(ilkharf == true) text[0] = IlkHarfBuyut(text[0]);
    if(PetKontrol[playerid] != -1) {
		new konusma_bilgi[43];
		format(konusma_bilgi, sizeof(konusma_bilgi), "%s: Hav hav!", PetBilgi[PetKontrol[playerid]][petAdi]);
		ProxDetectorArac(KONUSMA_MESAFESI, playerid, konusma_bilgi, RENK_KONUSMA1, RENK_KONUSMA2, RENK_KONUSMA3, RENK_KONUSMA4, RENK_KONUSMA5);
        return 0;
    }
	if(!OyuncuBilgi[playerid][oAdminDurum] && OyuncuBilgi[playerid][oGiris] == true) {
		if(OyuncuBilgi[playerid][oArama] > -1 && OyuncuBilgi[playerid][oCevaplandi] == true && OyuncuBilgi[playerid][oAnkesorluTelefon] == false) {
			new oyuncuid = OyuncuBilgi[playerid][oArama], bool:bulundu = false;
            if(OyuncuBilgi[playerid][oGizliNumara] == true) SendClientMessageEx(oyuncuid, RENK_GRI, "(telefon) Gizli: %s", text), bulundu = true;
			else if(OyuncuBilgi[playerid][oGizliNumara] == false) {
 			for(new r = 0; r != MAKSIMUM_REHBER_SAYI; r ++) if(RehberBilgi[oyuncuid][r][rehberKullanimda] && RehberBilgi[oyuncuid][r][rehberNumara] == OyuncuBilgi[playerid][oTelefonNumarasi]) {
    		SendClientMessageEx(oyuncuid, RENK_GRI, "(telefon) %s (%d): %s", RehberBilgi[oyuncuid][r][rehberIsim], OyuncuBilgi[playerid][oTelefonNumarasi], text), bulundu = true;
			}
			}
			if(bulundu == false) {
			switch(OyuncuBilgi[playerid][oCinsiyet]) {
			case 1: {
			SendClientMessageEx(oyuncuid, RENK_GRI, "[E] (telefon) %d: %s", OyuncuBilgi[playerid][oTelefonNumarasi], text);
			}
			case 2: {
			SendClientMessageEx(oyuncuid, RENK_GRI, "[K] (telefon) %d: %s", OyuncuBilgi[playerid][oTelefonNumarasi], text);
			}
			}
			}
			SendNearbyMessage(playerid, KONUSMA_MESAFESI, RENK_BEYAZ, "(telefon) %s: %s", OyuncuIsim(playerid), text);
		    return false;
		}
		if(OyuncuBilgi[playerid][oArama] > -1 && OyuncuBilgi[playerid][oCevaplandi] == true && OyuncuBilgi[playerid][oAnkesorluTelefon] == true) {
			new oyuncuid = OyuncuBilgi[playerid][oArama];
			switch(OyuncuBilgi[playerid][oCinsiyet]) {
			case 1: {
			SendClientMessageEx(oyuncuid, RENK_GRI, "[E] (ankesörlü telefon): %s", text);
			}
			case 2: {
			SendClientMessageEx(oyuncuid, RENK_GRI, "[K] (ankesörlü telefon): %s", text);
			}
			}
			SendNearbyMessage(playerid, KONUSMA_MESAFESI, RENK_BEYAZ, "(Ankesörlü Telefon) %s: %s", OyuncuIsim(playerid), text);
		    return false;
		}
		if(IsPlayerInAnyVehicle(playerid) && AracCamDurum[GetPlayerVehicleID(playerid)] == false) {
		    foreach(new oync : Player) if(OyuncuBilgi[oync][oGiris] == true && IsPlayerInVehicle(oync, GetPlayerVehicleID(playerid))) {
				SendClientMessageEx(oync, 0xBBFFEEFF, "(cam kapalý) %s: %s", OyuncuIsim(playerid), text);
		    }
		    return false;
		}
		new konusma_bilgi[144];
		format(konusma_bilgi, sizeof(konusma_bilgi), "%s: %s", OyuncuIsim(playerid), text);
  		ProxDetectorArac(KONUSMA_MESAFESI, playerid, konusma_bilgi, RENK_KONUSMA1, RENK_KONUSMA2, RENK_KONUSMA3, RENK_KONUSMA4, RENK_KONUSMA5);
		foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && YakinlikKontrol(playerid, i, KONUSMA_MESAFESI) && OyuncuBilgi[i][oArama] > -1 && OyuncuBilgi[i][oCevaplandi] == true) {
		    new arananid = OyuncuBilgi[i][oArama];
		    switch(OyuncuBilgi[playerid][oCinsiyet]) {
		    	case 1: SendClientMessageEx(arananid, RENK_KONUSMA1, "(arka ses) Erkek: %s", text);
		    	case 2: SendClientMessageEx(arananid, RENK_KONUSMA1, "(arka ses) Kadýn: %s", text);
		    }
		}
		if(OyuncuBilgi[playerid][oKonusmaAnim] == true && !IsPlayerInAnyVehicle(playerid) && OyuncuBilgi[playerid][oYaraliSure] < 1 && PetKontrol[playerid] == -1) {
			ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 4.1, 0, 1, 1, 1, strlen(text) * 100, 1);
			SetTimerEx("KonusmaAnimDurdur", strlen(text) * 100, false, "d", playerid);
		}
		// SetPlayerChatBubble(playerid, text, RENK_BEYAZ, KONUSMA_MESAFESI, 2500);
		new id = PetYakin(playerid, 15.0);
		if(id != -1 && PetBilgi[id][petDurum] == true && PetBilgi[id][petSahip] == OyuncuBilgi[playerid][oID] && PetBilgi[id][petAclik] > 5 && PetKontrol[playerid] == -1)
		{
		    if(strfind(text, PetBilgi[id][petAdi], true) != -1)
		    {
		        if(strfind(text, "Gel", true) != -1)
				{
				    FCNPC_ClearAnimations(PetBilgi[id][NPCID]);
				    PetBilgi[id][petTakip] = -1;
				    PetBilgi[id][petSaldir] = -1;
				    FCNPC_GoToPlayer(PetBilgi[id][NPCID], playerid);
				}
		        if(strfind(text, "Takip", true) != -1)
		        {
		            FCNPC_ClearAnimations(PetBilgi[id][NPCID]);
		            FCNPC_StopAttack(PetBilgi[id][NPCID]);
	                PetBilgi[id][petTakip] = playerid;
			    	PetBilgi[id][petSaldir] = -1;
		        }
		        if(strfind(text, "Dur", true) != -1)
		        {
		            FCNPC_ClearAnimations(PetBilgi[id][NPCID]);
		            PetBilgi[id][petTakip] = -1;
		            PetBilgi[id][petSaldir] = -1;
		            FCNPC_Stop(PetBilgi[id][NPCID]);
		            FCNPC_StopAttack(PetBilgi[id][NPCID]);
		        }
		        if(strfind(text, "Otur", true) != -1)
		        {
		            PetBilgi[id][petTakip] = -1;
		            PetBilgi[id][petSaldir] = -1;
		            FCNPC_Stop(PetBilgi[id][NPCID]);
		            FCNPC_StopAttack(PetBilgi[id][NPCID]);
		            FCNPC_ApplyAnimation(PetBilgi[id][NPCID], "PED", "SEAT_idle", 4.0, 1, 0, 0, 0, 0);
	             	FCNPC_ApplyAnimation(PetBilgi[id][NPCID], "PED", "SEAT_idle", 4.0, 1, 0, 0, 0, 0);
		        }
		        if(strfind(text, "Kalk", true) != -1) FCNPC_ClearAnimations(PetBilgi[id][NPCID]);
		        if(strfind(text, "Bana bak", true) != -1) FCNPC_SetAngleToPlayer(PetBilgi[id][NPCID], playerid);
			}
		}
		return false;
	}
	else if(OyuncuBilgi[playerid][oAdminDurum]) cmd_b(playerid, text);
	return false;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    if(OyuncuBilgi[playerid][oHileKontrol] == true) SunucuMesaji(playerid, "opev: %d, %d", vehicleid, ispassenger);
    GetVehiclePos(vehicleid, AracSonPos[vehicleid][0], AracSonPos[vehicleid][1], AracSonPos[vehicleid][2]);
	/*if(!ispassenger && SurucuBul(vehicleid) != INVALID_PLAYER_ID) {
		HataMesaji(playerid, "Araç çalmak yasaktýr.");
		RemovePlayerFromVehicle(playerid);
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		OyuncuPosDegistir(playerid, x, y, z);
		return 0;
	}*/
	if((OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && Arac_BirlikTuru(vehicleid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL && Arac_BirlikTuru(vehicleid) == BIRLIK_MEDIKAL || OyuncuBirlikTuru(playerid) != BIRLIK_DEVLET && Arac_BirlikTuru(vehicleid) == BIRLIK_DEVLET || PetKontrol[playerid] != -1) && !ispassenger) {
		if(PetKontrol[playerid] != -1) HataMesaji(playerid, "Pet kontrol ederken araç kullanamazsýn.");
		if(OyuncuBilgi[playerid][oYarali] > 1) HataMesaji(playerid, "Yaralýyken araç kullanamazsýn.");
		else HataMesaji(playerid, "Bu araca binemezsin.");
		RemovePlayerFromVehicle(playerid);
		ClearAnimations(playerid);
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		OyuncuPosDegistir(playerid, x, y, z);
		return 0;
	}
	// PD Haritada Çýkma
	/*if((OyuncuBirlikTuru(playerid)) == BIRLIK_POLIS && Arac_BirlikTuru(vehicleid) == BIRLIK_POLIS) { 
		GetPlayerPos(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
		EskiVeriler[playerid][eskiRenk] = GetPlayerColor(playerid);
		foreach(new o : Player) if(OyuncuBirlikTuru(o) == BIRLIK_POLIS) SetPlayerMarkerForPlayer(o, playerid, 0xFF0000AA);
		return 0;
	}*/
	if(AracBilgi[Arac_IDBul(vehicleid)][aracVip] > 0 && OyuncuBilgi[playerid][oVIP] == 0 && !ispassenger) {
		HataMesaji(playerid, "VIP olmadýðýn için bu araca binemezsin.");
		RemovePlayerFromVehicle(playerid);
		ClearAnimations(playerid);
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		OyuncuPosDegistir(playerid, x, y, z);
		return 0;
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    DialogGoster(playerid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
	if(OyuncuBilgi[playerid][oEhliyetTesti] > 0) {
		if(OyuncuBilgi[playerid][oDialog] == -1) return DialogGoster(playerid, DIALOG_EHLIYET_AYRIL, DIALOG_STYLE_MSGBOX, "Sürücü Testi - Ayrýl", "Testten ayrýlmak istiyor musun?", "Evet", "Hayýr"), RemovePlayerFromVehicle(playerid), PutPlayerInVehicle(playerid, vehicleid, 0);
	}
	/*if(OyuncuBilgi[playerid][oEmniyetKemeri] == true) {
	    new emote[64];
	    OyuncuBilgi[playerid][oEmniyetKemeri] = false;
		if(!BisikletKontrol(vehicleid)) format(emote, sizeof(emote), "emniyet kemerini çýkarýr.");
		else format(emote, sizeof(emote), "kaskýný kafasýndan çekiþtirerek çýkarýr.");
	    cmd_ame(playerid, emote);
	}*/
	if(OyuncuBilgi[playerid][oKamyoncu] != -1) {
	/*OyuncuBilgi[playerid][oKamyoncu] = -1;
	DisablePlayerCheckpoint(playerid);*/
	UyariMesaji(playerid, "Arabaný yol ortasýnda býrakman ya da meslek araçlarýný amacý dýþýnda kullanman ceza almana neden olacaktýr.");
	}
	if(OyuncuBilgi[playerid][oTemizlikCP] > 0 && GetVehicleModel(vehicleid) == 574) {
		DisablePlayerCheckpoint(playerid);
	    OyuncuBilgi[playerid][oTemizlikCP] = 0;
		SunucuMesaji(playerid, "Mesleði iptal ettin.");
	    new id = Arac_IDBul(vehicleid);
	    Arac_Sil(id);
	}
	/*if((OyuncuBirlikTuru(playerid)) == BIRLIK_POLIS && Arac_BirlikTuru(vehicleid) == BIRLIK_POLIS) {
    foreach(new i : Player) if(OyuncuBirlikTuru(i) == BIRLIK_POLIS) SetPlayerMarkerForPlayer(i, playerid, EskiVeriler[playerid][eskiRenk]);
	}*/
    /*new id = Arac_IDBul(vehicleid);
	if(id != -1 && AracBilgi[id][aracKilit]) {
	    RemovePlayerFromVehicle(playerid);
	    ClearAnimations(playerid);
	    if(GetPVarInt(playerid, "koltuk") == 0) {
			AracBilgi[id][aracKilit] = false;
	    	new engine, lights, alarm, doors, bonnet, boot, objective;
	    	GetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 0, bonnet, boot, objective);
			GameTextForPlayer(playerid, "~g~Aracin kilidi acildi!", 2000, 3);
			return Arac_Kaydet(id);
	    }
	    PutPlayerInVehicle(playerid, vehicleid, GetPVarInt(playerid, "koltuk"));
	    HataMesaji(playerid, "Kilitli araçtan inemezsin.");
	    return false;
	}*/
	DeletePVar(playerid, "koltuk");
	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
    if(IsPlayerConnected(playerid)) {
		new velocity;
        velocity = floatround(floatsqroot(vel_x*vel_x + vel_y*vel_y + vel_z*vel_z) * 180);
        if(vehicleid != INVALID_VEHICLE_ID && !SurucuBul(vehicleid) && velocity > 500) HileKickle(playerid, 25);
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(OyuncuBilgi[playerid][oHileKontrol] == true) SunucuMesaji(playerid, "new: %d old: %d", newstate, oldstate);
	if(OyuncuBilgi[playerid][oGiris] == true && OyuncuBilgi[playerid][oIzlenen] == INVALID_PLAYER_ID && newstate == 9) HileKickle(playerid, 26);
    if(newstate == PLAYER_STATE_DRIVER) {
		if(KamyoncuYuk[GetPlayerVehicleID(playerid)] != -1) {
		    OyuncuBilgi[playerid][oKamyoncu] = KamyoncuYuk[GetPlayerVehicleID(playerid)];
			switch(KamyoncuCP[GetPlayerVehicleID(playerid)]) {
				case 0: SetPlayerCheckpoint(playerid, 1116.4115, -926.6071, 43.1797, 5.0);
			    case 1: SetPlayerCheckpoint(playerid, 994.1617, -1350.8613, 13.3562, 5.0);
			    case 2: SetPlayerCheckpoint(playerid, 1355.0039, -1749.1360, 13.3728, 5.0);
			    case 3: SetPlayerCheckpoint(playerid, 2151.4697, -1176.2104, 23.8203, 5.0);
			    case 4: SetPlayerCheckpoint(playerid, 1997.1281,-1275.4493,23.8203, 5.0);
				case 7: SetPlayerCheckpoint(playerid, 2856.1252, -1540.3386, 10.9141, 5.0);
		       	case 8: SetPlayerCheckpoint(playerid, 814.9379, -1551.8552, 13.5536, 5.0);
		       	case 9: SetPlayerCheckpoint(playerid, 2769.8667 ,-1615.1829, 10.9219, 5.0);
		       	default: SetPlayerCheckpoint(playerid, 1116.4115, -926.6071, 43.1797, 5.0);
			}
			SunucuMesaji(playerid, "Bu kamyonda yük var, teslimat noktasý haritanda iþaretlendi.");
		}
		if(OyuncuBilgi[playerid][oEhliyetTesti] > 0) {
			//RemovePlayerFromVehicle(playerid), ClearAnimations(playerid);
			//PutPlayerInVehicle(playerid, OyuncuBilgi[playerid][oSonBinilenArac], 0);
		}
		SetPlayerArmedWeapon(playerid, 0);
        new aracid = Arac_IDBul(GetPlayerVehicleID(playerid)), query[256];
        if(AracBilgi[aracid][aracSatilik] == 1 && AracBilgi[aracid][aracSahip] != OyuncuBilgi[playerid][oID]) {
            SetPVarInt(playerid, "satilik_arac_isaret", aracid);
			new bilgi[512];
			format(bilgi, sizeof(bilgi), "{FFFFFF}Bindiðiniz araç {33aa33}%s {FFFFFF}fiyatýna satýlýða çýkarýlmýþ, bu aracý satýn almak ister misiniz?\n\n{%06x}Model: {FFFFFF}%s\n{%06x}Vergi: {FFFFFF}%s\n", NumaraFormati(AracBilgi[aracid][aracFiyat]), RENK_SERVER >>> 8, AracModel(AracBilgi[aracid][aracModel]), RENK_SERVER >>> 8, NumaraFormati(AracBilgi[aracid][aracVergi]));
			format(bilgi, sizeof(bilgi), "%s{%06x}Kilometre: {FFFFFF}%.0f\n{%06x}Uber Lisansý: {FFFFFF}%s\n{%06x}Zýrh: {FFFFFF}%d seviye", bilgi, RENK_SERVER >>> 8, AracBilgi[aracid][aracKM], RENK_SERVER >>> 8, (AracBilgi[aracid][uberLisans] == 0) ? ("{B70000}Yok") : ("{33AA33}Var"), RENK_SERVER >>> 8, AracBilgi[aracid][aracZirh]);
			DialogGoster(playerid, DIALOG_ARAC_SATINAL, DIALOG_STYLE_MSGBOX, "Satýlýk Araç", bilgi, "Evet", "Hayýr");
        }
		if(IsEngineVehicle(GetPlayerVehicleID(playerid))) PlayerTextDrawShow(playerid, AracHizGosterge[playerid]);
		if(!IsEngineVehicle(GetPlayerVehicleID(playerid))) return SetEngineStatus(GetPlayerVehicleID(playerid), true);
		if(AracBilgi[aracid][aracBirlik] > 0) {
		    new SahipBirlik[64];
		    for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(AracBilgi[aracid][aracBirlik] == BirlikBilgi[i][birlikID]) { format(SahipBirlik, sizeof(SahipBirlik), "%s", BirlikBilgi[i][birlikAd]); break; }
			SendClientMessageEx(playerid, RENK_TURUNCU, "Birlik: {FFFFFF} {FFFFFF}%s {FF9966}Model: {FFFFFF}%s {FF8000}Plaka: {FFFFFF}%s", SahipBirlik, AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracPlaka]);
		}
		else if(AracBilgi[aracid][aracSahip] > 0) {
   			format(query, sizeof(query), "SELECT * FROM oyuncular WHERE ID = '%d'", AracBilgi[aracid][aracSahip]);
			mysql_tquery(mysqlB, query, "Arac_SahipArat", "d", playerid);
		}
		else if(AracBilgi[aracid][aracTur] == 1) {
			SendClientMessageEx(playerid, RENK_SERVER, "Bu bir sürücü testi aracýdýr. Sürücü testindeyseniz motoru çalýþtýrarak teste baþlayabilirsiniz.");
			SendClientMessageEx(playerid, RENK_TURUNCU, "Model: {FFFFFF}%s {FF8000}| Plaka: {FFFFFF}%s", AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracPlaka]);
		}
		else {
			if(AracBilgi[aracid][aracModel] != 574) SendClientMessageEx(playerid, RENK_SERVER, "Bu aracýn sahibi yok!");
			else SendClientMessageEx(playerid, RENK_SERVER, "Bu araç %s mesleðine ait.", MeslekIsim(2));
			SendClientMessageEx(playerid, RENK_TURUNCU, "Model: {FFFFFF}%s {FF8000}| Plaka: {FFFFFF}%s", AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracPlaka]);
		}
		if(AracBilgi[aracid][aracKiralik] == 1 && AracBilgi[aracid][aracAnahtar] < 1)
		{
			new gerekliucret = 0;
			if(AracBilgi[aracid][aracSahip] == 0) gerekliucret = 30;
			else gerekliucret = AracBilgi[aracid][aKiraUcret];
			SunucuMesaji(playerid, "Bindiðiniz arabayý 30 dakika boyunca kiralayabilirsiniz. (Ücret: %s - /arackirala)", NumaraFormati(gerekliucret));
		}
		if(OyuncuBilgi[playerid][oEhliyet] == false) UyariMesaji(playerid, "Ehliyetiniz bulunmuyor. Ehliyetsiz trafiðe çýkýþýnýz yasak ve tehlikeli bir durumdur.");
    }
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    OyuncuBilgi[playerid][oSonBinilenArac] = GetPlayerVehicleID(playerid);
        if(OyuncuBilgi[playerid][oTamirKitiSure] > 0) {
            OyuncuBilgi[playerid][oTamirKitiSure] = 0;
            OyuncuBilgi[playerid][oTamirArac] = INVALID_VEHICLE_ID;
			OyuncuBilgi[playerid][oTamirKiti]--;
			SunucuMesaji(playerid, "Bir araca bindiðin için tamir iþlemin iptal oldu.");
        }
        if(OyuncuBilgi[playerid][oBenzinDolduruyor] > -1) OyuncuBilgi[playerid][oBenzinDolduruyor] = -1, SunucuMesaji(playerid, "Bidon ile iþlem yaparken araca bindiðin için iþlemin iptal edildi.");
        if(GetPVarInt(playerid, "anim") != 0) TextDrawHideForPlayer(playerid, AnimBozText), SetPVarInt(playerid, "anim", 0);
		if(OyuncuBilgi[playerid][oBoombox] != INVALID_PLAYER_ID) OyuncuBilgi[playerid][oBoombox] = INVALID_PLAYER_ID, StopAudioStreamForPlayer(playerid);
		if(Arac_IDBul(GetPlayerVehicleID(playerid)) != -1 && AracBilgi[Arac_IDBul(GetPlayerVehicleID(playerid))][aracKilit] && GetVehicleModel(GetPlayerVehicleID(playerid)) != 574) {
		    RemovePlayerFromVehicle(playerid);
		    return HataMesaji(playerid, "Bu araç kilitli.");
		}
	    foreach (new i : Player) if(OyuncuBilgi[i][oIzlenen] == playerid) {
     		PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
		}
		SetPVarInt(playerid, "koltuk", GetPlayerVehicleSeat(playerid));
		if(GetPVarInt(playerid, "state") > GetTickCount()) return HileKickle(playerid, 5);
		if(BisikletKontrol(GetPlayerVehicleID(playerid))) SetPVarInt(playerid, "state", GetTickCount() + 1000);
		else if(!BisikletKontrol(GetPlayerVehicleID(playerid))) SetPVarInt(playerid, "state", GetTickCount() + 3000);
		if(OyuncuBilgi[playerid][oSuruklenen] != INVALID_PLAYER_ID) {
			if(KoltukSayiKontrol(GetPlayerVehicleID(playerid)) < 2 || OyuncuBilgi[playerid][oSuruklemeTipi] == 1) {
				HataMesaji(playerid, "Bu araç uygun olmadýðýndan veya yaralý sürüklediðiniz kiþi araca bindirilemedi.");
			    new hedefid = OyuncuBilgi[playerid][oSuruklenen];
				OyuncuBilgi[playerid][oSuruklenen] = INVALID_PLAYER_ID;
				if(IsPlayerConnected(hedefid)) {
					OyuncuBilgi[hedefid][oSurukleniyor] = INVALID_PLAYER_ID;
					new emote[64];
					format(emote, sizeof(emote), "%s isimli kiþiyi sürüklemeyi býrakýr.", OyuncuIsim(hedefid));
					cmd_me(playerid, emote);
					TogglePlayerControllable(hedefid, true);
				}
				return 1;
			}
			new koltukid = KoltukKontrol(GetPlayerVehicleID(playerid), 2), oyuncuid = OyuncuBilgi[playerid][oSuruklenen];
			if(koltukid == -1) {
				HataMesaji(playerid, "Araçta boþ koltuk yok.");
			    new hedefid = OyuncuBilgi[playerid][oSuruklenen];
				OyuncuBilgi[playerid][oSuruklenen] = INVALID_PLAYER_ID;
				if(IsPlayerConnected(hedefid)) {
					OyuncuBilgi[hedefid][oSurukleniyor] = INVALID_PLAYER_ID;
					new emote[64];
					format(emote, sizeof(emote), "%s isimli kiþiyi sürüklemeyi býrakýr.", OyuncuIsim(hedefid));
					cmd_me(playerid, emote);
					TogglePlayerControllable(hedefid, true);
				}
				return 1;
			}

			TogglePlayerControllable(oyuncuid, false);
			OyuncuBilgi[playerid][oSuruklenen] = INVALID_PLAYER_ID;
			PutPlayerInVehicle(oyuncuid, GetPlayerVehicleID(playerid), koltukid);
			new emote[64];
			format(emote, sizeof(emote), "%s adlý kiþiyi araca atar.", OyuncuIsim(oyuncuid));
			cmd_me(playerid, emote);
		}
	    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER && GetPlayerWeapon(playerid) != WEAPON_UZI && GetPlayerWeapon(playerid) != WEAPON_MP5 && GetPlayerWeapon(playerid) != WEAPON_AK47 && GetPlayerWeapon(playerid) != WEAPON_M4 && GetPlayerWeapon(playerid) != WEAPON_TEC9)
	        SetPlayerArmedWeapon(playerid, 0);
	}
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    if(OyuncuBilgi[playerid][oDialog] != -1) DialogGoster(playerid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
	    if(OyuncuBilgi[playerid][oUberIsbasi] == true) {
			OyuncuBilgi[playerid][oUberIsbasi] = false;
			UyariMesaji(playerid, "Araçtan indiðiniz için uber iþbaþýnýz iptal oldu.");
			DisablePlayerCheckpoint(playerid);
			new aracid = Arac_IDBul(OyuncuBilgi[playerid][oSonBinilenArac]);
			if(AracBilgi[aracid][aTaksiMetreDurum] == true) {
			    AracBilgi[aracid][aTaksiMetreDurum] = false, AracBilgi[aracid][aTaksiMetre] = 0.0;
				SunucuMesaji(playerid, "Araçtan inmeye çalýþtýðýn için taksimetre kapatýldý.");
			}
	    }
	    if(OyuncuBilgi[playerid][oKamyoncu] != -1) OyuncuBilgi[playerid][oKamyoncu] = -1, DisablePlayerCheckpoint(playerid);
	    foreach (new i : Player) if(OyuncuBilgi[i][oIzlenen] == playerid) PlayerSpectatePlayer(i, playerid);
        for(new i; i < 4; i++) TextDrawHideForPlayer(playerid, DashcamText[OyuncuBilgi[playerid][oSonBinilenArac]][i]);
		if(OyuncuBilgi[playerid][oTemizlikCP] > 0) {
			DisablePlayerCheckpoint(playerid);
		    OyuncuBilgi[playerid][oTemizlikCP] = 0;
		    new id = Arac_IDBul(OyuncuBilgi[playerid][oSonBinilenArac]);
		    if(AracBilgi[id][aracModel] == 574) Arac_Sil(id);
		}
		if(OyuncuBilgi[playerid][oTamirSure] > 0) {
		    for(new i = 0; i < MAKSIMUM_MODIFIYENOKTASI; i++) if(ModifiyeNoktasi[i][modifiyeKullanimda] == true && ModifiyeNoktasi[i][modifiyeKullanan] == playerid) ModifiyeNoktasi[i][modifiyeKullanan] = INVALID_PLAYER_ID;
			SunucuMesaji(playerid, "Tamir sýrasýnda araçtan indiðin için tamir iþlemi iptal edildi."), OyuncuBilgi[playerid][oTamirSure] = 0;
		}
        if(OyuncuBilgi[playerid][oHirsizSure] > 0) {
            OyuncuBilgi[playerid][oHirsizSure] = 0;
            OyuncuBilgi[playerid][oHirsizArac] = INVALID_VEHICLE_ID;
            UyariMesaji(playerid, "Araç parçalatma araçtan indiðin için iptal edildi.");
        }
        if(OyuncuBilgi[playerid][oArizaTamirSure] > 0) {
            OyuncuBilgi[playerid][oArizaTamirSure] = 0;
            OyuncuBilgi[playerid][oArizaliArac] = INVALID_VEHICLE_ID;
            UyariMesaji(playerid, "Arýza tamiri araçtan indiðin için iptal edildi.");
        }
        if(OyuncuBilgi[playerid][oArizaTespitSure] > 0) {
            OyuncuBilgi[playerid][oArizaTespitSure] = 0;
            OyuncuBilgi[playerid][oArizaliArac] = INVALID_VEHICLE_ID;
            UyariMesaji(playerid, "Arýza tespiti araçtan indiðin için iptal edildi.");
        }
        if(OyuncuBilgi[playerid][oDuzKontak] > 0) {
            OyuncuBilgi[playerid][oDuzKontak] = 0;
            OyuncuBilgi[playerid][oHirsizArac] = INVALID_VEHICLE_ID;
            UyariMesaji(playerid, "Düz kontak araçtan indiðin için iptal edildi.");
        }
		if(OyuncuBilgi[playerid][oMarker] > -1) {
			DisablePlayerCheckpoint(playerid);
			SetPlayerMarkerForPlayer(playerid, OyuncuBilgi[playerid][oMarker], RENK_VARSAYILAN);
			if(OyuncuBilgi[playerid][oIsbasi] == true) {
				if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) SetPlayerColor(playerid, RENK_PDISBASI);
				else if(OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL) SetPlayerColor(playerid, RENK_FMDISBASI);
				else if(OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) SetPlayerColor(playerid, RENK_GOVISBASI);
			}
			else SetPlayerColor(OyuncuBilgi[playerid][oMarker], RENK_VARSAYILAN);
			IsimLabelGuncelle(OyuncuBilgi[playerid][oMarker]);
			OyuncuBilgi[playerid][oMarker] = -1;
		}
	}
	if(oldstate == PLAYER_STATE_DRIVER) PlayerTextDrawHide(playerid, AracHizGosterge[playerid]);
	return true;
}

public OnPlayerEnterCheckpoint(playerid)
{
    DisablePlayerCheckpoint(playerid);
    if(OyuncuBilgi[playerid][oYaris] > -1) {
        new id = OyuncuBilgi[playerid][oYaris];
        if(id == -1 || YarisBilgi[id][yarisKullanimda] == false) return HataMesaji(playerid, "Yarýþta bir sorun oluþtu.");
        switch(OyuncuBilgi[playerid][oYarisCP]) {
            case 1: {
                if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][3], YarisBilgi[id][yarisPos][4], YarisBilgi[id][yarisPos][5], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
        	case 2: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][6], YarisBilgi[id][yarisPos][7], YarisBilgi[id][yarisPos][8], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
			case 3: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][9], YarisBilgi[id][yarisPos][10], YarisBilgi[id][yarisPos][11], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 4: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][12], YarisBilgi[id][yarisPos][13], YarisBilgi[id][yarisPos][14], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 5: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][15], YarisBilgi[id][yarisPos][16], YarisBilgi[id][yarisPos][17], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 6: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][18], YarisBilgi[id][yarisPos][19], YarisBilgi[id][yarisPos][20], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 7: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][21], YarisBilgi[id][yarisPos][22], YarisBilgi[id][yarisPos][23], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 8: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][24], YarisBilgi[id][yarisPos][25], YarisBilgi[id][yarisPos][26], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 9: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][27], YarisBilgi[id][yarisPos][28], YarisBilgi[id][yarisPos][29], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 10: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][30], YarisBilgi[id][yarisPos][31], YarisBilgi[id][yarisPos][32], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 11: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][33], YarisBilgi[id][yarisPos][34], YarisBilgi[id][yarisPos][35], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 12: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][36], YarisBilgi[id][yarisPos][37], YarisBilgi[id][yarisPos][38], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 13: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][39], YarisBilgi[id][yarisPos][40], YarisBilgi[id][yarisPos][41], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 14: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][42], YarisBilgi[id][yarisPos][43], YarisBilgi[id][yarisPos][44], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 15: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][45], YarisBilgi[id][yarisPos][46], YarisBilgi[id][yarisPos][47], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 16: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][48], YarisBilgi[id][yarisPos][49], YarisBilgi[id][yarisPos][50], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 17: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][51], YarisBilgi[id][yarisPos][52], YarisBilgi[id][yarisPos][53], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 18: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][54], YarisBilgi[id][yarisPos][55], YarisBilgi[id][yarisPos][56], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 19: {
				if(OyuncuBilgi[playerid][oYarisCP] != YarisBilgi[id][yarisMaksCP]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][57], YarisBilgi[id][yarisPos][58], YarisBilgi[id][yarisPos][59], 10.0), OyuncuBilgi[playerid][oYarisCP]++;
                else {
	            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
	            	else {
	            	    new oyuncuid = YarisBilgi[id][yarisSahip];
	            	    YarisBilgi[id][yarisSiralama]++;
	            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
	            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
					}
                }
			}
            case 20: {
            	if(OyuncuBilgi[playerid][oYarisTur] != YarisBilgi[id][yarisTur]) SetPlayerCheckpoint(playerid, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0), OyuncuBilgi[playerid][oYarisCP] = 1, OyuncuBilgi[playerid][oYarisTur]++;
            	else {
            	    new oyuncuid = YarisBilgi[id][yarisSahip];
            	    YarisBilgi[id][yarisSiralama]++;
            	    SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s yarýþý bitirdi ve %d. oldu.", RENK_YARIS >>> 8, OyuncuIsim(playerid), YarisBilgi[id][yarisSiralama]);
            	    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin ve %d. oldun.", RENK_YARIS >>> 8, YarisBilgi[id][yarisSiralama]);
				}
            }
        }
    }
	if(OyuncuBilgi[playerid][oTemizlikCP] > 0) {
	    if(!IsPlayerInAnyVehicle(playerid) || GetVehicleModel(GetPlayerVehicleID(playerid)) != 574) {
			HataMesaji(playerid, "Temizlik aracýnda olmadýðýnýz için meslek iptal edildi.");
   			return OyuncuBilgi[playerid][oTemizlikCP] = 0;
		}
	    switch(OyuncuBilgi[playerid][oTemizlikCP]) {
			case 1: SetPlayerCheckpoint(playerid, 1673.3002, -1870.8267, 13.1158, 5.0);
			case 2: SetPlayerCheckpoint(playerid, 1691.2950, -1827.1161, 13.1077, 5.0);
			case 3: SetPlayerCheckpoint(playerid, 1724.9496, -1816.9520, 13.0852, 5.0);
			case 4: SetPlayerCheckpoint(playerid, 1801.0387, -1834.0149, 13.1154, 5.0);
			case 5: SetPlayerCheckpoint(playerid, 1818.9348, -1865.4240, 13.1390, 5.0);
			case 6: SetPlayerCheckpoint(playerid, 1835.5515, -1934.2542, 13.1024, 5.0);
			case 7: SetPlayerCheckpoint(playerid, 1915.9050, -1934.7585, 13.1079, 5.0);
			case 8: SetPlayerCheckpoint(playerid, 1979.1445, -1935.0881, 13.1077, 5.0);
			case 9: SetPlayerCheckpoint(playerid, 2066.1221, -1935.4735, 13.1028, 5.0);
			case 10: SetPlayerCheckpoint(playerid, 2083.3289, -1912.1759, 13.1076, 5.0);
			case 11: SetPlayerCheckpoint(playerid, 2103.9839, -1897.1622, 13.0612, 5.0);
			case 12: SetPlayerCheckpoint(playerid, 2197.8833, -1897.0981, 13.4843, 5.0);
			case 13: SetPlayerCheckpoint(playerid, 2220.6489, -1872.9314, 13.1079, 5.0);
			case 14: SetPlayerCheckpoint(playerid, 2218.1216, -1772.1619, 13.0362, 5.0);
			case 15: SetPlayerCheckpoint(playerid, 2220.7896, -1703.6927, 13.2360, 5.0);
			case 16: SetPlayerCheckpoint(playerid, 2227.4563, -1667.9086, 14.7021, 5.0);
			case 17: SetPlayerCheckpoint(playerid, 2250.7678, -1659.8290, 15.0079, 5.0);
			case 18: SetPlayerCheckpoint(playerid, 2318.1646, -1662.4972, 13.7420, 5.0);
			case 19: SetPlayerCheckpoint(playerid, 2344.6064, -1629.5311, 16.8984, 5.0);
			case 20: SetPlayerCheckpoint(playerid, 2345.0503, -1549.7290, 23.5610, 5.0);
			case 21: SetPlayerCheckpoint(playerid, 2345.4348, -1501.9253, 23.5607, 5.0);
			case 22: SetPlayerCheckpoint(playerid, 2316.6028, -1481.6000, 23.2197, 5.0);
			case 23: SetPlayerCheckpoint(playerid, 2236.3787, -1481.4912, 23.2825, 5.0);
			case 24: SetPlayerCheckpoint(playerid, 2215.1021, -1461.9697, 23.5533, 5.0);
			case 25: SetPlayerCheckpoint(playerid, 2215.3174, -1403.9333, 23.5474, 5.0);
			case 26: SetPlayerCheckpoint(playerid, 2187.7473, -1382.2455, 23.5533, 5.0);
			case 27: SetPlayerCheckpoint(playerid, 2138.5227, -1381.6178, 23.5573, 5.0);
			case 28: SetPlayerCheckpoint(playerid, 2110.5930, -1413.1216, 23.5533, 5.0);
			case 29: SetPlayerCheckpoint(playerid, 2098.8364, -1458.9722, 23.5528, 5.0);
			case 30: SetPlayerCheckpoint(playerid, 2025.4912, -1457.9963, 14.3833, 5.0);
			case 31: SetPlayerCheckpoint(playerid, 1932.8335, -1457.7943, 13.1079, 5.0);
			case 32: SetPlayerCheckpoint(playerid, 1871.4337, -1457.5389, 13.1078, 5.0);
			case 33: SetPlayerCheckpoint(playerid, 1854.7939, -1426.4708, 13.1157, 5.0);
			case 34: SetPlayerCheckpoint(playerid, 1855.4736, -1358.2740, 13.1139, 5.0);
			case 35: SetPlayerCheckpoint(playerid, 1855.4199, -1299.9534, 13.1117, 5.0);
			case 36: SetPlayerCheckpoint(playerid, 1838.6007, -1258.8984, 13.1701, 5.0);
			case 37: SetPlayerCheckpoint(playerid, 1776.6851, -1280.1757, 13.1976, 5.0);
			case 38: SetPlayerCheckpoint(playerid, 1734.1278, -1296.6475, 13.1725, 5.0);
			case 39: SetPlayerCheckpoint(playerid, 1664.0160, -1295.2018, 14.0752, 5.0);
			case 40: SetPlayerCheckpoint(playerid, 1585.4867, -1294.6406, 17.1221, 5.0);
			case 41: SetPlayerCheckpoint(playerid, 1506.3103, -1294.6472, 13.9809, 5.0);
			case 42: SetPlayerCheckpoint(playerid, 1453.3208, -1310.2229, 13.1078, 5.0);
			case 43: SetPlayerCheckpoint(playerid, 1451.4664, -1416.7731, 13.1080, 5.0);
			case 44: SetPlayerCheckpoint(playerid, 1443.7689, -1496.7885, 13.1006, 5.0);
			case 45: SetPlayerCheckpoint(playerid, 1426.6392, -1566.8275, 13.0768, 5.0);
			case 46: SetPlayerCheckpoint(playerid, 1426.7946, -1665.8611, 13.1080, 5.0);
			case 47: SetPlayerCheckpoint(playerid, 1410.0070, -1728.4338, 13.1159, 5.0);
			case 48: SetPlayerCheckpoint(playerid, 1386.3816, -1748.8569, 13.1080, 5.0);
			case 49: SetPlayerCheckpoint(playerid, 1385.4958, -1847.2990, 13.1080, 5.0);
			case 50: SetPlayerCheckpoint(playerid, 1405.3374, -1874.6361, 13.1080, 5.0);
			case 51: SetPlayerCheckpoint(playerid, 1490.0530, -1876.0364, 13.1080, 5.0);
			case 52: SetPlayerCheckpoint(playerid, 1573.1364, -1876.2809, 13.1080, 5.0);
			case 53: SetPlayerCheckpoint(playerid, 1620.5167, -1856.3042, 13.2726, 5.0);
			case 54: {
			    if(OyuncuBilgi[playerid][oMeslekDelay] > gettime()) {
					new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
					GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
					format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) mesleði hile ile bitirdi.", SaniyeliTarih(), oyuncu_isim, OyuncuBilgi[playerid][oID]);
					Gunluk_LogKaydet(log_icerik);
					Log_Kaydet("loglar/temizlikci.txt", "%s", log_icerik);
					return HileKickle(playerid, 12);
			    }
			    new arac = GetPlayerVehicleID(playerid), id = Arac_IDBul(arac);
			    RemovePlayerFromVehicle(playerid);
			    Arac_Sil(id);
			    OyuncuBilgi[playerid][oBankaPara] += 300;
			    SunucuMesaji(playerid, "Temizliði bitirdin ve $300 kazandýn, para banka hesabýna eklendi.");
			    OyuncuBilgi[playerid][oTemizlikCP] = 0;
				new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
				GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
				format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) mesleði bitirdi.", SaniyeliTarih(), oyuncu_isim, OyuncuBilgi[playerid][oID]);
				Gunluk_LogKaydet(log_icerik);
				Log_Kaydet("loglar/temizlikci.txt", "%s", log_icerik);
			    OyuncuKaydet(playerid);
			    return 1;
			}
			default: SetPlayerCheckpoint(playerid, 1673.3002, -1870.8267, 13.1158, 5.0);
		}
		OyuncuBilgi[playerid][oTemizlikCP]++;
	}
    if(OyuncuBilgi[playerid][oKonum] != -1) return SunucuMesaji(playerid, "%s adlý konuma ulaþtýn.", GPSVeri[OyuncuBilgi[playerid][oKonum]][gpsIsim]), OyuncuBilgi[playerid][oKonum] = -1;
    if(OyuncuBilgi[playerid][oLokasyon] != -1) return SunucuMesaji(playerid, "%s adlý konuma ulaþtýn.", GPSOyuncu[playerid][OyuncuBilgi[playerid][oLokasyon]][gpsIsim]), OyuncuBilgi[playerid][oLokasyon] = -1;
    if(OyuncuBilgi[playerid][oAdres] != -1) return SunucuMesaji(playerid, "Belirlediðin adrese ulaþtýn."), OyuncuBilgi[playerid][oAdres] = -1;
    if(OyuncuBilgi[playerid][objeLokasyon] != -1) return SunucuMesaji(playerid, "Seçtiðin objeye ulaþtýn."), OyuncuBilgi[playerid][objeLokasyon] = -1;
    if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) return SunucuMesaji(playerid, "Konuma ulaþtýn."), OyuncuBilgi[playerid][oIsaretliKonum] = 0;
    if(OyuncuBilgi[playerid][oIsaretliMeslek] != -1) return SunucuMesaji(playerid, "Seçtiðin mesleðe ulaþtýn, /meslek komutuyla mesleðe katýlabilirsin."), OyuncuBilgi[playerid][oIsaretliMeslek] = -1;
    if(OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID) return OyuncuBilgi[playerid][oGPSArac] = INVALID_VEHICLE_ID;
    /*if(OyuncuBilgi[playerid][oMateryalTasiyor] == true) {
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, -382.3842, -1426.2419, 26.1702)) {
 		    HataMesaji(playerid, "Teslimat noktasýndan farklý bir noktada teslimat denediðin için iþlem iptal edildi.");
		    return OyuncuBilgi[playerid][oMateryalTasiyor] = false;
 		}
        OyuncuBilgi[playerid][oMateryalTasiyor] = false;
		OyuncuBilgi[playerid][oMateryal] += 300;
		SunucuMesaji(playerid, "Paketi teslim ettin ve 300 materyal kazandýn.");
    }*/
	if(OyuncuBilgi[playerid][oKamyoncu] != -1) {
	    if(!IsPlayerInAnyVehicle(playerid)) {
 		    HataMesaji(playerid, "Teslimat noktasýna araçsýz girdiðin için iþlemin iptal edildi.");
		    OyuncuBilgi[playerid][oKamyoncu] = -1;
		    return 1;
	    }
	    if(OyuncuBilgi[playerid][oMeslekDelay] > gettime() || KamyoncuHileKontrol[GetPlayerVehicleID(playerid)] > gettime()) {
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) mesleði hile bitirdi.", SaniyeliTarih(), oyuncu_isim, OyuncuBilgi[playerid][oID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/kamyoncu.txt", "%s", log_icerik);
			return HileKickle(playerid, 12);
	    }
 		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1116.4115, -926.6071, 43.1797) && !IsPlayerInRangeOfPoint(playerid, 5.0, 994.1617, -1350.8613, 13.3562) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1355.0039, -1749.1360, 13.3728) &&
		!IsPlayerInRangeOfPoint(playerid, 5.0, 2151.4697, -1176.2104, 23.8203) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1997.1281, -1275.4493, 23.8203) && !IsPlayerInRangeOfPoint(playerid, 5.0, 2856.1252, -1540.3386, 10.9141) &&
		!IsPlayerInRangeOfPoint(playerid, 5.0, 814.9379, -1551.8552, 13.5536) && !IsPlayerInRangeOfPoint(playerid, 5.0, 2769.8667 ,-1615.1829, 10.9219)) {
 		    HataMesaji(playerid, "Teslimat noktasýndan farklý bir noktada teslimat denediðin için iþlem iptal edildi.");
		    KamyoncuYuk[GetPlayerVehicleID(playerid)] = -1;
		    return KamyoncuCP[GetPlayerVehicleID(playerid)] = -1;
 		}
 		if(OyuncuBilgi[playerid][oMeslek] != 1) {
 		    HataMesaji(playerid, "Kamyoncu mesleðinde olmadýðýn için iþlem iptal edildi.");
		    KamyoncuYuk[GetPlayerVehicleID(playerid)] = -1;
		    return KamyoncuCP[GetPlayerVehicleID(playerid)] = -1;
 		}
	    KamyoncuYuk[GetPlayerVehicleID(playerid)] = -1;
	    KamyoncuCP[GetPlayerVehicleID(playerid)] = -1;
		OyuncuBilgi[playerid][oKamyoncuTeslimat]++;
		new ucret = 100, bilgi[144];
		if(OyuncuBilgi[playerid][oKamyoncuTeslimat] >= 100) ucret = 200;
	 	if(OyuncuBilgi[playerid][oKamyoncuTeslimat] >= 250) ucret = 210;
		if(OyuncuBilgi[playerid][oKamyoncuTeslimat] >= 750) ucret = 225;
		if(OyuncuBilgi[playerid][oKamyoncuTeslimat] >= 1500) ucret = 250;
		/*if(OyuncuBilgi[playerid][oKamyoncu] == 1) {
			switch(random(20)) {
				case 3: {
				    switch(random(3)) {
					    case 0: {
		                    if(SilahSlotKontrol(playerid, SilahSlotBul[24]) && SilahSlotBul[24] != 0) return HataMesaji(playerid, "Taþýdýðýn kargo sonucunda Deagle kazandýn ancak zaten bir tabancan olduðu için alamadýn.");

		                    Silahver(playerid, 24, 7);
		                    format(bilgi, sizeof(bilgi), "Taþýdýðýn kargo sonucunda Deagle kazandýn.");
					    }
					    case 1: {
		                    if(SilahSlotKontrol(playerid, SilahSlotBul[22]) && SilahSlotBul[22] != 0) return HataMesaji(playerid, "Taþýdýðýn kargo sonucunda 9mm kazandýn ancak zaten bir tabancan olduðu için alamadýn.");

		                    Silahver(playerid, 22, 17);
		                    format(bilgi, sizeof(bilgi), "Taþýdýðýn kargo sonucunda 9mm kazandýn.");
					    }
					    case 2: {
		                    if(SilahSlotKontrol(playerid, SilahSlotBul[25]) && SilahSlotBul[25] != 0) return HataMesaji(playerid, "Taþýdýðýn kargo sonucunda Shotgun kazandýn ancak zaten bir tüfeðin olduðu için alamadýn.");

		                    Silahver(playerid, 25, 10);
		                    format(bilgi, sizeof(bilgi), "Taþýdýðýn kargo sonucunda Shotgun kazandýn.");
					    }
				    }
				}
			    case 2: OyuncuBilgi[playerid][oMateryal] += 300, format(bilgi, sizeof(bilgi), "Taþýdýðýn kargo sonucunda 300 materyal kazandýn.");
			    case 9: OyuncuBilgi[playerid][oMateryal] += 200, format(bilgi, sizeof(bilgi), "Taþýdýðýn kargo sonucunda 200 materyal kazandýn.");
			    case 5: OyuncuBilgi[playerid][oMateryal] += 150, format(bilgi, sizeof(bilgi), "Taþýdýðýn kargo sonucunda 150 materyal kazandýn.");
			    case 12: OyuncuBilgi[playerid][oMateryal] += 100, format(bilgi, sizeof(bilgi), "Taþýdýðýn kargo sonucunda 100 materyal kazandýn.");
			    default: bilgi[0] = 0;
			}
			ucret = ucret + ucret / 2;
		}
		else if(OyuncuBilgi[playerid][oKamyoncu] == 2) {
			switch(random(8)) {
			    case 2: OyuncuBilgi[playerid][oUyusturucu] += 2, format(bilgi, sizeof(bilgi), "Taþýdýðýn kargo sonucunda 2 gram uyuþturucu kazandýn.");
			    case 5: OyuncuBilgi[playerid][oUyusturucu] += 1, format(bilgi, sizeof(bilgi), "Taþýdýðýn kargo sonucunda 1 gram uyuþturucu kazandýn.");
			    default: bilgi[0] = 0;
			}
			ucret = ucret + ucret / 2;
		}*/
		OyuncuBilgi[playerid][oBankaPara] += ucret;
		SendClientMessageEx(playerid, RENK_SARI, "[SMS] {D2D2D2}Yükünü baþarýyla teslim ettin, %s banka hesabýna yatýrýldý. | Gönderen: Taþýmacýlýk Firmasý", NumaraFormati(ucret));
		if(OyuncuBilgi[playerid][oKamyoncuTeslimat] == 100) SunucuMesaji(playerid, "Kamyoncu mesleðinde level atladýn, artýk 2 levelsin.");
		else if(OyuncuBilgi[playerid][oKamyoncuTeslimat] == 250) SunucuMesaji(playerid, "Kamyoncu mesleðinde level atladýn, artýk 3 levelsin.");
		else if(OyuncuBilgi[playerid][oKamyoncuTeslimat] == 750) SunucuMesaji(playerid, "Kamyoncu mesleðinde level atladýn, artýk 4 levelsin.");
		else if(OyuncuBilgi[playerid][oKamyoncuTeslimat] == 1500) SunucuMesaji(playerid, "Kamyoncu mesleðinde level atladýn, artýk 5 levelsin.");
		if(!isnull(bilgi)) SunucuMesaji(playerid, "%s", bilgi);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) mesleði bitirdi.", SaniyeliTarih(), oyuncu_isim, OyuncuBilgi[playerid][oID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/kamyoncu.txt", "%s", log_icerik);
		OyuncuBilgi[playerid][oKamyoncu] = -1;
	}
	if(OyuncuBilgi[playerid][oEhliyetTesti] > 0) {
	    switch(OyuncuBilgi[playerid][oEhliyetTesti]) {
	        case 1: SetPlayerCheckpoint(playerid, 1965.5988, -1993.7076, 13.2098, 6.0);
	        case 2: SetPlayerCheckpoint(playerid, 1959.2209, -2051.3696, 13.1257, 6.0);
	        case 3: SetPlayerCheckpoint(playerid, 1959.3629, -2151.2639, 13.1264, 6.0);
	        case 4: SetPlayerCheckpoint(playerid, 1884.5019, -2163.6899, 13.1269, 6.0);
	        case 5: SetPlayerCheckpoint(playerid, 1746.2696, -2164.3173, 13.1280, 6.0);
			case 6: SetPlayerCheckpoint(playerid, 1559.1717, -2097.7087, 33.5347, 6.0);
			case 7: SetPlayerCheckpoint(playerid, 1524.4437, -1870.9130, 13.1255, 6.0);
			case 8: SetPlayerCheckpoint(playerid, 1407.4444, -1870.2750, 13.1269, 6.0);
			case 9: SetPlayerCheckpoint(playerid, 1261.1503, -1849.7714, 13.1265, 6.0);
			case 10: SetPlayerCheckpoint(playerid, 1149.9420, -1849.6590, 13.1377, 6.0);
			case 11: SetPlayerCheckpoint(playerid, 1067.5103, -1849.9252, 13.1412, 6.0);
			case 12: SetPlayerCheckpoint(playerid, 1012.8892, -1791.1086, 13.6299, 6.0);
			case 13: SetPlayerCheckpoint(playerid, 923.5751, -1770.7576, 13.1332, 6.0);
			case 14: SetPlayerCheckpoint(playerid, 919.7781, -1672.2935, 13.1346, 6.0);
			case 15: SetPlayerCheckpoint(playerid, 920.6495, -1579.4187, 13.1265, 6.0);
			case 16: SetPlayerCheckpoint(playerid, 1018.6257, -1574.6986, 13.1275, 6.0);
			case 17: SetPlayerCheckpoint(playerid, 1161.1673, -1574.2719, 13.0187, 6.0);
			case 18: SetPlayerCheckpoint(playerid, 1293.3776, -1577.3565, 13.1266, 6.0);
			case 19: SetPlayerCheckpoint(playerid, 1295.4383, -1743.3360, 13.1266, 6.0);
			case 20: SetPlayerCheckpoint(playerid, 1295.6708, -1853.7335, 13.1269, 6.0);
			case 21: SetPlayerCheckpoint(playerid, 1398.1779, -1874.7246, 13.1276, 6.0);
			case 22: SetPlayerCheckpoint(playerid, 1566.6182, -1875.0908, 13.1271, 6.0);
			case 23: SetPlayerCheckpoint(playerid, 1690.0065, -1847.3403, 13.1276, 6.0);
			case 24: SetPlayerCheckpoint(playerid, 1764.3599, -1826.4664, 13.1274, 6.0);
			case 25: SetPlayerCheckpoint(playerid, 1816.4396, -1835.6765, 13.1578, 6.0);
			case 26: SetPlayerCheckpoint(playerid, 1819.2863, -1926.8341, 13.1249, 6.0);
			case 27: SetPlayerCheckpoint(playerid, 1954.7302, -1934.7843, 13.1272, 6.0);
			case 28: SetPlayerCheckpoint(playerid, 1973.0616, -1991.3848, 13.2935, 6.0);
			case 29: {
			    new arac = GetPlayerVehicleID(playerid);
			    if(AracCan(arac) > 750.0) {
				    DisablePlayerCheckpoint(playerid);
				    SunucuMesaji(playerid, "Tebrikler! Testi baþarýyla tamamladýn. Artýk bir sürücü lisansýn var.");
				    RemovePlayerFromVehicle(playerid);
				    ASpawn(arac);
				    OyuncuBilgi[playerid][oEhliyet] = true;
				    OyuncuBilgi[playerid][oEhliyetTesti] = 0;
				    return 1;
				}
				else if(AracCan(arac) < 751.0) {
				    DisablePlayerCheckpoint(playerid);
				    RemovePlayerFromVehicle(playerid);
				    ASpawn(arac);
				    HataMesaji(playerid, "Araç hasarlý olduðu için testi geçemedin.");
				    OyuncuBilgi[playerid][oEhliyetTesti] = 0;
				    OyuncuBilgi[playerid][oEhliyet] = false;
				    return 1;
				}
			}
		}
		OyuncuBilgi[playerid][oEhliyetTesti]++;
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
	if(objectid == YatBilgi[yatObject] && YatBilgi[yatOto] == 1)
	{
	    if(YatBilgi[yatStep] < 67)
	    {
	        YatBilgi[yatStep]++;
	        MoveObject(YatBilgi[yatObject], YatRota[YatBilgi[yatStep]][0], YatRota[YatBilgi[yatStep]][1], YatRota[YatBilgi[yatStep]][2], 5, YatRota[YatBilgi[yatStep]][3], YatRota[YatBilgi[yatStep]][4], YatRota[YatBilgi[yatStep]][5]);
	    }
	    else
	    {
	        YatBilgi[yatOto] = 0;
	        YatBilgi[yatStep] = 0;
	    }
	}
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	new id = Arac_IDBul(vehicleid);
	if(id != -1) ChangeVehicleColor(vehicleid, AracBilgi[id][aracRenk1], AracBilgi[id][aracRenk2]);
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	foreach(new x : Player) if(OyuncuBilgi[x][oGiris] == true && OyuncuBilgi[x][oIzlenen] == playerid) {
		PlayerSpectatePlayer(x, playerid);
		SetPlayerInterior(x, newinteriorid);
		SetPlayerVirtualWorld(x, GetPlayerVirtualWorld(playerid));
	}
	return true;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(IsPlayerNPC(playerid) || !IsPlayerConnected(playerid)) return 0;
    if((GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || OyuncuBilgi[playerid][oYarali] > 0) && newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP)) return ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 4.0, 0, 1, 1, 0, 0, 1);

	if(OyuncuBilgi[playerid][oYuruyusStil] > 0 && ((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT))
		&& GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
		    if(OyuncuBilgi[playerid][oTedaviSure] == 0 && OyuncuBilgi[playerid][oYaraliSure] == 0 && OyuncuBilgi[playerid][oIlkYardimSure] == 0 && !IsPlayerInAnyVehicle(playerid)) YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
	}
	new id;
	if(newkeys & KEY_SUBMISSION && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return cmd_far(playerid, "");
	if(newkeys & KEY_HANDBRAKE && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
    }
	if(newkeys & KEY_SPRINT && GetPVarInt(playerid, "anim") != 0)
	{
	    ClearAnimations(playerid);
		switch(OyuncuBilgi[playerid][oGeciciKiyafet]) {
			case 0: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oKiyafet]);
			default: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oGeciciKiyafet]);
		}
        TextDrawHideForPlayer(playerid, AnimBozText);
        SetPVarInt(playerid, "anim", 0);
        if(GetPVarInt(playerid, "kelepce_anim") == 1) SetPVarInt(playerid, "kelepce_anim", 0);
    }
    if(newkeys & KEY_WALK)
    {
    if(NPC_Yakin(playerid) == 1) cmd_aktor(playerid, "");
    }
	if(newkeys & KEY_YES)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 1726.88, -1636.61, 20.22)) cmd_paintball(playerid, "");
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 1279.7369, -789.1315, 1084.0078) && OyuncuBilgi[playerid][oHitman] > 0 && GetPlayerVirtualWorld(playerid) == 1) {
			OyuncuPosDegistir(playerid, -21.2619, 82.0709, 3.1096), SetPlayerFacingAngle(playerid, 70);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerInterior(playerid, 0);
		}
		if(IsPlayerInRangeOfPoint(playerid, 3.0, -21.2619, 82.0709, 3.1096) && OyuncuBilgi[playerid][oHitman] > 0 && GetPlayerVirtualWorld(playerid) == 0) {
			OyuncuPosDegistir(playerid, 1279.7369, -789.1315, 1084.0078), SetPlayerFacingAngle(playerid, 90);
		    SetPlayerVirtualWorld(playerid, 1);
		    SetPlayerInterior(playerid, 5);
		}
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 772.7415, -1349.4595, 13.4830)) {
		    if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "Bu kapýyý sadece LSPD kullanabilir.");
		    if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballdayken buraya giriþ yapamazsýn.");
		    
		    if(IsPlayerInAnyVehicle(playerid)) AracPosDegistir(GetPlayerVehicleID(playerid), 2298.8982, 2497.3420, -7.4531), SetVehicleZAngle(GetPlayerVehicleID(playerid), 180);
		    else OyuncuPosDegistir(playerid, 2298.8982, 2497.3420, -7.4531), SetPlayerFacingAngle(playerid, 180);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		}
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 2298.8982, 2497.3420, -7.4531)) {
		    if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "Bu kapýyý sadece LSPD kullanabilir.");
		    if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballdayken buraya giriþ yapamazsýn.");

		    if(IsPlayerInAnyVehicle(playerid)) AracPosDegistir(GetPlayerVehicleID(playerid), 772.7415, -1349.4595, 13.4830), SetVehicleZAngle(GetPlayerVehicleID(playerid), 30);
		    else OyuncuPosDegistir(playerid, 772.7415, -1349.4595, 13.4830), SetPlayerFacingAngle(playerid, 30);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		}
		new yakin_arac = GetClosestCar(playerid, GetPlayerVehicleID(playerid));
		if(IsPlayerInRangeOfVehicle(playerid, yakin_arac, 6.0) && GetVehicleModel(yakin_arac) == 519)
		{
		    new Float:arac_can;
		    GetVehicleHealth(yakin_arac, arac_can);
		    if(arac_can <= 500.0) return HataMesaji(playerid, "Uçak hasar gördüðünden dolayý binemezsin.");
			cmd_me(playerid, "adlý kiþi Shamal model uçaða yolcu olarak biner.");
	     	OyuncuPosDegistir(playerid, 2.509036, 23.118730, 1199.593750);
	     	SetPlayerFacingAngle(playerid, 82.14);
	        SetCameraBehindPlayer(playerid);
			OyuncuBilgi[playerid][oVW] = yakin_arac;
			SetPlayerVirtualWorld(playerid, yakin_arac);
			OyuncuBilgi[playerid][oInterior] = 1;
	        SetPlayerInterior(playerid, 1);
			InsideShamal[playerid] = yakin_arac;
			return 1;
		}
		if(InsideShamal[playerid] != INVALID_VEHICLE_ID && IsPlayerInRangeOfPoint(playerid,3,2.509036, 23.118730, 1199.593750))
		{
	        cmd_me(playerid, "uçaktan dýþarý çýkar.");

	        if(InsideShamal[playerid] == INVALID_VEHICLE_ID || GetVehicleModel(InsideShamal[playerid]) != 519) {
	            Silahver(playerid, 46, 1);
	            OyuncuPosDegistir(playerid, 0.000000, 0.000000, 420.000000);
	        }
	        else {
	            new Float:XB, Float:YB, Float:ZB;
	            GetVehiclePos(InsideShamal[playerid], XB, YB, ZB);
	            OyuncuPosDegistir(playerid, XB-4, YB-2.3, ZB);

	            if(ZB > 50.0) Silahver(playerid, 46, 1);
	        }

	        OyuncuBilgi[playerid][oVW] = 0;
	        SetPlayerVirtualWorld(playerid, 0);
	        OyuncuBilgi[playerid][oInterior] = 0;
	        SetPlayerInterior(playerid, 0);
	        InsideShamal[playerid] = INVALID_VEHICLE_ID;
	        return 1;
	    }
		if((id = Bina_Yakin(playerid)) != -1 || (id = Cikis_Yakin(playerid)) != -1)
	    {
	        if(BinaBilgi[id][binaDurum] != 1 && BinaBilgi[id][binaDurum] != 4) return HataMesaji(playerid, "Bu binaya giriþ yapamazsýn.");
	        if(IsPlayerInAnyVehicle(playerid) && BinaBilgi[id][binaTur] != 10) return HataMesaji(playerid, "Araç içerisindeyken binaya giriþ yapamazsýn.");
	        if(GetPVarInt(playerid, "interior_delay") > gettime()) return HataMesaji(playerid, "Lütfen bu kadar hýzlý iþlem yapmayýnýz.");
			if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken bu iþlemi yapamazsýn.");
			if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballdayken buraya giriþ yapamazsýn.");
			
			SetPVarInt(playerid, "interior_delay", gettime() + 2);
            new aracid = GetPlayerVehicleID(playerid);
			SetPlayerInterior(playerid, BinaBilgi[id][bInterior]), SetPlayerVirtualWorld(playerid, BinaBilgi[id][bVW]);
			if(BinaBilgi[id][binaTur] != 10) OyuncuPosDegistir(playerid, BinaBilgi[id][bIPos][0], BinaBilgi[id][bIPos][1], BinaBilgi[id][bIPos][2]), SetPlayerFacingAngle(playerid, BinaBilgi[id][bIPos][3]);
			else if(BinaBilgi[id][binaTur] == 10) {
				if(IsPlayerInAnyVehicle(playerid)) {
				    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 0;

					AracPosDegistir(aracid, BinaBilgi[id][bIPos][0], BinaBilgi[id][bIPos][1], BinaBilgi[id][bIPos][2]);
					SetVehicleZAngle(aracid, BinaBilgi[id][bIPos][3]);
					SetVehicleVirtualWorld(aracid, GetPlayerVirtualWorld(playerid));
					LinkVehicleToInterior(aracid, GetPlayerInterior(playerid));
					AracBilgi[Arac_IDBul(aracid)][aracWorld] = BinaBilgi[id][bVW];
					AracBilgi[Arac_IDBul(aracid)][aracInt] = BinaBilgi[id][bInterior];
					Arac_Kaydet(Arac_IDBul(aracid));
				}
				else OyuncuPosDegistir(playerid, BinaBilgi[id][bIPos][0], BinaBilgi[id][bIPos][1], BinaBilgi[id][bIPos][2]), SetPlayerFacingAngle(playerid, BinaBilgi[id][bIPos][3]);
			}
			DondurulmaEtkisi(playerid);
			SetCameraBehindPlayer(playerid);
			foreach(new i : Player) if(OyuncuBilgi[i][oMarker] == playerid) SetPlayerCheckpoint(i, BinaBilgi[id][bPos][0], BinaBilgi[id][bPos][1], BinaBilgi[id][bPos][2], 5.0);
			return 1;
		}
		else if((id = Oyuncu_BinaKapida(playerid)) != -1 || (id = Oyuncu_CikisKapida(playerid)) != -1)
	    {
	        if(GetPVarInt(playerid, "interior_delay") > gettime()) return HataMesaji(playerid, "Lütfen bu kadar hýzlý iþlem yapmayýnýz.");
            if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken bu iþlemi yapamazsýn.");
            if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballdayken buraya giriþ yapamazsýn.");
            
			SetPVarInt(playerid, "interior_delay", gettime() + 2);
			SetPlayerInterior(playerid, BinaBilgi[id][bDisInt]), SetPlayerVirtualWorld(playerid, BinaBilgi[id][bDisVW]);
            if(BinaBilgi[id][binaTur] != 10) OyuncuPosDegistir(playerid, BinaBilgi[id][bPos][0], BinaBilgi[id][bPos][1], BinaBilgi[id][bPos][2]), SetPlayerFacingAngle(playerid, BinaBilgi[id][bIPos][3] - 180.0);
			else if(BinaBilgi[id][binaTur] == 10) {
				if(IsPlayerInAnyVehicle(playerid)) {
				    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 0;

				    new aracid = GetPlayerVehicleID(playerid);
					AracPosDegistir(aracid, BinaBilgi[id][bPos][0], BinaBilgi[id][bPos][1], BinaBilgi[id][bPos][2]);
					SetVehicleZAngle(aracid, BinaBilgi[id][bPos][3] - 180.0);
					SetVehicleVirtualWorld(id, BinaBilgi[id][bDisVW]);
					LinkVehicleToInterior(id, BinaBilgi[id][bDisInt]);
					AracBilgi[Arac_IDBul(aracid)][aracWorld] = BinaBilgi[id][bDisVW];
					AracBilgi[Arac_IDBul(aracid)][aracInt] = BinaBilgi[id][bDisInt];
					Arac_Kaydet(Arac_IDBul(aracid));
				}
				else OyuncuPosDegistir(playerid, BinaBilgi[id][bPos][0], BinaBilgi[id][bPos][1], BinaBilgi[id][bPos][2]), SetPlayerFacingAngle(playerid, BinaBilgi[id][bIPos][3] - 180.0);
			}
			DondurulmaEtkisi(playerid);
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		else if((id = Ev_Yakin(playerid)) != -1)
	    {
	        if(EvBilgi[id][evDurum] == 2) return HataMesaji(playerid, "Eve giriþ yapamazsýn. (Kilitli)");
			if(EvBilgi[id][evDurum] == 3) return HataMesaji(playerid, "Eve giriþ yapamazsýn. (Bakýmda)");
			if(EvBilgi[id][evDurum] == 4) return HataMesaji(playerid, "Eve giriþ yapamazsýn. (Mühürlü)");
			if(EvBilgi[id][evSahip] == 0 && OyuncuBilgi[playerid][oAdmin] < 1) return HataMesaji(playerid, "Satýlýk evlere sadece yöneticiler giriþ yapabilir!");
            if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araç içerisindeyken eve giriþ yapamazsýn.");
	        if(GetPVarInt(playerid, "interior_delay") > gettime()) return HataMesaji(playerid, "Lütfen bu kadar hýzlý iþlem yapmayýnýz.");
	        if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken bu iþlemi yapamazsýn.");
	        if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballdayken buraya giriþ yapamazsýn.");

			SetPVarInt(playerid, "interior_delay", gettime() + 2);
			OyuncuPosDegistir(playerid, EvBilgi[id][evIcPos][0], EvBilgi[id][evIcPos][1], EvBilgi[id][evIcPos][2]);
			SetPlayerFacingAngle(playerid, EvBilgi[id][evIcPos][3]);
	        DondurulmaEtkisi(playerid);
			SetPlayerInterior(playerid, EvBilgi[id][evInterior]);
			SetPlayerVirtualWorld(playerid, EvBilgi[id][evVW]);
			//SendClientMessageEx(playerid, RENK_SERVER, "Sistemsel Fiyat: {FFFFFF}%s {a9c4e4}| Vergi: {FFFFFF}%s/%s", NumaraFormati(EvBilgi[id][evFiyat]), NumaraFormati(EvBilgi[id][evVergi]), NumaraFormati(EvBilgi[id][evFiyat] / 2));
			if(EvBilgi[id][evLamba] == true) PlayerTextDrawShow(playerid, LambaText[playerid]), SunucuMesaji(playerid, "Evin lambalarý kapalý, ev menüsünden veya \"/evlamba\" yazarak açabilirsin.");
			SetCameraBehindPlayer(playerid);
			foreach(new i : Player) if(OyuncuBilgi[i][oMarker] == playerid) SetPlayerCheckpoint(i, EvBilgi[id][evPos][0], EvBilgi[id][evPos][1], EvBilgi[id][evPos][2], 5.0);
			return 1;
		}
		else if((id = Oyuncu_EvKapida(playerid)) != -1)
	    {
	        if(GetPVarInt(playerid, "interior_delay") > gettime()) return HataMesaji(playerid, "Lütfen bu kadar hýzlý iþlem yapmayýnýz.");
	        if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken bu iþlemi yapamazsýn.");
	        if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballdayken buraya giriþ yapamazsýn.");

			SetPVarInt(playerid, "interior_delay", gettime() + 2);
			OyuncuPosDegistir(playerid, EvBilgi[id][evPos][0], EvBilgi[id][evPos][1], EvBilgi[id][evPos][2]);
			SetPlayerFacingAngle(playerid, EvBilgi[id][evPos][3] - 180.0);
	        DondurulmaEtkisi(playerid);
			SetPlayerInterior(playerid, EvBilgi[id][evDisInt]);
			SetPlayerVirtualWorld(playerid, EvBilgi[id][evDisVW]);
            PlayerTextDrawHide(playerid, LambaText[playerid]);
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		else if((id = Isyeri_Yakin(playerid)) != -1)
	    {
	        if(IsyeriBilgi[id][isyeriDurum] == 2) return HataMesaji(playerid, "Bu iþyeri kilitli olduðu için giriþ yapamýyorsunuz.");
			if(IsyeriBilgi[id][isyeriDurum] == 3) return HataMesaji(playerid, "Bu iþyeri bakýmda olduðu için giriþ yapamýyorsunuz.");
			if(GetPVarInt(playerid, "interior_delay") > gettime()) return HataMesaji(playerid, "Lütfen bu kadar hýzlý iþlem yapmayýnýz.");
			if(OyuncuBilgi[playerid][oAdminDurum] == false && IsyeriBilgi[id][isyeriSahip] != OyuncuBilgi[playerid][oID] && IsyeriBilgi[id][isyeriOrtak] != OyuncuBilgi[playerid][oID]) {
				if(IsyeriBilgi[id][iGirisUcret] != 0 && IsyeriBilgi[id][iGirisUcret] > OyuncuBilgi[playerid][oPara]) return HataMesaji(playerid, "Giriþ ücretini karþýlayamadýðýn için içeri giremiyorsunuz.");

                ParaEkle(playerid, -IsyeriBilgi[id][iGirisUcret]);
                IsyeriBilgi[id][isyeriKasa] += IsyeriBilgi[id][iGirisUcret];
                Isyeri_Kaydet(id);
			}
			if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araç içerisindeyken iþyerine giriþ yapamazsýn.");
	        if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken bu iþlemi yapamazsýn.");
	        if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballdayken buraya giriþ yapamazsýn.");

			SetPVarInt(playerid, "interior_delay", gettime() + 2);
			OyuncuPosDegistir(playerid, IsyeriBilgi[id][isyeriIcPos][0], IsyeriBilgi[id][isyeriIcPos][1], IsyeriBilgi[id][isyeriIcPos][2]);
			KullanimMesaji(playerid, "Bu iþyerinden bir þey satýn almak için /satinal komutunu kullanýn.");
			SetPlayerFacingAngle(playerid, IsyeriBilgi[id][isyeriIcPos][3]);
	        DondurulmaEtkisi(playerid);
			SetPlayerInterior(playerid, IsyeriBilgi[id][isyeriInterior]);
			SetPlayerVirtualWorld(playerid, IsyeriBilgi[id][isyeriVW]);
			SetCameraBehindPlayer(playerid);
			if(!isnull(IsyeriBilgi[id][isyeriMuzik])) PlayAudioStreamForPlayer(playerid, IsyeriBilgi[id][isyeriMuzik]);
			foreach(new i : Player) if(OyuncuBilgi[i][oMarker] == playerid) SetPlayerCheckpoint(i, IsyeriBilgi[id][isyeriPos][0], IsyeriBilgi[id][isyeriPos][1], IsyeriBilgi[id][isyeriPos][2], 5.0);
			return 1;
		}
		else if((id = Oyuncu_IsyeriKapida(playerid)) != -1)
	    {
	        if(GetPVarInt(playerid, "interior_delay") > gettime()) return HataMesaji(playerid, "Lütfen bu kadar hýzlý iþlem yapmayýnýz.");
	        if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken bu iþlemi yapamazsýn.");
	        if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballdayken buraya giriþ yapamazsýn.");

			SetPVarInt(playerid, "interior_delay", gettime() + 2);
			OyuncuPosDegistir(playerid, IsyeriBilgi[id][isyeriPos][0], IsyeriBilgi[id][isyeriPos][1], IsyeriBilgi[id][isyeriPos][2]);
			SetPlayerFacingAngle(playerid, IsyeriBilgi[id][isyeriPos][3] - 180.0);
	        DondurulmaEtkisi(playerid);
			SetPlayerInterior(playerid, IsyeriBilgi[id][isyeriDisInt]);
			SetPlayerVirtualWorld(playerid, IsyeriBilgi[id][isyeriDisVW]);
			SetCameraBehindPlayer(playerid);
			StopAudioStreamForPlayer(playerid);
			return 1;
		}
	}
	else if(newkeys & KEY_NO && IsPlayerInAnyVehicle(playerid)) cmd_motor(playerid, "");
	else if(newkeys & KEY_CTRL_BACK || newkeys & KEY_CROUCH && IsPlayerInAnyVehicle(playerid)) {
		if(Gate_Yakin(playerid) != -1) cmd_gateac(playerid, "");
	}
	else if(newkeys & KEY_FIRE)
	{
		if(OyuncuBilgi[playerid][oSigaraIciyor] == 0 && OyuncuBilgi[playerid][oIckiIciyor] == 0 || IsPlayerInAnyVehicle(playerid)) return 0;
		if(OyuncuBilgi[playerid][oIckiIciyor] > 0)
		{
		    if(OyuncuBilgi[playerid][oIckiIciyor] == 1) {
				OyuncuBilgi[playerid][oIckiIciyor] = 0;
				SunucuMesaji(playerid, "Ýçkiniz bitti.");
				ClearAnimations(playerid);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				return 1;
		    }
			OyuncuBilgi[playerid][oIckiIciyor]--;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		}
		else if(OyuncuBilgi[playerid][oSigaraKalanHak] > 0)
		{
			if(OyuncuBilgi[playerid][oSigaraKalanHak] == 1) {
				OyuncuBilgi[playerid][oSigaraKalanHak] = 0;
				cmd_ame(playerid, "sigarasýný söndürür.");
				ClearAnimations(playerid);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				OyuncuBilgi[playerid][oSigaraIciyor] = 0;
				OyuncuBilgi[playerid][oSigaraKalanHak] = 0;
				return 1;
			}
			OyuncuBilgi[playerid][oSigaraKalanHak]--;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		}
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(GetPlayerWeapon(playerid) != 23 && OyuncuBilgi[playerid][oTaser]) SetPlayerArmedWeapon(playerid, 23);
	if(GetPlayerWeapon(playerid) != 25 && OyuncuBilgi[playerid][oBeanbag]) SetPlayerArmedWeapon(playerid, 25);
	if(GetPlayerWeapon(playerid) != GetPVarInt(playerid, "OyuncuGecerliSilah"))
	{
		OyuncuSilahDegistirdi(playerid, GetPVarInt(playerid, "OyuncuGecerliSilah"), GetPlayerWeapon(playerid));
		SetPVarInt(playerid, "OyuncuGecerliSilah", GetPlayerWeapon(playerid));
	}
	if(GetPVarInt(playerid, "Kick") == 1) return false;
	if(OyuncuBilgi[playerid][oKontrol] == false) TogglePlayerControllable(playerid, false);
	if(GetPlayerMoney(playerid) != OyuncuBilgi[playerid][oPara]) ResetPlayerMoney(playerid), GivePlayerMoney(playerid, OyuncuBilgi[playerid][oPara]);
	if(GetPlayerScore(playerid) != OyuncuBilgi[playerid][oSeviye] && OyuncuBilgi[playerid][oSahteLevel] < 1) SetPlayerScore(playerid, OyuncuBilgi[playerid][oSeviye]);
	if(OyuncuBilgi[playerid][oSahteLevel] > 0 && GetPlayerScore(playerid) != OyuncuBilgi[playerid][oSahteLevel]) SetPlayerScore(playerid, OyuncuBilgi[playerid][oSahteLevel]);
	if(OyuncuBilgi[playerid][oAltTab] > 0) OyuncuBilgi[playerid][oAltTab] = 0;
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) {
		SetPlayerCameraPos(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2] + 2.5);
		SetPlayerCameraLookAt(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
	}
	if(OyuncuBilgi[playerid][oYatKontrol][0] == 1)
	{
	    new keys, ud, lr;
		GetPlayerKeys(playerid, keys, ud, lr);
		if(OyuncuBilgi[playerid][oYatKontrol][1] && (GetTickCount() - OyuncuBilgi[playerid][oYatKontrol][2] > 100))
		{
		    YatSur(playerid);
		}
		if(OyuncuBilgi[playerid][oYatKontrol][3] != ud || OyuncuBilgi[playerid][oYatKontrol][4] != lr)
		{
		    if((OyuncuBilgi[playerid][oYatKontrol][3] != 0 || OyuncuBilgi[playerid][oYatKontrol][4] != 0) && ud == 0 && lr == 0)
		    {
		        StopObject(YatBilgi[yatObject]);
		        OyuncuBilgi[playerid][oYatKontrol][1] = 0;

		    }
		    else
		    {
		        OyuncuBilgi[playerid][oYatKontrol][1] = GetMoveDirectionFromKeys(ud, lr);
		        YatSur(playerid);
		    }
		}
		OyuncuBilgi[playerid][oYatKontrol][3] = ud;
		OyuncuBilgi[playerid][oYatKontrol][4] = lr;
	}
	new Float:can, Float:zirh, Float:ziplatma_hilekontrol[3];
	GetPlayerHealth(playerid, can);
	GetPlayerArmour(playerid, zirh);
	GetPlayerVelocity(playerid, ziplatma_hilekontrol[0], ziplatma_hilekontrol[1], ziplatma_hilekontrol[2]);
	if(!IsPlayerInAnyVehicle(playerid) && (ziplatma_hilekontrol[0] >= 1.1699 && ziplatma_hilekontrol[1] >= 1.1699 || ziplatma_hilekontrol[0] <= -1.1699 && ziplatma_hilekontrol[1] <= -1.1699)) return HileKickle(playerid, 23);
	if(can > OyuncuBilgi[playerid][oCan] && !IsPlayerPaused(playerid) && OyuncuBilgi[playerid][oAdminDurum] == false && OyuncuBilgi[playerid][oGiris] == true) {
		if(can > 100 || CanHileUyari[playerid] >= 5) return HileKickle(playerid, 15);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[viga-buster] %s (ID: %d) can hilesi(#015) kullanýyor olabilir.", OyuncuIsim(playerid), playerid);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(HESAP ID: %d) can hilesi kullanýyor olabilir. (#015)", Tarih(), OyuncuIsim(playerid), OyuncuBilgi[playerid][oHesap]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/hile.txt", "%s", log_icerik);
		SetPlayerHealth(playerid, OyuncuBilgi[playerid][oCan]);
		CanHileUyari[playerid]++;
	}
	else if(can <= OyuncuBilgi[playerid][oCan] && !IsPlayerPaused(playerid)) CanHileUyari[playerid] = 0;
	if(zirh > OyuncuBilgi[playerid][oZirh] && !IsPlayerPaused(playerid) && OyuncuBilgi[playerid][oAdminDurum] == false && OyuncuBilgi[playerid][oGiris] == true) {
	    if(zirh > 100 || ZirhHileUyari[playerid] >= 5) return HileKickle(playerid, 16);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[viga-buster] %s (ID: %d) zýrh hilesi(#016) kullanýyor olabilir.", OyuncuIsim(playerid), playerid);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(HESAP ID: %d) zýrh hilesi kullanýyor olabilir. (#016)", Tarih(), OyuncuIsim(playerid), OyuncuBilgi[playerid][oHesap]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/hile.txt", "%s", log_icerik);
		SetPlayerArmour(playerid, OyuncuBilgi[playerid][oZirh]);
		ZirhHileUyari[playerid]++;
	}
	else if(zirh <= OyuncuBilgi[playerid][oZirh] && !IsPlayerPaused(playerid)) ZirhHileUyari[playerid] = 0;
	if(gettime() > HileKontrolGecikme[playerid]) {
		new Float:oyuncu_pos[3], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerPos(playerid, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2]);
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		for(new i = 0, len = strlen(oyuncu_isim); i < len; i ++) if(oyuncu_isim[i] == '_') oyuncu_isim[i] = ' ';
		if(!IsPlayerPaused(playerid) && OyuncuBilgi[playerid][oPaintball] == -1 && OyuncuBilgi[playerid][oEtkinlikDurum] == false) {
			new anti_silah, anti_mermi;
			for(new i = 0; i < 13; i++)
			{
				GetPlayerWeaponData(playerid, i, anti_silah, anti_mermi);
				if(anti_silah > 0 && OyuncuBilgi[playerid][oSilah][i] != anti_silah) SilahHilesiIslem(playerid, anti_silah);
				else if(anti_silah > 0 && OyuncuBilgi[playerid][oSilah][i] == anti_silah && anti_mermi > OyuncuBilgi[playerid][oMermi][i] + 3 && anti_silah != 38) {
				    SilahlariSifirla(playerid);
					return HileKickle(playerid, 20);
				}
			}
		}
		if(!IsPlayerInRangeOfPoint(playerid, 111.0, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2])) {
		    if((IsPlayerInAnyVehicle(playerid) && UcakKontrol(GetPlayerVehicleID(playerid)) == 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && AracHiz(GetPlayerVehicleID(playerid)) < 40) || GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && !IsPlayerInAnyVehicle(playerid) && OyuncuBilgi[playerid][oAdminDurum] == false && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING) {
				if(OyuncuBilgi[playerid][oGiris] == false) return HileKickle(playerid, 14);
				if(GetPlayerAnimationIndex(playerid) == 44)  return HileKickle(playerid, 10);
				YoneticiMesaji(RENK_ACIKKIRMIZI, "[viga-buster] %s (ID: %d) teleport hilesi(#019) kullanýyor olabilir.", oyuncu_isim, playerid);
				new log_icerik[144];
				format(log_icerik, sizeof(log_icerik), "[%s] %s(HESAP ID: %d) teleport hilesi kullanýyor olabilir. (#019)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oHesap]);
				Gunluk_LogKaydet(log_icerik);
				Log_Kaydet("loglar/hile.txt", "%s", log_icerik);
				GetPlayerPos(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
			}
			else GetPlayerPos(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 111.0, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2])) GetPlayerPos(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
		HileKontrolGecikme[playerid] = gettime() + 2;
	}
	if(GetPlayerAnimationIndex(playerid) == 747 && GetPlayerWeapon(playerid) == 4 || GetPlayerAnimationIndex(playerid) == 748 && GetPlayerWeapon(playerid) == 4) {
		//SilahSil(playerid, 4);
		UyariMesaji(playerid, "Býçaðý bu þekilde kullanamazsýnýz.");
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		OyuncuPosDegistir(playerid, x, y, z);
       	ClearAnimations(playerid);
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    new radar_id;
		if((radar_id = Radar_Yakin(playerid)) != -1 && AracHiz(GetPlayerVehicleID(playerid)) >= RadarBilgi[radar_id][radarLimit] + 5 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsEngineVehicle(GetPlayerVehicleID(playerid)) && gettime() > OyuncuBilgi[playerid][oRadarGecikme])
		{
		    if(!LSPDAracKontrol(GetPlayerVehicleID(playerid)) && !BotKontrol(GetPlayerVehicleID(playerid)) && !UcakKontrol(GetPlayerVehicleID(playerid)) && !HelikopterKontrol(GetPlayerVehicleID(playerid)))
		    {
		        if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && OyuncuBilgi[playerid][oIsbasi] == false) {
			        SetTimerEx("BoxGizle", 500, false, "dd", playerid, _:ShowPlayerBox(playerid, 0xFFFFFF66));

					new sebep[64];
					format(sebep, sizeof(sebep), "Hýz Aþýmý (%d/%.0f)", AracHiz(GetPlayerVehicleID(playerid)), RadarBilgi[radar_id][radarLimit]);
					SunucuMesaji(playerid, "Hýz radarýna yakalandýn, siciline \"%s\" sebebiyle ceza eklendi. (/cezalarim)", sebep);
					Ceza_Ekle(playerid, 2500, sebep, "LSPD");
					OyuncuBilgi[playerid][oRadarGecikme] = gettime() + 8;
				}
			}
		}
	    if(AracMotor[GetPlayerVehicleID(playerid)] == false && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) SetEngineStatus(GetPlayerVehicleID(playerid), false);
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER &&  Arac_IDBul(GetPlayerVehicleID(playerid)) != -1 && AracZaman[GetPlayerVehicleID(playerid)] < tickcount())
		{
			new a, b, c;
			GetPlayerKeys(playerid, a, b ,c);
		    if(a == 8 && HizLimiti[GetPlayerVehicleID(playerid)] > 0 && AracHiz(GetPlayerVehicleID(playerid)) > HizLimiti[GetPlayerVehicleID(playerid)])
		    {
		        new yeni_hiz = AracHiz(GetPlayerVehicleID(playerid)) - HizLimiti[GetPlayerVehicleID(playerid)];
		    	AracHizDuzenle(GetPlayerVehicleID(playerid), -yeni_hiz);
		    }
		    new ids = Arac_IDBul(GetPlayerVehicleID(playerid)), aracid = GetPlayerVehicleID(playerid), benzinkes[32], Float:hile_kontrol[3];
		    GetVehicleVelocity(GetPlayerVehicleID(playerid), hile_kontrol[0], hile_kontrol[1], hile_kontrol[2]);
		    if(hile_kontrol[0] >= 1.1699 && hile_kontrol[1] >= 1.1699 || hile_kontrol[0] <= -1.1699 && hile_kontrol[1] <= -1.1699) return HileKickle(playerid, 22);
			format(benzinkes, sizeof(benzinkes), "0.0%d", AracHiz(aracid) / 2);
			AracZaman[aracid] = tickcount() + 1000;
			if(GetEngineStatus(aracid) == 1) AracBilgi[ids][aracKM] += GetVehicleDistanceFromPoint(aracid,  AracSonPos[aracid][0], AracSonPos[aracid][1], AracSonPos[aracid][2]) / 2500;
			new Float:oran = GetVehicleDistanceFromPoint(aracid,  AracSonPos[aracid][0], AracSonPos[aracid][1], AracSonPos[aracid][2]);
			if(AracBilgi[ids][aTaksiMetreDurum] == true) {
			    AracBilgi[ids][aTaksiMetre] += oran / 10;
				new tmbilgi[64];
				format(tmbilgi, sizeof(tmbilgi), "~b~UCRET: ~w~$%d", floatround(AracBilgi[ids][aTaksiMetre]));
				GameTextForPlayer(playerid, tmbilgi, 1000, 6);
				foreach(new i : Player) if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) GameTextForPlayer(i, tmbilgi, 1000, 6);
			}
		    if(UcakKontrol(GetPlayerVehicleID(playerid)) == 0 && AracMotor[GetPlayerVehicleID(playerid)] == false && oran > 20 && oran < 1000 && gettime() > HileKontrolGecikme[playerid]) {
				SetEngineStatus(GetPlayerVehicleID(playerid), false);
				AracHilesiUyari[playerid]++;
				if(AracHilesiUyari[playerid] >= 2) return HileKickle(playerid, 18);
			}
			else AracHilesiUyari[playerid] = 0;
			GetVehiclePos(aracid, AracSonPos[aracid][0], AracSonPos[aracid][1], AracSonPos[aracid][2]);
			if(IsEngineVehicle(GetPlayerVehicleID(playerid)) && AracBilgi[ids][aracTur] != 1 && AracBilgi[ids][aracBenzin] < 1) {
			    if(GetEngineStatus(GetPlayerVehicleID(playerid))) cmd_ado(playerid, "Aracýn benzini bittiði için motor durdu.");
				SetEngineStatus(aracid, false);
				AracBilgi[ids][aracBenzin] = 0.0;
			}
			else if(AracBilgi[ids][aracBenzin] > 0.05 && AracBilgi[ids][aracTur] != 1 && IsEngineVehicle(GetPlayerVehicleID(playerid))) AracBilgi[ids][aracBenzin] -= floatstr(benzinkes);
			new bilgi[200];
			format(bilgi, sizeof(bilgi), "~b~~h~~h~HIZ: ~w~~h~%d   ~b~~h~~h~HASAR: ~w~~h~%.0f   ~b~~h~~h~YAKIT: ~w~~h~%.0fL   ~b~~h~~h~KM: ~w~~h~%.1f"
			,
				AracHiz(GetPlayerVehicleID(playerid)),
				AracCan(GetPlayerVehicleID(playerid)) / 10,
				AracBilgi[ids][aracBenzin],
				AracBilgi[ids][aracKM]
			);
			PlayerTextDrawSetString(playerid, AracHizGosterge[playerid], bilgi);
		}
		if(GetPlayerVehicleID(playerid) != SonArac[playerid] && GetTickCount() - DegistirmeSuresi[playerid] < 5000)
		{
			DegistirilenArac[playerid]++;
			if(DegistirilenArac[playerid] > 5) return HileKickle(playerid, 6);
		}
		else DegistirilenArac[playerid] = 0;
	    SonArac[playerid] = GetPlayerVehicleID(playerid);
        DegistirmeSuresi[playerid] = GetTickCount();
    }
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetPlayerWeapon(playerid) != 0) SetPlayerArmedWeapon(playerid, 0);
	if(OyuncuBilgi[playerid][oYarali] > 0 && GetPlayerWeapon(playerid) != 0) ClearAnimations(playerid), SetPlayerArmedWeapon(playerid, 0), SunucuMesaji(playerid, "Tedavi olana kadar silah kullanamazsýn.");
	HileKontrol(playerid);
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
    /*new aracid;
    aracid = Arac_IDBul(vehicleid);
    if(aracid > -1) {
		if(OyuncuBilgi[forplayerid][oPDgps] == true && Arac_BirlikTuru(vehicleid) == BIRLIK_POLIS && OyuncuBirlikTuru(forplayerid) == BIRLIK_POLIS)
	        SetVehicleParamsForPlayer(vehicleid, forplayerid, 1, 0);
    }*/
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(OyuncuBilgi[playerid][oDialog] == -1) return HileKickle(playerid, 21);
	OyuncuBilgi[playerid][oDialog] = -1;
    DialogGoster(playerid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
	if(dialogid == DIALOG_KAYIT)
	{
	    if(response)
	    {
	        if(strlen(inputtext) > 3)
	        {
	            static query[512];
	            format(query, sizeof(query),"INSERT INTO `hesaplar` (`sifre`) VALUES ('%s')", MD5_Hash(inputtext));
	            mysql_tquery(mysqlB, query, "HesapYaratildi", "d", playerid);
				OyuncuCinsiyetSec(playerid);
	        }
	        else DialogGoster(playerid, DIALOG_KAYIT, DIALOG_STYLE_PASSWORD, "Kayýt", "{B70000}HATA: {FFFFFF}Girdiðin þifre en az 4 harfli olmalýdýr!\nSunucuya kayýt olmak için lütfen aþaðýya þifrenizi girin;", "Tamam", "Ýptal");
	    }
	    else if(!response) KickEx(playerid);
	    return 1;
	}
	else if(dialogid == DIALOG_GIRIS)
	{
	    if(OyuncuYuklemeYapiyor[playerid] == true) return HataMesaji(playerid, "Yükleme yaparken giriþ yapamazsýn.");
	    
	    if(response) HesapKontrol(playerid, inputtext);
	    else if(!response) KickEx(playerid);
	    return 1;
	}
	else if(dialogid == DIALOG_KARAKTERSEC) {
		if(!response) return KickEx(playerid);

	    if(!strcmp(inputtext, "Karakter Oluþtur", true)) return DialogGoster(playerid, DIALOG_KARAKTER_YARAT, DIALOG_STYLE_INPUT, "vRP: Karaker Oluþturma", "{FFFFFF}Yeni karakteriniz için isim girin;", "Tamam", "Ýptal");
	    new sorgu[256];
		format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE isim = '%s' LIMIT 1", inputtext);
		mysql_tquery(mysqlB, sorgu, "OyuncuYukle", "d", playerid);
		for(new i = 0; i != 20; i++) PlayerTextDrawHide(playerid, OyuncuBilgi[playerid][oGirisTextdraw][i]);
	}
	else if(dialogid == DIALOG_KARAKTER_YARAT) {
	    if(!response) return 0;
	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_KARAKTER_YARAT, DIALOG_STYLE_INPUT, "vRP: Karaker Oluþturma", "{FFFFFF}Yeni karakteriniz için isim girin;", "Tamam", "Ýptal");
	    if(!RolePlayIsimKontrol(inputtext)) return DialogGoster(playerid, DIALOG_KARAKTER_YARAT, DIALOG_STYLE_INPUT, "vRP: Karaker Oluþturma", "{B70000}HATA: {FFFFFF}Girilen isim roleplay formatýna uygun olmalýdýr. (ÖRN: Ad_Soyad)\n{FFFFFF}Yeni karakteriniz için isim girin;", "Tamam", "Ýptal");
		if(SoyadKilitlimi(playerid, OyuncuSoyadi(playerid, inputtext))) {
			new sorgu[144 + MAX_PLAYER_NAME];
			format(sorgu, sizeof(sorgu), "SELECT * FROM soyadikilitleri WHERE Soyad = '%s' LIMIT 1", OyuncuSoyadi(playerid, inputtext));
			mysql_tquery(mysqlB, sorgu, "Soyadi_Kontrol", "dsd", playerid, inputtext, 2);
			return 1;
		}
		new sorgu[512];
		format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE isim = '%s' LIMIT 1", inputtext);
		mysql_tquery(mysqlB, sorgu, "KarakterKontrol", "ds", playerid, inputtext);
	}
	else if(dialogid == DIALOG_CINSIYET)
	{
	    if(response)
	    {
	        OyuncuBilgi[playerid][oCinsiyet] = 1;
			SunucuMesaji(playerid, "Karakterinizin cinsiyeti erkek olarak belirlendi.");
	    }
	    else if(!response)
	    {
	        OyuncuBilgi[playerid][oCinsiyet] = 2;
			SunucuMesaji(playerid, "Karakterinizin cinsiyeti kadýn olarak belirlendi.");
	    }
	    new kokenler1[32 * sizeof(Kokenler)];
        kokenler1[0] = 0;
		for(new x; x < sizeof(Kokenler); x++)
   		{
			format(kokenler1, sizeof(kokenler1), "%s%s\n", kokenler1, Kokenler[x]);
		}
		DialogGoster(playerid, DIALOG_DOGUMYERI, DIALOG_STYLE_LIST, "vRP: Doðum Yeri Seçimi", kokenler1, "Seç", "Seç");
	}
	else if(dialogid == DIALOG_KARAKTER) {
	    if(!response) return false;
	}
	else if(dialogid == DIALOG_DOGUMYERI) {
	    if(response || !response) {
			for(new x; x < sizeof(Kokenler); x++) if(!strcmp(inputtext, Kokenler[x], true)) OyuncuBilgi[playerid][oDogumYeri] = x;
	        SunucuMesaji(playerid, "Karakterinin doðum yeri %s olarak belirlendi.", inputtext);
	        OyuncuTenRengiSec(playerid);
	    }
	}
	else if(dialogid == DIALOG_TEN_RENGI) {
	    if(response) {
	        OyuncuBilgi[playerid][oTenRengi] = listitem + 1;
	        OyuncuBilgi[playerid][oEkstraDil] = -1;
	        if(OyuncuBilgi[playerid][oKarakterYaratildi] != 1) {
				OyuncuBilgi[playerid][oKarakterYaratildi] = 1;
			    if(OyuncuBilgi[playerid][oCK] == 1) {
			    	OyuncuBilgi[playerid][oCK] = 0;
					OyuncuPosDegistir(playerid, 1529.6327, -1683.8873, 13.3828);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					TogglePlayerControllable(playerid, true);
					SunucuMesaji(playerid, "Ýsim deðiþtirdiðin için ck durumun iptal edildi.", OyuncuIsim(playerid));
				}
				if(OyuncuBilgi[playerid][oGiris] == false) {
					if(OyuncuBilgi[playerid][oCinsiyet] == 1) {
						switch(OyuncuBilgi[playerid][oTenRengi]) {
							case 1: {
								new kiyafetler[sizeof(ErkekBeyaz)];
								for(new c = 0; c != sizeof(ErkekBeyaz); c++) kiyafetler[c] = ErkekBeyaz[c][0];
								ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "Kiyafet", MODELLER_GIRISKIYAFET, 0.0, 0.0, 0.0);
							}
							case 2: {
								new kiyafetler[sizeof(ErkekSiyah)];
								for(new c = 0; c != sizeof(ErkekSiyah); c++) kiyafetler[c] = ErkekSiyah[c][0];
								ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "Kiyafet", MODELLER_GIRISKIYAFET, 0.0, 0.0, 0.0);
							}
						}
					}
					else if(OyuncuBilgi[playerid][oCinsiyet] == 2) {
						switch(OyuncuBilgi[playerid][oTenRengi]) {
							case 1: {
								new kiyafetler[sizeof(KadinBeyaz)];
								for(new c = 0; c != sizeof(KadinBeyaz); c++) kiyafetler[c] = KadinBeyaz[c][0];
								ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "Kiyafet", MODELLER_GIRISKIYAFET, 0.0, 0.0, 0.0);
							}
							case 2: {
								new kiyafetler[sizeof(KadinSiyah)];
								for(new c = 0; c != sizeof(KadinSiyah); c++) kiyafetler[c] = KadinSiyah[c][0];
								ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "Kiyafet", MODELLER_GIRISKIYAFET, 0.0, 0.0, 0.0);
							}
						}
					}
					OyuncuBilgi[playerid][oIlkGiris] = true;
					OyuncuBilgi[playerid][oGiris] = true;
				}
			}
			OyuncuKaydet(playerid);
	    }
	    else if(!response) OyuncuTenRengiSec(playerid);
	}
	else if(dialogid == DIALOG_EVINT) {
	    if(!response) return 0;

		new evid = GetPVarInt(playerid, "Ev_Interior");
		foreach(new i : Player) if(IsPlayerConnected(i) && Oyuncu_Evde(i) == evid) {
		    SetPlayerInterior(i, EvInterior[listitem][intInterior]);
		    OyuncuPosDegistir(i, EvInterior[listitem][intX], EvInterior[listitem][intY], EvInterior[listitem][intZ]);
	        DondurulmaEtkisi(i);
		}
		EvBilgi[evid][evIcPos][0] = EvInterior[listitem][intX];
		EvBilgi[evid][evIcPos][1] = EvInterior[listitem][intY];
		EvBilgi[evid][evIcPos][2] = EvInterior[listitem][intZ];
	    EvBilgi[evid][evInterior] = EvInterior[listitem][intInterior];
	    YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir evin interiorunu deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], evid);
	    DeletePVar(playerid, "Ev_Interior");
	    Ev_Kaydet(evid);
	    return 1;
	}
	else if(dialogid == DIALOG_INTERIORLIST) {
	    if(!response) return 0;

	    SetPlayerInterior(playerid, InteriorListesi[listitem][intInterior]);
	    OyuncuPosDegistir(playerid, InteriorListesi[listitem][intX], InteriorListesi[listitem][intY], InteriorListesi[listitem][intZ]);
	}
	else if(dialogid == DIALOG_MESLEKAYRIL) {
	    if(!response) return false;
	    if(OyuncuBilgi[playerid][oMeslekIsbasi] == true) return HataMesaji(playerid, "Ýþbaþýný býrakmadan meslekten ayrýlamazsýnýz. /isbasi komutunu kullanýn.");
	    SunucuMesaji(playerid, "%s adlý mesleðinden kendi isteðinle ayrýldýn.", MeslekIsim(OyuncuBilgi[playerid][oMeslek]));
		OyuncuBilgi[playerid][oMeslek] = 0;
		if(OyuncuBilgi[playerid][oTemizlikCP] > 0 && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 574) {
			DisablePlayerCheckpoint(playerid);
		    OyuncuBilgi[playerid][oTemizlikCP] = 0;
			SunucuMesaji(playerid, "Mesleði iptal ettin.");
		    new id = Arac_IDBul(GetPlayerVehicleID(playerid));
		    Arac_Sil(id);
		}
		return 1;
	}
	else if(dialogid == DIALOG_AVUKAT) {
		if(!response) return 0;
		
		if(!strcmp(inputtext, "Aranma Temizle", true)) {
		    if(OyuncuBilgi[playerid][oAvukatBekleme] > 0) return HataMesaji(playerid, "Yeni bir aranma temizlemeden önce %d saniye beklemelisin.", OyuncuBilgi[playerid][oAvukatBekleme]);
			DialogGoster(playerid, DIALOG_SUCTEMIZLE, DIALOG_STYLE_INPUT, "Aranma Temizleme", "{FFFFFF}Lütfen iþlem yapmak istediðiniz oyuncunun adýný/ID'sini giriniz;", "Tamam", "Kapat");
		}
		else if(!strcmp(inputtext, "Suç Ýndirimi", true)) return DialogGoster(playerid, DIALOG_SUCINDIRIM, DIALOG_STYLE_INPUT, "Suç Ýndirimi", "{FFFFFF}Lütfen iþlem yapmak istediðiniz oyuncunun adýný/ID'sini giriniz;", "Tamam", "Kapat");
		return 1;
	}
	else if(dialogid == DIALOG_SUCINDIRIM) {
		if(!response) return false;

		new oyuncuid;
		if(sscanf(inputtext, "u", oyuncuid)) return DialogGoster(playerid, DIALOG_SUCINDIRIM, DIALOG_STYLE_INPUT, "Suç Ýndirimi", "{FFFFFF}Lütfen iþlem yapmak istediðiniz oyuncunun adýný/ID'sini giriniz;", "Tamam", "Kapat");
		if(!IsPlayerConnected(oyuncuid)) return DialogGoster(playerid, DIALOG_SUCINDIRIM, DIALOG_STYLE_INPUT, "Suç Ýndirimi", "{B70000}HATA: {FFFFFF}Bu oyuncu geçersiz.\n{FFFFFF}Lütfen iþlem yapmak istediðiniz oyuncunun adýný/ID'sini giriniz;", "Tamam", "Kapat");
		if(oyuncuid == playerid) return DialogGoster(playerid, DIALOG_SUCINDIRIM, DIALOG_STYLE_INPUT, "Suç Ýndirimi", "{B70000}HATA: {FFFFFF}Kendi suçlarýný silemezsin.\n{FFFFFF}Lütfen iþlem yapmak istediðiniz oyuncunun adýný/ID'sini giriniz;", "Tamam", "Kapat");
		if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return DialogGoster(playerid, DIALOG_SUCINDIRIM, DIALOG_STYLE_INPUT, "Suç Ýndirimi", "{B70000}HATA: {FFFFFF}Oyuncuya yeterince yakýn deðilsin.\n{FFFFFF}Lütfen iþlem yapmak istediðiniz oyuncunun adýný/ID'sini giriniz;", "Tamam", "Kapat");
		if(OyuncuBilgi[oyuncuid][oAvukatSecim] != INVALID_PLAYER_ID) return DialogGoster(playerid, DIALOG_SUCINDIRIM, DIALOG_STYLE_INPUT, "Suç Ýndirimi", "{B70000}HATA: {FFFFFF}Bu oyuncu baþka bir avukatla etkileþimde, lütfen bekleyin.\n{FFFFFF}Lütfen iþlem yapmak istediðiniz oyuncunun adýný/ID'sini giriniz;", "Tamam", "Kapat");
        if(OyuncuBilgi[oyuncuid][oHapisSure][1] < 60) return DialogGoster(playerid, DIALOG_SUCINDIRIM, DIALOG_STYLE_INPUT, "Suç Ýndirimi", "{B70000}HATA: {FFFFFF}Bu oyuncu hapiste deðil veya süresi 1 dakikadan az.\n{FFFFFF}Lütfen iþlem yapmak istediðiniz oyuncunun adýný/ID'sini giriniz;", "Tamam", "Kapat");

		new sorgu[256], Cache:sorgu_cache;
		format(sorgu, sizeof(sorgu), "SELECT `ID` FROM `oyuncular` WHERE `ID` = '%d' AND `SucIndirimi` = '1'", OyuncuBilgi[oyuncuid][oID]);
		sorgu_cache = mysql_query(mysqlB, sorgu);
		if(cache_num_rows()) return DialogGoster(playerid, DIALOG_SUCINDIRIM, DIALOG_STYLE_INPUT, "Suç Ýndirimi", "{B70000}HATA: {FFFFFF}Bu oyuncuya daha önce suç indirimi uygulanmýþ.\n{FFFFFF}Lütfen iþlem yapmak istediðiniz oyuncunun adýný/ID'sini giriniz;", "Tamam", "Kapat");
		cache_delete(sorgu_cache);
		
		OyuncuBilgi[playerid][oAvukatSecim] = oyuncuid;
		OyuncuBilgi[oyuncuid][oAvukatSecim] = playerid;
		OyuncuBilgi[playerid][oSucIndirimiSure] = 15;
	    return 1;
	}
	else if(dialogid == DIALOG_SUCTEMIZLE) {
		if(!response) return false;
		
		new oyuncuid;
		if(sscanf(inputtext, "u", oyuncuid)) return DialogGoster(playerid, DIALOG_SUCTEMIZLE, DIALOG_STYLE_INPUT, "Aranma Temizleme", "{FFFFFF}Lütfen iþlem yapmak istediðiniz oyuncunun adýný/ID'sini giriniz;", "Tamam", "Kapat");
		if(!IsPlayerConnected(oyuncuid)) return DialogGoster(playerid, DIALOG_SUCTEMIZLE, DIALOG_STYLE_INPUT, "Aranma Temizleme", "{B70000}HATA: {FFFFFF}Bu oyuncu geçersiz.\n{FFFFFF}Lütfen iþlem yapmak istediðiniz oyuncunun adýný/ID'sini giriniz;", "Tamam", "Kapat");
		if(oyuncuid == playerid) return DialogGoster(playerid, DIALOG_SUCTEMIZLE, DIALOG_STYLE_INPUT, "Aranma Temizleme", "{B70000}HATA: {FFFFFF}Kendi suçlarýný silemezsin.\n{FFFFFF}Lütfen iþlem yapmak istediðiniz oyuncunun adýný/ID'sini giriniz;", "Tamam", "Kapat");
		if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return DialogGoster(playerid, DIALOG_SUCTEMIZLE, DIALOG_STYLE_INPUT, "Aranma Temizleme", "{B70000}HATA: {FFFFFF}Oyuncuya yeterince yakýn deðilsin.\n{FFFFFF}Lütfen iþlem yapmak istediðiniz oyuncunun adýný/ID'sini giriniz;", "Tamam", "Kapat");
		if(OyuncuBilgi[oyuncuid][oAvukatBekleme] > 0) return DialogGoster(playerid, DIALOG_SUCTEMIZLE, DIALOG_STYLE_INPUT, "Aranma Temizleme", "{B70000}HATA: {FFFFFF}Bu oyuncunun yeni bir aranma temizlemesi için bekleme süresi var, lütfen süre bittikten sonra deneyin.\n{FFFFFF}Lütfen iþlem yapmak istediðiniz oyuncunun adýný/ID'sini giriniz;", "Tamam", "Kapat");
		if(OyuncuBilgi[oyuncuid][oAvukatSecim] != INVALID_PLAYER_ID) return DialogGoster(playerid, DIALOG_SUCTEMIZLE, DIALOG_STYLE_INPUT, "Aranma Temizleme", "{B70000}HATA: {FFFFFF}Bu oyuncu baþka bir avukatla etkileþimde, lütfen bekleyin.\n{FFFFFF}Lütfen iþlem yapmak istediðiniz oyuncunun adýný/ID'sini giriniz;", "Tamam", "Kapat");

		new suclu_isim[MAX_PLAYER_NAME + 1], sorgu[256];
		GetPlayerName(oyuncuid, suclu_isim, sizeof(suclu_isim));
		format(sorgu, sizeof(sorgu), "SELECT * FROM aranmakayitlari WHERE Oyuncu = '%s'", suclu_isim);
		mysql_tquery(mysqlB, sorgu, "Avukat_SucTemizle", "d", playerid);
		OyuncuBilgi[playerid][oAvukatSecim] = oyuncuid;
		OyuncuBilgi[oyuncuid][oAvukatSecim] = playerid;
	    return 1;
	}
	else if(dialogid == DIALOG_SUCTEMIZLE_SECIM) {
	    if(!response) return false;
	    
		if(!IsPlayerConnected(OyuncuBilgi[playerid][oAvukatSecim])) return HataMesaji(playerid, "Oyuncu oyunda deðil, iþlem iptal edildi."), OyuncuBilgi[playerid][oAvukatSecim] = INVALID_PLAYER_ID;
	    OyuncuBilgi[playerid][oSucSecim] = strval(inputtext);
	    OyuncuBilgi[playerid][oSilmeSure] = 600;
	    SunucuMesaji(playerid, "Seçtiðiniz aranma kaydýný silmeye baþladýnýz, 600 saniye sürecek.");
		return 1;
	}
	else if(dialogid == DIALOG_MESLEK_HIRSIZ) {
	    if(!response) return false;

	    if(OyuncuBilgi[playerid][oPara] < HIRSIZ_MESLEK_UCRET) return HataMesaji(playerid, "Bu mesleðin ücretini karþýlayamýyorsun.");
	    if(Meslek_Yakin(playerid) == -1 || Meslek_Yakin(playerid) != -1 && MeslekBilgi[Meslek_Yakin(playerid)][mTur] != 4) return HataMesaji(playerid, "Bir sorun oluþtu.");

		ParaEkle(playerid, -HIRSIZ_MESLEK_UCRET);
		OyuncuBilgi[playerid][oMeslek] = MeslekBilgi[Meslek_Yakin(playerid)][mTur];
		SunucuMesaji(playerid, "%s mesleðine katýldýn, /yardim yazarak meslek komutlarýný görüntüleyebilirsin.", MeslekIsim(OyuncuBilgi[playerid][oMeslek]));
		SunucuMesaji(playerid, "Meslekten ayrýlmak için tekrar /meslek komutunu kullanmanýz yeterlidir.");
	}
	else if(dialogid == DIALOG_MESLEK_MEKANIK) {
	    if(!response) return false;
	    
	    if(OyuncuBilgi[playerid][oPara] < MEKANIK_MESLEK_UCRET) return HataMesaji(playerid, "Bu mesleðin ücretini karþýlayamýyorsun.");
	    if(Meslek_Yakin(playerid) == -1 || Meslek_Yakin(playerid) != -1 && MeslekBilgi[Meslek_Yakin(playerid)][mTur] != 3) return HataMesaji(playerid, "Bir sorun oluþtu.");
	    
		ParaEkle(playerid, -MEKANIK_MESLEK_UCRET);
		OyuncuBilgi[playerid][oMeslek] = MeslekBilgi[Meslek_Yakin(playerid)][mTur];
		SunucuMesaji(playerid, "%s mesleðine katýldýn, /yardim yazarak meslek komutlarýný görüntüleyebilirsin.", MeslekIsim(OyuncuBilgi[playerid][oMeslek]));
		SunucuMesaji(playerid, "Meslekten ayrýlmak için tekrar /meslek komutunu kullanmanýz yeterlidir.");
	}
	else if(dialogid == DIALOG_TEMIZLIK_SOFORU) {
	    if(!response) return false;

	    new id = -1, Float:arac_pos[3];
		switch(random(24)){
			case 0: arac_pos[0] = 1618.69, arac_pos[1] = -1821.67, arac_pos[2] = 13.52;
			case 1: arac_pos[0] = 1610.883, arac_pos[1] = -1827.639, arac_pos[2] = 13.251;
			case 2: arac_pos[0] = 1611.887, arac_pos[1] = -1805.404, arac_pos[2] = 13.195;
			case 3: arac_pos[0] = 1611.263, arac_pos[1] = -1812.982, arac_pos[2] = 13.210;
			case 4: arac_pos[0] = 1620.517, arac_pos[1] = -1826.457, arac_pos[2] = 13.274;
			case 5: arac_pos[0] = 1620.367, arac_pos[1] = -1818.894, arac_pos[2] = 13.200;
			case 6: arac_pos[0] = 1611.166, arac_pos[1] = -1820.284, arac_pos[2] = 13.225;
			case 7: arac_pos[0] = 1619.887, arac_pos[1] = -1811.410, arac_pos[2] = 13.247;
			case 8: arac_pos[0] = 1619.748, arac_pos[1] = -1803.744, arac_pos[2] = 13.189;
			case 9: arac_pos[0] = 1626.981, arac_pos[1] = -1824.649, arac_pos[2] = 13.271;
			case 10: arac_pos[0] = 1632.665, arac_pos[1] = -1823.674, arac_pos[2] = 13.259;
			case 11: arac_pos[0] = 1626.652, arac_pos[1] = -1817.183, arac_pos[2] = 13.192;
			case 12: arac_pos[0] = 1637.436, arac_pos[1] = -1821.717, arac_pos[2] = 13.275;
			case 13: arac_pos[0] = 1626.147, arac_pos[1] = -1809.844, arac_pos[2] = 13.247;
			case 14: arac_pos[0] = 1642.023, arac_pos[1] = -1819.783, arac_pos[2] = 13.268;
			case 15: arac_pos[0] = 1625.605, arac_pos[1] = -1802.458, arac_pos[2] = 13.241;
			case 16: arac_pos[0] = 1641.831, arac_pos[1] = -1812.302, arac_pos[2] = 13.267;
			case 17: arac_pos[0] = 1631.443, arac_pos[1] = -1800.825, arac_pos[2] = 13.245;
			case 18: arac_pos[0] = 1637.293, arac_pos[1] = -1814.459, arac_pos[2] = 13.267;
			case 19: arac_pos[0] = 1631.870, arac_pos[1] = -1808.237, arac_pos[2] = 13.249;
			case 20: arac_pos[0] = 1632.137, arac_pos[1] = -1815.932, arac_pos[2] = 13.270;
			case 21: arac_pos[0] = 1636.647, arac_pos[1] = -1807.045, arac_pos[2] = 13.206;
			case 22: arac_pos[0] = 1641.240, arac_pos[1] = -1804.976, arac_pos[2] = 13.275;
			case 23: arac_pos[0] = 1635.917, arac_pos[1] = -1799.542, arac_pos[2] = 13.250;
			case 24: arac_pos[0] = 1640.449, arac_pos[1] = -1797.767, arac_pos[2] = 13.272;
		}
		id = Arac_Yarat(0, 574, arac_pos[0], arac_pos[1], arac_pos[2], 180.0, random(255), random(255));

		if(id == -1) return HataMesaji(playerid, "Sunucu dinamik araç limitine ulaþmýþ, bu meslek þu anlýk kullaným dýþý.");
	    new engine, lights, alarm, doors, bonnet, boot, objective;
	    GetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, doors, bonnet, boot, objective);
		OyuncuBilgi[playerid][oTemizlikCP] = 1;
		OyuncuBilgi[playerid][oMeslekDelay] = gettime() + 180;
		SetPlayerCheckpoint(playerid, 1628.2787, -1873.7058, 13.1077, 5.0);
		SunucuMesaji(playerid, "%s mesleðini yapmaya baþladýn, haritandaki checkpointleri takip et.", MeslekIsim(2));
		RemovePlayerFromVehicle(playerid);
		SetTimerEx("AracaBindir", 250, false, "iii", playerid, AracBilgi[id][aracYarat], 0);
		SetTimerEx("araccalistir", 250, false, "ii", playerid, AracBilgi[id][aracYarat]);
		AracBilgi[id][aracKilit] = true;
		SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 1, bonnet, boot, objective);
		cmd_ame(playerid, "anahtarý saat yönünde çevirir ve aracýn motorunu açmaya çalýþýr.");
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) mesleðe baþladý.", SaniyeliTarih(), oyuncu_isim, OyuncuBilgi[playerid][oID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/temizlikci.txt", "%s", log_icerik);
	}
	else if(dialogid == DIALOG_KAMYONCU) {
	    if(!response) return 0;

	    if(!strcmp(inputtext, "Ürün Yükle", true)) {
	        if(OyuncuBilgi[playerid][oKamyoncu] != -1) return HataMesaji(playerid, "Zaten yükleme yapmýþsýn.");
		    if(OyuncuBilgi[playerid][oTemizlikCP] > 0) return HataMesaji(playerid, "Temizlik yaparken ürün yükleyemezsin.");
		    /*if(OyuncuBilgi[playerid][oMateryalTasiyor] == true) return HataMesaji(playerid, "Paket taþýrken ürün yükleyemezsin. (\"/cpsifirla\")");*/
			if(OyuncuBilgi[playerid][oMarker] > -1) return HataMesaji(playerid, "Konum araþtýrýrken ürün yükleyemezsin. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oKonum] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oAdres] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][objeLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oIsaretliMeslek] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");

	        new icerik[144];
	        format(icerik, sizeof(icerik), "{FFFFFF}Normal\t{33aa33}[Legal]\n");
	        new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
	        if(AracBilgi[aracid][aracSahip] == OyuncuBilgi[playerid][oID] && OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL) strcat(icerik, "{FFFFFF}Silah\t{B70000}[Ýllegal]\n{FFFFFF}Uyuþturucu\t{B70000}[Ýllegal]");
			DialogGoster(playerid, DIALOG_KAMYONCU_YUKLE, DIALOG_STYLE_TABLIST, "Kamyoncu - Yükle", icerik, "Seç", "Kapat");
			return 1;
		}
		else if(!strcmp(inputtext, "Kamyon Kirala", true)) {
			for(new i = 0; i < MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aKiraZaman] > 0 && AracBilgi[i][aracKullanimda] == true && AracBilgi[i][aracAnahtar] == OyuncuBilgi[playerid][oID] && AracBilgi[i][aracModel] == 499 && AracBilgi[i][aracSahip] == 0)
			    return HataMesaji(playerid, "Zaten kamyon kiralamýþsýnýz, süresinin bitmesini bekleyin.");

			DialogGoster(playerid, DIALOG_KAMYONCU_KIRALA, DIALOG_STYLE_TABLIST_HEADERS, "Kamyoncu - Araç Kirala", "Süre\tÜcret\n1 saat\t$100\n2 saat\t$150\n", "Seç", "Kapat");
		}
		else if(!strcmp(inputtext, "[KÝRA] Aracý Bul", true)) {
	        if(OyuncuBilgi[playerid][oKamyoncu] != -1) return HataMesaji(playerid, "Zaten yükleme yapmýþsýn.");
		    if(OyuncuBilgi[playerid][oTemizlikCP] > 0) return HataMesaji(playerid, "Temizlik yaparken ürün yükleyemezsin.");
		    /*if(OyuncuBilgi[playerid][oMateryalTasiyor] == true) return HataMesaji(playerid, "Paket taþýrken ürün yükleyemezsin. (\"/cpsifirla\")");*/
			if(OyuncuBilgi[playerid][oMarker] > -1) return HataMesaji(playerid, "Konum araþtýrýrken ürün yükleyemezsin. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oKonum] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oAdres] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][objeLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oIsaretliMeslek] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			
			for(new i = 0; i < MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aKiraZaman] > 0 && AracBilgi[i][aracKullanimda] == true && AracBilgi[i][aracAnahtar] == OyuncuBilgi[playerid][oID] && AracBilgi[i][aracModel] == 499 && AracBilgi[i][aracSahip] == 0) {
				if(!IsValidVehicle(AracBilgi[i][aracYarat])) return HataMesaji(playerid, "Bir sorun oluþtu.");
				new Float:arac_pos[4];
                GetVehiclePos(AracBilgi[i][aracYarat], arac_pos[0], arac_pos[1], arac_pos[2]);
				OyuncuBilgi[playerid][oGPSArac] = AracBilgi[i][aracYarat];
				SetPlayerCheckpoint(playerid, arac_pos[0], arac_pos[1], arac_pos[2], 5.0);
				SunucuMesaji(playerid, "Kiralýk aracýnýz haritanýzda iþaretlendi.");
				return 1;
			}
			HataMesaji(playerid, "Kiralýk kamyonun yok.");
		}
	}
	else if(dialogid == DIALOG_KAMYONCU_KIRALA) {
		if(!response) return 0;

		new zaman = 0, ucret = 0, ox = 0;
		if(!strcmp(inputtext, "1 saat", true)) {
		    if(OyuncuBilgi[playerid][oPara] < 100) return HataMesaji(playerid, "Aracý kiralamak için yeterli paran yok.");
			ucret = 100;
			ox = 1;
		    zaman = 60;
		}
		else if(!strcmp(inputtext, "2 saat", true)) {
		    if(OyuncuBilgi[playerid][oPara] < 150) return HataMesaji(playerid, "Aracý kiralamak için yeterli paran yok.");
			ucret = 150;
			ox = 2;
		    zaman = 120;
		}
        new Float:arac_pos[4], id = -1;
		KamyoncuPos(arac_pos[0], arac_pos[1], arac_pos[2], arac_pos[3]);
		if(arac_pos[0] == 0.0 && arac_pos[1] == 0.0 && arac_pos[2] == 0.0) {
			return HataMesaji(playerid, "Araç kiralanamadý, aracýn spawnlanacaðý boþ bir yer yok. /rapor komutuyla destek alabilirsiniz.");
		}
		id = Arac_Yarat(0, 499, arac_pos[0], arac_pos[1], arac_pos[2], arac_pos[3], random(255), random(255));
		if(id == -1) return HataMesaji(playerid, "Araç kiralanamadý, sunucu araç limitine ulaþmýþ.");

		ParaEkle(playerid, -ucret);
		switch(ox)
		{
			case 1: SunucuMesaji(playerid, "1 saat için kamyonu $300 karþýlýðýnda kiraladýn.");
			case 2: SunucuMesaji(playerid, "2 saat için kamyonu $500 karþýlýðýnda kiraladýn.");
			case 3: SunucuMesaji(playerid, "3 saat için kamyonu $750 karþýlýðýnda kiraladýn.");
			case 4: SunucuMesaji(playerid, "5 saat için kamyonu $1,000 karþýlýðýnda kiraladýn.");
		}

		OyuncuBilgi[playerid][oGPSArac] = AracBilgi[id][aracYarat];
		SetPlayerCheckpoint(playerid, arac_pos[0], arac_pos[1], arac_pos[2], 5.0);
		AracBilgi[id][aracAnahtar] = OyuncuBilgi[playerid][oID];
		AracBilgi[id][aracKiralik] = 1;
		AracBilgi[id][aKiraZaman] = zaman;
	    Arac_Kaydet(id);
	}
	else if(dialogid == DIALOG_KAMYONCU_YUKLE) {
		if(!response) return 0;
		if(Meslek_Yakin(playerid) == -1) return HataMesaji(playerid, "Meslek noktasýna yakýn deðilsin.");
		if(MeslekBilgi[Meslek_Yakin(playerid)][mTur] != 1) return HataMesaji(playerid, "Yakýnýnda olduðun meslek noktasý \"%s\" deðil.", MeslekIsim(1));
		if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Bir araçta deðilsin veya aracýn sürücüsü deðilsin.");
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 499) return HataMesaji(playerid, "Aracýnýzýn modeli %s deðil.", AracModel(GetVehicleModel(GetPlayerVehicleID(playerid))));

		TogglePlayerControllable(playerid, false);
	    SunucuMesaji(playerid, "%s yüklemeye baþladýn, 5 saniye sürecek.", inputtext);
		SetTimerEx("Kamyoncu_Yukle", 5000, false, "dd", playerid, listitem);
	}
	else if(dialogid == DIALOG_SUNUCU) {
	    if(!response) return 0;

		if(!strcmp(inputtext, "Kilit", true)) {
			if(sunucukilit) {
				sunucukilit = false;
				SendRconCommand("password 0");
				YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: Sunucu þifresi %s tarafýndan kaldýrdý.", OyuncuBilgi[playerid][oAdminNick]);
			}
			else if(!sunucukilit) DialogGoster(playerid, DIALOG_SUNUCU2, DIALOG_STYLE_INPUT, "Sunucu Þifresi", "Lütfen þifreyi aþaðýya girin;", "Seç", "Ýptal");
		}
		else if(!strcmp(inputtext, "Sunucu Ýsmini Deðiþtir", true)) DialogGoster(playerid, DIALOG_SUNUCU1, DIALOG_STYLE_INPUT, "Sunucu ismi deðiþtir", "Deðiþtirilecek isimi girin;", "Seç", "Ýptal");
		else if(!strcmp(inputtext, "Ýlk Harf Büyüt", true)) {
			switch(ilkharf) {
			    case false: ilkharf = true, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: Ýlk harf büyütme sistemi %s tarafýndan açýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			    case true: ilkharf = false, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: Ýlk harf büyütme sistemi %s tarafýndan kapatýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			}
		}
		else if(!strcmp(inputtext, "OOC Kanal", true)) {
			switch(oockanal) {
			    case true: oockanal = false, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: OOC Kanal %s tarafýndan kapatýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			    case false: oockanal = true, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: OOC Kanal %s tarafýndan açýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			}
		}
		else if(!strcmp(inputtext, "AFK Dakika", true)) {
			switch(anti_afk) {
			    case false: anti_afk = true, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: AFK dakika sistemi %s tarafýndan açýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			    case true: anti_afk = false, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: AFK dakika sistemi %s tarafýndan kapatýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			}
		}
		else if(!strcmp(inputtext, "AFK Kick", true)) {
			switch(afk_aktif) {
			    case false: afk_aktif = true, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: AFK kick sistemi %s tarafýndan açýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			    case true: afk_aktif = false, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: AFK kick sistemi %s tarafýndan kapatýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			}
		}
		else if(!strcmp(inputtext, "Destek Kanalý", true)) {
		    new durum[16];
			switch(hkanal) {
			    case true: hkanal = false, durum = "kapatýldý", cmd_sunucu(playerid, inputtext);
			    case false: hkanal = true, durum = "açýldý", cmd_sunucu(playerid, inputtext);
			}
			foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && (OyuncuBilgi[i][oAdmin] > 0 || OyuncuBilgi[i][oDestekEkibi] > 0)) {
				AdminMesaji(i, "Destek sohbet kanalý %s tarafýndan %s.", OyuncuBilgi[playerid][oAdminNick], durum);
			}
		}
		else if(!strcmp(inputtext, "Admin Kanalý", true)) {
			switch(akanal) {
			    case true: akanal = false, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: Admin sohbet kanalý %s tarafýndan kapatýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			    case false: akanal = true, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: Admin sohbet kanalý %s tarafýndan açýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			}
		}
		else if(!strcmp(inputtext, "2x PayDay", true)) {
		    if(ucxpayday == true) return HataMesaji(playerid, "3x PayDay açýkken bu seçeneði açamazsýn.");
		    
			switch(ikixpayday) {
			    case true: ikixpayday = false, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: 2x PayDay %s tarafýndan kapatýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			    case false: ikixpayday = true, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: 2x PayDay %s tarafýndan açýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			}
		}
		else if(!strcmp(inputtext, "3x PayDay", true)) {
		    if(ikixpayday == true) return HataMesaji(playerid, "2x PayDay açýkken bu seçeneði açamazsýn.");
		    
			switch(ucxpayday) {
			    case true: ucxpayday = false, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: 3x PayDay %s tarafýndan kapatýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			    case false: ucxpayday = true, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: 3x PayDay %s tarafýndan açýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			}
		}
		else if(!strcmp(inputtext, "Av Yasaðý", true)) {
			switch(avyasagi) {
			    case true: avyasagi = false, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: Av Yasaðý %s tarafýndan kapatýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			    case false: avyasagi = true, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: Av Yasaðý %s tarafýndan açýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			}
		}
		else if(!strcmp(inputtext, "Paintball", true)) {
			switch(paintball_sistemi) {
			    case true: paintball_sistemi = false, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: Paintball %s tarafýndan kapatýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			    case false: paintball_sistemi = true, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: Paintball %s tarafýndan açýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			}
		}
		else if(!strcmp(inputtext, "OOC Market", true)) {
			switch(oocmarket_kullanim) {
			    case true: oocmarket_kullanim = false, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: OOC Market %s tarafýndan kapatýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			    case false: oocmarket_kullanim = true, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: OOC Market %s tarafýndan açýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			}
		}
		else if(!strcmp(inputtext, "vMarket", true)) {
			switch(vmarket_kullanim) {
			    case true: vmarket_kullanim = false, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: vMarket %s tarafýndan kapatýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			    case false: vmarket_kullanim = true, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: vMarket %s tarafýndan açýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			}
		}
		else if(!strcmp(inputtext, "Vergiler", true)) {
			switch(vergiler_durum) {
			    case true: vergiler_durum = false, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: Vergiler %s tarafýndan devre dýþý býrakýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			    case false: vergiler_durum = true, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: Vergiler %s tarafýndan aktif edildi.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			}
		}
		else if(!strcmp(inputtext, "Yat Kiralama", true)) {
			switch(yat_kiralama) {
			    case true: yat_kiralama = false, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: Yat kiralama %s tarafýndan kapatýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			    case false: yat_kiralama = true, YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: Yat kiralama %s tarafýndan açýldý.", OyuncuBilgi[playerid][oAdminNick]), cmd_sunucu(playerid, inputtext);
			}
		}
	    return true;
	}
	if(dialogid == DIALOG_SUNUCU1) {
	    if(!response) cmd_sunucu(playerid, inputtext);

		new rcon[128];
		format(rcon, sizeof(rcon), "hostname %s", inputtext);
		SendRconCommand(rcon);
		SunucuMesaji(RENK_ACIKKIRMIZI, "admCMD: Sunucu ismi %s tarafýndan %s olarak deðiþtirildi.", OyuncuBilgi[playerid][oAdminNick], inputtext);
	}
	else if(dialogid == DIALOG_SUNUCU2) {
		if(!response) cmd_sunucu(playerid, inputtext);
		if(!strcmp(inputtext, "0", true)) return HataMesaji(playerid, "Bu þifre geçersizdir.");
		if(strlen(inputtext) > 20) return HataMesaji(playerid, "Þifre en fazla 20 harfli olabilir.");
		sunucukilit = true;
		new rcon[48];
		format(rcon, sizeof(rcon), "password %s", inputtext);
		SendRconCommand(rcon);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: Sunucu %s tarafýndan þifrelendi. (%s)", OyuncuBilgi[playerid][oAdminNick], inputtext);
	}
	else if(dialogid == DIALOG_BIRIMLER) {
		if(!response) return cmd_birlik(playerid, inputtext);

		if(!strcmp(inputtext, "Birim Oluþtur", true)) return DialogGoster(playerid, DIALOG_BIRIM_OLUSTUR, DIALOG_STYLE_INPUT, "Birim Oluþtur", "Birim oluþturmak için aþaðýdaki kutucuða isim giriniz;\n\nEn fazla 32 harf kullanabilirsiniz.", "Seç", "<< Geri");
		else if(!strcmp(inputtext, "Birim Davet", true)) {
			new mesaj[512 * MAKSIMUM_BIRIM], sayi = 0;
			format(mesaj, sizeof(mesaj), "ID\tBirim Adý\tTür\n");
			for(new i = 0; i != MAKSIMUM_BIRIM; i ++) if(BirimBilgi[i][birimKullanimda] == true && BirimBilgi[i][birimBirlik] == OyuncuBilgi[playerid][oBirlikSQLID])
			{
			    format(mesaj, sizeof(mesaj), "%s%d\t%s\t%s\n", mesaj, i, BirimBilgi[i][birimAd], birimturadi(i));
			    sayi++;
			}
			strcat(mesaj, "Birimden At");
			if(!sayi) return HataMesaji(playerid, "Birliðinize ait oluþturulmuþ bir birim yok.");

			DialogGoster(playerid, DIALOG_BIRIM_DAVET, DIALOG_STYLE_TABLIST_HEADERS, "Birimler", mesaj, "Seç", "Kapat");
		}
		else if(!strcmp(inputtext, "Birim Düzenle", true)) {
			new mesaj[512 * MAKSIMUM_BIRIM], sayi = 0;
			format(mesaj, sizeof(mesaj), "ID\tBirim Adý\tTür\n");
			for(new i = 0; i != MAKSIMUM_BIRIM; i ++) if(BirimBilgi[i][birimKullanimda] == true && BirimBilgi[i][birimBirlik] == OyuncuBilgi[playerid][oBirlikSQLID])
			{
			    format(mesaj, sizeof(mesaj), "%s%d\t%s\t%s\n", mesaj, i, BirimBilgi[i][birimAd], birimturadi(i));
			    sayi++;
			}
			if(!sayi) return HataMesaji(playerid, "Birliðinize ait oluþturulmuþ bir birim yok.");

			DialogGoster(playerid, DIALOG_BIRIM_DUZENLE, DIALOG_STYLE_TABLIST_HEADERS, "Birimler", mesaj, "Seç", "Kapat");
		}
		else if(!strcmp(inputtext, "Birim Kaldýr", true)) {
			new mesaj[512 * MAKSIMUM_BIRIM], sayi = 0;
			format(mesaj, sizeof(mesaj), "ID\tBirim Adý\tTür\n");
			for(new i = 0; i != MAKSIMUM_BIRIM; i ++) if(BirimBilgi[i][birimKullanimda] == true && BirimBilgi[i][birimBirlik] == OyuncuBilgi[playerid][oBirlikSQLID])
			{
			    format(mesaj, sizeof(mesaj), "%s%d\t%s\t%s\n", mesaj, i, BirimBilgi[i][birimAd], birimturadi(i));
			    sayi++;
			}
			if(!sayi) return HataMesaji(playerid, "Birliðinize ait oluþturulmuþ bir birim yok.");

			DialogGoster(playerid, DIALOG_BIRIM_KALDIR, DIALOG_STYLE_TABLIST_HEADERS, "Birimler", mesaj, "Seç", "Kapat");
		}
	}
	else if(dialogid == DIALOG_BIRIM_DUZENLE) {
	    if(!response) return 0;

	    for(new i = 0; i != MAKSIMUM_BIRIM; i ++) if(BirimBilgi[i][birimKullanimda] == true && i == strval(inputtext)) SetPVarInt(playerid, "Birim_Duzenle", i);

	    DialogGoster(playerid, DIALOG_BIRIM_ISIM, DIALOG_STYLE_INPUT, "Birim Düzenle", "Lütfen birimin yeni ismini girin:\n\nEn fazla 32 harf kullanabilirsiniz.", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_BIRIM_ISIM) {
	    if(!response) return 0;

	    new isim[32];
	    if(sscanf(inputtext, "s[32]", isim)) return DialogGoster(playerid, DIALOG_BIRIM_ISIM, DIALOG_STYLE_INPUT, "Birim Düzenle", "Lütfen birimin yeni ismini girin:\n\nEn fazla 32 harf kullanabilirsiniz.", "Tamam", "Kapat");

		new id = GetPVarInt(playerid, "Birim_Duzenle");
	    format(BirimBilgi[id][birimAd], 32, isim);
	    Birim_Kaydet(id);
	    SunucuMesaji(playerid, "Birimin ismi %s olarak deðiþtirildi.", isim);
	}
	else if(dialogid == DIALOG_BIRIM_KALDIR) {
	    if(!response) return 0;

	    for(new i = 0; i != MAKSIMUM_BIRIM; i ++) if(BirimBilgi[i][birimKullanimda] == true && i == strval(inputtext)) {
			Birim_Sil(i);
			SunucuMesaji(playerid, "Birim %d silindi.", i);
	    }
	}
	else if(dialogid == DIALOG_BIRIM_DAVET) {
	    if(!response) return 0;

	    new mesaj[144];
	    for(new i = 0; i != MAKSIMUM_BIRIM; i ++) if(BirimBilgi[i][birimKullanimda] == true && i == strval(inputtext)) format(mesaj, sizeof(mesaj), "Lütfen birime almak istediðiniz oyuncunun ismini veya ID'sini giriniz;"), SetPVarInt(playerid, "Birim_Davet", i);
	    if(!strcmp(inputtext, "Birimden At", true)) format(mesaj, sizeof(mesaj), "Lütfen birimden atmak istediðiniz oyuncunun ismini veya ID'sini giriniz;"), SetPVarInt(playerid, "Birim_Davet", -1);
	    DialogGoster(playerid, DIALOG_BIRIM_OYUNCUDAVET, DIALOG_STYLE_INPUT, "Birim Davet", "Lütfen birime almak istediðiniz oyuncunun ismini veya ID'sini giriniz;", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_BIRIM_OYUNCUDAVET) {
	    if(!response) return 0;

		new oyuncuid;
		if(sscanf(inputtext, "u", oyuncuid)) return DialogGoster(playerid, DIALOG_BIRIM_OYUNCUDAVET, DIALOG_STYLE_INPUT, "Birim Davet", "Lütfen birime almak istediðiniz oyuncunun ismini veya ID'sini giriniz;", "Tamam", "Kapat");
		if(!IsPlayerConnected(oyuncuid)) return DialogGoster(playerid, DIALOG_BIRIM_OYUNCUDAVET, DIALOG_STYLE_INPUT, "Birim Davet", "{B70000}HATA: {FFFFFF}Girilen oyuncu geçersiz.\n\nLütfen birime almak istediðiniz oyuncunun ismini veya ID'sini giriniz;", "Tamam", "Kapat");
		if(OyuncuBilgi[oyuncuid][oBirlik] != OyuncuBilgi[playerid][oBirlik]) return DialogGoster(playerid, DIALOG_BIRIM_OYUNCUDAVET, DIALOG_STYLE_INPUT, "Birim Davet", "{B70000}HATA: {FFFFFF}Bu oyuncu senin birliðinde deðil.\n\nLütfen birime almak istediðiniz oyuncunun ismini veya ID'sini giriniz;", "Tamam", "Kapat");

		new birimid = GetPVarInt(playerid, "Birim_Davet");
		if(birimid != -1) {
			OyuncuBilgi[oyuncuid][oBirim] = BirimBilgi[birimid][birimID];
			SunucuMesaji(playerid, "%s adlý oyuncunun birimini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), BirimBilgi[birimid][birimAd]);
			SunucuMesaji(oyuncuid, "Birimin %s tarafýndan %s olarak deðiþtirildi.", OyuncuIsim(playerid), BirimBilgi[birimid][birimAd]);
			new log_icerik[144], alan_isim[MAX_PLAYER_NAME + 1], alinan_id[MAX_PLAYER_NAME + 1];
			GetPlayerName(oyuncuid, alinan_id, sizeof(alinan_id));
			GetPlayerName(playerid, alan_isim, sizeof(alan_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþi tarafýndan birime alýndý. (birim: %s)", Tarih(), alinan_id, OyuncuBilgi[oyuncuid][oID], alan_isim, OyuncuBilgi[playerid][oID], BirimBilgi[birimid][birimAd]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
		}
		else {
			OyuncuBilgi[oyuncuid][oBirim] = 0;
			SunucuMesaji(playerid, "%s adlý oyuncuyu birimden attýn.", OyuncuIsim(oyuncuid));
			SunucuMesaji(oyuncuid, "%s tarafýndan biriminden atýldýn.", OyuncuIsim(playerid));
			new log_icerik[144], alan_isim[MAX_PLAYER_NAME + 1], alinan_id[MAX_PLAYER_NAME + 1];
			GetPlayerName(oyuncuid, alinan_id, sizeof(alinan_id));
			GetPlayerName(playerid, alan_isim, sizeof(alan_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþi tarafýndan birimden atýldý.", Tarih(), alinan_id, OyuncuBilgi[oyuncuid][oID], alan_isim, OyuncuBilgi[playerid][oID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
		}
		OyuncuKaydet(oyuncuid);
	}
	else if(dialogid == DIALOG_BIRIM_OLUSTUR) {
		if(!response) return cmd_birlik(playerid, inputtext);
		switch(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikLevel]) {
		    case 4: if(Birim_Sayi(OyuncuBilgi[playerid][oBirlik]) >= 3) return HataMesaji(playerid, "Birim limitine ulaþmýþsýn, daha fazla birim oluþturamazsýn.");
		    case 5: if(Birim_Sayi(OyuncuBilgi[playerid][oBirlik]) >= 4) return HataMesaji(playerid, "Birim limitine ulaþmýþsýn, daha fazla birim oluþturamazsýn.");
		    case 6: if(Birim_Sayi(OyuncuBilgi[playerid][oBirlik]) >= 5) return HataMesaji(playerid, "Birim limitine ulaþmýþsýn, daha fazla birim oluþturamazsýn.");
		    default: return HataMesaji(playerid, "Bu seçeneði kullanamazsýn.");
		}
		if(isnull(inputtext) || strlen(inputtext) > 32) return DialogGoster(playerid, DIALOG_BIRIM_OLUSTUR, DIALOG_STYLE_INPUT, "Birim Oluþtur", "Birim oluþturmak için aþaðýdaki kutucuða isim giriniz;\n\nEn fazla 32 harf kullanabilirsiniz.", "Seç", "<< Geri");

		new id = -1;
		id = Birim_Yarat(inputtext, OyuncuBilgi[playerid][oBirlikSQLID]);
		if(id == -1) return HataMesaji(playerid, "Sunucu birim limitine ulaþtýðý için yeni birim yaratýlamýyor!");

		SunucuMesaji(playerid, "Yeni bir birim yarattýn. (ID: %d)", id);
	}
	else if(dialogid == DIALOG_BIRLIK_ONAY) {
	    if(!response) return false;

	    new birlikid = GetPVarInt(playerid, "Birlik_Onay"), onayisim[64];
	    if(birlikid != -1 && BirlikBilgi[birlikid][birlikKullanimda] == false) return HataMesaji(playerid, "Bir sorun oluþtu.");
	    switch(listitem) {
			case 0: format(onayisim, sizeof(onayisim), "Silah");
			case 1: format(onayisim, sizeof(onayisim), "Uyuþturucu");
			case 2: format(onayisim, sizeof(onayisim), "Araç Hýrsýzlýðý");
			case 3: format(onayisim, sizeof(onayisim), "Gasp");
			case 4: format(onayisim, sizeof(onayisim), "Tamirci");
			case 5: format(onayisim, sizeof(onayisim), "Yarýþçý");
			case 6: format(onayisim, sizeof(onayisim), "Taksici");
			case 7: format(onayisim, sizeof(onayisim), "Graffiti");
	    }
		switch(BirlikBilgi[birlikid][birlikOnay][listitem]) {
		    case 1: BirlikBilgi[birlikid][birlikOnay][listitem] = 0;
		    case 0: BirlikBilgi[birlikid][birlikOnay][listitem] = 1;
		}
		Birlik_Kaydet(birlikid);
		SunucuMesaji(playerid, "%s adlý birliðin %s onayýný \"%s\" olarak deðiþtirdin.", BirlikBilgi[birlikid][birlikAd], onayisim, (BirlikBilgi[birlikid][birlikOnay][listitem] == 0) ? ("yok") : ("var"));
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] [ADM]%s(%d) birlik onayý düzenledi. (ID: %d / %s: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BirlikBilgi[birlikid][birlikID], onayisim, (BirlikBilgi[birlikid][birlikOnay][listitem] == 0) ? ("yok") : ("var"));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
	}
	else if(dialogid == DIALOG_BIRLIK_UYELER) {
	    if(!response) return cmd_birlik(playerid, "");
		if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe] && OyuncuBilgi[playerid][oBirlikLider] != BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID]) return cmd_birlik(playerid, "");
		new oyuncu_isim[MAX_PLAYER_NAME + 1];
		format(oyuncu_isim, sizeof(oyuncu_isim), "%s", inputtext);
		for(new i = 0, len = strlen(oyuncu_isim); i < len; i ++) if(oyuncu_isim[i] == ' ') oyuncu_isim[i] = '_';
	    new oyuncuid = AktiflikKontrol(oyuncu_isim);
		if(IsPlayerConnected(oyuncuid)) {
 			if(OyuncuBilgi[oyuncuid][oBirlik] != OyuncuBilgi[playerid][oBirlik]) return HataMesaji(playerid, "Senin birliðinde olmayan birisini atamazsýn.");
			if(oyuncuid == playerid) return HataMesaji(playerid, "Kendini birlikten atamazsýn.");
			if(BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikMaksRutbe] == OyuncuBilgi[oyuncuid][oBirlikRutbe]) return HataMesaji(playerid, "Birlik lideri birlikten atýlamaz.");
			
			new birlikid = OyuncuBilgi[playerid][oBirlik];
			BirlikSifirla(oyuncuid);
			BirlikMesaji(OyuncuBilgi[playerid][oBirlik], RENK_BIRLIK, "[BIRLIK]{FFFFFF} %s, %s tarafýndan birlikten atýldý.", OyuncuIsim(oyuncuid), OyuncuIsim(playerid));
			SunucuMesaji(playerid, "%s adlý kiþiyi birlikten attýn.", OyuncuIsim(oyuncuid));
			SunucuMesaji(oyuncuid, "%s tarafýndan %s adlý birlikten atýldýn.", OyuncuIsim(playerid), BirlikBilgi[birlikid][birlikAd]);
			new log_icerik[144], atan_isim[MAX_PLAYER_NAME + 1], atilan_id[MAX_PLAYER_NAME + 1];
			GetPlayerName(oyuncuid, atilan_id, sizeof(atilan_id));
			GetPlayerName(playerid, atan_isim, sizeof(atan_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) tarafýndan birlikten atýldý. (birlik: %s)", Tarih(), atilan_id, OyuncuBilgi[oyuncuid][oID], atan_isim, OyuncuBilgi[playerid][oID], BirlikBilgi[birlikid][birlikAd]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
			return 1;
		}
		new sorgu[144 + MAX_PLAYER_NAME], isim[MAX_PLAYER_NAME + 1];
		format(isim, sizeof(isim), "%s", inputtext);
		for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == ' ') isim[i] = '_';
		format(sorgu,sizeof(sorgu),"SELECT * FROM oyuncular WHERE isim = '%s' LIMIT 1", isim);
		mysql_tquery(mysqlB, sorgu, "Birlik_Kov", "i", playerid);
	}
	else if(dialogid == DIALOG_BIRLIK) {
	    if(!response) return false;

		new birlikid = OyuncuBilgi[playerid][oBirlik];

		if(!strcmp(inputtext, "Bilgiler", true)) {
		    new birlik_bilgiler[256];
			format(birlik_bilgiler, sizeof(birlik_bilgiler), "Maksimum Rütbe\t\t%d\nBirlik Türü:\t\t%s\nBirlik Seviyesi\t\t%d\nOnay:\t\t%s\n\nHood Onayý:\t\t%s", BirlikBilgi[birlikid][birlikMaksRutbe], birlikturadi(birlikid), BirlikBilgi[birlikid][birlikLevel], (BirlikBilgi[birlikid][birlikOnayDurum] == 0) ? ("{B70000}Yok") : ("{33AA33}Var"), (BirlikBilgi[birlikid][birlikPosDurum] == 0) ? ("{B70000}Yok") : ("{33AA33}Var"));
			DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST, BirlikBilgi[birlikid][birlikAd], birlik_bilgiler, "Kapat", "");
		}
		else if(!strcmp(inputtext, "Üyeler", true)) {
		    new sql[512];
			format(sql, sizeof(sql), "SELECT * FROM oyuncular WHERE birlik = %d", OyuncuBilgi[playerid][oBirlikSQLID]);
			mysql_tquery(mysqlB, sql, "Birlik_UyeArat", "d", playerid);
		}
		else if(!strcmp(inputtext, "Davet Et", true)) {
			if(BirlikBilgi[birlikid][birlikMaksRutbe] == OyuncuBilgi[playerid][oBirlikRutbe] || OyuncuBilgi[playerid][oBirlikLider] == BirlikBilgi[birlikid][birlikID]) {
			    if(BirlikBilgi[birlikid][birlikTur] == BIRLIK_LEGAL || BirlikBilgi[birlikid][birlikTur] == BIRLIK_ILLEGAL) {
					new sorgu[256], Cache:sorgu_cache, uyeler = 0;
					format(sorgu, sizeof(sorgu), "SELECT `ID` FROM `oyuncular` WHERE `birlik` = '%d'", OyuncuBilgi[playerid][oBirlikSQLID]);
					sorgu_cache = mysql_query(mysqlB, sorgu);
					uyeler = cache_num_rows();
					cache_delete(sorgu_cache);
					switch(BirlikBilgi[birlikid][birlikLevel]) {
						case 1: if(uyeler + 1 > 10) return HataMesaji(playerid, "Daha fazla üye davet etmek için birlik levelini yükseltmelisin.");
						case 2: if(uyeler + 1 > 15) return HataMesaji(playerid, "Daha fazla üye davet etmek için birlik levelini yükseltmelisin.");
						case 3: if(uyeler + 1 > 20) return HataMesaji(playerid, "Daha fazla üye davet etmek için birlik levelini yükseltmelisin.");
						case 4: if(uyeler + 1 > 30) return HataMesaji(playerid, "Daha fazla üye davet etmek için birlik levelini yükseltmelisin.");
						case 5: if(uyeler + 1 > 40) return HataMesaji(playerid, "Daha fazla üye davet etmek için birlik levelini yükseltmelisin.");
						case 6: if(uyeler + 1 > 50) return HataMesaji(playerid, "Daha fazla üye davet edemezsin.");
						default: if(uyeler + 1 > 50) return HataMesaji(playerid, "Daha fazla üye davet edemezsin.");
					}
				}
				DialogGoster(playerid, DIALOG_BIRLIK_DAVET, DIALOG_STYLE_INPUT, "Birlik Davet", "Birliðine davet etmek istediðin kiþinin ismini veya ID'sini gir;", "Seç", "Ýptal");
			}
			else return HataMesaji(playerid, "Bu seçeneði sadece birlik liderleri kullanabilir.");
		}
		else if(!strcmp(inputtext, "Birlikten At", true)) {
			if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] == OyuncuBilgi[playerid][oBirlikRutbe] || OyuncuBilgi[playerid][oBirlikLider] == BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID]) {
				DialogGoster(playerid, DIALOG_BIRLIK_KOV, DIALOG_STYLE_INPUT, "Birlik Kov", "Birliðinden atmak istediðin kiþinin ismini veya ID'sini gir;", "Seç", "Ýptal");
			}
			else return HataMesaji(playerid, "Bu seçeneði sadece birlik liderleri kullanabilir.");
		}
		else if(!strcmp(inputtext, "OOC Kanal", true)) {
			if(BirlikBilgi[birlikid][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe] && OyuncuBilgi[playerid][oBirlikLider] != BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID]) return HataMesaji(playerid, "Bu seçeneði sadece birlik liderleri kullanabilir.");
			if(BirlikBilgi[birlikid][birlikLevel] < 2) return HataMesaji(playerid, "Bu seçeneði kullanabilmek için birlik levelini yükseltmelisin.");

			switch(BirlikBilgi[birlikid][oKanal]) {
				case 1: {
					BirlikBilgi[birlikid][oKanal] = 0;
					foreach(new i : Player) if(OyuncuBilgi[i][oBirlik] == birlikid) {
						SendClientMessageEx(i, RENK_SERVER, "Birlik: {FFFFFF} Birlik kanalý %s tarafýndan kapandý.", OyuncuIsim(playerid));
					}
					Birlik_Kaydet(birlikid);
					cmd_birlik(playerid, inputtext);
				}
				case 0: {
					BirlikBilgi[birlikid][oKanal] = 1;
					foreach(new i : Player) if(OyuncuBilgi[i][oBirlik] == birlikid) {
						SendClientMessageEx(i, RENK_SERVER, "Birlik: {FFFFFF} Birlik kanalý %s tarafýndan açýldý.", OyuncuIsim(playerid));
					}
					Birlik_Kaydet(birlikid);
					cmd_birlik(playerid, inputtext);
				}
			}
		}
		else if(!strcmp(inputtext, "Rütbeler", true)) BirlikRutbeDuzenle(playerid);
		else if(!strcmp(inputtext, "Maaþlar", true)) BirlikMaasDuzenle(playerid);
		else if(!strcmp(inputtext, "Birlik Yetkilisi Ayarla", true)) {
			if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe]) return HataMesaji(playerid, "Bu seçeneði sadece birlik liderleri kullanabilir."), cmd_birlik(playerid, inputtext);

			return DialogGoster(playerid, DIALOG_BIRLIK_YETKILI, DIALOG_STYLE_INPUT, "Yetkili Ayarla", "{FFFFFF}Lütfen yetkili durumunu deðiþtirmek istediðiniz oyuncunun ismini veya ID'sini giriniz;\n{B70000}NOT: {FFFFFF}Yetkisi olan birisini seçerseniz yetkisi alýnýr.", "Seç", "Geri");
		}
		else if(!strcmp(inputtext, "Rütbe Ver", true)) {
			if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe] && OyuncuBilgi[playerid][oBirlikLider] != BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID])
				return HataMesaji(playerid, "Bu seçeneði sadece birlik liderleri kullanabilir."), cmd_birlik(playerid, inputtext);

			DialogGoster(playerid, DIALOG_BIRLIK_RUTBEVER, DIALOG_STYLE_INPUT, "Rütbe Ver", "Rütbe vermek istediðin oyuncunun ismini veya ID'sini gir;", "Seç", "Geri");
		}
		else if(!strcmp(inputtext, "Duyuru Düzenle", true)) {
			if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe] && OyuncuBilgi[playerid][oBirlikLider] != BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID])
				return HataMesaji(playerid, "Bu seçeneði sadece birlik liderleri kullanabilir."), cmd_birlik(playerid, inputtext);

			return DialogGoster(playerid, DIALOG_BIRLIK_DUYURU, DIALOG_STYLE_INPUT, "Birlik - Duyuru Düzenle", "Lütfen yeni birlik duyuru metnini girin;\nKaldýrmak için boþluða \"Yok\" yazýn.", "Tamam", "Geri");
		}
		else if(!strcmp(inputtext, "Birimler", true)) {
		    if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikLevel] < 4) return HataMesaji(playerid, "Bu seçeneði kullanabilmek için birlik levelini yükseltmelisin."), cmd_birlik(playerid, inputtext);
			if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe] && OyuncuBilgi[playerid][oBirlikLider] != BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID]) return HataMesaji(playerid, "Bu seçeneði sadece birlik liderleri kullanabilir.");

			if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] == OyuncuBilgi[playerid][oBirlikRutbe]) DialogGoster(playerid, DIALOG_BIRIMLER, DIALOG_STYLE_TABLIST, "Birlik - Birimler", "Birim Oluþtur\nBirim Davet\nBirim Düzenle\nBirim Kaldýr", "Seç", "<< Geri");
			else if(OyuncuBilgi[playerid][oBirlikLider] == BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID]) DialogGoster(playerid, DIALOG_BIRIMLER, DIALOG_STYLE_TABLIST, "Birlik - Birimler", "Birim Davet", "Seç", "<< Geri");
		}
		else if(!strcmp(inputtext, "Birlik Araçlarý", true)) {
            if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikLevel] < 3) return HataMesaji(playerid, "Bu seçeneði kullanabilmek için birlik levelini yükseltmelisin."), cmd_birlik(playerid, inputtext);

			new mesaj[256 * MAKSIMUM_ARAC], sayi = 0;
			format(mesaj, sizeof(mesaj), "ID\tModel\tDurum\n");
			for(new i = 0; i != MAKSIMUM_ARAC; i++) if(AracBilgi[i][aracKullanimda] == true && OyuncuBilgi[playerid][oBirlikSQLID] == AracBilgi[i][aracBirlik])
			{
			    format(mesaj, sizeof(mesaj), "%s{FFFFFF}%d\t%s\t%s\n", mesaj, AracBilgi[i][aracYarat], AracModel(AracBilgi[i][aracModel]), AracDurum(i));
			    sayi++;
			}
			if(!sayi) return HataMesaji(playerid, "Birliðine ait araç bulunmuyor.");
			DialogGoster(playerid, DIALOG_BIRLIK_ARACLAR, DIALOG_STYLE_TABLIST_HEADERS, "Birlik Araçlarý", mesaj, "Respawn", "<< Geri");
		}
		else if(!strcmp(inputtext, "Seviye Atlat", true)) {
		    if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe] && OyuncuBilgi[playerid][oBirlikLider] != BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID]) return HataMesaji(playerid, "Bu seçeneði sadece birlik liderleri kullanabilir."), cmd_birlik(playerid, inputtext);
			if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikLevel] == 6) return HataMesaji(playerid, "Birliðin daha fazla level atlayamaz."), cmd_birlik(playerid, inputtext);
			new sorgu[512];
   			format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE birlik = '%d'", OyuncuBilgi[playerid][oBirlikSQLID]);
			mysql_tquery(mysqlB, sorgu, "Birlik_LevelYukselt", "d", playerid);
		}
		else if(!strcmp(inputtext, "Maks. Rütbe", true)) {
		    if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikLevel] < 4) return HataMesaji(playerid, "Bu seçeneði kullanabilmek için birlik levelini yükseltmelisin."), cmd_birlik(playerid, inputtext);
		    if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe]) return HataMesaji(playerid, "Bu seçeneði sadece birlik liderleri kullanabilir.");

			DialogGoster(playerid, DIALOG_BIRLIK_MAKSRUTBE, DIALOG_STYLE_INPUT, "Birlik - Maksimum Rütbe", "Birliðinin maksimum rütbesini kaç yapmak istiyorsun?", "Ayarla", "Ýptal");
		}
		else if(!strcmp(inputtext, "Araç Ekle", true)) {
		    if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikLevel] < 3) return HataMesaji(playerid, "Bu seçeneði kullanabilmek için birlik levelini yükseltmelisin."), cmd_birlik(playerid, inputtext);
		    if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu seçenek sadece araçta kullanýlabilir."), cmd_birlik(playerid, inputtext);
			if(!Arac_SahipKontrol(playerid, Arac_IDBul(GetPlayerVehicleID(playerid)))) return HataMesaji(playerid, "Bu araç senin olmadýðý için bu seçeneði kullanamazsýn."), cmd_birlik(playerid, inputtext);
			DialogGoster(playerid, DIALOG_BIRLIK_ARACEKLE, DIALOG_STYLE_MSGBOX, "Birlik - Araç Ekle", "Bu aracý birliðine eklemek üzeresin, bu iþlem geri alýnamaz.\nBu iþlemi yaptýðýnda aracýn tamamen birliðine baðlanacak ve geri alamayacaksýn.\n\nOnaylýyor musun?", "Ayarla", "Ýptal");
		}
		else if(!strcmp(inputtext, "Araçlarý Spawnla", true)) {
		    if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikLevel] < 3) return HataMesaji(playerid, "Bu seçeneði kullanabilmek için birlik levelini yükseltmelisin."), cmd_birlik(playerid, inputtext);
			if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe] && OyuncuBilgi[playerid][oBirlikLider] != BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID]) return HataMesaji(playerid, "Bu seçeneði sadece birlik liderleri kullanabilir.");

			new sayi = 0;
			for(new i = 0; i < MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracBirlik] == BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID] && SurucuBul(AracBilgi[i][aracYarat]) == INVALID_PLAYER_ID) {
				ASpawn(AracBilgi[i][aracYarat]);
				sayi++;
			}
			if(sayi == 0) return HataMesaji(playerid, "Birliðine ait spawnlanabilecek araç bulunmuyor.");

			SunucuMesaji(playerid, "%d araç spawnlandý.", sayi);
			BirlikMesaji(OyuncuBilgi[playerid][oBirlik], RENK_BIRLIK, "Birlik: {FFFFFF} Birlik araçlarý(%d) %s tarafýndan respawnlandý.", sayi, OyuncuIsim(playerid));
		}
		else if(!strcmp(inputtext, "Kasa Ayarla", true)) {
		    if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikLevel] < 5) return HataMesaji(playerid, "Bu seçeneði kullanabilmek için birlik levelini yükseltmelisin."), cmd_birlik(playerid, inputtext);
			if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe]) return HataMesaji(playerid, "Bu seçeneði sadece birlik liderleri kullanabilir.");
			if((OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) && OyuncuBilgi[playerid][oAdmin] < 7) return HataMesaji(playerid, "Bu birlik türü için seçeneði sadece Management kullanýlabilir.");

			new bilgi[144];
			format(bilgi, sizeof(bilgi), "Birliðine ait kasayý %s karþýlýðýnda konumlandýracaksýn, onaylýyor musun?", NumaraFormati(KASA_KONUMLANDIRMA_UCRET));
            DialogGoster(playerid, DIALOG_KASAAYARLA, DIALOG_STYLE_MSGBOX, "Birlik - Kasa Ayarla", bilgi, "Evet", "<< Geri");
		}
		else if(!strcmp(inputtext, "Kasa Ýþlemleri", true)) {
		    if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yetkili iþbaþýndayken bu seçeneði kullanamazsýn.");
		    if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikLevel] < 5) return HataMesaji(playerid, "Bu seçeneði kullanabilmek için birlik levelini yükseltmelisin."), cmd_birlik(playerid, inputtext);
			for(new i = 0; i < MAKSIMUM_KASA; i ++) if(KasaBilgi[i][kasaBirlik] == OyuncuBilgi[playerid][oBirlikSQLID]) {
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, KasaBilgi[i][kasaPos][0], KasaBilgi[i][kasaPos][1], KasaBilgi[i][kasaPos][2])) return HataMesaji(playerid, "Kasaya yakýn deðilsin.");

				OyuncuBilgi[playerid][oKasa] = i;
				new baslik[64];
				format(baslik, sizeof(baslik), "{FFFFFF}Birlik Kasa - [{338833}%s{FFFFFF}]", NumaraFormati(KasaBilgi[i][kasaPara]));
	            DialogGoster(playerid, DIALOG_KASAISLEM, DIALOG_STYLE_TABLIST, baslik, "Para Yatýr\nPara Çek", "Seç", "<< Geri");
				return 1;
			}
			HataMesaji(playerid, "Birliðine ait bir kasa bulunmuyor.");
		}
		else if(!strcmp(inputtext, "Techizat Ýzni", true)) {
			switch(techizatizni) {
			    case false: {
					techizatizni = true, SunucuMesaji(playerid, "Teçhizat izni herkese açýldý.");
					BirlikMesaji(OyuncuBilgi[playerid][oBirlik], RENK_BIRLIK, "[BIRLIK]{FFFFFF} %s teçhizat iznini tüm birliðe açtý.", OyuncuIsim(playerid));
				}
				case true: {
					techizatizni = false, SunucuMesaji(playerid, "Teçhizat izni sadece rütbeye göre ayarlandý.");
					BirlikMesaji(OyuncuBilgi[playerid][oBirlik], RENK_BIRLIK, "[BIRLIK]{FFFFFF} %s teçhizat iznini rütbeye göre ayarladý.", OyuncuIsim(playerid));
				}
			}
		}
		else if(!strcmp(inputtext, "Ayrýl", true)) {
		    if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] == OyuncuBilgi[playerid][oBirlikRutbe]) return HataMesaji(playerid, "Birlik sahibi bu seçeneði kullanamaz."), cmd_birlik(playerid, inputtext);
			DialogGoster(playerid, DIALOG_BIRLIK_AYRIL, DIALOG_STYLE_MSGBOX, "Birlik Ayrýl", "Birliðinden ayrýlmak istediðine emin misin?", "Ayrýl", "<< Geri");
		}
		else if(!strcmp(inputtext, "Birlik Sil", true)) {
		    if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe]) return HataMesaji(playerid, "Bu seçeneði kullanmak için birlik lideri olman gerekiyor.");
		    
		    new mesaj[256];
		    format(mesaj, sizeof(mesaj), "%s adlý birliðini silmek üzeresin, onaylýyor musun?", BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd]);
			DialogGoster(playerid, DIALOG_BIRLIK_KALDIR, DIALOG_STYLE_MSGBOX, "Birlik Sil", mesaj, "Onayla", "<< Geri");
		}
	}
	else if(dialogid == DIALOG_RAF_DUZENLE) {
		new rafid;
		if(sscanf(inputtext, "d", rafid)) return DialogGoster(playerid, DIALOG_RAF_DUZENLE, DIALOG_STYLE_INPUT, "Raf Düzenleme", "{FFFFFF}Lütfen düzenlemek istediðiniz rafýn ID'sini girin;", "Tamam", "Kapat");
		if((rafid < 0 || rafid > MAKSIMUM_RAF) || !RafBilgi[rafid][rafKullanimda]) return DialogGoster(playerid, DIALOG_RAF_DUZENLE, DIALOG_STYLE_INPUT, "Raf Düzenleme", "{B70000}HATA: {FFFFFF}Geçersiz raf!\n\n{FFFFFF}Lütfen düzenlemek istediðiniz rafýn ID'sini girin;", "Tamam", "Kapat");
	    if(RafBilgi[rafid][rafBina] != -1 && Oyuncu_Binada(playerid) > -1 && RafBilgi[rafid][rafBina] != BinaBilgi[Oyuncu_Binada(playerid)][bID]) return DialogGoster(playerid, DIALOG_RAF_DUZENLE, DIALOG_STYLE_INPUT, "Raf Düzenleme", "{B70000}HATA: {FFFFFF}Bu raf senin deðil.\n\n{FFFFFF}Rafa yakýn deðilsin.\n\n{FFFFFF}Lütfen düzenlemek istediðiniz rafýn ID'sini girin;", "Tamam", "Kapat");
	    if(RafBilgi[rafid][rafEv] != -1 && Oyuncu_Evde(playerid) > -1 && RafBilgi[rafid][rafEv] != EvBilgi[Oyuncu_Evde(playerid)][evID]) return DialogGoster(playerid, DIALOG_RAF_DUZENLE, DIALOG_STYLE_INPUT, "Raf Düzenleme", "{B70000}HATA: {FFFFFF}Bu raf senin deðil.\n\n{FFFFFF}Rafa yakýn deðilsin.\n\n{FFFFFF}Lütfen düzenlemek istediðiniz rafýn ID'sini girin;", "Tamam", "Kapat");
	    
		new sayi = 0;
		for(new i = 0; i < 4; i ++) if(RafBilgi[rafid][rafSilahlar][i]) sayi++;
		if(sayi > 0) return HataMesaji(playerid, "Rafta eþya varken düzenleyemezsin.");

		if(!IsPlayerInRangeOfPoint(playerid, 3.0, RafBilgi[rafid][rafPos][0], RafBilgi[rafid][rafPos][1], RafBilgi[rafid][rafPos][2])) return DialogGoster(playerid, DIALOG_RAF_DUZENLE, DIALOG_STYLE_INPUT, "Raf Düzenleme", "{B70000}HATA: Bu rafa yakýn deðilsin.\n\n{FFFFFF}Rafa yakýn deðilsin.\n\n{FFFFFF}Lütfen düzenlemek istediðiniz rafýn ID'sini girin;", "Tamam", "Kapat");

	    EditlemeSifirla(playerid);
		OyuncuBilgi[playerid][oDuzenlenenRaf] = rafid;
		EditDynamicObject(playerid, RafBilgi[rafid][rafObje][4]);
		SunucuMesaji(playerid, "{FFFF00}~k~~PED_SPRINT~{7a8a9a} tuþuna basýlý tutarak kamerayý oynatabilirsiniz.");
	}
	else if(dialogid == DIALOG_RAF_SILAHLAR) {
	    if(!response) return OyuncuBilgi[playerid][oRaf] = -1;

	    new id = Raf_Yakin(playerid), emote[144];
	    if(id == -1) return HataMesaji(playerid, "Rafa yakýn deðilsin.");
		if(Oyuncu_Evde(playerid) > -1 && !Ev_SahipKontrol(playerid, Oyuncu_Evde(playerid)) && !Ev_AnahtarKontrol(playerid, Oyuncu_Evde(playerid))) return OyuncuBilgi[playerid][oRaf] = -1, HataMesaji(playerid, "Bu raf üzerinde iþlem yapamazsýn.");
		if(Oyuncu_Binada(playerid) > -1 && !Bina_SahipKontrol(playerid, Oyuncu_Binada(playerid)) && !Bina_AnahtarKontrol(playerid, Oyuncu_Binada(playerid))) return OyuncuBilgi[playerid][oRaf] = -1, HataMesaji(playerid, "Bu raf üzerinde iþlem yapamazsýn.");
		
	    if(!RafBilgi[id][rafSilahlar][listitem])
	    {
			new liste[1024], silahid, mermi, sayi = 0;
			SetPVarInt(playerid, "rafliste", listitem);
			format(liste, sizeof(liste), "Eþya\tAdet\n");
			for(new i = 0; i < 13; i ++)
			{
				GetPlayerWeaponData(playerid, i, silahid, mermi);
				if(silahid > 0 && OyuncuBilgi[playerid][oSilah][i] == silahid) {
					if(OyuncuBilgi[playerid][oBeanbag] && silahid == 25) continue;
					format(liste, sizeof(liste), "%s%s\t%d\n", liste, SilahIsim(silahid), mermi), sayi++;
				}
			}
			if(OyuncuBilgi[playerid][oUyusturucu] > 0) strcat(liste, "Uyuþturucu\n"), sayi++;
			if(OyuncuZirh(playerid) > 39) strcat(liste, "Çelik Yelek\n"), sayi++;
			if(OyuncuBilgi[playerid][oIlkYardim] > 0) strcat(liste, "Ýlk Yardým Kiti\n"), sayi++;
			if(OyuncuBilgi[playerid][oTamirKiti] > 0) strcat(liste, "Tamir Kiti\n"), sayi++;

			if(!sayi) return HataMesaji(playerid, "Rafa ekleyebileceðin bir eþyaya sahip deðilsin."), OyuncuBilgi[playerid][oRaf] = -1;
			DialogGoster(playerid, DIALOG_RAF_EKLE, DIALOG_STYLE_TABLIST_HEADERS, "Raf - Eþya Ekleme", liste, "Seç", "Kapat");
	    }
	    else
	    {
	        new esyaisim[64], silahid, mermi;
			switch(RafBilgi[id][rafSilahlar][listitem]) {
			    case 60: OyuncuBilgi[playerid][oUyusturucu] += RafBilgi[id][rafMermiler][listitem], format(esyaisim, sizeof(esyaisim), "Uyuþturucu");
			    case 61: ZirhDuzenle(playerid, float(RafBilgi[id][rafMermiler][listitem])), format(esyaisim, sizeof(esyaisim), "Çelik Yelek");
			    case 62: {
					new limit = 0;
					switch(OyuncuBilgi[playerid][oVIP]) {
					    case 3: limit = 2;
					    default: limit = 1;
					}
					if(OyuncuBilgi[playerid][oIlkYardim] + RafBilgi[id][rafMermiler][listitem] > limit) return HataMesaji(playerid, "Üzerinde daha çok ilk yardým kiti bulunamaz."), OyuncuBilgi[playerid][oRaf] = -1;
					
					OyuncuBilgi[playerid][oIlkYardim] += RafBilgi[id][rafMermiler][listitem], format(esyaisim, sizeof(esyaisim), "Ýlk Yardým Kiti");
				}
				case 63: {
					new limit = 0;
					switch(OyuncuBilgi[playerid][oVIP]) {
					    case 2: limit = 2;
					    case 3: limit = 3;
					    default: limit = 1;
					}
					if(OyuncuBilgi[playerid][oTamirKiti] + RafBilgi[id][rafMermiler][listitem] > limit) return HataMesaji(playerid, "Üzerinde daha fazla tamir kiti bulunduramazsýn."), OyuncuBilgi[playerid][oRaf] = -1;
				    
				    OyuncuBilgi[playerid][oTamirKiti] += RafBilgi[id][rafMermiler][listitem], format(esyaisim, sizeof(esyaisim), "Tamir Kiti");
				}
			    default: {
			        if(OyuncuBilgi[playerid][oOynamaSaati] < 12) return HataMesaji(playerid, "Silah alabilmek için en az 12 oynama saatine ihtiyacýn var."), OyuncuBilgi[playerid][oRaf] = -1;
					if(SilahSlotKontrol(playerid, SilahSlotBul[RafBilgi[id][rafSilahlar][listitem]]) && SilahSlotBul[RafBilgi[id][rafSilahlar][listitem]] != 0) return HataMesaji(playerid, "Bu silah türü sizde var."), OyuncuBilgi[playerid][oRaf] = -1;

			        silahid = RafBilgi[id][rafSilahlar][listitem];
			        mermi = RafBilgi[id][rafMermiler][listitem];
					format(esyaisim, sizeof(esyaisim), "%s", SilahIsim(RafBilgi[id][rafSilahlar][listitem]));
				}
			}
			//ApplyAnimation(playerid, "WEAPONS", "SHP_Tray_Out", 4.1, 0, 0, 0, 0, 0, 1);
			if(RafBilgi[id][rafSilahlar][listitem] < 60) {
    			if(OyuncuBilgi[playerid][oOynamaSaati] < 12) return HataMesaji(playerid, "Silah almak için 12 saat oynamalýsýn."), OyuncuBilgi[playerid][oRaf] = -1;
    			if(SilahSlotKontrol(playerid, SilahSlotBul[silahid]) && SilahSlotBul[silahid] != 0) return HataMesaji(playerid, "Bu silah türü sende bulunduðu için bu silahý alamýyorsun."), OyuncuBilgi[playerid][oRaf] = -1;
				Silahver(playerid, silahid, mermi);
			}
			RafBilgi[id][rafSilahlar][listitem] = 0;
			RafBilgi[id][rafMermiler][listitem] = 0;

			Raf_SilahYenile(id);
			Raf_Kaydet(id);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s raftan %s aldý. (SID: %d)", Tarih(), oyuncu_isim, esyaisim, RafBilgi[id][rafID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/raf.txt", "%s", log_icerik);
			format(emote, sizeof(emote), "raftan %s aldý.", esyaisim);
			cmd_ame(playerid, emote);
			OyuncuBilgi[playerid][oRaf] = -1;
			//OyuncuKaydet(playerid);
		}
	}
	else if(dialogid == DIALOG_RAF_ELKOY) {
	    if(!response) return OyuncuBilgi[playerid][oRaf] = -1;

	    new id = Raf_Yakin(playerid), emote[144];
	    if(id == -1) return HataMesaji(playerid, "Rafa yakýn deðilsin."), OyuncuBilgi[playerid][oRaf] = -1;

	    if(!RafBilgi[id][rafSilahlar][listitem]) return HataMesaji(playerid, "Boþ slota el koyamazsýn."), cmd_raf(playerid, inputtext), OyuncuBilgi[playerid][oRaf] = -1;
	    else if(RafBilgi[id][rafSilahlar][listitem] == 64) return HataMesaji(playerid, "Bu eþyaya el koyamazsýn."), cmd_raf(playerid, inputtext), OyuncuBilgi[playerid][oRaf] = -1;
	    else
	    {
	        new esyaisim[64];
			switch(RafBilgi[id][rafSilahlar][listitem]) {
			    case 60: format(esyaisim, sizeof(esyaisim), "Uyuþturucu");
			    case 61: format(esyaisim, sizeof(esyaisim), "Çelik Yelek");
			    case 62: format(esyaisim, sizeof(esyaisim), "Ýlk Yardým Kiti");
			    case 63: format(esyaisim, sizeof(esyaisim), "Tamir Kiti");
			    default: format(esyaisim, sizeof(esyaisim), "%s", SilahIsim(RafBilgi[id][rafSilahlar][listitem]));
			}
			RafBilgi[id][rafSilahlar][listitem] = 0;
			RafBilgi[id][rafMermiler][listitem] = 0;

			Raf_SilahYenile(id);
			Raf_Kaydet(id);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s raftaki %s eþyasýna el koydu. (SID: %d)", Tarih(), oyuncu_isim, esyaisim, RafBilgi[id][rafID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/raf.txt", "%s", log_icerik);
			format(emote, sizeof(emote), "raftaki %s adlý eþyaya el koyar.", esyaisim);
			cmd_me(playerid, emote);
			return OyuncuBilgi[playerid][oRaf] = -1;
		}
	}
	else if(dialogid == DIALOG_RAF_EKLE) {
		if(!response) return OyuncuBilgi[playerid][oRaf] = -1;

		new silahid, mermi, adet, esya[96], esyaid, id = Raf_Yakin(playerid), emote[144];
		if(!strcmp(inputtext, "Uyuþturucu", true)) {
			if(OyuncuBilgi[playerid][oUyusturucu] >= 30) adet = 30, OyuncuBilgi[playerid][oUyusturucu] -= 30, format(esya, sizeof(esya), "Uyuþturucu"), esyaid = 60;
			else adet = OyuncuBilgi[playerid][oUyusturucu], OyuncuBilgi[playerid][oUyusturucu] = 0, format(esya, sizeof(esya), "Uyuþturucu"), esyaid = 60;
		}
		if(!strcmp(inputtext, "Çelik Yelek", true)) adet = OyuncuZirh(playerid), ZirhDuzenle(playerid, 0), format(esya, sizeof(esya), "Çelik Yelek"), esyaid = 61;
		if(!strcmp(inputtext, "Ýlk Yardým Kiti", true)) adet = 1, OyuncuBilgi[playerid][oIlkYardim]--, format(esya, sizeof(esya), "Ýlk Yardým Kiti"), esyaid = 62;
		if(!strcmp(inputtext, "Tamir Kiti", true)) adet = 1, OyuncuBilgi[playerid][oTamirKiti]--, format(esya, sizeof(esya), "Tamir Kiti"), esyaid = 63;
		for(new i = 0; i < 13; i ++)
		{
			GetPlayerWeaponData(playerid, i, silahid, mermi);
			if(silahid > 0 && OyuncuBilgi[playerid][oSilah][i] == silahid) if(!strcmp(SilahIsim(silahid), inputtext, true)) adet = mermi, SilahSil(playerid, silahid), format(esya, sizeof(esya), SilahIsim(silahid)), esyaid = silahid;
		}
		if(adet == 0) return false;
		RafBilgi[id][rafSilahlar][GetPVarInt(playerid, "rafliste")] = esyaid;
		RafBilgi[id][rafMermiler][GetPVarInt(playerid, "rafliste")] = adet;
		Raf_SilahYenile(id);
		Raf_Kaydet(id);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s rafa %s koydu. (SID: %d)", Tarih(), oyuncu_isim, esya, RafBilgi[id][rafID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/raf.txt", "%s", log_icerik);
		format(emote, sizeof(emote), "rafa %s koydu.", esya);
		cmd_ame(playerid, emote);
		OyuncuKaydet(playerid);
		return OyuncuBilgi[playerid][oRaf] = -1;
	}
	else if(dialogid == DIALOG_KASAISLEM) {
	    if(!response) return cmd_birlik(playerid, inputtext);
        if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yetkili iþbaþýndayken bu seçeneði kullanamazsýn.");
		if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikLevel] < 5) return HataMesaji(playerid, "Bu seçeneði kullanabilmek için birlik levelini yükseltmelisin."), cmd_birlik(playerid, inputtext);
		new kasaid = OyuncuBilgi[playerid][oKasa], baslik[64];
		format(baslik, sizeof(baslik), "{FFFFFF}Birlik Kasa - [{338833}%s{FFFFFF}]", NumaraFormati(KasaBilgi[kasaid][kasaPara]));
		if(!strcmp(inputtext, "Para Yatýr", true)) DialogGoster(playerid, DIALOG_KASAISLEM_PARAYATIR, DIALOG_STYLE_INPUT, baslik, "Kasaya yatýrmak istediðiniz para miktarýný girin;", "Yatýr", "<< Geri");
		if(!strcmp(inputtext, "Para Çek", true)) {
		    if((OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL) && OyuncuBilgi[playerid][oAdmin] < 7) return HataMesaji(playerid, "Bu birlik türü bu iþlemi yapamaz.");
		    if(OyuncuBilgi[playerid][oBirlikRutbe] != BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] && OyuncuBilgi[playerid][oBirlikLider] != BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe]) return HataMesaji(playerid, "Bu seçeneði sadece birlik lideri kullanabilir.");
			DialogGoster(playerid, DIALOG_KASAISLEM_PARACEK, DIALOG_STYLE_INPUT, baslik, "Kasadan çekmek istediðiniz para miktarýný girin;", "Çek", "<< Geri");
		}
	}
	else if(dialogid == DIALOG_KASAISLEM_PARAYATIR) {
		if(!response) return cmd_birlik(playerid, inputtext);
		if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yetkili iþbaþýndayken bu seçeneði kullanamazsýn.");
		if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikLevel] < 5) return HataMesaji(playerid, "Bu seçeneði kullanabilmek için birlik levelini yükseltmelisin."), cmd_birlik(playerid, inputtext);

	    new miktar, baslik[64], kasaid = OyuncuBilgi[playerid][oKasa];
		format(baslik, sizeof(baslik), "{FFFFFF}Birlik Kasa - [{338833}%s{FFFFFF}]", NumaraFormati(KasaBilgi[kasaid][kasaPara]));
		if(sscanf(inputtext, "d", miktar)) return DialogGoster(playerid, DIALOG_KASAISLEM_PARAYATIR, DIALOG_STYLE_INPUT, baslik, "Kasaya yatýrmak istediðiniz para miktarýný girin;", "Yatýr", "<< Geri");
		if(miktar < 1) return HataMesaji(playerid, "Girdiðiniz miktar 1 den fazla olmalýdýr."), cmd_birlik(playerid, inputtext);
		if(OyuncuBilgi[playerid][oPara] < miktar) return HataMesaji(playerid, "Üzerinde girdiðin miktarda para bulunmuyor."), cmd_birlik(playerid, inputtext);

		ParaEkle(playerid, -miktar);
		KasaBilgi[kasaid][kasaPara] += miktar;
		Kasa_Kaydet(kasaid);
		OyuncuKaydet(playerid);
		SunucuMesaji(playerid, "Birlik kasasýna %s miktarýnda para yatýrdýn.", NumaraFormati(miktar));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) birlik kasasýna %s yatýrdý. (%s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], NumaraFormati(miktar), BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/birlikkasa.txt", "%s", log_icerik);
	}
	else if(dialogid == DIALOG_KASAISLEM_PARACEK) {
		if(!response) return cmd_birlik(playerid, inputtext);
		if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yetkili iþbaþýndayken bu seçeneði kullanamazsýn.");
		if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikLevel] < 5) return HataMesaji(playerid, "Bu seçeneði kullanabilmek için birlik levelini yükseltmelisin."), cmd_birlik(playerid, inputtext);

	    new miktar, baslik[64], kasaid = OyuncuBilgi[playerid][oKasa];
		format(baslik, sizeof(baslik), "{FFFFFF}Birlik Kasa - [{338833}%s{FFFFFF}]", NumaraFormati(KasaBilgi[kasaid][kasaPara]));
		if(sscanf(inputtext, "d", miktar)) return DialogGoster(playerid, DIALOG_KASAISLEM_PARACEK, DIALOG_STYLE_INPUT, baslik, "Kasadan çekmek istediðiniz para miktarýný girin;", "Çek", "<< Geri");
		if(miktar < 1) return HataMesaji(playerid, "Girdiðiniz miktar 1 den fazla olmalýdýr."), cmd_birlik(playerid, inputtext);
        if(KasaBilgi[kasaid][kasaPara] < miktar) return HataMesaji(playerid, "Kasada girilen miktarda para bulunmuyor."), cmd_birlik(playerid, inputtext);

		ParaEkle(playerid, miktar);
		KasaBilgi[kasaid][kasaPara] -= miktar;
		Kasa_Kaydet(kasaid);
		OyuncuKaydet(playerid);
		SunucuMesaji(playerid, "Birlik kasasýndan %s miktarýnda para çektin.", NumaraFormati(miktar));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) birlik kasasýndan %s çekti. (%s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], NumaraFormati(miktar), BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/birlikkasa.txt", "%s", log_icerik);
	}
	else if(dialogid == DIALOG_KASAAYARLA) {
	    if(!response) return cmd_birlik(playerid, inputtext);
		if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikLevel] < 5) return HataMesaji(playerid, "Bu seçeneði kullanabilmek için birlik levelini yükseltmelisin."), cmd_birlik(playerid, inputtext);
		if((OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) && OyuncuBilgi[playerid][oAdmin] < 7) return HataMesaji(playerid, "Bu birlik türünün kasasýný sadece Management ayarlayabilir.");
		if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe] && OyuncuBilgi[playerid][oBirlikLider] != BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID]) return HataMesaji(playerid, "Bu seçeneði sadece birlik liderleri kullanabilir.");
		if(OyuncuBilgi[playerid][oPara] < KASA_KONUMLANDIRMA_UCRET) return HataMesaji(playerid, "Yeterli paran yok. (%s)", NumaraFormati(KASA_KONUMLANDIRMA_UCRET));

		new id = -1;
		for(new i = 0; i < MAKSIMUM_KASA; i ++) if(KasaBilgi[i][kasaBirlik] == OyuncuBilgi[playerid][oBirlikSQLID]) {
			if(KasaBilgi[i][kasaPara] > 0) return HataMesaji(playerid, "Kasanýn içinde para varken yerini deðiþtiremezsin.");
			Kasa_Kaldir(i);
		}
		id = Kasa_Yarat(playerid, OyuncuBilgi[playerid][oBirlikSQLID]);

		if(id == -1) return HataMesaji(playerid, "Kasa limitine ulaþýldýðý için yeni kasa yaratýlamýyor.");
		SunucuMesaji(playerid, "Kasa baþarýyla yaratýldý. (ID: %d)", id);

		new Float:oyuncu_pos[3];
		GetPlayerPos(playerid, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2]);
		OyuncuPosDegistir(playerid, oyuncu_pos[0], oyuncu_pos[1] + 1, oyuncu_pos[2]);
	    EditlemeSifirla(playerid);
		EditDynamicObject(playerid, KasaBilgi[id][kasaObje]);
		OyuncuBilgi[playerid][oDuzenlenenKasa] = id;
	}
	else if(dialogid == DIALOG_BIRLIK_ARACLAR) {
	    if(!response) return cmd_birlik(playerid, inputtext);

		if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikLevel] < 3) return HataMesaji(playerid, "Bu seçeneði kullanabilmek için birlik levelini yükseltmelisin."), cmd_birlik(playerid, inputtext);
		if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe] && OyuncuBilgi[playerid][oBirlikLider] != BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID]) return HataMesaji(playerid, "Bu seçeneði sadece birlik liderleri kullanabilir.");

		new sayi = 0;
		for(new i = 0; i < MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracBirlik] == BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID]) {
			sayi++;
			if(sayi == listitem + 1) {
				ASpawn(AracBilgi[i][aracYarat]), SunucuMesaji(playerid, "Birliðine ait %s(%d) model aracý yeniden çýkardýn.", AracModel(AracBilgi[i][aracModel]), AracBilgi[i][aracYarat]);
				cmd_birlik(playerid, inputtext);
				return 1;
			}
		}
	}
	else if(dialogid == DIALOG_BIRLIK_ARACEKLE) {
	    if(!response) return cmd_birlik(playerid, inputtext);
		new aracid = Arac_IDBul(GetPlayerVehicleID(playerid)), adet = 0;
		if(!Arac_SahipKontrol(playerid, aracid)) return HataMesaji(playerid, "Bu araç senin olmadýðý için bu seçeneði kullanamazsýn."), cmd_birlik(playerid, inputtext);
		for(new i = 0; i != MAKSIMUM_ARAC; i++) if(OyuncuBilgi[playerid][oBirlikSQLID] == AracBilgi[i][aracBirlik]) adet++;

		switch(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikLevel]) {
		    case 3: if(adet >= 5) return HataMesaji(playerid, "Birliðinize zaten maksimum sayýda araç eklemiþsiniz.");
		    case 4: if(adet >= 7) return HataMesaji(playerid, "Birliðinize zaten maksimum sayýda araç eklemiþsiniz.");
		    case 5: if(adet >= 10) return HataMesaji(playerid, "Birliðinize zaten maksimum sayýda araç eklemiþsiniz.");
		    case 6: if(adet >= 15) return HataMesaji(playerid, "Birliðinize zaten maksimum sayýda araç eklemiþsiniz.");
			default: if(adet >= 3) return HataMesaji(playerid, "Birliðinize zaten maksimum sayýda araç eklemiþsiniz.");
		}
		if(AracBilgi[aracid][aracBirlik] > 0) return HataMesaji(playerid, "Bu araç zaten bir birliðe baðlý.");
		if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe] && OyuncuBilgi[playerid][oBirlikLider] != BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID]) return HataMesaji(playerid, "Bu seçeneði kullanmak için birlik lideri olman gerekiyor.");

		AracBilgi[aracid][aracSahip] = 0;
		AracBilgi[aracid][aracBirlik] = BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID];
		Arac_Kaydet(aracid);
		SunucuMesaji(playerid, "%s model aracýný birliðine baðladýn.", AracModel(AracBilgi[aracid][aracModel]));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) aracýný birliðe baðladý. (SID: %d / birlik: %s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], AracBilgi[aracid][aracID], BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
	}
	else if(dialogid == DIALOG_BIRLIK_MAKSRUTBE) {
	    if(!response) return cmd_birlik(playerid, inputtext);
		if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikLevel] < 4) return HataMesaji(playerid, "Bu seçeneði kullanabilmek için birlik levelini yükseltmelisin.");

		new rutbe, sayi, birlikid = OyuncuBilgi[playerid][oBirlik];
		if(sscanf(inputtext, "d", rutbe)) DialogGoster(playerid, DIALOG_BIRLIK_MAKSRUTBE, DIALOG_STYLE_INPUT, "Birlik - Maksimum Rütbe", "Birliðinin maksimum rütbesini kaç yapmak istiyorsun?", "Ayarla", "Ýptal");
		switch(BirlikBilgi[birlikid][birlikLevel]) {
			case 4: sayi = 10;
			case 5: sayi = 15;
			case 6: sayi = 20;
			default: sayi = 6;
		}
		if(rutbe < 6 || rutbe > sayi) return DialogGoster(playerid, DIALOG_BIRLIK_MAKSRUTBE, DIALOG_STYLE_INPUT, "Birlik - Maksimum Rütbe", "{B70000}HATA: {FFFFFF}Maksimum rütbe geçersiz.\nBirliðinin maksimum rütbesini kaç yapmak istiyorsun?", "Ayarla", "Ýptal");
        BirlikBilgi[birlikid][birlikMaksRutbe] = rutbe;
        Birlik_Kaydet(birlikid);
        foreach(new i : Player) if(OyuncuBilgi[i][oBirlik] == birlikid && i != playerid) OyuncuBilgi[i][oBirlikRutbe] = 1;
		new sorgu[512];
		format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE birlik = '%d'", OyuncuBilgi[playerid][oBirlikSQLID]);
		mysql_tquery(mysqlB, sorgu, "RutbeDuzenlemeBirlik", "d", playerid);
	}
	else if(dialogid == DIALOG_BIRLIK_KALDIR) {
	    if(!response) return cmd_birlik(playerid, inputtext);

		if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Birliðin yokken bu seçeneði kullanamazsýn.");
		if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe]) return HataMesaji(playerid, "Bu seçeneði kullanmak için birlik lideri olman gerekiyor.");

		SunucuMesaji(playerid, "%s adlý birliðini kendi isteðinle sildin.", BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd]);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) kendi birliðini sildi. (%s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
		Birlik_Sil(OyuncuBilgi[playerid][oBirlik]);
	}
	else if(dialogid == DIALOG_BIRLIK_DUYURU) {
	    if(!response) return cmd_birlik(playerid, inputtext);

		if(!strcmp(inputtext, "Yok", true))
		{
			BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikDuyuru][0] = 0;
			Birlik_Kaydet(OyuncuBilgi[playerid][oBirlik]);
			return SunucuMesaji(playerid, "Duyuru kaldýrýldý.");
		}
		else if(strlen(inputtext) < 6 || strlen(inputtext) > 48) return HataMesaji(playerid, "Girilen duyuru en az 6 en fazla 48 harfli olmalýdýr.");
		else {
		    new birlikid;
		    birlikid = OyuncuBilgi[playerid][oBirlik];
		    format(BirlikBilgi[birlikid][birlikDuyuru], 48, "%s", inputtext);
		    Birlik_Kaydet(birlikid);
			SunucuMesaji(playerid, "Birlik duyurusu güncellendi.");
		    foreach(new o : Player) if(OyuncuBilgi[o][oBirlik] == birlikid) BirlikDuyuruMesaji(o, "%s", inputtext);
		    return true;
		}
	}
	else if(dialogid == DIALOG_BIRLIK_AYRIL) {
	    if(response) {
	    	new birlikid = OyuncuBilgi[playerid][oBirlik];
			foreach(new i : Player) if(OyuncuBilgi[i][oBirlik] == birlikid && i != playerid) {
				SendClientMessageEx(i, RENK_SERVER, "Birlik: {FFFFFF} {7a8a9a}%s adlý oyuncu birlikten ayrýldý.", OyuncuIsim(playerid));
			}
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) birlikten ayrýldý. (%s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], BirlikBilgi[birlikid][birlikAd]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
			SunucuMesaji(playerid, "%s adlý birlikten kendi isteðinle ayrýldýn.", BirlikBilgi[birlikid][birlikAd]);
			BirlikSifirla(playerid);
	    }
		else if(!response) return SunucuMesaji(playerid, "Birliðinden ayrýlmaktan vazgeçtin.");
	}
	else if(dialogid == DIALOG_BIRLIK_DAVET) {
		if(response) {
			static oyuncu, yazi[256];
			if(sscanf(inputtext, "u", oyuncu))
				return DialogGoster(playerid, DIALOG_BIRLIK_DAVET, DIALOG_STYLE_INPUT, "Birlik Davet", "{B70000}HATA: {FFFFFF}Geçersiz oyuncu.\nBirliðine davet etmek istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

			if(!IsPlayerConnected(oyuncu) || OyuncuBilgi[oyuncu][oGiris] == false)
			    return DialogGoster(playerid, DIALOG_BIRLIK_DAVET, DIALOG_STYLE_INPUT, "Birlik Davet", "{B70000}HATA: {FFFFFF}Oyuncu giriþ yapmamýþ.\nBirliðine davet etmek istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

			if(oyuncu == playerid)
			    return DialogGoster(playerid, DIALOG_BIRLIK_DAVET, DIALOG_STYLE_INPUT, "Birlik Davet", "{B70000}HATA: {FFFFFF}Kendine davet yollayamazsýn.\nBirliðine davet etmek istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

 			if(OyuncuBilgi[oyuncu][oBirlik] > -1)
			    return DialogGoster(playerid, DIALOG_BIRLIK_DAVET, DIALOG_STYLE_INPUT, "Birlik Davet", "{B70000}HATA: {FFFFFF}Girilen oyuncu baþka bir birlik üyesi!\nBirliðine davet etmek istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

			new sorgu[256], Cache:sorgu_cache;
			format(sorgu, sizeof(sorgu), "SELECT `ID` FROM `oyuncular` WHERE `hesap` = '%d' AND `birlik` = '%d' LIMIT 1", OyuncuBilgi[oyuncu][oHesap], OyuncuBilgi[playerid][oBirlikSQLID]);
			sorgu_cache = mysql_query(mysqlB, sorgu);
			if(cache_num_rows()) return cache_delete(sorgu_cache), DialogGoster(playerid, DIALOG_BIRLIK_DAVET, DIALOG_STYLE_INPUT, "Birlik Davet", "{B70000}HATA: {FFFFFF}Oyuncunun baþka bir karakteri senin birliðinde.\nBirliðine davet etmek istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");
			cache_delete(sorgu_cache);
        	OyuncuBilgi[oyuncu][oBirlikDavetEden] = playerid;
        	SunucuMesaji(playerid, "%s adlý oyuncuyu birliðine davet ettin.", OyuncuIsim(oyuncu));
        	format(yazi, sizeof(yazi), "%s adlý birliðe %s tarafýndan davet edildin.\n{E9E600}BÝLGÝ:{FFFFFF} Katýlmak için onayla tuþunu kullan.", BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd], OyuncuIsim(playerid));
        	DialogGoster(oyuncu, DIALOG_BIRLIK_DAVET1, DIALOG_STYLE_MSGBOX, "Birlik Davet", yazi, "Onayla", "Reddet");
        }
	}
	else if(dialogid == DIALOG_BIRLIK_DAVET1) {
	    if(response) {
	        new birlikdavet = OyuncuBilgi[playerid][oBirlikDavetEden], birlikid = OyuncuBilgi[birlikdavet][oBirlik];
			new sorgu[256], Cache:sorgu_cache;
			format(sorgu, sizeof(sorgu), "SELECT `ID` FROM `oyuncular` WHERE `hesap` = '%d' AND `birlik` = '%d' LIMIT 1", OyuncuBilgi[playerid][oHesap], OyuncuBilgi[birlikdavet][oBirlikSQLID]);
			sorgu_cache = mysql_query(mysqlB, sorgu);
			if(cache_num_rows()) return cache_delete(sorgu_cache), HataMesaji(playerid, "Bu birlikte baþka bir karakterin var.");
			cache_delete(sorgu_cache);
	        OyuncuBilgi[playerid][oBirlik] = birlikid;
	        OyuncuBilgi[playerid][oBirlikRutbe] = 1;
			BirlikMesaji(OyuncuBilgi[playerid][oBirlik], RENK_BIRLIK, "[BIRLIK]{FFFFFF} %s, %s tarafýndan birliðe dahil edildi.", OyuncuIsim(playerid), OyuncuIsim(birlikdavet));
			OyuncuBilgi[playerid][oBirlikDavetEden] = -1;
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], davet_edilen[MAX_PLAYER_NAME + 1];
			GetPlayerName(birlikdavet, oyuncu_isim, sizeof(oyuncu_isim));
			GetPlayerName(playerid, davet_edilen, sizeof(davet_edilen));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) tarafýndan birliðe dahil edildi. (birlik: %s)", Tarih(), davet_edilen, OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[birlikdavet][oID], BirlikBilgi[birlikid][birlikAd]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
	    }
	    else if(!response) {
	    	new birlikdavet = OyuncuBilgi[playerid][oBirlikDavetEden];
 			SunucuMesaji(playerid, "%s adlý kiþinin davetini reddettin.", OyuncuIsim(birlikdavet));
			SunucuMesaji(OyuncuBilgi[playerid][oBirlikDavetEden], "%s birlik davetini reddetti.", OyuncuIsim(playerid));
	        OyuncuBilgi[playerid][oBirlikDavetEden] = -1;
	    }
	    OyuncuKaydet(playerid);
	}
	else if(dialogid == DIALOG_BIRLIK_KOV) {
	    if(response) {
	        new oyuncuid, birlikid = OyuncuBilgi[playerid][oBirlik];
			if(sscanf(inputtext, "u", oyuncuid))
				return DialogGoster(playerid, DIALOG_BIRLIK_KOV, DIALOG_STYLE_INPUT, "Birlik Kov", "{B70000}HATA: {FFFFFF}Geçersiz oyuncu.\nBirliðinden atmak istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

			if(!IsPlayerConnected(oyuncuid))
			    return DialogGoster(playerid, DIALOG_BIRLIK_KOV, DIALOG_STYLE_INPUT, "Birlik Kov", "{B70000}HATA: {FFFFFF}Geçersiz oyuncu.\nBirliðinden atmak istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

			if(oyuncuid == playerid)
			    return DialogGoster(playerid, DIALOG_BIRLIK_KOV, DIALOG_STYLE_INPUT, "Birlik Kov", "{B70000}HATA: {FFFFFF}Kendini atamazsýn.\nBirliðinden atmak istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

 			if(OyuncuBilgi[oyuncuid][oBirlik] != OyuncuBilgi[playerid][oBirlik])
			    return DialogGoster(playerid, DIALOG_BIRLIK_KOV, DIALOG_STYLE_INPUT, "Birlik Kov", "{B70000}HATA: {FFFFFF}Senin birliðinde olmayan birisini atamazsýn.\nBirliðinden atmak istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");
			    
 			if(OyuncuBilgi[oyuncuid][oBirlikRutbe] == BirlikBilgi[birlikid][birlikMaksRutbe])
			    return DialogGoster(playerid, DIALOG_BIRLIK_KOV, DIALOG_STYLE_INPUT, "Birlik Kov", "{B70000}HATA: {FFFFFF}Birlik lideri birlikten atýlamaz.\nBirliðinden atmak istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

			BirlikSifirla(oyuncuid);
			BirlikMesaji(OyuncuBilgi[playerid][oBirlik], RENK_BIRLIK, "[BIRLIK]{FFFFFF} %s, %s tarafýndan birlikten atýldý.", OyuncuIsim(oyuncuid), OyuncuIsim(playerid));
			SunucuMesaji(playerid, "%s adlý kiþiyi birlikten attýn.", OyuncuIsim(oyuncuid));
			SunucuMesaji(oyuncuid, "%s tarafýndan %s adlý birlikten atýldýn.", OyuncuIsim(playerid), BirlikBilgi[birlikid][birlikAd]);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], atilan_id[MAX_PLAYER_NAME + 1];
			GetPlayerName(oyuncuid, atilan_id, sizeof(atilan_id));
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) tarafýndan birlikten atýldý. (birlik: %s)", Tarih(), atilan_id, OyuncuBilgi[oyuncuid][oID], oyuncu_isim, OyuncuBilgi[playerid][oID], BirlikBilgi[birlikid][birlikAd]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
		}
	}
	else if(dialogid == DIALOG_BIRLIK_MAAS) {
		if(!response) return 0;

		OyuncuBilgi[playerid][oDuzenlenenRutbe] = listitem;
		DialogGoster(playerid, DIALOG_BIRLIK_MAASDUZENLE, DIALOG_STYLE_INPUT, "Maaþ Düzenle", "Seçilen rütbe için maaþ miktarý girin;", "Seç", "Ýptal");
	}
	else if(dialogid == DIALOG_BIRLIK_MAASDUZENLE) {
	    if(!response) cmd_birlik(playerid, inputtext);

		new maas;
		if(sscanf(inputtext, "d", maas)) return DialogGoster(playerid, DIALOG_BIRLIK_MAASDUZENLE, DIALOG_STYLE_INPUT, "Maaþ Düzenle", "Seçilen rütbe için maaþ miktarý girin;", "Seç", "Ýptal");
		if(maas < 0 || maas > 5000) return DialogGoster(playerid, DIALOG_BIRLIK_MAASDUZENLE, DIALOG_STYLE_INPUT, "Maaþ Düzenle", "{B70000}HATA: {FFFFFF}Girilen maaþ en düþük $0, en yüksek $5,000 olabilir.\nSeçilen rütbe için maaþ miktarý girin;", "Seç", "Ýptal");

		new birlikid = OyuncuBilgi[playerid][oBirlik];
		BirlikBilgi[birlikid][birlikMaas][OyuncuBilgi[playerid][oDuzenlenenRutbe]] = maas;
		Birlik_Kaydet(birlikid);
		SunucuMesaji(playerid, "Rütbenin maaþý %s olarak ayarlandý. (Rütbe: %d)", NumaraFormati(maas), OyuncuBilgi[playerid][oDuzenlenenRutbe] + 1);
	}
	else if(dialogid == DIALOG_BIRLIK_RDUZENLE) {
		if(response) {
			OyuncuBilgi[playerid][oDuzenlenenRutbe] = listitem;
			DialogGoster(playerid, DIALOG_BIRLIK_RDUZENLE + 1, DIALOG_STYLE_INPUT, "Rütbe Düzenle", "Yeni rütbe adýný girin;", "Seç", "Ýptal");
		}
	}
	else if(dialogid == DIALOG_BIRLIK_RDUZENLE + 1) {
	    if(response) {
	        new birlikid = OyuncuBilgi[playerid][oBirlik];
	        switch(OyuncuBilgi[playerid][oDuzenlenenRutbe]) {
	            case 0: format(BirlikBilgi[birlikid][birlikR1], 32, "%s", inputtext);
             	case 1: format(BirlikBilgi[birlikid][birlikR2], 32, "%s", inputtext);
             	case 2: format(BirlikBilgi[birlikid][birlikR3], 32, "%s", inputtext);
              	case 3: format(BirlikBilgi[birlikid][birlikR4], 32, "%s", inputtext);
              	case 4: format(BirlikBilgi[birlikid][birlikR5], 32, "%s", inputtext);
              	case 5: format(BirlikBilgi[birlikid][birlikR6], 32, "%s", inputtext);
              	case 6: format(BirlikBilgi[birlikid][birlikR7], 32, "%s", inputtext);
              	case 7: format(BirlikBilgi[birlikid][birlikR8], 32, "%s", inputtext);
              	case 8: format(BirlikBilgi[birlikid][birlikR9], 32, "%s", inputtext);
              	case 9: format(BirlikBilgi[birlikid][birlikR10], 32, "%s", inputtext);
              	case 10: format(BirlikBilgi[birlikid][birlikR11], 32, "%s", inputtext);
              	case 11: format(BirlikBilgi[birlikid][birlikR12], 32, "%s", inputtext);
              	case 12: format(BirlikBilgi[birlikid][birlikR13], 32, "%s", inputtext);
              	case 13: format(BirlikBilgi[birlikid][birlikR14], 32, "%s", inputtext);
              	case 14: format(BirlikBilgi[birlikid][birlikR15], 32, "%s", inputtext);
              	case 15: format(BirlikBilgi[birlikid][birlikR16], 32, "%s", inputtext);
              	case 16: format(BirlikBilgi[birlikid][birlikR17], 32, "%s", inputtext);
              	case 17: format(BirlikBilgi[birlikid][birlikR18], 32, "%s", inputtext);
              	case 18: format(BirlikBilgi[birlikid][birlikR19], 32, "%s", inputtext);
              	case 19: format(BirlikBilgi[birlikid][birlikR20], 32, "%s", inputtext);
	        }
	        SunucuMesaji(playerid, "Rütbe %d, %s olarak yeniden adlandýrýldý.", OyuncuBilgi[playerid][oDuzenlenenRutbe] + 1, inputtext);
	        Birlik_Kaydet(birlikid);
	    }
	    else if(!response) cmd_birlik(playerid, inputtext);
	}
	else if(dialogid == DIALOG_BIRLIK_YETKILI) {
	    if(!response) return cmd_birlik(playerid, inputtext);
	
		new oyuncu;
		if(sscanf(inputtext, "u", oyuncu))
		    return DialogGoster(playerid, DIALOG_BIRLIK_YETKILI, DIALOG_STYLE_INPUT, "Yetkili Ayarla", "{FFFFFF}Lütfen yetkili durumunu deðiþtirmek istediðiniz oyuncunun ismini veya ID'sini giriniz;\n{B70000}NOT: {FFFFFF}Yetkisi olan birisini seçerseniz yetkisi alýnýr.", "Seç", "Geri");

		if(!IsPlayerConnected(oyuncu))
		    return DialogGoster(playerid, DIALOG_BIRLIK_YETKILI, DIALOG_STYLE_INPUT, "Rütbe Ver", "{B70000}HATA: {FFFFFF}Girilen oyuncu geçersiz.\n\n{FFFFFF}Lütfen yetkili durumunu deðiþtirmek istediðiniz oyuncunun ismini veya ID'sini giriniz;\n{B70000}NOT: {FFFFFF}Yetkisi olan birisini seçerseniz yetkisi alýnýr.", "Seç", "Geri");

		if(oyuncu == playerid)
		    return DialogGoster(playerid, DIALOG_BIRLIK_YETKILI, DIALOG_STYLE_INPUT, "Rütbe Ver", "{B70000}HATA: {FFFFFF}Kendi yetkili durumunu deðiþtiremezsin.\n\n{FFFFFF}Lütfen yetkili durumunu deðiþtirmek istediðiniz oyuncunun ismini veya ID'sini giriniz;\n{B70000}NOT: {FFFFFF}Yetkisi olan birisini seçerseniz yetkisi alýnýr.", "Seç", "Geri");

		if(OyuncuBilgi[oyuncu][oBirlik] != OyuncuBilgi[playerid][oBirlik])
		    return DialogGoster(playerid, DIALOG_BIRLIK_YETKILI, DIALOG_STYLE_INPUT, "Rütbe Ver", "{B70000}HATA: {FFFFFF}Girilen oyuncu senin birliðinde deðil.\n\n{FFFFFF}Lütfen yetkili durumunu deðiþtirmek istediðiniz oyuncunun ismini veya ID'sini giriniz;\n{B70000}NOT: {FFFFFF}Yetkisi olan birisini seçerseniz yetkisi alýnýr.", "Seç", "Geri");

		if(OyuncuBilgi[oyuncu][oBirlikLider] == OyuncuBilgi[playerid][oBirlikSQLID]) {
		    OyuncuBilgi[oyuncu][oBirlikLider] = 0;
			SunucuMesaji(oyuncu, "Birlik yetkin %s tarafýndan alýndý.", OyuncuIsim(playerid));
			SunucuMesaji(playerid, "%s adlý kiþinin birlik yetkisini aldýn.", OyuncuIsim(oyuncu));
			OyuncuKaydet(oyuncu);
			return 1;
		}
		else {
		    OyuncuBilgi[oyuncu][oBirlikLider] = OyuncuBilgi[playerid][oBirlikSQLID];
			SunucuMesaji(oyuncu, "%s tarafýndan birlik yetkilisi yapýldýn.", OyuncuIsim(playerid));
			SunucuMesaji(playerid, "%s adlý kiþiyi birlik yetkilisi yaptýn.", OyuncuIsim(oyuncu));
			OyuncuKaydet(oyuncu);
		}
	}
	else if(dialogid == DIALOG_BIRLIK_RUTBEVER) {
		if(response) {
			new oyuncu;
			if(sscanf(inputtext, "u", oyuncu))
			    return DialogGoster(playerid, DIALOG_BIRLIK_RUTBEVER, DIALOG_STYLE_INPUT, "Rütbe Ver", "Rütbe vermek istediðin oyuncunun ismini veya ID'sini girin;", "Seç", "Geri");

			if(!IsPlayerConnected(oyuncu))
			    return DialogGoster(playerid, DIALOG_BIRLIK_RUTBEVER, DIALOG_STYLE_INPUT, "Rütbe Ver", "{B70000}HATA: {FFFFFF}Girilen oyuncu geçersiz.\n\nRütbe vermek istediðin oyuncunun ismini veya ID'sini girin;", "Seç", "Geri");

			if(oyuncu == playerid && OyuncuBilgi[playerid][oBirlikLider] != OyuncuBilgi[playerid][oBirlikSQLID])
			    return DialogGoster(playerid, DIALOG_BIRLIK_RUTBEVER, DIALOG_STYLE_INPUT, "Rütbe Ver", "{B70000}HATA: {FFFFFF}Kendi rütbeni deðiþtiremezsin.\n\nRütbe vermek istediðin oyuncunun ismini veya ID'sini girin;", "Seç", "Geri");

			if(OyuncuBilgi[oyuncu][oBirlik] != OyuncuBilgi[playerid][oBirlik])
			    return DialogGoster(playerid, DIALOG_BIRLIK_RUTBEVER, DIALOG_STYLE_INPUT, "Rütbe Ver", "{B70000}HATA: {FFFFFF}Girilen oyuncu senin birliðinde deðil.\n\nRütbe vermek istediðin oyuncunun ismini veya ID'sini girin;", "Seç", "Geri");

			if(BirlikBilgi[OyuncuBilgi[oyuncu][oBirlik]][birlikMaksRutbe] == OyuncuBilgi[oyuncu][oBirlikRutbe])
			    return DialogGoster(playerid, DIALOG_BIRLIK_RUTBEVER, DIALOG_STYLE_INPUT, "Rütbe Ver", "{B70000}HATA: {FFFFFF}Birlik sahibinin rütbesini deðiþtiremezsin.\n\nRütbe vermek istediðin oyuncunun ismini veya ID'sini girin;", "Seç", "Geri");

	        OyuncuBilgi[playerid][oDuzenlenenRutbe] = oyuncu;
	        new birlikid = OyuncuBilgi[playerid][oBirlik], yazi[1024], ekleme[256];
			for(new i = 0; i <= BirlikBilgi[birlikid][birlikMaksRutbe] - 1; i++)
			{
			    if(i == 0) continue;
				switch(i) {
					case 1: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR1]);
					case 2: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR2]);
					case 3: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR3]);
					case 4: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR4]);
					case 5: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR5]);
					case 6: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR6]);
					case 7: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR7]);
					case 8: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR8]);
					case 9: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR9]);
					case 10: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR10]);
					case 11: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR11]);
					case 12: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR12]);
					case 13: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR13]);
					case 14: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR14]);
					case 15: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR15]);
					case 16: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR16]);
					case 17: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR17]);
					case 18: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR18]);
					case 19: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR19]);
					case 20: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR20]);
				}
				strcat(yazi, ekleme, sizeof(ekleme));
			}
			DialogGoster(playerid, DIALOG_BIRLIK_RUTBEVER1, DIALOG_STYLE_TABLIST, "Rütbe Seçimi", yazi, "Seç", "Kapat");
		}
	    else if(!response) return cmd_birlik(playerid, inputtext);
	}
	else if(dialogid == DIALOG_BIRLIK_RUTBEVER1) {
	    if(response) {
	        new oyuncu = OyuncuBilgi[playerid][oDuzenlenenRutbe];
	        if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Bir sorun oluþtu.");
			OyuncuBilgi[oyuncu][oBirlikRutbe] = listitem + 1;
			BirlikMesaji(OyuncuBilgi[playerid][oBirlik], RENK_BIRLIK, "[BIRLIK]{FFFFFF} %s, %s adlý kiþinin rütbesini %s olarak deðiþtirdi.", OyuncuIsim(playerid), OyuncuIsim(oyuncu), OyuncuRutbeAdi(oyuncu));
		}
	    else if(!response) cmd_birlik(playerid, inputtext);
	}
	else if(dialogid == DIALOG_YAYIN) {
	    if(!response) return 0;

	    if(!strcmp(inputtext, "Yayýn Baþlat", true)) {
	        if(OyuncuBirlikTuru(playerid) != BIRLIK_HABERAJANSI) return HataMesaji(playerid, "Birlik türün bu sistem için uygun deðil.");
            for(new i = 0; i != MAKSIMUM_YAYIN; i++) if(YayinBilgi[i][yayinKullanimda] == true && YayinBilgi[i][yayinBirlik] == OyuncuBilgi[playerid][oBirlikSQLID]) return HataMesaji(playerid, "Birliðinizden daha önce yayýn açýlmýþ.");
		    for(new i = 0; i != MAKSIMUM_YAYIN; i++) if(YayinBilgi[i][yayinKullanimda] == false)
			{
				YayinBilgi[i][yayinKullanimda] = true;
			    YayinBilgi[i][yayinYapan] = playerid;
			    YayinBilgi[i][yayinDavetli] = INVALID_PLAYER_ID;
			    YayinBilgi[i][yayinBirlik] = OyuncuBilgi[playerid][oBirlikSQLID];
			    YayinBilgi[i][yayinMuzik][0] = 0;
			    YayinBilgi[i][yayinCekilis] = 0;
				new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
				GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
				format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir yayýn baþlattý. (Birlik: %s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd]);
				Gunluk_LogKaydet(log_icerik);
			    return SendClientMessageToAllEx(RENK_YAYIN, "YAYIN: %s bir yayýn baþlattý, dinlemek için /yayindinle komutunu kullanabilirsin.", BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd]);
			}
			HataMesaji(playerid, "Sunucuda maksimum sayýda yayýn var, yayýn oluþturulamadý.");
	    }
  	    else if(!strcmp(inputtext, "Yayýn Davet", true)) {
	        if(OyuncuBirlikTuru(playerid) != BIRLIK_HABERAJANSI) return HataMesaji(playerid, "Birlik türün bu sistem için uygun deðil.");

		    for(new i = 0; i != MAKSIMUM_YAYIN; i++) if(YayinBilgi[i][yayinKullanimda] == true && YayinBilgi[i][yayinYapan] == playerid)
			{
			    if(YayinBilgi[i][yayinDavetli] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Yayýnda bir davetli var, önce onu çýkarmalýsýn.");

				SetPVarInt(playerid, "Yayin_Davet", i);
				return DialogGoster(playerid, DIALOG_YAYIN_DAVET, DIALOG_STYLE_INPUT, "Yayýn Davet", "Lütfen yayýna almak istediðiniz oyuncunun ID veya ismini girin;", "Davet", "Kapat");
			}
			HataMesaji(playerid, "Yayýnda deðilsin.");
	    }
	    else if(!strcmp(inputtext, "Yayýndan Çýkar", true)) {
	        if(OyuncuBirlikTuru(playerid) != BIRLIK_HABERAJANSI) return HataMesaji(playerid, "Birlik türün bu sistem için uygun deðil.");

		    for(new i = 0; i != MAKSIMUM_YAYIN; i++) if(YayinBilgi[i][yayinKullanimda] == true && YayinBilgi[i][yayinYapan] == playerid)
			{
			    if(YayinBilgi[i][yayinDavetli] == INVALID_PLAYER_ID) return HataMesaji(playerid, "Yayýnda davetli birisi yok.");
				SendClientMessageEx(playerid, RENK_YAYIN, "[YAYIN] %s adlý kiþiyi yayýndan çýkardýn.", OyuncuIsim(YayinBilgi[i][yayinDavetli]));
				SendClientMessageEx(YayinBilgi[i][yayinDavetli], RENK_YAYIN, "[YAYIN] %s tarafýndan yayýndan çýkarýldýn.", OyuncuIsim(playerid));
			    return YayinBilgi[i][yayinDavetli] = INVALID_PLAYER_ID;
			}
			HataMesaji(playerid, "Yayýnda deðilsin.");
	    }
	    else if(!strcmp(inputtext, "Müzik Ayarla", true)) {
	        if(OyuncuBirlikTuru(playerid) != BIRLIK_HABERAJANSI) return HataMesaji(playerid, "Birlik türün bu sistem için uygun deðil.");

		    for(new i = 0; i != MAKSIMUM_YAYIN; i++) if(YayinBilgi[i][yayinKullanimda] == true && YayinBilgi[i][yayinYapan] == playerid) return DialogGoster(playerid, DIALOG_YAYIN_MUZIK, DIALOG_STYLE_INPUT, "Yayýn - Müzik Ayarla", "{FFFFFF}Lütfen yayýnda çalmasýný istediðiniz müzik linkini giriniz;\n{B70000}NOT: {FFFFFF}Boþ býrakýrsanýz müziði kaldýrýrsýnýz.", "Tamam", "Kapat");
			HataMesaji(playerid, "Yayýnda deðilsin.");
	    }
	    else if(!strcmp(inputtext, "Çekiliþ Ayarla", true)) {
	        if(OyuncuBirlikTuru(playerid) != BIRLIK_HABERAJANSI) return HataMesaji(playerid, "Birlik türün bu sistem için uygun deðil.");

		    for(new i = 0; i != MAKSIMUM_YAYIN; i++) if(YayinBilgi[i][yayinKullanimda] == true && YayinBilgi[i][yayinYapan] == playerid) {
		        if(YayinBilgi[i][yayinCekilis] != 0) return HataMesaji(playerid, "Daha önce bir çekiliþ ayarlamýþsýn, /yayinpanel > Çekiliþ Yap butonuyla çekiliþi yapabilirsin.");
				return DialogGoster(playerid, DIALOG_YAYIN_CEKILIS, DIALOG_STYLE_INPUT, "Yayýn - Çekiliþ Baþlat", "{FFFFFF}Lütfen çekiliþ yapmak istediðiniz miktarý giriniz;", "Tamam", "Kapat");
			}
			HataMesaji(playerid, "Yayýnda deðilsin.");
	    }
	    else if(!strcmp(inputtext, "Çekiliþ Yap", true)) {
	        if(OyuncuBirlikTuru(playerid) != BIRLIK_HABERAJANSI) return HataMesaji(playerid, "Birlik türün bu sistem için uygun deðil.");
			new sayi = 0, cekilis_listesi[MAX_PLAYERS], kazanan = INVALID_PLAYER_ID, birlikisim[64];
			format(birlikisim, sizeof(birlikisim), "%s", BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd]);
			for(new c = 0; c != MAX_PLAYERS; c++) cekilis_listesi[c] = INVALID_PLAYER_ID;
		    for(new i = 0; i != MAKSIMUM_YAYIN; i++) if(YayinBilgi[i][yayinKullanimda] == true && YayinBilgi[i][yayinYapan] == playerid) {
				if(YayinBilgi[i][yayinCekilis] < 1) return HataMesaji(playerid, "Çekiliþ baþlatmamýþsýn.");
                for(new k = 0; k < MAKSIMUM_KASA; k++) if(KasaBilgi[k][kasaBirlik] == OyuncuBilgi[playerid][oBirlikSQLID]) {
					if(KasaBilgi[k][kasaPara] < YayinBilgi[i][yayinCekilis]) return HataMesaji(playerid, "Kasada bu kadar para yok, çekiliþ iptal edildi.");
					
					foreach(new o : Player) if(OyuncuBilgi[o][oGiris] == true && OyuncuBilgi[o][oDinlenenYayin] == YayinBilgi[i][yayinBirlik]) cekilis_listesi[sayi] = o, sayi++;
					if(sayi == 0) return HataMesaji(playerid, "Yayýnýnýzý kimse dinlemiyor.");
					kazanan = random(sayi);
					kazanan = cekilis_listesi[kazanan];
					if(!IsPlayerConnected(kazanan) || OyuncuBilgi[kazanan][oGiris] == false || OyuncuBilgi[kazanan][oDinlenenYayin] != YayinBilgi[i][yayinBirlik]) return HataMesaji(playerid, "Kazanan artýk kanalýnýzý dinlemiyor, tekrar çekilmesi gerekiyor.");
					else {
					    KasaBilgi[k][kasaPara] -= YayinBilgi[i][yayinCekilis];
					    Kasa_Kaydet(k);
					    OyuncuBilgi[kazanan][oBankaPara] += YayinBilgi[i][yayinCekilis];
					    SendClientMessageEx(kazanan, RENK_YAYIN, "[YAYIN] Yayýndaki çekiliþi kazandýn, %s hesabýna eklendi.", NumaraFormati(YayinBilgi[i][yayinCekilis]));
    	    			foreach(new oid : Player) if(OyuncuBilgi[oid][oGiris] == true && OyuncuBilgi[oid][oDinlenenYayin] == YayinBilgi[i][yayinBirlik]) SendClientMessageEx(oid, RENK_BEYAZ, "{%06x}[YAYIN] {FFFFFF}%s çekiliþ yaptý, %s adlý kiþi {33aa33}%s{FFFFFF} kazandý.", RENK_YAYIN >>> 8, birlikisim, OyuncuIsim(kazanan), NumaraFormati(YayinBilgi[i][yayinCekilis]));
                        YayinBilgi[i][yayinCekilis] = 0;
						return OyuncuKaydet(kazanan);
					}
                }
			}
			HataMesaji(playerid, "Yayýnda deðilsin.");
	    }
 	    else if(!strcmp(inputtext, "Yayýn Bitir", true)) {
	        if(OyuncuBirlikTuru(playerid) != BIRLIK_HABERAJANSI) return HataMesaji(playerid, "Birlik türün bu sistem için uygun deðil.");

		    for(new i = 0; i != MAKSIMUM_YAYIN; i++) if(YayinBilgi[i][yayinKullanimda] == true && YayinBilgi[i][yayinYapan] == playerid)
			{
			    foreach(new o : Player) if(OyuncuBilgi[o][oGiris] == true && OyuncuBilgi[o][oDinlenenYayin] == YayinBilgi[i][yayinBirlik]) StopAudioStreamForPlayer(o), SendClientMessageEx(o, RENK_YAYIN, "[YAYIN] Yayýn müziði kanal tarafýndan kapatýldý.");
				YayinBilgi[i][yayinKullanimda] = false;
			    YayinBilgi[i][yayinYapan] = INVALID_PLAYER_ID;
			    YayinBilgi[i][yayinDavetli] = INVALID_PLAYER_ID;
				YayinBilgi[i][yayinBirlik] = -1;
				YayinBilgi[i][yayinMuzik][0] = 0;
				YayinBilgi[i][yayinCekilis] = 0;
				new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
				GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
				format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) yayýn bitirdi. (Birlik: %s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd]);
				Gunluk_LogKaydet(log_icerik);
			    return SunucuMesaji(playerid, "Yayýn bitirildi.");
			}
			HataMesaji(playerid, "Yayýnda deðilsin.");
	    }
	}
	else if(dialogid == DIALOG_YAYIN_CEKILIS) {
		if(!response) return 0;
		
		new miktar;
		if(sscanf(inputtext, "d", miktar)) return DialogGoster(playerid, DIALOG_YAYIN_CEKILIS, DIALOG_STYLE_INPUT, "Yayýn - Çekiliþ Baþlat", "{FFFFFF}Lütfen çekiliþ yapmak istediðiniz miktarý giriniz;", "Tamam", "Kapat");
		if(miktar < 1) return DialogGoster(playerid, DIALOG_YAYIN_CEKILIS, DIALOG_STYLE_INPUT, "Yayýn - Çekiliþ Baþlat", "{B70000}HATA: {FFFFFF}Miktar en az $1 olmalýdýr.\n{FFFFFF}Lütfen çekiliþ yapmak istediðiniz miktarý giriniz;", "Tamam", "Kapat");
		for(new i = 0; i < MAKSIMUM_KASA; i ++) if(KasaBilgi[i][kasaBirlik] == OyuncuBilgi[playerid][oBirlikSQLID]) {
		    if(KasaBilgi[i][kasaPara] < miktar) return DialogGoster(playerid, DIALOG_YAYIN_CEKILIS, DIALOG_STYLE_INPUT, "Yayýn - Çekiliþ Baþlat", "{B70000}HATA: {FFFFFF}Kasada bu kadar para yok.\n{FFFFFF}Lütfen çekiliþ yapmak istediðiniz miktarý giriniz;", "Tamam", "Kapat");
			for(new y = 0; y != MAKSIMUM_YAYIN; y++) if(YayinBilgi[y][yayinKullanimda] == true && YayinBilgi[y][yayinYapan] == playerid)
			{
				YayinBilgi[y][yayinCekilis] = miktar;
				return SendClientMessageToAllEx(RENK_YAYIN, "YAYIN: %s bir çekiliþ baþlattý, katýlmak için /yayindinle komutunu kullanabilirsin.", BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd]);
			}
		}
		HataMesaji(playerid, "Birliðinin kasasý yok.");
	}
	else if(dialogid == DIALOG_YAYIN_MUZIK) {
	    if(!response) return 0;
	
		if(isnull(inputtext)) {
		    for(new i = 0; i != MAKSIMUM_YAYIN; i++) if(YayinBilgi[i][yayinKullanimda] == true && YayinBilgi[i][yayinYapan] == playerid)
			{
				YayinBilgi[i][yayinMuzik][0] = 0;
				SunucuMesaji(playerid, "Yayýndaki müzik kaldýrýldý.");
				foreach(new o : Player) if(OyuncuBilgi[o][oGiris] == true && OyuncuBilgi[o][oDinlenenYayin] == YayinBilgi[i][yayinBirlik]) StopAudioStreamForPlayer(o), SendClientMessageEx(o, RENK_YAYIN, "[YAYIN] Yayýn müziði kanal tarafýndan kapatýldý.");
				return 1;
			}
			HataMesaji(playerid, "Yayýnda deðilsin.");
		    return 1;
		}
		
		for(new i = 0; i != MAKSIMUM_YAYIN; i++) if(YayinBilgi[i][yayinKullanimda] == true && YayinBilgi[i][yayinYapan] == playerid)
		{
			format(YayinBilgi[i][yayinMuzik], 144, "%s", inputtext);
			SunucuMesaji(playerid, "Yayýna bir müzik ekledin, dinleyicilerin artýk bu müziði dinliyor.");
			foreach(new o : Player) if(OyuncuBilgi[o][oGiris] == true && OyuncuBilgi[o][oDinlenenYayin] == YayinBilgi[i][yayinBirlik]) StopAudioStreamForPlayer(o), PlayAudioStreamForPlayer(o, inputtext), SendClientMessageEx(o, RENK_YAYIN, "[YAYIN] Kanal tarafýndan yayýna bir müzik eklendi.");
			return 1;
		}
		HataMesaji(playerid, "Yayýnda deðilsin.");
		return 1;
	}
	else if(dialogid == DIALOG_YAYIN_DAVET) {
	    if(!response) return 0;

	    new oyuncuid;
	    if(sscanf(inputtext, "u", oyuncuid)) return DialogGoster(playerid, DIALOG_YAYIN_DAVET, DIALOG_STYLE_INPUT, "Yayýn Davet", "Lütfen yayýna almak istediðiniz oyuncunun ID veya ismini girin;", "Davet", "Kapat");
	    if(!IsPlayerConnected(oyuncuid)) return DialogGoster(playerid, DIALOG_YAYIN_DAVET, DIALOG_STYLE_INPUT, "Yayýn Davet", "HATA: Girilen oyuncu geçersiz.\n\nLütfen yayýna almak istediðiniz oyuncunun ID veya ismini girin;", "Davet", "Kapat");
	    if(playerid == oyuncuid) return DialogGoster(playerid, DIALOG_YAYIN_DAVET, DIALOG_STYLE_INPUT, "Yayýn Davet", "HATA: Kendini davet edemezsin.\n\nLütfen yayýna almak istediðiniz oyuncunun ID veya ismini girin;", "Davet", "Kapat");
	    if(!YakinlikKontrol(playerid, oyuncuid, 3.0)) return DialogGoster(playerid, DIALOG_YAYIN_DAVET, DIALOG_STYLE_INPUT, "Yayýn Davet", "HATA: Girilen oyuncuya yakýn deðilsin.\n\nLütfen yayýna almak istediðiniz oyuncunun ID veya ismini girin;", "Davet", "Kapat");

		SetPVarInt(oyuncuid, "Yayin_DavetEdildi", playerid);
		new icerik[144];
		format(icerik, sizeof(icerik), "%s tarafýndan bir yayýna davet edildin, katýlmak istiyor musun?", OyuncuIsim(playerid));
		return DialogGoster(oyuncuid, DIALOG_YAYIN_DAVET_ONAY, DIALOG_STYLE_MSGBOX, "Yayýn Daveti", icerik, "Kabul", "Red");
	}
	else if(dialogid == DIALOG_YAYIN_DAVET_ONAY) {
	    new oyuncuid = GetPVarInt(playerid, "Yayin_DavetEdildi");
	    if(!response) {
			SendClientMessageEx(playerid, RENK_YAYIN, "[YAYIN] %s tarafýndan gönderilen yayýn davetini reddettin.", OyuncuIsim(oyuncuid));
			SendClientMessageEx(oyuncuid, RENK_YAYIN, "[YAYIN] %s gönderdiðin yayýn davetini reddetti.", OyuncuIsim(playerid));
	        return 0;
	    }
		SendClientMessageEx(playerid, RENK_YAYIN, "[YAYIN] %s tarafýndan gönderilen yayýn davetini kabul ettin.", OyuncuIsim(oyuncuid));
		SendClientMessageEx(oyuncuid, RENK_YAYIN, "[YAYIN] %s gönderdiðin yayýn davetini kabul etti.", OyuncuIsim(playerid));
		SunucuMesaji(playerid, "Yayýnda konuþmak için /yayin komutunu kullanabilirsin.");
	    for(new i = 0; i != MAKSIMUM_YAYIN; i++) if(YayinBilgi[i][yayinKullanimda] == true && YayinBilgi[i][yayinYapan] == oyuncuid) return YayinBilgi[i][yayinDavetli] = playerid;
	}
	else if(dialogid == DIALOG_YAYIN_DINLE) {
	    if(!response) return 0;

		if(!strcmp(inputtext, "Haber Kapat", true)) {
		    if(OyuncuBilgi[playerid][oDinlenenYayin] == 0) return HataMesaji(playerid, "Zaten bir yayýn kanalý dinlemiyorsun.");
		    for(new y = 0; y != MAKSIMUM_YAYIN; y++) if(YayinBilgi[y][yayinKullanimda] == true && OyuncuBilgi[playerid][oDinlenenYayin] == YayinBilgi[y][yayinBirlik]) if(!isnull(YayinBilgi[y][yayinMuzik])) { StopAudioStreamForPlayer(playerid); break; }
		    OyuncuBilgi[playerid][oDinlenenYayin] = 0;
		    OyuncuKaydet(playerid);
		    return SunucuMesaji(playerid, "Yayýnlar tamamen kapatýldý, artýk reklam ve yayýn mesajlarýný almayacaksýn.");
		}

		for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikTur] == BIRLIK_HABERAJANSI && i == strval(inputtext))
		{
		    if(OyuncuBilgi[playerid][oDinlenenYayin] == BirlikBilgi[i][birlikID]) return HataMesaji(playerid, "Zaten bu kanalýn yayýnýný dinliyorsun.");
		    OyuncuBilgi[playerid][oDinlenenYayin] = BirlikBilgi[i][birlikID];
		    SunucuMesaji(playerid, "%s adlý haber kanalýný dinlemeye baþladýn.", BirlikBilgi[i][birlikAd]);
   			for(new y = 0; y != MAKSIMUM_YAYIN; y++) if(YayinBilgi[y][yayinKullanimda] == true && OyuncuBilgi[playerid][oDinlenenYayin] == YayinBilgi[y][yayinBirlik]) if(!isnull(YayinBilgi[y][yayinMuzik])) { StopAudioStreamForPlayer(playerid), PlayAudioStreamForPlayer(playerid, YayinBilgi[y][yayinMuzik]); break; }
		    return OyuncuKaydet(playerid);
		}
		HataMesaji(playerid, "Bir hata oluþtu.");
	}
	else if(dialogid == DIALOG_HABERAJANSI_DOLAP) {
	    if(!response) return 0;
	
		if(!strcmp(inputtext, "Kýyafetler", true)) {
			if(OyuncuBilgi[playerid][oCinsiyet] == 1) {
				switch(OyuncuBilgi[playerid][oTenRengi]) {
					case 1: {
						new kiyafetler[sizeof(ErkekBeyaz)];
						for(new c = 0; c != sizeof(ErkekBeyaz); c++) kiyafetler[c] = ErkekBeyaz[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "Kiyafet", MODELLER_GIRISKIYAFET, 0.0, 0.0, 0.0);
					}
					case 2: {
						new kiyafetler[sizeof(ErkekSiyah)];
						for(new c = 0; c != sizeof(ErkekSiyah); c++) kiyafetler[c] = ErkekSiyah[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "Kiyafet", MODELLER_GIRISKIYAFET, 0.0, 0.0, 0.0);
					}
				}
			}
			else if(OyuncuBilgi[playerid][oCinsiyet] == 2) {
				switch(OyuncuBilgi[playerid][oTenRengi]) {
					case 1: {
						new kiyafetler[sizeof(KadinBeyaz)];
						for(new c = 0; c != sizeof(KadinBeyaz); c++) kiyafetler[c] = KadinBeyaz[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "Kiyafet", MODELLER_GIRISKIYAFET, 0.0, 0.0, 0.0);
					}
					case 2: {
						new kiyafetler[sizeof(KadinSiyah)];
						for(new c = 0; c != sizeof(KadinSiyah); c++) kiyafetler[c] = KadinSiyah[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "Kiyafet", MODELLER_GIRISKIYAFET, 0.0, 0.0, 0.0);
					}
				}
			}
		}
		else if(!strcmp(inputtext, "Aðrý Kesici", true)) CanDuzenle(playerid, 100);
		else if(!strcmp(inputtext, "Ekipmanlar", true)) DialogGoster(playerid, DIALOG_HABERAJANSI_EKIPMAN, DIALOG_STYLE_TABLIST_HEADERS, BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd], "Ekipman Adý\t\tAdet\nKamera\t\t(Mermi: 1000)\nBaseball Bat\t\t(Mermi: 1)\n", "Seç", "Ýptal");
	}
	else if(dialogid == DIALOG_HABERAJANSI_EKIPMAN) {
	    if(!response) return 0;
	
		if(OyuncuBilgi[playerid][oOynamaSaati] < 12) return HataMesaji(playerid, "Silah alabilmek için en az 12 oynama saatine ihtiyacýn var.");
	    if(!strcmp(inputtext, "Kamera", true)) {
	        if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_CAMERA]) && SilahSlotBul[WEAPON_CAMERA] != 0) return HataMesaji(playerid, "Bu silah türü sende bulunduðu için bu silahý alamýyorsun.");
			Silahver(playerid, WEAPON_CAMERA, 1000);
		}
	    else if(!strcmp(inputtext, "Baseball Bat", true)) {
	        if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_BAT]) && SilahSlotBul[WEAPON_BAT] != 0) return HataMesaji(playerid, "Bu silah türü sende bulunduðu için bu silahý alamýyorsun.");
			Silahver(playerid, WEAPON_BAT, 1);
	    }
	}
	else if(dialogid == DIALOG_DEVLET_DOLAP) {
	    if(!response) return 0;
	    
		if(!strcmp(inputtext, "Ýþbaþý", true)) {
			if(OyuncuBilgi[playerid][oIsbasi] == true) {
				cmd_ame(playerid, "ekipmanlarýný býrakýr.");
				OyuncuBilgi[playerid][oIsbasi] = false;
				SetPlayerColor(playerid, RENK_VARSAYILAN);
				ZirhDuzenle(playerid, 0);
				OyuncuBilgi[playerid][oGeciciKiyafet] = 0;
				KiyafetDegistir(playerid, OyuncuBilgi[playerid][oKiyafet]);
			}
			else {
				cmd_ame(playerid, "dolaptan rozetini alýr.");
				OyuncuBilgi[playerid][oIsbasi] = true;
				SetPlayerColor(playerid, RENK_GOVISBASI);
			}
			IsimLabelGuncelle(playerid);
		}
		else if(!strcmp(inputtext, "Aðrý Kesici", true)) CanDuzenle(playerid, 100);
		else if(!strcmp(inputtext, "Çelik Yelek", true)) ZirhDuzenle(playerid, 100), cmd_ame(playerid, "dolaptan çelik yelek alýr ve üzerine geçirir.");
	}
	else if(dialogid == DIALOG_MEDIKAL_DOLAP) {
	    if(!response) return 0;

		if(!strcmp(inputtext, "Ýþbaþý", true)) {
			if(OyuncuBilgi[playerid][oIsbasi] == true) {
				cmd_ame(playerid, "ekipmanlarýný býrakýr.");
				OyuncuBilgi[playerid][oIsbasi] = false;
				SetPlayerColor(playerid, RENK_VARSAYILAN);
				ZirhDuzenle(playerid, 0);
				OyuncuBilgi[playerid][oGeciciKiyafet] = 0;
				KiyafetDegistir(playerid, OyuncuBilgi[playerid][oKiyafet]);
			}
			else {
				cmd_ame(playerid, "dolaptan rozetini alýr.");
				OyuncuBilgi[playerid][oIsbasi] = true;
				SetPlayerColor(playerid, RENK_FMDISBASI);
				SilahlariSifirla(playerid);
			}
			IsimLabelGuncelle(playerid);
		}
		else if(!strcmp(inputtext, "Üniformalar", true)) {
			if(OyuncuBilgi[playerid][oIsbasi] == false) return HataMesaji(playerid, "Ýþbaþýnda deðilken üniforma alamazsýn.");

			if(OyuncuBilgi[playerid][oCinsiyet] == 1) {
				switch(OyuncuBilgi[playerid][oTenRengi]) {
					case 1: {
						new kiyafetler[sizeof(LSFMDUniforma_ErkekBeyaz)];
						for(new c = 0; c != sizeof(LSFMDUniforma_ErkekBeyaz); c++) kiyafetler[c] = LSFMDUniforma_ErkekBeyaz[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd], MODELLER_UNIFORMA, 0.0, 0.0, 0.0);
					}
					case 2: {
						new kiyafetler[sizeof(LSFMDUniforma_ErkekSiyah)];
						for(new c = 0; c != sizeof(LSFMDUniforma_ErkekSiyah); c++) kiyafetler[c] = LSFMDUniforma_ErkekSiyah[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd], MODELLER_UNIFORMA, 0.0, 0.0, 0.0);
					}
				}
			}
			else if(OyuncuBilgi[playerid][oCinsiyet] == 2) {
				switch(OyuncuBilgi[playerid][oTenRengi]) {
					case 1: {
						new kiyafetler[sizeof(LSFMDUniforma_KadinBeyaz)];
						for(new c = 0; c != sizeof(LSFMDUniforma_KadinBeyaz); c++) kiyafetler[c] = LSFMDUniforma_KadinBeyaz[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd], MODELLER_UNIFORMA, 0.0, 0.0, 0.0);
					}
					case 2: return HataMesaji(playerid, "Siyah ten rengindeki kadýnlar için üniforma eklenmemiþ.");
				}
			}
		}
		else if(!strcmp(inputtext, "Aksesuarlar", true)) {
			new aksesuar[sizeof(MedikalAksesuar)];
			for(new c = 0; c != sizeof(MedikalAksesuar); c++) aksesuar[c] = MedikalAksesuar[c][0];

			return ShowModelSelectionMenuEx(playerid, aksesuar, sizeof(aksesuar), BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd], MODELLER_AKSESUAR_PD);
		}
		else if(!strcmp(inputtext, "Aðrý Kesici", true)) CanDuzenle(playerid, 100);
	}
	else if(dialogid == DIALOG_POLIS_DOLAP) {
	    if(!response) return 0;

		if(!strcmp(inputtext, "Ýþbaþý", true)) {
			if(OyuncuBilgi[playerid][oIsbasi] == true) {
				cmd_ame(playerid, "ekipmanlarýný býrakýr.");
				OyuncuBilgi[playerid][oIsbasi] = false;
				SilahlariSifirla(playerid);
                if(OyuncuBilgi[playerid][oOynamaSaati] >= 12) Silahver(playerid, WEAPON_DEAGLE, 70);
				SetPlayerColor(playerid, RENK_VARSAYILAN);
				ZirhDuzenle(playerid, 0);
				OyuncuBilgi[playerid][oGeciciKiyafet] = 0;
				KiyafetDegistir(playerid, OyuncuBilgi[playerid][oKiyafet]);
			}
			else {
				cmd_ame(playerid, "dolaptan rozetini ve ekipmanlarýný alýr.");
				OyuncuBilgi[playerid][oIsbasi] = true;
				SetPlayerColor(playerid, RENK_PDISBASI);
				SilahlariSifirla(playerid);
				ZirhDuzenle(playerid, 25);
                if(OyuncuBilgi[playerid][oOynamaSaati] >= 12) {
					Silahver(playerid, WEAPON_DEAGLE, 70);
					Silahver(playerid, WEAPON_NITESTICK, 1);
					Silahver(playerid, WEAPON_SPRAYCAN, 500);
				}
			}
			IsimLabelGuncelle(playerid);
		}
		if(!strcmp(inputtext, "Ekipmanlar", true)) {
			if(OyuncuBilgi[playerid][oIsbasi] == false) return HataMesaji(playerid, "Ýþbaþýnda deðilken ekipman alamazsýn.");

			DialogGoster(playerid, DIALOG_POLIS_EKIPMAN, DIALOG_STYLE_TABLIST_HEADERS, "LSPD - Ekipman", "Ekipman Adý\t\tAdet\nDesert Eagle\t\t(Mermi: 70)\nShotgun\t\t(Mermi: 70)\nMP5\t\t(Mermi: 300)\nSniper Rifle\t\t(Mermi: 20)\nSprey\t\t(Mermi: 500)\nKamera\t\t(Mermi: 1000)\n9mm\t\t(Mermi: 119)\nM4\t\t(Mermi: 500)", "Seç", "Ýptal");
		}
		if(!strcmp(inputtext, "Çelik Yelek", true)) {
			if(techizatizni == false && OyuncuBilgi[playerid][oBirlikRutbe] < 11) return HataMesaji(playerid, "Bu seçenek teðmen ve üzeri rütbeler tarafýndan kullanýlabilir.");
			if(OyuncuBilgi[playerid][oIsbasi] == false) return HataMesaji(playerid, "Ýþbaþýnda deðilken zýrh alamazsýn.");

			ZirhDuzenle(playerid, 100);
			cmd_ame(playerid, "dolabý aralar ve içerisinden çelik yeleðini alýr, üzerine geçirir.");
		}
		if(!strcmp(inputtext, "Üniformalar", true)) {
			if(OyuncuBilgi[playerid][oIsbasi] == false) return HataMesaji(playerid, "Ýþbaþýnda deðilken üniforma alamazsýn.");

			if(OyuncuBilgi[playerid][oCinsiyet] == 1) {
				switch(OyuncuBilgi[playerid][oTenRengi]) {
					case 1: {
						new kiyafetler[sizeof(LSPDUniforma_ErkekBeyaz)];
						for(new c = 0; c != sizeof(LSPDUniforma_ErkekBeyaz); c++) kiyafetler[c] = LSPDUniforma_ErkekBeyaz[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd], MODELLER_UNIFORMA, 0.0, 0.0, 0.0);
					}
					case 2: {
						new kiyafetler[sizeof(LSPDUniforma_ErkekSiyah)];
						for(new c = 0; c != sizeof(LSPDUniforma_ErkekSiyah); c++) kiyafetler[c] = LSPDUniforma_ErkekSiyah[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd], MODELLER_UNIFORMA, 0.0, 0.0, 0.0);
					}
				}
			}
			else if(OyuncuBilgi[playerid][oCinsiyet] == 2) {
				switch(OyuncuBilgi[playerid][oTenRengi]) {
					case 1: {
						new kiyafetler[sizeof(LSPDUniforma_KadinBeyaz)];
						for(new c = 0; c != sizeof(LSPDUniforma_KadinBeyaz); c++) kiyafetler[c] = LSPDUniforma_KadinBeyaz[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd], MODELLER_UNIFORMA, 0.0, 0.0, 0.0);
					}
					case 2: {
						new kiyafetler[sizeof(LSPDUniforma_KadinSiyah)];
						for(new c = 0; c != sizeof(LSPDUniforma_KadinSiyah); c++) kiyafetler[c] = LSPDUniforma_KadinSiyah[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd], MODELLER_UNIFORMA, 0.0, 0.0, 0.0);
					}
				}
			}
		}
		if(!strcmp(inputtext, "Aksesuarlar", true)) {
			new aksesuar[sizeof(PolisAksesuar)];
			for(new c = 0; c != sizeof(PolisAksesuar); c++) aksesuar[c] = PolisAksesuar[c][0];

			return ShowModelSelectionMenuEx(playerid, aksesuar, sizeof(aksesuar), BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd], MODELLER_AKSESUAR_PD);
		}
		if(!strcmp(inputtext, "Aðrý Kesici", true)) CanDuzenle(playerid, 100);
		if(!strcmp(inputtext, "Silah Sýfýrla", true)) SilahlariSifirla(playerid), SunucuMesaji(playerid, "Silahlarýný býraktýn.");
		if(!strcmp(inputtext, "Beanbag Býrak", true)) {
			if(OyuncuBilgi[playerid][oBeanbag] == false) return HataMesaji(playerid, "Beanbag tüfeðiniz yok, dolaba býrakamazsýnýz.");

		    OyuncuBilgi[playerid][oBeanbag] = false;
			SilahAyarla(playerid);

			SetPlayerArmedWeapon(playerid, OyuncuBilgi[playerid][oSilah][3]);
		    cmd_ame(playerid, "iki eliyle tuttuðu beanbag tüfeðini sýrtýna asar.");
		}
		if(!strcmp(inputtext, "Beanbag Al", true)) {
			if(OyuncuBilgi[playerid][oBeanbag] == true) return HataMesaji(playerid, "Üzerinde zaten bir beanbag tüfeði var, beanbag tüfeði alamazsýn.");

		    OyuncuBilgi[playerid][oBeanbag] = true;
	    	GetPlayerWeaponData(playerid, 3, OyuncuBilgi[playerid][oSilah][3], OyuncuBilgi[playerid][oMermi][3]);

			GivePlayerWeapon(playerid, 25, 99999);
		    cmd_ame(playerid, "ekipman dolabýndan beanbag tüfeðini alýr.");
		}
	}
	else if(dialogid == DIALOG_POLIS_EKIPMAN) {
	    if(response) {
	        if(OyuncuBilgi[playerid][oIsbasi] == false) return HataMesaji(playerid, "Ýþbaþýnda deðilsin.");
            if(OyuncuBilgi[playerid][oOynamaSaati] < 12) return HataMesaji(playerid, "Silah alabilmek için en az 12 oynama saatine ihtiyacýn var.");
			switch(listitem) {
			    case 0: {
                    if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_DEAGLE]) && SilahSlotBul[WEAPON_DEAGLE] != 0) return HataMesaji(playerid, "Bu silah türü sizde bulunduðu için bu ekipmaný alamýyorsunuz.");
					Silahver(playerid, WEAPON_DEAGLE, 70);
				}
				case 1: {
				    if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_SHOTGUN]) && SilahSlotBul[WEAPON_SHOTGUN] != 0) return HataMesaji(playerid, "Bu silah türü sizde bulunduðu için bu ekipmaný alamýyorsunuz.");
					Silahver(playerid, WEAPON_SHOTGUN, 70);
				}
				case 2: {
			        if(OyuncuBilgi[playerid][oBirlikRutbe] < 3) return HataMesaji(playerid, "Yeterli yetkiye sahip deðilsin.");

					if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_MP5]) && SilahSlotBul[WEAPON_MP5] != 0) return HataMesaji(playerid, "Bu silah türü sizde bulunduðu için bu ekipmaný alamýyorsunuz.");
 					Silahver(playerid, WEAPON_MP5, 300);
			    }
			    case 3: {
			        if(OyuncuBilgi[playerid][oBirlikRutbe] < 4) return HataMesaji(playerid, "Yeterli yetkiye sahip deðilsin.");

					if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_SNIPER]) && SilahSlotBul[WEAPON_SNIPER] != 0) return HataMesaji(playerid, "Bu silah türü sizde bulunduðu için bu ekipmaný alamýyorsunuz.");
 					Silahver(playerid, WEAPON_SNIPER, 20);
			    }
			    case 4: {
			        if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_SPRAYCAN]) && SilahSlotBul[WEAPON_SPRAYCAN] != 0) return HataMesaji(playerid, "Bu silah türü sizde bulunduðu için bu ekipmaný alamýyorsunuz.");
					Silahver(playerid, WEAPON_SPRAYCAN, 500);
				}
				case 5: {
				    if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_CAMERA]) && SilahSlotBul[WEAPON_CAMERA] != 0) return HataMesaji(playerid, "Bu silah türü sizde bulunduðu için bu ekipmaný alamýyorsunuz.");
					Silahver(playerid, WEAPON_CAMERA, 1000);
				}
				case 6: {
				    if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_COLT45]) && SilahSlotBul[WEAPON_COLT45] != 0) return HataMesaji(playerid, "Bu silah türü sizde bulunduðu için bu ekipmaný alamýyorsunuz.");
					Silahver(playerid, WEAPON_COLT45, 119);
				}
				case 7: {
				    if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_M4]) && SilahSlotBul[WEAPON_M4] != 0) return HataMesaji(playerid, "Bu silah türü sizde bulunduðu için bu ekipmaný alamýyorsunuz.");
					Silahver(playerid, WEAPON_M4, 500);
				}
			}
	    }
	    else if(!response) cmd_dolap(playerid, "");
	}
	else if(dialogid == DIALOG_UYUSTURUCU) {
	    if(!response) return 0;

	    if(!strcmp(inputtext, "Uyuþturucu Kullan", true)) {
	        if(OyuncuBilgi[playerid][oUyusturucu] < 1) return HataMesaji(playerid, "Uyuþturucun yok.");
			if(OyuncuBilgi[playerid][oUyusturucuDelay] > gettime()) return HataMesaji(playerid, "Uyuþturucu kullanmak için %d saniye beklemelisin.", OyuncuBilgi[playerid][oUyusturucuDelay] - gettime());

			OyuncuBilgi[playerid][oUyusturucu]--;
			OyuncuBilgi[playerid][oUyusturucuDelay] = gettime() + 60;
			if(OyuncuZirh(playerid) <= 90) ZirhDuzenle(playerid, OyuncuZirh(playerid)+10);
			if(OyuncuZirh(playerid) > 90 && OyuncuZirh(playerid) < 100) ZirhDuzenle(playerid, 100);
			SetPlayerWeather(playerid, -66);
			ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
			cmd_ame(playerid, "uyuþturucu kullanýr.");
			return SetTimerEx("EtkiSifirla", 60 * 1000, false, "i", playerid);
	    }
	    else if(!strcmp(inputtext, "Uyuþturucu Sat", true)) return DialogGoster(playerid, DIALOG_UYUSTURUCU_SAT, DIALOG_STYLE_INPUT, "Uyuþturucu - Sat", "{FFFFFF}Lütfen satmak istediðiniz kiþinin ismini veya ID'sini girin;", "Tamam", "Kapat");
	    else if(!strcmp(inputtext, "Tohum Ver", true)) return DialogGoster(playerid, DIALOG_TOHUM_VER, DIALOG_STYLE_INPUT, "Tohum - Baþkasýna Ver", "{FFFFFF}Lütfen tohum vermek istediðiniz kiþinin ismini veya ID'sini girin;", "Tamam", "Kapat");
	    else if(!strcmp(inputtext, "Tohum Dik", true)) {
			if(OyuncuBilgi[playerid][oTohum] == 0 && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Tohumun yok.");
			if(OyuncuBilgi[playerid][oSaksi] < 1 && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Saksýn yok.");
			if(Oyuncu_Binada(playerid) == -1 && Oyuncu_Evde(playerid) == -1) return HataMesaji(playerid, "Bir evde veya binada deðilsin.");
			if(Oyuncu_Evde(playerid) > -1 && !Ev_SahipKontrol(playerid, Oyuncu_Evde(playerid)) && !Ev_AnahtarKontrol(playerid, Oyuncu_Evde(playerid))) return HataMesaji(playerid, "Bu seçeneði kullanmak için evin sahibi veya anahtarýna sahip olmalýsýn.");
			if(Oyuncu_Binada(playerid) > -1 && !Bina_SahipKontrol(playerid, Oyuncu_Binada(playerid)) && !Bina_AnahtarKontrol(playerid, Oyuncu_Binada(playerid))) return HataMesaji(playerid, "Bu seçeneði sadece sizde anahtarý olan binalarda kullanabilirsiniz.");
			if(Oyuncu_Binada(playerid) > -1 && Uyusturucu_Bina_Sayi(Oyuncu_Binada(playerid)) > 5) return HataMesaji(playerid, "Bu binaya daha fazla tohum dikilemez.");
			if(Uyusturucu_Sayi(playerid) >= 1 && OyuncuBilgi[playerid][oVIP] < 2 && OyuncuBilgi[playerid][oUyusturucuBoost] == 0) return HataMesaji(playerid, "Ayný anda en fazla 1 tohum dikebilirsin.");
			if(Uyusturucu_Sayi(playerid) >= 2 && OyuncuBilgi[playerid][oVIP] > 1 || Uyusturucu_Sayi(playerid) >= 2 && OyuncuBilgi[playerid][oUyusturucuBoost] > 0) return HataMesaji(playerid, "Ayný anda en fazla 2 tohum dikebilirsin.");

			new id = -1;
			id = Uyusturucu_Yarat(playerid);

			if(id == -1) return HataMesaji(playerid, "Sunucu uyuþturucu ortamý limitine ulaþtýðý için yeni ortam yaratamazsýn.");

			SunucuMesaji(playerid, "Baþarýyla elinde bulunan tohumlarý ektin.");
			UyariMesaji(playerid, "Mahsüllerin verimli olmasý adýna bakým göstermen gereklidir.");
	    }
	    else if(!strcmp(inputtext, "Saksý Bakým", true)) {
			if(Oyuncu_Binada(playerid) == -1 && Oyuncu_Evde(playerid) == -1) return HataMesaji(playerid, "Bir evde veya binada deðilsin.");
			if(Oyuncu_Evde(playerid) > -1 && !Ev_SahipKontrol(playerid, Oyuncu_Evde(playerid)) && !Ev_AnahtarKontrol(playerid, Oyuncu_Evde(playerid))) return HataMesaji(playerid, "Bu seçeneði kullanmak için evin sahibi veya anahtarýna sahip olmalýsýn.");
			if(Oyuncu_Binada(playerid) > -1 && !Bina_SahipKontrol(playerid, Oyuncu_Binada(playerid)) && !Bina_AnahtarKontrol(playerid, Oyuncu_Binada(playerid))) return HataMesaji(playerid, "Bu seçeneði sadece sizde anahtarý olan binalarda kullanabilirsiniz.");
			if(Uyusturucu_Yakin(playerid) == -1) return HataMesaji(playerid, "Yakýnýnda kurulmuþ bir uyuþturucu saksýsý yok.");
			if(OyuncuBilgi[playerid][oGubre] < 1) return HataMesaji(playerid, "Gübreniz yok, bakým yapamazsýnýz.");
			if(UyusturucuBilgi[Uyusturucu_Yakin(playerid)][uBakim] == 1) return HataMesaji(playerid, "Bu saksýnýn bakýmý yapýlmýþ.");
			if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu seçeneði kullanamazsýn.");
			new id = Uyusturucu_Yakin(playerid);

			foreach(new i : Player) if(OyuncuBilgi[i][oBakim] == id) return HataMesaji(playerid, "Baþka bir oyuncu bu saksýnýn üzerinde iþlem yapýyor.");

			OyuncuBilgi[playerid][oUyusturucuTimer] = SetTimerEx("UyusturucuBakimYap", BAKIM_SURE * 1000, false, "dd", playerid, id);
			OyuncuBilgi[playerid][oBakim] = id;
			TogglePlayerControllable(playerid, false);
			AnimOynat2(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 0, 0, 1, 0, 1);
			UyariMesaji(playerid, "Uyuþturucu bakýmýný yapmaya baþladýn, %d saniye sürecek.", BAKIM_SURE);
	    }
	    else if(!strcmp(inputtext, "Saksý Topla", true)) {
			if(Oyuncu_Binada(playerid) == -1 && Oyuncu_Evde(playerid) == -1) return HataMesaji(playerid, "Bir evde veya binada deðilsin.");
			if(Oyuncu_Evde(playerid) > -1 && !Ev_SahipKontrol(playerid, Oyuncu_Evde(playerid)) && !Ev_AnahtarKontrol(playerid, Oyuncu_Evde(playerid))) return HataMesaji(playerid, "Bu seçeneði kullanmak için evin sahibi veya anahtarýna sahip olmalýsýn.");
			if(Oyuncu_Binada(playerid) > -1 && !Bina_SahipKontrol(playerid, Oyuncu_Binada(playerid)) && !Bina_AnahtarKontrol(playerid, Oyuncu_Binada(playerid))) return HataMesaji(playerid, "Bu seçeneði sadece sizde anahtarý olan binalarda kullanabilirsiniz.");
			new id = Uyusturucu_Yakin(playerid);
			if(id == -1) return HataMesaji(playerid, "Yakýnýnda kurulmuþ bir uyuþturucu saksýsý yok!");
			if(UyusturucuBilgi[id][uBakim] == 0) return HataMesaji(playerid, "Bu saksýnýn bakýmý yapýlmamýþ, toplamak için önce bakýmýný yapmalýsýn.");
			if(UyusturucuBilgi[id][uDurum] < 100) return HataMesaji(playerid, "Bu uyuþturucu toplanamaz.");
			if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu seçeneði kullanamazsýn.");

            foreach(new i : Player) if(OyuncuBilgi[i][oBakim] == id) return HataMesaji(playerid, "Baþka bir oyuncu bu saksýnýn üzerinde iþlem yapýyor.");
            OyuncuBilgi[playerid][oBakim] = id;
			OyuncuBilgi[playerid][oUyusturucuTimer] = SetTimerEx("UyusturucuTopla", TOPLAMA_SURE * 1000, false, "dd", playerid, id);
			TogglePlayerControllable(playerid, false);
			AnimOynat2(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 0, 0, 1, 0, 1);
			UyariMesaji(playerid, "Uyuþturucularý toplamaya baþladýn, %d saniye sürecek.", TOPLAMA_SURE);
	    }
	    else if(!strcmp(inputtext, "Saksý Kaldýr", true)) {
			if(Oyuncu_Binada(playerid) == -1 && Oyuncu_Evde(playerid) == -1) return HataMesaji(playerid, "Bir evde veya binada deðilsin.");
			if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) {
				if(Oyuncu_Evde(playerid) > -1 && !Ev_SahipKontrol(playerid, Oyuncu_Evde(playerid))) return HataMesaji(playerid, "Bu seçeneði sadece kendi evinizde kullanabilirsiniz.");
				if(Oyuncu_Binada(playerid) > -1 && !Bina_SahipKontrol(playerid, Oyuncu_Binada(playerid)) && !Bina_AnahtarKontrol(playerid, Oyuncu_Binada(playerid))) return HataMesaji(playerid, "Bu seçeneði sadece sizde anahtarý olan binalarda kullanabilirsiniz.");
			}
			if(Uyusturucu_Yakin(playerid) == -1) return HataMesaji(playerid, "Yakýnýnda kurulmuþ bir uyuþturucu saksýsý yok.");
			if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu seçeneði kullanamazsýn.");
            new id = Uyusturucu_Yakin(playerid);

			cmd_me(playerid, "saksýdaki maddeyi imha eder.");
			Uyusturucu_Sil(id);
	    }
	}
	else if(dialogid == DIALOG_TOHUM_VER) {
		if(!response) return DeletePVar(playerid, "Tohum_Ver");

		new oyuncuid;
		if(sscanf(inputtext, "u", oyuncuid)) return DialogGoster(playerid, DIALOG_TOHUM_VER, DIALOG_STYLE_INPUT, "Tohum - Baþkasýna Ver", "{FFFFFF}Lütfen tohum vermek istediðiniz kiþinin ismini veya ID'sini girin;", "Tamam", "Kapat");
		if(!IsPlayerConnected(oyuncuid) || !YakinlikKontrol(playerid, oyuncuid, 3.0)) return DialogGoster(playerid, DIALOG_TOHUM_VER, DIALOG_STYLE_INPUT, "Tohum - Baþkasýna Ver", "{B70000}HATA: {FFFFFF}Girilen oyuncuya yeterince yakýn deðilsin.\n{FFFFFF}Lütfen tohum vermek istediðiniz kiþinin ismini veya ID'sini girin;", "Tamam", "Kapat");

		SetPVarInt(playerid, "Tohum_Ver", oyuncuid);
		DialogGoster(playerid, DIALOG_TOHUM_VER_MIKTAR, DIALOG_STYLE_INPUT, "Tohum - Baþkasýna Ver", "{FFFFFF}Lütfen vermek istediðiniz tohum miktarýný girin;", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_TOHUM_VER_MIKTAR) {
		if(!response) return DeletePVar(playerid, "Tohum_Ver");

		new miktar;
		if(sscanf(inputtext, "d", miktar)) return DialogGoster(playerid, DIALOG_TOHUM_VER_MIKTAR, DIALOG_STYLE_INPUT, "Tohum - Baþkasýna Ver", "{FFFFFF}Lütfen vermek istediðiniz tohum miktarýný girin;", "Tamam", "Kapat");
		if(miktar < 1 || OyuncuBilgi[playerid][oTohum] < miktar) return DialogGoster(playerid, DIALOG_TOHUM_VER_MIKTAR, DIALOG_STYLE_INPUT, "Tohum - Baþkasýna Ver", "{B70000}HATA: {FFFFFF}Bu kadar tohumun yok.\n{FFFFFF}Lütfen vermek istediðiniz tohum miktarýný girin;", "Tamam", "Kapat");

		new oyuncuid = GetPVarInt(playerid, "Tohum_Ver");
		if(!IsPlayerConnected(oyuncuid) || !YakinlikKontrol(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Oyuncu sizden uzakta olduðu için iþlem iptal edildi."), DeletePVar(playerid, "Tohum_Ver");
		switch(OyuncuBilgi[oyuncuid][oVIP]) {
  			case 1: if(miktar + OyuncuBilgi[oyuncuid][oTohum] > 7) return HataMesaji(playerid, "Bu oyuncunun üzerinde en fazla 7 tohum bulunabilir.");
			case 2: if(miktar + OyuncuBilgi[oyuncuid][oTohum] > 10) return HataMesaji(playerid, "Bu oyuncunun üzerinde en fazla 10 tohum bulunabilir.");
			case 3: if(miktar + OyuncuBilgi[oyuncuid][oTohum] > 15) return HataMesaji(playerid, "Bu oyuncunun üzerinde en fazla 15 tohum bulunabilir.");
			default: if(miktar + OyuncuBilgi[oyuncuid][oTohum] > 5) return HataMesaji(playerid, "Bu oyuncunun üzerinde en fazla 5 tohum bulunabilir.");
		}
		DeletePVar(playerid, "Tohum_Ver");
		OyuncuBilgi[playerid][oTohum] -= miktar;
		OyuncuBilgi[oyuncuid][oTohum] += miktar;
		SunucuMesaji(playerid, "%s adlý kiþiye %d adet tohum verdiniz.", OyuncuIsim(oyuncuid));
		SunucuMesaji(oyuncuid, "%s adlý kiþi size %d adet tohum verdi.", OyuncuIsim(playerid));
		OyuncuKaydet(playerid);
		OyuncuKaydet(oyuncuid);
	}
	else if(dialogid == DIALOG_UYUSTURUCU_SAT) {
		if(!response) return 0;

		new oyuncuid;
		if(sscanf(inputtext, "u", oyuncuid)) return DialogGoster(playerid, DIALOG_UYUSTURUCU_SAT, DIALOG_STYLE_INPUT, "Uyuþturucu - Sat", "{FFFFFF}Lütfen satmak istediðiniz kiþinin ismini veya ID'sini girin;", "Tamam", "Kapat");
		if(!IsPlayerConnected(oyuncuid)) return DialogGoster(playerid, DIALOG_UYUSTURUCU_SAT, DIALOG_STYLE_INPUT, "Uyuþturucu - Sat", "{FFFFFF}Lütfen satmak istediðiniz kiþinin ismini veya ID'sini girin;", "Tamam", "Kapat");
		if(!YakinlikKontrol(playerid, oyuncuid, 3.0)) return DialogGoster(playerid, DIALOG_UYUSTURUCU_SAT, DIALOG_STYLE_INPUT, "Uyuþturucu - Sat", "{B70000}HATA: {FFFFFF}Girilen oyuncuya yeterince yakýn deðilsin.\n{FFFFFF}Lütfen satmak istediðiniz kiþinin ismini veya ID'sini girin;", "Tamam", "Kapat");

		SetPVarInt(playerid, "UyusturucuSat", oyuncuid);
		SetPVarInt(oyuncuid, "UyusturucuSat", playerid);
		DialogGoster(playerid, DIALOG_UYUSTURUCU_SAT_MIKTAR, DIALOG_STYLE_INPUT, "Uyuþturucu - Sat", "{FFFFFF}Lütfen satmak istediðiniz miktarý girin;", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_UYUSTURUCU_SAT_MIKTAR) {
		if(!response) return 0;

		new miktar;
		if(sscanf(inputtext, "d", miktar)) return DialogGoster(playerid, DIALOG_UYUSTURUCU_SAT_MIKTAR, DIALOG_STYLE_INPUT, "Uyuþturucu - Sat", "{FFFFFF}Lütfen satmak istediðiniz miktarý girin;", "Tamam", "Kapat");
		if(miktar < 1) return DialogGoster(playerid, DIALOG_UYUSTURUCU_SAT_MIKTAR, DIALOG_STYLE_INPUT, "Uyuþturucu - Sat", "{B70000}HATA: {FFFFFF}Girilen miktar en az 1 olabilir.\nLütfen satmak istediðiniz miktarý girin;", "Tamam", "Kapat");
		if(OyuncuBilgi[playerid][oUyusturucu] < miktar) return DialogGoster(playerid, DIALOG_UYUSTURUCU_SAT_MIKTAR, DIALOG_STYLE_INPUT, "Uyuþturucu - Sat", "{B70000}HATA: {FFFFFF}Üzerinde bu kadar uyuþturucu yok.\nLütfen satmak istediðiniz miktarý girin;", "Tamam", "Kapat");

		SetPVarInt(playerid, "UyusturucuSat_Miktar", miktar);
		DialogGoster(playerid, DIALOG_UYUSTURUCU_SAT_FIYAT, DIALOG_STYLE_INPUT, "Uyuþturucu - Sat", "{FFFFFF}Lütfen satmak istediðiniz fiyatý girin;", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_UYUSTURUCU_SAT_FIYAT) {
		if(!response) return 0;

		new miktar;
		if(sscanf(inputtext, "d", miktar)) return DialogGoster(playerid, DIALOG_UYUSTURUCU_SAT_FIYAT, DIALOG_STYLE_INPUT, "Uyuþturucu - Sat", "{FFFFFF}Lütfen satmak istediðiniz fiyatý girin;", "Tamam", "Kapat");
		if(miktar < 0) return DialogGoster(playerid, DIALOG_UYUSTURUCU_SAT_FIYAT, DIALOG_STYLE_INPUT, "Uyuþturucu - Sat", "{B70000}HATA: {FFFFFF}Girilen miktar en az 0 olabilir.\nLütfen satmak istediðiniz fiyatý girin;", "Tamam", "Kapat");

		new oyuncuid = GetPVarInt(playerid, "UyusturucuSat"), mesaj[256];
		if(!IsPlayerConnected(oyuncuid) || oyuncuid == INVALID_PLAYER_ID) return HataMesaji(playerid, "Uyuþturucu satmaya çalýþtýðýnýz kiþi oyundan çýkmýþ."), SetPVarInt(playerid, "UyusturucuSat", INVALID_PLAYER_ID);
		if(miktar > 0) format(mesaj, sizeof(mesaj), "%s adlý kiþi size %s adet uyuþturucuyu %s miktarýna satmak istiyor.", OyuncuIsim(playerid), NumaraFormati(GetPVarInt(playerid, "UyusturucuSat_Miktar"), ""), NumaraFormati(miktar));
		else if(miktar == 0) format(mesaj, sizeof(mesaj), "%s adlý kiþi size %s adet uyuþturucu vermek istiyor.", OyuncuIsim(playerid), NumaraFormati(GetPVarInt(playerid, "UyusturucuSat_Miktar"), ""));

		if(OyuncuBilgi[oyuncuid][oDialog] != -1) return HataMesaji(playerid, "Oyuncu baþka bir dialog kullanýyor, lütfen bekleyip tekrar deneyin.");
		SetPVarInt(oyuncuid, "UyusturucuSat_Miktar", GetPVarInt(playerid, "UyusturucuSat_Miktar"));
		SetPVarInt(oyuncuid, "UyusturucuSat_Fiyat", miktar);
		SunucuMesaji(playerid, "%s isimli kiþiye teklifin gönderildi. (Adet: %s | Fiyat: %s)", OyuncuIsim(oyuncuid), NumaraFormati(GetPVarInt(playerid, "UyusturucuSat_Miktar"), ""), NumaraFormati(miktar));
		DialogGoster(oyuncuid, DIALOG_UYUSTURUCU_ONAY, DIALOG_STYLE_MSGBOX, "Uyuþturucu - Satýþ", mesaj, "Kabul", "Red");
	}
	else if(dialogid == DIALOG_UYUSTURUCU_ONAY) {
		new oyuncuid = GetPVarInt(playerid, "UyusturucuSat"), miktar = GetPVarInt(playerid, "UyusturucuSat_Miktar"), fiyat = GetPVarInt(playerid, "UyusturucuSat_Fiyat");
		if(!IsPlayerConnected(oyuncuid) || oyuncuid == INVALID_PLAYER_ID) return HataMesaji(playerid, "Oyuncu oyundan çýkmýþ, iþlem iptal edildi.");
		if(!response) {
			SunucuMesaji(playerid, "Teklifi reddettiniz.");
			SunucuMesaji(oyuncuid, "%s adlý kiþi teklifinizi reddetti.", OyuncuIsim(playerid));
			SetPVarInt(playerid, "UyusturucuSat", INVALID_PLAYER_ID);
			return SetPVarInt(oyuncuid, "UyusturucuSat", INVALID_PLAYER_ID);
	    }
	    if(OyuncuBilgi[playerid][oPara] < fiyat && fiyat > 0) return HataMesaji(playerid, "Yeterli miktarda paran yok.");
		SunucuMesaji(playerid, "Teklifi kabul ettiniz.");
		SunucuMesaji(oyuncuid, "%s adlý kiþi teklifinizi kabul etti ve sizden %s adet uyuþturucu aldý.", OyuncuIsim(playerid), NumaraFormati(miktar, ""));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], alan_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		GetPlayerName(playerid, alan_isim, sizeof(alan_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiye %s adet uyuþturucu sattý.", Tarih(), oyuncu_isim, OyuncuBilgi[oyuncuid][oID], alan_isim, OyuncuBilgi[playerid][oID], NumaraFormati(miktar, ""));
		Gunluk_LogKaydet(log_icerik);
		OyuncuBilgi[oyuncuid][oUyusturucu] -= miktar;
		OyuncuBilgi[playerid][oUyusturucu] += miktar;
		ParaEkle(playerid, -fiyat);
		ParaEkle(oyuncuid, fiyat);
		SetPVarInt(playerid, "UyusturucuSat", INVALID_PLAYER_ID);
		SetPVarInt(oyuncuid, "UyusturucuSat", INVALID_PLAYER_ID);
	}
	else if(dialogid == DIALOG_BINA_SAHIP) {
	    if(!response) return false;
	    new id = Oyuncu_Binada(playerid);

	    if(!strcmp(inputtext, "Kilit Durumunu Deðiþtir", true)) {
			switch(BinaBilgi[id][binaDurum]) {
				case 1: {
				    BinaBilgi[id][binaDurum] = 2;
				    Bina_Yenile(id);
				    cmd_ame(playerid, "bina kapýsýný kilitler.");
				}
				case 2: {
				    BinaBilgi[id][binaDurum] = 1;
				    Bina_Yenile(id);
				    cmd_ame(playerid, "bina kapýsýnýn kilidini açar.");
				    foreach(new i : Player) if(MaymuncukVeri[i][mTur] == 3 && MaymuncukVeri[playerid][mHedef] == id) return SunucuMesaji(i, "Maymuncuk kýrýldý."), MaymuncukVeri[i][mSaniye] = 0, OyuncuBilgi[i][oMaymuncuk]--;
				}
				default: HataMesaji(playerid, "Bu binanýn kilit durumunu deðiþtiremezsin.");
			}
		}
		else if(!strcmp(inputtext, "Raf Ekle", true))
		{
		    if(!Bina_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Bulunduðun bina senin deðil.");
			if(Raf_Sayi(id, 2) >= BinaBilgi[id][binaLevel] && BinaBilgi[id][binaTur] != 9) return HataMesaji(playerid, "Bina levelinize göre en fazla %d adet raf alabilirsiniz.", BinaBilgi[id][binaLevel]);
			else if(Raf_Sayi(id, 2) >= BinaBilgi[id][binaLevel] * 3 && BinaBilgi[id][binaTur] == 9) return HataMesaji(playerid, "Bina levelinize göre en fazla %d adet raf alabilirsiniz.", BinaBilgi[id][binaLevel] * 3);
			if(Raf_Yakin(playerid) != -1) return HataMesaji(playerid, "Yakýnlarda baþka bir raf var.");
			if(OyuncuBilgi[playerid][oPara] < BINA_RAF_UCRET) return HataMesaji(playerid, "Yeterli paran yok. (%s)", NumaraFormati(BINA_RAF_UCRET));

			id = Raf_Yarat(playerid, id, 2);
			if(id == -1) return HataMesaji(playerid, "Sunucu maksimum raf limitine ulaþtý.");

		    EditlemeSifirla(playerid);
			OyuncuBilgi[playerid][oDuzenlenenRaf] = id;
			EditDynamicObject(playerid, RafBilgi[id][rafObje][4]);

			ParaEkle(playerid, -BINA_RAF_UCRET);
			SunucuMesaji(playerid, "Raf satýn almak için %s ödedin.", NumaraFormati(BINA_RAF_UCRET));
			SunucuMesaji(playerid, "{FFFF00}~k~~PED_SPRINT~{7a8a9a} tuþuna basýlý tutarak kamerayý oynatabilirsiniz.");
   		}
		else if(!strcmp(inputtext, "Raf Düzenle", true))
		{
		    if(!Bina_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Bulunduðun bina senin deðil.");
		    
		    return DialogGoster(playerid, DIALOG_RAF_DUZENLE, DIALOG_STYLE_INPUT, "Raf Düzenleme", "{FFFFFF}Lütfen düzenlemek istediðiniz rafýn ID'sini girin;", "Tamam", "Kapat");
   		}
   		else if(!strcmp(inputtext, "Raf Kaldýr", true))
		{
			if(!Bina_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Bulunduðun bina senin deðil.");
			if((id = Raf_Yakin(playerid)) == -1) return HataMesaji(playerid, "Rafa yakýn deðilsin.");
			new sayi = 0;
			for(new i = 0; i < 4; i ++) if(RafBilgi[id][rafSilahlar][i]) sayi++;
			if(sayi > 0) return HataMesaji(playerid, "Rafta eþya varken silemezsin.");

			Raf_Sil(id);
			SunucuMesaji(playerid, "Rafý baþarýyla sildin.");
		}
	}
	else if(dialogid == DIALOG_BINA_KAPI) {
	    if(!response) return false;
	    new id = Bina_Yakin(playerid);

		if(!strcmp(inputtext, "Zil Çal", true)) {
			foreach(new i : Player) if(Oyuncu_Binada(i) == id) SendClientMessageEx(i, RENK_DO, "* Zil çalýyor. (( Bina ))");
			cmd_ame(playerid, "zile basar.");
		}
	    else if(!strcmp(inputtext, "Kilit Durumunu Deðiþtir", true)) {
			switch(BinaBilgi[id][binaDurum]) {
				case 1: {
				    BinaBilgi[id][binaDurum] = 2;
				    Bina_Yenile(id);
				    cmd_ame(playerid, "bina kapýsýný kilitler.");
				}
				case 2: {
				    BinaBilgi[id][binaDurum] = 1;
				    Bina_Yenile(id);
				    cmd_ame(playerid, "bina kapýsýnýn kilidini açar.");
				    foreach(new i : Player) if(MaymuncukVeri[i][mTur] == 3 && MaymuncukVeri[playerid][mHedef] == id) return SunucuMesaji(i, "Maymuncuk kýrýldý."), MaymuncukVeri[i][mSaniye] = 0, OyuncuBilgi[i][oMaymuncuk]--;
				}
				default: HataMesaji(playerid, "Bu binanýn kilit durumunu deðiþtiremezsin.");
			}
		}
		else if(!strcmp(inputtext, "Level Yükselt", true)) {
			if(!Bina_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Bu binanýn sahibi deðilsin, bu iþlemi yapamazsýn.");
			if(BinaBilgi[id][binaLevel] > 4) return HataMesaji(playerid, "Bu bina zaten maksimum levele ulaþmýþ.");
			if(OyuncuBilgi[playerid][oPara] < BINA_LEVEL_UCRET) return HataMesaji(playerid, "Level yükseltme ücretini karþýlayamýyorsun. (%s)", NumaraFormati(BINA_LEVEL_UCRET));

			ParaEkle(playerid, -BINA_LEVEL_UCRET);
			BinaBilgi[id][binaLevel]++;
			BinaBilgi[id][binaDurum] = 3;
			BinaBilgi[id][binaBakimSure] = 60;
			Bina_Yenile(id);
			Bina_Kaydet(id);
			SunucuMesaji(playerid, "Binanýn yükseltme iþlemi baþladý, 60 dakika sonra yükseltme iþlemi bitecektir.");
	  		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	 		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %d(%d) bina levelini yükseltti, yeni level: %d/SQL: %d", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], BinaBilgi[id][binaLevel], BinaBilgi[id][bID]);
			Gunluk_LogKaydet(log_icerik);
		}
		else if(!strcmp(inputtext, "Kapýyý Kýr", true)) {
		    if(BinaBilgi[id][binaDurum] == 1) return HataMesaji(playerid, "Bu binanýn kapýlarý zaten açýk.");
			if(BinaBilgi[id][binaDurum] == 3) return HataMesaji(playerid, "Bakýmdaki binanýn kapýsý kýrýlamaz.");

			ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);
			cmd_ame(playerid, "gerilir ve binanýn kapýsýna tekme atar.");
			SetTimerEx("KapiKir_Bina", 1500, false, "dd", playerid, id);
		}
		else if(!strcmp(inputtext, "Kapýyý Tamir Et", true)) {
			if(BinaBilgi[id][binaDurum] != 4) return HataMesaji(playerid, "Kapý tamir edilebilir durumda deðil.");
			if(OyuncuBilgi[playerid][oPara] < 2500) return HataMesaji(playerid, "Yeterli paran yok.");

			ParaEkle(playerid, -2500);
			BinaBilgi[id][binaDurum] = 3;
			BinaBilgi[id][binaBakimSure] = 15;
			Bina_Yenile(id);
			Bina_Kaydet(id);
			SunucuMesaji(playerid, "Kapý tamir iþlemi baþladý, 15 dakika sonra tamir iþlemi tamamlanacak.");
		}
	}
	else if(dialogid == DIALOG_GARAJ) {
	    if(!response) return false;
	
	    if(Garaj_Yakin(playerid) == -1) return HataMesaji(playerid, "Bir garaja yakýn deðilsin.");
	    new garajid = Garaj_Yakin(playerid);
        if(!strcmp(inputtext, "Aracý Garaja Koy", true)) {
			if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bir araçta deðilsin.");
			if(!Arac_SahipKontrol(playerid, Arac_IDBul(GetPlayerVehicleID(playerid)))) return HataMesaji(playerid, "Ýçerisinde bulunduðun araç senin deðil.");
			if(GetEngineStatus(GetPlayerVehicleID(playerid)) != 0) return HataMesaji(playerid, "Aracý garaja koymak için motorunu kapatmalýsýn.");
			if(GarajBilgi[garajid][garajDurum] == 2) return HataMesaji(playerid, "Bu garaj kilitli.");
			if(GarajBilgi[garajid][garajUcret] > 0 && OyuncuBilgi[playerid][oPara] < GarajBilgi[garajid][garajUcret]) return HataMesaji(playerid, "Garajýn ücretini karþýlayamýyorsun.");
			new Float:hasar;
			GetVehicleHealth(GetPlayerVehicleID(playerid), hasar);
			if(hasar < 800.0) return HataMesaji(playerid, "Bu araç hasarlý, garaja koymak için aracý tamir ettirmelisin.");

			new slot = 0;
			for(new i = 0; i != MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracKullanimda] && AracBilgi[i][aracGaraj] == GarajBilgi[garajid][garajID]) slot++;
			if(slot + 1 > GarajBilgi[garajid][garajLimit]) return HataMesaji(playerid, "Bu garaj dolu.");
			new id = Arac_IDBul(GetPlayerVehicleID(playerid));
			RemovePlayerFromVehicle(playerid);
			ClearAnimations(playerid);
			AracBilgi[id][aracGaraj] = GarajBilgi[garajid][garajID];
			AracBilgi[id][aracDurum] = 3;
			Arac_Kaydet(id);
			if(GarajBilgi[garajid][garajUcret] > 0) ParaEkle(playerid, -GarajBilgi[garajid][garajUcret]);
			SunucuMesaji(playerid, "%s model aracýný garaja koydun.", AracModel(AracBilgi[id][aracModel]));
			Garaj_Yenile(garajid);
			Arac_Spawn(id);
			return 1;
        }
        else if(!strcmp(inputtext, "Araçlarým", true)) {
            if(GarajBilgi[garajid][garajDurum] == 2) return HataMesaji(playerid, "Bu garaj kilitli.");
            new sayi = 0, icerik[512];
            format(icerik, sizeof(icerik), "Plaka\tModel\n");
            for(new i = 0; i != MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracKullanimda] && AracBilgi[i][aracSahip] == OyuncuBilgi[playerid][oID] && AracBilgi[i][aracGaraj] == GarajBilgi[garajid][garajID])
				format(icerik, sizeof(icerik), "%s%s\t%s\n", icerik, AracBilgi[i][aracPlaka], AracModel(AracBilgi[i][aracModel])), sayi++;

			if(!sayi) return HataMesaji(playerid, "Bu garajda aracýnýz yok.");
			DialogGoster(playerid, DIALOG_GARAJ_ARACLARIM, DIALOG_STYLE_TABLIST_HEADERS, "Garaj - Araç Çýkart", icerik, "Çýkart", "Kapat");
			return 1;
		}
        else if(!strcmp(inputtext, "Garajdaki Araçlar", true)) {
            if(GarajBilgi[garajid][garajSahip] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bu garaj senin deðil.");
            if(GarajBilgi[garajid][garajDurum] == 2) return HataMesaji(playerid, "Bu garaj kilitli.");
            new sayi = 0, icerik[512];
            format(icerik, sizeof(icerik), "Plaka\tModel\n");
            for(new i = 0; i != MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracKullanimda] && AracBilgi[i][aracGaraj] == GarajBilgi[garajid][garajID])
				format(icerik, sizeof(icerik), "%s%s\t%s\n", icerik, AracBilgi[i][aracPlaka], AracModel(AracBilgi[i][aracModel])), sayi++;

			if(!sayi) return HataMesaji(playerid, "Bu garajda araç yok.");
			DialogGoster(playerid, DIALOG_GARAJ_ARACLAR, DIALOG_STYLE_TABLIST_HEADERS, "Garaj - Araç Çýkart", icerik, "Çýkart", "Kapat");
			return 1;
		}
		else if(!strcmp(inputtext, "Kilitle", true) || !strcmp(inputtext, "Kilidi Aç", true)) {
		    if(GarajBilgi[garajid][garajSahip] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bu garaj senin deðil.");
		    
			switch(GarajBilgi[garajid][garajDurum]) {
				case 1: GarajBilgi[garajid][garajDurum] = 2, Garaj_Yenile(garajid), SunucuMesaji(playerid, "Garaj kilitlendi.");
				case 2: GarajBilgi[garajid][garajDurum] = 1, Garaj_Yenile(garajid), SunucuMesaji(playerid, "Garaj açýldý.");
				default: GarajBilgi[garajid][garajDurum] = 2, Garaj_Yenile(garajid), SunucuMesaji(playerid, "Garaj kilitlendi.");
			}
			return 1;
		}
	    else if(!strcmp(inputtext, "Araç Çýkart", true)) return DialogGoster(playerid, DIALOG_GARAJ_CIKART, DIALOG_STYLE_INPUT, "Garaj - Araç Çýkart", "{FFFFFF}Lütfen çýkartmak istediðiniz aracýn plakasýný girin:", "Çýkart", "Kapat");
	    else if(!strcmp(inputtext, "Ücret Deðiþtir", true)) return DialogGoster(playerid, DIALOG_GARAJ_UCRET, DIALOG_STYLE_INPUT, "Garaj - Ücret Deðiþtir", "{FFFFFF}Lütfen garajýnýzýn yeni giriþ ücretini girin:", "Düzenle", "Kapat");
	    HataMesaji(playerid, "Bir sorun oluþtu.");
	}
	else if(dialogid == DIALOG_GARAJ_UCRET) {
	    if(!response) return false;
	    if(Garaj_Yakin(playerid) == -1) return HataMesaji(playerid, "Bir garaja yakýn deðilsin.");
	    if(GarajBilgi[Garaj_Yakin(playerid)][garajSahip] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bu garaj senin deðil.");
	    
	    new fiyat, garajid = Garaj_Yakin(playerid);
	    if(sscanf(inputtext, "d", fiyat)) return DialogGoster(playerid, DIALOG_GARAJ_UCRET, DIALOG_STYLE_INPUT, "Garaj - Ücret Deðiþtir", "{FFFFFF}Lütfen garajýnýzýn yeni giriþ ücretini girin:", "Düzenle", "Kapat");
	    if(fiyat < 0 || fiyat > 10000) return DialogGoster(playerid, DIALOG_GARAJ_UCRET, DIALOG_STYLE_INPUT, "Garaj - Ücret Deðiþtir", "{B70000}HATA: {FFFFFF}Giriþ ücreti en az $0, en fazla $10,000 olabilir.\n\n{FFFFFF}Lütfen garajýnýzýn yeni giriþ ücretini girin:", "Düzenle", "Kapat");

		GarajBilgi[garajid][garajUcret] = fiyat;
		Garaj_Yenile(garajid);
		Garaj_Kaydet(garajid);
		SunucuMesaji(playerid, "Garajýnýn giriþ ücretini %s olarak güncelledin.", NumaraFormati(fiyat));
	}
	else if(dialogid == DIALOG_GARAJ_ARACLAR) {
	    if(!response) return false;
	    if(Garaj_Yakin(playerid) == -1) return HataMesaji(playerid, "Bir garaja yakýn deðilsin.");
	    new garajid = Garaj_Yakin(playerid);
	    if(GarajBilgi[garajid][garajSahip] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bu garaj senin deðil.");
	    if(GarajBilgi[garajid][garajDurum] == 2) return HataMesaji(playerid, "Bu garaj kilitli.");
	    for(new i = 0; i != MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracKullanimda] && !strcmp(inputtext, AracBilgi[i][aracPlaka], true) && AracBilgi[i][aracGaraj] == GarajBilgi[garajid][garajID]) {
			AracBilgi[i][aracGaraj] = 0;
			AracBilgi[i][aracDurum] = 1;
			Arac_Kaydet(i);
			Arac_Spawn(i);
			SetVehiclePos(AracBilgi[i][aracYarat], GarajBilgi[garajid][garajPos][3], GarajBilgi[garajid][garajPos][4], GarajBilgi[garajid][garajPos][5]);
			Garaj_Yenile(garajid);
			SunucuMesaji(playerid, "Araç garajdan çýkartýldý.");
			return 1;
	    }
	    HataMesaji(playerid, "Bir sorun oluþtu.");
	}
	else if(dialogid == DIALOG_GARAJ_ARACLARIM) {
	    if(!response) return false;
	    if(Garaj_Yakin(playerid) == -1) return HataMesaji(playerid, "Bir garaja yakýn deðilsin.");
	    new garajid = Garaj_Yakin(playerid);
	    if(GarajBilgi[garajid][garajDurum] == 2) return HataMesaji(playerid, "Bu garaj kilitli.");
	    for(new i = 0; i != MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracKullanimda] && !strcmp(inputtext, AracBilgi[i][aracPlaka], true) && AracBilgi[i][aracGaraj] == GarajBilgi[garajid][garajID]) {
			AracBilgi[i][aracGaraj] = 0;
			AracBilgi[i][aracDurum] = 1;
			Arac_Kaydet(i);
			Arac_Spawn(i);
			SetVehiclePos(AracBilgi[i][aracYarat], GarajBilgi[garajid][garajPos][3], GarajBilgi[garajid][garajPos][4], GarajBilgi[garajid][garajPos][5]);
			Garaj_Yenile(garajid);
			SunucuMesaji(playerid, "Aracýnýz garajdan çýkartýldý.");
			return 1;
	    }
	    HataMesaji(playerid, "Bir sorun oluþtu.");
	}
	else if(dialogid == DIALOG_VIPMENU) {
		if(!response) return false;
		
		if(!strcmp(inputtext, "VIP Tag", true)) {
		    switch(OyuncuBilgi[playerid][oVIPTag]) {
		        case false: OyuncuBilgi[playerid][oVIPTag] = true, SunucuMesaji(playerid, "VIP Tag açýldý.");
		        case true: OyuncuBilgi[playerid][oVIPTag] = false, SunucuMesaji(playerid, "VIP Tag kapatýldý.");
		    }
		}
	}
	else if(dialogid == DIALOG_VIP_DOLAP) {
	    if(!response) return false;
	    
	    if(OyuncuBilgi[playerid][oVIP] < 1) return HataMesaji(playerid, "VIP Deðilsin.");
	    
	    if(!strcmp(inputtext, "Can", true)) {
	        CanDuzenle(playerid, 100);
	        SunucuMesaji(playerid, "VIP Dolabýndan ücretsiz can aldýn.");
	    }
	    else if(!strcmp(inputtext, "Zýrh", true)) {
			new zirh_ucret = GUMUS_ZIRH_UCRET;
			switch(OyuncuBilgi[playerid][oVIP]) {
			    case 1: zirh_ucret = GUMUS_ZIRH_UCRET;
			    case 2: zirh_ucret = ALTIN_ZIRH_UCRET;
			    case 3: zirh_ucret = ELMAS_ZIRH_UCRET;
			    default: zirh_ucret = GUMUS_ZIRH_UCRET;
			}
			if(OyuncuBilgi[playerid][oPara] < zirh_ucret) return HataMesaji(playerid, "Üstünde yeteri miktarda para yok.");
			if(OyuncuZirh(playerid) >= 50) return HataMesaji(playerid, "Zaten yüzde elli zýrha sahipsin, tekrar alamazsýn.");
			
			ZirhDuzenle(playerid, 50);
			SunucuMesaji(playerid, "VIP Dolabýndan {33aa33}%s {7a8a9a}karþýlýðýnda zýrh satýn aldýn.", NumaraFormati(zirh_ucret));
			ParaEkle(playerid, -zirh_ucret);
			OyuncuKaydet(playerid);
	    }
	    else if(!strcmp(inputtext, "Silah Dolabý", true)) {
			if(OyuncuBilgi[playerid][oSilahDelay] != 0 && OyuncuBilgi[playerid][oSilahHakki] == 0) {
	 			HataMesaji(playerid, "Bir sonraki silah almana: %s", ConvertTime(OyuncuBilgi[playerid][oSilahDelay] - gettime()));
	 			return 1;
			}
			new silah_secim[sizeof(VIP_Silahlar)];
			for(new c = 0; c != sizeof(VIP_Silahlar); c++) silah_secim[c] = VIP_Silahlar[c][1];
			new eksi_silah = 0;
			switch(OyuncuBilgi[playerid][oVIP]) {
				case 1: eksi_silah = 2;
				case 2: eksi_silah = 1;
			}
			ShowModelSelectionMenuEx(playerid, silah_secim, sizeof(silah_secim) - eksi_silah, "VIP Silah", MODELLER_VIPSILAH, 0.0, 0.0, 0.0);
	    }
	    else if(!strcmp(inputtext, "VIP Kýyafetler", true)) {
			if(OyuncuBilgi[playerid][oCinsiyet] == 1) {
					switch(OyuncuBilgi[playerid][oTenRengi]) {
						case 1: {
							new kiyafetler[sizeof(VIPErkekBeyaz)];
							for(new c = 0; c != sizeof(VIPErkekBeyaz); c++) kiyafetler[c] = VIPErkekBeyaz[c][0];
							ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "VIP Kýyafet", MODELLER_VIPSKIN, 0.0, 0.0, 0.0);
						}
						case 2: {
							new kiyafetler[sizeof(VIPErkekSiyah)];
							for(new c = 0; c != sizeof(VIPErkekSiyah); c++) kiyafetler[c] = VIPErkekSiyah[c][0];
							ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "VIP Kýyafet", MODELLER_VIPSKIN, 0.0, 0.0, 0.0);
						}
					}
				}
				else if(OyuncuBilgi[playerid][oCinsiyet] == 2) {
					switch(OyuncuBilgi[playerid][oTenRengi]) {
						case 1: {
							new kiyafetler[sizeof(VIPKadinBeyaz)];
							for(new c = 0; c != sizeof(VIPKadinBeyaz); c++) kiyafetler[c] = VIPKadinBeyaz[c][0];
							ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "VIP Kýyafet", MODELLER_VIPSKIN, 0.0, 0.0, 0.0);
						}
						case 2: {
							new kiyafetler[sizeof(VIPKadinSiyah)];
							for(new c = 0; c != sizeof(VIPKadinSiyah); c++) kiyafetler[c] = VIPKadinSiyah[c][0];
							ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "VIP Kýyafet", MODELLER_VIPSKIN, 0.0, 0.0, 0.0);
						}
					}
				}
	    }
	}
	else if(dialogid == DIALOG_VIP_SILAHONAY) {
	    if(!response) return DeletePVar(playerid, "VIP_Silah_Fiyat"), DeletePVar(playerid, "VIP_Silah");

		new silah_ucret = GetPVarInt(playerid, "VIP_Silah_Fiyat"), silah_id = GetPVarInt(playerid, "VIP_Silah");
		DeletePVar(playerid, "VIP_Silah_Fiyat"), DeletePVar(playerid, "VIP_Silah");
		
		if(OyuncuBilgi[playerid][oPara] < silah_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsun.");
		if(SilahSlotKontrol(playerid, SilahSlotBul[silah_id]) && SilahSlotBul[silah_id] != 0) return HataMesaji(playerid, "Bu silah türü sizde bulunduðu için bu ekipmaný alamýyorsunuz.");

		new mermi = 0;
		switch(silah_id) {
			case WEAPON_DEAGLE: mermi = DEAGLE_LIMIT;
			case WEAPON_AK47: mermi = AK47_LIMIT;
			case WEAPON_MP5: mermi = MP5_LIMIT;
		    case WEAPON_TEC9: mermi = TEC9_LIMIT;
		    case WEAPON_SHOTGUN: mermi = SHOTGUN_LIMIT;
		    case WEAPON_RIFLE: mermi = RIFLE_LIMIT;
		    case WEAPON_UZI: mermi = UZI_LIMIT;
		    case WEAPON_COLT45: mermi = COLT45_LIMIT;
		    case WEAPON_M4: mermi = M4_LIMIT;
		    case WEAPON_SNIPER: mermi = SNIPER_LIMIT;
		    case COMBATSHOTGUN_LIMIT: mermi = COMBATSHOTGUN_LIMIT;
		    default: mermi = 1000;
		}
		if(OyuncuBilgi[playerid][oSilahDelay] == 0) {
		    switch(OyuncuBilgi[playerid][oVIP]) {
		        case 2: OyuncuBilgi[playerid][oSilahDelay] = gettime() + 64800;
		        case 3: OyuncuBilgi[playerid][oSilahDelay] = gettime() + 43200;
		        default: OyuncuBilgi[playerid][oSilahDelay] = gettime() + 86400;
		    }
		}
		else if(OyuncuBilgi[playerid][oSilahHakki] > 0 && OyuncuBilgi[playerid][oSilahDelay] != 0) OyuncuBilgi[playerid][oSilahHakki]--;
        else if(OyuncuBilgi[playerid][oSilahHakki] == 0 && OyuncuBilgi[playerid][oSilahDelay] == 0) return HataMesaji(playerid, "Bir sorun oluþtu.");
		ParaEkle(playerid, -silah_ucret);
		Silahver(playerid, silah_id, mermi);

		SunucuMesaji(playerid, "%s model silahý {33aa33}%s {7a8a9a}fiyatýna satýn aldýn.", SilahIsim(silah_id), NumaraFormati(silah_ucret));
	}
	else if(dialogid == DIALOG_GARAJ_CIKART) {
	    if(!response) return false;
	    if(Garaj_Yakin(playerid) == -1) return HataMesaji(playerid, "Bir garaja yakýn deðilsin.");
	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_GARAJ_CIKART, DIALOG_STYLE_INPUT, "Garaj - Araç Çýkart", "{FFFFFF}Lütfen çýkartmak istediðiniz aracýn plakasýný girin:", "Çýkart", "Kapat");

	    new garajid = Garaj_Yakin(playerid);
	    for(new i = 0; i != MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracKullanimda] && !strcmp(inputtext, AracBilgi[i][aracPlaka], true)) {
			if(AracBilgi[i][aracGaraj] != GarajBilgi[garajid][garajID]) return HataMesaji(playerid, "Araç bu garajda deðil.");
			
			AracBilgi[i][aracGaraj] = 0;
			AracBilgi[i][aracDurum] = 1;
			Arac_Kaydet(i);
			Arac_Spawn(i);
			SetVehiclePos(AracBilgi[i][aracYarat], GarajBilgi[garajid][garajPos][3], GarajBilgi[garajid][garajPos][4], GarajBilgi[garajid][garajPos][5]);
			Garaj_Yenile(garajid);
			SunucuMesaji(playerid, "Araç garajdan çýkartýldý.");
			return 1;
		}
		HataMesaji(playerid, "Bu plakaya ait bir araç yok.");
	}
	else if(dialogid == DIALOG_EV_SAHIP) {
	    if(!response) return false;
	    new id = Oyuncu_Evde(playerid);

		if(!strcmp(inputtext, "Kilit", true)) {
		    if(Oyuncu_EvKapida(playerid) == -1 || Oyuncu_EvKapida(playerid) != id) return HataMesaji(playerid, "Kilit durumunu deðiþtirmek için kapýya yakýn olmalýsýn.");

			switch(EvBilgi[id][evDurum]) {
				case 1: EvBilgi[id][evDurum] = 2, Ev_Yenile(id), cmd_ame(playerid, "evin kapýsýný kilitler.");
				case 2: {
					EvBilgi[id][evDurum] = 1, Ev_Yenile(id), cmd_ame(playerid, "evin kapýsýnýn kilidini açar.");
					foreach(new i : Player) if(MaymuncukVeri[i][mTur] == 2 && MaymuncukVeri[playerid][mHedef] == id) return SunucuMesaji(i, "Maymuncuk kýrýldý."), MaymuncukVeri[i][mSaniye] = 0, OyuncuBilgi[i][oMaymuncuk]--;
				}
				default: HataMesaji(playerid, "Bu evin kilit durumunu deðiþtiremezsin.");
			}
		}
		else if(!strcmp(inputtext, "Lamba", true)) return cmd_evlamba(playerid, inputtext);
		else if(!strcmp(inputtext, "Mobilyalar", true)) return DialogGoster(playerid, DIALOG_MOBILYALAR, DIALOG_STYLE_TABLIST, "Ev - Mobilyalar", "Mobilya Ekle\nMobilya Düzenle\nMobilya Sil\nTüm Mobilyalarý Sil", "Seç", "<< Geri");
		else if(!strcmp(inputtext, "Dolaplar", true)) return DialogGoster(playerid, DIALOG_DOLAPLAR, DIALOG_STYLE_TABLIST, "Ev - Kýyafet Dolaplarý", "Dolap Ekle\nDolap Kaldýr", "Seç", "<< Geri");
		else if(!strcmp(inputtext, "Raf Ekle", true))
		{
		    if(!Ev_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Bulunduðun ev senin deðil.");
			if(Raf_Sayi(id, 1) >= EvBilgi[id][evLevel]) return HataMesaji(playerid, "Ev levelinize göre en fazla %d adet raf alabilirsiniz.", EvBilgi[id][evLevel]);
			if(Raf_Yakin(playerid) != -1) return HataMesaji(playerid, "Yakýnlarda baþka bir raf var.");
			if(OyuncuBilgi[playerid][oPara] < RAF_UCRET) return HataMesaji(playerid, "Yeterli paran yok.");

			id = Raf_Yarat(playerid, id, 1);
			if(id == -1) return HataMesaji(playerid, "Sunucu maksimum raf limitine ulaþtý.");

		    EditlemeSifirla(playerid);
			OyuncuBilgi[playerid][oDuzenlenenRaf] = id;
			EditDynamicObject(playerid, RafBilgi[id][rafObje][4]);

			ParaEkle(playerid, -RAF_UCRET);
			SunucuMesaji(playerid, "Raf satýn almak için %s ödedin.", NumaraFormati(RAF_UCRET));
			SunucuMesaji(playerid, "{FFFF00}~k~~PED_SPRINT~{7a8a9a} tuþuna basýlý tutarak kamerayý oynatabilirsiniz.");
   		}
		else if(!strcmp(inputtext, "Raf Düzenle", true))
		{
		    if(!Ev_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Bulunduðun ev senin deðil.");

		    return DialogGoster(playerid, DIALOG_RAF_DUZENLE, DIALOG_STYLE_INPUT, "Raf Düzenleme", "{FFFFFF}Lütfen düzenlemek istediðiniz rafýn ID'sini girin;", "Tamam", "Kapat");
   		}
   		else if(!strcmp(inputtext, "Raf Kaldýr", true))
		{
		    if(!Ev_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Bulunduðun ev senin deðil.");
			if((id = Raf_Yakin(playerid)) == -1) return HataMesaji(playerid, "Rafa yakýn deðilsin.");
			new sayi = 0;
			for(new i = 0; i < 4; i ++) if(RafBilgi[id][rafSilahlar][i]) sayi++;
			if(sayi > 0) return HataMesaji(playerid, "Rafta eþya varken silemezsin.");

			Raf_Sil(id);
			SunucuMesaji(playerid, "Rafý baþarýyla sildin.");
		}
		else if(!strcmp(inputtext, "Kasa Ýþlemleri", true)) {
		    new kasa_mesaj[256];
		    format(kasa_mesaj, sizeof(kasa_mesaj), "{FFFFFF}Para Çek\t\t[{33aa33}%s{FFFFFF}]\n{FFFFFF}Para Yatýr\t\t[{33aa33}%s{FFFFFF}]", NumaraFormati(EvBilgi[id][evKasa]), NumaraFormati(EvBilgi[id][evKasa]));
		    return DialogGoster(playerid, DIALOG_EVKASA, DIALOG_STYLE_TABLIST, "Ev - Kasa Ýþlemleri", kasa_mesaj, "Seç", "<< Geri");
		}
	}
	else if(dialogid == DIALOG_DOLAPLAR) {
	    if(!response) return cmd_ev(playerid, inputtext);
	
	    if(!strcmp(inputtext, "Dolap Ekle", true)) return DialogGoster(playerid, DIALOG_DOLAPLAR_EKLE, DIALOG_STYLE_TABLIST, "Ev - Dolap Ekle", "Küçük (3 Slot)\t\t$500\nOrta (6 Slot)\t\t$1,000\nBüyük (10 Slot)\t\t$2500\n", "Ekle", "Kapat");
		else if(!strcmp(inputtext, "Dolap Kaldýr", true)) {
			new dolap_sayi = 0, dolap_icerik[512], id = Oyuncu_Evde(playerid), dolap_tur[16];
			format(dolap_icerik, sizeof(dolap_icerik), "ID\tTür\n");
		    for(new s = 0; s != MAKSIMUM_DOLAP; s++) if(DolapBilgi[s][dolapEv] == EvBilgi[id][evID] && DolapBilgi[s][dolapKullanimda] == true) {
		        switch(DolapBilgi[s][dolapModel]) {
		            case 2133: format(dolap_tur, sizeof(dolap_tur), "Küçük");
		            case 2141: format(dolap_tur, sizeof(dolap_tur), "Orta");
		            case 2131: format(dolap_tur, sizeof(dolap_tur), "Büyük");
		        }
				format(dolap_icerik, sizeof(dolap_icerik), "%s%d\t%s\n", dolap_icerik, s, dolap_tur), dolap_sayi++;
			}
		    if(dolap_sayi == 0) return HataMesaji(playerid, "Evinde kaldýrabileceðin bir dolap yok.");
		    DialogGoster(playerid, DIALOG_DOLAPLAR_KALDIR, DIALOG_STYLE_TABLIST_HEADERS, "Ev - Dolap Kaldýr", dolap_icerik, "Kaldýr", "Ýptal");
		}
	}
	else if(dialogid == DIALOG_DOLAPLAR_KALDIR) {
	    if(!response) return false;
	    
	    new id = strval(inputtext);
	    if(DolapBilgi[id][dolapKullanimda] == false) return HataMesaji(playerid, "Dolap kullanýmda deðil.");
	    if(DolapBilgi[id][dolapEv] != EvBilgi[Oyuncu_Evde(playerid)][evID]) return HataMesaji(playerid, "Bir sorun oluþtu.");
	    
	    Dolap_Kaldir(id);
	    SunucuMesaji(playerid, "Dolabý baþarýyla kaldýrdýn.");
	}
	else if(dialogid == DIALOG_DOLAPLAR_EKLE) {
	    if(!response) return false;
	    new dolap_sayi = 0;
	    for(new s = 0; s != MAKSIMUM_DOLAP; s++) if(DolapBilgi[s][dolapEv] == EvBilgi[Oyuncu_Evde(playerid)][evID] && DolapBilgi[s][dolapKullanimda] == true) dolap_sayi++;
	    if(dolap_sayi >= MAKSIMUM_DOLAP_LIMIT) return HataMesaji(playerid, "Dolap limitine ulaþmýþsýn, daha fazla dolap satýn alamazsýn.");
		    
	    new fiyat = 0, obje = 0;
	    if(!strcmp(inputtext, "Küçük (3 Slot)", true)) fiyat = 500, obje = 2133;
	    else if(!strcmp(inputtext, "Orta (6 Slot)", true)) fiyat = 1000, obje = 2141;
		else if(!strcmp(inputtext, "Büyük (10 Slot)", true)) fiyat = 2500, obje = 2131;
		
		if(OyuncuBilgi[playerid][oPara] < fiyat) return HataMesaji(playerid, "Bu dolabýn ücretini karþýlayamýyorsun.");
		
		new id = Dolap_Olustur(playerid, obje);
		if(id == -1) return HataMesaji(playerid, "Sunucuda dolap limiti kalmadýðý için dolap satýn alamazsýn.");
		
		EditDynamicObject(playerid, DolapBilgi[id][dolapObje]);
		ParaEkle(playerid, -fiyat);
		SunucuMesaji(playerid, "Yeni bir dolap satýn aldýn. /evdolap ile kullanabilirsin.");
	}
	else if(dialogid == DIALOG_EVKASA) {
	    if(!response) return cmd_ev(playerid, inputtext);
	    new id = Oyuncu_Evde(playerid), dialog_mesaj[144];
	    if(!strcmp(inputtext, "Para Çek", true)) {
	        format(dialog_mesaj, sizeof(dialog_mesaj), "{FFFFFF}Kasadan çekmek istediðiniz para miktarýný girin;\n\n{FFFFFF}Güncel Miktar: {33aa33}%s", NumaraFormati(EvBilgi[id][evKasa]));
	        return DialogGoster(playerid, DIALOG_EVKASA_PARACEK, DIALOG_STYLE_INPUT, "Ev - Kasa Ýþlemleri", dialog_mesaj, "Çek", "Geri");
	    }
	    else if(!strcmp(inputtext, "Para Yatýr", true)) {
			format(dialog_mesaj, sizeof(dialog_mesaj), "{FFFFFF}Kasaya yatýrmak istediðiniz para miktarýný girin;\n\n{FFFFFF}Üzerinizdeki Miktar: {33aa33}%s", NumaraFormati(OyuncuBilgi[playerid][oPara]));
	        return DialogGoster(playerid, DIALOG_EVKASA_PARAYATIR, DIALOG_STYLE_INPUT, "Ev - Kasa Ýþlemleri", dialog_mesaj, "Yatýr", "Geri");
	    }
	}
	else if(dialogid == DIALOG_EVKASA_PARACEK) {
	    if(!response) return cmd_ev(playerid, inputtext);
	    
	    new id = Oyuncu_Evde(playerid), miktar, dialog_mesaj[144];
	    if(sscanf(inputtext, "d", miktar)) {
	        format(dialog_mesaj, sizeof(dialog_mesaj), "{FFFFFF}Kasadan çekmek istediðiniz para miktarýný girin;\n\n{FFFFFF}Güncel Miktar: {33aa33}%s", NumaraFormati(EvBilgi[id][evKasa]));
	        return DialogGoster(playerid, DIALOG_EVKASA_PARACEK, DIALOG_STYLE_INPUT, "Ev - Kasa Ýþlemleri", dialog_mesaj, "Çek", "Geri");
	    }
	    if(miktar < 0 || EvBilgi[id][evKasa] < miktar) {
	        format(dialog_mesaj, sizeof(dialog_mesaj), "{B70000}HATA: {FFFFFF}Kasada bu kadar para yok!\n\n{FFFFFF}Kasadan çekmek istediðiniz para miktarýný girin;\n\n{FFFFFF}Güncel Miktar: {33aa33}%s", NumaraFormati(EvBilgi[id][evKasa]));
	        return DialogGoster(playerid, DIALOG_EVKASA_PARACEK, DIALOG_STYLE_INPUT, "Ev - Kasa Ýþlemleri", dialog_mesaj, "Çek", "Geri");
	    }
	    
	    EvBilgi[id][evKasa] -= miktar;
	    ParaEkle(playerid, miktar);
	    SunucuMesaji(playerid, "Ev kasasýndan %s çektin.", NumaraFormati(miktar));
	    return 1;
	}
	else if(dialogid == DIALOG_EVKASA_PARAYATIR) {
	    if(!response) return cmd_ev(playerid, inputtext);

	    new id = Oyuncu_Evde(playerid), miktar, dialog_mesaj[144];
	    if(sscanf(inputtext, "d", miktar)) {
			format(dialog_mesaj, sizeof(dialog_mesaj), "{FFFFFF}Kasaya yatýrmak istediðiniz para miktarýný girin;\n\n{FFFFFF}Üzerinizdeki Miktar: {33aa33}%s", NumaraFormati(OyuncuBilgi[playerid][oPara]));
	        return DialogGoster(playerid, DIALOG_EVKASA_PARAYATIR, DIALOG_STYLE_INPUT, "Ev - Kasa Ýþlemleri", dialog_mesaj, "Yatýr", "Geri");
	    }
	    if(miktar < 0 || OyuncuBilgi[playerid][oPara] < miktar) {
			format(dialog_mesaj, sizeof(dialog_mesaj), "{B70000}HATA: {FFFFFF}Üzerinizde bu kadar para yok.\n\n{FFFFFF}Kasaya yatýrmak istediðiniz para miktarýný girin;\n\n{FFFFFF}Üzerinizdeki Miktar: {33aa33}%s", NumaraFormati(OyuncuBilgi[playerid][oPara]));
	        return DialogGoster(playerid, DIALOG_EVKASA_PARAYATIR, DIALOG_STYLE_INPUT, "Ev - Kasa Ýþlemleri", dialog_mesaj, "Yatýr", "Geri");
	    }

	    EvBilgi[id][evKasa] += miktar;
	    ParaEkle(playerid, -miktar);
	    SunucuMesaji(playerid, "Ev kasasýna %s yatýrdýn.", NumaraFormati(miktar));
	    return 1;
	}
	else if(dialogid == DIALOG_GASP_ONAY) {
	    if(!response) {
	        new oyuncuid = OyuncuBilgi[playerid][oGasp];
	        if(IsPlayerConnected(oyuncuid)) {
				SunucuMesaji(oyuncuid, "Gasp etmek istediðiniz kiþi isteðinizi reddetti.");
				OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID;
	        }
	        OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID;
	        return 1;
	    }
	    new oyuncuid = OyuncuBilgi[playerid][oGasp];
		if(!IsPlayerConnected(oyuncuid)) return OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Bir sorun oluþtu.");
		if(!YakinlikKontrol(playerid, oyuncuid, 4.0)) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Oyuncuya yakýn deðilsin, iþlemin iptal edildi.");
		new icerik[512];
		format(icerik, sizeof(icerik), "Eþya\tAdet\n");
		if(OyuncuBilgi[playerid][oPara] > 0 && OyuncuBilgi[playerid][oPara] < 50000) format(icerik, sizeof(icerik), "%sPara\t%s\n", icerik, NumaraFormati(OyuncuBilgi[playerid][oPara]));
		else if(OyuncuBilgi[playerid][oPara] > 50000) format(icerik, sizeof(icerik), "%sPara\t%s\n", icerik, NumaraFormati(50000));
		if(OyuncuBilgi[playerid][oUyusturucu] > 0) format(icerik, sizeof(icerik), "%sUyuþturucu\t%d\n", icerik, OyuncuBilgi[playerid][oUyusturucu]);
		if(OyuncuBilgi[playerid][oTohum] > 0) {
			new gasp_tohum = OyuncuBilgi[oyuncuid][oTohum] + OyuncuBilgi[playerid][oTohum];
			switch(OyuncuBilgi[oyuncuid][oVIP]) {
			    case 1: if(gasp_tohum < 2) format(icerik, sizeof(icerik), "%sTohum\t%d\n", icerik, OyuncuBilgi[playerid][oTohum]);
			    case 2: if(gasp_tohum > 3) format(icerik, sizeof(icerik), "%sTohum\t%d\n", icerik, OyuncuBilgi[playerid][oTohum]);
				case 3: if(gasp_tohum > 4) format(icerik, sizeof(icerik), "%sTohum\t%d\n", icerik, OyuncuBilgi[playerid][oTohum]);
				default: {
					if(OyuncuBilgi[playerid][oUyusturucuBoost] == 0 && gasp_tohum < 1) format(icerik, sizeof(icerik), "%sTohum\t%d\n", icerik, OyuncuBilgi[playerid][oTohum]);
					else if(OyuncuBilgi[playerid][oUyusturucuBoost] > 0 && gasp_tohum < 4) format(icerik, sizeof(icerik), "%sTohum\t%d\n", icerik, OyuncuBilgi[playerid][oTohum]);
				}
			}
		}
		if(OyuncuBilgi[playerid][oIslenmemisMadde] > 0) format(icerik, sizeof(icerik), "%sÝþlenmemiþ Madde\t%d\n", icerik, OyuncuBilgi[playerid][oIslenmemisMadde]);
		if(OyuncuBilgi[playerid][oMaymuncuk] > 0 && OyuncuBilgi[playerid][oMaymuncuk] + OyuncuBilgi[oyuncuid][oMaymuncuk] < 3) format(icerik, sizeof(icerik), "%sMaymuncuk\t%d\n", icerik, OyuncuBilgi[playerid][oMaymuncuk]);
		// if(OyuncuBilgi[playerid][oMateryal] > 0) format(icerik, sizeof(icerik), "%sMateryal\t%d\n", icerik, OyuncuBilgi[playerid][oMateryal]);
		if(OyuncuBilgi[playerid][oTamirKiti] > 0) {
			new limit = 0;
			switch(OyuncuBilgi[playerid][oVIP]) {
			    case 2: limit = 2;
			    case 3: limit = 3;
			    default: limit = 1;
			}
			if(OyuncuBilgi[playerid][oTamirKiti] + OyuncuBilgi[oyuncuid][oTamirKiti] < limit) format(icerik, sizeof(icerik), "%sTamir Kiti\t%d\n", icerik, OyuncuBilgi[playerid][oTamirKiti]);
		}
		if(OyuncuBilgi[playerid][oIpUrun] > 0) {
			new limit = 0;
			switch(OyuncuBilgi[playerid][oVIP]) {
			    case 2: limit = 2;
			    case 3: limit = 3;
			    default: limit = 1;
			}
			if(OyuncuBilgi[playerid][oIpUrun] + OyuncuBilgi[oyuncuid][oIpUrun] < limit) format(icerik, sizeof(icerik), "%sÝp\t%d\n", icerik, OyuncuBilgi[playerid][oIpUrun]);
		}
		if(OyuncuBilgi[playerid][oIlkYardim] > 0) {
			new limit = 0;
			switch(OyuncuBilgi[playerid][oVIP]) {
			    case 3: limit = 2;
			    default: limit = 1;
			}
			if(OyuncuBilgi[playerid][oIlkYardim] + OyuncuBilgi[oyuncuid][oIlkYardim] < limit) format(icerik, sizeof(icerik), "%sÝlk Yardým Kiti\t%s\n", icerik, OyuncuBilgi[playerid][oIlkYardim]);
		}
		if(OyuncuBilgi[playerid][oBidon] > 0 && OyuncuBilgi[playerid][oBidonBenzin] > 0) format(icerik, sizeof(icerik), "%sBenzin Bidonu\t%d Litre\n", icerik, OyuncuBilgi[playerid][oBidonBenzin]);
		if(OyuncuBilgi[playerid][oPortatifRadyo] > 0) format(icerik, sizeof(icerik), "%sPortatif Radyo\t%d\n", icerik, OyuncuBilgi[playerid][oPortatifRadyo]);
		/*if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL) {
			new sayi = 0, silahid, mermi;
			for(new i = 0; i < 13; i ++)
			{
				GetPlayerWeaponData(playerid, i, silahid, mermi);
				if(silahid > 0 && OyuncuBilgi[playerid][oSilah][i] == silahid) sayi++;
			}
			if(sayi > 0) format(icerik, sizeof(icerik), "%sSilahlar\t%d\n", icerik, sayi);
		}*/
		SetPVarInt(oyuncuid, "gasp_esya", 1);
		SetPVarInt(oyuncuid, "gasp_para", 0);
		DialogGoster(oyuncuid, DIALOG_GASP, DIALOG_STYLE_TABLIST_HEADERS, "Gasp - [2 seçim hakkýnýz bulunmaktadýr.]", icerik, "Gasp Et", "Kapat");
	}
	else if(dialogid == DIALOG_GASP) {
	    if(!response) {
	        new oyuncuid = OyuncuBilgi[playerid][oGasp];
	        if(IsPlayerConnected(oyuncuid)) {
				SunucuMesaji(oyuncuid, "Sizi gasp eden kiþi iþlemi bitirdi.");
				OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID;
	        }
	        OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID;
	        return 1;
	    }
		new oyuncuid = OyuncuBilgi[playerid][oGasp];
		if(!IsPlayerConnected(oyuncuid)) return OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Bir sorun oluþtu.");
		if(!YakinlikKontrol(playerid, oyuncuid, 4.0)) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Oyuncuya yakýn deðilsin, iþlemin iptal edildi.");
		if(!strcmp(inputtext, "Para", true)) {
		    if(OyuncuBilgi[oyuncuid][oPara] < 1 || GetPVarInt(playerid, "gasp_para") == 1) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Bir sorun oluþtu.");
			if(OyuncuBilgi[oyuncuid][oPara] > 0 && OyuncuBilgi[oyuncuid][oPara] < 50000) {
			    SetPVarInt(playerid, "gasp_para", 0);
				SunucuMesaji(playerid, "%s adlý kiþiden %s miktarýnda para gasp ettiniz.", OyuncuIsim(oyuncuid), NumaraFormati(OyuncuBilgi[oyuncuid][oPara]));
				SunucuMesaji(oyuncuid, "%s adlý kiþi sizden %s miktarýnda para gasp etti.", OyuncuIsim(playerid), NumaraFormati(OyuncuBilgi[oyuncuid][oPara]));
				ParaEkle(playerid, OyuncuBilgi[oyuncuid][oPara]);
				ParaEkle(oyuncuid, -OyuncuBilgi[oyuncuid][oPara]);
			}
			else if(OyuncuBilgi[oyuncuid][oPara] > 7500) {
				SunucuMesaji(playerid, "%s adlý kiþiden %s miktarýnda para gasp ettiniz.", OyuncuIsim(oyuncuid), NumaraFormati(7500));
				SunucuMesaji(oyuncuid, "%s adlý kiþi sizden %s miktarýnda para gasp etti.", OyuncuIsim(playerid), NumaraFormati(7500));
				ParaEkle(playerid, 7500);
				ParaEkle(oyuncuid, -7500);
				SetPVarInt(playerid, "gasp_para", 1);
			}
		}
		/*else if(!strcmp(inputtext, "Silahlar", true)) {
		    new silahid, mermi, sayi = 0;
			for(new i = 0; i < 13; i ++)
			{
				GetPlayerWeaponData(oyuncuid, i, silahid, mermi);
				if(silahid > 0 && OyuncuBilgi[oyuncuid][oSilah][i] == silahid) {
					SilahSil(oyuncuid, silahid);
					SunucuMesaji(oyuncuid, "%s adlý kiþi %s model silahýnýzý gasp etti.", OyuncuIsim(playerid), SilahIsim(silahid));
                    if(!SilahSlotKontrol(playerid, SilahSlotBul[silahid])) {
						Silahver(playerid, silahid, mermi);
						SunucuMesaji(playerid, "%s adlý kiþiden %s model silahý gasp ettin.", OyuncuIsim(oyuncuid), SilahIsim(silahid));
					}
					else HataMesaji(playerid, "Silah slotunuz dolu olduðu için %s model silahý gasp edemediniz.", SilahIsim(silahid));
					sayi++;
				}
			}
			if(sayi == 0) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Bir sorun oluþtu.");
		}*/
 		else if(!strcmp(inputtext, "Uyuþturucu", true)) {
			if(OyuncuBilgi[oyuncuid][oUyusturucu] < 1) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Bir sorun oluþtu.");
			
			new adet = OyuncuBilgi[oyuncuid][oUyusturucu];
			OyuncuBilgi[playerid][oUyusturucu] += adet;
			OyuncuBilgi[oyuncuid][oUyusturucu] = 0;
			SunucuMesaji(playerid, "%s adlý kiþiden %d adet uyuþturucu gasp ettin.", OyuncuIsim(oyuncuid), adet);
			SunucuMesaji(oyuncuid, "%s adlý kiþi sizden %d adet uyuþturucu gasp etti.", OyuncuIsim(playerid), adet);
		}
  		else if(!strcmp(inputtext, "Ýþlenmemiþ Madde", true)) {
			if(OyuncuBilgi[oyuncuid][oIslenmemisMadde] < 1) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Bir sorun oluþtu.");

			new adet = OyuncuBilgi[oyuncuid][oIslenmemisMadde];
			OyuncuBilgi[playerid][oIslenmemisMadde] += adet;
			OyuncuBilgi[oyuncuid][oIslenmemisMadde] = 0;
			SunucuMesaji(playerid, "%s adlý kiþiden %d adet iþlenmemiþ madde gasp ettin.", OyuncuIsim(oyuncuid), adet);
			SunucuMesaji(oyuncuid, "%s adlý kiþi sizden %d adet iþlenmemiþ madde gasp etti.", OyuncuIsim(playerid), adet);
		}
  		else if(!strcmp(inputtext, "Portatif Radyo", true)) {
			if(OyuncuBilgi[oyuncuid][oPortatifRadyo] < 1) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Bir sorun oluþtu.");

			OyuncuBilgi[playerid][oPortatifRadyo] = 1;
			OyuncuBilgi[playerid][oFrekans] = OyuncuBilgi[oyuncuid][oFrekans];
			OyuncuBilgi[oyuncuid][oPortatifRadyo] = 0;
			OyuncuBilgi[oyuncuid][oFrekans] = 0;
			SunucuMesaji(playerid, "%s adlý kiþiden portatif radyo gasp ettin. (Frekansýn güncellendi: %d kHz)", OyuncuIsim(oyuncuid), OyuncuBilgi[playerid][oFrekans]);
			SunucuMesaji(oyuncuid, "%s adlý kiþi sizden portatif radyo gasp etti.", OyuncuIsim(playerid));
		}
  		else if(!strcmp(inputtext, "Benzin Bidonu", true)) {
			

			OyuncuBilgi[playerid][oBidon] = 1;
			if(OyuncuBilgi[oyuncuid][oBidonBenzin] > 0) {
				new litre = OyuncuBilgi[playerid][oBidonBenzin] + OyuncuBilgi[oyuncuid][oBidonBenzin];
				if(litre >= 10) OyuncuBilgi[playerid][oBidonBenzin] = 10;
				else if(litre < 10) OyuncuBilgi[playerid][oBidonBenzin] = litre;
			}
			OyuncuBilgi[oyuncuid][oBidon] = 0;
			OyuncuBilgi[oyuncuid][oBidonBenzin] = 0;
			SunucuMesaji(playerid, "%s adlý kiþiden benzin bidonu gasp ettin. (Yeni Litre: %d)", OyuncuIsim(oyuncuid), OyuncuBilgi[playerid][oBidonBenzin]);
			SunucuMesaji(oyuncuid, "%s adlý kiþi sizden benzin bidonu gasp etti.", OyuncuIsim(playerid));
		}
  		else if(!strcmp(inputtext, "Tohum", true)) {
			if(OyuncuBilgi[oyuncuid][oTohum] < 1) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Bir sorun oluþtu.");

			new gasp_tohum = OyuncuBilgi[oyuncuid][oTohum] + OyuncuBilgi[playerid][oTohum], eski_tohum = OyuncuBilgi[oyuncuid][oTohum];
			switch(OyuncuBilgi[playerid][oVIP]) {
			    case 1: {
					if(gasp_tohum > 2) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Tohum limitini(2 adet) aþacaðýn için bu iþlemi yapamazsýn.");
					
					OyuncuBilgi[playerid][oTohum] = gasp_tohum;
					OyuncuBilgi[oyuncuid][oTohum] = 0;
			    }
			    case 2: {
					if(gasp_tohum > 3) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Tohum limitini(3 adet) aþacaðýn için bu iþlemi yapamazsýn.");

					OyuncuBilgi[playerid][oTohum] = gasp_tohum;
					OyuncuBilgi[oyuncuid][oTohum] = 0;
			    }
			    case 3: {
					if(gasp_tohum > 4) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Tohum limitini(4 adet) aþacaðýn için bu iþlemi yapamazsýn.");

					OyuncuBilgi[playerid][oTohum] = gasp_tohum;
					OyuncuBilgi[oyuncuid][oTohum] = 0;
			    }
			    default: {
			        if(OyuncuBilgi[playerid][oUyusturucuBoost] == 0 && gasp_tohum > 1) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Tohum limitini(1 adet) aþacaðýn için bu iþlemi yapamazsýn.");
					else if(OyuncuBilgi[playerid][oUyusturucuBoost] > 0 && gasp_tohum > 4) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Tohum limitini(4 adet) aþacaðýn için bu iþlemi yapamazsýn.");
					
					OyuncuBilgi[playerid][oTohum] = gasp_tohum;
					OyuncuBilgi[oyuncuid][oTohum] = 0;
			    }
			}
			SunucuMesaji(playerid, "%s adlý kiþiden %d adet tohum gasp ettin.", OyuncuIsim(oyuncuid), eski_tohum);
			SunucuMesaji(oyuncuid, "%s adlý kiþi sizden %d adet tohum gasp etti.", OyuncuIsim(playerid), eski_tohum);
		}
 		/*else if(!strcmp(inputtext, "Materyal", true)) {
			if(OyuncuBilgi[oyuncuid][oMateryal] < 1) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Bir sorun oluþtu.");

			new adet = OyuncuBilgi[oyuncuid][oMateryal];
			OyuncuBilgi[playerid][oMateryal] += adet;
			OyuncuBilgi[oyuncuid][oMateryal] = 0;
			SunucuMesaji(playerid, "%s adlý kiþiden %d adet materyal gasp ettin.", OyuncuIsim(oyuncuid), adet);
			SunucuMesaji(oyuncuid, "%s adlý kiþi sizden %d adet materyal gasp etti.", OyuncuIsim(playerid), adet);
		}*/
 		else if(!strcmp(inputtext, "Tamir Kiti", true)) {
			if(OyuncuBilgi[oyuncuid][oTamirKiti] < 1) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Bir sorun oluþtu.");
			new limit = 0;
			switch(OyuncuBilgi[playerid][oVIP]) {
			    case 2: limit = 2;
			    case 3: limit = 3;
			    default: limit = 1;
			}
			if(OyuncuBilgi[playerid][oTamirKiti] + OyuncuBilgi[oyuncuid][oTamirKiti] >= limit) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "En fazla %d adet tamir kiti alabilirsin, iþlemin iptal edildi.", limit);
			
			new adet = OyuncuBilgi[oyuncuid][oTamirKiti];
			OyuncuBilgi[playerid][oTamirKiti] += adet;
			OyuncuBilgi[oyuncuid][oTamirKiti] = 0;
			SunucuMesaji(playerid, "%s adlý kiþiden %d adet tamir kiti ettin.", OyuncuIsim(oyuncuid), adet);
			SunucuMesaji(oyuncuid, "%s adlý kiþi sizden %d adet tamir kiti gasp etti.", OyuncuIsim(playerid), adet);
		}
		else if(!strcmp(inputtext, "Ýp", true)) {
			if(OyuncuBilgi[oyuncuid][oIpUrun] < 1) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Bir sorun oluþtu.");
			new limit = 0;
			switch(OyuncuBilgi[playerid][oVIP]) {
			    case 2: limit = 2;
			    case 3: limit = 3;
			    default: limit = 1;
			}
			if(OyuncuBilgi[playerid][oIpUrun] + OyuncuBilgi[oyuncuid][oIpUrun] >= limit) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "En fazla %d adet ip taþýyabilirsin. (Limit arttýrmak için VIP paketlere göz atýn.)", limit);

			new adet = OyuncuBilgi[oyuncuid][oIpUrun];
			OyuncuBilgi[playerid][oIpUrun] += adet;
			OyuncuBilgi[oyuncuid][oIpUrun] = 0;
			SunucuMesaji(playerid, "%s adlý kiþiden %d adet ip gasp ettin.", OyuncuIsim(oyuncuid), adet);
			SunucuMesaji(oyuncuid, "%s adlý kiþi sizden %d adet ip gasp etti.", OyuncuIsim(playerid), adet);
		}
 		else if(!strcmp(inputtext, "Ýlk Yardým Kiti", true)) {
			if(OyuncuBilgi[oyuncuid][oIlkYardim] < 1) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Bir sorun oluþtu.");
			new limit = 0;
			switch(OyuncuBilgi[playerid][oVIP]) {
			    case 3: limit = 2;
			    default: limit = 1;
			}
			if(OyuncuBilgi[playerid][oIlkYardim] + OyuncuBilgi[oyuncuid][oIlkYardim] >= limit) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "En fazla %d adet ilk yardým kiti alabilirsin, iþlemin iptal edildi.", limit);

			new adet = OyuncuBilgi[oyuncuid][oIlkYardim];
			OyuncuBilgi[playerid][oIlkYardim] += adet;
			OyuncuBilgi[oyuncuid][oIlkYardim] = 0;
			SunucuMesaji(playerid, "%s adlý kiþiden %d adet ilk yardým kiti ettin.", OyuncuIsim(oyuncuid), adet);
			SunucuMesaji(oyuncuid, "%s adlý kiþi sizden %d adet ilk yardým kiti gasp etti.", OyuncuIsim(playerid), adet);
		}
 		else if(!strcmp(inputtext, "Maymuncuk", true)) {
			if(OyuncuBilgi[oyuncuid][oMaymuncuk] < 1) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "Bir sorun oluþtu.");
			if(OyuncuBilgi[playerid][oMaymuncuk] + OyuncuBilgi[oyuncuid][oMaymuncuk] >= 3) return OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID, HataMesaji(playerid, "En fazla 3 adet maymuncuk alabilirsin, iþlemin iptal edildi.");

			new adet = OyuncuBilgi[oyuncuid][oMaymuncuk];
			OyuncuBilgi[playerid][oMaymuncuk] += adet;
			OyuncuBilgi[oyuncuid][oMaymuncuk] = 0;
			SunucuMesaji(playerid, "%s adlý kiþiden %d adet maymuncuk gasp ettin.", OyuncuIsim(oyuncuid), adet);
			SunucuMesaji(oyuncuid, "%s adlý kiþi sizden %d adet maymuncuk gasp etti.", OyuncuIsim(playerid), adet);
		}
		if(OyuncuBilgi[playerid][oVIP] == 3) OyuncuBilgi[playerid][oGaspSure] = gettime() + 43200;
		else OyuncuBilgi[playerid][oGaspSure] = gettime() + 86400;
		if(GetPVarInt(playerid, "gasp_esya") < 2 && OyuncuBilgi[playerid][oVIP] < 2 || GetPVarInt(playerid, "gasp_esya") < 3 && OyuncuBilgi[playerid][oVIP] == 2 || GetPVarInt(playerid, "gasp_esya") < 4 && OyuncuBilgi[playerid][oVIP] == 3) {
			new icerik[512];
			format(icerik, sizeof(icerik), "Eþya\tAdet\n");
			if(GetPVarInt(playerid, "gasp_para") == 0) {
				if(OyuncuBilgi[oyuncuid][oPara] > 0 && OyuncuBilgi[oyuncuid][oPara] < 100000) format(icerik, sizeof(icerik), "%sPara\t%s\n", icerik, NumaraFormati(OyuncuBilgi[oyuncuid][oPara]));
				else if(OyuncuBilgi[oyuncuid][oPara] > 100000) format(icerik, sizeof(icerik), "%sPara\t%s\n", icerik, NumaraFormati(100000));
			}
			if(OyuncuBilgi[oyuncuid][oUyusturucu] > 0) format(icerik, sizeof(icerik), "%sUyuþturucu\t%d\n", icerik, OyuncuBilgi[oyuncuid][oUyusturucu]);
			if(OyuncuBilgi[oyuncuid][oTohum] > 0) {
				new gasp_tohum = OyuncuBilgi[playerid][oTohum] + OyuncuBilgi[oyuncuid][oTohum];
				switch(OyuncuBilgi[playerid][oVIP]) {
				    case 1: if(gasp_tohum < 2) format(icerik, sizeof(icerik), "%sTohum\t%d\n", icerik, OyuncuBilgi[oyuncuid][oTohum]);
				    case 2: if(gasp_tohum > 3) format(icerik, sizeof(icerik), "%sTohum\t%d\n", icerik, OyuncuBilgi[oyuncuid][oTohum]);
					case 3: if(gasp_tohum > 4) format(icerik, sizeof(icerik), "%sTohum\t%d\n", icerik, OyuncuBilgi[oyuncuid][oTohum]);
					default: {
						if(OyuncuBilgi[oyuncuid][oUyusturucuBoost] == 0 && gasp_tohum < 1) format(icerik, sizeof(icerik), "%sTohum\t%d\n", icerik, OyuncuBilgi[oyuncuid][oTohum]);
						else if(OyuncuBilgi[oyuncuid][oUyusturucuBoost] > 0 && gasp_tohum < 4) format(icerik, sizeof(icerik), "%sTohum\t%d\n", icerik, OyuncuBilgi[oyuncuid][oTohum]);
					}
				}
			}
			if(OyuncuBilgi[oyuncuid][oIslenmemisMadde] > 0) format(icerik, sizeof(icerik), "%sÝþlenmemiþ Madde\t%d\n", icerik, OyuncuBilgi[oyuncuid][oIslenmemisMadde]);
			if(OyuncuBilgi[oyuncuid][oMaymuncuk] > 0 && OyuncuBilgi[oyuncuid][oMaymuncuk] + OyuncuBilgi[playerid][oMaymuncuk] < 3) format(icerik, sizeof(icerik), "%sMaymuncuk\t%d\n", icerik, OyuncuBilgi[oyuncuid][oMaymuncuk]);
			// if(OyuncuBilgi[oyuncuid][oMateryal] > 0) format(icerik, sizeof(icerik), "%sMateryal\t%d\n", icerik, OyuncuBilgi[oyuncuid][oMateryal]);
			if(OyuncuBilgi[oyuncuid][oTamirKiti] > 0) {
				new limit = 0;
				switch(OyuncuBilgi[oyuncuid][oVIP]) {
				    case 2: limit = 2;
				    case 3: limit = 3;
				    default: limit = 1;
				}
				if(OyuncuBilgi[oyuncuid][oTamirKiti] + OyuncuBilgi[playerid][oTamirKiti] < limit) format(icerik, sizeof(icerik), "%sTamir Kiti\t%d\n", icerik, OyuncuBilgi[oyuncuid][oTamirKiti]);
			}
			if(OyuncuBilgi[oyuncuid][oIpUrun] > 0) {
				new limit = 0;
				switch(OyuncuBilgi[oyuncuid][oVIP]) {
				    case 2: limit = 2;
				    case 3: limit = 3;
				    default: limit = 1;
				}
				if(OyuncuBilgi[oyuncuid][oIpUrun] + OyuncuBilgi[playerid][oIpUrun] < limit) format(icerik, sizeof(icerik), "%sÝp\t%d\n", icerik, OyuncuBilgi[oyuncuid][oIpUrun]);
			}
			if(OyuncuBilgi[oyuncuid][oIlkYardim] > 0) {
				new limit = 0;
				switch(OyuncuBilgi[oyuncuid][oVIP]) {
				    case 3: limit = 2;
				    default: limit = 1;
				}
				if(OyuncuBilgi[oyuncuid][oIlkYardim] + OyuncuBilgi[playerid][oIlkYardim] < limit) format(icerik, sizeof(icerik), "%sÝlk Yardým Kiti\t%s\n", icerik, OyuncuBilgi[oyuncuid][oIlkYardim]);
			}
			if(OyuncuBilgi[oyuncuid][oBidon] > 0 && OyuncuBilgi[oyuncuid][oBidonBenzin] > 0) format(icerik, sizeof(icerik), "%sBenzin Bidonu\t%d Litre\n", icerik, OyuncuBilgi[oyuncuid][oBidonBenzin]);
			if(OyuncuBilgi[oyuncuid][oPortatifRadyo] > 0) format(icerik, sizeof(icerik), "%sPortatif Radyo\t%d\n", icerik, OyuncuBilgi[oyuncuid][oPortatifRadyo]);
			if(OyuncuBirlikTuru(oyuncuid) != BIRLIK_POLIS && OyuncuBirlikTuru(oyuncuid) != BIRLIK_MEDIKAL) {
				new sayi = 0, silahid, mermi;
				for(new i = 0; i < 13; i ++)
				{
					GetPlayerWeaponData(oyuncuid, i, silahid, mermi);
					if(silahid > 0 && OyuncuBilgi[oyuncuid][oSilah][i] == silahid) sayi++;
				}
				if(sayi > 0) format(icerik, sizeof(icerik), "%sSilahlar\t%d\n", icerik, sayi);
			}
			SetPVarInt(playerid, "gasp_esya", GetPVarInt(playerid, "gasp_esya") + 1);
			DialogGoster(playerid, DIALOG_GASP, DIALOG_STYLE_TABLIST_HEADERS, "Gasp", icerik, "Gasp Et", "Kapat");
		}
		else {
			OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID;
			OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID;
		}
	}
	else if(dialogid == DIALOG_ETKINLIKPANEL) {
		if(!response) return false;
		
		if(!strcmp(inputtext, "Can:", true)) return DialogGoster(playerid, DIALOG_ETKINLIK_CAN, DIALOG_STYLE_INPUT, "vRP: Etkinlik Paneli", "{FFFFFF}Lütfen etkinliðe katýlacak oyuncularýn yeni can deðerini belirleyin:", "Tamam", "Geri");
		else if(!strcmp(inputtext, "Zýrh:", true)) return DialogGoster(playerid, DIALOG_ETKINLIK_ZIRH, DIALOG_STYLE_INPUT, "vRP: Etkinlik Paneli", "{FFFFFF}Lütfen etkinliðe katýlacak oyuncularýn yeni zýrh deðerini belirleyin:", "Tamam", "Geri");
	    else if(!strcmp(inputtext, "Silah #1:", true)) return DialogGoster(playerid, DIALOG_ETKINLIK_SILAH1, DIALOG_STYLE_TABLIST, "vRP: Etkinlik Paneli", "Yumruk\nBeyzbol Sopasý\nDeagle\nShotgun\nMP5\nAK-47\nM4\nSniper Rifle", "Tamam", "Geri");
	    else if(!strcmp(inputtext, "Silah #2:", true)) return DialogGoster(playerid, DIALOG_ETKINLIK_SILAH2, DIALOG_STYLE_TABLIST, "vRP: Etkinlik Paneli", "Yumruk\nBeyzbol Sopasý\nDeagle\nShotgun\nMP5\nAK-47\nM4\nSniper Rifle", "Tamam", "Geri");
	    else if(!strcmp(inputtext, "Konum", true)) {
	        if(EtkinlikBilgi[etkDurum] == true) return HataMesaji(playerid, "Etkinlik baþlamýþken ayarlarý deðiþtirilemez.");
	        GetPlayerPos(playerid, EtkinlikBilgi[etkPos][0], EtkinlikBilgi[etkPos][1], EtkinlikBilgi[etkPos][2]);
	        GetPlayerFacingAngle(playerid, EtkinlikBilgi[etkPos][3]);
	        EtkinlikBilgi[etkInterior] = GetPlayerInterior(playerid);
	        EtkinlikBilgi[etkVirtualWorld] = GetPlayerVirtualWorld(playerid);
	        SunucuMesaji(playerid, "Etkinlik konumunu baþarýyla belirlediniz, etkinliðe giren oyuncular olduðunuz konumda spawn olacaklar.");
	        cmd_etkpanel(playerid, inputtext);
	        return 1;
	    }
	    else if(!strcmp(inputtext, "Giriþ:", true)) {
	        if(EtkinlikBilgi[etkDurum] == true) return HataMesaji(playerid, "Etkinlik baþlamýþken ayarlarý deðiþtirilemez.");
	        switch(EtkinlikBilgi[etkGiris]) {
				case false: EtkinlikBilgi[etkGiris] = true, SendClientMessageToAllEx(RENK_ETKINLIK, "VRP:Etkinlik: %s adlý yetkili etkinlik giriþlerini açtý.", OyuncuBilgi[playerid][oAdminNick]);
				case true: EtkinlikBilgi[etkGiris] = false, SendClientMessageToAllEx(RENK_ETKINLIK, "VRP:Etkinlik: %s adlý yetkili etkinlik giriþlerini kapattý.", OyuncuBilgi[playerid][oAdminNick]);
	        }
	        cmd_etkpanel(playerid, inputtext);
	    }
	    else if(!strcmp(inputtext, "Durum:", true)) {
	        switch(EtkinlikBilgi[etkDurum]) {
	            case false: {
	                if(EtkinlikBilgi[etkGiris] == true) return HataMesaji(playerid, "Etkinlik giriþleri açýkken etkinliði baþlatamazsýn."), cmd_etkpanel(playerid, inputtext);
	                
	                EtkinlikBilgi[etkDurum] = true;
	                SendClientMessageToAllEx(RENK_ETKINLIK, "VRP:Etkinlik: %s adlý yetkili etkinliði baþlattý.", OyuncuBilgi[playerid][oAdminNick]);
	                if(EtkinlikBilgi[etkSilah][0] > 0 || EtkinlikBilgi[etkSilah][1] > 0) {
	                    foreach(new i : Player) if(OyuncuBilgi[i][oEtkinlikDurum] == true) GivePlayerWeapon(i, EtkinlikBilgi[etkSilah][0], 600), GivePlayerWeapon(i, EtkinlikBilgi[etkSilah][1], 600);
	                }
	            }
				case true: {
				    EtkinlikBilgi[etkDurum] = false;
				    SendClientMessageToAllEx(RENK_ETKINLIK, "VRP:Etkinlik: %s adlý yetkili etkinliði bitirdi.", OyuncuBilgi[playerid][oAdminNick]);
				
				    foreach(new i : Player) if(OyuncuBilgi[i][oEtkinlikDurum] == true) {
						SetPlayerColor(i, EskiVeriler[playerid][eskiRenk]);
						OyuncuPosDegistir(i, EskiVeriler[i][eskiPos][0], EskiVeriler[i][eskiPos][1], EskiVeriler[i][eskiPos][2]);
						SetPlayerFacingAngle(i, EskiVeriler[i][eskiPos][3]);
						SetPlayerVirtualWorld(i, EskiVeriler[i][eskiVW]);
						SetPlayerInterior(i, EskiVeriler[i][eskiInt]);
						SetCameraBehindPlayer(i);
				        DondurulmaEtkisi(i);
						CanDuzenle(i, EskiVeriler[i][eskiCan]);
						ZirhDuzenle(i, EskiVeriler[i][eskiZirh]);
						SilahAyarla(i);
						OyuncuBilgi[i][oEtkinlikDurum] = false;
				    }
					EtkinlikBilgi[etkCan] = 100.0;
					EtkinlikBilgi[etkZirh] = 0.0;
					EtkinlikBilgi[etkPos][0] = 0.0, EtkinlikBilgi[etkPos][1] = 0.0, EtkinlikBilgi[etkPos][2] = 0.0, EtkinlikBilgi[etkPos][3] = 0.0;
					EtkinlikBilgi[etkSilah][0] = 0;
					EtkinlikBilgi[etkSilah][1] = 0;
					EtkinlikBilgi[etkVirtualWorld] = 0;
					EtkinlikBilgi[etkInterior] = 0;
					EtkinlikBilgi[etkGiris] = false;
				}
	        }
	    }
	    else if(!strcmp(inputtext, "Sýfýrla", true)) {
	        if(EtkinlikBilgi[etkGiris] == true) return HataMesaji(playerid, "Etkinlik giriþleri açýkken etkinliði sýfýrlayamazsýn."), cmd_etkpanel(playerid, inputtext);
	        if(EtkinlikBilgi[etkDurum] == true) return HataMesaji(playerid, "Etkinlik baþlamýþken ayarlarý sýfýrlanamaz."), cmd_etkpanel(playerid, inputtext);
	        
			EtkinlikBilgi[etkCan] = 100.0;
			EtkinlikBilgi[etkZirh] = 0.0;
			EtkinlikBilgi[etkPos][0] = 0.0, EtkinlikBilgi[etkPos][1] = 0.0, EtkinlikBilgi[etkPos][2] = 0.0, EtkinlikBilgi[etkPos][3] = 0.0;
			EtkinlikBilgi[etkSilah][0] = 0;
			EtkinlikBilgi[etkSilah][1] = 0;
			EtkinlikBilgi[etkVirtualWorld] = 0;
			EtkinlikBilgi[etkInterior] = 0;
			EtkinlikBilgi[etkGiris] = false;
   			foreach(new i : Player) if(OyuncuBilgi[i][oEtkinlikDurum] == true) {
				SetPlayerColor(i, EskiVeriler[playerid][eskiRenk]);
				OyuncuPosDegistir(i, EskiVeriler[i][eskiPos][0], EskiVeriler[i][eskiPos][1], EskiVeriler[i][eskiPos][2]);
				SetPlayerFacingAngle(i, EskiVeriler[i][eskiPos][3]);
				SetPlayerVirtualWorld(i, EskiVeriler[i][eskiVW]);
				SetPlayerInterior(i, EskiVeriler[i][eskiInt]);
				SetCameraBehindPlayer(i);
    			DondurulmaEtkisi(i);
				CanDuzenle(i, EskiVeriler[i][eskiCan]);
				ZirhDuzenle(i, EskiVeriler[i][eskiZirh]);
				SilahAyarla(i);
				OyuncuBilgi[i][oEtkinlikDurum] = false;
				SunucuMesaji(i, "Etkinlik ayarlarý sýfýrlandýðý için etkinlikten çýkarýldýn.");
		    }
			SunucuMesaji(playerid, "Etkinlik ayarlarý sýfýrlandý.");
	    }
	}
	else if(dialogid == DIALOG_ETKINLIK_CAN) {
	    if(!response) return cmd_etkpanel(playerid, inputtext);
	    if(EtkinlikBilgi[etkGiris] == true) return HataMesaji(playerid, "Etkinlik giriþleri açýkken etkinliði baþlatamazsýn."), cmd_etkpanel(playerid, inputtext);
	    if(EtkinlikBilgi[etkDurum] == true) return HataMesaji(playerid, "Etkinlik baþlamýþken ayarlarý deðiþtirilemez."), cmd_etkpanel(playerid, inputtext);
	
	    new Float:etkDeger;
	    if(sscanf(inputtext, "f", etkDeger)) return DialogGoster(playerid, DIALOG_ETKINLIK_CAN, DIALOG_STYLE_INPUT, "vRP: Etkinlik Paneli", "{FFFFFF}Lütfen etkinliðe katýlacak oyuncularýn yeni can deðerini belirleyin:", "Tamam", "Geri");
	    if(etkDeger < 1 || etkDeger > 100) DialogGoster(playerid, DIALOG_ETKINLIK_CAN, DIALOG_STYLE_INPUT, "vRP: Etkinlik Paneli", "{B70000}HATA: {FFFFFF}Can deðeri en az 1(bir) en fazla 100(yüz) olabilir.\n\n{FFFFFF}Lütfen etkinliðe katýlacak oyuncularýn yeni can deðerini belirleyin:", "Tamam", "Geri");

		EtkinlikBilgi[etkCan] = etkDeger;
		SunucuMesaji(playerid, "Etkinlik can deðeri %.0f olarak güncellendi.", etkDeger);
		cmd_etkpanel(playerid, inputtext);
		return 1;
	}
	else if(dialogid == DIALOG_ETKINLIK_ZIRH) {
	    if(!response) return cmd_etkpanel(playerid, inputtext);
	    if(EtkinlikBilgi[etkGiris] == true) return HataMesaji(playerid, "Etkinlik giriþleri açýkken etkinliði baþlatamazsýn."), cmd_etkpanel(playerid, inputtext);
	    if(EtkinlikBilgi[etkDurum] == true) return HataMesaji(playerid, "Etkinlik baþlamýþken ayarlarý deðiþtirilemez."), cmd_etkpanel(playerid, inputtext);

	    new Float:etkDeger;
	    if(sscanf(inputtext, "f", etkDeger)) return DialogGoster(playerid, DIALOG_ETKINLIK_ZIRH, DIALOG_STYLE_INPUT, "vRP: Etkinlik Paneli", "{FFFFFF}Lütfen etkinliðe katýlacak oyuncularýn yeni zýrh deðerini belirleyin:", "Tamam", "Geri");
	    if(etkDeger < 0 || etkDeger > 100) DialogGoster(playerid, DIALOG_ETKINLIK_ZIRH, DIALOG_STYLE_INPUT, "vRP: Etkinlik Paneli", "{B70000}HATA: {FFFFFF}Zýrh deðeri en az 0(sýfýr) en fazla 100(yüz) olabilir.\n\n{FFFFFF}Lütfen etkinliðe katýlacak oyuncularýn yeni zýrh deðerini belirleyin:", "Tamam", "Geri");

		EtkinlikBilgi[etkZirh] = etkDeger;
		SunucuMesaji(playerid, "Etkinlik zýrh deðeri %.0f olarak güncellendi.", etkDeger);
		cmd_etkpanel(playerid, inputtext);
		return 1;
	}
	else if(dialogid == DIALOG_ETKINLIK_SILAH1) {
	    if(!response) return cmd_etkpanel(playerid, inputtext);
	    if(EtkinlikBilgi[etkGiris] == true) return HataMesaji(playerid, "Etkinlik giriþleri açýkken etkinliði baþlatamazsýn."), cmd_etkpanel(playerid, inputtext);
	    if(EtkinlikBilgi[etkDurum] == true) return HataMesaji(playerid, "Etkinlik baþlamýþken ayarlarý deðiþtirilemez."), cmd_etkpanel(playerid, inputtext);
	    
		new etkinlik_silah = 0;
		if(!strcmp(inputtext, "Yumruk", true)) etkinlik_silah = 0;
		else if(!strcmp(inputtext, "Beyzbol Sopasý", true)) etkinlik_silah = 3;
		else if(!strcmp(inputtext, "Deagle", true)) etkinlik_silah = 24;
		else if(!strcmp(inputtext, "Shotgun", true)) etkinlik_silah = 25;
		else if(!strcmp(inputtext, "MP5", true)) etkinlik_silah = 29;
		else if(!strcmp(inputtext, "AK-47", true)) etkinlik_silah = 30;
		else if(!strcmp(inputtext, "M4", true)) etkinlik_silah = 31;
		else if(!strcmp(inputtext, "Sniper Rifle", true)) etkinlik_silah = 34;
		if(etkinlik_silah == EtkinlikBilgi[etkSilah][0]) return HataMesaji(playerid, "Birincil silah zaten seçtiðiniz gibi, baþka bir silah seçin."), cmd_etkpanel(playerid, inputtext);
		if(etkinlik_silah != 0 && etkinlik_silah == EtkinlikBilgi[etkSilah][1]) return HataMesaji(playerid, "Seçilen silah ikincil silah ile ayný olamaz."), cmd_etkpanel(playerid, inputtext);
		
		EtkinlikBilgi[etkSilah][0] = etkinlik_silah;
		SunucuMesaji(playerid, "Etkinlik birincil silahý %s olarak güncellendi.", inputtext);
		cmd_etkpanel(playerid, inputtext);
		return 1;
	}
	else if(dialogid == DIALOG_ETKINLIK_SILAH2) {
	    if(!response) return cmd_etkpanel(playerid, inputtext);
	    if(EtkinlikBilgi[etkGiris] == true) return HataMesaji(playerid, "Etkinlik giriþleri açýkken etkinliði baþlatamazsýn."), cmd_etkpanel(playerid, inputtext);
	    if(EtkinlikBilgi[etkDurum] == true) return HataMesaji(playerid, "Etkinlik baþlamýþken ayarlarý deðiþtirilemez."), cmd_etkpanel(playerid, inputtext);

		new etkinlik_silah = 0;
		if(!strcmp(inputtext, "Yumruk", true)) etkinlik_silah = 0;
		else if(!strcmp(inputtext, "Beyzbol Sopasý", true)) etkinlik_silah = 3;
		else if(!strcmp(inputtext, "Deagle", true)) etkinlik_silah = 24;
		else if(!strcmp(inputtext, "Shotgun", true)) etkinlik_silah = 25;
		else if(!strcmp(inputtext, "MP5", true)) etkinlik_silah = 29;
		else if(!strcmp(inputtext, "AK-47", true)) etkinlik_silah = 30;
		else if(!strcmp(inputtext, "M4", true)) etkinlik_silah = 31;
		else if(!strcmp(inputtext, "Sniper Rifle", true)) etkinlik_silah = 34;
		if(etkinlik_silah == EtkinlikBilgi[etkSilah][1]) return HataMesaji(playerid, "Ýkincil silah zaten seçtiðiniz gibi, baþka bir silah seçin."), cmd_etkpanel(playerid, inputtext);
		if(etkinlik_silah != 0 && etkinlik_silah == EtkinlikBilgi[etkSilah][0]) return HataMesaji(playerid, "Seçilen silah birincil silah ile ayný olamaz."), cmd_etkpanel(playerid, inputtext);

		EtkinlikBilgi[etkSilah][1] = etkinlik_silah;
		SunucuMesaji(playerid, "Etkinlik ikincil silahý %s olarak güncellendi.", inputtext);
		cmd_etkpanel(playerid, inputtext);
		return 1;
	}
	else if(dialogid == DIALOG_DOVUSSTILI) {
	    if(!response) return false;
	    if(!strcmp(inputtext, "Elbow", true) && OyuncuBilgi[playerid][oVIP] == 0) return HataMesaji(playerid, "Bu seçenek sadece VIP'ler tarafýndan alýnabilir.");
		new ucret;
		switch(OyuncuBilgi[playerid][oVIP]) {
			case 1: ucret = 10000;
			case 2: ucret = 5000;
			case 3: ucret = 0;
			default: ucret = 20000;
		}
		if(!!strcmp(inputtext, "Sýfýrla", true) && OyuncuBilgi[playerid][oPara] < ucret && ucret > 0) return HataMesaji(playerid, "Yeterli paran yok.");
		
		if(!strcmp(inputtext, "Sýfýrla", true)) SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL), ucret = 0;
		else if(!strcmp(inputtext, "Box", true)) SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
		else if(!strcmp(inputtext, "Kungfu", true)) SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
		//else if(!strcmp(inputtext, "Kneehead", true)) SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
		else if(!strcmp(inputtext, "Grabkick", true)) SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
		//else if(!strcmp(inputtext, "Elbow", true)) SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
		
		OyuncuBilgi[playerid][oDovusStil] = GetPlayerFightingStyle(playerid);
		if(ucret > 0) ParaEkle(playerid, -ucret);
	}
	else if(dialogid == DIALOG_MOBILYALAR) {
	    if(!response) return cmd_ev(playerid, inputtext);
        new id = Oyuncu_Evde(playerid);
        
		if(!strcmp(inputtext, "Tüm Mobilyalarý Sil", true)) {
		    if(!Ev_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Bulunduðun ev senin deðil.");
			if(Mobilya_Sayi(id) == 0) return HataMesaji(playerid, "Evinizde mobilya bulunmuyor.");

			new sayi = Mobilyalari_Sifirla(id);
			SunucuMesaji(playerid, "Evinizdeki bütün mobilyalarý(%d) sildiniz.", sayi);
		}
		else if(!strcmp(inputtext, "Mobilya Ekle", true)) {
		    if(!Ev_SahipKontrol(playerid, id) && !Ev_AnahtarKontrol(playerid, id)) return HataMesaji(playerid, "Bu evin sahibi deðilsin ve anahtarýn yok.");
			switch(EvBilgi[id][evLevel]) {
				case 1: if(Mobilya_Sayi(id) >= 50) return HataMesaji(playerid, "Daha fazla mobilya ekleyebilmek için ev levelinizi yükseltmeniz gerekiyor.");
				case 2: if(Mobilya_Sayi(id) >= 100) return HataMesaji(playerid, "Daha fazla mobilya ekleyebilmek için ev levelinizi yükseltmeniz gerekiyor.");
				case 3: if(Mobilya_Sayi(id) >= 150) return HataMesaji(playerid, "Daha fazla mobilya ekleyebilmek için ev levelinizi yükseltmeniz gerekiyor.");
				case 4: if(Mobilya_Sayi(id) >= 200) return HataMesaji(playerid, "Daha fazla mobilya ekleyebilmek için ev levelinizi yükseltmeniz gerekiyor.");
				case 5: if(Mobilya_Sayi(id) >= 250) return HataMesaji(playerid, "Daha fazla mobilya ekleyebilmek için sýnýrsýz paket almalýsýnýz.");
				default: if(Mobilya_Sayi(id) >= 50) return HataMesaji(playerid, "Daha fazla mobilya ekleyebilmek için ev levelinizi yükseltmeniz gerekiyor.");
			}
			DialogGoster(playerid, DIALOG_MOBILYA_EKLE, DIALOG_STYLE_TABLIST, "vRP: Mobilya Ekle", "Sandalyeler\nKoltuklar\nYataklar\nBanyo Eþyalarý\nElektronik Eþyalarý\nMutfak Eþyalarý\nMasalar\nDiðer Eþyalar\nTüm Mobilyalar\n{B70000}Obje ID'si Kullanarak Ekle", "Seç", "<< Geri");
		}
		else if(!strcmp(inputtext, "Mobilya Düzenle", true)) return DialogGoster(playerid, DIALOG_MOBILYA_DSECIM, DIALOG_STYLE_TABLIST, "vRP: Mobilya Düzenleme", "Listeden Seç\nElle Seç", "Seç", "Kapat");
		else if(!strcmp(inputtext, "Mobilya Sil", true)) return DialogGoster(playerid, DIALOG_MOBILYA_KSECIM, DIALOG_STYLE_TABLIST, "vRP: Mobilya Kaldýrma", "Listeden Seç\nElle Seç", "Seç", "Kapat");
	}
	else if(dialogid == DIALOG_MOBILYA_KSECIM) {
	    if(!response) return 0;
        if(!Ev_SahipKontrol(playerid, Oyuncu_Evde(playerid)) && !Ev_AnahtarKontrol(playerid, Oyuncu_Evde(playerid))) return HataMesaji(playerid, "Bu evin sahibi deðilsin ve anahtarýn yok.");
	    if(!strcmp(inputtext, "Listeden Seç", true)) {
	        new id = Oyuncu_Evde(playerid);
			if(Mobilya_Sayi(id) == 0) return HataMesaji(playerid, "Evinde mobilya yok.");

			new icerik[144 * 75];
			format(icerik, sizeof(icerik), "ID\tObje ID\n");
			for(new i = 0; i != MAKSIMUM_MOBILYA; i ++) if(MobilyaBilgi[i][mobilyaEv] == EvBilgi[id][evID]) format(icerik, sizeof(icerik), "%s%d\t%d\n", icerik, i, MobilyaBilgi[i][mobilyaModel]);

			return DialogGoster(playerid, DIALOG_MOBILYA_KSECIM, DIALOG_STYLE_TABLIST_HEADERS, "Mobilya Listesi", icerik, "Kaldýr", "Kapat");
	    }
	    else if(!strcmp(inputtext, "Elle Seç", true)) {
		    OyuncuBilgi[playerid][oMobilyaSecim] = MOBILYA_SECIM_KALDIR;
		    SelectObject(playerid);
		    SunucuMesaji(playerid, "Silmek istediðiniz mobilyaya týklayýn.");
	    }
	    new mobilyaid = strval(inputtext);
		for(new i = 0; i != MAKSIMUM_MOBILYA; i ++) if(MobilyaBilgi[i][mobilyaYarat] == MobilyaBilgi[mobilyaid][mobilyaYarat]) {
			OyuncuBilgi[playerid][oDuzenlenenMobilya] = mobilyaid;
			new bilgi[256];
  			format(bilgi, sizeof(bilgi), "{FFFFFF}%d Obje ID'li mobilyaný silmek üzeresin, onaylýyor musun?\n{B70000}UYARI: {FFFFFF}Bu iþlemin geri dönüþü yoktur.", MobilyaBilgi[OyuncuBilgi[playerid][oDuzenlenenMobilya]][mobilyaModel]);
  			DialogGoster(playerid, DIALOG_MOBILYAKALDIR_ONAY, DIALOG_STYLE_MSGBOX, "vRP: Mobilya Kaldýr", bilgi, "Onayla", "Ýptal");
           	break;
		}
	}
	else if(dialogid == DIALOG_MOBILYA_DSECIM) {
	    if(!response) return 0;
	    if(!Ev_SahipKontrol(playerid, Oyuncu_Evde(playerid)) && !Ev_AnahtarKontrol(playerid, Oyuncu_Evde(playerid))) return HataMesaji(playerid, "Bu evin sahibi deðilsin ve anahtarýn yok.");
	    if(!strcmp(inputtext, "Listeden Seç", true)) {
	        new id = Oyuncu_Evde(playerid);
			if(Mobilya_Sayi(id) == 0) return HataMesaji(playerid, "Evinde mobilya yok.");
			
			new icerik[144 * 75];
			format(icerik, sizeof(icerik), "ID\tObje ID\n");
			for(new i = 0; i != MAKSIMUM_MOBILYA; i ++) if(MobilyaBilgi[i][mobilyaEv] == EvBilgi[id][evID]) format(icerik, sizeof(icerik), "%s%d\t%d\n", icerik, i, MobilyaBilgi[i][mobilyaModel]);

			return DialogGoster(playerid, DIALOG_MOBILYA_DSECIM, DIALOG_STYLE_TABLIST_HEADERS, "Mobilya Listesi", icerik, "Düzenle", "Kapat");
	    }
	    else if(!strcmp(inputtext, "Elle Seç", true)) {
		    OyuncuBilgi[playerid][oMobilyaSecim] = MOBILYA_SECIM_DUZENLE;
		    SelectObject(playerid);
		    return SunucuMesaji(playerid, "Düzenlemek istediðiniz mobilyaya týklayýn.");
	    }
	    
	    new mobilyaid = strval(inputtext);
     	EditlemeSifirla(playerid);
		OyuncuBilgi[playerid][oDuzenlenenMobilya] = mobilyaid;
		EditDynamicObject(playerid, MobilyaBilgi[mobilyaid][mobilyaYarat]);
		SunucuMesaji(playerid, "%d Obje ID'li mobilyaný düzenliyorsun.", MobilyaBilgi[mobilyaid][mobilyaModel]);
	}
	else if(dialogid == DIALOG_MOBILYA_EKLE) {
		if(!response) return DialogGoster(playerid, DIALOG_MOBILYALAR, DIALOG_STYLE_TABLIST, "Ev - Mobilyalar", "Mobilya Ekle\nMobilya Düzenle\nMobilya Sil\nTüm Mobilyalarý Sil", "Seç", "<< Geri");
        if(!Ev_SahipKontrol(playerid, Oyuncu_Evde(playerid)) && !Ev_AnahtarKontrol(playerid, Oyuncu_Evde(playerid))) return HataMesaji(playerid, "Bu evin sahibi deðilsin ve anahtarýn yok.");
		if(!strcmp(inputtext, "Obje ID'si Kullanarak Ekle", true)) return DialogGoster(playerid, DIALOG_MOBILYA_EKLE_ID, DIALOG_STYLE_INPUT, "vRP: Mobilya Ekle", "Lütfen evinize eklemek istediðiniz mobilyanýn obje ID'sini girin;", "Tamam", "<< Geri");
		else if(!strcmp(inputtext, "Sandalyeler", true)) {
		    new model[28];
	    	for(new x; x < sizeof(Sandalyeler); x++) model[x] = Sandalyeler[x][0];
			return ShowModelSelectionMenuEx(playerid, model, sizeof(model), "Sandalyeler", MODELLER_MOBILYA);
		}
		else if(!strcmp(inputtext, "Koltuklar", true)) {
		    new model[16];
	    	for(new x; x < sizeof(Koltuklar); x++) model[x] = Koltuklar[x][0];
			return ShowModelSelectionMenuEx(playerid, model, sizeof(model), "Koltuklar", MODELLER_MOBILYA);
		}
		else if(!strcmp(inputtext, "Yataklar", true)) {
		    new model[23];
	    	for(new x; x < sizeof(Yataklar); x++) model[x] = Yataklar[x][0];
			return ShowModelSelectionMenuEx(playerid, model, sizeof(model), "Yataklar", MODELLER_MOBILYA);
		}
		else if(!strcmp(inputtext, "Banyo Eþyalarý", true)) {
		    new model[19];
	    	for(new x; x < sizeof(BanyoEsyalari); x++) model[x] = BanyoEsyalari[x][0];
			return ShowModelSelectionMenuEx(playerid, model, sizeof(model), "Banyo Esyalari", MODELLER_MOBILYA);
		}
		else if(!strcmp(inputtext, "Elektronik Eþyalarý", true)) {
		    new model[47];
	    	for(new x; x < sizeof(ElektronikEsyalari); x++) model[x] = ElektronikEsyalari[x][0];
			return ShowModelSelectionMenuEx(playerid, model, sizeof(model), "Elektronik Esyalari", MODELLER_MOBILYA);
		}
		else if(!strcmp(inputtext, "Mutfak Eþyalarý", true)) {
		    new model[53];
	    	for(new x; x < sizeof(MutfakEsyalari); x++) model[x] = MutfakEsyalari[x][0];
			return ShowModelSelectionMenuEx(playerid, model, sizeof(model), "Mutfak Esyalari", MODELLER_MOBILYA);
		}
		else if(!strcmp(inputtext, "Masalar", true)) {
		    new model[34];
	    	for(new x; x < sizeof(Masalar); x++) model[x] = Masalar[x][0];
			return ShowModelSelectionMenuEx(playerid, model, sizeof(model), "Masalar", MODELLER_MOBILYA);
		}
		else if(!strcmp(inputtext, "Diðer Eþyalar", true)) {
		    new model[24];
	    	for(new x; x < sizeof(DigerMobilyalar); x++) model[x] = DigerMobilyalar[x][0];
			return ShowModelSelectionMenuEx(playerid, model, sizeof(model), "Diger Esyalar", MODELLER_MOBILYA);
  		}
		else if(!strcmp(inputtext, "Tüm Mobilyalar", true)) {
		    new model[sizeof(Mobilyalar)];
	    	for(new x; x < sizeof(Mobilyalar); x++) model[x] = Mobilyalar[x][0];
			return ShowModelSelectionMenuEx(playerid, model, sizeof(model), "Tum Mobilyalar", MODELLER_MOBILYA);
		}
	}
	else if(dialogid == DIALOG_MOBILYA_EKLE_ID) {
	    if(!response) return DialogGoster(playerid, DIALOG_MOBILYALAR, DIALOG_STYLE_TABLIST, "Ev - Mobilyalar", "Mobilya Ekle\nMobilya Düzenle\nMobilya Sil\nTüm Mobilyalarý Sil", "Seç", "<< Geri");

		new objeid;
		if(sscanf(inputtext, "d", objeid)) return DialogGoster(playerid, DIALOG_MOBILYA_EKLE_ID, DIALOG_STYLE_INPUT, "vRP: Mobilya Ekle", "Lütfen evinize eklemek istediðiniz mobilyanýn obje ID'sini girin;", "Tamam", "<< Geri");

		for(new i = 0; i != sizeof(Mobilyalar); i ++) if(Mobilyalar[i][0] == objeid) {
		    new onay[144];
		    OyuncuBilgi[playerid][oMobilyaOnay] = objeid;
		    format(onay, sizeof(onay), "Seçtiðiniz mobilyayý %s fiyatýna ekleyeceksiniz, onaylýyor musunuz?", NumaraFormati(Mobilyalar[i][1]));
            DialogGoster(playerid, DIALOG_MOBILYA_EKLE_ONAY, DIALOG_STYLE_MSGBOX, "vRP: Mobilya Ekle", onay, "Tamam", "<< Geri");
		    return 1;
		}
		SunucuMesaji(playerid, "Girdiðiniz obje mobilya listesinde bulunmuyor.");
	}
	else if(dialogid == DIALOG_MOBILYA_EKLE_ONAY) {
		if(!response) return DialogGoster(playerid, DIALOG_MOBILYA_EKLE, DIALOG_STYLE_TABLIST, "vRP: Mobilya Ekle", "Sandalyeler\nKoltuklar\nYataklar\nBanyo Eþyalarý\nElektronik Eþyalarý\nMutfak Eþyalarý\nMasalar\nDiðer Eþyalar\nTüm Mobilyalar\n{B70000}Obje ID'si Kullanarak Ekle", "Seç", "<< Geri");
		if(Oyuncu_Evde(playerid) == -1 || !Ev_SahipKontrol(playerid, Oyuncu_Evde(playerid)) && !Ev_AnahtarKontrol(playerid, Oyuncu_Evde(playerid))) return HataMesaji(playerid, "Bu ev senin deðil.");
		
		new id = -1;
		for(new i = 0; i != sizeof(Mobilyalar); i ++) if(Mobilyalar[i][0] == OyuncuBilgi[playerid][oMobilyaOnay]) {
			if(OyuncuBilgi[playerid][oPara] < Mobilyalar[i][1]) return HataMesaji(playerid, "Yeterli miktarda paran yok, bu mobilyayý ekleyemezsin.");

			id = Mobilya_Yarat(playerid, Mobilyalar[i][0]);
			if(id == -1) return HataMesaji(playerid, "Sunucu mobilya limitine ulaþtýðý için yeni mobilya yaratamazsýn.");

			EditDynamicObject(playerid, MobilyaBilgi[id][mobilyaYarat]);
			OyuncuBilgi[playerid][oDuzenlenenMobilya] = id;
			ParaEkle(playerid, -Mobilyalar[i][1]);
		    return 1;
		}
		SunucuMesaji(playerid, "Bir hata oluþtu.");
	}
	else if(dialogid == DIALOG_MOBILYAKALDIR_ONAY) {
		if(!response) return OyuncuBilgi[playerid][oDuzenlenenMobilya] = -1;

		new id = OyuncuBilgi[playerid][oDuzenlenenMobilya];
		if(id == -1) return HataMesaji(playerid, "Bir sorun oluþtu."), OyuncuBilgi[playerid][oDuzenlenenMobilya] = -1;

		Mobilya_Sil(id);
		SunucuMesaji(playerid, "Mobilya baþarýyla kaldýrýldý.");
		OyuncuBilgi[playerid][oDuzenlenenMobilya] = -1;
	}
	else if(dialogid == DIALOG_EVDOLAP) {
	    if(!response) return false;
	    
	    new id = EvDolap_Yakin(playerid);
	    if(id == -1) return HataMesaji(playerid, "Bir kýyafet dolabýna yakýn deðilsin.");
	    if(OyuncuBilgi[playerid][oGeciciKiyafet] != 0) return HataMesaji(playerid, "Üniformaný dolaba koyamazsýn.");
	    
		new kiyafet = DolapBilgi[id][dolapKiyafet][listitem];
		if(kiyafet == 0) {
		    if(OyuncuBilgi[playerid][oKiyafet] == 252 || OyuncuBilgi[playerid][oKiyafet] == 18 || OyuncuBilgi[playerid][oKiyafet] == 251 || OyuncuBilgi[playerid][oKiyafet] == 139) return HataMesaji(playerid, "Üzerinde kýyafet yok.");
            DolapBilgi[id][dolapKiyafet][listitem] = GetPlayerSkin(playerid);
			if(OyuncuBilgi[playerid][oCinsiyet] == 1) {
				switch(OyuncuBilgi[playerid][oTenRengi]) {
					case 1: OyuncuBilgi[playerid][oKiyafet] = 252, KiyafetDegistir(playerid, 252);
					case 2: OyuncuBilgi[playerid][oKiyafet] = 18, KiyafetDegistir(playerid, 18);
				}
			}
			else if(OyuncuBilgi[playerid][oCinsiyet] == 2) {
				switch(OyuncuBilgi[playerid][oTenRengi]) {
					case 1: OyuncuBilgi[playerid][oKiyafet] = 251, KiyafetDegistir(playerid, 251);
					case 2: OyuncuBilgi[playerid][oKiyafet] = 139, KiyafetDegistir(playerid, 139);
				}
			}
			Dolap_Kaydet(id);
		    SunucuMesaji(playerid, "Üzerindeki kýyafeti dolaba koydun.");
		}
		else if(kiyafet > 0) {
		    DolapBilgi[id][dolapKiyafet][listitem] = GetPlayerSkin(playerid);
		    if(OyuncuBilgi[playerid][oKiyafet] == 252 || OyuncuBilgi[playerid][oKiyafet] == 18 || OyuncuBilgi[playerid][oKiyafet] == 251 || OyuncuBilgi[playerid][oKiyafet] == 139) DolapBilgi[id][dolapKiyafet][listitem] = 0;
            OyuncuBilgi[playerid][oKiyafet] = kiyafet, KiyafetDegistir(playerid, kiyafet);
			Dolap_Kaydet(id);
		    cmd_ame(playerid, "kýyafetlerini deðiþtirir.");
		}
	}
	else if(dialogid == DIALOG_EV_KAPI) {
	    if(!response) return false;
	    new id = Ev_Yakin(playerid), id2;
			if(!strcmp(inputtext, "Zil Çal", true)) {
				foreach(new i : Player) {
				    id2 = Oyuncu_Evde(i);
				    if(id2 == id) {
				        SendClientMessageEx(i, RENK_DO, "* Zil çalýyor. (( Ev ))");
				    }
				}
				cmd_ame(playerid, "zile basar.");
			}
			else if(!strcmp(inputtext, "Kilit", true)) {
			    if(!Ev_SahipKontrol(playerid, id) && EvBilgi[id][evKiraci] != OyuncuBilgi[playerid][oID] && !Ev_AnahtarKontrol(playerid, id)) return HataMesaji(playerid, "Bu evin anahtarý sende yok.");

				switch(EvBilgi[id][evDurum]) {
					case 1: EvBilgi[id][evDurum] = 2, Ev_Yenile(id), cmd_ame(playerid, "evin kapýsýný kilitler.");
					case 2: {
						EvBilgi[id][evDurum] = 1, Ev_Yenile(id), cmd_ame(playerid, "evin kapýsýnýn kilidini açar.");
						foreach(new i : Player) if(MaymuncukVeri[i][mTur] == 2 && MaymuncukVeri[playerid][mHedef] == id) return SunucuMesaji(i, "Maymuncuk kýrýldý."), MaymuncukVeri[i][mSaniye] = 0, OyuncuBilgi[i][oMaymuncuk]--;
					}
					default: HataMesaji(playerid, "Bu evin kilit durumunu deðiþtiremezsin.");
				}
			}
			else if(!strcmp(inputtext, "Kira Durumu", true)) {
                if(!Ev_SahipKontrol(playerid, Ev_Yakin(playerid)))
                    return HataMesaji(playerid, "Bu seçeneði sadece ev sahibi kullanabilir.");

				switch(EvBilgi[id][evKiralik]) {
					case 0: SunucuMesaji(playerid, "Ev artýk kiralanabilir."), EvBilgi[id][evKiralik] = 1;
					case 1: SunucuMesaji(playerid, "Ev artýk kiralanamaz."), EvBilgi[id][evKiralik] = 0;
				}
				EvBilgi[id][evKiraciIsim][0] = 0;
				Ev_Yenile(id);
				return Ev_Kaydet(id);
			}
			else if(!strcmp(inputtext, "Kira Ücreti", true)) {
                if(!Ev_SahipKontrol(playerid, Ev_Yakin(playerid)))
                    return HataMesaji(playerid, "Bu seçeneði sadece ev sahibi kullanabilir.");

				if(EvBilgi[id][evKiralik] == 0) return HataMesaji(playerid, "Bu ev kiralýk deðil.");
				return DialogGoster(playerid, DIALOG_KIRA_UCRET, DIALOG_STYLE_INPUT, "Kira Ücretini Deðiþtir", "Lütfen yeni kira ücretini girin:", "Tamam", "Ýptal");
			}
			else if(!strcmp(inputtext, "Kiracý Çýkart", true)) {
				if(Ev_SahipKontrol(playerid, id)) {
				    if(EvBilgi[id][evKiraci] == 0) return HataMesaji(playerid, "Kiracýn yok.");

					EvBilgi[id][evKiraci] = 0;
					SunucuMesaji(playerid, "%s adlý kiracýný çýkarttýn.", EvBilgi[id][evKiraciIsim]);
				    EvBilgi[id][evKiraciIsim][0] = 0;
				    Ev_Kaydet(id);
				    return Ev_Yenile(id);
				}
				else return HataMesaji(playerid, "Bu evin sahibi deðilsin.");
			}
			else if(!strcmp(inputtext, "Evi Sat", true)) {
			    if(Ev_SahipKontrol(playerid, id)) {
			        new icerik[144];
			        if(EvBilgi[id][evSatilik] > 0) format(icerik, sizeof(icerik), "Satýlýk Durumunu Kaldýr\nSisteme Sat\n");
			        else if(EvBilgi[id][evSatilik] == 0) format(icerik, sizeof(icerik), "Satýlýða Çýkar\nSisteme Sat\n");

					return DialogGoster(playerid, DIALOG_EVKAPI_SAT, DIALOG_STYLE_LIST, "Evi Sat", icerik, "Seç", "Kapat");
			    }
				else return HataMesaji(playerid, "Bu evin sahibi deðilsin.");
			}
			else if(!strcmp(inputtext, "Kiracýlýktan Ayrýl", true)) {
				if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu seçeneði kullanamazsýn.");
				if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu seçeneði kullanamazsýn.");
				if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu seçeneði kullanamazsýn.");
				if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu seçeneði kullanamazsýn.");
				if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu seçeneði kullanamazsýn.");
				if(EvBilgi[id][evKiraci] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bu evin kiracýsý deðilsin.");

				DialogGoster(playerid, DIALOG_KIRACI_AYRIL, DIALOG_STYLE_MSGBOX, "Kira - Ayrýl", "Kiracýlýktan ayrýlmak istiyor musun?", "{B70000}Evet", "Hayýr");
			}
			else if(!strcmp(inputtext, "Evi Kirala", true)) {
				if(EvBilgi[id][evKiralik] == 0) return HataMesaji(playerid, "Bu ev kiralanamaz.");
				if(EvBilgi[id][evKiraci] != 0) return HataMesaji(playerid, "Bu ev kiralanmýþ.");
				if(OyuncuBilgi[playerid][oPara] < EvBilgi[id][evKiraUcret]) return HataMesaji(playerid, "Kira seçeneði karþýlayamýyorsun.");
				if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu seçeneði araçta kullanýlamaz.");
				if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu an bu seçeneði kullanamazsýn.");
				if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu seçeneði kullanamazsýn.");
				if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu seçeneði kullanamazsýn.");
				if(Ev_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Sahibi olduðun evi kiralayamazsýn.");

				EvBilgi[id][evKiraci] = OyuncuBilgi[playerid][oID];
				format(EvBilgi[id][evKiraciIsim], 32, "%s", OyuncuIsim(playerid));
				ParaEkle(playerid, -EvBilgi[id][evKiraUcret]);
				EvBilgi[id][evKasa] += EvBilgi[id][evKiraUcret];
				Ev_Kaydet(id);
				Ev_Yenile(id);
			}
			else if(!strcmp(inputtext, "Kapýyý Kýr", true)) {
		 	    if(EvBilgi[id][evDurum] == 1) return HataMesaji(playerid, "Bu evin kapýlarý zaten açýk.");
			    if(EvBilgi[id][evDurum] == 3) return HataMesaji(playerid, "Bakýmdaki evin kapýsý kýrýlamaz.");
			    if(EvBilgi[id][evDurum] == 4) return HataMesaji(playerid, "Mühürlü evin kapýsý kýrýlamaz.");

			    ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);
				cmd_ame(playerid, "gerilir ve evin kapýsýna tekme atar.");
			    SetTimerEx("KapiKir_Ev", 1500, false, "dd", playerid, id);
			}
			else if(!strcmp(inputtext, "Kapýyý Tamir Et", true)) {
		 	    if(EvBilgi[id][evDurum] != 5) return HataMesaji(playerid, "Kapý tamir edilebilir durumda deðil.");
				if(OyuncuBilgi[playerid][oPara] < 3000) return HataMesaji(playerid, "Yeterli paran yok.");

                ParaEkle(playerid, -3000);
				EvBilgi[id][evDurum] = 3;
				EvBilgi[id][evBakimSure] = 15;
				Ev_Yenile(id);
				Ev_Kaydet(id);
				SunucuMesaji(playerid, "Kapý tamir iþlemi baþladý, 15 dakika sonra tamir iþlemi tamamlanacak.");
			}
			else if(!strcmp(inputtext, "Level Yükselt", true)) {
                if(!Ev_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Bu evin sahibi deðilsin, bu iþlemi yapamazsýn.");
				if(EvBilgi[id][evLevel] > 4) return HataMesaji(playerid, "Bu ev zaten maksimum levele ulaþmýþ.");
				if(OyuncuBilgi[playerid][oPara] < EV_LEVEL_UCRET) return HataMesaji(playerid, "Level yükseltme ücretini karþýlayamýyorsun. (%s)", NumaraFormati(EV_LEVEL_UCRET));

				ParaEkle(playerid, -EV_LEVEL_UCRET);
				EvBilgi[id][evLevel]++;
				EvBilgi[id][evDurum] = 3;
				EvBilgi[id][evBakimSure] = 60;
				Ev_Yenile(id);
				Ev_Kaydet(id);
				SunucuMesaji(playerid, "Evin yükseltme iþlemi baþladý, 60 dakika sonra yükseltme iþlemi bitecektir.");
		  		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		 		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
				format(log_icerik, sizeof(log_icerik), "[%s] %d(%d) ev levelini yükseltti, yeni level: %d/SQL: %d", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], EvBilgi[id][evLevel], EvBilgi[id][evID]);
				Gunluk_LogKaydet(log_icerik);
				Log_Kaydet("loglar/ev.txt", "%s", log_icerik);
			}
			else if(!strcmp(inputtext, "Evi Mühürle", true)) {
				EvBilgi[id][evDurum] = 4;
				Ev_Yenile(id);
				Ev_Kaydet(id);
				cmd_ame(playerid, "evi mühürler.");
			}
	}
	else if(dialogid == DIALOG_EVKAPI_SAT) {
	    if(!response) return SunucuMesaji(playerid, "Ýþlem iptal edildi.");
	    new id = Ev_Yakin(playerid);
		if(!strcmp(inputtext, "Sisteme Sat", true)) {
			if(Ev_SahipKontrol(playerid, id)) {
				SetPVarInt(playerid, "Ev_SistemeSat", id);
				new icerik[144];
				format(icerik, sizeof(icerik), "Evini yarý fiyatýna(%s) sisteme geri satacaksýn, onaylýyor musun?");
				DialogGoster(playerid, DIALOG_EV_SISTEMESAT, DIALOG_STYLE_MSGBOX, "Evi Sisteme Sat", icerik, "Evet", "Hayýr");
			}
			else return HataMesaji(playerid, "Bu evin sahibi deðilsin.");
		}
		else if(!strcmp(inputtext, "Satýlýk Durumunu Kaldýr", true)) {
			if(id == -1 || EvBilgi[id][evKullanimda] == false) return HataMesaji(playerid, "Bir sorun oluþtu.");
			if(!Ev_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Sahibi olmadýðýn bir evde bu iþlemi yapamazsýn.");

			EvBilgi[id][evSatilik] = 0;
			Ev_Yenile(id);
			Ev_Kaydet(id);
			return SunucuMesaji(playerid, "%d ID'li evinin satýlýk durumunu iptal ettin.", id);
		}
		else if(!strcmp(inputtext, "Satýlýða Çýkar", true)) return SetPVarInt(playerid, "Ev_Satilik", id), DialogGoster(playerid, DIALOG_EV_SATILIGACIKAR, DIALOG_STYLE_INPUT, "Ev - Satýlýða Çýkar", "{FFFFFF}Lütfen evinizi satmak istediðiniz fiyatý girin;", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_EV_SATILIGACIKAR) {
	    if(!response) return SunucuMesaji(playerid, "Ýþlem iptal edildi.");

	    new fiyat;
	    if(sscanf(inputtext, "d", fiyat)) return DialogGoster(playerid, DIALOG_EV_SATILIGACIKAR, DIALOG_STYLE_INPUT, "Ev - Satýlýða Çýkar", "{FFFFFF}Lütfen evinizi satmak istediðiniz fiyatý girin;", "Tamam", "Kapat");
	    if(fiyat < 1 || fiyat > 5000000) return DialogGoster(playerid, DIALOG_EV_SATILIGACIKAR, DIALOG_STYLE_INPUT, "Ev - Satýlýða Çýkar", "{B70000}HATA: {FFFFFF}Fiyat en az $1, en fazla $5,000,000 olabilir.\n{FFFFFF}Lütfen evinizi satmak istediðiniz fiyatý girin;", "Tamam", "Kapat");

		new id = GetPVarInt(playerid, "Ev_Satilik");
		if(id == -1 || EvBilgi[id][evKullanimda] == false) return HataMesaji(playerid, "Bir sorun oluþtu.");
		if(!Ev_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Sahibi olmadýðýn bir evde bu iþlemi yapamazsýn.");

		EvBilgi[id][evSatilik] = fiyat;
		Ev_Yenile(id);
		Ev_Kaydet(id);
		SunucuMesaji(playerid, "%d ID'li evini {33aa33}%s {7a8a9a}fiyatýndan satýlýða çýkardýn.", id, NumaraFormati(fiyat));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) evini %s fiyatýndan satýlýða çýkardý. (SQLID: %d)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], NumaraFormati(fiyat), EvBilgi[id][evID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ev.txt", "%s", log_icerik);
	}
	else if(dialogid == DIALOG_EV_SISTEMESAT) {
	    if(!response) return SunucuMesaji(playerid, "Ýþlem iptal edildi.");

	    new id = GetPVarInt(playerid, "Ev_SistemeSat");
		if(Ev_SahipKontrol(playerid, id)) {
			ParaEkle(playerid, EvBilgi[id][evFiyat] / 2);
			SunucuMesaji(playerid, "Evini yarý fiyatýna sattýn. (%s)", NumaraFormati(EvBilgi[id][evFiyat] / 2));
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) evini %s fiyatýna sisteme sattý. (SQLID: %d)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], NumaraFormati(EvBilgi[id][evFiyat] / 2), EvBilgi[id][evID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/ev.txt", "%s", log_icerik);
			for(new r = 0; r != MAKSIMUM_RAF; r++) if(RafBilgi[r][rafKullanimda] && RafBilgi[r][rafEv] == EvBilgi[id][evID]) Raf_Sil(r);
			for(new u = 0; u != MAKSIMUM_UYUSTURUCU; u++) if(UyusturucuBilgi[u][uKullanimda] == true && UyusturucuBilgi[u][uEv] == EvBilgi[id][evID]) Uyusturucu_Sil(u);
			Mobilyalari_Sifirla(id);

			EvBilgi[id][evDurum] = 1;
			EvBilgi[id][evSahip] = 0;
			for(new e = 0; e != 5; e++) EvBilgi[id][evAnahtar][e] = 0;
			EvBilgi[id][evKiraci] = 0;
			EvBilgi[id][evKiraUcret] = 20;
			EvBilgi[id][evKiralik] = 0;
			EvBilgi[id][evKasa] = 0;
			EvBilgi[id][evLevel] = 1;
			EvBilgi[id][evVergi] = 0;
			Ev_Yenile(id);
			Ev_Kaydet(id);
		}
		else return HataMesaji(playerid, "Bu evin sahibi deðilsin.");
	}
	else if(dialogid == DIALOG_KIRA_UCRET) {
	    if(!response) return false;
		new ucret;
	    if(sscanf(inputtext, "d", ucret))
	        return DialogGoster(playerid, DIALOG_KIRA_UCRET, DIALOG_STYLE_INPUT, "Kira Ücretini Deðiþtir", "Lütfen yeni kira ücretini girin:", "Tamam", "Ýptal");

	    if(ucret < 20 || ucret > 500)
	        return DialogGoster(playerid, DIALOG_KIRA_UCRET, DIALOG_STYLE_INPUT, "Kira Ücretini Deðiþtir", "{B70000}HATA: {FFFFFF}Girilen kira ücreti geçersiz. (20-500)\nLütfen yeni kira ücretini girin:", "Tamam", "Ýptal");

		new evid = Ev_Yakin(playerid);
        if(!Ev_SahipKontrol(playerid, evid)) return HataMesaji(playerid, "Bu evin anahtarý sende yok.");
		EvBilgi[evid][evKiraUcret] = ucret;
		Ev_Yenile(evid);
		return Ev_Kaydet(evid);
	}
	else if(dialogid == DIALOG_LISANSMERKEZI) {
	    if(!response) return 0;
	    if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yetkili iþbaþýndayken lisans alamazsýn.");
	    
		/*if(!strcmp(inputtext, "Avukatlýk Lisansý", true)) {
		    if(OyuncuBilgi[playerid][oSeviye] < 10) return HataMesaji(playerid, "Bu lisansý alabilmek için en az 10 seviye olmalýsýn.");
		    if(OyuncuBilgi[playerid][oAvukatLisans] == 1) return HataMesaji(playerid, "Zaten bu lisansa sahipsin.");
		    if(OyuncuBilgi[playerid][oPara] < LISANS_UCRET_AVUKAT) return HataMesaji(playerid, "Bu lisans için yeterli paran yok. (%s)", NumaraFormati(LISANS_UCRET_AVUKAT));
			new sorgu[256], Cache:sorgu_cache, oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(sorgu, sizeof(sorgu), "SELECT `ID` FROM `sicilkaydi` WHERE `Oyuncu` = '%s'", oyuncu_isim);
			sorgu_cache = mysql_query(mysqlB, sorgu);
			if(cache_num_rows()) return cache_delete(sorgu_cache), HataMesaji(playerid, "Sicilinde suç olduðu için bu lisansý alamazsýn.");
			cache_delete(sorgu_cache);
			
			ParaEkle(playerid, -LISANS_UCRET_AVUKAT);
			OyuncuBilgi[playerid][oAvukatLisans] = 1;
			SunucuMesaji(playerid, "%s ödeyerek Avukatlýk Lisansý satýn aldýn.", NumaraFormati(LISANS_UCRET_AVUKAT));
			OyuncuKaydet(playerid);
		    return 1;
		}*/
		else if(!strcmp(inputtext, "Uber Lisansý", true)) {
			new icerik[1024], sayi = 0;
			format(icerik, sizeof(icerik), "Plaka\tModel\tLisans Ücreti\n");
			for(new i = 0; i != MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracKullanimda] && AracBilgi[i][aracSahip] == OyuncuBilgi[playerid][oID] && AracBilgi[i][uberLisans] == 0) {
				for(new c = 0; c != sizeof(UberAraclari); c++) if(AracBilgi[i][aracModel] == UberAraclari[c][0]) format(icerik, sizeof(icerik), "%s%s\t%s\t%s\n", icerik, AracBilgi[i][aracPlaka], AracModel(AracBilgi[i][aracModel]), NumaraFormati(UberAraclari[c][1])), sayi++;
			}
			if(!sayi) return HataMesaji(playerid, "Uber lisansý alabileceðin bir araca sahip deðilsin.");
			DialogGoster(playerid, DIALOG_UBERLISANS, DIALOG_STYLE_TABLIST_HEADERS, "Uber Lisansý", icerik, "Seç", "Kapat");
			return 1;
		}
		else if(!strcmp(inputtext, "Sürücü Lisansý", true)) {
		    if(OyuncuBilgi[playerid][oPara] < LISANS_UCRET_SURUCU) return HataMesaji(playerid, "Üzerinde %s olmadýðý için ehliyet alamýyorsunuz.", NumaraFormati(LISANS_UCRET_SURUCU));
		    if(OyuncuBilgi[playerid][oEhliyetTesti] == 1) return HataMesaji(playerid, "Sýnava giriþ hakkýnýz var! Dýþardaki araçlardan birisini çalýþtýrýp sürücü sýnavýna baþlayýn.");
		    if(OyuncuBilgi[playerid][oEhliyet] == true) return HataMesaji(playerid, "Zaten bir ehliyete sahipsiniz!");
		    
		    ParaEkle(playerid, -LISANS_UCRET_SURUCU);
		    SunucuMesaji(playerid, "%s ödeyerek ehliyet almaya hak kazandýn. Dýþarýdaki arabalara binip motoru çalýþtýrarak testi baþlatýn.", NumaraFormati(LISANS_UCRET_SURUCU));
		    OyuncuBilgi[playerid][oEhliyetTesti] = 1;
		    OyuncuKaydet(playerid);
			/* new soru = random(sizeof(EhliyetSorular)), soru_icerik[1024];
			OyuncuBilgi[playerid][oSorulanSoru] = 0;
			OyuncuBilgi[playerid][oDogruCevap] = 0;
			OyuncuBilgi[playerid][oYanlisCevap] = 0;
			OyuncuBilgi[playerid][oSoruListesi][OyuncuBilgi[playerid][oSorulanSoru]] = soru;
			SetPVarInt(playerid, "son_soru", soru);
			format(soru_icerik, sizeof(soru_icerik), "%s\n%s\n%s\n%s", EhliyetSorular[soru][sinav_Soru], EhliyetSorular[soru][ilk_Cevap], EhliyetSorular[soru][ikinci_Cevap], EhliyetSorular[soru][ucuncu_Cevap]);
			DialogGoster(playerid, DIALOG_EHLIYET_YAZILI, DIALOG_STYLE_TABLIST_HEADERS, "Yazýlý Sýnav", soru_icerik, "Seç", "Çýk");*/
			return 1;
		}
	}
	else if(dialogid == DIALOG_EHLIYET_YAZILI) {
	    if(!response) {
			OyuncuBilgi[playerid][oSorulanSoru] = -1;
			OyuncuBilgi[playerid][oDogruCevap] = 0;
			OyuncuBilgi[playerid][oYanlisCevap] = 0;
			for(new i = 0; i != 5; i ++) OyuncuBilgi[playerid][oSoruListesi][i] = -1;
			DeletePVar(playerid, "son_soru");
		    return 1;
	    }
	    
	    if(OyuncuBilgi[playerid][oSorulanSoru] < 5) {
		    new soru = GetPVarInt(playerid, "son_soru"), soru_icerik[1024];
			OyuncuBilgi[playerid][oSorulanSoru]++;
			if(EhliyetSorular[soru][dogru_Cevap] == listitem) OyuncuBilgi[playerid][oDogruCevap]++;
			else OyuncuBilgi[playerid][oYanlisCevap]++;
			soru = random(sizeof(EhliyetSorular));
			for(new i = 0; i != 5; i ++) if(OyuncuBilgi[playerid][oSoruListesi][i] == soru) { soru = random(sizeof(EhliyetSorular)); break; }
			OyuncuBilgi[playerid][oSoruListesi][OyuncuBilgi[playerid][oSorulanSoru]] = soru;
			SetPVarInt(playerid, "son_soru", soru);
			format(soru_icerik, sizeof(soru_icerik), "%s\n%s\n%s\n%s", EhliyetSorular[soru][sinav_Soru], EhliyetSorular[soru][ilk_Cevap], EhliyetSorular[soru][ikinci_Cevap], EhliyetSorular[soru][ucuncu_Cevap]);
			DialogGoster(playerid, DIALOG_EHLIYET_YAZILI, DIALOG_STYLE_TABLIST_HEADERS, "Yazýlý Sýnav", soru_icerik, "Seç", "Çýk");
		}
		else if(OyuncuBilgi[playerid][oSorulanSoru] >= 5) {
		    if(OyuncuBilgi[playerid][oDogruCevap] >= 4) SunucuMesaji(playerid, "Tebrikler sýnavý baþarýyla geçtiniz artýk direksiyon sýnavýna girebilirsiniz.");
			else if(OyuncuBilgi[playerid][oDogruCevap] < 4) SunucuMesaji(playerid, "Yazýlý sýnavý geçemediniz.");
			SunucuMesaji(playerid, "Sorulan Soru: %d - Doðru Cevap: %d - Yanlýþ Cevap: %d", OyuncuBilgi[playerid][oSorulanSoru], OyuncuBilgi[playerid][oDogruCevap], OyuncuBilgi[playerid][oYanlisCevap]);
			
			OyuncuBilgi[playerid][oSorulanSoru] = 0;
			OyuncuBilgi[playerid][oDogruCevap] = 0;
			OyuncuBilgi[playerid][oYanlisCevap] = 0;
			for(new i = 0; i != 5; i ++) OyuncuBilgi[playerid][oSoruListesi][i] = -1;
			DeletePVar(playerid, "son_soru");
		}
	    return 1;
	}
	else if(dialogid == DIALOG_UBERLISANS) {
	    if(!response) return 0;
	
		for(new i = 0; i != MAKSIMUM_ARAC; i ++) if(!strcmp(AracBilgi[i][aracPlaka], inputtext, true) && AracBilgi[i][aracSahip] == OyuncuBilgi[playerid][oID]) {
			for(new c = 0; c != sizeof(UberAraclari); c++) if(AracBilgi[i][aracModel] == UberAraclari[c][0]) {
				if(OyuncuBilgi[playerid][oPara] < UberAraclari[c][1]) return HataMesaji(playerid, "Bu lisansýn ücretini karþýlayamýyorsun.");
				
				ParaEkle(playerid, -UberAraclari[c][1]);
				AracBilgi[i][uberLisans] = 1;
				Arac_Kaydet(i);
				SunucuMesaji(playerid, "%s model aracýn için %s karþýlýðýnda uber lisansý satýn aldýn.", AracModel(AracBilgi[i][aracModel]), NumaraFormati(UberAraclari[c][1]));
				return 1;
			}
		}
		HataMesaji(playerid, "Bir sorun oluþtu.");
	}
	else if(dialogid == DIALOG_EHLIYET_AYRIL) {
	    if(response) EhliyetTestiiptal(playerid), UyariMesaji(playerid, "Sürücü testini iptal ettin.");
	    else if(!response) PutPlayerInVehicle(playerid, OyuncuBilgi[playerid][oSonBinilenArac], 0);
	}
	else if(dialogid == DIALOG_TEMIZLIK_AYRIL) {
	    if(response) {
			UyariMesaji(playerid, "Temizlik þöförü mesleðini iptal ettin.");
			ASpawn(OyuncuBilgi[playerid][oSonBinilenArac]);
			OyuncuBilgi[playerid][oTemizlikCP] = 0;
			DisablePlayerCheckpoint(playerid);
		}
	    else if(!response) PutPlayerInVehicle(playerid, OyuncuBilgi[playerid][oSonBinilenArac], 0);
	}
	else if(dialogid == DIALOG_OBJESIL_ONAY) {
		if(!response) return SetPVarInt(playerid, "SilmeOnay", -1);

		new id = GetPVarInt(playerid, "SilmeOnay");
		if((id < 0 || id >= MAKSIMUM_OBJE) || !ObjeBilgi[id][objeKullanimda]) return HataMesaji(playerid, "Geçersiz obje.");
		new sahip = ObjeBilgi[id][objeSahip];
		if(sahip != OyuncuBilgi[playerid][oID]) {
		    if(OyuncuBilgi[playerid][oAdmin] > 0) return Obje_Sil(id), SunucuMesaji(playerid, "Obje silindi, admin olduðun için iade almadýn. Genel Yönetici iletiþime geç.");
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir obje sildi. (SQLID: %d)", Tarih(), OyuncuBilgi[playerid][oAdmin], OyuncuBilgi[playerid][oID], ObjeBilgi[id][objeID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/admin_obje.txt", "%s", log_icerik);
		}
		Obje_Sil(id);
		SetPVarInt(playerid, "SilmeOnay", -1);
		if(sahip == OyuncuBilgi[playerid][oID]) {
			BakiyeEkle(playerid, OBJE_SIL_IADE);
			return SunucuMesaji(playerid, "Objen baþarýyla silindi ve %s market bakiyesi iade aldýn.", NumaraFormati(OBJE_SIL_IADE, ""));
		}
		SunucuMesaji(playerid, "Obje %d baþarýyla silindi.", id);
		if(sahip > 0) {
			foreach(new i : Player) if(OyuncuBilgi[i][oID] == sahip) return BakiyeEkle(i, OBJE_SIL_IADE);
			new sorgu[512];
	   		format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE ID = '%d'", sahip);
			mysql_tquery(mysqlB, sorgu, "Obje_HesapKontrol");
		}
	}
	else if(dialogid == DIALOG_TELEFONAC_ONAY) {
    if(!response) return 0;
    SunucuMesaji(playerid, "Telefonunuz açýldý.");
   	OyuncuBilgi[playerid][oTelefonAcik] = true;
	OyuncuBilgi[playerid][oTelefonDurum] = true;
	SelectTextDraw(playerid, 0xd9b429ff);
	cmd_ame(playerid, "telefonu açar.");
    for(new i = 0; i != 21; i++) PlayerTextDrawShow(playerid, OyuncuBilgi[playerid][oiphone][i]);
	}
	else if(dialogid == DIALOG_GATESIL_ONAY) {
		if(!response) SetPVarInt(playerid, "SilmeOnay", -1);

		new id = GetPVarInt(playerid, "SilmeOnay");
		if((id < 0 || id >= MAKSIMUM_GATE) || !GateBilgi[id][gateKullanimda]) return HataMesaji(playerid, "Geçersiz gate!");
		new sahip = GateBilgi[id][gateSahip];
		Gate_Sil(id);
		SetPVarInt(playerid, "SilmeOnay", -1);
		if(sahip == OyuncuBilgi[playerid][oID]) {
		    if(OyuncuBilgi[playerid][oAdmin] > 0) return SunucuMesaji(playerid, "Gate silindi, admin olduðun için iade almadýn. Management ile iletiþime geç.");
			BakiyeEkle(playerid, GATE_SIL_IADE);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), kendine ait bir gateyi sildi.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/gate.txt", "%s", log_icerik);
			return SunucuMesaji(playerid, "Sana ait gate baþarýyla silindi ve %s market bakiyesi iade aldýn.", NumaraFormati(GATE_SIL_IADE, ""));
		}
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir gate sildi. (SAHIP SQLID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], sahip);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/gate.txt", "%s", log_icerik);
		SunucuMesaji(playerid, "Gate %d baþarýyla silindi.", id);
		if(sahip > 0) {
			foreach(new i : Player) if(OyuncuBilgi[i][oID] == sahip) {
				BakiyeEkle(i, GATE_SIL_IADE);
				return SunucuMesaji(i, "Sana ait gate yetkili tarafýndan silindi ve %s market bakiyesi iade aldýn.", NumaraFormati(GATE_SIL_IADE, ""));
			}
			new sorgu[512];
	   		format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE ID = '%d'", sahip);
			mysql_tquery(mysqlB, sorgu, "Gate_HesapKontrol");
		}
	}
	else if(dialogid == DIALOG_GIYIM) {
		if(!response) return 0;

		if(!strcmp(inputtext, "Kýyafetler", true))
		{
			if(OyuncuBilgi[playerid][oCinsiyet] == 1) {
				switch(OyuncuBilgi[playerid][oTenRengi]) {
					case 1: {
						new kiyafetler[sizeof(ErkekBeyaz)];
						for(new c = 0; c != sizeof(ErkekBeyaz); c++) kiyafetler[c] = ErkekBeyaz[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), IsyeriBilgi[Oyuncu_Isyerinde(playerid)][isyeriAd], MODELLER_KIYAFET, 0.0, 0.0, 0.0);
					}
					case 2: {
						new kiyafetler[sizeof(ErkekSiyah)];
						for(new c = 0; c != sizeof(ErkekSiyah); c++) kiyafetler[c] = ErkekSiyah[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), IsyeriBilgi[Oyuncu_Isyerinde(playerid)][isyeriAd], MODELLER_KIYAFET, 0.0, 0.0, 0.0);
					}
				}
			}
			else if(OyuncuBilgi[playerid][oCinsiyet] == 2) {
				switch(OyuncuBilgi[playerid][oTenRengi]) {
					case 1: {
						new kiyafetler[sizeof(KadinBeyaz)];
						for(new c = 0; c != sizeof(KadinBeyaz); c++) kiyafetler[c] = KadinBeyaz[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), IsyeriBilgi[Oyuncu_Isyerinde(playerid)][isyeriAd], MODELLER_KIYAFET, 0.0, 0.0, 0.0);
					}
					case 2: {
						new kiyafetler[sizeof(KadinSiyah)];
						for(new c = 0; c != sizeof(KadinSiyah); c++) kiyafetler[c] = KadinSiyah[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), IsyeriBilgi[Oyuncu_Isyerinde(playerid)][isyeriAd], MODELLER_KIYAFET, 0.0, 0.0, 0.0);
					}
				}
			}
		}
		else if(!strcmp(inputtext, "Aksesuarlar", true)) {
			new aksesuar[sizeof(KiyafetciAksesuar)];
			for(new c = 0; c != sizeof(KiyafetciAksesuar); c++) aksesuar[c] = KiyafetciAksesuar[c][0];

			return ShowModelSelectionMenuEx(playerid, aksesuar, sizeof(aksesuar), IsyeriBilgi[Oyuncu_Isyerinde(playerid)][isyeriAd], MODELLER_AKSESUAR);
		}
		else if(!strcmp(inputtext, "Özel Kýyafetler", true)) {
		    new mysql_sorgu[144];
		    format(mysql_sorgu, sizeof(mysql_sorgu), "SELECT * FROM `ozelmodel` WHERE `hesapID` = '%d'", OyuncuBilgi[playerid][oHesap]);
			mysql_query(mysqlB, mysql_sorgu);
			new rows;
			cache_get_row_count(rows);
			if(!rows) return HataMesaji(playerid, "Hesabýnýza tanýmlý özel model bulunamadý.");
			new modeller[128];
			for(new i; i<rows; i++) modeller[i] = vericek_int(i, "modelID");
			ShowModelSelectionMenuEx(playerid, modeller, rows, IsyeriBilgi[Oyuncu_Isyerinde(playerid)][isyeriAd], MODELLER_GIRISKIYAFET);
		}
	}
	else if(dialogid == DIALOG_GIYIM_ONAY) {
		if(!response) return 0;

		if(OyuncuBilgi[playerid][oPara] < GetPVarInt(playerid, "KiyafetUcret")) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsun.");
		new id = Oyuncu_Isyerinde(playerid);
		if(id == -1) return HataMesaji(playerid, "Bir hata oluþtu.");

		if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
		IsyeriBilgi[id][isyeriKasa] += GetPVarInt(playerid, "KiyafetUcret");
		IsyeriBilgi[id][isyeriUrun]--;
		Isyeri_Kaydet(id);
		ParaEkle(playerid, -GetPVarInt(playerid, "KiyafetUcret"));
		OyuncuBilgi[playerid][oKiyafet] = GetPVarInt(playerid, "SectigiKiyafet");
		switch(OyuncuBilgi[playerid][oGeciciKiyafet]) {
			case 0: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oKiyafet]);
			default: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oGeciciKiyafet]);
		}
		SunucuMesaji(playerid, "Yeni kýyafetini %s fiyatýna satýn aldýn.", NumaraFormati(GetPVarInt(playerid, "KiyafetUcret")));
		DeletePVar(playerid, "SectigiKiyafet");
		DeletePVar(playerid, "KiyafetUcret");
	}
	else if(dialogid == DIALOG_RESTAURANT || dialogid == DIALOG_ELEKTRONIK || dialogid == DIALOG_MARKET || dialogid == DIALOG_SEXSHOP || dialogid == DIALOG_BAR) {
	    if(!response) return false;

        new id = Oyuncu_Isyerinde(playerid);
        if(id == -1) return HataMesaji(playerid, "Bir hata oluþtu.");
		if(IsyeriBilgi[Oyuncu_Isyerinde(playerid)][isyeriTur] == 6 && OyuncuBilgi[playerid][oOynamaSaati] < 12) return HataMesaji(playerid, "Sex Shoptan ürün almak için en az 12 oynama saatine ihtiyacýn var.");

		new bilgi_mesaj[256];
		format(IsyeriUrun[playerid], 128, "%s", inputtext);
		format(bilgi_mesaj, sizeof(bilgi_mesaj), "{FFFFFF}Merhaba,\n\n{FFFFFF}%s isimli iþyerinden {%06x}%s {FFFFFF}adlý ürünü almayý seçtiniz.\n{FFFFFF}Son bir adým kaldý, ödemeyi nasýl yapmak istiyorsunuz?", IsyeriBilgi[Oyuncu_Isyerinde(playerid)][isyeriAd], RENK_SERVER >>> 8, inputtext);
		DialogGoster(playerid, DIALOG_ODEMESEC, DIALOG_STYLE_MSGBOX, "Ýþyeri - Ödeme Seçimi", bilgi_mesaj, "Nakit", "Kart");
	}
	else if(dialogid == DIALOG_YEMSEC) {
	    if(!response) return SunucuMesaji(playerid, "Balýk tutmaktan vazgeçtin.");
	    if(OyuncuBilgi[playerid][oYemler][listitem] < 1) {
			HataMesaji(playerid, "Bu yemden üzerinde yok.");
			new yem_icerik[512];
			format(yem_icerik, sizeof(yem_icerik), "Yem\tTutma Oraný\tÜzerindeki Adet\nEkmek\t%s50\t%d adet\nBoru Kurdu\t%s55\t%d adet\nSahte Yem\t%s65\t%d adet\nTavuk Göðsü\t%s75\t%d adet\nKarides\t%s85\t%d adet", "%", OyuncuBilgi[playerid][oYemler][0], "%", OyuncuBilgi[playerid][oYemler][1], "%", OyuncuBilgi[playerid][oYemler][2], "%", OyuncuBilgi[playerid][oYemler][3], "%", OyuncuBilgi[playerid][oYemler][4]);
			DialogGoster(playerid, DIALOG_YEMSEC, DIALOG_STYLE_TABLIST_HEADERS, "Yem Seçimi", yem_icerik, "Seç", "Kapat");
			return 1;
		}
		SetPVarInt(playerid, "Balik_Yem", listitem);
		new sure = 20;
		if(OyuncuBilgi[playerid][oBalikYetenek] >= 0 && OyuncuBilgi[playerid][oBalikYetenek] < 100) sure = 35;
		else if(OyuncuBilgi[playerid][oBalikYetenek] >= 100 && OyuncuBilgi[playerid][oBalikYetenek] < 200) sure = 30;
		else if(OyuncuBilgi[playerid][oBalikYetenek] >= 200 && OyuncuBilgi[playerid][oBalikYetenek] < 400) sure = 25;
		else if(OyuncuBilgi[playerid][oBalikYetenek] >= 400) sure = 15;
		else sure = 35;

		OyuncuBilgi[playerid][oBalikTutuyor] = sure;
		cmd_ame(playerid, "oltasýný denize doðru sallar.");
		TogglePlayerControllable(playerid, false);
		OyuncuBilgi[playerid][oKontrol] = false;
	}
	else if(dialogid == DIALOG_YEMAL) {
	    if(!response) return false;
	    
		new bilgi_mesaj[256];
		format(IsyeriUrun[playerid], 128, "%s", inputtext);
		format(bilgi_mesaj, sizeof(bilgi_mesaj), "{FFFFFF}Balýkçý dükkanýndan {%06x}%s {FFFFFF}adlý ürünü almayý seçtiniz, ödemesini nasýl yapmak istersiniz?", RENK_SERVER >>> 8, inputtext);
		DialogGoster(playerid, DIALOG_ODEMESEC, DIALOG_STYLE_MSGBOX, "Ýþyeri - Ödeme Seçimi", bilgi_mesaj, "Nakit", "Banka Kartý");
	}
	else if(dialogid == DIALOG_YAT_KIRALA)
	{
	    if(!response) return false;
	    
		if(YatBilgi[yatKiralayan] != -1) return HataMesaji(playerid, "Yat kiralanmýþ, daha sonra tekrar deneyin.");
	    if(OyuncuBilgi[playerid][oPara] < YAT_UCRET) return HataMesaji(playerid, "Yatý kiralamak için gereken ücreti karþýlayamýyorsun.");
	    
	    YatBilgi[yatKiralayan] = OyuncuBilgi[playerid][oID];
	    YatBilgi[yatKiraSure] = 3600;
	    SunucuMesaji(playerid, "Yatý baþarýyla kiraladýnýz, iyi eðlenceler.");
	}
	else if(dialogid == DIALOG_YAT) {
	    if(!response) return false;
	
		if(YatBilgi[yatKiralayan] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bir sorun oluþtu.");
		
	    if(!strcmp(inputtext, "Kontrol Et", true) || !strcmp(inputtext, "Kontrolü Býrak", true))
     	{
			if(YatBilgi[yatOto] == 1) return HataMesaji(playerid, "Otomatik pilot açýkken bu özelliði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oYatKontrol][0] == 0)
			{
				TogglePlayerSpectating(playerid, true);
				AttachCameraToObject(playerid, YatBilgi[yatSurObject]);
				OyuncuBilgi[playerid][oYatKontrol][0] = 1;
				OyuncuBilgi[playerid][oYatKontrol][1] = 0;
				OyuncuBilgi[playerid][oYatKontrol][2] = 0;
				OyuncuBilgi[playerid][oYatKontrol][3] = 0;
				OyuncuBilgi[playerid][oYatKontrol][4] = 0;
			}
			else
			{
				new Float:yatX, Float:yatY, Float:yatZ;
				OyuncuBilgi[playerid][oYatKontrol][0] = 0;
				TogglePlayerSpectating(playerid, false);
				GetObjectPos(YatBilgi[yatObject], yatX, yatY, yatZ);
				OyuncuPosDegistir(playerid, yatX, yatY, yatZ+3);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SilahAyarla(playerid);
			}
			return 1;
		}
	    else if(!strcmp(inputtext, "Müzik Ayarla", true)) return DialogGoster(playerid, DIALOG_YAT_MUZIK, DIALOG_STYLE_INPUT, "Yat: Müzik Ayarla", "Lütfen açmak istediðiniz müziðin linkini girin:\n\nDurdurmak için kutucuða \"Durdur\" yazmanýz yeterlidir.", "Aç", "Kapat");
	    else if(!strcmp(inputtext, "Otomatik Pilot", true))
     	{
			if(OyuncuBilgi[playerid][oYatKontrol][0] == 1) return HataMesaji(playerid, "Yatý kontrol ederken bunu yapamazsýnýz!");
			if(YatBilgi[yatOto] == 0)
			{
				YatBilgi[yatOto] = 1;
				MoveObject(YatBilgi[yatObject], YatRota[YatBilgi[yatStep]][0], YatRota[YatBilgi[yatStep]][1], YatRota[YatBilgi[yatStep]][2], 5, YatRota[YatBilgi[yatStep]][3], YatRota[YatBilgi[yatStep]][4], YatRota[YatBilgi[yatStep]][5]);
			}
			else
			{
				StopObject(YatBilgi[yatObject]);
				YatBilgi[yatOto] = 0;
			}
			return 1;
 		}
		else if(!strcmp(inputtext, "Kira Süresini Uzat", true))  {
		    if(yat_kiralama == false) return HataMesaji(playerid, "Yat þu anda kiralýk deðildir, management ile iletiþime geçebilirsiniz.");
		    
		    new bilgi_mesaji[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			for(new i = 0, len = strlen(oyuncu_isim); i < len; i ++) if(oyuncu_isim[i] == '_') oyuncu_isim[i] = ' ';
		    format(bilgi_mesaji, sizeof(bilgi_mesaji), "{FFFFFF}Merhaba {b70000}%s,\n\n{2ECC71}%s {FFFFFF}ödeyerek kira süresini 1 saat daha uzatacaksýnýz, onaylýyor musunuz?", oyuncu_isim, NumaraFormati(YAT_UCRET));
			return DialogGoster(playerid, DIALOG_YAT_KIRAUZAT, DIALOG_STYLE_MSGBOX, "Yat: Kira Süresi Uzat", bilgi_mesaji, "Evet", "Hayýr");
		}
	}
	else if(dialogid == DIALOG_YAT_MUZIK) {
	    if(!response) return false;
	
	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_YAT_MUZIK, DIALOG_STYLE_INPUT, "Yat: Müzik Ayarla", "Lütfen açmak istediðiniz müziðin linkini girin:\n\nDurdurmak için kutucuða \"Durdur\" yazmanýz yeterlidir.", "Aç", "Kapat");
	    if(!strcmp(inputtext, "Durdur", true)) {
			new Float:yatX, Float:yatY, Float:yatZ;
		    GetObjectPos(YatBilgi[yatObject], yatX, yatY, yatZ);
		    foreach(new i: Player) if(IsPlayerInRangeOfPoint(i, 20.0, yatX, yatY, yatZ))
		    {
		        StopAudioStreamForPlayer(i);
		    }
		    return 1;
	    }
	    new Float:yatX, Float:yatY, Float:yatZ;
	    GetObjectPos(YatBilgi[yatObject], yatX, yatY, yatZ);
	    foreach(new i: Player) if(IsPlayerInRangeOfPoint(i, 20.0, yatX, yatY, yatZ))
	    {
	        StopAudioStreamForPlayer(i);
	        PlayAudioStreamForPlayer(i, inputtext);
	    }
	}
	else if(dialogid == DIALOG_YAT_KIRAUZAT) {
	    if(!response) return false;
	    if(yat_kiralama == false) return HataMesaji(playerid, "Yat þu anda kiralýk deðildir, management ile iletiþime geçebilirsiniz.");
	    if(OyuncuBilgi[playerid][oPara] < YAT_UCRET) return HataMesaji(playerid, "Kira süresini uzatmak için yeterli miktar üzerinde bulunmuyor.");
	    YatBilgi[yatKiraSure] += 3600;
	    YatBilgi[yatUyari] = 0;
	    YatBilgi[yatTeslimSure] = 0;
	    ParaEkle(playerid, -YAT_UCRET);
	    SunucuMesaji(playerid, "Kira süresi 1 saat uzatýldý.");
	}
    else if(dialogid == DIALOG_PETLERIM)
	{
	    if(!response) return false;

		new id = strval(inputtext);
		if(Iter_Contains(Petler, id))
		{
			if(PetBilgi[id][petDurum] == false)
			{
  				if(PetBilgi[id][petYarali] == 1) return DialogGoster(playerid, DIALOG_PET_IYILESTIR, DIALOG_STYLE_MSGBOX, "Petiniz yaralanmýþ!", "Merhabalar, petiniz yaralý durumda.\n\nAktif hale getirmek için onu iyileþtirmeniz gerekiyor, $5,000 karþýlýðýnda petinizi iyileþtirmek ister misiniz?", "Evet", "Hayýr");
				new pet_adi[16];
				format(pet_adi, sizeof(pet_adi), "pet_%d", id);
				new npc = FCNPC_Create(pet_adi);
				if(npc == INVALID_PLAYER_ID) return HataMesaji(playerid, "Pet oluþturulurken hata oluþtu, lütfen yetkili kiþilerle iletiþime geçin.");
				new int = GetPlayerInterior(playerid), vw = GetPlayerVirtualWorld(playerid), Float:pos[3];
				GetPlayerPos(playerid,pos[0], pos[1], pos[2]);
				FCNPC_Spawn(npc, PetTurSkin(PetBilgi[id][petTuru]), pos[0], pos[1], pos[2]);
				FCNPC_SetPosition(npc, pos[0] + 1, pos[1] + 1, pos[2]);
				FCNPC_SetInterior(npc, int);
				FCNPC_SetVirtualWorld(npc, vw);
				FCNPC_SetHealth(npc, PetBilgi[id][petSaglik]);
				FCNPC_SetInvulnerable(npc, true);
				PetBilgi[id][petTakip] = -1;
				PetBilgi[id][petDurum] = true;
				PetBilgi[id][NPCID] = npc;
				PetBilgi[id][petSaldir] = -1;
		        new pet_renkkodu[32], renk, pet_label[144];
				switch(PetBilgi[id][petRenk])
				{
					case 1: pet_renkkodu = "FFFFFF";
					case 2: pet_renkkodu = "0295f7";
					case 3: pet_renkkodu = "f70202";
					case 4: pet_renkkodu = "f77002";
					case 5: pet_renkkodu = "ffff00";
					case 6: pet_renkkodu = "ee00ff";
					case 7: pet_renkkodu = "2aff00";
				}
				if(FCNPC_GetHealth(PetBilgi[id][NPCID]) >= 75) renk = 0x33AA33FF;
				else if(FCNPC_GetHealth(PetBilgi[id][NPCID]) >= 50 && FCNPC_GetHealth(PetBilgi[id][NPCID]) < 75) renk = 0xFFF700FF;
				else if(FCNPC_GetHealth(PetBilgi[id][NPCID]) >= 25 && FCNPC_GetHealth(PetBilgi[id][NPCID]) < 50) renk = 0xFF8000FF;
				else if(FCNPC_GetHealth(PetBilgi[id][NPCID]) <= 25) renk = 0xE70E0EFF;
		        format(pet_label, sizeof(pet_label), "{%s}%s (#%d)\n{%06x}%s%.0f", pet_renkkodu, PetBilgi[id][petAdi], id, renk >>> 8, "%", FCNPC_GetHealth(PetBilgi[id][NPCID]));
				if(IsValidDynamic3DTextLabel(PetBilgi[id][petText])) DestroyDynamic3DTextLabel(PetBilgi[id][petText]), PetBilgi[id][petText] = Text3D:INVALID_3DTEXT_ID;
				PetBilgi[id][petText] = CreateDynamic3DTextLabel(pet_label, 0xFFFFFFFF, 0.0, 0.0, -0.8, ISIM_MESAFESI, .attachedplayer = npc, .testlos = 1);
			}
			else
			{
				if(PetKontrol[playerid] == id) return HataMesaji(playerid, "Petinizi kontrol ettiðiniz için bunu yapamazsýnýz. (/pet)");
				PetBilgi[id][petSaglik] = FCNPC_GetHealth(PetBilgi[id][NPCID]);
				FCNPC_Destroy(PetBilgi[id][NPCID]);
				PetBilgi[id][petTakip] = -1;
				PetBilgi[id][NPCID] = -1;
				PetBilgi[id][petDurum] = false;
				if(IsValidDynamic3DTextLabel(PetBilgi[id][petText])) DestroyDynamic3DTextLabel(PetBilgi[id][petText]), PetBilgi[id][petText] = Text3D:INVALID_3DTEXT_ID;
			}
		}
	    return 1;
	}
	else if(dialogid == DIALOG_PET)
	{
	    if(!response) return false;
	    new id = GetPVarInt(playerid, "PetID");
		if(id == -1) return HataMesaji(playerid, "Bir sorun oluþtu.");
		
		if(!strcmp(inputtext, "Pet Adý", true)) return DialogGoster(playerid, DIALOG_PET_ISIMDEGISTIR, DIALOG_STYLE_INPUT, "{FFFFFF}cPet - Ýsim Deðiþtir", "{FFFFFF}Petiniz için yeni belirlediðiniz ismi aþaðýdaki kutucuða yazýn.\n\nUnutmayýn ki en fazla 24 harf kullanabilirsiniz.", "Deðiþtir", "Geri");
	    else if(!strcmp(inputtext, "Pet Ýsim Rengi", true)) return DialogGoster(playerid, DIALOG_PET_RENKSEC, DIALOG_STYLE_LIST, "{FFFFFF}cPet - Ýsim Rengi Seçimi", "{FFFFFF}Beyaz\n{0295f7}Mavi\n{f70202}Kýrmýzý\n{f77002}Turuncu\n{ffff00}Sarý\n{ee00ff}Mor\n{2aff00}Yeþil", "Seç", "Geri");
	    else if(!strcmp(inputtext, "Pet Türü", true)) return DialogGoster(playerid, DIALOG_PET_TURBAKIYEONAY, DIALOG_STYLE_MSGBOX, "{FFFFFF}cPet - Pet Tür Seçimi", "{FFFFFF}Merhabalar,\n\nTür deðiþtirme iþlemi ücret karþýlýðýnda yapýlabilmektedir, iþleminiz baþarýlý olduðunda hesabýnýzdan {33aa33}5TL{FFFFFF}tutarýnda bakiye kesilecektir.\n\nÝþlemi onaylýyor musunuz?", "Evet", "Hayýr");
		else if(!strcmp(inputtext, "Pet Cinsiyeti", true))
		{
			if(PetBilgi[id][petCinsiyet] == 1) PetBilgi[id][petCinsiyet] = 2;
			else PetBilgi[id][petCinsiyet] = 1;
			Pet_Kaydet(id);
			PetDialog(playerid, id);
			return 1;
		}
		else if(!strcmp(inputtext, "Pet Moduna Geç", true))
		{
			if(PetBilgi[id][petAclik] <= 5) return HataMesaji(playerid, "Petiniz aç olduðu için bu iþlemi gerçekleþtiremezsiniz.");
			PetKontrol[playerid] = id;
			SilahKaydet(playerid);
			EskiVeriler[playerid][eskiVW] = GetPlayerVirtualWorld(playerid);
			EskiVeriler[playerid][eskiInt] = GetPlayerInterior(playerid);
			GetPlayerPos(playerid, EskiVeriler[playerid][eskiPos][0], EskiVeriler[playerid][eskiPos][1], EskiVeriler[playerid][eskiPos][2]);
			GetPlayerFacingAngle(playerid, EskiVeriler[playerid][eskiPos][3]);
			GetPlayerHealth(playerid, EskiVeriler[playerid][eskiCan]);
			GetPlayerArmour(playerid, EskiVeriler[playerid][eskiZirh]);
			KiyafetDegistir(playerid, PetTurSkin(PetBilgi[id][petTuru]));
			CanDuzenle(playerid, FCNPC_GetHealth(PetBilgi[id][NPCID]));
			ZirhDuzenle(playerid, 0);
			ResetPlayerWeapons(playerid);
			FCNPC_SetVirtualWorld(PetBilgi[id][NPCID], 10);
			PetBilgi[id][petTakip] = -1;
			PetBilgi[id][petSaldir] = -1;
			SunucuMesaji(playerid, "Petinizi kontrol ediyorsunuz, çýkmak için (/pet) yazabilirsiniz.");
			return 1;
		}
		else if(!strcmp(inputtext, "Pet Takip Modu", true))
		{
			if(PetBilgi[id][petTakip] == -1)
			{
				if(PetBilgi[id][petAclik] <= 5) return HataMesaji(playerid, "Petiniz aç, sizi takip edecek gücü yok.");
				FCNPC_ClearAnimations(PetBilgi[id][NPCID]);
				PetBilgi[id][petTakip] = playerid;
				PetBilgi[id][petSaldir] = -1;
				FCNPC_StopAttack(PetBilgi[id][NPCID]);
				SunucuMesaji(playerid, "Petiniz artýk sizi takip ediyor.");
			}
			else
			{
				PetBilgi[id][petTakip] = -1;
				PetBilgi[id][petSaldir] = -1;
				SunucuMesaji(playerid, "Petiniz artýk sizi takip etmiyor.");
			}
			return 1;
		}
		else if(!strcmp(inputtext, "Peti Besle", true))
		{
			if(PetBilgi[id][petAclik] > 50) return HataMesaji(playerid, "Petiniz aç deðil.");
			if(OyuncuBilgi[playerid][oPara] < 250) return HataMesaji(playerid, "Gerekli besleme ücretini karþýlayamýyorsun.");
			ParaEkle(playerid, -250);
			PetBilgi[id][petAclik] = 100;
			Pet_Kaydet(id);
			SunucuMesaji(playerid, "Petinizi beslediniz.");
			return 1;
		}
		else if(!strcmp(inputtext, "Peti Ýyileþtir", true))
		{
			if(FCNPC_GetHealth(PetBilgi[id][NPCID]) >= 95) return HataMesaji(playerid, "Petinizin iyileþmeye ihtiyacý yok.");
			if(OyuncuBilgi[playerid][oPara] < floatround(100-FCNPC_GetHealth(PetBilgi[id][NPCID])) * 6) return HataMesaji(playerid, "Yeterli paranýz yok.");
			ParaEkle(playerid, -floatround(100-FCNPC_GetHealth(PetBilgi[id][NPCID])) * 6);
			FCNPC_SetHealth(PetBilgi[id][NPCID], 100.0);
			PetBilgi[id][petSaglik] = 100.0;
			Pet_Kaydet(id);
			SunucuMesaji(playerid, "Petinizi iyileþtirdiniz.");
			return 1;
		}
		else return PetDialog(playerid, id);
	}
	else if(dialogid == DIALOG_PET_TURBAKIYEONAY) {
	    if(!response) return cmd_pet(playerid);
	    if(BakiyeKontrol(playerid) < 5) return HataMesaji(playerid, "Tür deðiþtirme için yeterli bakiyen yok. (5TL)");
	    
	    DialogGoster(playerid, DIALOG_PET_TURSEC, DIALOG_STYLE_LIST, "{FFFFFF}cPet - Pet Tür Seçimi", "{FFFFFF}Black Pitbull\n{FFFFFF}Boxer Dog\n{FFFFFF}Brown Pitbull\n{FFFFFF}Bull Terrier\n{FFFFFF}Dalmation\n{FFFFFF}Doberman\n{FFFFFF}European Shepherd\n{FFFFFF}German Shorthair\n{FFFFFF}Gray Pitbull\n{FFFFFF}Siberian Husky\n{FFFFFF}White Pitbull", "Seç", "Geri");
	}
	else if(dialogid == DIALOG_PET_ISIMDEGISTIR)
	{
	    if(!response) return cmd_pet(playerid);
	    if(response)
	    {
	        if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_PET_ISIMDEGISTIR, DIALOG_STYLE_INPUT, "{FFFFFF}cPet - Ýsim Deðiþtir", "{FFFFFF}Petiniz için yeni belirlediðiniz ismi aþaðýdaki kutucuða yazýn.\n\nUnutmayýn ki en fazla 24 harf kullanabilirsiniz.", "Deðiþtir", "Geri");
	        if(strlen(inputtext) > 24) return DialogGoster(playerid, DIALOG_PET_ISIMDEGISTIR, DIALOG_STYLE_INPUT, "{FFFFFF}cPet - Ýsim Deðiþtir", "{FFFFFF}Petiniz için yeni belirlediðiniz ismi aþaðýdaki kutucuða yazýn.\n\nUnutmayýn ki en fazla 24 harf kullanabilirsiniz.", "Deðiþtir", "Geri");
	        new id = GetPVarInt(playerid, "PetID");
	        format(PetBilgi[id][petAdi], 24, inputtext);
	        Pet_Kaydet(id);
	        PetDialog(playerid, id);
	    }
	    return 1;
	}
	else if(dialogid == DIALOG_PET_RENKSEC)
	{
	    if(!response) return PetDialog(playerid, GetPVarInt(playerid, "PetID"));
	    if(response)
	    {
	        PetBilgi[GetPVarInt(playerid, "PetID")][petRenk] = listitem+1;
	        Pet_Kaydet(GetPVarInt(playerid, "PetID"));
	        PetDialog(playerid, GetPVarInt(playerid, "PetID"));
	    }
	    return 1;
	}
	else if(dialogid == DIALOG_PET_TURSEC)
	{
	    if(!response) return PetDialog(playerid, GetPVarInt(playerid, "PetID"));
	    if(response)
	    {
	        if(BakiyeKontrol(playerid) < 5) return HataMesaji(playerid, "Tür deðiþtirme için yeterli bakiyen yok. (5TL)");
	        PetBilgi[GetPVarInt(playerid, "PetID")][petTuru] = listitem+1;
	        BakiyeKes(playerid, 5);
	        FCNPC_SetSkin(PetBilgi[GetPVarInt(playerid, "PetID")][NPCID], PetTurSkin(listitem+1));
	        Pet_Kaydet(GetPVarInt(playerid, "PetID"));
	        PetDialog(playerid, GetPVarInt(playerid, "PetID"));
	    }
	    return 1;
	}
	else if(dialogid == DIALOG_PET_IYILESTIR)
	{
	    if(response)
	    {
	        new id = GetPVarInt(playerid, "PetID");
	        if(OyuncuBilgi[playerid][oPara] < 5000) return HataMesaji(playerid, "Pet iyileþtirme için üzerinde yeterli miktarda para yok.");
	        
	        ParaEkle(playerid, -5000);
	        PetBilgi[id][petYarali] = 0;
	        Pet_Kaydet(id);
	        SunucuMesaji(playerid, "Petiniz iyileþtirildi, artýk onu aktif duruma getirebilirsiniz. (/petlerim)");
	    }
	}
	else if(dialogid == DIALOG_MADENCI) {
	    if(!response) return false;
	    
	    if(!strcmp(inputtext, "Maden Sat", true)) {
	        if(OyuncuBilgi[playerid][oMadenler][0] < 1 && OyuncuBilgi[playerid][oMadenler][1] < 1 && OyuncuBilgi[playerid][oMadenler][2] < 1 && OyuncuBilgi[playerid][oMadenler][3] < 1 && OyuncuBilgi[playerid][oMadenler][4] < 1) return HataMesaji(playerid, "Üzerinde satabileceðin maden yok.");
			new maden_icerik[512], ekleme[128];
			format(maden_icerik, sizeof(maden_icerik), "Maden Adý\tÜzerindeki Gram\tGram Ücreti\n");
			format(ekleme, sizeof(ekleme), "Kömür\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oMadenler][0], ""), NumaraFormati(KOMUR_GRAM_FIYATI));
			strcat(maden_icerik, ekleme, sizeof(ekleme));
			format(ekleme, sizeof(ekleme), "Bakýr\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oMadenler][1], ""), NumaraFormati(BAKIR_GRAM_FIYATI));
			strcat(maden_icerik, ekleme, sizeof(ekleme));
			format(ekleme, sizeof(ekleme), "Bronz\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oMadenler][2], ""), NumaraFormati(BRONZ_GRAM_FIYATI));
			strcat(maden_icerik, ekleme, sizeof(ekleme));
			format(ekleme, sizeof(ekleme), "Gümüþ\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oMadenler][3], ""), NumaraFormati(GUMUS_GRAM_FIYATI));
			strcat(maden_icerik, ekleme, sizeof(ekleme));
			format(ekleme, sizeof(ekleme), "Altýn\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oMadenler][4], ""), NumaraFormati(ALTIN_GRAM_FIYATI));
			strcat(maden_icerik, ekleme, sizeof(ekleme));
			format(maden_icerik, sizeof(maden_icerik), "%sHepsini Sat\t\n", maden_icerik);
			DialogGoster(playerid, DIALOG_MADEN_SAT, DIALOG_STYLE_TABLIST_HEADERS, "Maden Satýþ", maden_icerik, "Sat", "Kapat");
			return 1;
	    }
		else if(!strcmp(inputtext, "Bilgi Al", true)) {
			new maden_icerik[512], ekleme[128];
			format(maden_icerik, sizeof(maden_icerik), "Maden Adý\tOrtalama Gram\tGram Ücreti\n");
			format(ekleme, sizeof(ekleme), "Kömür\t10-40\t%s\n", NumaraFormati(KOMUR_GRAM_FIYATI));
			strcat(maden_icerik, ekleme, sizeof(ekleme));
			format(ekleme, sizeof(ekleme), "Bakýr\t10-30\t%s\n", NumaraFormati(BAKIR_GRAM_FIYATI));
			strcat(maden_icerik, ekleme, sizeof(ekleme));
			format(ekleme, sizeof(ekleme), "Bronz\t10-20\t%s\n", NumaraFormati(BRONZ_GRAM_FIYATI));
			strcat(maden_icerik, ekleme, sizeof(ekleme));
			format(ekleme, sizeof(ekleme), "Gümüþ\t5-15\t%s\n", NumaraFormati(GUMUS_GRAM_FIYATI));
			strcat(maden_icerik, ekleme, sizeof(ekleme));
			format(ekleme, sizeof(ekleme), "Altýn\t3-5\t%s\n", NumaraFormati(ALTIN_GRAM_FIYATI));
			strcat(maden_icerik, ekleme, sizeof(ekleme));
			DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Maden Bilgileri", maden_icerik, "Kapat", "");
			return 1;
		}
	}
	else if(dialogid == DIALOG_BALIKCI) {
	    if(!response) return false;

	    if(!strcmp(inputtext, "Yemler", true)) {
			new yem_icerik[256];
			format(yem_icerik, sizeof(yem_icerik), "Yem Adý\tPaket Ýçeriði\tFiyat\nEkmek\t20 Adet\t%s\nBoru Kurdu\t15 Adet\t%s\nSahte Yem\t15 Adet\t%s\nTavuk Göðsü\t10 Adet\t%s\nKarides\t10 Adet\t%s\n", NumaraFormati(EKMEK_PAKET_FIYAT), NumaraFormati(BORUKURDU_PAKET_FIYAT), NumaraFormati(SAHTEYEM_PAKET_FIYAT), NumaraFormati(TAVUKGOGSU_PAKET_FIYAT), NumaraFormati(KARIDES_PAKET_FIYAT));
			DialogGoster(playerid, DIALOG_YEMAL, DIALOG_STYLE_TABLIST_HEADERS, "Balýkçý - Yem Al", yem_icerik, "Seç", "Kapat");
			return 1;
	    }
	    else if(!strcmp(inputtext, "Balýk Sat", true)) {
	        new toplam_gram = 0;
	        for(new i = 0; i != 15; i++) toplam_gram += OyuncuBilgi[playerid][oBaliklar][i];
	        if(toplam_gram < 1) return HataMesaji(playerid, "Üzerinde satabileceðin balýk yok.");
			new balik_icerik[1024], ekleme[128];
			format(balik_icerik, sizeof(balik_icerik), "Balýk Adý\tÜzerindeki Gram\tGram Ücreti\n");
			format(ekleme, sizeof(ekleme), "Çipura\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oBaliklar][0], ""), NumaraFormati(CIPURA_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Levrek\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oBaliklar][1], ""), NumaraFormati(LEVREK_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Lagos\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oBaliklar][2], ""), NumaraFormati(LAGOS_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Lambuka\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oBaliklar][3], ""), NumaraFormati(LAMBUKA_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Orkinos\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oBaliklar][4], ""), NumaraFormati(ORKINOS_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
            format(ekleme, sizeof(ekleme), "Morina\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oBaliklar][5], ""), NumaraFormati(MORINA_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Somon\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oBaliklar][6], ""), NumaraFormati(SOMON_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Sarina\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oBaliklar][7], ""), NumaraFormati(SARINA_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Barramundi\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oBaliklar][8], ""), NumaraFormati(BARRAMUNDI_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Zargana\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oBaliklar][9], ""), NumaraFormati(ZARGANA_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Kefal\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oBaliklar][10], ""), NumaraFormati(KEFAL_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Mazak\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oBaliklar][11], ""), NumaraFormati(MAZAK_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Bakalyaro\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oBaliklar][12], ""), NumaraFormati(BAKALYARO_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Akya\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oBaliklar][13], ""), NumaraFormati(AKYA_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Ahtapot\t%s\t%s\n", NumaraFormati(OyuncuBilgi[playerid][oBaliklar][14], ""), NumaraFormati(AHTAPOT_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(balik_icerik, sizeof(balik_icerik), "%sHepsini Sat\t\n", balik_icerik);
			DialogGoster(playerid, DIALOG_BALIK_SAT, DIALOG_STYLE_TABLIST_HEADERS, "Balýk Satýþ", balik_icerik, "Sat", "Kapat");
			return 1;
	    }
		else if(!strcmp(inputtext, "Bilgi Al", true)) {
			new balik_icerik[1024], ekleme[128];
			format(balik_icerik, sizeof(balik_icerik), "Balýk Adý\tOrtalama Gram\tGram Ücreti\n");
			format(ekleme, sizeof(ekleme), "Çipura\t3-7\t%s\n", NumaraFormati(CIPURA_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Levrek\t8-11\t%s\n", NumaraFormati(LEVREK_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Lagos\t12-15\t%s\n", NumaraFormati(LAGOS_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Lambuka\t16-19\t%s\n", NumaraFormati(LAMBUKA_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Orkinos\t17-20\t%s\n", NumaraFormati(ORKINOS_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Morina\t14-16\t%s\n", NumaraFormati(MORINA_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Somon\t16-20\t%s\n", NumaraFormati(SOMON_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Sarina\t20-22\t%s\n", NumaraFormati(SARINA_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Barramundi\t23-26\t%s\n", NumaraFormati(BARRAMUNDI_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Zargana\t27-30\t%s\n", NumaraFormati(ZARGANA_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Kefal\t30-32\t%s\n", NumaraFormati(KEFAL_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Mazak\t33-36\t%s\n", NumaraFormati(MAZAK_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			format(ekleme, sizeof(ekleme), "Bakalyaro\t37-40\t%s\n", NumaraFormati(BAKALYARO_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
            format(ekleme, sizeof(ekleme), "Akya\t40-44\t%s\n", NumaraFormati(AKYA_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
            format(ekleme, sizeof(ekleme), "Ahtapot\t60-75\t%s\n", NumaraFormati(AHTAPOT_GRAM_FIYATI));
			strcat(balik_icerik, ekleme);
			DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Balýk Bilgileri", balik_icerik, "Kapat", "");
			return 1;
		}
	}
	else if(dialogid == DIALOG_MADEN_SAT) {
	    if(!response) return UyariMesaji(playerid, "Maden satmaktan vazgeçtin.");

	    if(!strcmp(inputtext, "Hepsini Sat", true)) {
	        if(OyuncuBilgi[playerid][oMadenler][0] < 1 && OyuncuBilgi[playerid][oMadenler][1] < 1 && OyuncuBilgi[playerid][oMadenler][2] < 1 && OyuncuBilgi[playerid][oMadenler][3] < 1 && OyuncuBilgi[playerid][oMadenler][4] < 1) return HataMesaji(playerid, "Üzerinde satabileceðin maden yok.");
	        new kazanc = 0;
	        kazanc += OyuncuBilgi[playerid][oMadenler][0] * KOMUR_GRAM_FIYATI;
	        kazanc += OyuncuBilgi[playerid][oMadenler][1] * BAKIR_GRAM_FIYATI;
	        kazanc += OyuncuBilgi[playerid][oMadenler][2] * BRONZ_GRAM_FIYATI;
	        kazanc += OyuncuBilgi[playerid][oMadenler][3] * GUMUS_GRAM_FIYATI;
	        kazanc += OyuncuBilgi[playerid][oMadenler][4] * ALTIN_GRAM_FIYATI;
	        OyuncuBilgi[playerid][oMadenler][0] = 0, OyuncuBilgi[playerid][oMadenler][1] = 0, OyuncuBilgi[playerid][oMadenler][2] = 0, OyuncuBilgi[playerid][oMadenler][3] = 0, OyuncuBilgi[playerid][oMadenler][4] = 0;
	        SunucuMesaji(playerid, "Üzerindeki bütün madenleri sattýn ve {33aa33}%s {7a8a9a}kazandýn.", NumaraFormati(kazanc));
	        ParaEkle(playerid, kazanc);
	        return 1;
	    }
	    new gramfiyati = 0, kazanc = 0, maden_adi[32];
	    switch(listitem) {
			case 0: gramfiyati = KOMUR_GRAM_FIYATI, maden_adi = "Kömür";
			case 1: gramfiyati = BAKIR_GRAM_FIYATI, maden_adi = "Bakýr";
			case 2: gramfiyati = BRONZ_GRAM_FIYATI, maden_adi = "Bronz";
			case 3: gramfiyati = GUMUS_GRAM_FIYATI, maden_adi = "Gümüþ";
			case 4: gramfiyati = ALTIN_GRAM_FIYATI, maden_adi = "Altýn";
	    }
	    if(OyuncuBilgi[playerid][oMadenler][listitem] < 1) return HataMesaji(playerid, "%s türünde madenden üstünde yok.", inputtext);
	    kazanc = OyuncuBilgi[playerid][oMadenler][listitem] * gramfiyati;
	    SunucuMesaji(playerid, "%s türündeki madenlerini sattýn ve {33aa33}%s {7a8a9a}kazandýn.", maden_adi, NumaraFormati(kazanc));
	    OyuncuBilgi[playerid][oMadenler][listitem] = 0;
	    ParaEkle(playerid, kazanc);
	}
	else if(dialogid == DIALOG_BALIK_SAT) {
	    if(!response) return UyariMesaji(playerid, "Balýk satmaktan vazgeçtin.");
	
	    if(!strcmp(inputtext, "Hepsini Sat", true)) {
	        new toplam_gram = 0;
	        for(new i = 0; i != 15; i++) toplam_gram += OyuncuBilgi[playerid][oBaliklar][i];
	        if(toplam_gram < 1) return HataMesaji(playerid, "Üzerinde satabileceðin balýk yok.");
	        new kazanc = 0;
	        kazanc += OyuncuBilgi[playerid][oBaliklar][0] * CIPURA_GRAM_FIYATI;
	        kazanc += OyuncuBilgi[playerid][oBaliklar][1] * LEVREK_GRAM_FIYATI;
	        kazanc += OyuncuBilgi[playerid][oBaliklar][2] * LAGOS_GRAM_FIYATI;
	        kazanc += OyuncuBilgi[playerid][oBaliklar][3] * LAMBUKA_GRAM_FIYATI;
	        kazanc += OyuncuBilgi[playerid][oBaliklar][4] * ORKINOS_GRAM_FIYATI;
	        kazanc += OyuncuBilgi[playerid][oBaliklar][5] * MORINA_GRAM_FIYATI;
			kazanc += OyuncuBilgi[playerid][oBaliklar][6] * SOMON_GRAM_FIYATI;
			kazanc += OyuncuBilgi[playerid][oBaliklar][7] * SARINA_GRAM_FIYATI;
			kazanc += OyuncuBilgi[playerid][oBaliklar][8] * BARRAMUNDI_GRAM_FIYATI;
			kazanc += OyuncuBilgi[playerid][oBaliklar][9] * ZARGANA_GRAM_FIYATI;
			kazanc += OyuncuBilgi[playerid][oBaliklar][10] * KEFAL_GRAM_FIYATI;
			kazanc += OyuncuBilgi[playerid][oBaliklar][11] * MAZAK_GRAM_FIYATI;
			kazanc += OyuncuBilgi[playerid][oBaliklar][12] * BAKALYARO_GRAM_FIYATI;
			kazanc += OyuncuBilgi[playerid][oBaliklar][13] * AKYA_GRAM_FIYATI;
			kazanc += OyuncuBilgi[playerid][oBaliklar][14] * AHTAPOT_GRAM_FIYATI;
	        for(new i = 0; i != 15; i++) OyuncuBilgi[playerid][oBaliklar][i] = 0;
	        SunucuMesaji(playerid, "Üzerindeki bütün balýklarý sattýn ve {33aa33}%s {7a8a9a}kazandýn.", NumaraFormati(kazanc));
	        ParaEkle(playerid, kazanc);
	        return 1;
	    }
	    new gramfiyati = 0, kazanc = 0, balikadi[32];
	    switch(listitem) {
			case 0: gramfiyati = CIPURA_GRAM_FIYATI, balikadi = "Çipura";
			case 1: gramfiyati = LEVREK_GRAM_FIYATI, balikadi = "Levrek";
			case 2: gramfiyati = LAGOS_GRAM_FIYATI, balikadi = "Lagos";
			case 3: gramfiyati = LAMBUKA_GRAM_FIYATI, balikadi = "Lambuka";
			case 4: gramfiyati = ORKINOS_GRAM_FIYATI, balikadi = "Orkinos";
			case 5: gramfiyati = MORINA_GRAM_FIYATI, balikadi = "Morina";
			case 6: gramfiyati = SOMON_GRAM_FIYATI, balikadi = "Somon";
			case 7: gramfiyati = SARINA_GRAM_FIYATI, balikadi = "Sarina";
			case 8: gramfiyati = BARRAMUNDI_GRAM_FIYATI, balikadi = "Barramundi";
			case 9: gramfiyati = ZARGANA_GRAM_FIYATI, balikadi = "Zargana";
			case 10: gramfiyati = KEFAL_GRAM_FIYATI, balikadi = "Kefal";
			case 11: gramfiyati = MAZAK_GRAM_FIYATI, balikadi = "Mazak";
			case 12: gramfiyati = BAKALYARO_GRAM_FIYATI, balikadi = "Bakalyaro";
			case 13: gramfiyati = AKYA_GRAM_FIYATI, balikadi = "Akya";
			case 14: gramfiyati = AHTAPOT_GRAM_FIYATI, balikadi = "Ahtapot";
	    }
	    if(OyuncuBilgi[playerid][oBaliklar][listitem] < 1) return HataMesaji(playerid, "%s türünde balýktan üstünde yok.", inputtext);
	    kazanc = OyuncuBilgi[playerid][oBaliklar][listitem] * gramfiyati;
	    SunucuMesaji(playerid, "%s türündeki balýklarýný sattýn ve {33aa33}%s {7a8a9a}kazandýn.", balikadi, NumaraFormati(kazanc));
	    OyuncuBilgi[playerid][oBaliklar][listitem] = 0;
	    ParaEkle(playerid, kazanc);
	}
	else if(dialogid == DIALOG_ODEMESEC) {
	
        new id = Oyuncu_Isyerinde(playerid);
        if(id == -1 && !IsPlayerInRangeOfPoint(playerid, 5.0, 360.7297, -2036.2222, 7.8556)) return HataMesaji(playerid, "Bir hata oluþtu.");
	
	    new urun[128], urun_ucret = 0;
		format(urun, sizeof(urun), "%s", IsyeriUrun[playerid]);

		if(!strcmp(urun, "Yeni Sim Kartý", true)) {
	        urun_ucret = 50;
	        if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
	        else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");

			new telno = randomEx(1000000, 9999999), simkart_sorgu[144];
			format(simkart_sorgu, sizeof(simkart_sorgu), "SELECT `TelefonNumarasi` FROM oyuncular WHERE TelefonNumarasi = '%d' LIMIT 1", telno);
			mysql_tquery(mysqlB, simkart_sorgu, "SimNumara_Kontrol", "dd", playerid, telno);
			IsyeriBilgi[id][isyeriKasa] += urun_ucret;
			IsyeriBilgi[id][isyeriUrun]--;
			Isyeri_Kaydet(id);
		}
		if(!strcmp(urun, "Odun", true)) {
		    urun_ucret = 15;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");
			if(OyuncuBilgi[playerid][oOdun] > MAKSIMUM_ODUN -1) return HataMesaji(playerid, "Üzerinde daha fazla odun bulunamaz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			OyuncuBilgi[playerid][oOdun]++;
  		}
		else if(!strcmp(urun, "Çakmak", true)) {
		    urun_ucret = 5;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");
			if(OyuncuBilgi[playerid][oCakmak] == true) return HataMesaji(playerid, "Zaten çakmaðýn var.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			OyuncuBilgi[playerid][oCakmak] = true;
		}
		else if(!strcmp(urun, "Zar", true)) {
		    urun_ucret = 3;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");
			if(OyuncuBilgi[playerid][oZar] > 0) return HataMesaji(playerid, "Zaten zarýn var.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			OyuncuBilgi[playerid][oZar] = 1;
		}
		else if(!strcmp(urun, "Kibrit", true)) {
		    urun_ucret = 4;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");
			if(OyuncuBilgi[playerid][oKibrit] > MAKSIMUM_KIBRIT - 1) return HataMesaji(playerid, "Üzerinde daha çok kibrit bulunamaz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			OyuncuBilgi[playerid][oKibrit] += 20;
		}
		else if(!strcmp(urun, "Sigara", true)) {
		    urun_ucret = 15;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");
			if(OyuncuBilgi[playerid][oSigara] > MAKSIMUM_SIGARA - 1) return HataMesaji(playerid, "Üzerinde daha çok sigara bulunamaz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			OyuncuBilgi[playerid][oSigara] += 20;
		}
		else if(!strcmp(urun, "Saksý", true)) {
		    urun_ucret = 50;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");
			if(OyuncuBilgi[playerid][oSaksi] > MAKSIMUM_SAKSI - 1) return HataMesaji(playerid, "Üzerinde daha çok saksý bulunamaz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			OyuncuBilgi[playerid][oSaksi]++;
		}
		else if(!strcmp(urun, "Gübre", true)) {
		    urun_ucret = 50;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");
			if(OyuncuBilgi[playerid][oGubre] >= 2 && OyuncuBilgi[playerid][oVIP] < 2) return HataMesaji(playerid, "Üzerinde daha çok gübre bulunamaz.");
			if(OyuncuBilgi[playerid][oGubre] >= 4 && OyuncuBilgi[playerid][oVIP] >= 2) return HataMesaji(playerid, "Üzerinde daha çok gübre bulunamaz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			OyuncuBilgi[playerid][oGubre]++;
		}
		else if(!strcmp(urun, "Ýlk Yardým Kiti", true)) {
		    urun_ucret = 100;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");
			new limit = 0;
			switch(OyuncuBilgi[playerid][oVIP]) {
			    case 3: limit = 2;
			    default: limit = 1;
			}
			if(OyuncuBilgi[playerid][oIlkYardim] >= limit) return HataMesaji(playerid, "Üzerinde daha çok ilk yardým kiti bulunamaz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			OyuncuBilgi[playerid][oIlkYardim]++;
		}
		else if(!strcmp(urun, "Benzin Bidonu", true)) {
		    urun_ucret = 150;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");
			if(OyuncuBilgi[playerid][oBidon] > 0) return HataMesaji(playerid, "Zaten benzin bidonun var.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			OyuncuBilgi[playerid][oBidon]++;
		}
		else if(!strcmp(urun, "Tamir Kiti", true)) {
		    urun_ucret = 200;
		    if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
		    else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");
			new limit = 0;
			switch(OyuncuBilgi[playerid][oVIP]) {
			    case 2: limit = 2;
			    case 3: limit = 3;
			    default: limit = 1;
			}
			if(OyuncuBilgi[playerid][oTamirKiti] >= limit) return HataMesaji(playerid, "Üzerinde daha fazla tamir kiti bulunduramazsýn.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			OyuncuBilgi[playerid][oTamirKiti]++;
		}
		else if(!strcmp(urun, "Ýp", true)) {
		    urun_ucret = 15;
		    if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
		    else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");
			new limit = 0;
			switch(OyuncuBilgi[playerid][oVIP]) {
			    case 2: limit = 2;
			    case 3: limit = 3;
			    default: limit = 1;
			}
			if(OyuncuBilgi[playerid][oIpUrun] >= limit) return HataMesaji(playerid, "Üzerinde daha fazla ip bulunduramazsýn.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			OyuncuBilgi[playerid][oIpUrun]++;
		}
		else if(!strcmp(urun, "Balýk", true)) {
		    urun_ucret = 10;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsun.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
            if(OyuncuCan(playerid) <= 90) CanDuzenle(playerid, OyuncuCan(playerid) + urun_ucret);
			SunucuMesaji(playerid, "Balýk yedin.");
		}
		else if(!strcmp(urun, "Et Burger", true)) {
		    urun_ucret = 20;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsun.");
            else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

			if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			if(OyuncuCan(playerid) <= 80) CanDuzenle(playerid, OyuncuCan(playerid) + urun_ucret);
			SunucuMesaji(playerid, "Et Burger yedin.");
		}
		else if(!strcmp(urun, "Tavuk Burger", true)) {
		    urun_ucret = 20;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsun.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
            if(OyuncuCan(playerid) <= 80) CanDuzenle(playerid, OyuncuCan(playerid) + urun_ucret);
			SunucuMesaji(playerid, "Tavuk Burger yedin.");
		}
		else if(!strcmp(urun, "Salata", true)) {
		    urun_ucret = 5;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsun.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
            if(OyuncuCan(playerid) <= 95) CanDuzenle(playerid, OyuncuCan(playerid) + urun_ucret);
			SunucuMesaji(playerid, "Salata yedin.");
		}
	    else if(!strcmp(urun, "Mor Dildo", true)) {
	        urun_ucret = 30;
	        if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
	        else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			Silahver(playerid, WEAPON_DILDO, 1);
	    }
	    else if(!strcmp(urun, "Dildo", true)) {
	        urun_ucret = 25;
	        if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
	        else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			Silahver(playerid, WEAPON_DILDO2, 1);
	    }
	    else if(!strcmp(urun, "Vibratör", true)) {
	        urun_ucret = 30;
	        if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
	        else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			Silahver(playerid, WEAPON_VIBRATOR, 1);
	    }
	    else if(!strcmp(urun, "Gümüþ Vibratör", true)) {
	        urun_ucret = 55;
	        if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
	        else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			Silahver(playerid, WEAPON_VIBRATOR2, 1);
	    }
	    else if(!strcmp(urun, "Çiçek", true)) {
	        urun_ucret = 10;
	        if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
	        else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			Silahver(playerid, WEAPON_FLOWER, 1);
	    }
	    else if(!strcmp(urun, "Plastik Jop", true)) {
	        urun_ucret = 75;
	        if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
	        else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			Silahver(playerid, WEAPON_NITESTICK, 1);
	    }
		else if(!strcmp(urun, "Telefon", true)) {
		    urun_ucret = 100;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

			if(OyuncuBilgi[playerid][oTelefon] > 0) return HataMesaji(playerid, "Zaten telefonunuz var.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			OyuncuBilgi[playerid][oTelefon] = 1;
		}
		else if(!strcmp(urun, "Boombox", true)) {

		    urun_ucret = 75;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

			if(OyuncuBilgi[playerid][oMuzikKutusu] > 0) return HataMesaji(playerid, "Zaten boomboxun bulunuyor.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			OyuncuBilgi[playerid][oMuzikKutusu] = 1;
		}
		else if(!strcmp(urun, "GPS", true)) {
		    urun_ucret = 20;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

			if(OyuncuBilgi[playerid][oGPS] > 0) return HataMesaji(playerid, "Zaten GPS'in bulunuyor.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			OyuncuBilgi[playerid][oGPS] = 1;
		}
		else if(!strcmp(urun, "Portatif Radyo", true)) {
		    urun_ucret = 250;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

			if(OyuncuBilgi[playerid][oPortatifRadyo] > 0) return HataMesaji(playerid, "Zaten Portatif radyon bulunuyor.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
			OyuncuBilgi[playerid][oPortatifRadyo] = 1;
			SunucuMesaji(playerid, "Portatif radyonu kullanmak için /pr, frekans seçmek için /frekans");
		}
		else if(!strcmp(urun, "Kamera", true)) {
		    urun_ucret = 200;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

		    if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_CAMERA]) && SilahSlotBul[WEAPON_CAMERA] != 0) return HataMesaji(playerid, "Kamera slotun boþ olmadýðý için Kamera alamazsýn.");
		    if(OyuncuBilgi[playerid][oOynamaSaati] < 12) return HataMesaji(playerid, "Kamera alabilmek için 12 oynama saatine ihtiyacýn var.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
            
			Silahver(playerid, WEAPON_CAMERA, 1000);
		}
		else if(!strcmp(urun, "Býçak", true)) {
		    urun_ucret = 75;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

		    if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_KNIFE]) && SilahSlotBul[WEAPON_KNIFE] != 0) return HataMesaji(playerid, "Býçak slotun boþ olmadýðý için Býçak alamazsýn.");
		    if(OyuncuBilgi[playerid][oOynamaSaati] < 12) return HataMesaji(playerid, "Býçak alabilmek için 12 oynama saatine ihtiyacýn var.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");

			Silahver(playerid, WEAPON_KNIFE, 1000);
		}
		else if(!strcmp(urun, "Beyzbol Sopasý", true)) {
		    urun_ucret = 50;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

		    if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_BAT]) && SilahSlotBul[WEAPON_BAT] != 0) return HataMesaji(playerid, "Beyzbol sopasý slotun boþ olmadýðý için Beyzbol Sopasý alamazsýn.");
		    if(OyuncuBilgi[playerid][oOynamaSaati] < 12) return HataMesaji(playerid, "Beyzbol Sopasý alabilmek için 12 oynama saatine ihtiyacýn var.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");

			Silahver(playerid, WEAPON_BAT, 1000);
		}
		else if(!strcmp(urun, "Þarap", true)) {
		    urun_ucret = 20;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
			OyuncuBilgi[playerid][oIckiIciyor] = 7;
		}
		else if(!strcmp(urun, "Bira", true)) {
		    urun_ucret = 5;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
			OyuncuBilgi[playerid][oIckiIciyor] = 5;
		}
		else if(!strcmp(urun, "Ekmek", true)) {
		    urun_ucret = EKMEK_PAKET_FIYAT;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            new yemler = 0;
            yemler += OyuncuBilgi[playerid][oYemler][0], yemler += OyuncuBilgi[playerid][oYemler][1], yemler += OyuncuBilgi[playerid][oYemler][2], yemler += OyuncuBilgi[playerid][oYemler][3], yemler += OyuncuBilgi[playerid][oYemler][4];
            if(yemler > 20) return HataMesaji(playerid, "Daha fazla yem alamazsýn, üzerinde bulunacak yem sayýsý en fazla 40 olabilir.");
			OyuncuBilgi[playerid][oYemler][0] += 20;
		}
		else if(!strcmp(urun, "Boru Kurdu", true)) {
		    urun_ucret = BORUKURDU_PAKET_FIYAT;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            new yemler = 0;
            yemler += OyuncuBilgi[playerid][oYemler][0], yemler += OyuncuBilgi[playerid][oYemler][1], yemler += OyuncuBilgi[playerid][oYemler][2], yemler += OyuncuBilgi[playerid][oYemler][3], yemler += OyuncuBilgi[playerid][oYemler][4];
            if(yemler > 25) return HataMesaji(playerid, "Daha fazla yem alamazsýn, üzerinde bulunacak yem sayýsý en fazla 40 olabilir.");
			OyuncuBilgi[playerid][oYemler][1] += 15;
		}
		else if(!strcmp(urun, "Sahte Yem", true)) {
		    urun_ucret = SAHTEYEM_PAKET_FIYAT;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            new yemler = 0;
            yemler += OyuncuBilgi[playerid][oYemler][0], yemler += OyuncuBilgi[playerid][oYemler][1], yemler += OyuncuBilgi[playerid][oYemler][2], yemler += OyuncuBilgi[playerid][oYemler][3], yemler += OyuncuBilgi[playerid][oYemler][4];
            if(yemler > 25) return HataMesaji(playerid, "Daha fazla yem alamazsýn, üzerinde bulunacak yem sayýsý en fazla 40 olabilir.");
			OyuncuBilgi[playerid][oYemler][2] += 15;
		}
		else if(!strcmp(urun, "Tavuk Göðsü", true)) {
		    urun_ucret = TAVUKGOGSU_PAKET_FIYAT;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            new yemler = 0;
            yemler += OyuncuBilgi[playerid][oYemler][0], yemler += OyuncuBilgi[playerid][oYemler][1], yemler += OyuncuBilgi[playerid][oYemler][2], yemler += OyuncuBilgi[playerid][oYemler][3], yemler += OyuncuBilgi[playerid][oYemler][4];
            if(yemler > 30) return HataMesaji(playerid, "Daha fazla yem alamazsýn, üzerinde bulunacak yem sayýsý en fazla 40 olabilir.");
			OyuncuBilgi[playerid][oYemler][3] += 10;
		}
		else if(!strcmp(urun, "Karides", true)) {
		    urun_ucret = KARIDES_PAKET_FIYAT;
			if(response && OyuncuBilgi[playerid][oPara] < urun_ucret) return HataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
			else if(!response && OyuncuBilgi[playerid][oBankaPara] < urun_ucret) return HataMesaji(playerid, "Kartýnýzda yeterli bakiye bulunmadýðýndan karttan ödeme yapamýyorsunuz.");

            new yemler = 0;
            yemler += OyuncuBilgi[playerid][oYemler][0], yemler += OyuncuBilgi[playerid][oYemler][1], yemler += OyuncuBilgi[playerid][oYemler][2], yemler += OyuncuBilgi[playerid][oYemler][3], yemler += OyuncuBilgi[playerid][oYemler][4];
            if(yemler > 30) return HataMesaji(playerid, "Daha fazla yem alamazsýn, üzerinde bulunacak yem sayýsý en fazla 40 olabilir.");
			OyuncuBilgi[playerid][oYemler][4] += 10;
		}
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 360.7297, -2036.2222, 7.8556)) {
			IsyeriBilgi[id][isyeriKasa] += urun_ucret;
			IsyeriBilgi[id][isyeriUrun]--;
			Isyeri_Kaydet(id);
		}
		SunucuMesaji(playerid, "Ýçerisinde bulunduðun iþyerinden %s adlý ürünü %s fiyatýna satýn aldýn.", urun, NumaraFormati(urun_ucret));
		if(response) return ParaEkle(playerid, -urun_ucret);
		else if(!response && !IsPlayerInRangeOfPoint(playerid, 5.0, 360.7297, -2036.2222, 7.8556)) {
		    OyuncuBilgi[playerid][oBankaPara] -= urun_ucret;
			new sorgu[512];
	   		format(sorgu, sizeof(sorgu), "Harcama: %s - %s", IsyeriBilgi[id][isyeriAd], NumaraFormati(urun_ucret));
			format(sorgu, sizeof(sorgu), "INSERT INTO `bankaislemler` (`Islem`, `Tarih`, `HesapNumarasi`, `Tur`) VALUES ('%s', '%s', '%d', '1')", SQL_ReturnEscaped(sorgu), Tarih(), OyuncuBilgi[playerid][oHesapNumarasi]);
			mysql_query(mysqlB, sorgu);
			OyuncuKaydet(playerid);
		}
		else if(!response && IsPlayerInRangeOfPoint(playerid, 5.0, 360.7297, -2036.2222, 7.8556)) {
		    OyuncuBilgi[playerid][oBankaPara] -= urun_ucret;
			new sorgu[512];
	   		format(sorgu, sizeof(sorgu), "Harcama: %s - %s", "Balýkçý Dükkaný", NumaraFormati(urun_ucret));
			format(sorgu, sizeof(sorgu), "INSERT INTO `bankaislemler` (`Islem`, `Tarih`, `HesapNumarasi`, `Tur`) VALUES ('%s', '%s', '%d', '1')", SQL_ReturnEscaped(sorgu), Tarih(), OyuncuBilgi[playerid][oHesapNumarasi]);
			mysql_query(mysqlB, sorgu);
			OyuncuKaydet(playerid);
		}
	}
	else if(dialogid == DIALOG_SATINAL) {
		if(!response) return false;
		new id = Oyuncu_Isyerinde(playerid);
		if(id == -1) return HataMesaji(playerid, "Bir sorun oluþtu, lütfen tekrar dene.");

		if(!strcmp(inputtext, "Ürünler", true)) {
			switch(IsyeriBilgi[id][isyeriTur]) {
			    case 1, 9: DialogGoster(playerid, DIALOG_MARKET, DIALOG_STYLE_TABLIST_HEADERS, "Market", "Ürün\tAdet\tFiyat\nOdun\t1\t$15\nÇakmak\t1\t$5\nKibrit\t20\t$4\nSigara\t20\t$15\nSaksý\t1\t$50\nGübre\t1\t$50\nÝlk Yardým Kiti\t1\t$100\nBenzin Bidonu\t1\t$150\nTamir Kiti\t1\t$200\nZar\t1\t$3\nBýçak\t-\t$75\nBeyzbol Sopasý\t-\t$50\nÝp\t-\t$15", "Seç", "Ýptal");
			    case 2: DialogGoster(playerid, DIALOG_RESTAURANT, DIALOG_STYLE_TABLIST_HEADERS, "Restaurant", "Ürün\tArtýþ\tFiyat\nBalýk\t+15\t$15\nEt Burger\t+20\t$20\nTavuk Burger\t+20\t$20\nSalata\t+10\t$5\n", "Seç", "Ýptal");
			    case 3: DialogGoster(playerid, DIALOG_ELEKTRONIK, DIALOG_STYLE_TABLIST_HEADERS, "Elektronik", "Ürün\t\tFiyat\nTelefon\t\t$100\nYeni Sim Kartý\t\t$50\nBoombox\t\t$75\nGPS\t\t$20\nPortatif Radyo\t\t$250\nKamera\t\t$200", "Seç", "Ýptal");
			}
		}
		else if(!strcmp(inputtext, "Aksesuarlar", true)) {
			if(IsyeriBilgi[id][isyeriTur] == 2) {
				new restoran[sizeof(RestoranAksesuar)];
				for(new c = 0; c != sizeof(RestoranAksesuar); c++) restoran[c] = RestoranAksesuar[c][0];

				return ShowModelSelectionMenuEx(playerid, restoran, sizeof(restoran), IsyeriBilgi[id][isyeriAd], MODELLER_AKSESUAR);
			}
			else if(IsyeriBilgi[id][isyeriTur] == 3) {
				new aksesuar[sizeof(ElektronikAksesuar)];
				for(new c = 0; c != sizeof(ElektronikAksesuar); c++) aksesuar[c] = ElektronikAksesuar[c][0];

				return ShowModelSelectionMenuEx(playerid, aksesuar, sizeof(aksesuar), IsyeriBilgi[id][isyeriAd], MODELLER_AKSESUAR);
			}
			else if(IsyeriBilgi[id][isyeriTur] == 1 || IsyeriBilgi[id][isyeriTur] == 9) {
				new aksesuar[sizeof(MarketAksesuar)];
				for(new c = 0; c != sizeof(MarketAksesuar); c++) aksesuar[c] = MarketAksesuar[c][0];

				return ShowModelSelectionMenuEx(playerid, aksesuar, sizeof(aksesuar), IsyeriBilgi[id][isyeriAd], MODELLER_AKSESUAR);
			}
			else if(IsyeriBilgi[id][isyeriTur] == 7) {
				new aksesuar[sizeof(KiyafetciAksesuar)];
				for(new c = 0; c != sizeof(KiyafetciAksesuar); c++) aksesuar[c] = KiyafetciAksesuar[c][0];

				return ShowModelSelectionMenuEx(playerid, aksesuar, sizeof(aksesuar), IsyeriBilgi[id][isyeriAd], MODELLER_AKSESUAR);
			}
		}
	}
	else if(dialogid == DIALOG_ISYERI) {
	    if(!response) return false;

		new id = Isyeri_Yakin(playerid);
		if(id == -1) id = Oyuncu_Isyerinde(playerid);
		if(!strcmp(inputtext, "Kilit Durumunu Deðiþtir", true)) {
		    if(!Isyeri_SahipKontrol(playerid, id) && IsyeriBilgi[id][isyeriOrtak] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bu iþyeri senin deðil.");
			switch(IsyeriBilgi[id][isyeriDurum]) {
				case 1: {
				    IsyeriBilgi[id][isyeriDurum] = 2;
				    Isyeri_Yenile(id);
				    cmd_ame(playerid, "iþyeri kapýsýný kilitler.");
				}
				case 2: {
				    IsyeriBilgi[id][isyeriDurum] = 1;
				    Isyeri_Yenile(id);
				    cmd_ame(playerid, "iþyeri kapýsýnýn kilidini açar.");
				    foreach(new i : Player) if(MaymuncukVeri[i][mTur] == 4 && MaymuncukVeri[playerid][mHedef] == id) return SunucuMesaji(i, "Maymuncuk kýrýldý."), MaymuncukVeri[i][mSaniye] = 0, OyuncuBilgi[i][oMaymuncuk]--;
				}
				default: HataMesaji(playerid, "Bu iþyerinin kilit durumunu deðiþtiremezsin.");
			}
		}
		else if(!strcmp(inputtext, "Ýsim Deðiþtir", true)) {
		    if(!Isyeri_SahipKontrol(playerid, id) && IsyeriBilgi[id][isyeriOrtak] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bu iþyerinin sahibi veya ortaðý deðilsin.");
			DialogGoster(playerid, DIALOG_ISYERI_ISIM, DIALOG_STYLE_INPUT, "Ýþyeri - Ýsim Deðiþtir", "{FFFFFF}Merhaba, lütfen iþyerinizin yeni ismini aþaðýdaki kutucuða girin;", "Tamam", "Kapat");
			return true;
		}
		else if(!strcmp(inputtext, "Giriþ Ücretini Deðiþtir", true)) {
		    if(!Isyeri_SahipKontrol(playerid, id) && IsyeriBilgi[id][isyeriOrtak] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bu iþyerinin sahibi veya ortaðý deðilsin.");
			DialogGoster(playerid, DIALOG_GIRISUCRET, DIALOG_STYLE_INPUT, "Giriþ Ücreti - Düzenle", "{B70000}UYARI: {FFFFFF}Girilen ücret 0 ilâ 750 dolar arasýnda olmalýdýr.\nLütfen olmasýný istediðin giriþ ücretin aþaðýdaki boþluða girin;", "Tamam", "Kapat");
			return true;
		}
		else if(!strcmp(inputtext, "Ortak Deðiþtir", true)) {
			if(Isyeri_SahipKontrol(playerid, id)) DialogGoster(playerid, DIALOG_ORTAKEKLE, DIALOG_STYLE_INPUT, "Ýþyeri - Ortak", "Ortaðýn olmasýný istediðin kiþiyi girin;", "Tamam", "Iptal");
			else return HataMesaji(playerid, "Bu seçeneði sadece iþyeri sahibi kullanabilir.");
		}
		else if(!strcmp(inputtext, "Sisteme Sat", true)) {
			if(Isyeri_SahipKontrol(playerid, id)) {
				ParaEkle(playerid, IsyeriBilgi[id][isyeriFiyat] / 2);
				SunucuMesaji(playerid, "Ýþyerini yarý fiyatýna sattýn. (%s)", NumaraFormati(IsyeriBilgi[id][isyeriFiyat] / 2));
				IsyeriBilgi[id][isyeriSahip] = 0;
				IsyeriBilgi[id][isyeriOrtak] = 0;
				IsyeriBilgi[id][isyeriDurum] = 1;
				IsyeriBilgi[id][isyeriSahipIsim][0] = 0;
				Isyeri_Yenile(id);
				Isyeri_Kaydet(id);
				if(Oyuncu_Isyerinde(playerid) != -1) {
					OyuncuPosDegistir(playerid, IsyeriBilgi[id][isyeriPos][0], IsyeriBilgi[id][isyeriPos][1], IsyeriBilgi[id][isyeriPos][2]);
					SetPlayerFacingAngle(playerid, IsyeriBilgi[id][isyeriPos][3] - 180.0);
			        DondurulmaEtkisi(playerid);
					SetPlayerInterior(playerid, IsyeriBilgi[id][isyeriDisInt]);
					SetPlayerVirtualWorld(playerid, IsyeriBilgi[id][isyeriDisVW]);
					SetCameraBehindPlayer(playerid);
				}
			}
			else return HataMesaji(playerid, "Bu seçeneði sadece iþyeri sahibi kullanabilir.");
		}
		else if(!strcmp(inputtext, "Kasa Ýþlemleri", true)) {
		    if(Isyeri_SahipKontrol(playerid, id)) {
				new bilgi[144];
				format(bilgi, sizeof(bilgi), "{FFFFFF}Para Çek\t(-%s)\nPara Yatýr\t(+%s)", NumaraFormati(IsyeriBilgi[id][isyeriKasa]), NumaraFormati(IsyeriBilgi[id][isyeriKasa]));
				return DialogGoster(playerid, DIALOG_ISYERIKASA, DIALOG_STYLE_TABLIST, "Ýþyeri - Kasa", bilgi, "Seç", "Geri");
			}
			else return HataMesaji(playerid, "Bu seçeneði sadece iþyeri sahibi kullanabilir.");
		}
		else if(!strcmp(inputtext, "Ortak Çýkar", true)) {
			if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
			if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
			if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
			if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
			if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
			if(IsyeriBilgi[id][isyeriSahip] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bu iþyerinin sahibi deðilsin.");
			if(IsyeriBilgi[id][isyeriOrtak] == 0) return HataMesaji(playerid, "Ortaðýn yok, bu seçeneði kullanamazsýn.");

			DialogGoster(playerid, DIALOG_ORTAK_CIKAR, DIALOG_STYLE_MSGBOX, "Ýþyeri - Ortak", "Ýþyeri ortaðýný çýkartmak istiyor musun?", "{B70000}Evet", "Hayýr");
		}
		else if(!strcmp(inputtext, "Müzik Deðiþtir", true)) {
			if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
			if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
			if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
			if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
			if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
			if(IsyeriBilgi[id][isyeriSahip] != OyuncuBilgi[playerid][oID] && IsyeriBilgi[id][isyeriOrtak] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bu iþyerinin sahibi veya ortaðý deðilsin.");

			DialogGoster(playerid, DIALOG_MUZIK_DEGISTIR, DIALOG_STYLE_INPUT, "Ýþyeri - Müzik", "Ýþyerinde çalmasýný istediðin müziðin linkini girin;\nKaldýrmak için \"Kaldýr\" yazýn.", "Tamam", "Ýptal");
		}
		else if(!strcmp(inputtext, "Benzin Ücreti Deðiþtir", true)) {
			if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu seçeneði kullanamazsýn.");
			if(IsyeriBilgi[id][isyeriSahip] != OyuncuBilgi[playerid][oID]  && IsyeriBilgi[id][isyeriOrtak] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bu iþyerinin sahibi deðilsin.");
			new sayi = 0;
	        for(new i = 0; i < MAKSIMUM_BENZIN_POMPASI; i++) if(BenzinPompasi[id][pompaKullanimda] && BenzinPompasi[i][pompaIsyeri] == IsyeriBilgi[id][isyeriID]) sayi++;
			if(sayi == 0) return HataMesaji(playerid, "Ýþyerine baðlý pompa bulunamadýðý için bu seçeneði kullanamazsýn.");
			else DialogGoster(playerid, DIALOG_BENZIN_UCRET, DIALOG_STYLE_INPUT, "Ýþyeri - Benzin Ücret", "Bu iþlemi tamamlarsan iþyerine baðlý tüm benzin pompalarýnýn ücreti deðiþecektir.\nFiyat en az $1 en fazla $10 olabilir.\nGirdiðin fiyat litre baþý fiyattýr.", "Tamam", "Ýptal");
		}
		else if(!strcmp(inputtext, "Ortaklýktan Ayrýl", true)) {
			if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu seçeneði kullanamazsýn.");
			if(IsyeriBilgi[id][isyeriOrtak] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bu iþyerinin ortaðý deðilsin.");

			DialogGoster(playerid, DIALOG_ORTAK_AYRIL, DIALOG_STYLE_MSGBOX, "Ýþyeri - Ortak", "Ýþyeri ortaklýðýndan ayrýlmak istiyor musun?", "{B70000}Evet", "Hayýr");
		}
	}
	else if(dialogid == DIALOG_ISYERI_ISIM) {
	    if(!response) return false;

		new id = Isyeri_Yakin(playerid);
		if(id == -1) id = Oyuncu_Isyerinde(playerid);
        if(!Isyeri_SahipKontrol(playerid, id) && IsyeriBilgi[id][isyeriOrtak] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bu iþyerinin sahibi veya ortaðý deðilsin.");
		if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_ISYERI_ISIM, DIALOG_STYLE_INPUT, "Ýþyeri - Ýsim Deðiþtir", "{FFFFFF}Merhaba, lütfen iþyerinizin yeni ismini aþaðýdaki kutucuða girin;", "Tamam", "Kapat");
		if(strlen(inputtext) > 48) return DialogGoster(playerid, DIALOG_ISYERI_ISIM, DIALOG_STYLE_INPUT, "Ýþyeri - Ýsim Deðiþtir", "{B70000}HATA: {FFFFFF}Ýþyeri ismi maksimum 48 harften oluþabilir.\n\n{FFFFFF}Merhaba, lütfen iþyerinizin yeni ismini aþaðýdaki kutucuða girin;", "Tamam", "Kapat");
	
		format(IsyeriBilgi[id][isyeriAd], 128, "%s", inputtext);
		Isyeri_Yenile(id);
		Isyeri_Kaydet(id);
		SunucuMesaji(playerid, "Ýþyerinizin ismini %s olarak deðiþtirdiniz.", inputtext);
	}
	else if(dialogid == DIALOG_BENZIN_UCRET) {
	    if(!response) return false;

		new id = Isyeri_Yakin(playerid), ucret, sayi = 0;
		if(id == -1) id = Oyuncu_Isyerinde(playerid);
		if(!Isyeri_SahipKontrol(playerid, id) && IsyeriBilgi[id][isyeriOrtak] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bu iþyerinin sahibi veya ortaðý deðilsin.");
		
		if(sscanf(inputtext, "d", ucret))
			return DialogGoster(playerid, DIALOG_BENZIN_UCRET, DIALOG_STYLE_INPUT, "Ýþyeri - Benzin Ücret", "Bu iþlemi tamamlarsan iþyerine baðlý tüm benzin pompalarýnýn ücreti deðiþecektir.\nFiyat en az $1 en fazla $10 olabilir.\nGirdiðin fiyat litre baþý fiyattýr.", "Tamam", "Ýptal");

		if(ucret < 1 || ucret > 10)
		    return DialogGoster(playerid, DIALOG_BENZIN_UCRET, DIALOG_STYLE_INPUT, "Ýþyeri - Benzin Ücret", "{B70000}HATA: {FFFFFF}Geçersiz ücret!\n\nBu iþlemi tamamlarsan iþyerine baðlý tüm benzin pompalarýnýn ücreti deðiþecektir.\nFiyat en az $1 en fazla $10 olabilir.\nGirdiðin fiyat litre baþý fiyattýr.", "Tamam", "Ýptal");

        for(new i = 0; i < MAKSIMUM_BENZIN_POMPASI; i++) if(BenzinPompasi[id][pompaKullanimda] && BenzinPompasi[i][pompaIsyeri] == IsyeriBilgi[id][isyeriID]) {
            BenzinPompasi[i][pompaUcret] = ucret;
            Pompa_Yenile(i);
			Pompa_Kaydet(i);
			sayi++;
        }
		if(sayi == 0) return HataMesaji(playerid, "Ýþyerine baðlý pompa bulunamadýðý için iþlem iptal edildi.");
		SunucuMesaji(playerid, "Ýþyerine baðlý %s adet pompanýn litre ücreti %s olarak deðiþtirildi.", NumaraFormati(sayi, ""), NumaraFormati(ucret));
	}
	else if(dialogid == DIALOG_MUZIK_DEGISTIR) {
	    if(!response) return false;

		new id = Isyeri_Yakin(playerid);
		if(id == -1) id = Oyuncu_Isyerinde(playerid);
		if(!strcmp(inputtext, "Kaldýr", true)) {
		    IsyeriBilgi[id][isyeriMuzik][0] = 0;
		    foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && Oyuncu_Isyerinde(i) == id) StopAudioStreamForPlayer(i);
			return SunucuMesaji(playerid, "Ýþyeri müziðini kaldýrdýn.");
		}
		if(strlen(inputtext) > 128) return HataMesaji(playerid, "En fazla 128 karakterli bir link koyabilirsin.");
		if(strfind(inputtext, "http://") == -1 && strfind(inputtext, "https://") == -1) return HataMesaji(playerid, "Bu geçerli bir link deðil.");

		format(IsyeriBilgi[id][isyeriMuzik], 128, "%s", inputtext);
		foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && Oyuncu_Isyerinde(i) == id) StopAudioStreamForPlayer(i), PlayAudioStreamForPlayer(i, IsyeriBilgi[id][isyeriMuzik]);
		Isyeri_Kaydet(id);
		return SunucuMesaji(playerid, "Link %s olarak deðiþtirildi.", inputtext);
	}
	else if(dialogid == DIALOG_ORTAKEKLE) {
		if(!response) return false;

		new ortakid;
		if(sscanf(inputtext, "d", ortakid))
		    return DialogGoster(playerid, DIALOG_ORTAKEKLE, DIALOG_STYLE_INPUT, "Ýþyeri - Ortak", "Ortaðýn olmasýný istediðin kiþiyi girin;", "Tamam", "Iptal");

		if(!IsPlayerConnected(ortakid))
		    return DialogGoster(playerid, DIALOG_ORTAKEKLE, DIALOG_STYLE_INPUT, "Ýþyeri - Ortak", "{B70000}HATA: {FFFFFF}Geçersiz oyuncu.\nOrtaðýn olmasýný istediðin kiþiyi girin;", "Tamam", "Iptal");

      	if(!YakinlikKontrol(playerid, ortakid, 2.5))
			return DialogGoster(playerid, DIALOG_ORTAKEKLE, DIALOG_STYLE_INPUT, "Ýþyeri - Ortak", "{B70000}HATA: {FFFFFF}Oyuncuya yakýn deðilsin.\nOrtaðýn olmasýný istediðin kiþiyi girin;", "Tamam", "Iptal");

		SunucuMesaji(playerid, "%s adlý oyuncuya ortaklýk teklifinde bulundunuz.", OyuncuIsim(ortakid));
		new bilgi[144], id = Isyeri_Yakin(playerid);
		if(id == -1) id = Oyuncu_Isyerinde(playerid);
		SetPVarInt(ortakid, "ortakgonderen", playerid);
		SetPVarInt(ortakid, "ortakisyeri", id);
		format(bilgi, sizeof(bilgi), "%s adlý oyuncu sana iþyeri için ortaklýk teklifinde bulundu.\nID\tÝsim\n%d\t%s", OyuncuIsim(playerid), id, IsyeriBilgi[id][isyeriAd]);
		return DialogGoster(ortakid, DIALOG_ORTAKONAY, DIALOG_STYLE_MSGBOX, "Ýþyeri - Ortak", bilgi, "Kabul", "Red");
	}
	else if(dialogid == DIALOG_ORTAKONAY) {
	    if(!response) {
	        SunucuMesaji(GetPVarInt(playerid, "ortakgonderen"), "%s iþyeri ortak teklifini reddetti.", OyuncuIsim(playerid));
	        SunucuMesaji(playerid, "%s adlý oyuncunun iþyeri ortak teklifini redettin.", OyuncuIsim(GetPVarInt(playerid, "ortakgonderen")));
			DeletePVar(playerid, "ortakgonderen");
			return DeletePVar(playerid, "ortakisyeri");
	    }
		else {
			new id = GetPVarInt(playerid, "ortakisyeri");
			IsyeriBilgi[id][isyeriOrtak] = OyuncuBilgi[playerid][oID];
			Isyeri_Yenile(id);
			Isyeri_Kaydet(id);
	        SunucuMesaji(GetPVarInt(playerid, "ortakgonderen"), "%s iþyeri ortak teklifini kabul etti.", OyuncuIsim(playerid));
	        SunucuMesaji(playerid, "%s adlý oyuncunun iþyeri ortak teklifini kabul ettin.", OyuncuIsim(GetPVarInt(playerid, "ortakgonderen")));
			DeletePVar(playerid, "ortakgonderen");
			return DeletePVar(playerid, "ortakisyeri");
		}
	}
	else if(dialogid == DIALOG_ISYERIKASA) {
		if(!response) return cmd_isyeri(playerid, inputtext);

		switch(listitem) {
		    case 0: DialogGoster(playerid, DIALOG_ISYERIKASA_CEK, DIALOG_STYLE_INPUT, "Ýþyeri - Kasa", "{FFFFFF}Kasadan çekmek istediðin para miktarýný girin;", "Tamam", "Ýptal");
		    case 1: DialogGoster(playerid, DIALOG_ISYERIKASA_YATIR, DIALOG_STYLE_INPUT, "Ýþyeri - Kasa", "{FFFFFF}Kasaya yatýrmak istediðin para miktarýný girin;", "Tamam", "Ýptal");
		}
		return 1;
	}
	else if(dialogid == DIALOG_ISYERIKASA_CEK) {
		if(!response) return cmd_isyeri(playerid, inputtext);

		new miktar;
		if(sscanf(inputtext, "d", miktar)) return DialogGoster(playerid, DIALOG_ISYERIKASA_CEK, DIALOG_STYLE_INPUT, "Ýþyeri - Kasa", "{FFFFFF}Kasadan çekmek istediðin para miktarýný girin;", "Tamam", "Ýptal");
		if(miktar < 1) return DialogGoster(playerid, DIALOG_ISYERIKASA_CEK, DIALOG_STYLE_INPUT, "Ýþyeri - Kasa", "{B70000}HATA: {FFFFFF}Girilen miktar geçersdir.\nKasadan çekmek istediðin para miktarýný girin;", "Tamam", "Ýptal");
		static id;
		id = Isyeri_Yakin(playerid);
		if(id == -1) id = Oyuncu_Isyerinde(playerid);
		if(IsyeriBilgi[id][isyeriKasa] < miktar) return DialogGoster(playerid, DIALOG_ISYERIKASA_CEK, DIALOG_STYLE_INPUT, "Ýþyeri - Kasa", "{B70000}HATA: {FFFFFF}Kasada bu kadar para yok.\nKasadan çekmek istediðin para miktarýný girin;", "Tamam", "Ýptal");

		ParaEkle(playerid, miktar);
		OyuncuKaydet(playerid);
		IsyeriBilgi[id][isyeriKasa] -= miktar;
		Isyeri_Kaydet(id);
		SunucuMesaji(playerid, "Ýþyeri kasandan %s miktarýnda para çektin.", NumaraFormati(miktar));
		return 1;
	}
	else if(dialogid == DIALOG_ISYERIKASA_YATIR) {
		if(!response) return cmd_isyeri(playerid, inputtext);

		new miktar;
		if(sscanf(inputtext, "d", miktar)) return DialogGoster(playerid, DIALOG_ISYERIKASA_YATIR, DIALOG_STYLE_INPUT, "Ýþyeri - Kasa", "{FFFFFF}Kasaya yatýrmak istediðin para miktarýný girin;", "Tamam", "Ýptal");
		if(miktar < 1) return DialogGoster(playerid, DIALOG_ISYERIKASA_YATIR, DIALOG_STYLE_INPUT, "Ýþyeri - Kasa", "{B70000}HATA: {FFFFFF}Girilen miktar geçersizdir.\nKasaya yatýrmak istediðin para miktarýný girin;", "Tamam", "Ýptal");
		if(OyuncuBilgi[playerid][oPara] < miktar) return DialogGoster(playerid, DIALOG_ISYERIKASA_YATIR, DIALOG_STYLE_INPUT, "Ýþyeri - Kasa", "{B70000}HATA: {FFFFFF}Bu paraya sahip deðilsin.\nKasaya yatýrmak istediðin para miktarýný girin;", "Tamam", "Ýptal");

		static id;
		id = Isyeri_Yakin(playerid);
		if(id == -1) id = Oyuncu_Isyerinde(playerid);
		ParaEkle(playerid, -miktar);
		OyuncuKaydet(playerid);
		IsyeriBilgi[id][isyeriKasa] += miktar;
		Isyeri_Kaydet(id);
		SunucuMesaji(playerid, "Ýþyeri kasana %s miktarýnda para yatýrdýn.", NumaraFormati(miktar));
		return 1;
	}
	else if(dialogid == DIALOG_GIRISUCRET) {
	    if(!response) return cmd_isyeri(playerid, inputtext);

		new ucret, id;
		if(sscanf(inputtext, "d", ucret))
		    return DialogGoster(playerid, DIALOG_GIRISUCRET, DIALOG_STYLE_INPUT, "Giriþ Ücreti - Düzenle", "{B70000}UYARI: {FFFFFF}Girilen ücret 0 ilâ 750 dolar arasýnda olmalýdýr.\nLütfen olmasýný istediðin giriþ ücretin aþaðýdaki boþluða girin;", "Tamam", "Kapat");

		if(ucret < 0 || ucret > 750)
		    return DialogGoster(playerid, DIALOG_GIRISUCRET, DIALOG_STYLE_INPUT, "Giriþ Ücreti - Düzenle", "{B70000}UYARI: {FFFFFF}Girilen ücret 0 ilâ 750 dolar arasýnda olmalýdýr.\nLütfen olmasýný istediðin giriþ ücretin aþaðýdaki boþluða girin;", "Tamam", "Kapat");

		id = Isyeri_Yakin(playerid);
		if(id == -1) id = Oyuncu_Isyerinde(playerid);

		IsyeriBilgi[id][iGirisUcret] = ucret;
		Isyeri_Kaydet(id);
		Isyeri_Yenile(id);
		SunucuMesaji(playerid, "%s adlý iþyerinin giriþ ücreti %s olarak deðiþtirildi.", IsyeriBilgi[id][isyeriAd], NumaraFormati(ucret));
	}
	else if(dialogid == DIALOG_BIDON) {
		if(!response) return 0;
		if(OyuncuBilgi[playerid][oBenzinDolduruyor] > -1) return HataMesaji(playerid, "Bidonla þu an iþlem yapýyorsunuz.");

		if(!strcmp(inputtext, "Araca Doldur", true)) {
		    if(Arac_Yakin(playerid) == -1) return HataMesaji(playerid, "Yakýnýnda bir araç yok.");
		    if(OyuncuBilgi[playerid][oBidonBenzin] < 1) return HataMesaji(playerid, "Bidonunda benzin yok.");
		    if(AracBilgi[Arac_Yakin(playerid)][aracBenzin] >= 99.0) return HataMesaji(playerid, "Aracýn benzini full, üzerinde kullanamazsýn.");

		    new aracid = Arac_Yakin(playerid);
		    OyuncuBilgi[playerid][oBenzinDolduruyor] = aracid;
		    SunucuMesaji(playerid, "Araca benzin doldurmaya baþladýn.");
		}
		else if(!strcmp(inputtext, "Bidonu Doldur", true)) {
		    if(OyuncuBilgi[playerid][oBidonBenzin] > 9) return HataMesaji(playerid, "Bidonun zaten dolu.");
		    if(Pompa_Yakin(playerid) == -1) return HataMesaji(playerid, "Bir benzin pompasýna yakýn deðilsin.");
			if(OyuncuBilgi[playerid][oPara] < BenzinPompasi[Pompa_Yakin(playerid)][pompaUcret]) return HataMesaji(playerid, "Benzin ücretini karþýlayamýyorsun.");
			OyuncuBilgi[playerid][oBenzinAliyor] = Pompa_Yakin(playerid);
			for(new i = 0; i < MAKSIMUM_ISYERI; i++) if(BenzinPompasi[Pompa_Yakin(playerid)][pompaIsyeri] == IsyeriBilgi[i][isyeriID]) OyuncuBilgi[playerid][oBenzinIsyeri] = i;
			OyuncuBilgi[playerid][oBenzinDolduruyor] = 0;
			SunucuMesaji(playerid, "Bidona benzin doldurmaya baþladýn.");
		}
	}
	else if(dialogid == DIALOG_CKOL) {
		if(!response) return 0;

		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) kendini ck etti.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ck.txt", "%s", log_icerik);
		OyuncuBilgi[playerid][oCK] = 1;
		if(OyuncuBilgi[playerid][oHapisSure][0] > 0) OyuncuBilgi[playerid][oHapisSure][0] = 0;
		if(OyuncuBilgi[playerid][oHapisSure][1] > 0) OyuncuBilgi[playerid][oHapisSure][1] = 0;
		HapiseAt(playerid);
	}
	else if(dialogid == DIALOG_BANKASIFRE_SIFIRLA) {
	    if(!response) return HataMesaji(playerid, "Þifre sýfýrlama iþleminiz iptal edildi.");
	
	    new kod;
	    if(sscanf(inputtext, "d", kod)) return DialogGoster(playerid, DIALOG_BANKASIFRE_SIFIRLA, DIALOG_STYLE_INPUT, "ZCN Banka", "{FFFFFF}Bankaya tekrar hoþ geldin, görüyoruz ki þifre sýfýrlama için gelmiþsin.\n\nBilgilerini doðrulayabilmemiz için lütfen telefonuna gelen þifreyi gir:", "Tamam", "Kapat");
		if(kod < 1000 || kod > 9999 || OyuncuBilgi[playerid][oDogrulamaKodu] != kod) return DialogGoster(playerid, DIALOG_BANKASIFRE_SIFIRLA, DIALOG_STYLE_INPUT, "ZCN Banka", "{B70000}HATA: {FFFFFF}Doðrulama kodunu yanlýþ girdiniz.\n{FFFFFF}Bankaya tekrar hoþ geldin, görüyoruz ki þifre sýfýrlama için gelmiþsin.\n\n{FFFFFF}Bilgilerini doðrulayabilmemiz için lütfen telefonuna gelen þifreyi gir:", "Tamam", "Kapat");

		new dialog_icerik[512];
		format(dialog_icerik, sizeof(dialog_icerik), "{FFFFFF}Banka hesabýnýza þifre belirlenmemiþ, lütfen kartýnýzda ve banka hesabýnýzda iþlem yapabilmek için 4 haneli sayýlardan bir þifre belirleyin.\n\n");
		strcat(dialog_icerik, "{B70000}NOT: {FFFFFF}Þifrenizi baþkalarýyla paylaþmanýz kötü sonuçlar doðurabilir, lütfen banka personelleri dahil olmak üzere hiç kimseyle þifrenizi paylaþmayýn.");
		return DialogGoster(playerid, DIALOG_BANKASIFRE_BELIRLE, DIALOG_STYLE_PASSWORD, "Þifre Oluþturma", dialog_icerik, "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_BANKASIFRE_BELIRLE) {
	    if(!response) return 0;
	    
	    new sifre;
	    if(sscanf(inputtext, "d", sifre)) {
			new dialog_icerik[512];
			format(dialog_icerik, sizeof(dialog_icerik), "{FFFFFF}Banka hesabýnýza þifre belirlenmemiþ, lütfen kartýnýzda ve banka hesabýnýzda iþlem yapabilmek için 4 haneli sayýlardan bir þifre belirleyin.\n\n");
			strcat(dialog_icerik, "{B70000}NOT: {FFFFFF}Þifrenizi baþkalarýyla paylaþmanýz kötü sonuçlar doðurabilir, lütfen banka personelleri dahil olmak üzere hiç kimseyle þifrenizi paylaþmayýn.");
			return DialogGoster(playerid, DIALOG_BANKASIFRE_BELIRLE, DIALOG_STYLE_PASSWORD, "Þifre Oluþturma", dialog_icerik, "Tamam", "Kapat");
		}
		if(sifre < 0000 || sifre > 9999) {
			new dialog_icerik[512];
			format(dialog_icerik, sizeof(dialog_icerik), "{FFFFFF}Banka hesabýnýza þifre belirlenmemiþ, lütfen kartýnýzda ve banka hesabýnýzda iþlem yapabilmek için 4 haneli sayýlardan bir þifre belirleyin.\n");
			strcat(dialog_icerik, "{B70000}HATA: {FFFFFF}Þifre 4 haneli sayýlardan oluþmalýdýr.\n{B70000}NOT: {FFFFFF}Þifrenizi baþkalarýyla paylaþmanýz kötü sonuçlar doðurabilir, lütfen banka personelleri dahil olmak üzere hiç kimseyle þifrenizi paylaþmayýn.");
			return DialogGoster(playerid, DIALOG_BANKASIFRE_BELIRLE, DIALOG_STYLE_PASSWORD, "Þifre Oluþturma", dialog_icerik, "Tamam", "Kapat");
	    }
	    
	    SunucuMesaji(playerid, "Þifre belirleme iþleminiz baþarýyla gerçekleþti.");
	    OyuncuBilgi[playerid][oBankaSifre] = sifre;
	    OyuncuKaydet(playerid);
	    new sorgu[512];
		format(sorgu, sizeof(sorgu), "INSERT INTO `bankaislemler` (`Islem`, `Tarih`, `HesapNumarasi`) VALUES ('%s', '%s', '%d')", SQL_ReturnEscaped("Þifre Belirleme"), Tarih(), OyuncuBilgi[playerid][oHesapNumarasi]);
		mysql_query(mysqlB, sorgu);
	    cmd_banka(playerid, inputtext);
	    return 1;
	}
	else if(dialogid == DIALOG_BANKASIFRE) {
	    if(!response) return 0;
	    
		new id = Oyuncu_Binada(playerid), baslik[64];
		if(ATM_Yakin(playerid) != -1) format(baslik, sizeof(baslik), "ATM");
		else if(id != -1) format(baslik, sizeof(baslik), "%s", BinaBilgi[id][bIsim]);
		else format(baslik, sizeof(baslik), "Viga");
		
		if(id != -1 && BinaBilgi[id][binaTur] != 1 && ATM_Yakin(playerid) == -1) return HataMesaji(playerid, "Bankada veya bir ATM'ye yakýn deðilsin.");
		if(OyuncuBilgi[playerid][oHesapNumarasi] == 0) return HataMesaji(playerid, "Banka hesabýn yok.");

		new sifre;
		if(sscanf(inputtext, "d", sifre)) return DialogGoster(playerid, DIALOG_BANKASIFRE, DIALOG_STYLE_PASSWORD, baslik, "{FFFFFF}Bankaya tekrar hoþ geldin, hesabýnda iþlem yapabilmek için lütfen þifreni gir;", "Tamam", "Kapat");
		if(sifre != OyuncuBilgi[playerid][oBankaSifre]) return DialogGoster(playerid, DIALOG_BANKASIFRE, DIALOG_STYLE_PASSWORD, baslik, "{FFFFFF}Hatalý þifre giriþi yaptýnýz, hesabýnda iþlem yapabilmek için lütfen þifreni gir;", "Tamam", "Kapat");
		    
		DialogGoster(playerid, DIALOG_BANKA, DIALOG_STYLE_TABLIST_HEADERS, baslik, "Ýþlem\nHesap Detaylarý\nPara Çek\nPara Yatýr\nHavale", "Seç", "Iptal");
		return true;
	}
	else if(dialogid == DIALOG_BANKA) {
		if(!response) return false;

		new id = Oyuncu_Binada(playerid), isim[64];
		if(ATM_Yakin(playerid) != -1) format(isim, sizeof(isim), "ATM");
		else if(id != -1) format(isim, sizeof(isim), "%s", BinaBilgi[id][bIsim]);
		else format(isim, sizeof(isim), "ZCN Banka - EFT & Havale");

		if(!strcmp(inputtext, "Hesap Detaylarý", true)) {
		    new oyuncu_isim[MAX_PLAYER_NAME + 1], icerik[144];
		    GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		    for(new i = 0, len = strlen(oyuncu_isim); i < len; i ++) if(oyuncu_isim[i] == '_') oyuncu_isim[i] = ' ';

		    format(icerik, sizeof(icerik), "{FFFFFF}Hesap Sahibi: \t%s\nHesap NO: \t%d\nBakiye: \t\t%s", oyuncu_isim, OyuncuBilgi[playerid][oHesapNumarasi], NumaraFormati(OyuncuBilgi[playerid][oBankaPara]));
			DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST, "Hesap Detaylarý", icerik, "Kapat", "");
		}
		else if(!strcmp(inputtext, "Para Çek", true)) return DialogGoster(playerid, DIALOG_BANKA_PARACEK, DIALOG_STYLE_INPUT, isim, "Lütfen hesabýndan çekmek istediðin para miktarýný girin;", "Çek", "Ýptal");
		else if(!strcmp(inputtext, "Para Yatýr", true)) {
		    if(OyuncuBilgi[playerid][oPara] < 1) return HataMesaji(playerid, "Üzerinde para yok, bu seçeneði kullanamazsýn.");

			return DialogGoster(playerid, DIALOG_BANKA_PARAYATIR, DIALOG_STYLE_INPUT, isim, "Lütfen hesabýna yatýrmak istediðiniz para miktarýný girin;", "Yatýr", "Ýptal");
		}
		else if(!strcmp(inputtext, "Havale", true)) {
		    if(OyuncuBilgi[playerid][oBankaPara] < 0) return HataMesaji(playerid, "Banka hesabýnda para yok.");

			return DialogGoster(playerid, DIALOG_BANKA_TRANSFER, DIALOG_STYLE_INPUT, isim, "Lütfen transfer yapacaðýnýz hesap numarasýný girin;", "Seç", "Ýptal");
		}
	}
	else if(dialogid == DIALOG_BANKA_PARACEK) {
	    if(!response) return 0;

		new id = Oyuncu_Binada(playerid), miktar, isim[64];
		if(ATM_Yakin(playerid) != -1) format(isim, sizeof(isim), "ATM");
		else if(id != -1) format(isim, sizeof(isim), "%s", BinaBilgi[id][bIsim]);
		else format(isim, sizeof(isim), "ZCN Banka - EFT & Havale");

		if(sscanf(inputtext, "d", miktar))
		    return DialogGoster(playerid, DIALOG_BANKA_PARACEK, DIALOG_STYLE_INPUT, isim, "Lütfen hesabýndan çekmek istediðin para miktarýný girin;", "Çek", "Ýptal");

		if(OyuncuBilgi[playerid][oBankaPara] < miktar) return HataMesaji(playerid, "Banka hesabýnda girilen miktarda para yok.");
		if(miktar < 1) return HataMesaji(playerid, "Girilen miktar geçersiz.");
		//if(ATM_Yakin(playerid) != -1 && ATMBilgi[ATM_Yakin(playerid)][atmPara] < miktar) return HataMesaji(playerid, "ATM'de bu kadar para bulunmuyor.");

		OyuncuBilgi[playerid][oBankaPara] -= miktar;
	    new sorgu[512], islem[128];
	    format(islem, sizeof(islem), "Para Çekme (-%s)", NumaraFormati(miktar));
		format(sorgu, sizeof(sorgu), "INSERT INTO `bankaislemler` (`Islem`, `Tarih`, `HesapNumarasi`, `Tur`) VALUES ('%s', '%s', '%d', '1')", SQL_ReturnEscaped(islem), Tarih(), OyuncuBilgi[playerid][oHesapNumarasi]);
		mysql_query(mysqlB, sorgu);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), banka hesabýndan %s çekti.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], NumaraFormati(miktar));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/para.txt", "%s", log_icerik);
		ParaEkle(playerid, miktar);
		/*if(ATM_Yakin(playerid) != -1) {
			ATMBilgi[ATM_Yakin(playerid)][atmPara] -= miktar;
			ATM_Kaydet(ATM_Yakin(playerid));
			ATM_Yenile(ATM_Yakin(playerid));
		}*/
		SunucuMesaji(playerid, "Banka hesabýndan %s miktarýnda para çektin.", NumaraFormati(miktar));
	}
	else if(dialogid == DIALOG_BANKA_PARAYATIR) {
	    if(!response) return 0;

		new id = Oyuncu_Binada(playerid), isim[64], miktar;
		if(ATM_Yakin(playerid) != -1) format(isim, sizeof(isim), "ATM");
		else if(id != -1) format(isim, sizeof(isim), "%s", BinaBilgi[id][bIsim]);
		else format(isim, sizeof(isim), "Viga");

		if(sscanf(inputtext, "d", miktar))
		    return DialogGoster(playerid, DIALOG_BANKA_PARAYATIR, DIALOG_STYLE_INPUT, isim, "Lütfen hesabýna yatýrmak istediðin para miktarýný girin;", "Yatýr", "Ýptal");

		if(OyuncuBilgi[playerid][oPara] < miktar)
		    return HataMesaji(playerid, "Üzerinde girdiðin miktarda para yok.");

		if(miktar < 1)
		    return HataMesaji(playerid, "Girilen miktar geçersiz.");

		OyuncuBilgi[playerid][oBankaPara] += miktar;
	    new sorgu[512], islem[128];
	    format(islem, sizeof(islem), "Para Yatýrma (+%s)", NumaraFormati(miktar));
		format(sorgu, sizeof(sorgu), "INSERT INTO `bankaislemler` (`Islem`, `Tarih`, `HesapNumarasi`, `Tur`) VALUES ('%s', '%s', '%d', '2')", SQL_ReturnEscaped(islem), Tarih(), OyuncuBilgi[playerid][oHesapNumarasi]);
		mysql_query(mysqlB, sorgu);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), banka hesabýna %s yatýrdý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], NumaraFormati(miktar));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/para.txt", "%s", log_icerik);
		ParaEkle(playerid, -miktar);
		/*if(ATM_Yakin(playerid) != -1) {
			ATMBilgi[ATM_Yakin(playerid)][atmPara] += miktar;
			ATM_Kaydet(ATM_Yakin(playerid));
			ATM_Yenile(ATM_Yakin(playerid));
		}*/
		SunucuMesaji(playerid, "Banka hesabýna %s miktarýnda para yatýrdýn.", NumaraFormati(miktar));
	}
	else if(dialogid == DIALOG_BANKA_TRANSFER) {
	    if(!response) return 0;

		new id = Oyuncu_Binada(playerid), hesapno, sayi = 0, isim[64];
		sayi = 0;
		if(ATM_Yakin(playerid) != -1) format(isim, sizeof(isim), "ATM");
		else if(id != -1) format(isim, sizeof(isim), "%s", BinaBilgi[id][bIsim]);
		else format(isim, sizeof(isim), "ZCN Banka - EFT & Havale");
		
		if(sscanf(inputtext, "d", hesapno))
		    return DialogGoster(playerid, DIALOG_BANKA_TRANSFER, DIALOG_STYLE_INPUT, isim, "{B70000}HATA: {FFFFFF}Geçersiz hesap numarasý!\nLütfen transfer yapacaðýn hesap numarasýný girin;", "Seç", "Ýptal");

		new hesapnosayi = strlen(inputtext);
		if(hesapnosayi < 6)
		    return DialogGoster(playerid, DIALOG_BANKA_TRANSFER, DIALOG_STYLE_INPUT, isim, "{B70000}HATA: {FFFFFF}Geçersiz hesap numarasý!\nLütfen transfer yapacaðýn hesap numarasýný girin;", "Seç", "Ýptal");

		foreach(new i : Player) if(OyuncuBilgi[i][oHesapNumarasi] == hesapno) {
		    SetPVarInt(playerid, "TransferEdilecekID", i);
		    DialogGoster(playerid, DIALOG_BANKA_TRANSFERY, DIALOG_STYLE_INPUT, isim, "Transfer yapmak istediðin miktarý girin;", "Tamam", "Ýptal");
			sayi++;
		}
		if(!sayi) return DialogGoster(playerid, DIALOG_BANKA_TRANSFER, DIALOG_STYLE_INPUT, isim, "{B70000}HATA: {FFFFFF}Geçersiz hesap numarasý!\nLütfen transfer yapacaðýn hesap numarasýný girin;", "Seç", "Ýptal");
	}
	else if(dialogid == DIALOG_BANKA_TRANSFERY) {
	    if(!response) return 0;

		new id = Oyuncu_Binada(playerid), miktar, isim[64];

		if(ATM_Yakin(playerid) != -1) format(isim, sizeof(isim), "ATM");
		else if(id != -1) format(isim, sizeof(isim), "%s", BinaBilgi[id][bIsim]);
		else format(isim, sizeof(isim), "ZCN Banka - EFT & Havale");

		if(sscanf(inputtext, "d", miktar))
		    return DialogGoster(playerid, DIALOG_BANKA_TRANSFERY, DIALOG_STYLE_INPUT, isim, "{B70000}HATA: {FFFFFF}Lütfen geçerli bir miktar girin!\nTransfer yapmak istediðin miktarý girin;", "Tamam", "Ýptal");

		if(OyuncuBilgi[playerid][oBankaPara] < miktar)
		    return DialogGoster(playerid, DIALOG_BANKA_TRANSFERY, DIALOG_STYLE_INPUT, isim, "{B70000}HATA: {FFFFFF}Banka hesabýnda bu kadar para yok!\nTransfer yapmak istediðin miktarý girin;", "Tamam", "Ýptal");

		if(miktar < 1)
		    return DialogGoster(playerid, DIALOG_BANKA_TRANSFERY, DIALOG_STYLE_INPUT, isim, "{B70000}HATA: {FFFFFF}Girilen miktar geçersiz.\nTransfer yapmak istediðin miktarý girin;", "Tamam", "Ýptal");

		new oyuncuid = GetPVarInt(playerid, "TransferEdilecekID");
		if(IsPlayerConnected(oyuncuid)) {
		    new sorgu[512], islem[128];
		    format(islem, sizeof(islem), "Giden Havale: %d (-%s)", OyuncuBilgi[oyuncuid][oHesapNumarasi], NumaraFormati(miktar));
			format(sorgu, sizeof(sorgu), "INSERT INTO `bankaislemler` (`Islem`, `Tarih`, `HesapNumarasi`, `Tur`) VALUES ('%s', '%s', '%d', '1')", SQL_ReturnEscaped(islem), Tarih(), OyuncuBilgi[playerid][oHesapNumarasi]);
			mysql_query(mysqlB, sorgu);
		    format(islem, sizeof(islem), "Gelen Havale: %d (+%s)", OyuncuBilgi[playerid][oHesapNumarasi], NumaraFormati(miktar));
			format(sorgu, sizeof(sorgu), "INSERT INTO `bankaislemler` (`Islem`, `Tarih`, `HesapNumarasi`, `Tur`) VALUES ('%s', '%s', '%d', '2')", SQL_ReturnEscaped(islem), Tarih(), OyuncuBilgi[oyuncuid][oHesapNumarasi]);
			mysql_query(mysqlB, sorgu);
			OyuncuBilgi[oyuncuid][oBankaPara] += miktar;
			OyuncuBilgi[playerid][oBankaPara] -= miktar;
			SunucuMesaji(oyuncuid, "%d numaralý banka hesabýndan banka hesabýna %s miktarýnda transfer gerçekleþti.", OyuncuBilgi[playerid][oHesapNumarasi], NumaraFormati(miktar));
			SunucuMesaji(playerid, "%d numaralý banka hesabýna %s miktarýnda transfer gerçekleþtirdin.", OyuncuBilgi[oyuncuid][oHesapNumarasi], NumaraFormati(miktar));
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], hedef_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			GetPlayerName(oyuncuid, hedef_isim, sizeof(hedef_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiye %s transfer etti.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], hedef_isim, OyuncuBilgi[oyuncuid][oID], NumaraFormati(miktar));
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/para.txt", "%s", log_icerik);
			DeletePVar(playerid, "TransferEdilecekID");
		}
		else if(!IsPlayerConnected(oyuncuid)) {
			DeletePVar(playerid, "TransferEdilecekID");
		    HataMesaji(playerid, "Girilen banka hesabýnýn sahibi artýk aktif deðil.");
		    return 1;
		}
	}
	else if(dialogid == DIALOG_PAINTBALL) {
	    if(!response) return 0;
	
	    if(!strcmp(inputtext, "Lobi Kur", true)) {
	        if(Paintball_ID(playerid) != -1) return HataMesaji(playerid, "Zaten bir lobi kurmuþsun.");
	        if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1726.88, -1636.61, 20.22)) return HataMesaji(playerid, "Paintball noktasýnda deðilsin.");
	        
	        DialogGoster(playerid, DIALOG_PAINTBALL_ARENA, DIALOG_STYLE_TABLIST, "cPaintball: Arena", "Depo\nLVPD\nRC", "Seç", "Kapat");
	    }
	    else if(!strcmp(inputtext, "Ayrýl", true)) {
	        if(OyuncuBilgi[playerid][oPaintball] == -1) return HataMesaji(playerid, "Paintballda deðilsin.");

			foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oPaintball] == OyuncuBilgi[playerid][oPaintball]) SendClientMessageEx(i, RENK_BEYAZ, "{%06x}[PAINTBALL]: {FFFFFF}%s arenadan ayrýldý.", RENK_PAINTBALL >>> 8, OyuncuIsim(playerid));

		    ResetPlayerWeapons(playerid);
		    OyuncuBilgi[playerid][oPaintball] = -1;
		    SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[PAINTBALL-ISTATISTIK]: {FFFFFF}%s öldürme, %s ölüm.", RENK_PAINTBALL >>> 8, NumaraFormati(OyuncuBilgi[playerid][oPBOldurme], ""), NumaraFormati(OyuncuBilgi[playerid][oPBOlum], ""));
			OyuncuBilgi[playerid][oPBOldurme] = 0;
			OyuncuBilgi[playerid][oPBOlum] = 0;
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerInterior(playerid, 0);
		    OyuncuPosDegistir(playerid, 1726.88, -1636.61, 20.22);
		    SilahAyarla(playerid);
			CanDuzenle(playerid, EskiVeriler[playerid][eskiCan]);
			ZirhDuzenle(playerid, EskiVeriler[playerid][eskiZirh]);
			return 1;
	    }
	    else if(!strcmp(inputtext, "Lobiler", true)) {
	        if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1726.88, -1636.61, 20.22)) return HataMesaji(playerid, "Paintball noktasýnda deðilsin.");
	        new icerik[256 * MAKSIMUM_PAINTBALL], arena[32], sayi = 0;
	        format(icerik, sizeof(icerik), "ID\tKurucu\tArena\n");
			for(new i = 0; i != MAKSIMUM_PAINTBALL; i ++) if(PaintballBilgi[i][pKullanimda] == true && IsPlayerConnected(PaintballBilgi[i][paintballSahip])) {
			    switch(PaintballBilgi[i][paintballArena]) {
					case 1: arena = "Depo";
					case 2: arena = "LVPD";
					case 3: arena = "RC";
					default: arena = "Depo";
			    }
				format(icerik, sizeof(icerik), "%s%d\t%s\t%s\n", icerik, i, OyuncuIsim(PaintballBilgi[i][paintballSahip]), arena), sayi++;
			}
			if(sayi == 0) return HataMesaji(playerid, "Kurulmuþ lobi yok.");
			DialogGoster(playerid, DIALOG_PAINTBALL_LOBILER, DIALOG_STYLE_TABLIST_HEADERS, "cPaintball: Lobiler", icerik, "Katýl", "Kapat");
	    }
	    else if(!strcmp(inputtext, "Lobini Kapat", true)) {
	        if(OyuncuBilgi[playerid][oPaintball] == -1) return HataMesaji(playerid, "Paintballda deðilsin.");
	        if(Paintball_ID(playerid) == -1) return HataMesaji(playerid, "Bir sorun oluþtu.");

			ResetPlayerWeapons(playerid);
			new id = Paintball_ID(playerid);
			PaintballBilgi[id][pKullanimda] = false;
			PaintballBilgi[id][paintballSahip] = INVALID_PLAYER_ID;
			PaintballBilgi[id][paintballSure] = 0;
			PaintballBilgi[id][paintballArena] = 0;
		    foreach(new o : Player) if(OyuncuBilgi[o][oGiris] == true && OyuncuBilgi[o][oPaintball] == id && o != playerid) {
				SendClientMessageEx(o, RENK_BEYAZ, "{%06x}[PAINTBALL]: {FFFFFF}%s lobiyi kapattý.", RENK_PAINTBALL >>> 8, OyuncuIsim(playerid));
				SendClientMessageEx(o, RENK_BEYAZ, "{%06x}[PAINTBALL-ISTATISTIK]: {FFFFFF}%s öldürme, %s ölüm.", RENK_PAINTBALL >>> 8, NumaraFormati(OyuncuBilgi[o][oPBOldurme], ""), NumaraFormati(OyuncuBilgi[o][oPBOlum], ""));
				ResetPlayerWeapons(o);
				CanDuzenle(o, EskiVeriler[o][eskiCan]);
				ZirhDuzenle(o, EskiVeriler[o][eskiZirh]);
			   	OyuncuBilgi[o][oPaintball] = -1;
				OyuncuBilgi[o][oPBOldurme] = 0;
				OyuncuBilgi[o][oPBOlum] = 0;
			    SetPlayerVirtualWorld(o, 0);
			    SetPlayerInterior(o, 0);
			    OyuncuPosDegistir(o, 1726.88, -1636.61, 20.22);
			    SilahAyarla(o);
			}
			SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[PAINTBALL]: {FFFFFF}%s lobiyi kapattý.", RENK_PAINTBALL >>> 8, OyuncuIsim(playerid));
			SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[PAINTBALL-ISTATISTIK]: {FFFFFF}%s öldürme, %s ölüm.", RENK_PAINTBALL >>> 8, NumaraFormati(OyuncuBilgi[playerid][oPBOldurme], ""), NumaraFormati(OyuncuBilgi[playerid][oPBOlum], ""));
			CanDuzenle(playerid, EskiVeriler[playerid][eskiCan]);
			ZirhDuzenle(playerid, EskiVeriler[playerid][eskiZirh]);
			OyuncuBilgi[playerid][oPaintball] = -1;
			OyuncuBilgi[playerid][oPBOldurme] = 0;
			OyuncuBilgi[playerid][oPBOlum] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			OyuncuPosDegistir(playerid, 1726.88, -1636.61, 20.22);
			SilahAyarla(playerid);
	    }
	}
	else if(dialogid == DIALOG_PAINTBALL_ARENA) {
		if(!response) return SunucuMesaji(playerid, "Paintball lobisi kurmaktan vazgeçtin.");
		if(Paintball_ID(playerid) != -1) return HataMesaji(playerid, "Zaten bir lobi kurmuþsun.");
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1726.88, -1636.61, 20.22)) return HataMesaji(playerid, "Paintball noktasýnda deðilsin.");
		if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçtayken paintball kullanamazsýn.");
		if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
		if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Dondurulma etkisindeyken bu komutu kullanamazsýn.");
		if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýnda bu komutu kullanamazsýn.");
		if(OyuncuBilgi[playerid][oDestek] == true) return HataMesaji(playerid, "Desteðin açýkken bu komutu kullanamazsýn.");
		if(OyuncuBilgi[playerid][oTaser] == true) return HataMesaji(playerid, "Taserin açýkken paintballa giremezsin.");
		if(OyuncuBilgi[playerid][oBeanbag] == true) return HataMesaji(playerid, "Beanbangýn üzerindeyken paintballa giremezsin.");
		if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bunu yapamazsýn.");
		
		for(new i = 0; i != MAKSIMUM_PAINTBALL; i ++) if(PaintballBilgi[i][pKullanimda] == false) {
			PaintballBilgi[i][pKullanimda] = true;
			PaintballBilgi[i][paintballSahip] = playerid;
			PaintballBilgi[i][paintballSure] = gettime() + 300;
			PaintballBilgi[i][paintballArena] = listitem + 1;
		    SilahKaydet(playerid);
			GetPlayerHealth(playerid, EskiVeriler[playerid][eskiCan]);
			GetPlayerArmour(playerid, EskiVeriler[playerid][eskiZirh]);
		    OyuncuBilgi[playerid][oPaintball] = i;
		    Paintball_Arena(playerid);
		    SunucuMesaji(playerid, "Lobiyi kapatmak için /paintball komutunu kullanabilirsin.");
			return 1;
		}
		SunucuMesaji(playerid, "Tüm paintball slotlarý dolu.");
	}
	else if(dialogid == DIALOG_PAINTBALL_LOBILER) {
	    if(!response) return 0;
	    
	    new id = strval(inputtext);
	    if(PaintballBilgi[id][pKullanimda] == false) return HataMesaji(playerid, "Bir sorun oluþtu.");
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1726.88, -1636.61, 20.22)) return HataMesaji(playerid, "Paintball noktasýnda deðilsin.");
	    if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Zaten bir paintballdasýn, önce /paintball yazarak ayrýlmalýsýn.");
	    
	    SilahKaydet(playerid);
	    OyuncuBilgi[playerid][oPaintball] = id;
	    Paintball_Arena(playerid);
		GetPlayerHealth(playerid, EskiVeriler[playerid][eskiCan]);
		GetPlayerArmour(playerid, EskiVeriler[playerid][eskiZirh]);
	    foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oPaintball] == id) SendClientMessageEx(i, RENK_BEYAZ, "{%06x}[PAINTBALL]: {FFFFFF}%s arenaya katýldý.", RENK_PAINTBALL >>> 8, OyuncuIsim(playerid));
	    SunucuMesaji(playerid, "Arenadan ayrýlmak için /paintball komutunu kullanabilirsin.");
	}
	else if(dialogid == DIALOG_YARIS) {
	    if(!response) return 0;
	    
	    if(!strcmp(inputtext, "Yarýþ Baþlat", true)) {
	        if(Yaris_ID(playerid) != -1) return HataMesaji(playerid, "Bir yarýþ baþlatmýþsýn, öncelikle onu bitirmelisin.");
	    
			for(new i = 0; i != MAKSIMUM_YARIS; i ++) if(YarisBilgi[i][yarisKullanimda] == false) {
				YarisBilgi[i][yarisKullanimda] = true;
				YarisBilgi[i][yarisTur] = 1;
				YarisBilgi[i][yarisSahip] = playerid;
				YarisBilgi[i][yarisMaksCP] = 1;
				YarisBilgi[i][yarisBasladi] = false;
				YarisBilgi[i][yarisSiralama] = 0;
				for (new s = 0; s != 60; s++) YarisBilgi[i][yarisPos][s] = 0.0;
				SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Bir yarýþ baþlattýn, ayarlarý /yaris komutuyla yapabilirsin.", RENK_YARIS >>> 8);
				return 1;
			}
	    }
	    else if(!strcmp(inputtext, "Yarýþ Bitir", true)) {
	        if(Yaris_ID(playerid) == -1) return HataMesaji(playerid, "Bir yarýþ baþlatmadan bu seçeneði kullanamazsýn.");

			new id = Yaris_ID(playerid);
			if(id == -1) return HataMesaji(playerid, "Bir yarýþ baþlatmadan bu seçeneði kullanamazsýn.");
			YarisBilgi[id][yarisKullanimda] = false;
			YarisBilgi[id][yarisTur] = 1;
			YarisBilgi[id][yarisSahip] = INVALID_PLAYER_ID;
			YarisBilgi[id][yarisMaksCP] = 1;
			YarisBilgi[id][yarisBasladi] = false;
			YarisBilgi[id][yarisSiralama] = 0;
			for (new s = 0; s != 60; s++) YarisBilgi[id][yarisPos][s] = 0.0;
			foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oYaris] == id) OyuncuBilgi[i][oYaris] = -1, DisablePlayerCheckpoint(i), SendClientMessageEx(i, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþ sahibi tarafýndan bitirildi.", RENK_YARIS >>> 8);
			SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý bitirdin.", RENK_YARIS >>> 8);
			return 1;
	    }
	    else if(!strcmp(inputtext, "Yarýþcýlar", true)) {
	        if(Yaris_ID(playerid) == -1) return HataMesaji(playerid, "Bir yarýþ baþlatmadan bu seçeneði kullanamazsýn.");
	        if(YarisBilgi[Yaris_ID(playerid)][yarisBasladi] == true) return HataMesaji(playerid, "Yarýþ baþladýktan sonra bu seçeneði kullanamazsýn.");
	        
	        new icerik[1024], sayi = 0;
	        format(icerik, sizeof(icerik), "ID\tÝsim\nHerkesi At\t\n");
	        foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oYaris] == Yaris_ID(playerid)) format(icerik, sizeof(icerik), "%s%d\t%s\n", icerik, i, OyuncuIsim(i)), sayi++;
	        if(sayi == 0) return HataMesaji(playerid, "Yarýþýnda kimse yok."), cmd_yaris(playerid, "");
	        DialogGoster(playerid, DIALOG_YARIS_OYUNCULAR, DIALOG_STYLE_TABLIST_HEADERS, "Yarýþçýlar", icerik, "At", "< Geri");
	    }
	    else if(!strcmp(inputtext, "Tur Sayýsý", true)) {
	        if(Yaris_ID(playerid) == -1) return HataMesaji(playerid, "Bir yarýþ baþlatmadan bu seçeneði kullanamazsýn.");
	        if(YarisBilgi[Yaris_ID(playerid)][yarisBasladi] == true) return HataMesaji(playerid, "Yarýþ baþladýktan sonra bu seçeneði kullanamazsýn.");

			return DialogGoster(playerid, DIALOG_YARIS_TURSAYISI, DIALOG_STYLE_TABLIST_HEADERS, "Yarýþ", "Tur Sayýsý:\n{FFFFFF}1\n{FFFFFF}2\n{FFFFFF}3\n", "Seç", "< Geri");
	    }
	    else if(!strcmp(inputtext, "Maksimum CP", true)) {
	        if(Yaris_ID(playerid) == -1) return HataMesaji(playerid, "Bir yarýþ baþlatmadan bu seçeneði kullanamazsýn.");
	        if(YarisBilgi[Yaris_ID(playerid)][yarisBasladi] == true) return HataMesaji(playerid, "Yarýþ baþladýktan sonra bu seçeneði kullanamazsýn.");

			return DialogGoster(playerid, DIALOG_YARIS_CPSAYISI, DIALOG_STYLE_TABLIST_HEADERS, "Yarýþ", "Maksimum CP Sayýsý:\n{FFFFFF}1\n{FFFFFF}2\n{FFFFFF}3\n{FFFFFF}4\n{FFFFFF}5\n{FFFFFF}6\n{FFFFFF}7\n{FFFFFF}8\n{FFFFFF}9\n{FFFFFF}10\n{FFFFFF}11\n{FFFFFF}12\n{FFFFFF}13\n{FFFFFF}14\n{FFFFFF}15\n{FFFFFF}16\n{FFFFFF}17\n{FFFFFF}18\n{FFFFFF}19\n{FFFFFF}20\n", "Seç", "Kapat");
	    }
	    else if(!strcmp(inputtext, "Oyuncu Davet", true)) {
	        if(Yaris_ID(playerid) == -1) return HataMesaji(playerid, "Bir yarýþ baþlatmadan bu seçeneði kullanamazsýn.");
	        if(YarisBilgi[Yaris_ID(playerid)][yarisBasladi] == true) return HataMesaji(playerid, "Yarýþ baþladýktan sonra bu seçeneði kullanamazsýn.");
	        if(OyuncuBilgi[playerid][oYarisDavet] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Daha önce bir yarýþ daveti yapmýþsýn, ilk önce onu iptal etmelisin. (/iptal)");

			return DialogGoster(playerid, DIALOG_YARIS_DAVET, DIALOG_STYLE_INPUT, "Yarýþ", "{FFFFFF}Lütfen davet etmek istediðiniz oyuncunun ismini veya ID'sini giriniz;", "Seç", "< Geri");
	    }
	    else if(!strcmp(inputtext, "CheckPoint Düzenle", true)) {
	        if(Yaris_ID(playerid) == -1) return HataMesaji(playerid, "Bir yarýþ baþlatmadan bu seçeneði kullanamazsýn.");
	        
			new id = Yaris_ID(playerid), icerik[512];
			if(YarisBilgi[id][yarisBasladi] == true) return HataMesaji(playerid, "Yarýþ baþladýktan sonra bu seçeneði kullanamazsýn.");
			format(icerik, sizeof(icerik), "Checkpoint Düzenle:\n");
			for(new i = 0; i < YarisBilgi[id][yarisMaksCP]; i++) format(icerik, sizeof(icerik), "%s%d. Checkpoint\n", icerik, i + 1);
			DialogGoster(playerid, DIALOG_YARIS_CPDUZENLE, DIALOG_STYLE_TABLIST_HEADERS, "Yarýþ", icerik, "Seç", "Kapat");
		}
	    else if(!strcmp(inputtext, "Baþlat", true)) {
	        if(Yaris_ID(playerid) == -1) return HataMesaji(playerid, "Bir yarýþ baþlatmadan bu seçeneði kullanamazsýn.");

			new id = Yaris_ID(playerid), sayi = 0;
			if(YarisBilgi[id][yarisBasladi] == true) return HataMesaji(playerid, "Yarýþ baþladýktan sonra bu seçeneði kullanamazsýn.");
			for(new i = 0; i < YarisBilgi[id][yarisMaksCP] * 3; i++) if(YarisBilgi[id][yarisPos][i] == 0.0) return HataMesaji(playerid, "Ayarlanmamýþ CheckPointleriniz var, /yaris menüsünden ayarlayabilirsiniz.");
			foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oYaris] == id) sayi++;
			if(sayi == 0) return HataMesaji(playerid, "Yarýþýnda kimse yok, /yaris menüsünden davet edebilirsin.");
			
			foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oYaris] == id) {
				OyuncuBilgi[i][oYarisCP] = 1;
				OyuncuBilgi[i][oYarisTur] = 1;
				SetPlayerCheckpoint(i, YarisBilgi[id][yarisPos][0], YarisBilgi[id][yarisPos][1], YarisBilgi[id][yarisPos][2], 10.0);
				SunucuMesaji(i, "Yarýþ baþladý, checkpointleri takip etmen yeterli!");
			}
			YarisBilgi[id][yarisBasladi] = true;
			SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý baþlattýn, birincisi sana iletilecek.", RENK_YARIS >>> 8);
			return 1;
		}
	}
	else if(dialogid == DIALOG_YARIS_OYUNCULAR) {
	    if(!response) return cmd_yaris(playerid, "");
	
	    if(!strcmp(inputtext, "Herkesi At", true)) {
			foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oYaris] == Yaris_ID(playerid)) OyuncuBilgi[i][oYaris] = -1, SendClientMessageEx(i, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý sahibi tarafýndan yarýþtan atýldýn.", RENK_YARIS >>> 8);
            SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþtaki herkesi attýn.", RENK_YARIS >>> 8);
            cmd_yaris(playerid, "");
			return 1;
	    }
        foreach(new i : Player) if(strval(inputtext) == i && OyuncuBilgi[i][oYaris] == Yaris_ID(playerid)) {
			OyuncuBilgi[i][oYaris] = -1;
			SendClientMessageEx(i, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþý sahibi tarafýndan yarýþtan atýldýn.", RENK_YARIS >>> 8);
			SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s adlý kiþiyi yarýþtan attýn.", RENK_YARIS >>> 8, OyuncuIsim(i));
			cmd_yaris(playerid, "");
			return 1;
		}
		HataMesaji(playerid, "Bir sorun oluþtu."), cmd_yaris(playerid, "");
	}
	else if(dialogid == DIALOG_YARIS_CPDUZENLE) {
		if(!response) return cmd_yaris(playerid, "");
		
		new Float:oyuncu_pos[3], id = Yaris_ID(playerid);
		if(id == -1) return HataMesaji(playerid, "Bir sorun oluþtu.");
		GetPlayerPos(playerid, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2]);
		switch(listitem) {
		    case 0: YarisBilgi[id][yarisPos][0] = oyuncu_pos[0], YarisBilgi[id][yarisPos][1] = oyuncu_pos[1], YarisBilgi[id][yarisPos][2] = oyuncu_pos[2];
		    case 1: YarisBilgi[id][yarisPos][3] = oyuncu_pos[0], YarisBilgi[id][yarisPos][4] = oyuncu_pos[1], YarisBilgi[id][yarisPos][5] = oyuncu_pos[2];
		    case 2: YarisBilgi[id][yarisPos][6] = oyuncu_pos[0], YarisBilgi[id][yarisPos][7] = oyuncu_pos[1], YarisBilgi[id][yarisPos][8] = oyuncu_pos[2];
		    case 3: YarisBilgi[id][yarisPos][9] = oyuncu_pos[0], YarisBilgi[id][yarisPos][10] = oyuncu_pos[1], YarisBilgi[id][yarisPos][11] = oyuncu_pos[2];
		    case 4: YarisBilgi[id][yarisPos][12] = oyuncu_pos[0], YarisBilgi[id][yarisPos][13] = oyuncu_pos[1], YarisBilgi[id][yarisPos][14] = oyuncu_pos[2];
		    case 5: YarisBilgi[id][yarisPos][15] = oyuncu_pos[0], YarisBilgi[id][yarisPos][16] = oyuncu_pos[1], YarisBilgi[id][yarisPos][17] = oyuncu_pos[2];
		    case 6: YarisBilgi[id][yarisPos][18] = oyuncu_pos[0], YarisBilgi[id][yarisPos][19] = oyuncu_pos[1], YarisBilgi[id][yarisPos][20] = oyuncu_pos[2];
		    case 7: YarisBilgi[id][yarisPos][21] = oyuncu_pos[0], YarisBilgi[id][yarisPos][22] = oyuncu_pos[1], YarisBilgi[id][yarisPos][23] = oyuncu_pos[2];
		    case 8: YarisBilgi[id][yarisPos][24] = oyuncu_pos[0], YarisBilgi[id][yarisPos][25] = oyuncu_pos[1], YarisBilgi[id][yarisPos][26] = oyuncu_pos[2];
		    case 9: YarisBilgi[id][yarisPos][27] = oyuncu_pos[0], YarisBilgi[id][yarisPos][28] = oyuncu_pos[1], YarisBilgi[id][yarisPos][29] = oyuncu_pos[2];
		    case 10: YarisBilgi[id][yarisPos][30] = oyuncu_pos[0], YarisBilgi[id][yarisPos][31] = oyuncu_pos[1], YarisBilgi[id][yarisPos][32] = oyuncu_pos[2];
		    case 11: YarisBilgi[id][yarisPos][33] = oyuncu_pos[0], YarisBilgi[id][yarisPos][34] = oyuncu_pos[1], YarisBilgi[id][yarisPos][35] = oyuncu_pos[2];
		    case 12: YarisBilgi[id][yarisPos][36] = oyuncu_pos[0], YarisBilgi[id][yarisPos][37] = oyuncu_pos[1], YarisBilgi[id][yarisPos][38] = oyuncu_pos[2];
		    case 13: YarisBilgi[id][yarisPos][39] = oyuncu_pos[0], YarisBilgi[id][yarisPos][40] = oyuncu_pos[1], YarisBilgi[id][yarisPos][41] = oyuncu_pos[2];
		    case 14: YarisBilgi[id][yarisPos][42] = oyuncu_pos[0], YarisBilgi[id][yarisPos][43] = oyuncu_pos[1], YarisBilgi[id][yarisPos][44] = oyuncu_pos[2];
		    case 15: YarisBilgi[id][yarisPos][45] = oyuncu_pos[0], YarisBilgi[id][yarisPos][46] = oyuncu_pos[1], YarisBilgi[id][yarisPos][47] = oyuncu_pos[2];
		    case 16: YarisBilgi[id][yarisPos][48] = oyuncu_pos[0], YarisBilgi[id][yarisPos][49] = oyuncu_pos[1], YarisBilgi[id][yarisPos][50] = oyuncu_pos[2];
		    case 17: YarisBilgi[id][yarisPos][51] = oyuncu_pos[0], YarisBilgi[id][yarisPos][52] = oyuncu_pos[1], YarisBilgi[id][yarisPos][53] = oyuncu_pos[2];
		    case 18: YarisBilgi[id][yarisPos][54] = oyuncu_pos[0], YarisBilgi[id][yarisPos][55] = oyuncu_pos[1], YarisBilgi[id][yarisPos][56] = oyuncu_pos[2];
		    case 19: YarisBilgi[id][yarisPos][57] = oyuncu_pos[0], YarisBilgi[id][yarisPos][58] = oyuncu_pos[1], YarisBilgi[id][yarisPos][59] = oyuncu_pos[2];
		}
		SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%d. checkpoint düzenlendi.", RENK_YARIS >>> 8, listitem + 1);
	}
	else if(dialogid == DIALOG_YARIS_DAVET) {
	    if(!response) return cmd_yaris(playerid, "");
	
	    new oyuncuid;
	    if(sscanf(inputtext, "u", oyuncuid)) return DialogGoster(playerid, DIALOG_YARIS_DAVET, DIALOG_STYLE_INPUT, "Yarýþ", "{FFFFFF}Lütfen davet etmek istediðiniz oyuncunun ismini veya ID'sini giriniz;", "Seç", "< Geri");
	    if(!IsPlayerConnected(oyuncuid)) return DialogGoster(playerid, DIALOG_YARIS_DAVET, DIALOG_STYLE_INPUT, "Yarýþ", "{B70000}HATA: {FFFFFF}Geçersiz oyuncu.\n{FFFFFF}Lütfen davet etmek istediðiniz oyuncunun ismini veya ID'sini giriniz;", "Seç", "< Geri");
	    if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return DialogGoster(playerid, DIALOG_YARIS_DAVET, DIALOG_STYLE_INPUT, "Yarýþ", "{B70000}HATA: {FFFFFF}Oyuncuya yakýn deðilsin.\n{FFFFFF}Lütfen davet etmek istediðiniz oyuncunun ismini veya ID'sini giriniz;", "Seç", "< Geri");
	
		OyuncuBilgi[playerid][oYarisDavet] = oyuncuid;
		SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþ davetiniz %s adlý kiþiye iletildi.", RENK_YARIS >>> 8, OyuncuIsim(oyuncuid));
        SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}%s adlý kiþi sana yarýþ daveti gönderdi. (/kabul yaris %d)", RENK_YARIS >>> 8, OyuncuIsim(playerid), playerid);
	}
	else if(dialogid == DIALOG_YARIS_CPSAYISI) {
	    if(!response) return cmd_yaris(playerid, "");

		new id = Yaris_ID(playerid);
		YarisBilgi[id][yarisMaksCP] = listitem + 1;
		SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþýn checkpoint sayýsý %d olarak düzenlendi.", RENK_YARIS >>> 8, listitem + 1);
		cmd_yaris(playerid, "");
	}
	else if(dialogid == DIALOG_YARIS_TURSAYISI) {
	    if(!response) return cmd_yaris(playerid, "");
	    
		new id = Yaris_ID(playerid);
		YarisBilgi[id][yarisTur] = listitem + 1;
		SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[YARIS]: {FFFFFF}Yarýþýn tur sayýsý %d olarak düzenlendi.", RENK_YARIS >>> 8, listitem + 1);
		cmd_yaris(playerid, "");
	}
	else if(dialogid == DIALOG_TELEFON_UBER) {
	    if(!response) return SelectTextDraw(playerid, 0xd9b429ff);
	    
	    if(!strcmp(inputtext, "Ýþbaþý", true)) {
			if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bir araçta deðilsin.");
			new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
			if(!Arac_SahipKontrol(playerid, aracid) || AracBilgi[aracid][uberLisans] == 0) return HataMesaji(playerid, "Aracýnda uber lisansý yok.");
			
			switch(OyuncuBilgi[playerid][oUberIsbasi]) {
			    case true: OyuncuBilgi[playerid][oUberIsbasi] = false, SunucuMesaji(playerid, "Uber iþbaþýndan çýktýn.");
			    case false: OyuncuBilgi[playerid][oUberIsbasi] = true, SunucuMesaji(playerid, "Uber iþbaþý yaptýn.");
			}
			SelectTextDraw(playerid, 0xd9b429ff);
	    }
	    else if(!strcmp(inputtext, "Taksimetre", true)) {
			if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bir araçta deðilsin.");
			if(OyuncuBilgi[playerid][oUberIsbasi] == false) return HataMesaji(playerid, "Ýþbaþý yapmamýþsýn. (/telefon > Uber)");
			new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
			if(!Arac_SahipKontrol(playerid, aracid) || AracBilgi[aracid][uberLisans] == 0) return HataMesaji(playerid, "Aracýnda uber lisansý yok.");

			switch(AracBilgi[aracid][aTaksiMetreDurum]) {
			    case true: AracBilgi[aracid][aTaksiMetreDurum] = false, AracBilgi[aracid][aTaksiMetre] = 0.0, SunucuMesaji(playerid, "Taksimetre kapatýldý.");
			    case false: AracBilgi[aracid][aTaksiMetreDurum] = true, AracBilgi[aracid][aTaksiMetre] = 5.0, SunucuMesaji(playerid, "Taksimetre açýldý.");
			}
	    }
	    else if(!strcmp(inputtext, "Uber Çaðýr", true)) {
	        if(OyuncuBilgi[playerid][oUberTalep] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Daha önce uber talep etmiþsin, önce onu iptal etmelisin. (/iptal)");
	        
	        new oyuncu_isim[MAX_PLAYER_NAME], aracid, sayi = 0, icerik[1024];
	        format(icerik, sizeof(icerik), "Sürücü\tModel\tPlaka\n");
			foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oUberIsbasi] == true) {
			    if(!IsPlayerInAnyVehicle(i)) continue;
				aracid = Arac_IDBul(GetPlayerVehicleID(i));
				GetPlayerName(i, oyuncu_isim, sizeof(oyuncu_isim));
				for(new is = 0, len = strlen(oyuncu_isim); is < len; is++) if(oyuncu_isim[is] == '_') oyuncu_isim[is] = ' ';
			    format(icerik, sizeof(icerik), "%s%s\t%s\t%s\n", icerik, oyuncu_isim, AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracPlaka]);
			    sayi++;
			}
			if(!sayi) return HataMesaji(playerid, "Aktif durumda uber sürücüsü yok, uber çaðýramazsýnýz.");
			DialogGoster(playerid, DIALOG_UBER_CAGIR, DIALOG_STYLE_TABLIST_HEADERS, "Uber Çaðýr", icerik, "Seç", "Kapat");
	    }
	}
	else if(dialogid == DIALOG_UBER_CAGIR) {
	    if(!response) return SelectTextDraw(playerid, 0xd9b429ff);
	
	    new surucu_isim[MAX_PLAYER_NAME];
		foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oUberIsbasi] == true) {
			GetPlayerName(i, surucu_isim, sizeof(surucu_isim));
			for(new is = 0, len = strlen(surucu_isim); is < len; is++) if(surucu_isim[is] == '_') surucu_isim[is] = ' ';
			if(!strcmp(surucu_isim, inputtext, true)) {
			    OyuncuBilgi[playerid][oUberTalep] = i;
				SunucuMesaji(i, "Bir müþteri uber  talep ediyor. (/kabul uber %d)", playerid);
				SunucuMesaji(playerid, "%s adlý sürücüye talebiniz iletildi.", surucu_isim);
				return 1;
			}
		}
		HataMesaji(playerid, "Bir sorun oluþtu.");
	}
	else if(dialogid == DIALOG_TELEFON_AYARLAR) {
	    if(!response) return 0;
	    
	    if(!strcmp(inputtext, "Ses Ayarý", true)) {
		    if(OyuncuBilgi[playerid][oTelefonDurum] == false) return HataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýn.");

			switch(OyuncuBilgi[playerid][oTelefonSes]) {
				case true: OyuncuBilgi[playerid][oTelefonSes] = false, SunucuMesaji(playerid, "Bildirim seslerini kapattýnýz.");
				case false: OyuncuBilgi[playerid][oTelefonSes] = true, SunucuMesaji(playerid, "Bildirim seslerini açtýnýz.");
			}
			SelectTextDraw(playerid, 0xd9b429ff);
		}
		else if(!strcmp(inputtext, "Gizli Numara", true)) {
			if(OyuncuBilgi[playerid][oTelefonDurum] == false) return HataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýnýz.");

			switch(OyuncuBilgi[playerid][oGizliNumara]) {
				case true: OyuncuBilgi[playerid][oGizliNumara] = false, SunucuMesaji(playerid, "Gizli numarayý kapattýnýz.");
				case false: OyuncuBilgi[playerid][oGizliNumara] = true, SunucuMesaji(playerid, "Gizli numarayý açtýnýz.");
			}
			SelectTextDraw(playerid, 0xd9b429ff);
		}
		else if(!strcmp(inputtext, "Telefonu Kapat", true)) {
			if(OyuncuBilgi[playerid][oArama] > -1) cmd_kapat(playerid, "");
					OyuncuBilgi[playerid][oTelefonDurum] = false, SunucuMesaji(playerid, "Telefonunu kapattýn.");
					for(new i = 0; i != 21; i++) PlayerTextDrawHide(playerid, OyuncuBilgi[playerid][oiphone][i]);
					OyuncuBilgi[playerid][oTelefonAcik] = false;
					if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) {
					    DisablePlayerCheckpoint(playerid);
					    OyuncuBilgi[playerid][oIsaretliKonum] = 0;
					    SunucuMesaji(playerid, "Ýþaretli konum telefonu kapattýðýnýz için iptal edildi.");
					}
				    if(OyuncuBilgi[playerid][oKonumGonderilme] > 0) {
					    new numara = OyuncuBilgi[playerid][oKonumGonderilme];
					    foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oTelefonNumarasi] == numara) SendClientMessageEx(i, RENK_BEYAZ, "{5453AE}[KONUM] {FFFFFF}Gönderilen konum karþý taraftan iptal edildi.");
						OyuncuBilgi[playerid][oKonumGonderilme] = 0;
					    SunucuMesaji(playerid, "Gönderdiðiniz konum telefonu kapattýðýnýz için iptal edildi.");
				    }
					foreach(new i : Player) if(OyuncuBilgi[i][oMarker] == playerid) {
						SunucuMesaji(i, "Takip ettiðiniz numaradan gelen sinyal kesildi."), DisablePlayerCheckpoint(i), SetPlayerMarkerForPlayer(i, playerid, RENK_VARSAYILAN);
						OyuncuBilgi[i][oMarker] = -1;
						if(OyuncuBilgi[playerid][oIsbasi] == true) {
							if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) SetPlayerColor(playerid, RENK_PDISBASI);
							else if(OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL) SetPlayerColor(playerid, RENK_FMDISBASI);
							else if(OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) SetPlayerColor(playerid, RENK_GOVISBASI);
			            }
						else SetPlayerColor(playerid, RENK_VARSAYILAN);
						IsimLabelGuncelle(playerid);
		    }
		}
	}
	else if(dialogid == DIALOG_TELEFON) {
	    if(!response) return 0;

		if(!strcmp(inputtext, "[TELEFON] Arama", true)) {
			if(OyuncuBilgi[playerid][oTelefonDurum] == false)
			    return HataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýn.");

			if(OyuncuBilgi[playerid][oArama] > -1)
			    return HataMesaji(playerid, "Arama yaparken bu seçeneði kullanamazsýn.");

			DialogGoster(playerid, DIALOG_ARAMA, DIALOG_STYLE_INPUT, "Cep Telefonu > Arama", "Arama yapmak istediðiniz numarayý girin:", "Ara", "Kapat");
		}
		else if(!strcmp(inputtext, "[TELEFON] Arama Kayýtlarý", true)) {
			if(OyuncuBilgi[playerid][oTelefonDurum] == false) return HataMesaji(playerid, "Telefonun kapalý olduðu için bu seçeneði kullanamazsýn.");

			new arama_sorgu[96];
			format(arama_sorgu, sizeof(arama_sorgu), "SELECT karsiNumara, kayitTur, kayitTarih FROM `aramakayitlari` WHERE `gelenNumara` = '%d'", OyuncuBilgi[playerid][oTelefonNumarasi]);
			mysql_tquery(mysqlB, arama_sorgu, "AramaKayitlari", "d", playerid);
		}
		else if(!strcmp(inputtext, "[TELEFON] Mesaj", true)) {
			if(OyuncuBilgi[playerid][oTelefonDurum] == false)
			    return HataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýn.");

			if(OyuncuBilgi[playerid][oArama] > -1)
			    return HataMesaji(playerid, "Arama yaparken bu seçeneði kullanamazsýn.");

            DialogGoster(playerid, DIALOG_MESAJ, DIALOG_STYLE_INPUT, "vMessage", "Mesaj yollamak istediðin numarayý giriniz:", "Ara", "Kapat");
		}
		else if(!strcmp(inputtext, "[UYGULAMA] Uber", true)) {
			if(OyuncuBilgi[playerid][oTelefonDurum] == false) return HataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oArama] > -1) return HataMesaji(playerid, "Arama yaparken bu seçeneði kullanamazsýn.");

			new icerik[256];
			if(!IsPlayerInAnyVehicle(playerid)) format(icerik, sizeof(icerik), "%sUber Çaðýr\n", icerik);
			else {
			    format(icerik, sizeof(icerik), "%sUber Çaðýr\n", icerik);
				if(IsPlayerInAnyVehicle(playerid)) {
					new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
					if(Arac_SahipKontrol(playerid, aracid) && AracBilgi[aracid][uberLisans] == 1) format(icerik, sizeof(icerik), "Ýþbaþý\nTaksimetre\n");
				}
			}
			DialogGoster(playerid, DIALOG_TELEFON_UBER, DIALOG_STYLE_TABLIST, "Telefon - Uber", icerik, "Seç", "Kapat");
		}
		else if(!strcmp(inputtext, "[TELEFON] Rehber", true)) {
			if(OyuncuBilgi[playerid][oTelefonDurum] == false) return HataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oArama] > -1) return HataMesaji(playerid, "Arama yaparken bu seçeneði kullanamazsýn.");

			new veriler[144 * MAKSIMUM_REHBER_SAYI];
			format(veriler, sizeof(veriler), "Yeni Kiþi Oluþtur\t\n");
			for(new i = 0; i != MAKSIMUM_REHBER_SAYI; i ++) if(RehberBilgi[playerid][i][rehberKullanimda]) {
				format(veriler, sizeof(veriler), "%s%s\t%d\n", veriler, RehberBilgi[playerid][i][rehberIsim], RehberBilgi[playerid][i][rehberNumara]);
			}
			DialogGoster(playerid, DIALOG_REHBER, DIALOG_STYLE_TABLIST, "Telefon - Rehber", veriler, "Seç", "<< Geri");
		}
		else if(!strcmp(inputtext, "[UYGULAMA] SanAdvertisement", true)) return DialogGoster(playerid, DIALOG_REKLAMLAR, DIALOG_STYLE_TABLIST, "SanAdvertisement", "Reklam Ver\nAjans Reklamlarý\nTüm Ajans Reklamlarý", "Seç", "Kapat");
		else if(!strcmp(inputtext, "[UYGULAMA] ZCN Banka Mobil", true)) return DialogGoster(playerid, DIALOG_MOBILBANKA, DIALOG_STYLE_TABLIST, "ZCN Banka - Online Ýþlemler", "Hesap Bilgileri\nÝþlem Geçmiþi\nEFT & Havale\nEn Yakýn ATM", "Seç", "Kapat");
		else if(!strcmp(inputtext, "Telefonu Aç", true) || !strcmp(inputtext, "Telefonu Kapat", true)) {
			if(OyuncuBilgi[playerid][oArama] > -1) cmd_kapat(playerid, "");

		    switch(OyuncuBilgi[playerid][oTelefonDurum]) {
		        case false: OyuncuBilgi[playerid][oTelefonDurum] = true, SunucuMesaji(playerid, "Telefonunu açtýn.");
		        case true: {
					OyuncuBilgi[playerid][oTelefonDurum] = false, SunucuMesaji(playerid, "Telefonunu kapattýn.");
					if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) {
					    DisablePlayerCheckpoint(playerid);
					    OyuncuBilgi[playerid][oIsaretliKonum] = 0;
					    SunucuMesaji(playerid, "Ýþaretli konum telefonu kapattýðýnýz için iptal edildi.");
					}
				    if(OyuncuBilgi[playerid][oKonumGonderilme] > 0) {
					    new numara = OyuncuBilgi[playerid][oKonumGonderilme];
					    foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oTelefonNumarasi] == numara) SendClientMessageEx(i, RENK_BEYAZ, "{5453AE}[KONUM] {FFFFFF}Gönderilen konum karþý taraftan iptal edildi.");
						OyuncuBilgi[playerid][oKonumGonderilme] = 0;
					    SunucuMesaji(playerid, "Gönderdiðiniz konum telefonu kapattýðýnýz için iptal edildi.");
				    }
					foreach(new i : Player) if(OyuncuBilgi[i][oMarker] == playerid) {
						SunucuMesaji(i, "Takip ettiðiniz numaradan gelen sinyal kesildi."), DisablePlayerCheckpoint(i), SetPlayerMarkerForPlayer(i, playerid, RENK_VARSAYILAN);
						OyuncuBilgi[i][oMarker] = -1;
						if(OyuncuBilgi[playerid][oIsbasi] == true) {
							if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) SetPlayerColor(playerid, RENK_PDISBASI);
							else if(OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL) SetPlayerColor(playerid, RENK_FMDISBASI);
							else if(OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) SetPlayerColor(playerid, RENK_GOVISBASI);
			            }
						else SetPlayerColor(playerid, RENK_VARSAYILAN);
						IsimLabelGuncelle(playerid);
					}
				}
		    }
		}
		else if(!strcmp(inputtext, "[AYARLAR] Ses", true)) {
		    if(OyuncuBilgi[playerid][oTelefonDurum] == false) return HataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýn.");
		    
			switch(OyuncuBilgi[playerid][oTelefonSes]) {
				case true: OyuncuBilgi[playerid][oTelefonSes] = false, SunucuMesaji(playerid, "Bildirim seslerini kapattýnýz.");
				case false: OyuncuBilgi[playerid][oTelefonSes] = true, SunucuMesaji(playerid, "Bildirim seslerini açtýnýz.");
			}
			cmd_telefon(playerid, "");
		}
		else if(!strcmp(inputtext, "[TELEFON] Gizli Numara", true)) {
			if(OyuncuBilgi[playerid][oTelefonDurum] == false) return HataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýnýz.");
			
			switch(OyuncuBilgi[playerid][oGizliNumara]) {
				case true: OyuncuBilgi[playerid][oGizliNumara] = false, SunucuMesaji(playerid, "Gizli numarayý kapattýnýz.");
				case false: OyuncuBilgi[playerid][oGizliNumara] = true, SunucuMesaji(playerid, "Gizli numarayý açtýnýz.");
			}
			cmd_telefon(playerid, "");
		}
		else if(!strcmp(inputtext, "[HARITA] Konum Gönder", true)) {
			if(OyuncuBilgi[playerid][oTelefonDurum] == false) return HataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýnýz.");
			if(OyuncuBilgi[playerid][oGizliNumara] == true) return HataMesaji(playerid, "Gizli numara kullanýrken konum gönderemezsin.");
			if(OyuncuBilgi[playerid][oKonumGonderilme] != 0) return HataMesaji(playerid, "Daha önce konum göndermiþsin, iptal etmeden yeni konum gönderemezsin. (/iptal)");

			DialogGoster(playerid, DIALOG_KONUM_GONDER, DIALOG_STYLE_INPUT, "vHarita: Konum Gönder", "{FFFFFF}Lütfen konum paylaþmak istediðiniz numarayý giriniz;", "Gönder", "Kapat");
		}
		else if(!strcmp(inputtext, "[UYGULAMA] Brockway Emlak", true)) {
		    if(OyuncuBilgi[playerid][oTelefonDurum] == false) return HataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýnýz.");
		
		    new icerik[256], satilikev_sayi = 0, satilikarac_sayi = 0, satilikisyeri_sayi = 0;
		    
			for(new i = 0; i != MAKSIMUM_EV; i++) if(EvBilgi[i][evKullanimda] && EvBilgi[i][evSahip] < 1 && EvBilgi[i][evDisVW] == 0 && EvBilgi[i][evDisInt] == 0) satilikev_sayi++;
			for(new i = 0; i != MAKSIMUM_ARAC; i++) if(AracBilgi[i][aracKullanimda] && AracBilgi[i][aracSatilik] == 1 && AracBilgi[i][aracFiyat] > 0) satilikarac_sayi++;
			for(new i = 0; i != MAKSIMUM_ISYERI; i++) if(IsyeriBilgi[i][isyeriKullanimda] && IsyeriBilgi[i][isyeriSahip] == 0) satilikisyeri_sayi++;
			
		    format(icerik, sizeof(icerik), "{%06x}Ev Ýlanlarý\t{ffffff}%s adet\n{%06x}Araç Ýlanlarý\t{ffffff}%s adet\n{%06x}Ýþyeri Ýlanlarý\t{ffffff}%s adet", RENK_SERVER >>> 8, NumaraFormati(satilikev_sayi, ""), RENK_SERVER >>> 8, NumaraFormati(satilikarac_sayi, ""), RENK_SERVER >>> 8, NumaraFormati(satilikisyeri_sayi, ""));
		    DialogGoster(playerid, DIALOG_ILANLAR, DIALOG_STYLE_TABLIST, "Brockway Emlak: Ýlanlar", icerik, "Seç", "<< Geri");
		}
		else if(!strcmp(inputtext, "[AYARLAR] SOS", true)) {
		    if(OyuncuBilgi[playerid][oSOSGecikme] > gettime()) return HataMesaji(playerid, "Bu seçenek 60 saniyede bir kez kullanýlabilir.");
		    
			for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikTur] == BIRLIK_POLIS)
			{
			    GetPlayerPos(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
			    BirlikMesaji(i, RENK_IHBAR, "[911 - Acil Yardým Çaðrýsý]");
	        	BirlikMesaji(i, RENK_IHBAR, "Numara: %d", OyuncuBilgi[playerid][oTelefonNumarasi]);
				BirlikMesaji(i, RENK_IHBAR, "Telefondan alýnan son sinyal: %s", LokasyonBul(OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]));
				OyuncuBilgi[playerid][oSOSGecikme] = gettime() + 60;
	        }
	        SunucuMesaji(playerid, "Acil yardým çaðrýnýz LSPD'ye iletildi.");
		}
	}
	else if(dialogid == DIALOG_MOBILBANKA) {
	    if(!response) return SelectTextDraw(playerid, 0xd9b429ff);

		if(!strcmp(inputtext, "Hesap Bilgileri", true)) {
		    new oyuncu_isim[MAX_PLAYER_NAME + 1], icerik[144];
		    GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		    for(new i = 0, len = strlen(oyuncu_isim); i < len; i ++) if(oyuncu_isim[i] == '_') oyuncu_isim[i] = ' ';

		    format(icerik, sizeof(icerik), "{FFFFFF}Hesap Sahibi: \t%s\nHesap NO: \t%d\nBakiye: \t\t%s", oyuncu_isim, OyuncuBilgi[playerid][oHesapNumarasi], NumaraFormati(OyuncuBilgi[playerid][oBankaPara]));
			DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST, "ZCN Banka - Online Hesap Detaylarý", icerik, "Kapat", "");
			return 1;
		}
		else if(!strcmp(inputtext, "EFT & Havale", true)) {
		    if(OyuncuBilgi[playerid][oBankaPara] < 0) return HataMesaji(playerid, "Banka hesabýnda para yok.");

			return DialogGoster(playerid, DIALOG_BANKA_TRANSFER, DIALOG_STYLE_INPUT, "ZCN Banka - EFT & Havale", "Lütfen transfer yapacaðýnýz hesap numarasýný girin;", "Seç", "Ýptal");
		}
		else if(!strcmp(inputtext, "En Yakýn ATM", true)) {
		    for(new i = 0; i != MAKSIMUM_ATM; i ++) if(ATMBilgi[i][atmKullanimda] && IsPlayerInRangeOfPoint(playerid, 1000.0, ATMBilgi[i][atmPos][0], ATMBilgi[i][atmPos][1], ATMBilgi[i][atmPos][2]))
			{
				if(GetPlayerInterior(playerid) == ATMBilgi[i][atmInterior] && GetPlayerVirtualWorld(playerid) == ATMBilgi[i][atmWorld])
					return SetPlayerCheckpoint(playerid, ATMBilgi[i][atmPos][0], ATMBilgi[i][atmPos][1], ATMBilgi[i][atmPos][2], 6.0), OyuncuBilgi[playerid][oAdres] = 1, SunucuMesaji(playerid, "ATM Lokasyonu GPS cihazýnda iþaretlendi.");
			}
			HataMesaji(playerid, "1,000 metre yakýnýnda ATM bulunmuyor, ATM'lere ulaþmak için GPS kullanabilirsin.");
		}
		else if(!strcmp(inputtext, "Ýþlem Geçmiþi", true)) {
		    new sorgu[256];
			format(sorgu, sizeof(sorgu), "SELECT * FROM `bankaislemler` WHERE `HesapNumarasi` = '%d' ORDER BY `ID` DESC LIMIT 100", OyuncuBilgi[playerid][oHesapNumarasi]);
			return mysql_tquery(mysqlB, sorgu, "IslemGecmisi", "d", playerid);
		}
	}
	else if(dialogid == DIALOG_ILANLAR) {
	    if(!response) return SelectTextDraw(playerid, 0xd9b429ff);
	    new icerik[3072];
	    if(!strcmp(inputtext, "Ev Ýlanlarý", true)) {
	        new ev_sayi = 0;
	        format(icerik, sizeof(icerik), "{FFFFFF}ID\t{FFFFFF}Adres\t{FFFFFF}Fiyat\n");
			for(new i = 0; i != MAKSIMUM_EV; i++) if(EvBilgi[i][evKullanimda] && EvBilgi[i][evSahip] < 1 && EvBilgi[i][evDisVW] == 0 && EvBilgi[i][evDisInt] == 0) format(icerik, sizeof(icerik), "%s{FFFFFF}%d\t{FFFFFF}%s\t{33aa33}%s\n", icerik, i, EvBilgi[i][evAdres], NumaraFormati(EvBilgi[i][evFiyat])), ev_sayi++;
			
			if(ev_sayi == 0) return HataMesaji(playerid, "Satýlýk ev ilaný bulunmamaktadýr."), SelectTextDraw(playerid, 0xd9b429ff);
			DialogGoster(playerid, DIALOG_ILANLAR_EV, DIALOG_STYLE_TABLIST_HEADERS, "Brockway Emlak: Ýlanlar", icerik, "Seç", "<< Geri");
	        return 1;
	    }
 	    else if(!strcmp(inputtext, "Araç Ýlanlarý", true)) {
	        new arac_sayi = 0;
	        format(icerik, sizeof(icerik), "{FFFFFF}ID\t{FFFFFF}Ýletiþim\t{FFFFFF}Model\t{FFFFFF}Fiyat\n");
			for(new i = 0; i != MAKSIMUM_ARAC; i++) if(AracBilgi[i][aracKullanimda] && AracBilgi[i][aracSatilik] == 1 && AracBilgi[i][aracFiyat] > 0) format(icerik, sizeof(icerik), "%s{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%s\t{33aa33}%s\n", icerik, i, AracBilgi[i][aracIletisim], AracModel(AracBilgi[i][aracModel]), NumaraFormati(AracBilgi[i][aracFiyat])), arac_sayi++;

			if(arac_sayi == 0) return HataMesaji(playerid, "Satýlýk araç ilaný bulunmamaktadýr."), SelectTextDraw(playerid, 0xd9b429ff);
			DialogGoster(playerid, DIALOG_ILANLAR_ARAC, DIALOG_STYLE_TABLIST_HEADERS, "Brockway Emlak: Ýlanlar", icerik, "Seç", "<< Geri");
	        return 1;
	    }
	    else if(!strcmp(inputtext, "Ýþyeri Ýlanlarý", true)) {
	        new isyeri_sayi = 0;
	        format(icerik, sizeof(icerik), "{FFFFFF}ID\t{FFFFFF}Kapý NO\t{FFFFFF}Fiyat\n");
			for(new i = 0; i != MAKSIMUM_ISYERI; i++) if(IsyeriBilgi[i][isyeriKullanimda] && IsyeriBilgi[i][isyeriSahip] == 0) format(icerik, sizeof(icerik), "%s{FFFFFF}%d\t{FFFFFF}%d\t{33aa33}%s\n", icerik, i, IsyeriBilgi[i][isyeriID] + MAKSIMUM_EV, NumaraFormati(IsyeriBilgi[i][isyeriFiyat])), isyeri_sayi++;

			if(isyeri_sayi == 0) return HataMesaji(playerid, "Satýlýk iþyeri ilaný bulunmamaktadýr."), SelectTextDraw(playerid, 0xd9b429ff);
			DialogGoster(playerid, DIALOG_ILANLAR_ISYERI, DIALOG_STYLE_TABLIST_HEADERS, "Brockway Emlak: Ýlanlar", icerik, "Seç", "<< Geri");
	        return 1;
	    }
	}
	else if(dialogid == DIALOG_ILANLAR_ISYERI) {
	    if(!response) return DeletePVar(playerid, "Ilan_Isyeri"), SelectTextDraw(playerid, 0xd9b429ff);

		if(!strcmp(inputtext, "GPS'te Ýþaretle", true)) {
		    new isyeriid = GetPVarInt(playerid, "Ilan_Isyeri");
			SetPlayerCheckpoint(playerid, IsyeriBilgi[isyeriid][isyeriPos][0], IsyeriBilgi[isyeriid][isyeriPos][1], IsyeriBilgi[isyeriid][isyeriPos][2], 6.0);
			SunucuMesaji(playerid, "Girilen adres GPS'inde iþaretlendi.");
			OyuncuBilgi[playerid][oAdres] = isyeriid;
			DeletePVar(playerid, "Ilan_Isyeri");
			return 1;
		}
		else if(!strcmp(inputtext, "Adres:", true) || !strcmp(inputtext, "Fiyat:", true)) {
	        new isyeriid = GetPVarInt(playerid, "Ilan_Isyeri");
		    if(isyeriid == -1 || IsyeriBilgi[isyeriid][isyeriKullanimda] == false || IsyeriBilgi[isyeriid][isyeriSahip] > 0) return HataMesaji(playerid, "Ýlana ulaþýlamadý, lütfen tekrar deneyiniz."), DeletePVar(playerid, "Ilan_Isyeri"), SelectTextDraw(playerid, 0xd9b429ff);

		    new detaylar[512];
			format(detaylar, sizeof(detaylar), "{FFFFFF}Ýlan Detaylarý\t\n{FFFFFF}Kapý Numarasý:\t{FFFFFF}%d\n{FFFFFF}Fiyat:\t{33aa33}%s\n{FFFFFF}GPS'te Ýþaretle", IsyeriBilgi[isyeriid][isyeriID] + MAKSIMUM_EV, NumaraFormati(IsyeriBilgi[isyeriid][isyeriFiyat]));
			DialogGoster(playerid, DIALOG_ILANLAR_ISYERI, DIALOG_STYLE_TABLIST_HEADERS, "Brockway Emlak: Ýlanlar", detaylar, "Seç", "<< Geri");
			return 1;
	    }
	    new isyeriid = strval(inputtext);
	    if(isyeriid == -1 || IsyeriBilgi[isyeriid][isyeriKullanimda] == false || IsyeriBilgi[isyeriid][isyeriSahip] > 0) return HataMesaji(playerid, "Ýlana ulaþýlamadý, lütfen tekrar deneyiniz."), DeletePVar(playerid, "Ilan_Isyeri"), SelectTextDraw(playerid, 0xd9b429ff);

	    SetPVarInt(playerid, "Ilan_Isyeri", isyeriid);
	    new detaylar[512];
		format(detaylar, sizeof(detaylar), "{FFFFFF}Ýlan Detaylarý\t\n{FFFFFF}Kapý Numarasý:\t{FFFFFF}%d\n{FFFFFF}Fiyat:\t{33aa33}%s\n{FFFFFF}GPS'te Ýþaretle", IsyeriBilgi[isyeriid][isyeriID] + MAKSIMUM_EV, NumaraFormati(IsyeriBilgi[isyeriid][isyeriFiyat]));
		DialogGoster(playerid, DIALOG_ILANLAR_ISYERI, DIALOG_STYLE_TABLIST_HEADERS, "Brockway Emlak: Ýlanlar", detaylar, "Seç", "<< Geri");
	}
	else if(dialogid == DIALOG_ILANLAR_EV) {
	    if(!response) return DeletePVar(playerid, "Ilan_Ev"), SelectTextDraw(playerid, 0xd9b429ff);
	
		if(!strcmp(inputtext, "GPS'te Ýþaretle", true)) {
		    new evid = GetPVarInt(playerid, "Ilan_Ev");
			SetPlayerCheckpoint(playerid, EvBilgi[evid][evPos][0], EvBilgi[evid][evPos][1], EvBilgi[evid][evPos][2], 6.0);
			SunucuMesaji(playerid, "Girilen adres GPS'inde iþaretlendi.");
			OyuncuBilgi[playerid][oAdres] = evid;
			DeletePVar(playerid, "Ilan_Ev");
			return 1;
		}
		else if(!strcmp(inputtext, "Adres:", true) || !strcmp(inputtext, "Fiyat:", true)) {
	        new evid = GetPVarInt(playerid, "Ilan_Ev");
		    if(evid == -1 || EvBilgi[evid][evKullanimda] == false || EvBilgi[evid][evSahip] > 0) return HataMesaji(playerid, "Ýlana ulaþýlamadý, lütfen tekrar deneyiniz."), DeletePVar(playerid, "Ilan_Ev"), SelectTextDraw(playerid, 0xd9b429ff);

		    new detaylar[512];
			format(detaylar, sizeof(detaylar), "{FFFFFF}Ýlan Detaylarý\t\n{FFFFFF}Adres:\t{FFFFFF}%s\n{FFFFFF}Fiyat:\t{33aa33}%s\n{FFFFFF}GPS'te Ýþaretle", EvBilgi[evid][evAdres], NumaraFormati(EvBilgi[evid][evFiyat]));
			DialogGoster(playerid, DIALOG_ILANLAR_EV, DIALOG_STYLE_TABLIST_HEADERS, "Brockway Emlak: Ýlanlar", detaylar, "Seç", "<< Geri");
			return 1;
	    }
	    new evid = strval(inputtext);
	    if(evid == -1 || EvBilgi[evid][evKullanimda] == false || EvBilgi[evid][evSahip] > 0) return HataMesaji(playerid, "Ýlana ulaþýlamadý, lütfen tekrar deneyiniz."), DeletePVar(playerid, "Ilan_Ev"), SelectTextDraw(playerid, 0xd9b429ff);
	    
	    SetPVarInt(playerid, "Ilan_Ev", evid);
	    new detaylar[512];
		format(detaylar, sizeof(detaylar), "{FFFFFF}Ýlan Detaylarý\t\n{FFFFFF}Adres:\t{FFFFFF}%s\n{FFFFFF}Fiyat:\t{33aa33}%s\n{FFFFFF}GPS'te Ýþaretle", EvBilgi[evid][evAdres], NumaraFormati(EvBilgi[evid][evFiyat]));
		DialogGoster(playerid, DIALOG_ILANLAR_EV, DIALOG_STYLE_TABLIST_HEADERS, "Brockway Emlak: Ýlanlar", detaylar, "Seç", "<< Geri");
	}
	else if(dialogid == DIALOG_KONUM_GONDER) {
	    if(!response) return SelectTextDraw(playerid, 0xd9b429ff);
	    
	    new numara, bool:bulundu = false;
	    if(sscanf(inputtext, "d", numara)) return DialogGoster(playerid, DIALOG_KONUM_GONDER, DIALOG_STYLE_INPUT, "cHarita: Konum Gönder", "{FFFFFF}Lütfen konum paylaþmak istediðiniz numarayý giriniz;", "Gönder", "Kapat");
	    if(numara == 911) return DialogGoster(playerid, DIALOG_KONUM_GONDER, DIALOG_STYLE_INPUT, "cHarita: Konum Gönder", "{B70000}HATA: {FFFFFF}Ýhbar hattýna konum gönderemezsiniz.\n{FFFFFF}Lütfen konum paylaþmak istediðiniz numarayý giriniz;", "Gönder", "Kapat");
	    
	    foreach(new i : Player) if(OyuncuBilgi[i][oTelefonNumarasi] == numara) {
			if(OyuncuBilgi[i][oTelefonDurum] == false || OyuncuBilgi[i][oAdminDurum] == true) return DialogGoster(playerid, DIALOG_KONUM_GONDER, DIALOG_STYLE_INPUT, "cHarita: Konum Gönder", "{B70000}HATA: {FFFFFF}Bu telefon kapalý, konumun iletilemedi.\n{FFFFFF}Lütfen konum paylaþmak istediðiniz numarayý giriniz;", "Gönder", "Kapat");
			OyuncuBilgi[playerid][oKonumGonderilme] = numara;
			for(new r = 0; r != MAKSIMUM_REHBER_SAYI; r ++) if(RehberBilgi[i][r][rehberKullanimda] && RehberBilgi[i][r][rehberNumara] == OyuncuBilgi[playerid][oTelefonNumarasi]) {
				SendClientMessageEx(i, RENK_BEYAZ, "{5453AE}[KONUM] {FFFFFF}%s adlý kiþiniz size bir konum gönderdi, görüntülemek için \"/konumkabul %d\"", RehberBilgi[i][r][rehberIsim], OyuncuBilgi[playerid][oTelefonNumarasi]), bulundu = true;
			}
			if(bulundu == false) SendClientMessageEx(i, RENK_BEYAZ, "{5453AE}[KONUM] {FFFFFF}%d numarasýndan size bir konum gönderildi, görüntülemek için \"/konumkabul %d\"", OyuncuBilgi[playerid][oTelefonNumarasi], OyuncuBilgi[playerid][oTelefonNumarasi]);
			SunucuMesaji(playerid, "Konum paylaþma talebiniz gönderildi.");
			return 1;
		}
		DialogGoster(playerid, DIALOG_KONUM_GONDER, DIALOG_STYLE_INPUT, "cHarita: Konum Gönder", "{B70000}HATA: {FFFFFF}Numara bulunamadý.\n{FFFFFF}Lütfen konum paylaþmak istediðiniz numarayý giriniz;", "Gönder", "Kapat");
	}
 	else if(dialogid == DIALOG_REHBER) {
 	    if(!response) return SelectTextDraw(playerid, 0xd9b429ff);

 	    if(!strcmp(inputtext, "Yeni Kiþi Oluþtur", true)) return DialogGoster(playerid, DIALOG_REHBER_OLUSTUR, DIALOG_STYLE_INPUT, "cRehber: Yeni Kiþi Oluþtur", "{FFFFFF}Rehberinize kaydetmek istediðiniz numarayý giriniz;", "Tamam", "Kapat");

		for(new i = 0; i != MAKSIMUM_REHBER_SAYI; i ++) if(RehberBilgi[playerid][i][rehberKullanimda] && !strcmp(inputtext, RehberBilgi[playerid][i][rehberIsim], true)) {
			DialogGoster(playerid, DIALOG_REHBER_DUZENLE, DIALOG_STYLE_LIST, "cRehber: Kiþi Düzenle", "Kiþiyi Ara\nMesaj Gönder\nNumarayý Deðiþtir\nÝsim Düzenle\nKiþiyi Sil", "Seç", "<< Geri");
			return OyuncuBilgi[playerid][oRehber] = i;
		}
		HataMesaji(playerid, "Bir problem oluþtu."), SelectTextDraw(playerid, 0xd9b429ff), OyuncuBilgi[playerid][oRehber] = -1;
	}
	else if(dialogid == DIALOG_REHBER_DUZENLE) {
	    if(!response) return OyuncuBilgi[playerid][oRehber] = -1, SelectTextDraw(playerid, 0xd9b429ff);

		new mesaj[256], id = OyuncuBilgi[playerid][oRehber];
	    if(!strcmp(inputtext, "Kiþiyi Ara", true)) {
	        new numara[12];
	        format(numara, sizeof(numara), "%d", RehberBilgi[playerid][id][rehberNumara]);
	        cmd_ara(playerid, numara);
	        return OyuncuBilgi[playerid][oRehber] = -1;
		}
		else if(!strcmp(inputtext, "Mesaj Gönder", true)) {
	        format(mesaj, sizeof(mesaj), "{FFFFFF}Rehberinizdeki {%06x}%s {FFFFFF}adlý kiþiye göndermek istediðiniz mesajý girin;", RENK_YAYIN >>> 8, RehberBilgi[playerid][OyuncuBilgi[playerid][oRehber]][rehberIsim]);
			return DialogGoster(playerid, DIALOG_REHBER_MESAJGONDER, DIALOG_STYLE_INPUT, "cRehber: Mesaj Gönder", mesaj, "Gönder", "Kapat");
		}
	    else if(!strcmp(inputtext, "Numarayý Deðiþtir", true)) {
	        format(mesaj, sizeof(mesaj), "{FFFFFF}Rehberinizdeki {%06x}%s {FFFFFF}adlý kiþiye tanýmlamak istediðiniz yeni numarasýyý girin;", RENK_YAYIN >>> 8, RehberBilgi[playerid][OyuncuBilgi[playerid][oRehber]][rehberIsim]);
			return DialogGoster(playerid, DIALOG_REHBER_NUMARADUZENLE, DIALOG_STYLE_INPUT, "cRehber: Numara Düzenle", mesaj, "Deðiþtir", "Kapat");
		}
 	    else if(!strcmp(inputtext, "Ýsim Düzenle", true)) {
	        format(mesaj, sizeof(mesaj), "{FFFFFF}Rehberinizdeki {%06x}%s {FFFFFF}adlý kiþiye vermek istediðiniz yeni adý girin;", RENK_YAYIN >>> 8, RehberBilgi[playerid][OyuncuBilgi[playerid][oRehber]][rehberIsim]);
			return DialogGoster(playerid, DIALOG_REHBER_ISIMDUZENLE, DIALOG_STYLE_INPUT, "cRehber: Ýsim Düzenle", mesaj, "Deðiþtir", "Kapat");
		}
  	    else if(!strcmp(inputtext, "Kiþiyi Sil", true)) {
	        SunucuMesaji(playerid, "Rehberinizdeki {%06x}%s {FFFFFF}adlý kiþiyi sildiniz.", RENK_YAYIN >>> 8, RehberBilgi[playerid][OyuncuBilgi[playerid][oRehber]][rehberIsim]);
	        Rehber_Sil(playerid, OyuncuBilgi[playerid][oRehber]);
	        OyuncuBilgi[playerid][oRehber] = -1;
		}
	}
	else if(dialogid == DIALOG_REKLAMLAR) {
	    if(!response) return 0;
	    
	    if(!strcmp(inputtext, "Reklam Ver", true)) {
	        new icerik[1024], sayi = 0;
			format(icerik, sizeof(icerik), "ID\t\tAjans Ýsmi\n");
			for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikKullanimda] == true && BirlikBilgi[i][birlikTur] == BIRLIK_HABERAJANSI)
				format(icerik, sizeof(icerik), "%s%d\t%s\t%d\n", icerik, i, BirlikBilgi[i][birlikAd]), sayi++;
				
			if(!sayi) return HataMesaji(playerid, "Reklam verebileceðiniz bir ajans yok.");
			DialogGoster(playerid, DIALOG_REKLAM_AJANSSEC, DIALOG_STYLE_TABLIST_HEADERS, "Ajans Seç", icerik, "Seç", "Kapat");
	    }
	    else if(!strcmp(inputtext, "Ajans Reklamlarý", true)) {
	        new icerik[1024], sayi = 0;
			format(icerik, sizeof(icerik), "ID\t\tAjans Ýsmi\n");
			for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikKullanimda] == true && BirlikBilgi[i][birlikTur] == BIRLIK_HABERAJANSI)
				format(icerik, sizeof(icerik), "%s%d\t%s\t%d\n", icerik, i, BirlikBilgi[i][birlikAd]), sayi++;

			if(!sayi) return HataMesaji(playerid, "Sunucuda bir ajans yok, reklamlar listelenemez.");
			DialogGoster(playerid, DIALOG_AJANS_REKLAMLAR, DIALOG_STYLE_TABLIST_HEADERS, "Ajans Seç", icerik, "Seç", "Kapat");
		}
	    else if(!strcmp(inputtext, "Tüm Ajans Reklamlarý", true)) {
		    new sayi = 0, oncelikli_reklam[1024], vip_reklam[1024], icerik[4096];
	        for(new i = 0; i != MAKSIMUM_REKLAM; i ++) if(!isnull(ReklamBilgi[i][reklamIcerik])) {
				switch(ReklamBilgi[i][reklamOncelik]) {
				    case 1: format(oncelikli_reklam, sizeof(oncelikli_reklam), "%s%s\t%d\t%s\t%s\n", oncelikli_reklam, ReklamBilgi[i][reklamIcerik], ReklamBilgi[i][reklamIletisim], "Öncelikli", BirlikBilgi[ReklamBilgi[i][reklamAjans]][birlikAd]);
				    case 2: format(vip_reklam, sizeof(vip_reklam), "%s%s\t%d\t%s\t%s\n", vip_reklam, ReklamBilgi[i][reklamIcerik], ReklamBilgi[i][reklamIletisim], "VIP", BirlikBilgi[ReklamBilgi[i][reklamAjans]][birlikAd]);
				    default: format(icerik, sizeof(icerik), "%s%s\t%d\t%s\t%s\n", icerik, ReklamBilgi[i][reklamIcerik], ReklamBilgi[i][reklamIletisim], "Normal", BirlikBilgi[ReklamBilgi[i][reklamAjans]][birlikAd]);
				}
				sayi++;
	        }
	        if(!sayi) return HataMesaji(playerid, "Daha önce reklam verilmemiþ.");
	        format(icerik, sizeof(icerik), "Ýçerik\tÝletiþim\tÖncelik\tAjans\n%s%s%s", vip_reklam, oncelikli_reklam, icerik);
	        DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Reklam Listesi", icerik, "Kapat", "");
        }
	}
	else if(dialogid == DIALOG_AJANS_REKLAMLAR) {
	    if(!response) return 0;
	
	    new sayi = 0, oncelikli_reklam[1024], vip_reklam[1024], icerik[4096];
        for(new i = 0; i != MAKSIMUM_REKLAM; i ++) if(!isnull(ReklamBilgi[i][reklamIcerik]) && ReklamBilgi[i][reklamAjans] == strval(inputtext)) {
			switch(ReklamBilgi[i][reklamOncelik]) {
			    case 1: format(oncelikli_reklam, sizeof(oncelikli_reklam), "%s%s\t%d\t%s\n", oncelikli_reklam, ReklamBilgi[i][reklamIcerik], ReklamBilgi[i][reklamIletisim], "Öncelikli");
			    case 2: format(vip_reklam, sizeof(vip_reklam), "%s%s\t%d\t%s\n", vip_reklam, ReklamBilgi[i][reklamIcerik], ReklamBilgi[i][reklamIletisim], "VIP");
			    default: format(icerik, sizeof(icerik), "%s%s\t%d\t%s\n", icerik, ReklamBilgi[i][reklamIcerik], ReklamBilgi[i][reklamIletisim], "Normal");
			}
			sayi++;
        }
        if(!sayi) return HataMesaji(playerid, "Bu ajansa reklam verilmemiþ.");
        format(icerik, sizeof(icerik), "Ýçerik\tÝletiþim\tÖncelik\n%s%s%s", vip_reklam, oncelikli_reklam, icerik);
        new baslik[93];
		format(baslik, sizeof(baslik), "%s - Reklam Listesi", BirlikBilgi[strval(inputtext)][birlikAd]);
        DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, baslik, icerik, "Kapat", "");
	}
	else if(dialogid == DIALOG_REKLAM_AJANSSEC) {
	    if(!response) return 0;
	    
		SetPVarInt(playerid, "reklam_ajans", strval(inputtext));
		DialogGoster(playerid, DIALOG_REKLAM_ICERIK, DIALOG_STYLE_INPUT, "SanAdvertisement - Ýçerik", "{FFFFFF}Lütfen vermek istediðiniz reklamýn içeriðini girin;", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_REKLAM_ICERIK) {
	    if(!response) return UyariMesaji(playerid, "Ýþleminiz iptal edildi.");
	
		if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_REKLAM_ICERIK, DIALOG_STYLE_INPUT, "Reklam Ýçeriði", "{B70000}HATA: {FFFFFF}Reklam içeriði boþ olamaz.\n\n{FFFFFF}Lütfen vermek istediðiniz reklamýn içeriðini girin;", "Tamam", "Kapat");
		if(strlen(inputtext) < 10 || strlen(inputtext) > 96) return DialogGoster(playerid, DIALOG_REKLAM_ICERIK, DIALOG_STYLE_INPUT, "Reklam Ýçeriði", "{B70000}HATA: {FFFFFF}Reklam içeriði en az 10, en fazla 96 karakter olabilir.\n\n{FFFFFF}Lütfen vermek istediðiniz reklamýn içeriðini girin;", "Tamam", "Kapat");
	
	    SetPVarString(playerid, "reklam_icerik", inputtext);
	    DialogGoster(playerid, DIALOG_REKLAM_ILETISIM, DIALOG_STYLE_INPUT, "SanAdvertisement - Ýletiþim", "Lütfen reklamýnýz için iletiþim bilgisi girin;", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_REKLAM_ILETISIM) {
	    if(!response) return UyariMesaji(playerid, "Ýþleminiz iptal edildi.");

		new iletisim;
		if(sscanf(inputtext, "d", iletisim)) return DialogGoster(playerid, DIALOG_REKLAM_ILETISIM, DIALOG_STYLE_INPUT, "SanAdvertisement - Ýletiþim", "{B70000}HATA: {FFFFFF}Ýletiþim bölümü numaralardan oluþmalýdýr.\n\n{FFFFFF}Lütfen reklamýnýz için iletiþim bilgisi girin;", "Tamam", "Kapat");
		if(strlen(inputtext) < 6 || strlen(inputtext) > 7) return DialogGoster(playerid, DIALOG_REKLAM_ILETISIM, DIALOG_STYLE_INPUT, "SanAdvertisement - Ýletiþim", "{B70000}HATA: {FFFFFF}Numaranýz 4 haneliden az, 6 haneliden fazla olamaz.\n\n{FFFFFF}Lütfen reklamýnýz için iletiþim bilgisi girin;", "Tamam", "Kapat");

		SetPVarInt(playerid, "reklam_iletisim", iletisim);
		DialogGoster(playerid, DIALOG_REKLAM_SURE, DIALOG_STYLE_TABLIST, "SanAdvertisement - Süre Seçimi", "1 Saat\t($150)\n3 Saat\t($400)\n5 Saat\t($600)\n12 Saat\t($1,500)\n24 Saat\t($3000)\n", "Seç", "Kapat");
	}
	else if(dialogid == DIALOG_REKLAM_SURE) {
	    if(!response) return UyariMesaji(playerid, "Ýþleminiz iptal edildi.");
	    new sure = 0, ucret = 0;
		if(!strcmp(inputtext, "1 Saat", true)) sure = 3600, ucret = 150;
		else if(!strcmp(inputtext, "3 Saat", true)) sure = 10800, ucret = 400;
		else if(!strcmp(inputtext, "5 Saat", true)) sure = 18000, ucret = 600;
		else if(!strcmp(inputtext, "12 Saat", true)) sure = 43200, ucret = 1500;
		else if(!strcmp(inputtext, "24 Saat", true)) sure = 86400, ucret = 3000;
		
		SetPVarInt(playerid, "reklam_sure", sure);
		SetPVarInt(playerid, "reklam_ucret", ucret);
		DialogGoster(playerid, DIALOG_REKLAM_ONCELIK, DIALOG_STYLE_TABLIST, "SanAdvertisement - Öncelik Seçimi", "Normal\t\t(Ek Ücret: $0)\nÖncelikli Reklam\t\t(Ek Ücret: $100)\nVIP Reklam\t\t(Ek Ücret: $500)\n", "Seç", "Kapat");
	}
	else if(dialogid == DIALOG_REKLAM_ONCELIK) {
	    if(!response) return UyariMesaji(playerid, "Ýþleminiz iptal edildi.");
	    
		new ucret = GetPVarInt(playerid, "reklam_ucret"), ekucret = 0;
		if(!strcmp(inputtext, "Normal", true)) ekucret = 0;
		else if(!strcmp(inputtext, "Öncelikli Reklam", true)) ekucret = 100;
		else if(!strcmp(inputtext, "VIP Reklam", true)) ekucret = 500;
		
		ucret = ucret + ekucret;
		if(OyuncuBilgi[playerid][oBankaPara] < ucret) return HataMesaji(playerid, "Bankanda bu reklam için yeterli para yok.");
		new reklam_sure = GetPVarInt(playerid, "reklam_sure"), reklam_icerik[128], reklam_iletisim = GetPVarInt(playerid, "reklam_iletisim"), reklam_ajans = GetPVarInt(playerid, "reklam_ajans");
		GetPVarString(playerid, "reklam_icerik", reklam_icerik, sizeof(reklam_icerik));
		for(new i = 0; i != MAKSIMUM_REKLAM; i ++) if(isnull(ReklamBilgi[i][reklamIcerik])) {
		    format(ReklamBilgi[i][reklamIcerik], sizeof(reklam_icerik), "%s", reklam_icerik);
		    ReklamBilgi[i][reklamOncelik] = listitem;
		    ReklamBilgi[i][reklamAjans] = reklam_ajans;
		    ReklamBilgi[i][reklamVeren] = OyuncuBilgi[playerid][oID];
		    ReklamBilgi[i][reklamSure] = gettime() + reklam_sure;
		    ReklamBilgi[i][reklamIletisim] = reklam_iletisim;
		    OyuncuBilgi[playerid][oBankaPara] -= ucret;
		    new vergilifiyat = 80 * ucret / 100;
			for(new kasaid = 0; kasaid < MAKSIMUM_KASA; kasaid++) if(KasaBilgi[kasaid][kasaBirlik] == BirlikBilgi[reklam_ajans][birlikID]) KasaBilgi[kasaid][kasaPara] += vergilifiyat, Kasa_Kaydet(kasaid);
		    switch(listitem) {
		        case 0: SunucuMesaji(playerid, "Reklamýnýz baþarýyla verildi, banka hesabýnýzdan {33aa33}%s{FFFFFF} kesildi.", NumaraFormati(ucret));
		        case 1: {
					SunucuMesaji(playerid, "Öncelikli reklamýnýz yayýmlandý, banka hesabýnýzdan {33aa33}%s{FFFFFF} kesildi.", NumaraFormati(ucret));
                    foreach(new o : Player) if(OyuncuBilgi[o][oGiris] == true && OyuncuBilgi[o][oDinlenenYayin] == BirlikBilgi[reklam_ajans][birlikID] && OyuncuBilgi[o][oReklamDurum] == true) SendClientMessageEx(o, RENK_BEYAZ, "{%06x}[REKLAM]: {FFFFFF}%s - {%06x}Ýletiþim: {FFFFFF}%d", RENK_YAYIN >>> 8, reklam_icerik, RENK_YAYIN >>> 8, reklam_iletisim);
				}
		        case 2: {
		            SunucuMesaji(playerid, "VIP reklamýnýz yayýmlandý, banka hesabýnýzdan {33aa33}%s{FFFFFF} kesildi.", NumaraFormati(ucret));
					foreach(new o : Player) if(OyuncuBilgi[o][oGiris] == true && OyuncuBilgi[o][oReklamDurum] == true) SendClientMessageEx(o, RENK_BEYAZ, "{%06x}[REKLAM]: {FFFFFF}%s - {%06x}Ýletiþim: {FFFFFF}%d", RENK_YAYIN >>> 8, reklam_icerik, RENK_YAYIN >>> 8, reklam_iletisim);
		        }
		    }
			return 1;
		}
	}
	else if(dialogid == DIALOG_REHBER_MESAJGONDER) {
	    if(!response) return OyuncuBilgi[playerid][oRehber] = -1, SelectTextDraw(playerid, 0xd9b429ff);
	    
	    new mesaj[256];
	    if(isnull(inputtext)) {
	        format(mesaj, sizeof(mesaj), "{FFFFFF}Rehberinizdeki {%06x}%s {FFFFFF}adlý kiþiye göndermek istediðiniz mesajý girin;", RENK_YAYIN >>> 8, RehberBilgi[playerid][OyuncuBilgi[playerid][oRehber]][rehberIsim]);
			return DialogGoster(playerid, DIALOG_REHBER_MESAJGONDER, DIALOG_STYLE_INPUT, "cRehber: Mesaj Gönder", mesaj, "Gönder", "Kapat");
		}
	    if(strlen(inputtext) > 100) {
	        format(mesaj, sizeof(mesaj), "{B70000}HATA: {FFFFFF}Girdiðiniz mesaj en fazla 100 karakterli olabilir.\n\n{FFFFFF}Rehberinizdeki {%06x}%s {FFFFFF}adlý kiþiye göndermek istediðiniz mesajý girin;", RENK_YAYIN >>> 8, RehberBilgi[playerid][OyuncuBilgi[playerid][oRehber]][rehberIsim]);
			return DialogGoster(playerid, DIALOG_REHBER_MESAJGONDER, DIALOG_STYLE_INPUT, "cRehber: Mesaj Gönder", mesaj, "Gönder", "Kapat");
		}
		
		format(mesaj, sizeof(mesaj), "%d %s", RehberBilgi[playerid][OyuncuBilgi[playerid][oRehber]][rehberNumara], inputtext);
		cmd_sms(playerid, mesaj);
 		return OyuncuBilgi[playerid][oRehber] = -1;
	}
	else if(dialogid == DIALOG_REHBER_ISIMDUZENLE) {
	    if(!response) return OyuncuBilgi[playerid][oRehber] = -1, SelectTextDraw(playerid, 0xd9b429ff);

	    new mesaj[256];
	    if(isnull(inputtext)) {
	        format(mesaj, sizeof(mesaj), "{FFFFFF}Rehberinizdeki {%06x}%s {FFFFFF}adlý kiþiye vermek istediðiniz yeni adý girin;", RENK_YAYIN >>> 8, RehberBilgi[playerid][OyuncuBilgi[playerid][oRehber]][rehberIsim]);
			return DialogGoster(playerid, DIALOG_REHBER_ISIMDUZENLE, DIALOG_STYLE_INPUT, "cRehber: Ýsim Düzenle", mesaj, "Deðiþtir", "Kapat");
		}
	    if(strlen(inputtext) < 6 || strlen(inputtext) > 32) {
	        format(mesaj, sizeof(mesaj), "{B70000}HATA: {FFFFFF}Girilen isim en az 6 karakter, en fazla 32 karakter olabilir.\n\n{FFFFFF}Rehberinizdeki {%06x}%s {FFFFFF}adlý kiþiye vermek istediðiniz yeni adý girin;", RENK_YAYIN >>> 8, RehberBilgi[playerid][OyuncuBilgi[playerid][oRehber]][rehberIsim]);
			return DialogGoster(playerid, DIALOG_REHBER_ISIMDUZENLE, DIALOG_STYLE_INPUT, "cRehber: Ýsim Düzenle", mesaj, "Deðiþtir", "Kapat");
		}
	    new id = OyuncuBilgi[playerid][oRehber];
	    format(RehberBilgi[playerid][id][rehberIsim], 32, "%s", inputtext);
	    Rehber_Kaydet(playerid, id);
	    SunucuMesaji(playerid, "Rehberinizdeki {%06x}%d {FFFFFF}numaralý kiþinin adý \"%s\" olarak deðiþtirildi.", RENK_YAYIN >>> 8, RehberBilgi[playerid][id][rehberNumara], inputtext);
	    OyuncuBilgi[playerid][oRehber] = -1;
	    SelectTextDraw(playerid, 0xd9b429ff);
	}
	else if(dialogid == DIALOG_REHBER_NUMARADUZENLE) {
	    if(!response) return OyuncuBilgi[playerid][oRehber] = -1, SelectTextDraw(playerid, 0xd9b429ff);

	    new numara, mesaj[256];
	    if(sscanf(inputtext, "d", numara)) {
	        format(mesaj, sizeof(mesaj), "{FFFFFF}Rehberinizdeki {%06x}%s {FFFFFF}adlý kiþiye tanýmlamak istediðiniz yeni numarasýyý girin;", RENK_YAYIN >>> 8, RehberBilgi[playerid][OyuncuBilgi[playerid][oRehber]][rehberIsim]);
			return DialogGoster(playerid, DIALOG_REHBER_NUMARADUZENLE, DIALOG_STYLE_INPUT, "cRehber: Numara Düzenle", mesaj, "Deðiþtir", "Kapat");
		}
	    if(strlen(inputtext) < 4 || strlen(inputtext) > 7) {
	        format(mesaj, sizeof(mesaj), "{B70000}HATA: {FFFFFF}Geçersiz numara formatý.\n\n{FFFFFF}Rehberinizdeki {%06x}%s {FFFFFF}adlý kiþiye tanýmlamak istediðiniz yeni numarasýyý girin;", RENK_YAYIN >>> 8, RehberBilgi[playerid][OyuncuBilgi[playerid][oRehber]][rehberIsim]);
			return DialogGoster(playerid, DIALOG_REHBER_NUMARADUZENLE, DIALOG_STYLE_INPUT, "cRehber: Numara Düzenle", mesaj, "Deðiþtir", "Kapat");
		}
	    new id = OyuncuBilgi[playerid][oRehber];
	    RehberBilgi[playerid][id][rehberNumara] = numara;
	    Rehber_Kaydet(playerid, id);
	    SunucuMesaji(playerid, "Rehberinizdeki {%06x}%s {FFFFFF}adlý kiþinin numarasý %d olarak deðiþtirildi.", RENK_YAYIN >>> 8, RehberBilgi[playerid][id][rehberIsim], numara);
	    OyuncuBilgi[playerid][oRehber] = -1;
	    SelectTextDraw(playerid, 0xd9b429ff);
	}
	else if(dialogid == DIALOG_REHBER_OLUSTUR) {
	    if(!response) return SelectTextDraw(playerid, 0xd9b429ff);

	    new numara;
	    if(sscanf(inputtext, "d", numara)) return DialogGoster(playerid, DIALOG_REHBER_OLUSTUR, DIALOG_STYLE_INPUT, "cRehber: Yeni Kiþi Oluþtur", "{FFFFFF}Rehberinize kaydetmek istediðiniz numarayý giriniz;", "Tamam", "Kapat");
	    if(strlen(inputtext) < 4 || strlen(inputtext) > 7) return DialogGoster(playerid, DIALOG_REHBER_OLUSTUR, DIALOG_STYLE_INPUT, "cRehber: Yeni Kiþi Oluþtur", "{B70000}HATA: {FFFFFF}Geçersiz numara formatý.\n\n{FFFFFF}Rehberinize kaydetmek istediðiniz numarayý giriniz;", "Tamam", "Kapat");

	    SetPVarInt(playerid, "Rehber_Numara", numara);
	    return DialogGoster(playerid, DIALOG_REHBER_OLUSTUR_ISIM, DIALOG_STYLE_INPUT, "cRehber: Yeni Kiþi Oluþtur", "{FFFFFF}Lütfen kaydetmek istediðiniz numaraya bir isim verin:", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_REHBER_OLUSTUR_ISIM) {
	    if(!response) return SelectTextDraw(playerid, 0xd9b429ff);

	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_REHBER_OLUSTUR_ISIM, DIALOG_STYLE_INPUT, "cRehber: Yeni Kiþi Oluþtur", "{FFFFFF}Lütfen kaydetmek istediðiniz numaraya bir isim verin:", "Tamam", "Kapat");
	    if(strlen(inputtext) < 2 || strlen(inputtext) > 32) return DialogGoster(playerid, DIALOG_REHBER_OLUSTUR_ISIM, DIALOG_STYLE_INPUT, "cRehber: Yeni Kiþi Oluþtur", "{B70000}HATA: {FFFFFF}Girilen isim en az 2 karakter, en fazla 32 karakter olabilir.\n\n{FFFFFF}Lütfen kaydetmek istediðiniz numaraya bir isim verin:", "Tamam", "Kapat");
		if(Rehber_Sayi(playerid) >= 15 && OyuncuBilgi[playerid][oVIP] == 0) return HataMesaji(playerid, "Rehberine daha fazla kiþi eklemek için VIP olmalýsýn.");
		if(Rehber_Sayi(playerid) >= 20 && OyuncuBilgi[playerid][oVIP] == 1) return HataMesaji(playerid, "Rehberine daha fazla kiþi eklemek için Gümüþ VIP olmalýsýn.");
		if(Rehber_Sayi(playerid) >= 30 && OyuncuBilgi[playerid][oVIP] == 2) return HataMesaji(playerid, "Rehberine daha fazla kiþi eklemek için Altýn VIP olmalýsýn.");
		if(Rehber_Sayi(playerid) >= 40 && OyuncuBilgi[playerid][oVIP] == 3) return HataMesaji(playerid, "Rehberinde maksimum sayýda kiþi var, daha fazla ekleyemezsin.");

	    new numara = GetPVarInt(playerid, "Rehber_Numara"), id = -1;
		id = Rehber_Ekle(playerid, inputtext, numara);

		if(id == -1) return HataMesaji(playerid, "Rehberine kaydedebileceðin maksimum kiþi sayýsýný aþtýn, daha fazla kayýt yapamazsýn.");
		SunucuMesaji(playerid, "%d, %s adýyla rehberinize kaydedildi.", numara, inputtext);
	}
	else if(dialogid == DIALOG_MESAJ) {
		if(!response) return 0;

		new numara;
		if(sscanf(inputtext, "d", numara))
			return DialogGoster(playerid, DIALOG_MESAJ, DIALOG_STYLE_INPUT, "cMessage", "Mesaj yollamak istediðin numarayý giriniz:", "Tamam", "Kapat");

		foreach(new i : Player) if(OyuncuBilgi[i][oTelefonNumarasi] == numara) {
			SetPVarInt(playerid, "mNumara", numara);
			return DialogGoster(playerid, DIALOG_MESAJ2, DIALOG_STYLE_INPUT, "cMessage", "Lütfen göndermek istediðiniz mesajý girin:", "Gönder", "Kapat");
		}
		UyariMesaji(playerid, "Geçersiz numara girdin.");
		DialogGoster(playerid, DIALOG_MESAJ, DIALOG_STYLE_INPUT, "cMessage", "Mesaj yollamak istediðin numarayý giriniz:", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_MESAJ2) {
		if(!response) return 0;

		if(isnull(inputtext))
			return DialogGoster(playerid, DIALOG_MESAJ2, DIALOG_STYLE_INPUT, "cMessage", "Lütfen göndermek istediðiniz mesajý girin:", "Gönder", "Kapat");

		new numara = GetPVarInt(playerid, "mNumara"), num = -1;
		if(numara == 0) return HataMesaji(playerid, "Bu telefon numarasý geçersizdir!");
		if(numara == 911) return HataMesaji(playerid, "911 hattýna mesaj gönderemezsin.");

		foreach(new i : Player) if(OyuncuBilgi[i][oTelefonNumarasi] == numara) {
			if(OyuncuBilgi[i][oTelefonDurum] == false) return HataMesaji(playerid, "Mesaj iletilemedi.");

			SendClientMessageEx(i, RENK_SARI, "[SMS] {D2D2D2}%s | Gönderen: %d", inputtext, OyuncuBilgi[playerid][oTelefonNumarasi]);
			cmd_ado(i, "Telefonundan mesaj bildirim sesi geldi.");
			ParaEkle(playerid, -SMS_UCRET);
			num = i;
		}
		SetPVarInt(playerid, "mNumara", 0);
		if(num == -1)
  		return UyariMesaji(playerid, "Mesaj iletilemedi.");
	}
	else if(dialogid == DIALOG_ARAMA) {
		if(!response) return false;

		new numara, num[144];
		if(sscanf(inputtext, "d", numara))
		    return DialogGoster(playerid, DIALOG_ARAMA, DIALOG_STYLE_INPUT, "Arama Yap", "Arama yapmak istediðiniz numarayý girin:", "Ara", "Kapat");

		format(num, sizeof(num), "%d", numara);
		cmd_ara(playerid, num);
	}
	else if(dialogid == DIALOG_911_SECIM) {
	    if(response) DialogGoster(playerid, DIALOG_911_LSPD, DIALOG_STYLE_INPUT, "911 - LSPD", "Lütfen ihbarýnýzý girin;", "Tamam", "Ýptal");
	    else if(!response) DialogGoster(playerid, DIALOG_911_LSFD, DIALOG_STYLE_INPUT, "911 - LSFD", "Lütfen ihbarýnýzý girin;", "Tamam", "Ýptal");
	}
	else if(dialogid == DIALOG_911_LSFD) {
	    if(!response) return 0;

		if(isnull(inputtext))
		    return DialogGoster(playerid, DIALOG_911_LSFD, DIALOG_STYLE_INPUT, "911 - LSFD", "Lütfen ihbarýnýzý girin;", "Tamam", "Ýptal");

		SetPVarString(playerid, "ihbar", inputtext);
		DialogGoster(playerid, DIALOG_911_LSFD_YER, DIALOG_STYLE_INPUT, "911 - LSFD", "Lütfen olay yerini belirtin;", "Tamam", "Ýptal");
	}
	else if(dialogid == DIALOG_911_LSFD_YER) {
	    if(!response) return 0;

		for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikTur] == BIRLIK_MEDIKAL)
		{
		    new ihbar[128];
		    GetPVarString(playerid, "ihbar", ihbar, sizeof(ihbar));
		    GetPlayerPos(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
		    BirlikMesaji(i, RENK_IHBAR, "[911 HATTI]");
        	BirlikMesaji(i, RENK_IHBAR, "Gelen Ýhbar: %s", ihbar);
        	BirlikMesaji(i, RENK_IHBAR, "Olay Yeri: %s", inputtext);
			BirlikMesaji(i, RENK_IHBAR, "Ýhbar Sahibi: %s (%d) | Telefondan alýnan son sinyal: %s", OyuncuIsim(playerid), OyuncuBilgi[playerid][oTelefonNumarasi], LokasyonBul(OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]));
			DeletePVar(playerid, "ihbar");
        }
        return cmd_ame(playerid, "telefonuyla uðraþýr."), SunucuMesaji(playerid, "Ýhbarýnýz baþarýyla iletildi.");
	}
	else if(dialogid == DIALOG_911_LSPD) {
	    if(!response) return 0;

		if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_911_LSPD, DIALOG_STYLE_INPUT, "911 - LSPD", "Lütfen ihbarýnýzý girin;", "Tamam", "Ýptal");

		SetPVarString(playerid, "ihbar", inputtext);
		if(OyuncuBilgi[playerid][oDialog] == -1) DialogGoster(playerid, DIALOG_911_LSPD_YER, DIALOG_STYLE_INPUT, "911 - LSPD", "Lütfen olay yerini belirtin;", "Tamam", "Ýptal");
	}
	else if(dialogid == DIALOG_911_LSPD_YER) {
	    if(!response) return 0;

		for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikTur] == BIRLIK_POLIS)
		{
		    static ihbar[128];
		    GetPVarString(playerid, "ihbar", ihbar, sizeof(ihbar));
		    GetPlayerPos(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
		    BirlikMesaji(i, RENK_IHBAR, "[911 HATTI]");
        	BirlikMesaji(i, RENK_IHBAR, "Gelen Ýhbar: %s", ihbar);
        	BirlikMesaji(i, RENK_IHBAR, "Olay Yeri: %s", inputtext);
			BirlikMesaji(i, RENK_IHBAR, "Ýhbar Sahibi: %s (%d) | Telefondan alýnan son sinyal: %s", OyuncuIsim(playerid), OyuncuBilgi[playerid][oTelefonNumarasi], LokasyonBul(OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]));
			DeletePVar(playerid, "ihbar");
        }
        return cmd_me(playerid, "telefonuyla uðraþýr."), SunucuMesaji(playerid, "Ýhbarýnýz baþarýyla iletildi.");
	}
	else if(dialogid == DIALOG_SATICI_SILAH) {
	    if(!response || Satici_Yakin(playerid) == -1) return false;

	    if(!strcmp(inputtext, "Desert Eagle", true)) {
            if(OyuncuBilgi[playerid][oPara] < SATICI_DEAGLE_FIYAT) return HataMesaji(playerid, "Bu silahýn ücretini(%s) karþýlayamýyorsun.", NumaraFormati(SATICI_DEAGLE_FIYAT));
			if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_DEAGLE]) && SilahSlotBul[WEAPON_DEAGLE] != 0) return HataMesaji(playerid, "Bu silah türü sende bulunuyor.");

            Silahver(playerid, WEAPON_DEAGLE, 30);
            ParaEkle(playerid, -SATICI_DEAGLE_FIYAT);
            SunucuMesaji(playerid, "Silah satýcýsýndan %s ödeyerek \"%s\" satýn aldýn.", NumaraFormati(SATICI_DEAGLE_FIYAT), inputtext);
        }
        else if(!strcmp(inputtext, "AK47", true)) {
            if(OyuncuBilgi[playerid][oPara] < SATICI_AK47_FIYAT) return HataMesaji(playerid, "Bu silahýn ücretini(%s) karþýlayamýyorsun.", NumaraFormati(SATICI_AK47_FIYAT));
			if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_AK47]) && SilahSlotBul[WEAPON_AK47] != 0) return HataMesaji(playerid, "Bu silah türü sende bulunuyor.");

            Silahver(playerid, WEAPON_AK47, 30);
            ParaEkle(playerid, -SATICI_AK47_FIYAT);
            SunucuMesaji(playerid, "Silah satýcýsýndan %s ödeyerek \"%s\" satýn aldýn.", NumaraFormati(SATICI_AK47_FIYAT), inputtext);
        }
        else if(!strcmp(inputtext, "MP5", true)) {
            if(OyuncuBilgi[playerid][oPara] < SATICI_MP5_FIYAT) return HataMesaji(playerid, "Bu silahýn ücretini(%s) karþýlayamýyorsun.", NumaraFormati(SATICI_MP5_FIYAT));
			if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_MP5]) && SilahSlotBul[WEAPON_MP5] != 0) return HataMesaji(playerid, "Bu silah türü sende bulunuyor.");

            Silahver(playerid, WEAPON_MP5, 30);
            ParaEkle(playerid, -SATICI_MP5_FIYAT);
            SunucuMesaji(playerid, "Silah satýcýsýndan %s ödeyerek \"%s\" satýn aldýn.", NumaraFormati(SATICI_MP5_FIYAT), inputtext);
        }
        else if(!strcmp(inputtext, "Rifle", true)) {
            if(OyuncuBilgi[playerid][oPara] < SATICI_RIFLE_FIYAT) return HataMesaji(playerid, "Bu silahýn ücretini(%s) karþýlayamýyorsun.", NumaraFormati(SATICI_RIFLE_FIYAT));
			if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_RIFLE]) && SilahSlotBul[WEAPON_RIFLE] != 0) return HataMesaji(playerid, "Bu silah türü sende bulunuyor.");

            Silahver(playerid, WEAPON_RIFLE, 30);
            ParaEkle(playerid, -SATICI_RIFLE_FIYAT);
            SunucuMesaji(playerid, "Silah satýcýsýndan %s ödeyerek \"%s\" satýn aldýn.", NumaraFormati(SATICI_RIFLE_FIYAT), inputtext);
        }
        else if(!strcmp(inputtext, "Colt 45/9mm", true)) {
            if(OyuncuBilgi[playerid][oPara] < SATICI_9MM_FIYAT) return HataMesaji(playerid, "Bu silahýn ücretini(%s) karþýlayamýyorsun.", NumaraFormati(SATICI_9MM_FIYAT));
			if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_COLT45]) && SilahSlotBul[WEAPON_COLT45] != 0) return HataMesaji(playerid, "Bu silah türü sende bulunuyor.");

            Silahver(playerid, WEAPON_COLT45, 30);
            ParaEkle(playerid, -SATICI_9MM_FIYAT);
            SunucuMesaji(playerid, "Silah satýcýsýndan %s ödeyerek \"%s\" satýn aldýn.", NumaraFormati(SATICI_9MM_FIYAT), inputtext);
        }
        else if(!strcmp(inputtext, "Shotgun", true)) {
            if(OyuncuBilgi[playerid][oPara] < SATICI_SHOTGUN_FIYAT) return HataMesaji(playerid, "Bu silahýn ücretini(%s) karþýlayamýyorsun.", NumaraFormati(SATICI_SHOTGUN_FIYAT));
			if(SilahSlotKontrol(playerid, SilahSlotBul[WEAPON_SHOTGUN]) && SilahSlotBul[WEAPON_SHOTGUN] != 0) return HataMesaji(playerid, "Bu silah türü sende bulunuyor.");

            Silahver(playerid, WEAPON_SHOTGUN, 30);
            ParaEkle(playerid, -SATICI_SHOTGUN_FIYAT);
            SunucuMesaji(playerid, "Silah satýcýsýndan %s ödeyerek \"%s\" satýn aldýn.", NumaraFormati(SATICI_SHOTGUN_FIYAT), inputtext);
        }
        if(OyuncuBilgi[playerid][oSilahDelay] == 0) OyuncuBilgi[playerid][oSilahDelay] = gettime() + 86400;
        else if(OyuncuBilgi[playerid][oSilahHakki] > 0 && OyuncuBilgi[playerid][oSilahDelay] != 0) OyuncuBilgi[playerid][oSilahHakki]--;
		new oyuncu_isim[MAX_PLAYER_NAME + 1], log_icerik[144];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%s) silah satýcýsýndan %s aldý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], inputtext);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/silah.txt", "%s", log_icerik);
	}
	else if(dialogid == DIALOG_SATICI_MERMI) {
		if(!response) return 0;
		if(Satici_Yakin(playerid) == -1) return HataMesaji(playerid, "Bir satýcýya yakýn deðilsin.");
		if(SaticiBilgi[Satici_Yakin(playerid)][sTur] != 4) return HataMesaji(playerid, "Yakýnýnda olduðun satýcý mermi satýcýsý deðil.");
		new silahid, mermi, eklenecekmermi = 0, fiyat = 0, indirim = 0, limit = 0;
		for(new i = 0; i < 13; i ++)
		{
			GetPlayerWeaponData(playerid, i, silahid, mermi);
			if(silahid > 0 && OyuncuBilgi[playerid][oSilah][i] == silahid) if(!strcmp(SilahIsim(silahid), inputtext, true)) {
				switch(silahid) {
                    case WEAPON_DEAGLE: eklenecekmermi = 7, fiyat = 7, limit = DEAGLE_LIMIT;
                    case WEAPON_AK47: eklenecekmermi = 30, fiyat = 45, limit = AK47_LIMIT;
                    case WEAPON_M4: eklenecekmermi = 30, fiyat = 60, limit = M4_LIMIT;
                    case WEAPON_MP5: eklenecekmermi = 30, fiyat = 30, limit = MP5_LIMIT;
                    case WEAPON_TEC9: eklenecekmermi = 50, fiyat = 50, limit = TEC9_LIMIT;
                    case WEAPON_SHOTGUN: eklenecekmermi = 10, fiyat = 15, limit = SHOTGUN_LIMIT;
                    case WEAPON_RIFLE: eklenecekmermi = 10, fiyat = 30, limit = RIFLE_LIMIT;
                    case WEAPON_UZI: eklenecekmermi = 50, fiyat = 50, limit = UZI_LIMIT;
                    case WEAPON_COLT45: eklenecekmermi = 17, fiyat = 10, limit = COLT45_LIMIT;
                    case WEAPON_SHOTGSPA: eklenecekmermi = 7, fiyat = 21, limit = COMBATSHOTGUN_LIMIT;
				}
				if(limit != 0 && mermi + eklenecekmermi > limit) return HataMesaji(playerid, "Bu silahýna mermi limitini(%d) aþtýðý için daha fazla mermi alamazsýn.", limit);
				switch(OyuncuBilgi[playerid][oVIP]) {
					case 1: indirim = 10 * fiyat / 100;
					case 2: indirim = 25 * fiyat / 100;
					case 3: indirim = 50 * fiyat / 100;
				}
				if(fiyat == 0) return HataMesaji(playerid, "Bir sorun oluþtu.");
				if(OyuncuBilgi[playerid][oPara] < fiyat - indirim) return HataMesaji(playerid, "Bu silaha mermi almak için yeterli paran yok.");
				if(SilahSlotKontrol(playerid, SilahSlotBul[silahid]) && OyuncuBilgi[playerid][oSilah][SilahSlotBul[silahid]] != silahid) return HataMesaji(playerid, "Bir sorun oluþtu.");
				ParaEkle(playerid, -fiyat - indirim);
				Silahver(playerid, silahid, eklenecekmermi);
				return SunucuMesaji(playerid, "%s silahýna %s fiyatýna %d adet mermi satýn aldýn.", SilahIsim(silahid), NumaraFormati(fiyat - indirim), eklenecekmermi);
			}
		}
		HataMesaji(playerid, "Bir sorun oluþtu.");
	}
	else if(dialogid == DIALOG_SATICI) {
	    if(!response || Satici_Yakin(playerid) == -1) return false;

		new id = Satici_Yakin(playerid);
		if(OyuncuBilgi[playerid][oPara] < SaticiBilgi[id][sFiyat]) return HataMesaji(playerid, "Satýcýnýn istediði fiyatý karþýlayamýyorsun.");
		switch(SaticiBilgi[id][sTur]) {
		    case 1: {
				switch(OyuncuBilgi[playerid][oVIP]) {
				    case 1: if(SaticiBilgi[id][sAdet] + OyuncuBilgi[playerid][oTohum] > 7) return HataMesaji(playerid, "Üzerinde en fazla 7 tohum bulunabilir.");
				    case 2: if(SaticiBilgi[id][sAdet] + OyuncuBilgi[playerid][oTohum] > 10) return HataMesaji(playerid, "Üzerinde en fazla 10 tohum bulunabilir.");
				    case 3: if(SaticiBilgi[id][sAdet] + OyuncuBilgi[playerid][oTohum] > 15) return HataMesaji(playerid, "Üzerinde en fazla 15 tohum bulunabilir.");
				    default: if(SaticiBilgi[id][sAdet] + OyuncuBilgi[playerid][oTohum] > 5) return HataMesaji(playerid, "Üzerinde en fazla 5 tohum bulunabilir.");
				}
				SunucuMesaji(playerid, "%s fiyatýna %d adet tohum aldýn.", NumaraFormati(SaticiBilgi[id][sFiyat]), SaticiBilgi[id][sAdet]), OyuncuBilgi[playerid][oTohum] += SaticiBilgi[id][sAdet];
			}
			case 2: SunucuMesaji(playerid, "%s fiyatýna %d adet maymuncuk aldýn.", NumaraFormati(SaticiBilgi[id][sFiyat]), SaticiBilgi[id][sAdet]), OyuncuBilgi[playerid][oMaymuncuk] += SaticiBilgi[id][sAdet];
			case 5: {
			    if(OyuncuBilgi[playerid][oKelepceli] == 0) return HataMesaji(playerid, "Kelepçeli deðilsin.");
			
			    OyuncuBilgi[playerid][oKelepceli] = 0;
				if(OyuncuBilgi[playerid][oSurukleniyor] != INVALID_PLAYER_ID && IsPlayerConnected(OyuncuBilgi[playerid][oSurukleniyor])) {
				    new hedefid = OyuncuBilgi[playerid][oSurukleniyor];
					OyuncuBilgi[hedefid][oSuruklenen] = INVALID_PLAYER_ID;
					UyariMesaji(hedefid, "Sürüklediðiniz kiþinin kelepçesi çýkarýldý.");
				}
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			    RemovePlayerAttachedObject(playerid, 9);
			}
		}
		ParaEkle(playerid, -SaticiBilgi[id][sFiyat]);
		OyuncuKaydet(playerid);
	}
	/*else if(dialogid == DIALOG_URETIM_BILGI) {
		if(!response) return false;
		new icerik[384];
		if(!strcmp(inputtext, "Colt 45/9mm", true)) {
			format(icerik, sizeof(icerik), "{0053A7}Gereken Materyal:\t\t{7a8a9a}%s\n{0053A7}Gereken Ücret:\t\t\t{7a8a9a}%s\n{0053A7}Gereken Parçalar: {7a8a9a}1 Gövde, 1 Namlu, 1 Hazne\n\n{0053A7}%s {7a8a9a}model silahý üretmek istiyor musunuz?", NumaraFormati(COLT45_MATERYAL, ""), NumaraFormati(COLT45_URETIM_UCRET), inputtext);
		}
		else if(!strcmp(inputtext, "Desert Eagle", true)) {
		    format(icerik, sizeof(icerik), "{0053A7}Gereken Materyal:\t\t{7a8a9a}%s\n{0053A7}Gereken Ücret:\t\t\t{7a8a9a}%s\n{0053A7}Gereken Parçalar: {7a8a9a}1 Gövde, 1 Namlu, 1 Hazne\n\n{0053A7}%s {7a8a9a}model silahý üretmek istiyor musunuz?", NumaraFormati(DEAGLE_MATERYAL, ""), NumaraFormati(DEAGLE_URETIM_UCRET), inputtext);
		}
		else if(!strcmp(inputtext, "Shotgun", true)) {
		    format(icerik, sizeof(icerik), "{0053A7}Gereken Materyal:\t\t{7a8a9a}%s\n{0053A7}Gereken Ücret:\t\t\t{7a8a9a}%s\n{0053A7}Gereken Parçalar: {7a8a9a}1 Gövde, 1 Namlu, 1 Hazne\n\n{0053A7}%s {7a8a9a}model silahý üretmek istiyor musunuz?", NumaraFormati(SHOTGUN_MATERYAL, ""), NumaraFormati(SHOTGUN_URETIM_UCRET), inputtext);
		}
		else if(!strcmp(inputtext, "MP5", true)) {
		    format(icerik, sizeof(icerik), "{0053A7}Gereken Materyal:\t\t{7a8a9a}%s\n{0053A7}Gereken Ücret:\t\t\t{7a8a9a}%s\n{0053A7}Gereken Parçalar: {7a8a9a}1 Gövde, 1 Namlu, 1 Hazne\n\n{0053A7}%s {7a8a9a}model silahý üretmek istiyor musunuz?", NumaraFormati(MP5_MATERYAL, ""), NumaraFormati(MP5_URETIM_UCRET), inputtext);
		}
		else if(!strcmp(inputtext, "AK47", true)) {
            format(icerik, sizeof(icerik), "{0053A7}Gereken Materyal:\t\t{7a8a9a}%s\n{0053A7}Gereken Ücret:\t\t\t{7a8a9a}%s\n{0053A7}Gereken Parçalar: {7a8a9a}2 Gövde, 1 Namlu, 1 Hazne\n\n{0053A7}%s {7a8a9a}model silahý üretmek istiyor musunuz?", NumaraFormati(AK47_MATERYAL, ""), NumaraFormati(AK47_URETIM_UCRET), inputtext);
		}
		else if(!strcmp(inputtext, "M4", true)) {
		    format(icerik, sizeof(icerik), "{0053A7}Gereken Materyal:\t\t{7a8a9a}%s\n{0053A7}Gereken Ücret:\t\t\t{7a8a9a}%s\n{0053A7}Gereken Parçalar: {7a8a9a}2 Gövde, 1 Namlu, 1 Hazne\n\n{0053A7}%s {7a8a9a}model silahý üretmek istiyor musunuz?", NumaraFormati(M4_MATERYAL, ""), NumaraFormati(M4_URETIM_UCRET), inputtext);
		}
		else if(!strcmp(inputtext, "Uzi", true)) {
		    format(icerik, sizeof(icerik), "{0053A7}Gereken Materyal:\t\t{7a8a9a}%s\n{0053A7}Gereken Ücret:\t\t\t{7a8a9a}%s\n{0053A7}Gereken Parçalar: {7a8a9a}1 Namlu, 1 Hazne\n\n{0053A7}%s {7a8a9a}model silahý üretmek istiyor musunuz?", NumaraFormati(UZI_MATERYAL, ""), NumaraFormati(UZI_URETIM_UCRET), inputtext);
		}
		else if(!strcmp(inputtext, "TEC-9", true)) {
		    format(icerik, sizeof(icerik), "{0053A7}Gereken Materyal:\t\t{7a8a9a}%s\n{0053A7}Gereken Ücret:\t\t\t{7a8a9a}%s\n{0053A7}Gereken Parçalar: {7a8a9a}1 Namlu, 1 Hazne\n\n{0053A7}%s {7a8a9a}model silahý üretmek istiyor musunuz?", NumaraFormati(TEC9_MATERYAL, ""), NumaraFormati(TEC9_URETIM_UCRET), inputtext);
		}
		format(OyuncuBilgi[playerid][oUretimSecilen], 32, "%s", inputtext);
		DialogGoster(playerid, DIALOG_SILAH_URETIM, DIALOG_STYLE_MSGBOX, "Silah Üretim", icerik, "Üret", "Kapat");
	}
	else if(dialogid == DIALOG_SILAH_URETIM) {
	    if(!response) return format(OyuncuBilgi[playerid][oUretimSecilen], 32, "Yok");
	    if(OyuncuBilgi[playerid][oUretimSure] > 0) return HataMesaji(playerid, "Þu anda silah üretimi yapýyorsun, bittiðinde tekrar üretebilirsin.");
		new gereken_ucret = 0, gereken_materyal = 0, gereken_govde = 0, gereken_namlu = 0, gereken_hazne = 0, uretim_silah = 0;
	    if(!strcmp(OyuncuBilgi[playerid][oUretimSecilen], "Colt 45/9mm", true)) gereken_ucret = COLT45_URETIM_UCRET, gereken_materyal = COLT45_MATERYAL, gereken_govde = 1, gereken_namlu = 1, gereken_hazne = 1, uretim_silah = WEAPON_COLT45;
		else if(!strcmp(OyuncuBilgi[playerid][oUretimSecilen], "Desert Eagle", true)) gereken_ucret = DEAGLE_URETIM_UCRET, gereken_materyal = DEAGLE_MATERYAL, gereken_govde = 1, gereken_namlu = 1, gereken_hazne = 1, uretim_silah = WEAPON_DEAGLE;
		else if(!strcmp(OyuncuBilgi[playerid][oUretimSecilen], "Shotgun", true)) gereken_ucret = SHOTGUN_URETIM_UCRET, gereken_materyal = SHOTGUN_MATERYAL, gereken_govde = 1, gereken_namlu = 1, gereken_hazne = 1, uretim_silah = WEAPON_SHOTGUN;
		else if(!strcmp(OyuncuBilgi[playerid][oUretimSecilen], "MP5", true)) gereken_ucret = MP5_URETIM_UCRET, gereken_materyal = MP5_MATERYAL, gereken_govde = 1, gereken_namlu = 1, gereken_hazne = 1, uretim_silah = WEAPON_MP5;
		else if(!strcmp(OyuncuBilgi[playerid][oUretimSecilen], "AK47", true)) gereken_ucret = AK47_URETIM_UCRET, gereken_materyal = AK47_MATERYAL, gereken_govde = 2, gereken_namlu = 1, gereken_hazne = 1, uretim_silah = WEAPON_AK47;
		else if(!strcmp(OyuncuBilgi[playerid][oUretimSecilen], "M4", true)) gereken_ucret = M4_URETIM_UCRET, gereken_materyal = M4_MATERYAL, gereken_govde = 2, gereken_namlu = 1, gereken_hazne = 1, uretim_silah = WEAPON_M4;
		else if(!strcmp(OyuncuBilgi[playerid][oUretimSecilen], "Uzi", true)) gereken_ucret = UZI_URETIM_UCRET, gereken_materyal = UZI_MATERYAL, gereken_govde = 0, gereken_namlu = 1, gereken_hazne = 1, uretim_silah = WEAPON_UZI;
		else if(!strcmp(OyuncuBilgi[playerid][oUretimSecilen], "TEC-9", true)) gereken_ucret = TEC9_URETIM_UCRET, gereken_materyal = TEC9_MATERYAL, gereken_govde = 0, gereken_namlu = 1, gereken_hazne = 1, uretim_silah = WEAPON_TEC9;

		if(uretim_silah == 0) return HataMesaji(playerid, "Bir sorun oluþtu.");
		if(OyuncuBilgi[playerid][oPara] < gereken_ucret) return HataMesaji(playerid, "Üretim için yeterli paran yok. (Gereken Ücret: %s)", NumaraFormati(gereken_ucret));
		if(OyuncuBilgi[playerid][oMateryal] < gereken_materyal) return HataMesaji(playerid, "Üretim için yeterli materyalin yok. (Gereken Materyal: %s)", NumaraFormati(gereken_materyal, ""));
		if(gereken_govde > 0 && OyuncuBilgi[playerid][oGovde] < gereken_govde) return HataMesaji(playerid, "Üretim için yeterli silah gövdesi parçan yok.");
		if(gereken_namlu > 0 && OyuncuBilgi[playerid][oNamlu] < gereken_namlu) return HataMesaji(playerid, "Üretim için yeterli silah namlusu parçan yok.");
		if(gereken_hazne > 0 && OyuncuBilgi[playerid][oHazne] < gereken_hazne) return HataMesaji(playerid, "Üretim için yeterli silah haznesi parçan yok.");
		
		ParaEkle(playerid, -gereken_ucret);
		OyuncuBilgi[playerid][oMateryal] -= gereken_materyal;
		if(gereken_govde > 0) OyuncuBilgi[playerid][oGovde] -= gereken_govde;
		if(gereken_namlu > 0) OyuncuBilgi[playerid][oNamlu] -= gereken_namlu;
		if(gereken_hazne > 0) OyuncuBilgi[playerid][oHazne] -= gereken_hazne;
		OyuncuBilgi[playerid][oUretimSilah] = uretim_silah;
		OyuncuBilgi[playerid][oUretimSure] = 60;
		TogglePlayerControllable(playerid, false);
		OyuncuBilgi[playerid][oKontrol] = false;
		SunucuMesaji(playerid, "Parçalarý verdin ve %s model silah üretmeye baþladýn, 60 saniye sürecek.", OyuncuBilgi[playerid][oUretimSecilen]);
		format(OyuncuBilgi[playerid][oUretimSecilen], 32, "Yok");
	}
	else if(dialogid == DIALOG_PARCA_URETIM) {
		if(!response) return false;
		if(OyuncuBilgi[playerid][oUretimYapiyor] > 0) return HataMesaji(playerid, "Þu anda parça üretiyorsun, bitince yap.");
		if(!strcmp(inputtext, "Gövde", true)) {
			if(OyuncuBilgi[playerid][oPara] < GOVDE_UCRET) return HataMesaji(playerid, "Yeterli üretim ücretini karþýlayamýyorsun.");
			if(OyuncuBilgi[playerid][oMateryal] < 1200) return HataMesaji(playerid, "Üretim için yeterli materyalin yok.");
			
			ParaEkle(playerid, -GOVDE_UCRET);
			OyuncuBilgi[playerid][oMateryal] -= 1200;
			OyuncuBilgi[playerid][oUretimYapiyor] = 10;
			OyuncuBilgi[playerid][oUretimTuru] = 1;
			TogglePlayerControllable(playerid, false);
			OyuncuBilgi[playerid][oKontrol] = false;
			SunucuMesaji(playerid, "Silah Gövdesi üretiyorsun, 10 saniye bekleyeceksin.");
		}
		else if(!strcmp(inputtext, "Namlu", true)) {
			if(OyuncuBilgi[playerid][oPara] < NAMLU_UCRET) return HataMesaji(playerid, "Yeterli üretim ücretini karþýlayamýyorsun.");
			if(OyuncuBilgi[playerid][oMateryal] < 300) return HataMesaji(playerid, "Üretim için yeterli materyalin yok.");

			ParaEkle(playerid, -NAMLU_UCRET);
			OyuncuBilgi[playerid][oMateryal] -= 300;
			OyuncuBilgi[playerid][oUretimYapiyor] = 10;
			OyuncuBilgi[playerid][oUretimTuru] = 2;
			TogglePlayerControllable(playerid, false);
			OyuncuBilgi[playerid][oKontrol] = false;
			SunucuMesaji(playerid, "Silah Namlusu üretiyorsun, 10 saniye bekleyeceksin.");
		}
		else if(!strcmp(inputtext, "Hazne", true)) {
			if(OyuncuBilgi[playerid][oPara] < HAZNE_UCRET) return HataMesaji(playerid, "Yeterli üretim ücretini karþýlayamýyorsun.");
			if(OyuncuBilgi[playerid][oMateryal] < 600) return HataMesaji(playerid, "Üretim için yeterli materyalin yok.");

			ParaEkle(playerid, -HAZNE_UCRET);
			OyuncuBilgi[playerid][oMateryal] -= 600;
			OyuncuBilgi[playerid][oUretimYapiyor] = 10;
			OyuncuBilgi[playerid][oUretimTuru] = 3;
			TogglePlayerControllable(playerid, false);
			OyuncuBilgi[playerid][oKontrol] = false;
			SunucuMesaji(playerid, "Silah Haznesi üretiyorsun, 10 saniye bekleyeceksin.");
		}
	}*/
	else if(dialogid == DIALOG_EVSAT) {
		new evid = GetPVarInt(playerid, "satilanev");

	    if(response) {
	        if(!IsPlayerConnected(GetPVarInt(playerid, "evsatan"))) return HataMesaji(playerid, "Teklif yapan kiþi oyunda deðil.");
	        if(OyuncuBilgi[playerid][oPara] < GetPVarInt(playerid, "evfiyat")) {
				SetPVarInt(playerid, "evsatan", -1), SetPVarInt(playerid, "satilanev", -1), SetPVarInt(playerid, "evfiyat", -1);
				return HataMesaji(playerid, "Bu ev için yeterli paran yok.");
			}
            if(Ev_Sayi(playerid) >= OYUNCU_EV_LIMIT + OyuncuBilgi[playerid][oEkEvSlot]) return HataMesaji(playerid, "Daha fazla ev almak için ek slot satýn almalýsýn.");

			EvBilgi[evid][evSahip] = OyuncuBilgi[playerid][oID];
			new vergilifiyat = 3 * GetPVarInt(playerid, "evfiyat") / 100, fiyat = GetPVarInt(playerid, "evfiyat");
			ParaEkle(playerid, -GetPVarInt(playerid, "evfiyat"));
			ParaEkle(GetPVarInt(playerid, "evsatan"), fiyat - vergilifiyat);
			EvBilgi[evid][evSahipIsim][0] = 0;
			Ev_Yenile(evid);
			Ev_Kaydet(evid);
			SunucuMesaji(playerid, "%s adlý kiþiden %s adresli evi %s fiyatýna satýn aldýn.", OyuncuIsim(GetPVarInt(playerid, "evsatan")), EvBilgi[evid][evAdres], NumaraFormati(GetPVarInt(playerid, "evfiyat")));
			SunucuMesaji(GetPVarInt(playerid, "evsatan"), "%s adlý oyuncu %s adresli evini %s fiyatýna satýn aldý.", OyuncuIsim(playerid), EvBilgi[evid][evAdres], NumaraFormati(GetPVarInt(playerid, "evfiyat")));
			SunucuMesaji(GetPVarInt(playerid, "evsatan"), "Alýnan fiyattan %s miktarýnda vergi kesildi.", NumaraFormati(vergilifiyat));
			SetPVarInt(playerid, "evsatan", -1);
			SetPVarInt(playerid, "satilanev", -1);
			SetPVarInt(playerid, "evfiyat", -1);
	    }
	    else if(!response) {
	        if(!IsPlayerConnected(GetPVarInt(playerid, "evsatan")))
	            return HataMesaji(playerid, "Teklif yapan kiþi oyunda deðil.");

	    	SunucuMesaji(playerid, "%s adlý kiþinin %s adresli evi satma talebini reddettin.", OyuncuIsim(GetPVarInt(playerid, "evsatan")), EvBilgi[evid][evAdres]);
			SunucuMesaji(GetPVarInt(playerid, "evsatan"), "%s adlý oyuncu %s adresli evinin satma talebini reddetti.", OyuncuIsim(playerid), EvBilgi[evid][evAdres]);
			SetPVarInt(playerid, "evsatan", -1);
			SetPVarInt(playerid, "satilanev", -1);
			SetPVarInt(playerid, "evfiyat", -1);
	    }
	}
	else if(dialogid == DIALOG_ARACSAT) {
		new aracid = GetPVarInt(playerid, "satilanarac");
		if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yetkili iþbaþýnda araç satýn alamazsýn.");
	    if(response) {
	        if(!IsPlayerConnected(GetPVarInt(playerid, "aracsatan"))) return SetPVarInt(playerid, "aracsatan", -1), SetPVarInt(playerid, "satilanarac", -1), SetPVarInt(playerid, "aracfiyat", -1), HataMesaji(playerid, "Teklif yapan kiþi oyunda deðil.");
	        if(!YakinlikKontrol(playerid, GetPVarInt(playerid, "aracsatan"), 5.0)) return SetPVarInt(playerid, "aracsatan", -1), SetPVarInt(playerid, "satilanarac", -1), SetPVarInt(playerid, "aracfiyat", -1), HataMesaji(playerid, "Araç satýcýsýna yakýn olmadýðýn için iþlemin iptal edildi.");
	        if(OyuncuBilgi[playerid][oPara] < GetPVarInt(playerid, "aracfiyat")) { SetPVarInt(playerid, "aracsatan", -1), SetPVarInt(playerid, "satilanarac", -1), SetPVarInt(playerid, "aracfiyat", -1); return HataMesaji(playerid, "Bu araç için yeterli paran yok."); }
			if(Arac_Sayi(playerid) >= OYUNCU_ARAC_LIMIT + OyuncuBilgi[playerid][oEkAracSlot]) return HataMesaji(playerid, "Daha fazla araç almak için ek slot almalýsýn.");
			if(!Arac_SahipKontrol(GetPVarInt(playerid, "aracsatan"), aracid)) return HataMesaji(playerid, "Aracý satmaya çalýþan kiþi araç sahibi deðil, iþlem iptal edildi.");
			
			AracBilgi[aracid][aracSahip] = OyuncuBilgi[playerid][oID];
			new vergilifiyat = 3 * GetPVarInt(playerid, "aracfiyat") / 100, fiyat = GetPVarInt(playerid, "aracfiyat");
			ParaEkle(playerid, -GetPVarInt(playerid, "aracfiyat"));
			ParaEkle(GetPVarInt(playerid, "aracsatan"), fiyat - vergilifiyat);
		    RemovePlayerFromVehicle(GetPVarInt(playerid, "aracsatan"));
		    ClearAnimations(GetPVarInt(playerid, "aracsatan"));
			Arac_Kaydet(aracid);
		  	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], alan_isim[MAX_PLAYER_NAME + 1];
		  	GetPlayerName(GetPVarInt(playerid, "aracsatan"), oyuncu_isim, sizeof(oyuncu_isim));
		  	GetPlayerName(playerid, alan_isim, sizeof(alan_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiye %s model araç sattý. (f: %d / g: %d)", Tarih(), oyuncu_isim, OyuncuBilgi[GetPVarInt(playerid, "aracsatan")][oID], alan_isim, OyuncuBilgi[playerid][oID], AracModel(AracBilgi[aracid][aracModel]), fiyat, fiyat - vergilifiyat);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/arac.txt", "%s", log_icerik);
			SunucuMesaji(playerid, "%s adlý kiþiden %s model aracý %s fiyatýna satýn aldýn.", OyuncuIsim(GetPVarInt(playerid, "aracsatan")), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(GetPVarInt(playerid, "aracfiyat")));
			SunucuMesaji(GetPVarInt(playerid, "aracsatan"), "%s adlý oyuncu %s model aracýný %s fiyatýna satýn aldý.", OyuncuIsim(playerid), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(GetPVarInt(playerid, "aracfiyat")));
			SunucuMesaji(GetPVarInt(playerid, "aracsatan"), "Alýnan fiyattan %s miktarýnda vergi kesildi.", NumaraFormati(vergilifiyat));
			SetPVarInt(playerid, "aracsatan", -1);
			SetPVarInt(playerid, "satilanarac", -1);
			SetPVarInt(playerid, "aracfiyat", -1);
			new sorgu[512];
   			format(sorgu, sizeof(sorgu), "SELECT * FROM bagaj WHERE esyaArac = '%d'", AracBilgi[aracid][aracID]);
			mysql_tquery(mysqlB, sorgu, "BagajSifirla");
	    }
	    else if(!response) {
	        if(!IsPlayerConnected(GetPVarInt(playerid, "aracsatan")))
	            return HataMesaji(playerid, "Teklif yapan kiþi oyunda deðil.");

			SunucuMesaji(playerid, "%s adlý kiþinin %s model aracý %s fiyatýna satma talebini reddettin.", OyuncuIsim(GetPVarInt(playerid, "aracsatan")), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(GetPVarInt(playerid, "aracfiyat")));
			SunucuMesaji(GetPVarInt(playerid, "aracsatan"), "%s adlý oyuncu %s model aracýný satma talebini reddetti.", OyuncuIsim(playerid), AracModel(AracBilgi[aracid][aracModel]));
			SetPVarInt(playerid, "aracsatan", -1);
			SetPVarInt(playerid, "satilanarac", -1);
			SetPVarInt(playerid, "aracfiyat", -1);
	    }
	}
	else if(dialogid == DIALOG_ISYERISAT) {
		new id = GetPVarInt(playerid, "satilanisyeri");
	    if(response) {
	        if(!IsPlayerConnected(GetPVarInt(playerid, "isyerisatan"))) return HataMesaji(playerid, "Teklif yapan kiþi oyunda deðil.");
	        if(OyuncuBilgi[playerid][oPara] < GetPVarInt(playerid, "isyerifiyat")) { SetPVarInt(playerid, "isyerisatan", -1), SetPVarInt(playerid, "satilanisyeri", -1), SetPVarInt(playerid, "isyerifiyat", -1);
			return HataMesaji(playerid, "Bu iþyeri için yeterli paran yok."); }

			IsyeriBilgi[id][isyeriSahip] = OyuncuBilgi[playerid][oID];
			IsyeriBilgi[id][isyeriOrtak] = 0;
			ParaEkle(playerid, -GetPVarInt(playerid, "isyerifiyat"));
			ParaEkle(GetPVarInt(playerid, "isyerisatan"), GetPVarInt(playerid, "isyerifiyat"));
			IsyeriBilgi[id][isyeriSahipIsim][0] = 0;
			Isyeri_Yenile(id);
			Isyeri_Kaydet(id);
			SunucuMesaji(playerid, "%s adlý kiþiden %s isimli iþyerini %s fiyatýna satýn aldýn.", OyuncuIsim(GetPVarInt(playerid, "isyerisatan")), IsyeriBilgi[id][isyeriAd], NumaraFormati(GetPVarInt(playerid, "isyerifiyat")));
			SunucuMesaji(GetPVarInt(playerid, "isyerisatan"), "%s adlý oyuncu %s adlý iþyerini %s fiyatýna satýn aldý.", OyuncuIsim(playerid), IsyeriBilgi[id][isyeriAd], NumaraFormati(GetPVarInt(playerid, "isyerifiyat")));
			SetPVarInt(playerid, "isyerisatan", -1);
			SetPVarInt(playerid, "satilanisyeri", -1);
			SetPVarInt(playerid, "isyerifiyat", -1);
	    }
	    else if(!response) {
	        if(!IsPlayerConnected(GetPVarInt(playerid, "isyerisatan"))) return HataMesaji(playerid, "Teklif yapan kiþi oyunda deðil.");

	    	SunucuMesaji(playerid, "%s adlý kiþinin %s adlý iþyerini satma talebini reddettin.", OyuncuIsim(GetPVarInt(playerid, "isyerisatan")), IsyeriBilgi[id][isyeriAd]);
			SunucuMesaji(GetPVarInt(playerid, "isyerisatan"), "%s adlý oyuncu %s adlý iþyerinin satma talebini reddetti.", OyuncuIsim(playerid), IsyeriBilgi[id][isyeriAd]);
			SetPVarInt(playerid, "isyerisatan", -1);
			SetPVarInt(playerid, "satilanisyeri", -1);
			SetPVarInt(playerid, "isyerifiyat", -1);
	    }
	}
	else if(dialogid == DIALOG_ARACANAHTAR) {
	    if(GetPVarInt(playerid, "anahtarsahip") == INVALID_PLAYER_ID || GetPVarInt(playerid, "aracid") == -1)
	        return HataMesaji(playerid, "Bir hata oluþtuðu için iþlemin tamamlanamadý.");

	    if(response) {
	        static aracid, oyuncuid;
	        aracid = GetPVarInt(playerid, "aracid");
	        oyuncuid = GetPVarInt(playerid, "anahtarsahip");
  			if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return HataMesaji(playerid, "Araç sahibine yakýn deðilsin.");

			if(AracBilgi[aracid][aracAnahtar] > 0) {
				HataMesaji(oyuncuid, "%s adlý kiþiye önerdiðin araç anahtarý talebinde bir hata oluþtu.", OyuncuIsim(playerid));
				HataMesaji(playerid, "%s adlý kiþinin önerdiði araç anahtarý talebinde bir hata oluþtu.", OyuncuIsim(oyuncuid));
			}
			else {
			    AracBilgi[aracid][aracAnahtar] = OyuncuBilgi[playerid][oID];
			    Arac_Kaydet(aracid);
			    new model = GetVehicleModel(GetPlayerVehicleID(oyuncuid));
				SunucuMesaji(oyuncuid, "%s adlý kiþiye %s model aracýnýn anahtarýný verdin. (Araç ID: %d)", OyuncuIsim(playerid), AracModel(model), GetPlayerVehicleID(oyuncuid));
				SunucuMesaji(playerid, "%s adlý kiþi sana %s model aracýnýn anahtarýný verdi. (Araç ID: %d)", OyuncuIsim(oyuncuid), AracModel(model), GetPlayerVehicleID(oyuncuid));
			}
			SetPVarInt(playerid, "aracid", -1);
	        SetPVarInt(playerid, "anahtarsahip", INVALID_PLAYER_ID);
	    }
	    if(!response) {
	        static oyuncuid;
	        oyuncuid = GetPVarInt(playerid, "anahtarsahip");
  			if(!YakinlikKontrol(playerid, oyuncuid, 5.0))
			    return HataMesaji(playerid, "Araç sahibine yakýn deðilsin.");

			HataMesaji(oyuncuid, "%s adlý kiþi anahtarý almayý reddetti.", OyuncuIsim(playerid));
			SunucuMesaji(playerid, "%s adlý oyuncunun anahtar teklifini reddettin.", OyuncuIsim(oyuncuid));
			SetPVarInt(playerid, "aracid", -1);
	        SetPVarInt(playerid, "anahtarsahip", INVALID_PLAYER_ID);
	    }
	}
	else if(dialogid == DIALOG_USTARAMA) {
	    if(!response) {
	 		static oyuncuid;
			oyuncuid = GetPVarInt(playerid, "ustarayan");
			if(oyuncuid == INVALID_PLAYER_ID)
			    return HataMesaji(playerid, "Talep eden kiþi üst arama esnasýnda oyundan çýktýðý için iþlem iptal edildi."), SetPVarInt(playerid, "ustarayan", INVALID_PLAYER_ID);

			UyariMesaji(oyuncuid, "%s adlý kiþi üst arama talebini redetti.", OyuncuIsim(playerid));
			UyariMesaji(playerid, "%s adlý kiþinin üst arama talebini redettin.", OyuncuIsim(oyuncuid));
	        return 1;
	    }
		new oyuncuid, silahid, mermi;
		oyuncuid = GetPVarInt(playerid, "ustarayan");
		if(oyuncuid == INVALID_PLAYER_ID) return HataMesaji(playerid, "Talep eden kiþi üst arama esnasýnda oyundan çýktýðý için iþlem iptal edildi.");

		for(new i = 0; i < 13; i ++)
		{
			GetPlayerWeaponData(playerid, i, silahid, mermi);
			if(silahid > 0 && OyuncuBilgi[playerid][oSilah][i] == silahid) SendClientMessageEx(oyuncuid, RENK_GRI, "* %s (%d mermi)", SilahIsim(silahid), mermi);
		}
		SendClientMessageEx(oyuncuid, RENK_GRI, "Telefon: %s", (OyuncuBilgi[playerid][oTelefon] == 0) ? ("{B70000}Yok") : ("{33AA33}Mevcut"));
		SendClientMessageEx(oyuncuid, RENK_GRI, "Para: %s", NumaraFormati(OyuncuBilgi[playerid][oPara]));
		if(OyuncuBilgi[playerid][oTohum] != 0) SendClientMessageEx(oyuncuid, RENK_GRI, "Tohum: %s", NumaraFormati(OyuncuBilgi[playerid][oTohum], ""));
		if(OyuncuBilgi[playerid][oUyusturucu] != 0) SendClientMessageEx(oyuncuid, RENK_GRI, "Uyuþturucu: %s", NumaraFormati(OyuncuBilgi[playerid][oUyusturucu], ""));
		if(OyuncuBilgi[playerid][oIslenmemisMadde] != 0) SendClientMessageEx(oyuncuid, RENK_GRI, "Ýþlenmemiþ Madde: %s", NumaraFormati(OyuncuBilgi[playerid][oIslenmemisMadde], ""));
		if(OyuncuZirh(playerid) > 0) SendClientMessageEx(oyuncuid, RENK_GRI, "Zýrh: %d", OyuncuZirh(playerid));

		new emote[128];
		format(emote, sizeof(emote), "%s adlý kiþinin üzerini arar.", OyuncuIsim(playerid));
		cmd_ame(oyuncuid, emote);
		SetPVarInt(playerid, "ustarayan", INVALID_PLAYER_ID);
	}
	else if(dialogid == DIALOG_BIRLIKKUR) {
		if(!response) return 0;

		if(isnull(inputtext))
		    return DialogGoster(playerid, DIALOG_BIRLIKKUR, DIALOG_STYLE_INPUT, "Birlik Kurma Paneli", "Kurmak istediðin birlik ismini girin", "Tamam", "Ýptal");

		if(strlen(inputtext) < 4 || strlen(inputtext) > 32)
		    return DialogGoster(playerid, DIALOG_BIRLIKKUR, DIALOG_STYLE_INPUT, "Birlik Kurma Paneli", "{B70000}HATA: {FFFFFF}Birlik ismi en az 4, en fazla 32 karakterden oluþabilir.\nKurmak istediðin birlik ismini girin", "Tamam", "Ýptal");

		if(birlikarat(inputtext) > 0)
		    return DialogGoster(playerid, DIALOG_BIRLIKKUR, DIALOG_STYLE_INPUT, "Birlik Kurma Paneli", "{B70000}HATA: {FFFFFF}Birlik ismi kullanýlýyor.\nKurmak istediðin birlik ismini girin", "Tamam", "Ýptal");

		if(OyuncuBilgi[playerid][oPara] < BIRLIK_UCRET) return HataMesaji(playerid, "Birlik kurma ücretini karþýlayamýyorsun.");
		new bid = -1;
		bid = Birlik_Yarat(inputtext);
		if(bid == -1) return HataMesaji(playerid, "Sunucu birlik limitine ulaþtýðý için yeni birlik yaratýlamýyor!");

		DialogGoster(playerid, DIALOG_BIRLIKTURU, DIALOG_STYLE_TABLIST, "Birlik - Tür Seçimi", "Legal\nÝllegal", "Seç", "");
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir birlik kurdu. (ID: %d | Isim: %s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], BirlikBilgi[bid][birlikID], BirlikBilgi[bid][birlikAd]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
		BirlikAyarla(playerid, bid);
		ParaEkle(playerid, -BIRLIK_UCRET);
	}
	else if(dialogid == DIALOG_BIRLIKTURU)
	{
	    new tur = BIRLIK_LEGAL, birlik = OyuncuBilgi[playerid][oBirlik];
	    switch(listitem) {
	        case 0: tur = BIRLIK_LEGAL;
	        case 1: tur = BIRLIK_ILLEGAL;
	        default: tur = BIRLIK_LEGAL;
	    }
	    BirlikBilgi[birlik][birlikTur] = tur;
	    Birlik_Kaydet(birlik);
	    SunucuMesaji(playerid, "Birliðin kuruldu. (ID: %d | Ýsim: %s)", birlik, BirlikBilgi[birlik][birlikAd]);
	    return 1;
	}
	else if(dialogid == DIALOG_IPBAGLAMA)
	{
		if(!response) {
	        if(GetPVarInt(playerid, "ipbaglama_id") != INVALID_PLAYER_ID) {
				SunucuMesaji(GetPVarInt(playerid, "ipbaglama_id"), "%s adlý kiþi baðlama talebini reddetti.", OyuncuIsim(playerid));
				SunucuMesaji(playerid, "%s adlý kiþinin baðlama talebini reddettin.", OyuncuIsim(GetPVarInt(playerid, "ipbaglama_id")));
	        }
			SetPVarInt(playerid, "ipbaglama_id", INVALID_PLAYER_ID);
	    }
		else if(response) {
			if(GetPVarInt(playerid, "ipbaglama_id") == INVALID_PLAYER_ID) return HataMesaji(playerid, "Baðlama talebini gönderen kiþi oyundan çýkmýþ.");
            OyuncuBilgi[GetPVarInt(playerid, "ipbaglama_id")][oIpUrun]--;
			OyuncuBilgi[playerid][oBagli] = true;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
			SunucuMesaji(playerid, "%s adlý kiþinin baðlama talebini kabul ettin.", OyuncuIsim(GetPVarInt(playerid, "ipbaglama_id")));
			SunucuMesaji(GetPVarInt(playerid, "ipbaglama_id"), "%s adlý kiþi baðlama talebini kabul etti.", OyuncuIsim(playerid));
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], baglayan_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			GetPlayerName(GetPVarInt(playerid, "ipbaglama_id"), baglayan_isim, sizeof(baglayan_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý ellerini ip ile baðladý.", Tarih(), baglayan_isim, OyuncuBilgi[GetPVarInt(playerid, "ipbaglama_id")][oID], oyuncu_isim, OyuncuBilgi[playerid][oID]);
			Gunluk_LogKaydet(log_icerik);
			SetPVarInt(playerid, "ipbaglama_id", INVALID_PLAYER_ID);
		}
	}
	else if(dialogid == DIALOG_GOZBAGLA)
	{
	    if(!response) {
	        if(GetPVarInt(playerid, "gozbaglayanid") != INVALID_PLAYER_ID) {
				SunucuMesaji(GetPVarInt(playerid, "gozbaglayanid"), "%s adlý kiþi göz baðlama talebini reddetti.", OyuncuIsim(playerid));
				SunucuMesaji(playerid, "%s adlý kiþinin göz baðlama talebini reddettin.", OyuncuIsim(GetPVarInt(playerid, "gozbaglayanid")));
	        }
			SetPVarInt(playerid, "gozbaglayanid", INVALID_PLAYER_ID);
	    }
		else if(response) {
			if(GetPVarInt(playerid, "gozbaglayanid") == INVALID_PLAYER_ID) return HataMesaji(playerid, "Göz baðlama talebini gönderen kiþi oyundan çýkmýþ.");

			PlayerTextDrawShow(playerid, siyahekran[playerid]);
		    OyuncuBilgi[playerid][oSSMod] = false;
		    PlayerTextDrawColor(playerid, siyahekran[playerid], 0x000000FF);
			OyuncuBilgi[playerid][oGozBagli] = true;
			SunucuMesaji(playerid, "%s adlý kiþinin göz baðlama talebini kabul ettin.", OyuncuIsim(GetPVarInt(playerid, "gozbaglayanid")));
			SunucuMesaji(GetPVarInt(playerid, "gozbaglayanid"), "%s adlý kiþi göz baðlama talebini kabul etti.", OyuncuIsim(playerid));
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], baglayan_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			GetPlayerName(GetPVarInt(playerid, "gozbaglayanid"), baglayan_isim, sizeof(baglayan_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin gözünü baðladý.", Tarih(), baglayan_isim, OyuncuBilgi[GetPVarInt(playerid, "gozbaglayanid")][oID], oyuncu_isim, OyuncuBilgi[playerid][oID]);
			Gunluk_LogKaydet(log_icerik);
			SetPVarInt(playerid, "gozbaglayanid", INVALID_PLAYER_ID);
		}
	}
	else if(dialogid == DIALOG_BINAANAHTAR)
	{
		if(!response) {
	        if(GetPVarInt(playerid, "AnahtarOneren") != INVALID_PLAYER_ID) {
				SunucuMesaji(GetPVarInt(playerid, "AnahtarOneren"), "%s adlý kiþi bina anahtarý verme talebini reddetti.", OyuncuIsim(playerid));
				SunucuMesaji(playerid, "%s adlý kiþinin bina anahtarý verme talebini reddettin.", OyuncuIsim(GetPVarInt(playerid, "AnahtarOneren")));
	        }
			SetPVarInt(playerid, "AnahtarOneren", INVALID_PLAYER_ID);
			SetPVarInt(playerid, "AnahtarBina", -1);
	    }

		if(GetPVarInt(playerid, "AnahtarOneren") == INVALID_PLAYER_ID) return HataMesaji(playerid, "Bina anahtarý talebini gönderen kiþi oyundan çýkmýþ.");
		if(!YakinlikKontrol(playerid, GetPVarInt(playerid, "AnahtarOneren"), 5.0)) return HataMesaji(playerid, "Bina anahtarý talebi gönderen kiþiye yakýn deðilsin."), SetPVarInt(playerid, "AnahtarOneren", INVALID_PLAYER_ID);
		new id = GetPVarInt(playerid, "AnahtarBina");
		if(id == -1) {
			HataMesaji(playerid, "%s adlý kiþinin önerdiði bina anahtarý talebinde bir hata oluþtu.", OyuncuIsim(GetPVarInt(playerid, "AnahtarOneren")));
			HataMesaji(GetPVarInt(playerid, "AnahtarOneren"), "%s adlý kiþiye önerdiðin bina anahtarý talebinde bir hata oluþtu.", OyuncuIsim(playerid));
			SetPVarInt(playerid, "AnahtarOneren", INVALID_PLAYER_ID);
			return SetPVarInt(playerid, "AnahtarBina", -1);
		}
		if(BinaBilgi[id][binaAnahtar][0] == 0 || BinaBilgi[id][binaAnahtar][1] == 0 || BinaBilgi[id][binaAnahtar][2] == 0 || BinaBilgi[id][binaAnahtar][3] == 0 || BinaBilgi[id][binaAnahtar][4] == 0) {
			for(new i = 0; i != 5; i ++) if(BinaBilgi[id][binaAnahtar][i] == 0) {
				BinaBilgi[id][binaAnahtar][i] = OyuncuBilgi[playerid][oID];
				Bina_Kaydet(id);
				SunucuMesaji(playerid, "%s adlý kiþinin bina anahtarý verme talebini kabul ettin.", OyuncuIsim(GetPVarInt(playerid, "AnahtarOneren")));
				SunucuMesaji(GetPVarInt(playerid, "AnahtarOneren"), "%s adlý kiþi bina anahtarý verme talebini kabul etti.", OyuncuIsim(playerid));
				SetPVarInt(playerid, "AnahtarOneren", INVALID_PLAYER_ID);
				SetPVarInt(playerid, "AnahtarBina", -1);
				return i;
			}
		}
		SetPVarInt(playerid, "AnahtarOneren", INVALID_PLAYER_ID);
		SetPVarInt(playerid, "AnahtarBina", -1);
	}
	else if(dialogid == DIALOG_EVANAHTAR)
	{
	    if(!response) {
	        if(GetPVarInt(playerid, "evanahtaroneren") != INVALID_PLAYER_ID) {
				SunucuMesaji(GetPVarInt(playerid, "evanahtaroneren"), "%s adlý kiþi ev anahtarý verme talebini reddetti.", OyuncuIsim(playerid));
				SunucuMesaji(playerid, "%s adlý kiþinin ev anahtarý verme talebini reddettin.", OyuncuIsim(GetPVarInt(playerid, "evanahtaroneren")));
	        }
			SetPVarInt(playerid, "evanahtaroneren", INVALID_PLAYER_ID);
	    }
		else if(response) {
			if(GetPVarInt(playerid, "evanahtaroneren") == INVALID_PLAYER_ID) return HataMesaji(playerid, "Ev anahtarý talebini gönderen kiþi oyundan çýkmýþ.");
            if(!YakinlikKontrol(playerid, GetPVarInt(playerid, "evanahtaroneren"), 5.0)) return HataMesaji(playerid, "Ev anahtarý talebi gönderen kiþiye yakýn deðilsin."), SetPVarInt(playerid, "evanahtaroneren", INVALID_PLAYER_ID);
			new id;
			id = GetPVarInt(playerid, "evanahtarid");
			if(id != -1) {
			    if(EvBilgi[id][evAnahtar][0] == 0 || EvBilgi[id][evAnahtar][1] == 0 || EvBilgi[id][evAnahtar][2] == 0 || EvBilgi[id][evAnahtar][3] == 0 || EvBilgi[id][evAnahtar][4] == 0) {
					for(new i = 0; i != 5; i ++) if(EvBilgi[id][evAnahtar][i] == 0) {
						EvBilgi[id][evAnahtar][i] = OyuncuBilgi[playerid][oID];
						Ev_Kaydet(id);
						SunucuMesaji(playerid, "%s adlý kiþinin ev anahtarý verme talebini kabul ettin.", OyuncuIsim(GetPVarInt(playerid, "evanahtaroneren")));
						SunucuMesaji(GetPVarInt(playerid, "evanahtaroneren"), "%s adlý kiþi ev anahtarý verme talebini kabul etti.", OyuncuIsim(playerid));
						SetPVarInt(playerid, "evanahtaroneren", INVALID_PLAYER_ID);
						SetPVarInt(playerid, "evanahtarid", -1);
						return 1;
					}
				}
				else {
					HataMesaji(playerid, "%s adlý kiþinin önerdiði ev anahtarý talebinde bir hata oluþtu.", OyuncuIsim(GetPVarInt(playerid, "evanahtaroneren")));
					HataMesaji(GetPVarInt(playerid, "evanahtaroneren"), "%s adlý kiþiye önerdiðin ev anahtarý talebinde bir hata oluþtu.", OyuncuIsim(playerid));
				}
			}
			SetPVarInt(playerid, "evanahtaroneren", INVALID_PLAYER_ID);
			SetPVarInt(playerid, "evanahtarid", -1);
		}
	}
	else if(dialogid == DIALOG_GOVKASA) {
	    if(!response) return false;

		switch(listitem) {
		    case 0: DialogGoster(playerid, DIALOG_GOVPARACEK, DIALOG_STYLE_INPUT, "Government - Kasa", "Lütfen kasadan çekmek istediðin miktarý girin;", "Çek", "Kapat");
		    case 1: DialogGoster(playerid, DIALOG_GOVPARAYATIR, DIALOG_STYLE_INPUT, "Government - Kasa", "Lütfen kasaya yatýrmak istediðin miktarý girin;", "Çek", "Kapat");
		}
	}
	else if(dialogid == DIALOG_GOVPARACEK) {
	    if(!response) return false;

		new miktar;
		if(sscanf(inputtext, "d", miktar)) return DialogGoster(playerid, DIALOG_GOVPARACEK, DIALOG_STYLE_INPUT, "Government - Kasa", "Lütfen kasadan çekmek istediðin miktarý girin;", "Çek", "Kapat");
		if(miktar < 1) return DialogGoster(playerid, DIALOG_GOVPARACEK, DIALOG_STYLE_INPUT, "Government - Kasa", "{B70000}HATA: {FFFFFF}Geçersiz miktar.\nLütfen kasadan çekmek istediðin miktarý girin;", "Çek", "Kapat");
		static kasapara;
		kasapara = 0;
		if(dini_Exists(SUNUCU_DOSYA)) kasapara = dini_Int(SUNUCU_DOSYA, "GOVKASA");
		else {
	        dini_Create(SUNUCU_DOSYA);
	        dini_IntSet(SUNUCU_DOSYA, "GOVKASA", 0);
			kasapara = dini_Int(SUNUCU_DOSYA, "GOVKASA");
		}
		if(miktar > kasapara) return DialogGoster(playerid, DIALOG_GOVPARACEK, DIALOG_STYLE_INPUT, "Government - Kasa", "{B70000}HATA: {FFFFFF}Kasada bu kadar para yok!\nLütfen kasadan çekmek istediðin miktarý girin;", "Çek", "Kapat");

		ParaEkle(playerid, miktar);
		dini_IntSet(SUNUCU_DOSYA, "GOVKASA", dini_Int(SUNUCU_DOSYA, "GOVKASA") - miktar);
	}
	else if(dialogid == DIALOG_GOVPARAYATIR) {
	    if(!response) return false;
		static miktar;
		if(sscanf(inputtext, "d", miktar)) return DialogGoster(playerid, DIALOG_GOVPARAYATIR, DIALOG_STYLE_INPUT, "Government - Kasa", "Lütfen kasaya yatýrmak istediðin miktarý girin;", "Yatýr", "Kapat");
		if(miktar < 1) return DialogGoster(playerid, DIALOG_GOVPARAYATIR, DIALOG_STYLE_INPUT, "Government - Kasa", "{B70000}HATA: {FFFFFF}Geçersiz miktar.\nLütfen kasaya yatýrmak istediðin miktarý girin;", "Yatýr", "Kapat");
		if(OyuncuBilgi[playerid][oPara] < miktar) return DialogGoster(playerid, DIALOG_GOVPARAYATIR, DIALOG_STYLE_INPUT, "Government - Kasa", "{B70000}HATA: {FFFFFF}Üzerinde bu kadar para yok!\nLütfen kasaya yatýrmak istediðin miktarý girin;", "Yatýr", "Kapat");

		ParaEkle(playerid, -miktar);
		dini_IntSet(SUNUCU_DOSYA, "GOVKASA", dini_Int(SUNUCU_DOSYA, "GOVKASA") + miktar);
	}
	else if(dialogid == DIALOG_MDC) {
	    if(!response) return false;

	    if(!strcmp(inputtext, "Arananlar Listesi", true)) ArananlarListesi(playerid);
	    else if(!strcmp(inputtext, "Bolo Kayýtlarý", true)) BoloListesi(playerid);
		else if(!strcmp(inputtext, "Kiþi Sorgula", true)) return DialogGoster(playerid, DIALOG_MDC_KISIARA, DIALOG_STYLE_INPUT, "MDC - Kiþi Sorgula","Lütfen aramak istediðiniz kiþinin adýný girin;", "Sorgula", "Kapat");
		else if(!strcmp(inputtext, "Vatandaþlýk Numarasý Sorgulama", true)) return DialogGoster(playerid, DIALOG_MDC_VATANDASLIK, DIALOG_STYLE_INPUT, "MDC - Vatandaþlýk Numarasý Sorgulama", "Lütfen bilgi edinmek istediðin vatandaþlýk numarasýný girin;", "Sorgula", "Kapat");
		else if(!strcmp(inputtext, "Telefon Numarasý Sorgulama", true)) return DialogGoster(playerid, DIALOG_MDC_TELEFON, DIALOG_STYLE_INPUT, "MDC - Telefon Numarasý Sorgulama", "Sorgulamak istediðiniz numarayý girin;", "Sorgula", "Kapat");
		else if(!strcmp(inputtext, "Ceza Sorgula", true)) return DialogGoster(playerid, DIALOG_MDC_CEZA, DIALOG_STYLE_INPUT, "MDC - Ceza Geçmiþi Sorgulama", "Lütfen aramak istediðiniz kiþinin adýný girin;", "Sorgula", "Kapat");
		else if(!strcmp(inputtext, "Plaka Sorgula", true)) return DialogGoster(playerid, DIALOG_MDC_PLAKA, DIALOG_STYLE_INPUT, "MDC - Plaka Sorgulama", "Sorgulamak istediðiniz plakayý girin;", "Sorgula", "Kapat");
		else if(!strcmp(inputtext, "Hesap Numarasý Sorgulama", true)) return DialogGoster(playerid, DIALOG_MDC_HESAPNO, DIALOG_STYLE_INPUT, "MDC - Hesap Numarasý Sorgula", "Lütfen aramak istediðiniz hesap numarasýný girin;", "Sorgula", "Kapat");
	}
	else if(dialogid == DIALOG_MDC_HESAPNO) {
		if(!response) return false;
	    new hesapnumarasi;
	    if(sscanf(inputtext, "d", hesapnumarasi))
	        return DialogGoster(playerid, DIALOG_MDC_HESAPNO, DIALOG_STYLE_INPUT, "MDC - Hesap Numarasý Sorgula", "Lütfen aramak istediðiniz hesap numarasýný girin;", "Sorgula", "Kapat");

		new sorgu[144], test[144];
		valstr(test, hesapnumarasi);
		format(sorgu, sizeof(sorgu), "SELECT * FROM `oyuncular` WHERE `HesapNumarasi` = '%d'", hesapnumarasi);
		mysql_tquery(mysqlB, sorgu, "KisiSorgula", "sdd", test, playerid, 3);
	}
	else if(dialogid == DIALOG_MDC_PLAKA) {
	    if(!response) return false;
	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_MDC_PLAKA, DIALOG_STYLE_INPUT, "MDC - Plaka Sorgulama", "Sorgulamak istediðiniz plakayý girin;", "Sorgula", "Kapat");

		for(new i = 0; i != MAKSIMUM_ARAC; i++) if(!strcmp(inputtext, AracBilgi[i][aracPlaka], true)) {
			new sorgu[144];
			format(sorgu, sizeof(sorgu), "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", AracBilgi[i][aracSahip]);
			return mysql_tquery(mysqlB, sorgu, "PlakaSorgula", "dd", playerid, i);
		}
		HataMesaji(playerid, "Girilen plakaya ait sonuç bulunamadý. (%s)", inputtext);
	}
	else if(dialogid == DIALOG_MDC_CEZA) {
		if(!response) return false;
        if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_MDC_CEZA, DIALOG_STYLE_INPUT, "MDC - Ceza Geçmiþi Sorgulama", "Lütfen aramak istediðiniz kiþinin adýný girin;", "Sorgula", "Kapat");

		for(new i = 0, len = strlen(inputtext); i < len; i ++) {
			if(inputtext[i] == '_') inputtext[i] = ' ';
		}
		CezaGoster(playerid, inputtext);
	}
	else if(dialogid == DIALOG_MDC_KISIARA) {
		if(!response) return false;
		if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_MDC_KISIARA, DIALOG_STYLE_INPUT, "MDC - Kiþi Sorgula","Lütfen aramak istediðiniz kiþinin adýný girin;", "Sorgula", "Kapat");

		new sorgu[144];
		format(sorgu, sizeof(sorgu), "SELECT * FROM `oyuncular` WHERE `isim` = '%s'", inputtext);
		mysql_tquery(mysqlB, sorgu, "KisiSorgula", "sdd", inputtext, playerid, 0);
	}
	else if(dialogid == DIALOG_ARANMAKAYITLARI) {
	    if(response) {
			new sorgu[144];
			format(sorgu, sizeof(sorgu), "SELECT * FROM `aranmakayitlari` WHERE `Oyuncu` = '%s'", inputtext);
			mysql_tquery(mysqlB, sorgu, "AranmaSorgula", "sd", inputtext, playerid);
	    }
	    else if(!response) cmd_mdc(playerid, "");
	}
	else if(dialogid == DIALOG_BILDIRIMLER) {
	    if(response) {
			new sorgu[144];
			format(sorgu, sizeof(sorgu), "SELECT * FROM `bildirimler` WHERE `ID` = '%d'", strval(inputtext));
			mysql_tquery(mysqlB, sorgu, "BildirimSorgula", "i", playerid);
	    }
	    else if(!response) return 0;
	}
	else if(dialogid == DIALOG_SOYADI_LISTE) {
	    if(!response) return 0;

		SetPVarInt(playerid, "soyadi_secim", strval(inputtext));

		DialogGoster(playerid, DIALOG_SOYADI_IZIN, DIALOG_STYLE_INPUT, "Soyadý - Ýzin ver", "Lütfen izin vermek istediðiniz kiþinin hesap ID'sini girin;", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_SOYADI_IZIN) {
		if(!response) return 0;

		new hesapid;
		if(sscanf(inputtext, "d", hesapid)) return DialogGoster(playerid, DIALOG_SOYADI_IZIN, DIALOG_STYLE_INPUT, "Soyadý - Ýzin ver", "Lütfen izin vermek istediðiniz kiþinin hesap ID'sini girin;", "Tamam", "Kapat");

		new sorgu[256], Cache:sorgu_cache;
		format(sorgu, sizeof(sorgu), "SELECT `ID` FROM `oyuncular` WHERE `hesap` = '%d'", hesapid);
		sorgu_cache = mysql_query(mysqlB, sorgu);
		if(cache_num_rows()) {
			format(sorgu, sizeof(sorgu), "UPDATE `soyadikilitleri` SET `izin` = %d WHERE `ID` = '%d'", hesapid, GetPVarInt(playerid, "soyadi_secim"));
			mysql_query(mysqlB, sorgu);
			SunucuMesaji(playerid, "%s soyadýna %03d hesap ID'si için izin verdin, eski tüm izinler iptal edildi.", vericek_varchar(0, "Soyad"), hesapid);
			return cache_delete(sorgu_cache);
		}
		HataMesaji(playerid, "Girilen hesap ID'si bulunamadý, izin verilemiyor.");
		cache_delete(sorgu_cache);
	}
	else if(dialogid == DIALOG_BILDIRIMICERIK) {
        if(!response) return OyuncuBilgi[playerid][oBildirim] = 0;

        new id = OyuncuBilgi[playerid][oBildirim], sorgu[256];
		format(sorgu, sizeof(sorgu), "DELETE FROM `bildirimler` WHERE `ID` = '%d'", id);
		mysql_query(mysqlB, sorgu);
		SunucuMesaji(playerid, "Bildirim silindi."), OyuncuBilgi[playerid][oBildirim] = 0;
	}
	else if(dialogid == DIALOG_MAYMUNCUK) {
		if(!response) return 0;

		if(!strcmp(inputtext, "Kullan", true)) return DialogGoster(playerid, DIALOG_MAYMUNCUK, DIALOG_STYLE_TABLIST, "Maymuncuk", "Kelepçe\nEv\nBina\nÝþyeri\nAraç", "Seç", "Kapat");
		else if(!strcmp(inputtext, "Sat", true)) return DialogGoster(playerid, DIALOG_MAYMUNCUK_SAT, DIALOG_STYLE_INPUT, "Maymuncuk - Sat", "Lütfen satmak istediðiniz maymuncuk adetini girin;", "Tamam", "Kapat");
		else if(!strcmp(inputtext, "Kelepçe", true)) return DialogGoster(playerid, DIALOG_MAYMUNCUK_KELEPCE, DIALOG_STYLE_INPUT, "Maymuncuk - Kelepçe", "Lütfen kelepçesini açmak istediðiniz oyuncunun ismini veya ID'sini girin;", "Tamam", "Kapat");
		else if(!strcmp(inputtext, "Ev", true)) {
			if(Ev_Yakin(playerid) == -1) return HataMesaji(playerid, "Yakýnýnda bir ev yok.");
			new evid = Ev_Yakin(playerid);
			if(EvBilgi[evid][evSahip] == 0) return HataMesaji(playerid, "Sahibi olmayan evler üzerinde maymuncuk kullanýlamaz.");
			if(EvBilgi[evid][evDurum] != 2) return HataMesaji(playerid, "Bu ev üzerinde maymuncuk kullanýlamaz.");
			if(EvBilgi[evid][evLevel] == 5) return HataMesaji(playerid, "Bu evin kilidi açýlamaz.");

			cmd_ame(playerid, "maymuncuk ile kilidi açmayý deniyor.");
			if(EvBilgi[evid][evLevel] >= 2) SendNearbyMessage(playerid, EMOTE_MESAFE, RENK_DO, "* Alarm çalýyor. (( Ev - %d ))", EvBilgi[evid][evID]);
			if(EvBilgi[evid][evLevel] > 2) foreach(new i : Player) if(EvBilgi[evid][evSahip] == OyuncuBilgi[i][oID]) { SendClientMessageEx(i, RENK_SERVER, "[EV ALARMI] {FFFFFF}%d kapý numaralý evinin alarmý çalýyor.", EvBilgi[evid][evID]); break; }
			if(EvBilgi[evid][evLevel] > 3) foreach(new i : Player) if(OyuncuBirlikTuru(i) == BIRLIK_POLIS && OyuncuBilgi[i][oIsbasi] == true) SendClientMessageEx(i, RENK_BIRLIK, "[ALARM] %d kapý numaralý evin alarmý çalýyor.", EvBilgi[evid][evID]);

			MaymuncukVeri[playerid][mSaniye] = EvBilgi[evid][evLevel] * 15;
			MaymuncukVeri[playerid][mTur] = 2;
			MaymuncukVeri[playerid][mHedef] = evid;
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), maymuncuk ile ev açmayý deniyor. (ID: %d)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], EvBilgi[evid][evID]);
			Gunluk_LogKaydet(log_icerik);
		}
		else if(!strcmp(inputtext, "Bina", true)) {
   			if(Bina_Yakin(playerid) == -1) return HataMesaji(playerid, "Yakýnýnda bir bina yok.");
			new binaid = Bina_Yakin(playerid);
			if(BinaBilgi[binaid][binaSahip] == 0) return HataMesaji(playerid, "Sahibi olmayan binalar üzerinde maymuncuk kullanýlamaz.");
			if(BinaBilgi[binaid][binaDurum] != 2) return HataMesaji(playerid, "Bu bina üzerinde maymuncuk kullanýlamaz.");
			if(BinaBilgi[binaid][binaLevel] == 5) return HataMesaji(playerid, "Bu binanýn kilidi açýlamaz.");

			cmd_ame(playerid, "maymuncuk ile kilidi açmayý deniyor.");
			new kapino = MAKSIMUM_EV + MAKSIMUM_ISYERI;
			if(BinaBilgi[binaid][binaLevel] >= 2) SendNearbyMessage(playerid, EMOTE_MESAFE, RENK_DO, "* Alarm çalýyor. (( Bina - %d ))", BinaBilgi[binaid][bID] + kapino);
			if(BinaBilgi[binaid][binaLevel] > 2) foreach(new i : Player) if(BinaBilgi[binaid][binaSahip] == OyuncuBilgi[i][oID]) { SendClientMessageEx(i, RENK_SERVER, "[BINA ALARMI] {FFFFFF}%d kapý numaralý binanýn alarmý çalýyor.", BinaBilgi[binaid][bID] + kapino); break; }
			if(BinaBilgi[binaid][binaLevel] > 3) foreach(new i : Player) if(OyuncuBirlikTuru(i) == BIRLIK_POLIS && OyuncuBilgi[i][oIsbasi] == true) SendClientMessageEx(i, RENK_BIRLIK, "[ALARM] %d kapý numaralý binanýn alarmý çalýyor.", BinaBilgi[binaid][bID] + kapino);

			MaymuncukVeri[playerid][mSaniye] = BinaBilgi[binaid][binaLevel] * 15;
			MaymuncukVeri[playerid][mTur] = 3;
			MaymuncukVeri[playerid][mHedef] = binaid;
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), maymuncuk ile bina açmayý deniyor. (ID: %d)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], BinaBilgi[binaid][bID]);
			Gunluk_LogKaydet(log_icerik);
		}
		else if(!strcmp(inputtext, "Ýþyeri", true)) {
			if(Isyeri_Yakin(playerid) == -1) return HataMesaji(playerid, "Yakýnýnda bir iþyeri yok.");
			new isyeriid = Isyeri_Yakin(playerid);
			if(IsyeriBilgi[isyeriid][isyeriSahip] == 0) return HataMesaji(playerid, "Sahibi olmayan iþyerleri üzerinde maymuncuk kullanýlamaz.");
			if(IsyeriBilgi[isyeriid][isyeriDurum] != 2) return HataMesaji(playerid, "Bu iþyeri üzerinde maymuncuk kullanýlamaz.");

			cmd_ame(playerid, "maymuncuk ile kilidi açmayý deniyor.");
			SendNearbyMessage(playerid, EMOTE_MESAFE, RENK_DO, "* Alarm çalýyor. (( Ýþyeri - %d ))", IsyeriBilgi[isyeriid][isyeriID] + MAKSIMUM_EV);
			foreach(new i : Player) if(IsyeriBilgi[isyeriid][isyeriSahip] == OyuncuBilgi[i][oID]) { SendClientMessageEx(i, RENK_SERVER, "[ISYERI ALARMI] {FFFFFF}%d kapý numaralý iþyerinin alarmý çalýyor.", IsyeriBilgi[isyeriid][isyeriID] + MAKSIMUM_EV); break; }
			foreach(new i : Player) if(OyuncuBirlikTuru(i) == BIRLIK_POLIS && OyuncuBilgi[i][oIsbasi] == true) SendClientMessageEx(i, RENK_BIRLIK, "[ALARM] %d kapý numaralý iþyerinin alarmý çalýyor.", IsyeriBilgi[isyeriid][isyeriID] + MAKSIMUM_EV);

			MaymuncukVeri[playerid][mSaniye] = 30;
			MaymuncukVeri[playerid][mTur] = 4;
			MaymuncukVeri[playerid][mHedef] = isyeriid;
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), maymuncuk ile iþyeri açmayý deniyor. (ID: %d)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], IsyeriBilgi[isyeriid][isyeriID]);
			Gunluk_LogKaydet(log_icerik);
		}
		else if(!strcmp(inputtext, "Araç", true)) {
			if(Arac_Yakin(playerid) == -1) return HataMesaji(playerid, "Yakýnýnda bir araç yok.");
			new id = Arac_Yakin(playerid);
			if(AracBilgi[id][aracSahip] == 0) return HataMesaji(playerid, "Sahibi olmayan araçlar üzerinde maymuncuk kullanýlamaz.");
			if(AracBilgi[id][aracBirlik] > 0) return HataMesaji(playerid, "Birlik araçlarý üzerinde maymuncuk kullanýlamaz.");
			if(!AracBilgi[id][aracKilit]) return HataMesaji(playerid, "Bu aracýn kilidi zaten açýk.");
			if(AracBilgi[id][aracGuvenlik] == 5) return HataMesaji(playerid, "Bu aracýn kilidi açýlamaz, güvenliði en üst seviye.");
			foreach(new i : Player) if(MaymuncukVeri[i][mHedef] == id && MaymuncukVeri[i][mSaniye] > 0 && MaymuncukVeri[i][mTur] == 5) return HataMesaji(playerid, "Baþka bir oyuncu bu araç üzerinde maymuncuk kullanýyor.");

			cmd_ame(playerid, "maymuncuk ile kilidi açmayý deniyor.");
			SendNearbyMessage(playerid, EMOTE_MESAFE, RENK_DO, "* Alarm çalýyor. (( Araç - %s ))", AracBilgi[id][aracPlaka]);
			foreach(new i : Player) if(AracBilgi[id][aracSahip] == OyuncuBilgi[i][oID]) { SendClientMessageEx(i, RENK_SERVER, "[ARAÇ ALARMI] {FFFFFF}%s plakalý %s model aracýnýn alarmý çalýyor.", AracBilgi[id][aracPlaka], AracModel(AracBilgi[id][aracModel])); break; }
			foreach(new i : Player) if(OyuncuBirlikTuru(i) == BIRLIK_POLIS && OyuncuBilgi[i][oIsbasi] == true) SendClientMessageEx(i, RENK_BIRLIK, "[ALARM] %s plakalý %s model aracýn alarmý çalýyor.", AracBilgi[id][aracPlaka], AracModel(AracBilgi[id][aracModel]));

			new saniye = 30;
			switch(AracBilgi[id][aracGuvenlik]) {
				case 0, 1: saniye = 30;
				case 2: saniye = 45;
				case 3: saniye = 60;
				case 4: saniye = 120;
			}
			MaymuncukVeri[playerid][mSaniye] = saniye;
			MaymuncukVeri[playerid][mTur] = 5;
			MaymuncukVeri[playerid][mHedef] = id;
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), maymuncuk ile araç açmayý deniyor. (ID: %d)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], AracBilgi[id][aracID]);
			Gunluk_LogKaydet(log_icerik);
		}
	}
	else if(dialogid == DIALOG_MAYMUNCUK_SAT) {
	    if(!response) return false;

	    new adet;
	    if(sscanf(inputtext, "d", adet)) return DialogGoster(playerid, DIALOG_MAYMUNCUK_SAT, DIALOG_STYLE_INPUT, "Maymuncuk - Sat", "Lütfen satmak istediðiniz maymuncuk adetini girin;", "Tamam", "Kapat");
	    if(adet < 1) return DialogGoster(playerid, DIALOG_MAYMUNCUK_SAT, DIALOG_STYLE_INPUT, "Maymuncuk - Sat", "HATA: En az 1 tane satabilirsin.\n\nLütfen satmak istediðiniz maymuncuk adetini girin;", "Tamam", "Kapat");
	    if(OyuncuBilgi[playerid][oMaymuncuk] < adet) return DialogGoster(playerid, DIALOG_MAYMUNCUK_SAT, DIALOG_STYLE_INPUT, "Maymuncuk - Sat", "HATA: Üzerinde bu kadar maymuncuk yok.\n\nLütfen satmak istediðiniz maymuncuk adetini girin;", "Tamam", "Kapat");

		SetPVarInt(playerid, "sat_maymuncuk_adet", adet);
		DialogGoster(playerid, DIALOG_MAYMUNCUK_SAT_FIYAT, DIALOG_STYLE_INPUT, "Maymuncuk - Sat", "Lütfen satmak istediðiniz fiyatý girin;", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_MAYMUNCUK_SAT_FIYAT) {
	    if(!response) return false;

	    new fiyat;
	    if(sscanf(inputtext, "d", fiyat)) return DialogGoster(playerid, DIALOG_MAYMUNCUK_SAT_FIYAT, DIALOG_STYLE_INPUT, "Maymuncuk - Sat", "Lütfen satmak istediðiniz fiyatý girin;", "Tamam", "Kapat");
	    if(fiyat < 0) return DialogGoster(playerid, DIALOG_MAYMUNCUK_SAT_FIYAT, DIALOG_STYLE_INPUT, "Maymuncuk - Sat", "HATA: Fiyat en az 0 olmalýdýr.\n\nLütfen satmak istediðiniz fiyatý girin;", "Tamam", "Kapat");

		SetPVarInt(playerid, "sat_maymuncuk_fiyat", fiyat);
		DialogGoster(playerid, DIALOG_MAYMUNCUK_SAT_OYUNCU, DIALOG_STYLE_INPUT, "Maymuncuk - Sat", "Lütfen satmak istediðiniz oyuncunun ID'sini veya adýný girin;", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_MAYMUNCUK_SAT_OYUNCU) {
	    if(!response) return false;

	    new oyuncuid;
	    if(sscanf(inputtext, "u", oyuncuid)) return DialogGoster(playerid, DIALOG_MAYMUNCUK_SAT_OYUNCU, DIALOG_STYLE_INPUT, "Maymuncuk - Sat", "Lütfen satmak istediðiniz oyuncunun ID'sini veya adýný girin;", "Tamam", "Kapat");
	    if(!IsPlayerConnected(oyuncuid)) return DialogGoster(playerid, DIALOG_MAYMUNCUK_SAT_OYUNCU, DIALOG_STYLE_INPUT, "Maymuncuk - Sat", "HATA: Girilen oyuncu geçersiz.\n\nLütfen satmak istediðiniz oyuncunun ID'sini veya adýný girin;", "Tamam", "Kapat");
		if(!YakinlikKontrol(playerid, oyuncuid, 3.0)) return DialogGoster(playerid, DIALOG_MAYMUNCUK_SAT_OYUNCU, DIALOG_STYLE_INPUT, "Maymuncuk - Sat", "HATA: Girilen oyuncuya yakýn deðilsin.\n\nLütfen satmak istediðiniz oyuncunun ID'sini veya adýný girin;", "Tamam", "Kapat");

		new fiyat = GetPVarInt(playerid, "sat_maymuncuk_fiyat"), adet = GetPVarInt(playerid, "sat_maymuncuk_adet");
		SetPVarInt(oyuncuid, "al_maymuncuk_fiyat", fiyat);
		SetPVarInt(oyuncuid, "al_maymuncuk_adet", adet);
		SetPVarInt(oyuncuid, "al_maymuncuk_oyuncu", playerid);
		new icerik[144 + MAX_PLAYER_NAME];
		format(icerik, sizeof(icerik), "{FFFFFF}%s adlý oyuncu sana %d adet maymuncuðu {33aa33}%s {FFFFFF}fiyatýna satmak istiyor, almak istiyor musun?", OyuncuIsim(playerid), adet, NumaraFormati(fiyat));
		DialogGoster(oyuncuid, DIALOG_MAYMUNCUK_SATINAL, DIALOG_STYLE_INPUT, "Maymuncuk - Sat", icerik, "Evet", "Hayýr");
	}
	else if(dialogid == DIALOG_MAYMUNCUK_SATINAL) {
	    if(!response) return false;

	    new oyuncuid = GetPVarInt(playerid, "al_maymuncuk_oyuncu"), fiyat = GetPVarInt(playerid, "al_maymuncuk_fiyat"), adet = GetPVarInt(playerid, "al_maymuncuk_adet");
	    if(OyuncuBilgi[playerid][oPara] < fiyat) return HataMesaji(playerid, "Ýstenilen miktarý karþýlayamýyorsun.");
	    if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Bir sorun oluþtu.");
	    if(!YakinlikKontrol(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Oyuncudan uzaklaþtýðýn için iþlem iptal edildi.");
	    if(OyuncuBilgi[playerid][oMaymuncuk] + adet > 3) return HataMesaji(playerid, "Üzerinde 3 adetten fazla maymuncuk taþýyamazsýn.");

	    OyuncuBilgi[oyuncuid][oMaymuncuk] -= adet;
	    OyuncuBilgi[playerid][oMaymuncuk] += adet;
	    ParaEkle(playerid, -fiyat);
	    ParaEkle(oyuncuid, fiyat);
	    SunucuMesaji(playerid, "%s adlý kiþiye %d adet maymuncuðu %s fiyatýna sattýn.", OyuncuIsim(oyuncuid), adet, NumaraFormati(fiyat));
	    SunucuMesaji(playerid, "%s adlý kiþiden %d adet maymuncuðu %s fiyatýna satýn aldýn.", OyuncuIsim(oyuncuid), adet, NumaraFormati(fiyat));
	}
	else if(dialogid == DIALOG_MAYMUNCUK_KELEPCE) {
		if(!response) return false;
		new oyuncuid;
		if(sscanf(inputtext, "u", oyuncuid)) return DialogGoster(playerid, DIALOG_MAYMUNCUK_KELEPCE, DIALOG_STYLE_INPUT, "Maymuncuk - Kelepçe", "Lütfen kelepçesini açmak istediðiniz oyuncunun ismini veya ID'sini girin;", "Tamam", "Kapat");
		if(!IsPlayerConnected(oyuncuid)) return DialogGoster(playerid, DIALOG_MAYMUNCUK_KELEPCE, DIALOG_STYLE_INPUT, "Maymuncuk - Kelepçe", "{B70000}HATA: {FFFFFF}Geçersiz oyuncu.\nLütfen kelepçesini açmak istediðiniz oyuncunun ismini veya ID'sini girin;", "Tamam", "Kapat");
        if(!YakinlikKontrol(playerid, oyuncuid, 3.0)) return DialogGoster(playerid, DIALOG_MAYMUNCUK_KELEPCE, DIALOG_STYLE_INPUT, "Maymuncuk - Kelepçe", "{B70000}HATA: {FFFFFF}Oyuncuya yakýn deðilsin.\nLütfen kelepçesini açmak istediðiniz oyuncunun ismini veya ID'sini girin;", "Tamam", "Kapat");
		if(OyuncuBilgi[oyuncuid][oKelepceli] == 0) return DialogGoster(playerid, DIALOG_MAYMUNCUK_KELEPCE, DIALOG_STYLE_INPUT, "Maymuncuk - Kelepçe", "{B70000}HATA: {FFFFFF}Girilen oyuncu kelepçeli deðil.\nLütfen kelepçesini açmak istediðiniz oyuncunun ismini veya ID'sini girin;", "Tamam", "Kapat");

		cmd_ame(playerid, "maymuncukla kelepçeyi açmayý deniyor.");
		MaymuncukVeri[playerid][mSaniye] = 30;
		MaymuncukVeri[playerid][mTur] = 1;
		MaymuncukVeri[playerid][mHedef] = oyuncuid;
	}
	else if(dialogid == DIALOG_BOLOICERIK) {
	    if(!response) {
			new sorgu[144], id = GetPVarInt(playerid, "Bolo_ID");
			format(sorgu, sizeof(sorgu), "DELETE FROM `bolokayitlari` WHERE `ID` = '%d'", id);
			mysql_query(mysqlB, sorgu);
			BirlikMesaji(OyuncuBilgi[playerid][oBirlik], RENK_BIRLIK, "[MDC] %s %s bir bolo kaydý sildi.", OyuncuRutbeAdi(playerid), OyuncuIsim(playerid)), cmd_mdc(playerid, "");
	    }
	    else if(response) BoloKayitlari(playerid);
	}
	else if(dialogid == DIALOG_BOLOKAYITLARI) {
	    if(response) {
	        if(!strcmp(inputtext, "Kayýt Ekle", true)) return DialogGoster(playerid, DIALOG_BOLOEKLE, DIALOG_STYLE_INPUT, "Bolo Oluþtur", "Bolo içeriðini girin;", "Ekle", "Kapat");
			new sorgu[144];
			format(sorgu, sizeof(sorgu), "SELECT * FROM `bolokayitlari` WHERE `ID` = '%d'", strval(inputtext));
			mysql_tquery(mysqlB, sorgu, "BoloSorgula", "d", playerid);
	    }
	    else if(!response) cmd_mdc(playerid, "");
	}
	else if(dialogid == DIALOG_BOLOEKLE) {
		if(!response) return false;
		if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_BOLOEKLE, DIALOG_STYLE_INPUT, "Bolo Oluþtur", "Bolo içeriðini girin;", "Ekle", "Kapat");
		if(strlen(inputtext) > 144)  return DialogGoster(playerid, DIALOG_BOLOEKLE, DIALOG_STYLE_INPUT, "Bolo Oluþtur", "HATA: En fazla 144 karakter kullanabilirsin.\nBolo içeriðini girin;", "Ekle", "Kapat");

		new sorgu[512], isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, isim, sizeof(isim));

		for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
		format(sorgu, sizeof(sorgu), "INSERT INTO `bolokayitlari` (`Detay`, `Tarih`, `Ekleyen`) VALUES ('%s', '%s', '%s')", SQL_ReturnEscaped(inputtext), Tarih(), isim);
		mysql_query(mysqlB, sorgu);
		BirlikMesaji(OyuncuBilgi[playerid][oBirlik], RENK_BIRLIK, "[MDC] %s %s bir bolo kaydý oluþturdu.", OyuncuRutbeAdi(playerid), OyuncuIsim(playerid));
	}
	else if(dialogid == DIALOG_ADMINMAAS) {
		if(!response) return false;
		if(!strcmp(inputtext, "Maaþ Ver", true)) {
			new sql[512];
			format(sql, sizeof(sql), "UPDATE `hesaplar` SET `Bakiye` = `Bakiye`+%d WHERE `Admin` = '2' AND `Durum` = '1'", ADMIN_LEVEL2_MAAS);
			mysql_tquery(mysqlB, sql);
			format(sql, sizeof(sql), "UPDATE `hesaplar` SET `Bakiye` = `Bakiye`+%d WHERE `Admin` = '3' AND `Durum` = '1'", ADMIN_LEVEL3_MAAS);
			mysql_tquery(mysqlB, sql);
			format(sql, sizeof(sql), "UPDATE `hesaplar` SET `Bakiye` = `Bakiye`+%d WHERE `Admin` = '4' AND `Durum` = '1'", ADMIN_LEVEL4_MAAS);
			mysql_tquery(mysqlB, sql);
			format(sql, sizeof(sql), "UPDATE `hesaplar` SET `Bakiye` = `Bakiye`+%d WHERE `Admin` = '5' AND `Durum` = '1'", ADMIN_LEVEL5_MAAS);
			mysql_tquery(mysqlB, sql);
			SunucuMesaji(playerid, "Maaþlar yatýrýldý.");
		    return 1;
		}
		new id = strval(inputtext), sorgu[256], Cache:sorgu_cache, yenidurum = 0;
		format(sorgu, sizeof(sorgu), "SELECT `Durum` FROM `hesaplar` WHERE `forumID` = '%d'", id);
		sorgu_cache = mysql_query(mysqlB, sorgu);
		if(cache_num_rows()) yenidurum = vericek_int(0, "Durum");
		cache_delete(sorgu_cache);
		switch(yenidurum) {
		    case 1: yenidurum = 0;
		    case 0: yenidurum = 1;
			default: yenidurum = 1;
		}
		format(sorgu, sizeof(sorgu),"UPDATE `hesaplar` SET `Durum` = %d WHERE `forumID` = '%d'", yenidurum, id);
		mysql_query(mysqlB, sorgu);
		cmd_amaas(playerid, inputtext);
		return 1;
	}
	else if(dialogid == DIALOG_YONETIMGOREV) {
		if(!response) return false;

		if(!strcmp(inputtext, "Level Düzenle", true)) {
		    if(GetPVarInt(playerid, "dialog_admingorev") == OyuncuBilgi[playerid][oHesap]) return HataMesaji(playerid, "Kendi levelini düzenlemek için /setstaff komutunu kullan.");
		    foreach(new i : Player) if(GetPVarInt(playerid, "dialog_admingorev") == OyuncuBilgi[i][oHesap]) return HataMesaji(playerid, "Seçilen oyuncu oyunda, iþlem yapmak için /setstaff komutunu kullanýn.");
			return DialogGoster(playerid, DIALOG_LEVELDUZENLE, DIALOG_STYLE_INPUT, "Level Düzenle", "Girilen kiþinin yeni yönetici levelini girin:", "Tamam", "Kapat");
		}
		if(!strcmp(inputtext, "Görev Düzenle", true)) {
		    new sorgu[512], id = GetPVarInt(playerid, "dialog_admingorev");
			format(sorgu,sizeof(sorgu),"SELECT * FROM hesaplar WHERE forumID = '%d'", id);
			return mysql_tquery(mysqlB, sorgu, "Gorev_Sorgula", "i", playerid);
		}
		new id = strval(inputtext);
		SetPVarInt(playerid, "dialog_admingorev", id);
		DialogGoster(playerid, DIALOG_YONETIMGOREV, DIALOG_STYLE_TABLIST, "Yönetim Seçenekleri", "Level Düzenle\nGörev Düzenle", "Seç", "Kapat");
	}
	else if(dialogid == DIALOG_LEVELDUZENLE) {
		if(!response) return false;

		new level;
		if(sscanf(inputtext, "d", level)) return DialogGoster(playerid, DIALOG_LEVELDUZENLE, DIALOG_STYLE_INPUT, "Level Düzenle", "Girilen kiþinin yeni yönetici levelini girin:", "Tamam", "Kapat");
		if(level < 0 || level > 7) return DialogGoster(playerid, DIALOG_LEVELDUZENLE, DIALOG_STYLE_INPUT, "Level Düzenle", "HATA: Girilen level en az 0, en fazla 7 olabilir.\nGirilen kiþinin yeni yönetici levelini girin:", "Tamam", "Kapat");

		foreach(new i : Player) if(GetPVarInt(playerid, "dialog_admingorev") == OyuncuBilgi[i][oHesap]) return HataMesaji(playerid, "Seçilen oyuncu oyunda, iþlem yapmak için /setstaff komutunu kullanýn.");
		new sorgu[256];
		format(sorgu, sizeof(sorgu),"UPDATE `hesaplar` SET `Admin` = %d WHERE `forumID` = '%d'", level, GetPVarInt(playerid, "dialog_admingorev"));
		mysql_query(mysqlB, sorgu);
		SunucuMesaji(playerid, "Kiþinin admin leveli %s(%d) olarak düzenlendi.", Admin_RutbeIsim(level), level);
	}
	else if(dialogid == DIALOG_GOREVDUZENLE) {
		if(!response) return false;
		new sorgu[512];
		if(isnull(inputtext) || strlen(inputtext) > 144) {
		    new id = GetPVarInt(playerid, "dialog_admingorev");
			format(sorgu,sizeof(sorgu),"SELECT * FROM hesaplar WHERE forumID = '%d'", id);
			return mysql_tquery(mysqlB, sorgu, "Gorev_Sorgula", "i", playerid);
		}

		format(sorgu, sizeof(sorgu),"UPDATE `hesaplar` SET `Gorev` = '%s' WHERE `forumID` = '%d'", SQL_ReturnEscaped(inputtext), GetPVarInt(playerid, "dialog_admingorev"));
		mysql_query(mysqlB, sorgu);
		SunucuMesaji(playerid, "Kiþinin görevleri \"%s\" olarak düzenlendi.", inputtext);
	}
	else if(dialogid == DIALOG_OBJELERIM) {
		if(!response) return false;

		if(!strcmp(inputtext, "Lokasyon Bul", true)) {
		    new id = GetPVarInt(playerid, "dialog_obje");
		    if(ObjeBilgi[id][objeWorld] > 0 || ObjeBilgi[id][objeInterior] > 0) return HataMesaji(playerid, "Objeye baþka bir dünyada, lokasyonu bulunamaz.");
	        if(OyuncuBilgi[playerid][oKamyoncu] != -1) return HataMesaji(playerid, "Zaten yükleme yapmýþsýn.");
		    if(OyuncuBilgi[playerid][oTemizlikCP] > 0) return HataMesaji(playerid, "Temizlik yaparken ürün yükleyemezsin.");
		    // if(OyuncuBilgi[playerid][oMateryalTasiyor] == true) return HataMesaji(playerid, "Paket taþýrken ürün yükleyemezsin. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oMarker] > -1) return HataMesaji(playerid, "Konum araþtýrýrken ürün yükleyemezsin. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oKonum] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oAdres] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][objeLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oIsaretliMeslek] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
            
		    SetPlayerCheckpoint(playerid, ObjeBilgi[id][objePos][0], ObjeBilgi[id][objePos][1], ObjeBilgi[id][objePos][2], 6.0);
		    OyuncuBilgi[playerid][objeLokasyon] = id;
		}
		if(!strcmp(inputtext, "Düzenle", true)) {
		    if(OyuncuBilgi[playerid][objeIzin] == false) return HataMesaji(playerid, "Obje düzenleme iznin olmadýðý için bu seçeneði kullanamazsýn.");
		    new id = GetPVarInt(playerid, "dialog_obje");
		    if(!IsPlayerInRangeOfPoint(playerid, 10.0, ObjeBilgi[id][objePos][0], ObjeBilgi[id][objePos][1], ObjeBilgi[id][objePos][2])) return HataMesaji(playerid, "Objeye yakýn deðilsin.");
		   	EditDynamicObject(playerid, ObjeBilgi[id][objeYarat]);
			OyuncuBilgi[playerid][oEditlenenObje] = id;

			return SunucuMesaji(playerid, "Girilen objenin (%d) pozisyonunu ayarlýyorsunuz.", id);
		}
		if(!strcmp(inputtext, "Kaldýr", true)) {
			new mesaj[144], id = GetPVarInt(playerid, "dialog_obje");
			SetPVarInt(playerid, "SilmeOnay", id);
		    format(mesaj, sizeof(mesaj), "%d ID'li objeyi silmek üzeresin, onaylýyor musun?", id) ;
		    return DialogGoster(playerid, DIALOG_OBJESIL_ONAY, DIALOG_STYLE_MSGBOX, "Obje Sil", mesaj, "Evet", "Hayýr");
		}

		new id = strval(inputtext);
		if(ObjeBilgi[id][objeSahip] == OyuncuBilgi[playerid][oID] && ObjeBilgi[id][objeKullanimda] == true) {
		    SetPVarInt(playerid, "dialog_obje", id);
			DialogGoster(playerid, DIALOG_OBJELERIM, DIALOG_STYLE_TABLIST, "Obje Seçenekleri", "Lokasyon Bul\nDüzenle\nKaldýr", "Seç", "Kapat");
		}
	}
	else if(dialogid == DIALOG_MULKLERIM) {
	    if(!response) return false;

		if(!strcmp(inputtext, "Araçlarým", true)) {
			AracListesi(playerid, playerid);
		}
		else if(!strcmp(inputtext, "Mülklerim", true)) {
			MulkListesi(playerid, playerid);
		}
		else if(!strcmp(inputtext, "Petlerim", true)) {
			new peticerik[500], sayi = 0;
			format(peticerik, sizeof(peticerik), "ID\tPet Adý\tDurum\n");
			foreach(new i: Petler) if(PetBilgi[i][petSahip] == OyuncuBilgi[playerid][oID])
			{
				format(peticerik, sizeof(peticerik), "%s%d\t%s\t%s\n", peticerik, i, PetBilgi[i][petAdi], (PetBilgi[i][petDurum] == false) ? ("{afafaf}Gizli") : ("{33aa33}Aktif"));
				sayi++;
			}
			if(sayi == 0) return HataMesaji(playerid, "Size ait bir pet bulamadýk, satýn almak için /oocmarket");
			DialogGoster(playerid, DIALOG_PETLERIM, DIALOG_STYLE_TABLIST_HEADERS, "Petleriniz", peticerik, "Deðiþtir", "Kapat");
		}
		else if(!strcmp(inputtext, "Gatelerim", true)) {
			if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan komut kullanamazsýn.");
			if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
			if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
			if(OyuncuBilgi[playerid][oYaris] != -1) return HataMesaji(playerid, "Yarýþtayken bunu yapamazsýn.");
			if(OyuncuBilgi[playerid][oKamyoncu] != -1) return HataMesaji(playerid, "Yük taþýrken bunu yapamazsýn.");
		    if(OyuncuBilgi[playerid][oTemizlikCP] > 0) return HataMesaji(playerid, "Temizlik yaparken bunu yapamazsýn.");
		    // if(OyuncuBilgi[playerid][oMateryalTasiyor] == true) return HataMesaji(playerid, "Paket taþýrken bunu yapamazsýn.");
			if(OyuncuBilgi[playerid][oMarker] > -1) return HataMesaji(playerid, "Konum araþtýrýrken bunu yapamazsýn.");
			if(OyuncuBilgi[playerid][oKonum] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oAdres] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][objeLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oIsaretliMeslek] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");

			new sayi = 0, bilgi[1024], gateparola[32];
			format(bilgi, sizeof(bilgi), "ID\tParola\n");
			for(new i = 0; i < MAKSIMUM_GATE; i ++) if(GateBilgi[i][gateKullanimda] == true && GateBilgi[i][gateSahip] == OyuncuBilgi[playerid][oID])
			{
				if(GateBilgi[i][gateParola] == 0) format(gateparola, sizeof(gateparola), "Yok");
				else format(gateparola, sizeof(gateparola), "%d", GateBilgi[i][gateParola]);
			    format(bilgi, sizeof(bilgi), "%s%d\t%s\n", bilgi, i, gateparola);
			    sayi++;
			}
			if(sayi == 0) return HataMesaji(playerid, "Üzerinize kayýtlý gate bulunmuyor.");
			DialogGoster(playerid, DIALOG_GATELERIM, DIALOG_STYLE_TABLIST_HEADERS, "Gate Seçim", bilgi, "Seç", "Kapat");
		}
		else if(!strcmp(inputtext, "Objelerim", true)) {
			if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
			if(OyuncuBilgi[playerid][oYaris] != -1) return HataMesaji(playerid, "Yarýþtayken bunu yapamazsýn.");
			if(OyuncuBilgi[playerid][oKamyoncu] != -1) return HataMesaji(playerid, "Yük taþýrken bunu yapamazsýn.");
		    if(OyuncuBilgi[playerid][oTemizlikCP] > 0) return HataMesaji(playerid, "Temizlik yaparken bunu yapamazsýn.");
		    // if(OyuncuBilgi[playerid][oMateryalTasiyor] == true) return HataMesaji(playerid, "Paket taþýrken bunu yapamazsýn.");
			if(OyuncuBilgi[playerid][oMarker] > -1) return HataMesaji(playerid, "Konum araþtýrýrken bunu yapamazsýn.");
			if(OyuncuBilgi[playerid][oKonum] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oAdres] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][objeLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oIsaretliMeslek] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");

			new sayi = 0, mesaj[2048];
			format(mesaj, sizeof(mesaj), "ID\tModel\n");
			for(new i = 0; i < MAKSIMUM_OBJE; i++) if(ObjeBilgi[i][objeSahip] == OyuncuBilgi[playerid][oID] && ObjeBilgi[i][objeKullanimda] == true) {
			    format(mesaj, sizeof(mesaj), "%s%d\t%d\n", mesaj, i, ObjeBilgi[i][objeModel]);
			    sayi++;
			}
			if(!sayi) return HataMesaji(playerid, "Üzerine kayýtlý obje bulunmadýðý için bu listeyi kullanamazsýn.");
			DialogGoster(playerid, DIALOG_OBJELERIM, DIALOG_STYLE_TABLIST_HEADERS, "Obje Listesi", mesaj, "Seç", "Kapat");
		}
	}
	else if(dialogid == DIALOG_ARACLARIM) {
	    if(!response) return false;
	    new aracid = strval(inputtext);
	    if(aracid == 0) return HataMesaji(playerid, "Bu araç kullaným dýþý, kumanda özelliðini kullanamazsýnýz.");
	    SetPVarInt(playerid, "Arac_Menu_ID", Arac_IDBul(aracid));
		DialogGoster(playerid, DIALOG_ARAC_ICERIK, DIALOG_STYLE_TABLIST, "Araç Menüsü", "Araç Bilgileri\nAraç Kumandasý", "Seç", "Kapat");
	}
	else if(dialogid == DIALOG_ARAC_ICERIK) {
	    if(!response) return DeletePVar(playerid, "Arac_Menu_ID");
	    new ekleme[256], id = GetPVarInt(playerid, "Arac_Menu_ID");
	    
	    if(!strcmp(inputtext, "Araç Bilgileri", true)) {
	        new arac_bilgileri[1024], aracfiyati = 0;
	        DeletePVar(playerid, "Arac_Menu_ID");
			format(ekleme, sizeof(ekleme), "{AFAFAF}Plaka:\t\t{FFFFFF}%s\n", AracBilgi[id][aracPlaka]);
			strcat(arac_bilgileri, ekleme, sizeof(ekleme));
			format(ekleme, sizeof(ekleme), "{AFAFAF}Araç Modeli:\t\t{FFFFFF}%s\n", AracModel(AracBilgi[id][aracModel]));
			strcat(arac_bilgileri, ekleme, sizeof(ekleme));
			format(ekleme, sizeof(ekleme), "{AFAFAF}Kilometre:\t\t{FFFFFF}%.0f\n", AracBilgi[id][aracKM]);
			strcat(arac_bilgileri, ekleme, sizeof(ekleme));
			format(ekleme, sizeof(ekleme), "{AFAFAF}Durum:\t\t\t{FFFFFF}%s\n", AracDurum(id));
			strcat(arac_bilgileri, ekleme, sizeof(ekleme));
			format(ekleme, sizeof(ekleme), "{AFAFAF}Araç Zýrhý:\t\t\t{FFFFFF}%d Seviye\n", AracBilgi[id][aracZirh]);
			strcat(arac_bilgileri, ekleme, sizeof(ekleme));
			for(new c = 0; c != sizeof(SatilikAraclar); c ++) if(SatilikAraclar[c][0] == AracBilgi[id][aracModel]) aracfiyati = SatilikAraclar[c][1];
			format(ekleme, sizeof(ekleme), "{AFAFAF}Vergi\t\t\t{FFFFFF}%s/%s\n", NumaraFormati(AracBilgi[id][aracVergi]), NumaraFormati(aracfiyati / 2));
			strcat(arac_bilgileri, ekleme, sizeof(ekleme));
	 		format(ekleme, sizeof(ekleme), "{AFAFAF}Uber Lisansý:\t\t\t%s\n", (AracBilgi[id][uberLisans] == 0) ? ("{B70000}Yok") : ("{33AA33}Var"));
			strcat(arac_bilgileri, ekleme, sizeof(ekleme));
			DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST, "Araç Bilgileri", arac_bilgileri, "Kapat", "");
	    }
	    else if(!strcmp(inputtext, "Araç Kumandasý", true)) {
			new kumanda_icerik[256];
			format(ekleme, sizeof(ekleme), "Kilit:\t\t\t(%s)\n", (AracBilgi[id][aracKilit] == 0) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"));
			strcat(kumanda_icerik, ekleme, sizeof(ekleme));
	 		format(ekleme, sizeof(ekleme), "Far:\t\t\t%s\n", (GetLightStatus(AracBilgi[id][aracYarat]) == 0) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"));
			strcat(kumanda_icerik, ekleme, sizeof(ekleme));
			DialogGoster(playerid, DIALOG_ARAC_KUMANDA, DIALOG_STYLE_TABLIST, "Araç Kumandasý", kumanda_icerik, "Seç", "Kapat");
	    }
	}
	else if(dialogid == DIALOG_ARAC_KUMANDA) {
	    if(!response) return DeletePVar(playerid, "Arac_Menu_ID");
	
	    new id = GetPVarInt(playerid, "Arac_Menu_ID");
	    DeletePVar(playerid, "Arac_Menu_ID");
		if(!strcmp(inputtext, "Kilit:", true)) {
	    	new engine, lights, alarm, doors, bonnet, boot, objective, Float:arac_pozisyon[3];
	    	GetVehiclePos(AracBilgi[id][aracYarat], arac_pozisyon[0], arac_pozisyon[1], arac_pozisyon[2]);
	    	if(!IsPlayerInRangeOfPoint(playerid, 30.0, arac_pozisyon[0], arac_pozisyon[1], arac_pozisyon[2])) return HataMesaji(playerid, "Kumandan bu mesafeden çalýþmýyor, aracýna biraz daha yakýn olmalýsýn.");
		    GetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, doors, bonnet, boot, objective);
		    if(Arac_SahipKontrol(playerid, id) || Arac_Anahtar(playerid, id) || AracBilgi[id][aracBirlik] > 0 && OyuncuBilgi[playerid][oBirlikSQLID] == AracBilgi[id][aracBirlik] && OyuncuBirlikTuru(playerid) != BIRLIK_POLIS)
		    {
				if(!AracBilgi[id][aracKilit])
				{
					if(AracBilgi[id][aracSatilik] > 0) return HataMesaji(playerid, "Satýlýk araçlarýn kilit durumlarý deðiþtirilemez.");
					AracBilgi[id][aracKilit] = true;
					GameTextForPlayer(playerid, "~r~Arac kilitlendi!", 2000, 3);
					Arac_Kaydet(id);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 1, bonnet, boot, objective);
				}
				else
				{
					AracBilgi[id][aracKilit] = false;
					GameTextForPlayer(playerid, "~g~Aracin kilidi acildi!", 2000, 3);
					Arac_Kaydet(id);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 0, bonnet, boot, objective);
					foreach(new i : Player) if(MaymuncukVeri[i][mTur] == 5 && MaymuncukVeri[i][mHedef] == id) return SunucuMesaji(i, "Maymuncuk kýrýldý."), MaymuncukVeri[i][mSaniye] = 0, OyuncuBilgi[i][oMaymuncuk]--;
				}
			}
			else HataMesaji(playerid, "Bu aracýn kilit durumunu deðiþtiremezsin.");
		}
		else if(!strcmp(inputtext, "Far:", true)) {
			switch(GetLightStatus(AracBilgi[id][aracYarat]))
			{
				case false: SetLightStatus(AracBilgi[id][aracYarat], true), SunucuMesaji(playerid, "%s model aracýn farý açýldý.", AracModel(AracBilgi[id][aracModel]));
				case true: SetLightStatus(AracBilgi[id][aracYarat], false), SunucuMesaji(playerid, "%s model aracýn farý kapatýldý.", AracModel(AracBilgi[id][aracModel]));
			}
		}
	}
	else if(dialogid == DIALOG_ARAC_MENU) {
	    if(!response) return false;
		if(!IsPlayerInAnyVehicle(playerid)) return false;

        if(!strcmp(inputtext, "Far:", true)) {
			switch(GetLightStatus(GetPlayerVehicleID(playerid)))
			{
			    case false: SetLightStatus(GetPlayerVehicleID(playerid), true);
				case true: SetLightStatus(GetPlayerVehicleID(playerid), false);
			}
			cmd_arac(playerid, inputtext);
		}
		else if(!strcmp(inputtext, "Kilit:", true)) cmd_kilit(playerid, inputtext), cmd_arac(playerid, inputtext);
		else if(!strcmp(inputtext, "Kaput:", true)) cmd_kaput(playerid, inputtext), cmd_arac(playerid, inputtext);
		else if(!strcmp(inputtext, "Motor:", true)) cmd_motor(playerid, inputtext);
		else if(!strcmp(inputtext, "Hýz Limiti:", true)) return DialogGoster(playerid, DIALOG_ARACHIZ, DIALOG_STYLE_INPUT, "Hýz Limiti", "{FFFFFF}Lütfen aracýnýz için yeni bir hýz limiti belirleyin, unutmayýn ki gireceðiniz hýz en düþük 20 olabilir.\n\n{FFFFFF}Hýz limiti özelliðini kapatmak için kutucuða \"Kapat\" yazýn.", "Ayarla", "Geri");
		else if(!strcmp(inputtext, "Camlar:", true)) {
            if(CamKontrol(GetPlayerVehicleID(playerid)) == 0) return HataMesaji(playerid, "Bu araçta cam yok."), cmd_arac(playerid, inputtext);
			cmd_acam(playerid, inputtext);
			cmd_arac(playerid, inputtext);
		}
		else if(!strcmp(inputtext, "Kiralýk:", true)) {
			new id = Arac_IDBul(GetPlayerVehicleID(playerid));
			if(!Arac_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Bu aracýn sahibi deðilsin.");
			if(AracBilgi[id][aracKiralik] == 1) {
				AracBilgi[id][aracKiralik] = 0;
				Arac_Kaydet(id);
				SunucuMesaji(playerid, "Aracýn artýk kiralanamaz.");
				return 1;
			}
			if(AracBilgi[id][aracAnahtar] > 0) return HataMesaji(playerid, "Baþkasýna anahtar vermiþken aracýný kiralanabilir duruma getiremezsin. (/anahtarsifirla)");

			DialogGoster(playerid, DIALOG_ARAC_KIRA, DIALOG_STYLE_INPUT, "Araç - Kirala", "{FFFFFF}Lütfen aracýn kira fiyatýný girin;", "Tamam", "Kapat");
		}
		else if(!strcmp(inputtext, "Aracý Sat:", true)) {
		    new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
		    if(AracBilgi[aracid][aracBirlik] > 0) return HataMesaji(playerid, "Birlik aracýný satamazsýn.");
		    if(!Arac_SahipKontrol(playerid, aracid)) return HataMesaji(playerid, "Bu aracýn sahibi deðilsin.");

			DialogGoster(playerid, DIALOG_ARAC_SAT, DIALOG_STYLE_INPUT, "Araç - Sat", "{FFFFFF}Lütfen aracý satmak istediðiniz oyuncuyu girin;", "Tamam", "Kapat");
		}
		else if(!strcmp(inputtext, "Satýlýða Çýkart:", true)) {
		    new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
		    if(AracBilgi[aracid][aracBirlik] > 0) return HataMesaji(playerid, "Birlik aracýný satamazsýn.");
		    if(!Arac_SahipKontrol(playerid, aracid)) return HataMesaji(playerid, "Bu araç senin deðil.");
		    if(AracBilgi[aracid][aracSatilik] > 0) {
				AracBilgi[aracid][aracIletisim][0] = 0;
				AracBilgi[aracid][aracSatilik] = 0;
				AracBilgi[aracid][aracFiyat] = 0;
				if(IsValidDynamic3DTextLabel(AracBilgi[aracid][aracIlan])) DestroyDynamic3DTextLabel(AracBilgi[aracid][aracIlan]), AracBilgi[aracid][aracIlan] = Text3D:INVALID_3DTEXT_ID;
				Arac_Kaydet(aracid);
				return UyariMesaji(playerid, "Aracýnýn satýlýk durumu iptal edildi.");
		    }
		    if(GetEngineStatus(GetPlayerVehicleID(playerid)) != 0) return HataMesaji(playerid, "Aracý satýlýða çýkartmak için motorunu kapatmalýsýn.");
			DialogGoster(playerid, DIALOG_ARAC_SATILIK_FIYAT, DIALOG_STYLE_INPUT, "Araç - Sat", "{FFFFFF}Lütfen aracý satmak istediðiniz fiyatý girin;", "Tamam", "Kapat");
		}
		else cmd_arac(playerid, inputtext);
	}
	else if(dialogid == DIALOG_ARACHIZ) {
	    if(!response) return cmd_arac(playerid, inputtext);
	    if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bir araçta deðilsin, iþlem iptal edildi."), cmd_arac(playerid, inputtext);
	    
	    new arac_id = GetPlayerVehicleID(playerid);
	    if(!strcmp(inputtext, "Kapat", true)) {
	        if(HizLimiti[arac_id] == 0) return HataMesaji(playerid, "Bu aracýn hýz limiti özelliði zaten kapalý.");
	        HizLimiti[arac_id] = 0;
	        SunucuMesaji(playerid, "Aracýn hýz limiti özelliðini kapattýn.");
	        return 1;
	    }
	    new hiz_limit;
	    if(sscanf(inputtext, "d", hiz_limit) || hiz_limit < 20) return DialogGoster(playerid, DIALOG_ARACHIZ, DIALOG_STYLE_INPUT, "Hýz Limiti", "{FFFFFF}Lütfen aracýnýz için yeni bir hýz limiti belirleyin, unutmayýn ki gireceðiniz hýz en düþük 20 olabilir.\n\n{FFFFFF}Hýz limiti özelliðini kapatmak için kutucuða \"Kapat\" yazýn.", "Ayarla", "Geri");
	    
		HizLimiti[arac_id] = hiz_limit;
		SunucuMesaji(playerid, "%s model aracýn hýz limiti özelliði %d olarak ayarlandý.", AracModel(GetVehicleModel(arac_id)), hiz_limit);
	}
	else if(dialogid == DIALOG_ARAC_KIRA) {
		if(!response) return false;

		new id = Arac_IDBul(GetPlayerVehicleID(playerid));
		new ucret, maxucret = AracBilgi[id][aracFiyat] / 400, minucret = AracBilgi[id][aracFiyat] / 600, mesaj[128];
		if(sscanf(inputtext, "d", ucret)) return DialogGoster(playerid, DIALOG_ARAC_KIRA, DIALOG_STYLE_INPUT, "Araç - Kirala", "{FFFFFF}Lütfen aracýn kira fiyatýný girin;", "Tamam", "Kapat");
        format(mesaj, sizeof(mesaj), "Bu aracý en az $%d, en fazla $%d fiyatýna kiralayabilirsiniz.", minucret, maxucret);
		if(ucret < minucret || ucret > maxucret) return DialogGoster(playerid, DIALOG_ARAC_KIRA, DIALOG_STYLE_INPUT, "Araç - Kirala", mesaj, "Tamam", "Kapat");

		if(!Arac_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Bu aracýn sahibi deðilsin.");
		AracBilgi[id][aracKiralik] = 1;
		AracBilgi[id][aKiraUcret] = ucret;
		Arac_Kaydet(id);
		SunucuMesaji(playerid, "Aracýn artýk kiralanabilir.");
	}
	else if(dialogid == DIALOG_ARAC_SATINAL) {
	    if(!response || OyuncuBilgi[playerid][oAdminDurum] == true) return RemovePlayerFromVehicle(playerid);

	    new aracid = Arac_IDBul(GetPlayerVehicleID(playerid)), verildi = 0;
	    if(OyuncuBilgi[playerid][oPara] < AracBilgi[aracid][aracFiyat]) return HataMesaji(playerid, "Bu aracý almak için yeterli paran yok.");
	    if(Arac_Sayi(playerid) >= OYUNCU_ARAC_LIMIT + OyuncuBilgi[playerid][oEkAracSlot]) return HataMesaji(playerid, "Daha fazla araç almak için ek slot almalýsýn.");
	    if(GetPVarInt(playerid, "satilik_arac_isaret") != aracid) {
	        new sorgu[128], oIP[16], isim[MAX_PLAYER_NAME];
			GetPlayerIp(playerid, oIP, sizeof(oIP));
			format(isim, sizeof(isim), "%03d", OyuncuBilgi[playerid][oHesap]);
			format(sorgu, sizeof(sorgu),"INSERT INTO yasaklamalar (Yasaklanan, Yasaklayan, Sebep, IP) VALUES ('%s','%s','%s','%s')", isim, "Sistem", "Bug Abuse", oIP);
			mysql_query(mysqlB, sorgu);
			SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "admCMD: %s, %s adlý kiþinin hesabýný yasakladý. Sebep: %s", "Sistem", OyuncuIsim(playerid), "Bug Abuse");
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s, %s ID'li hesabý yasakladý. (sebep: %s)", Tarih(), "Sistem", OyuncuBilgi[playerid][oID], isim, "Bug Abuse");
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/ban.txt", "%s", log_icerik);
			KickEx(playerid);
			return 1;
		}
	    if(Arac_SahipKontrol(playerid, aracid)) return HataMesaji(playerid, "Sahibi olduðun bir aracý satýn alamazsýn.");
	    if(AracBilgi[aracid][aracFiyat] < 1) return HataMesaji(playerid, "Bir sorun oluþtu.");
	    
	    ParaEkle(playerid, -AracBilgi[aracid][aracFiyat]);
		new vergilifiyat = 3 * AracBilgi[aracid][aracFiyat] / 100, aracsahip = AracBilgi[aracid][aracSahip];
	 	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	  	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), satýlýktaki %s model aracý aldý. (sahip: %d / f: %d / v: %d)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], AracModel(AracBilgi[aracid][aracModel]), aracsahip, AracBilgi[aracid][aracFiyat], AracBilgi[aracid][aracFiyat] - vergilifiyat);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/arac.txt", "%s", log_icerik);
	    foreach(new i : Player) if(OyuncuBilgi[i][oID] == aracsahip) {
	        UyariMesaji(i, "Satýlýða çýkardýðýnýz %s model aracýnýz satýldý! %s banka hesabýnýza eklendi. (Vergi: %s)", AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(AracBilgi[aracid][aracFiyat]), NumaraFormati(vergilifiyat));
	        OyuncuBilgi[i][oBankaPara] += AracBilgi[aracid][aracFiyat] - vergilifiyat;
	        OyuncuKaydet(i);
	        verildi = 1;
	    }
	    if(verildi == 0) {
	        new sorgu[256];
   			format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE ID = '%d'", AracBilgi[aracid][aracSahip]);
			mysql_tquery(mysqlB, sorgu, "AracSatildi", "ddd", aracsahip, AracBilgi[aracid][aracFiyat], AracBilgi[aracid][aracModel]);
	    }
		AracBilgi[aracid][aracIletisim][0] = 0;
		AracBilgi[aracid][aracSatilik] = 0;
		AracBilgi[aracid][aracFiyat] = 0;
		if(IsValidDynamic3DTextLabel(AracBilgi[aracid][aracIlan])) DestroyDynamic3DTextLabel(AracBilgi[aracid][aracIlan]), AracBilgi[aracid][aracIlan] = Text3D:INVALID_3DTEXT_ID;
		AracBilgi[aracid][aracSahip] = OyuncuBilgi[playerid][oID];
		Arac_Kaydet(aracid);
	}
	else if(dialogid == DIALOG_ARAC_SATILIK_FIYAT) {
		if(!response) return false;

		new fiyat;
		if(sscanf(inputtext, "d", fiyat)) return DialogGoster(playerid, DIALOG_ARAC_SATILIK_FIYAT, DIALOG_STYLE_INPUT, "Araç - Sat", "{FFFFFF}Lütfen aracý satmak istediðiniz fiyatý girin;", "Tamam", "Kapat");
		if(fiyat < 1) return DialogGoster(playerid, DIALOG_ARAC_SATILIK_FIYAT, DIALOG_STYLE_INPUT, "Araç - Sat", "{B70000}HATA: {FFFFFF}Fiyat en az $1 olmalýdýr.\nLütfen aracý satmak istediðiniz fiyatý girin;", "Tamam", "Kapat");

		new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
		if(!Arac_SahipKontrol(playerid, aracid)) return HataMesaji(playerid, "Bu aracýn sahibi deðilsin.");
		AracBilgi[aracid][aracFiyat] = fiyat;
		DialogGoster(playerid, DIALOG_ARAC_SATILIK_BILGI, DIALOG_STYLE_INPUT, "Araç - Sat", "{FFFFFF}Lütfen iletiþim bilgisi ekleyin(opsiyonel);", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_ARAC_SATILIK_BILGI) {
		if(!response) return false;
		if(strlen(inputtext) > 16) return DialogGoster(playerid, DIALOG_ARAC_SATILIK_BILGI, DIALOG_STYLE_INPUT, "Araç - Sat", "{B70000}HATA: {FFFFFF}En fazla 16 karakter kullanabilirsin.\n{FFFFFF}Lütfen iletiþim bilgisi ekleyin(opsiyonel);", "Tamam", "Kapat");

		new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
		if(!Arac_SahipKontrol(playerid, aracid)) return HataMesaji(playerid, "Bu aracýn sahibi deðilsin.");
		if(!isnull(inputtext)) format(AracBilgi[aracid][aracIletisim], 144, "%s", inputtext);
		else AracBilgi[aracid][aracIletisim][0] = 0;
		AracBilgi[aracid][aracSatilik] = 1;
		new Float:fX, Float:fY, Float:fZ, iletisimbilgi[256];
		GetVehicleBoot(AracBilgi[aracid][aracYarat], fX, fY, fZ);
		if(!isnull(AracBilgi[aracid][aracIletisim])) format(iletisimbilgi, sizeof(iletisimbilgi), "Bu araç satýlýk!\n%s\n%s", NumaraFormati(AracBilgi[aracid][aracFiyat]), AracBilgi[aracid][aracIletisim]);
		else format(iletisimbilgi, sizeof(iletisimbilgi), "[SATILIK] %s\n%s", NumaraFormati(AracBilgi[aracid][aracFiyat]), AracBilgi[aracid][aracIletisim]);
		if(IsValidDynamic3DTextLabel(AracBilgi[aracid][aracIlan])) DestroyDynamic3DTextLabel(AracBilgi[aracid][aracIlan]), AracBilgi[aracid][aracIlan] = Text3D:INVALID_3DTEXT_ID;
		AracBilgi[aracid][aracIlan] = CreateDynamic3DTextLabel(iletisimbilgi, RENK_SERVER, fX, fY, fZ, ISIM_MESAFESI, INVALID_PLAYER_ID, AracBilgi[aracid][aracYarat], 1);
	    new engine, lights, alarm, doors, bonnet, boot, objective;
	    GetVehicleParamsEx(AracBilgi[aracid][aracYarat], engine, lights, alarm, doors, bonnet, boot, objective);

		AracBilgi[aracid][aracKilit] = false;
		SetVehicleParamsEx(AracBilgi[aracid][aracYarat], engine, lights, alarm, 0, bonnet, boot, objective);
		Arac_Kaydet(aracid);
		foreach(new i : Player) if(MaymuncukVeri[i][mTur] == 5 && MaymuncukVeri[i][mHedef] == aracid) return SunucuMesaji(i, "Maymuncuk kýrýldý."), MaymuncukVeri[i][mSaniye] = 0, OyuncuBilgi[i][oMaymuncuk]--;
	}
	else if(dialogid == DIALOG_ARAC_SAT) {
		if(!response) return false;

		new oyuncuid;
		if(sscanf(inputtext, "u", oyuncuid)) return DialogGoster(playerid, DIALOG_ARAC_SAT, DIALOG_STYLE_INPUT, "Araç - Sat", "{FFFFFF}Lütfen aracý satmak istediðiniz oyuncuyu girin;", "Tamam", "Kapat");
		if(!IsPlayerConnected(oyuncuid)) return DialogGoster(playerid, DIALOG_ARAC_SAT, DIALOG_STYLE_INPUT, "Araç - Sat", "{B70000}HATA: {FFFFFF}Girilen oyuncu geçersiz.\nLütfen aracý satmak istediðiniz oyuncuyu girin;", "Tamam", "Kapat");
		if(playerid == oyuncuid) return DialogGoster(playerid, DIALOG_ARAC_SAT, DIALOG_STYLE_INPUT, "Araç - Sat", "{B70000}HATA: {FFFFFF}Kendine satamazsýn.\nLütfen aracý satmak istediðiniz oyuncuyu girin;", "Tamam", "Kapat");
		if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return DialogGoster(playerid, DIALOG_ARAC_SAT, DIALOG_STYLE_INPUT, "Araç - Sat", "{B70000}HATA: {FFFFFF}Girilen oyuncuya yakýn deðilsin.\nLütfen aracý satmak istediðiniz oyuncuyu girin;", "Tamam", "Kapat");
		if(OyuncuBilgi[oyuncuid][oAdminDurum] == true) return DialogGoster(playerid, DIALOG_ARAC_SAT, DIALOG_STYLE_INPUT, "Araç - Sat", "{B70000}HATA: {FFFFFF}Ýþbaþýndaki bir yetkiliye araç satýþý yapamazsýn.\nLütfen aracý satmak istediðiniz oyuncuyu girin;", "Tamam", "Kapat");

		SetPVarInt(playerid, "Arac_Satis", oyuncuid);
		DialogGoster(playerid, DIALOG_ARAC_FIYAT, DIALOG_STYLE_INPUT, "Araç - Sat", "{FFFFFF}Lütfen aracý satmak istediðiniz fiyatý girin;", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_ARAC_FIYAT) {
		if(!response) return false;

		new fiyat;
		if(sscanf(inputtext, "d", fiyat)) return DialogGoster(playerid, DIALOG_ARAC_FIYAT, DIALOG_STYLE_INPUT, "Araç - Sat", "{FFFFFF}Lütfen aracý satmak istediðiniz fiyatý girin;", "Tamam", "Kapat");
		if(fiyat < 1) return DialogGoster(playerid, DIALOG_ARAC_FIYAT, DIALOG_STYLE_INPUT, "Araç - Sat", "{B70000}HATA: {FFFFFF}Fiyat en az $1 olmalýdýr.\nLütfen aracý satmak istediðiniz fiyatý girin;", "Tamam", "Kapat");

		new oyuncuid = GetPVarInt(playerid, "Arac_Satis");
		if(!IsPlayerConnected(oyuncuid)) return DialogGoster(playerid, DIALOG_ARAC_SAT, DIALOG_STYLE_INPUT, "Araç - Sat", "{B70000}HATA: {FFFFFF}Girilen oyuncu geçersiz durumda olduðu için iþlemin iptal edildi.\nLütfen aracý satmak istediðiniz oyuncuyu girin;", "Tamam", "Kapat");
		if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return DialogGoster(playerid, DIALOG_ARAC_SAT, DIALOG_STYLE_INPUT, "Araç - Sat", "{B70000}HATA: {FFFFFF}Oyuncuya yakýn olmadýðýn için iþlemin iptal edildi.\nLütfen aracý satmak istediðiniz oyuncuyu girin;", "Tamam", "Kapat");

        new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
        if(!Arac_SahipKontrol(playerid, aracid)) return HataMesaji(playerid, "Bu aracýn sahibi deðilsin.");
		SetPVarInt(oyuncuid, "aracsatan", playerid);
		SetPVarInt(oyuncuid, "satilanarac", aracid);
		SetPVarInt(oyuncuid, "aracfiyat", fiyat);
		new bilgi[512];
		SunucuMesaji(playerid, "%s adlý kiþiye %s model aracýnýzý %s fiyatýna satma önerisinde bulundunuz.", OyuncuIsim(oyuncuid), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(fiyat));
		format(bilgi, sizeof(bilgi), "%s adlý kiþi sana %s model aracýný satmak istiyor.\n\n{%06x}Fiyat: {FFFFFF}%s\n", OyuncuIsim(playerid), AracModel(AracBilgi[aracid][aracModel]), RENK_SERVER >>> 8, NumaraFormati(fiyat));
		format(bilgi, sizeof(bilgi), "%s{%06x}Kilometre: {FFFFFF}%.0f\n{%06x}Vergi: {FFFFFF}%s\n{%06x}Uber Lisansý: {FFFFFF}%s\n{%06x}Zýrh: {FFFFFF}%d seviye", bilgi, RENK_SERVER >>> 8, AracBilgi[aracid][aracKM], RENK_SERVER >>> 8, NumaraFormati(AracBilgi[aracid][aracVergi]), RENK_SERVER >>> 8, (AracBilgi[aracid][uberLisans] == 0) ? ("{B70000}Yok") : ("{33AA33}Var"), RENK_SERVER >>> 8, AracBilgi[aracid][aracZirh]);
		DialogGoster(oyuncuid, DIALOG_ARACSAT, DIALOG_STYLE_MSGBOX, "Araç Satýþý", bilgi, "Onayla", "Reddet");
	}
	else if(dialogid == DIALOG_MDC_KISISORGULA2) {
	    if(!response) return false;

        if(!strcmp(inputtext, "Suç Ekle", true)) {
			new isim[MAX_PLAYER_NAME + 1], isim1[MAX_PLAYER_NAME + 1], veriler[144 * MAKSIMUM_SUC];
            GetPVarString(playerid, "kisisorgulamdc", isim, sizeof(isim));
            if(!strcmp(isim, OyuncuIsim(playerid), true)) return HataMesaji(playerid, "Kendine suç ekleyemezsin.");
            if(OyuncuBilgi[playerid][oBirlikLider] == OyuncuBilgi[playerid][oBirlikSQLID] && OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) {
   				new sayi = 0;
			    format(veriler, sizeof(veriler), "Suç\tDakika\n");
				for(new i = 0; i != MAKSIMUM_SUC; i ++) if(SucListesi[i][sKullanimda]) {
					format(veriler, sizeof(veriler), "%s%s\t%d\n", veriler, SucListesi[i][sIsim], SucListesi[i][sDakika]), sayi++;
				}
				if(sayi == 0) return HataMesaji(playerid, "Eklenebilecek suç yok.");
				return DialogGoster(playerid, DIALOG_MDC_SUCEKLE2, DIALOG_STYLE_TABLIST_HEADERS, "MDC - Suç Ekle", veriler, "Seç", "Kapat");
            }
            foreach(new o : Player) {
				GetPlayerName(o, isim1, sizeof(isim1));
				if(!strcmp(isim, isim1, true)) {
				    new sayi = 0;
				    format(veriler, sizeof(veriler), "Suç\tDakika\n");
					for(new i = 0; i != MAKSIMUM_SUC; i ++) if(SucListesi[i][sKullanimda]) {
						format(veriler, sizeof(veriler), "%s%s\t%d\n", veriler, SucListesi[i][sIsim], SucListesi[i][sDakika]), sayi++;
					}
					if(sayi == 0) return HataMesaji(playerid, "Eklenebilecek suç yok.");
					return DialogGoster(playerid, DIALOG_MDC_SUCEKLE2, DIALOG_STYLE_TABLIST_HEADERS, "MDC - Suç Ekle", veriler, "Seç", "Kapat");
				}
			}
			HataMesaji(playerid, "Oyuncu oyunda deðilken ceza kesemezsin.");
		}
		else if(!strcmp(inputtext, "Ceza Ekle", true)) {
            new isim[MAX_PLAYER_NAME + 1], isim1[MAX_PLAYER_NAME + 1];
            GetPVarString(playerid, "kisisorgulamdc", isim, sizeof(isim));
            if(!strcmp(isim, OyuncuIsim(playerid), true)) return HataMesaji(playerid, "Kendine suç ekleyemezsin.");
            if(OyuncuBilgi[playerid][oBirlikLider] == OyuncuBilgi[playerid][oBirlikSQLID] && OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) return DialogGoster(playerid, DIALOG_MDC_CEZAEKLE, DIALOG_STYLE_INPUT, "MDC - Ceza Ekle", "Lütfen kiþinin suçunu girin;", "Tamam", "Kapat");
            foreach(new o : Player) {
				GetPlayerName(o, isim1, sizeof(isim1));
				if(!strcmp(isim, isim1, true)) return DialogGoster(playerid, DIALOG_MDC_CEZAEKLE, DIALOG_STYLE_INPUT, "MDC - Ceza Ekle", "Lütfen kiþinin suçunu girin;", "Tamam", "Kapat");
			}
			HataMesaji(playerid, "Oyuncu oyunda deðilken ceza kesemezsin.");
		}
		else if(!strcmp(inputtext, "Sicil Kaydý", true)) {
			new isim[MAX_PLAYER_NAME + 1], sorgu[256];
            GetPVarString(playerid, "kisisorgulamdc", isim, sizeof(isim));
			format(sorgu, sizeof(sorgu), "SELECT * FROM sicilkaydi WHERE Oyuncu = '%s'", isim);
			mysql_tquery(mysqlB, sorgu, "Sicil_Kontrol", "d", playerid);
		}
        else if(!strcmp(inputtext, "Konum Bul", true)) {
			new isim[MAX_PLAYER_NAME + 1];
            GetPVarString(playerid, "kisisorgulamdc", isim, sizeof(isim));
			for(new b = 0, len = strlen(isim); b < len; b ++) if(isim[b] == '_') isim[b] = ' ';
            foreach(new o : Player) if(!strcmp(isim, OyuncuIsim(o), true)) {
                if(OyuncuBilgi[o][oTelefonNumarasi] == 0) return HataMesaji(playerid, "Kiþiye kayýtlý herhangi bir numara bulunamamaktadýr.");
                if(OyuncuBilgi[o][oTelefonDurum] == false) return HataMesaji(playerid, "Girilen numaradan sinyal alýnamýyor.");
                if(OyuncuBilgi[o][oPaintball] != -1) return HataMesaji(playerid, "Oyuncu paintballda.");
                if(o == playerid) return HataMesaji(playerid, "Bu seçeneði kendi üzerinde kullanamazsýn.");
			    new Float:x, Float:y, Float:z, id = -1;
			    GetPlayerPos(o, x, y, z);
				if(Oyuncu_Evde(o) != -1) {
				    id = Oyuncu_Evde(o);
					x = EvBilgi[id][evPos][0];
					y = EvBilgi[id][evPos][1];
					z = EvBilgi[id][evPos][2];
					SetPlayerCheckpoint(playerid, x, y, z, 5.0);
				}
				if(Oyuncu_Isyerinde(o) != -1) {
				    id = Oyuncu_Isyerinde(o);
					x = IsyeriBilgi[id][isyeriPos][0];
					y = IsyeriBilgi[id][isyeriPos][1];
					z = IsyeriBilgi[id][isyeriPos][2];
					SetPlayerCheckpoint(playerid, x, y, z, 5.0);
				}
				if(Oyuncu_Binada(o) != -1 && BinaBilgi[Oyuncu_Binada(o)][binaTur] != 8) {
				    id = Oyuncu_Binada(o);
					x = BinaBilgi[id][bPos][0];
					y = BinaBilgi[id][bPos][1];
					z = BinaBilgi[id][bPos][2];
					SetPlayerCheckpoint(playerid, x, y, z, 5.0);
				}
				if(id == -1) SetPlayerMarkerForPlayer(playerid, o, 0x207AD3FF);
				OyuncuBilgi[playerid][oMarker] = o;
                return SunucuMesaji(playerid, "%s(%d) numarasýndan alýnan lokasyon: %s", OyuncuIsim(o), OyuncuBilgi[o][oTelefonNumarasi], LokasyonBul(x, y, z));
            }
            HataMesaji(playerid, "Konum bulunamýyor. (( Oyuncu oyunda deðil. ))");
        }
        else if(!strcmp(inputtext, "Suç Sil", true)) {
			new mesaj[256], isim[MAX_PLAYER_NAME + 1];
			GetPVarString(playerid, "kisisorgulamdc", isim, sizeof(isim));
			format(mesaj, sizeof(mesaj), "%s adlý kiþinin tüm aranma kayýtlarýný sileceksin, onaylýyor musun?", isim);
			return DialogGoster(playerid, DIALOG_MDC_ARANMAKALDIR, DIALOG_STYLE_MSGBOX, "MDC - Aranma Kaldýr", mesaj, "Evet", "Kapat");
		}
        else if(!strcmp(inputtext, "Mülkler", true)) {
			new sayi = 0, id = GetPVarInt(playerid, "MDCSQLID"), mesaj[2048];
			format(mesaj, sizeof(mesaj), "Tür\tKapý NO\tAd - Adres\n");
			for(new i = 0; i < MAKSIMUM_EV; i ++) if(EvBilgi[i][evSahip] == id) {
			    format(mesaj, sizeof(mesaj), "%s\nEV\t%d\t%s\n", mesaj, EvBilgi[i][evID], EvBilgi[i][evAdres]);
			    sayi++;
			}
			for(new i = 0; i < MAKSIMUM_ISYERI; i ++) if(IsyeriBilgi[i][isyeriSahip] == id) {
			    format(mesaj, sizeof(mesaj), "%s\nISYERI\t%d\t%s\n", mesaj, IsyeriBilgi[i][isyeriID] + MAKSIMUM_EV, IsyeriBilgi[i][isyeriAd]);
			    sayi++;
			}
			for(new i = 0; i < MAKSIMUM_BINA; i ++) if(BinaBilgi[i][binaSahip] == id) {
			    new kapino = MAKSIMUM_EV + MAKSIMUM_ISYERI;
			    format(mesaj, sizeof(mesaj), "%s\nBINA\t%d\t%s\n", mesaj, BinaBilgi[i][bID] + kapino, BinaBilgi[i][bIsim]);
			    sayi++;
			}
			if(!sayi) return HataMesaji(playerid, "Oyuncunun üzerine kayýtlý mülk yok.");
			DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Mülk Sorgulama", mesaj, "Kapat", "");
		}
		else if(!strcmp(inputtext, "Lokasyon Bul", true)) {
			new aracid = GetPVarInt(playerid, "aracPlaka");
			if(AracBilgi[aracid][aracKullanimda] == false) return HataMesaji(playerid, "Bir sorun oluþtu.");
		    if(AracBilgi[aracid][aracWorld] > 0 || AracBilgi[aracid][aracInt] > 0) return HataMesaji(playerid, "Konum bulunamýyor.");
			if(AracBilgi[aracid][aracDurum] != 1) return HataMesaji(playerid, "Bu araç bulunabilir durumda deðil.");

			new Float:x, Float:y, Float:z;
			GetVehiclePos(AracBilgi[aracid][aracYarat], x, y, z);
			SendClientMessageEx(playerid, RENK_BIRLIK, "[CCTV] {FFFFFF}%s plakalý aracýn son görüldüðü yer: %s", AracBilgi[aracid][aracPlaka], LokasyonBul(x, y, z));
			SetPVarInt(playerid, "aracPlaka", -1);

			new sorgu[144];
			format(sorgu, sizeof(sorgu), "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", AracBilgi[aracid][aracSahip]);
			return mysql_tquery(mysqlB, sorgu, "PlakaSorgula", "dd", playerid, aracid);
		}
		else if(!strcmp(inputtext, "Ceza Kes", true)) return DialogGoster(playerid, DIALOG_MDC_CEZAKES, DIALOG_STYLE_INPUT, "Ceza Kes", "Lütfen kesmek istediðiniz ceza miktarýný girin;", "Tamam", "Kapat");
		else if(!strcmp(inputtext, "Ceza Sorgula", true)) {
			new sorgu[256], aracid = GetPVarInt(playerid, "aracPlaka");
			format(sorgu, sizeof(sorgu), "SELECT * FROM `araccezalari` WHERE `AracID` = '%d'", AracBilgi[aracid][aracID]);
			mysql_tquery(mysqlB, sorgu, "MDC_CezaSorgula", "i", playerid);
		    return 1;
		}
		else if(!strcmp(inputtext, "Araç Sahibi:", true)) {
		    new aracid = GetPVarInt(playerid, "aracPlaka");
		    if(AracBilgi[aracid][aracSahip] < 1 && AracBilgi[aracid][aracBirlik] < 1) return HataMesaji(playerid, "Bu aracýn sahibi yok.");
		    if(AracBilgi[aracid][aracBirlik] > 0) return HataMesaji(playerid, "Bu aracýn sahibi bir birlik.");
		    new isim[MAX_PLAYER_NAME + 1];
			GetPVarString(playerid, "PlakaSahip", isim, sizeof(isim));

			new sorgu[144];
			format(sorgu, sizeof(sorgu), "SELECT * FROM `oyuncular` WHERE `isim` = '%s'", isim);
			mysql_tquery(mysqlB, sorgu, "KisiSorgula", "sdd", isim, playerid, 0);
		}
		else if(!strcmp(inputtext, "Araçlar", true)) {
			new id = GetPVarInt(playerid, "MDCSQLID"), mesaj[2048], isim[MAX_PLAYER_NAME + 1], baslik[64], sayi = 0;
			GetPVarString(playerid, "kisisorgulamdc", isim, sizeof(isim));
			format(mesaj, sizeof(mesaj), "Plaka\tModel\tDurum\n");
			for(new i = 0; i < MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracSahip] == id) format(mesaj, sizeof(mesaj), "%s%s\t%s\t%s\n", mesaj, AracBilgi[i][aracPlaka], AracModel(AracBilgi[i][aracModel]), AracDurum(i)), sayi++;
            format(baslik, sizeof(baslik), "Araç Listesi - %s", isim);
            if(!sayi) return HataMesaji(playerid, "Oyuncunun üzerine kayýtlý araç yok.");
			DialogGoster(playerid, DIALOG_MDC_ARACLISTESI, DIALOG_STYLE_TABLIST_HEADERS, baslik, mesaj, "Seç", "Kapat");
		}
	}
	else if(dialogid == DIALOG_MDC_CEZAKES) {
	    if(!response) return false;

		new ceza_ucret;
		if(sscanf(inputtext, "d", ceza_ucret)) return DialogGoster(playerid, DIALOG_MDC_CEZAKES, DIALOG_STYLE_INPUT, "Ceza Kes", "Lütfen kesmek istediðiniz ceza miktarýný girin;", "Tamam", "Kapat");
		if(ceza_ucret < 500 || ceza_ucret > 50000) return DialogGoster(playerid, DIALOG_MDC_CEZAKES, DIALOG_STYLE_INPUT, "Ceza Kes", "HATA: Ceza miktarý en az $500, en fazla $50,000 olabilir.\n\nLütfen kesmek istediðiniz ceza miktarýný girin;", "Tamam", "Kapat");

		SetPVarInt(playerid, "plaka_ceza", ceza_ucret);
		DialogGoster(playerid, DIALOG_MDC_ACEZASEBEP, DIALOG_STYLE_INPUT, "Ceza Kes", "{FFFFFF}Lütfen kesmek istediðiniz cezanýn sebebini giriniz;", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_MDC_ACEZASEBEP) {
		if(!response) return DeletePVar(playerid, "plaka_ceza");
		
		if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_MDC_ACEZASEBEP, DIALOG_STYLE_INPUT, "Ceza Kes", "{B70000}HATA: {FFFFFF}Sebep boþ býrakýlamaz.\n\n{FFFFFF}Lütfen kesmek istediðiniz cezanýn sebebini giriniz;", "Tamam", "Kapat");
		if(strlen(inputtext) < 3 || strlen(inputtext) > 32) return DialogGoster(playerid, DIALOG_MDC_ACEZASEBEP, DIALOG_STYLE_INPUT, "Ceza Kes", "{B70000}HATA: {FFFFFF}Sebep en az 3, en fazla 32 harfli olabilir.\n\n{FFFFFF}Lütfen kesmek istediðiniz cezanýn sebebini giriniz;", "Tamam", "Kapat");

		new aracid = GetPVarInt(playerid, "aracPlaka"), sorgu[512], ekleyen_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, ekleyen_isim, sizeof(ekleyen_isim));
		for(new i = 0, len = strlen(ekleyen_isim); i < len; i ++) if(ekleyen_isim[i] == '_') ekleyen_isim[i] = ' ';
		format(sorgu, sizeof(sorgu), "INSERT INTO `araccezalari` (`Sebep`, `Tarih`, `Ekleyen`, `Ucret`, `AracID`) VALUES ('%s', '%s', '%s', '%d', '%d')", SQL_ReturnEscaped(inputtext), Tarih(), ekleyen_isim, GetPVarInt(playerid, "plaka_ceza"), AracBilgi[aracid][aracID]);
		mysql_query(mysqlB, sorgu);
		DeletePVar(playerid, "plaka_ceza");
		return cmd_mdc(playerid, inputtext);
	}
	else if(dialogid == DIALOG_MDC_ARACLISTESI) {
		if(!response) return false;

		for(new i = 0; i != MAKSIMUM_ARAC; i++) if(!strcmp(inputtext, AracBilgi[i][aracPlaka], true)) {
			if(AracBilgi[i][aracSahip] > 0) {
				new sorgu[144];
				format(sorgu, sizeof(sorgu), "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", AracBilgi[i][aracSahip]);
				return mysql_tquery(mysqlB, sorgu, "PlakaSorgula", "dd", playerid, i);
			}
		}
		HataMesaji(playerid, "Girilen plakaya ait sonuç bulunamadý. (%s)", inputtext);
	}
	else if(dialogid == DIALOG_MDC_CEZAEKLE) {
		if(!response) return false;

		if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_MDC_CEZAEKLE, DIALOG_STYLE_INPUT, "MDC - Ceza Ekle", "Lütfen kiþinin suçunu girin;", "Tamam", "Kapat");

		DialogGoster(playerid, DIALOG_MDC_CEZAEKLE_UCRET, DIALOG_STYLE_INPUT, "MDC - Ceza Ücret", "Kesilecek ceza miktarýný girin;", "Tamam", "Kapat");
		return SetPVarString(playerid, "cezakesmdc", inputtext);
	}
	else if(dialogid == DIALOG_MDC_CEZAEKLE_UCRET) {
		if(!response) return false;

		new sorgu[512], ucret, isim[MAX_PLAYER_NAME + 1], sebep[64], cezatarih[36];
		if(sscanf(inputtext, "d", ucret)) return DialogGoster(playerid, DIALOG_MDC_CEZAEKLE_UCRET, DIALOG_STYLE_INPUT, "MDC - Ceza Ücret", "Kesilecek ceza miktarýný girin;", "Tamam", "Kapat");
		if(ucret < 1 || ucret > 3000) return DialogGoster(playerid, DIALOG_MDC_CEZAEKLE_UCRET, DIALOG_STYLE_INPUT, "MDC - Ceza Ücret", "{B70000}HATA: {FFFFFF}En az $1, en fazla $3,000 miktarýnda ceza kesebilirsin.\nKesilecek ceza miktarýný girin;", "Tamam", "Kapat");
		GetPVarString(playerid, "kisisorgulamdc", isim, sizeof(isim));
		GetPVarString(playerid, "cezakesmdc", sebep, sizeof(sebep));
		format(cezatarih, 36, Tarih());
		for(new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		format(sorgu, sizeof(sorgu), "INSERT INTO `cezalar` (`cezaSQL`, `cezaMemur`, `cezaUcret`, `cezaTarih`, `cezaSebep`) VALUES('%s', '%s','%d', '%s', '%s')", isim, OyuncuIsim(playerid), ucret, cezatarih, SQL_ReturnEscaped(sebep));
		mysql_tquery(mysqlB, sorgu);
		format(sorgu, sizeof(sorgu), "SELECT * FROM cezalar WHERE cezaSQL = '%s'", isim);
		mysql_tquery(mysqlB, sorgu, "Ceza_Toplam");
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(SID: %d), %s adlý kiþiye ceza yazdý. (miktar: %s / sebep: %s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], isim, NumaraFormati(ucret), sebep);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/mdc.txt", "%s", log_icerik);
		return SunucuMesaji(playerid, "%s adlý kiþiye, %s sebebiyle %s miktarýnda ceza kestin.", isim, sebep, NumaraFormati(ucret));
	}
	else if(dialogid == DIALOG_SUCKONTROL) {
	    if(!response) return false;
	    ArananlarListesi(playerid);
	}
	else if(dialogid == DIALOG_SICIL_KONTROL) {
	    if(!response) return false;
	    cmd_mdc(playerid, inputtext);
	}
	else if(dialogid == DIALOG_MDC_ARANMAKALDIR) {
	    if(!response) return false;
	    new sorgu[512], isim[MAX_PLAYER_NAME + 1];
		GetPVarString(playerid, "kisisorgulamdc", isim, sizeof(isim));
		format(sorgu, sizeof(sorgu), "SELECT * FROM aranmakayitlari WHERE Oyuncu = '%s'", isim);
		mysql_tquery(mysqlB, sorgu, "MDC_AranmaSil", "d", playerid);
	}
	else if(dialogid == DIALOG_MDC_SUCEKLE2) {
	    if(!response) return false;

		new sorgu[768], isim[MAX_PLAYER_NAME + 1];
		GetPVarString(playerid, "kisisorgulamdc", isim, sizeof(isim));
		format(sorgu, sizeof(sorgu), "INSERT INTO `aranmakayitlari` (`Oyuncu`, `Suc`, `Tarih`, `Memur`) VALUES ('%s', '%s', '%s', '%s')", isim, inputtext, Tarih(), OyuncuIsim(playerid));
		mysql_query(mysqlB, sorgu);
		DeletePVar(playerid, "kisisorgulamdc");
		SunucuMesaji(playerid, "%s adlý kiþiye %s sebebiyle aranma kaydý oluþturdun.", isim, inputtext);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(SID: %d), %s adlý kiþiye aranma kaydý oluþturdu. (%s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], isim, inputtext);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/mdc.txt", "%s", log_icerik);
		for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
		return BirlikMesaji(OyuncuBilgi[playerid][oBirlik], RENK_BIRLIK, "[BIRLIK] %s %s, %s isimli kiþinin siciline \"%s\" sebebiyle suç ekledi.", OyuncuRutbeAdi(playerid), OyuncuIsim(playerid), isim, inputtext);
	}
	else if(dialogid == DIALOG_MDC_VATANDASLIK) {
	    if(!response) return false;
	    new vno;
	    if(sscanf(inputtext, "d", vno))
	        return DialogGoster(playerid, DIALOG_MDC_VATANDASLIK, DIALOG_STYLE_INPUT, "MDC - Vatandaþlýk Numarasý Sorgulama", "Lütfen bilgi edinmek istediðin vatandaþlýk numarasýný girin;", "Tamam", "Kapat");

		new sorgu[144], test[144];
		valstr(test, vno);
		format(sorgu, sizeof(sorgu), "SELECT * FROM `oyuncular` WHERE `VatandaslikNo` = '%d'", vno);
		mysql_tquery(mysqlB, sorgu, "KisiSorgula", "sdd", test, playerid, 1);
	}
	else if(dialogid == DIALOG_MDC_TELEFON) {
	    if(!response) return false;
	    new telefonnumarasi;
	    if(sscanf(inputtext, "d", telefonnumarasi))
	        return DialogGoster(playerid, DIALOG_MDC_TELEFON, DIALOG_STYLE_INPUT, "MDC - Telefon Numarasý Sorgulama", "Sorgulamak istediðiniz numarayý girin;", "Tamam", "Kapat");

		new sorgu[144], test[144];
		valstr(test, telefonnumarasi);
		format(sorgu, sizeof(sorgu), "SELECT * FROM `oyuncular` WHERE `TelefonNumarasi` = '%d'", telefonnumarasi);
		mysql_tquery(mysqlB, sorgu, "KisiSorgula", "sdd", test, playerid, 2);
	}
	else if(dialogid == DIALOG_OOCMARKET_GALERI) {
	    if(!response) return DeletePVar(playerid, "oocmarket_model"), DeletePVar(playerid, "oocmarket_fiyat");
	    if(Arac_Sayi(playerid) >= OYUNCU_ARAC_LIMIT + OyuncuBilgi[playerid][oEkAracSlot]) return HataMesaji(playerid, "Daha fazla araç almak için ek slot almalýsýn."), DeletePVar(playerid, "oocmarket_model"), DeletePVar(playerid, "oocmarket_fiyat");
		if(BakiyeKontrol(playerid) < GetPVarInt(playerid, "oocmarket_fiyat")) {
			HataMesaji(playerid, "Gerekli araç ücretini (%sTL) karþýlayamýyorsun.", NumaraFormati(GetPVarInt(playerid, "oocmarket_fiyat"), ""));
			return DeletePVar(playerid, "oocmarket_model"), DeletePVar(playerid, "oocmarket_fiyat");
		}
		new model = GetPVarInt(playerid, "oocmarket_model"), mesaj_oneri[144], Float:a_pos[4];
		switch(model) {
		    case 446, 452, 453, 454, 473: format(mesaj_oneri, sizeof(mesaj_oneri), "tekneni Santa Maria'dan teslim alabilirsin."), a_pos[0] = 137.86, a_pos[1] = -1835.82, a_pos[2] = 3.06, a_pos[3] = 180.0;
		    default: format(mesaj_oneri, sizeof(mesaj_oneri), "aracýný Unity Station'dan teslim alabilirsin."), a_pos[0] = 1790.62, a_pos[1] = -1926.74, a_pos[2] = 13.39, a_pos[3] = 0.0;
		}
        Arac_Yarat(OyuncuBilgi[playerid][oID], model, a_pos[0], a_pos[1], a_pos[2], a_pos[3], random(255), random(255));
        BakiyeKes(playerid, GetPVarInt(playerid, "oocmarket_fiyat"));
        SunucuMesaji(playerid, "%s model aracý %sTL fiyatýna satýn aldýn, %s", AracModel(GetPVarInt(playerid, "oocmarket_model")), NumaraFormati(GetPVarInt(playerid, "oocmarket_fiyat"), ""), mesaj_oneri);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), ooc marketten %s aldý. (fiyat: %sTL)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], AracModel(GetPVarInt(playerid, "oocmarket_model")), NumaraFormati(GetPVarInt(playerid, "oocmarket_fiyat"), ""));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
		return DeletePVar(playerid, "oocmarket_model"), DeletePVar(playerid, "oocmarket_fiyat");
	}
	else if(dialogid == DIALOG_GALERI_SATINAL) {
	    if(!response) return DeletePVar(playerid, "galerimodel"), DeletePVar(playerid, "galerifiyat");
	    if(Arac_Sayi(playerid) >= OYUNCU_ARAC_LIMIT + OyuncuBilgi[playerid][oEkAracSlot]) return HataMesaji(playerid, "Daha fazla araç almak için ek slot almalýsýn."), DeletePVar(playerid, "galerimodel"), DeletePVar(playerid, "galerifiyat");
		if(OyuncuBilgi[playerid][oPara] < GetPVarInt(playerid, "galerifiyat")) {
			HataMesaji(playerid, "Gerekli ücreti (%s) karþýlayamýyorsun.", NumaraFormati(GetPVarInt(playerid, "galerifiyat")));
			return DeletePVar(playerid, "galerimodel"), DeletePVar(playerid, "galerifiyat");
		}
	    new isyeri_id = Oyuncu_Isyerinde(playerid), bilgi_ek[16], Float:arac_pos[4], id = -1;
	    if(isyeri_id == -1) return HataMesaji(playerid, "Bir sorun oluþtu.");
	    switch(IsyeriBilgi[isyeri_id][isyeriTur]) {
			case 4: bilgi_ek = "motoru", MotorPos(arac_pos[0], arac_pos[1], arac_pos[2], arac_pos[3]);
			case 11: bilgi_ek = "aracý", DusukGaleriPos(arac_pos[0], arac_pos[1], arac_pos[2], arac_pos[3]);
			case 12: bilgi_ek = "aracý", LuksGaleriPos(arac_pos[0], arac_pos[1], arac_pos[2], arac_pos[3]);
			case 13: bilgi_ek = "uçaðý", UcakPos(arac_pos[0], arac_pos[1], arac_pos[2], arac_pos[3]);
			case 14: bilgi_ek = "tekneyi", TeknePos(arac_pos[0], arac_pos[1], arac_pos[2], arac_pos[3]);
			default: return HataMesaji(playerid, "Bir sorun oluþtu.");
	    }
		if(arac_pos[0] == 0.0 && arac_pos[1] == 0.0 && arac_pos[2] == 0.0) return HataMesaji(playerid, "Araç alýnamadý, aracýn spawnlanacaðý boþ bir yer yok. /rapor komutuyla destek alabilirsiniz.");
        id = Arac_Yarat(OyuncuBilgi[playerid][oID], GetPVarInt(playerid, "galerimodel"), arac_pos[0], arac_pos[1], arac_pos[2], arac_pos[3], random(255), random(255));
        if(id == -1) return HataMesaji(playerid, "Sunucuda araç slotu kalmadýðý için aracýný satýn alamadýn.");
        ParaEkle(playerid, -GetPVarInt(playerid, "galerifiyat"));
        SunucuMesaji(playerid, "%s model %s %s fiyatýna satýn aldýn, dýþarýdaki park alanýnda.", AracModel(GetPVarInt(playerid, "galerimodel")), bilgi_ek, NumaraFormati(GetPVarInt(playerid, "galerifiyat")));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), galeriden %s aldý. (fiyat: %s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], AracModel(GetPVarInt(playerid, "galerimodel")), NumaraFormati(GetPVarInt(playerid, "galerifiyat")));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/arac.txt", "%s", log_icerik);
		return DeletePVar(playerid, "galerimodel"), DeletePVar(playerid, "galerifiyat");
	}
	else if(dialogid == DIALOG_FABRIKALAR) {
	    if(!response) return false;

	    SetPlayerCheckpoint(playerid, FabrikaBilgi[listitem][fPos][0], FabrikaBilgi[listitem][fPos][1], FabrikaBilgi[listitem][fPos][2], 4.0);
	    SunucuMesaji(playerid, "%s adlý fabrikayý seçtin, lokasyon GPS cihazýnda iþaretlendi.", FabrikaBilgi[listitem][fabrikaAd]);
	    return true;
	}
	else if(dialogid == DIALOG_ORTAK_AYRIL) {
	    if(!response) return false;

	    new id = Isyeri_Yakin(playerid);
	    if(IsyeriBilgi[id][isyeriOrtak] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bir hata oluþtu, lütfen tekrar dene.");
		IsyeriBilgi[id][isyeriOrtak] = 0;
		Isyeri_Yenile(id);
		Isyeri_Kaydet(id);
		return SunucuMesaji(playerid, "Ortaklýktan kendi isteðinle ayrýldýn.");
	}
	else if(dialogid == DIALOG_KIRACI_AYRIL) {
	    if(!response) return false;

	    new id = Ev_Yakin(playerid);
	    if(EvBilgi[id][evKiraci] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bir hata oluþtu, lütfen tekrar dene.");
		EvBilgi[id][evKiraci] = 0;
		EvBilgi[id][evKiraciIsim][0] = 0;
		Ev_Kaydet(id);
		Ev_Yenile(id);
		return SunucuMesaji(playerid, "Kiracýlýktan kendi isteðinle ayrýldýn.");
	}
	else if(dialogid == DIALOG_TEZGAH_SLOGAN) {
		new mesaj[256];
	    if(!response) return DialogGoster(playerid, DIALOG_TEZGAHKUR, DIALOG_STYLE_INPUT, "Tezgah Kurma Menüsü", "Yemek Tezgahý\nDondurma Tezgahý\nSosisli Tezgahý\nNoodle Tezgahý", "Seç", "Kapat");
	    if(strlen(inputtext) < 10 || strlen(inputtext) > 100) {
		format(mesaj, sizeof(mesaj), "{B70000}HATA: {FFFFFF}Girilen pankart en az 6 karakter, en fazla 100 karakter olabilir.\n\n{FFFFFF}}Tezgahýnýzda görüntülenecek olan pankartý giriniz;", RENK_YAYIN >>> 8);
        DialogGoster(playerid, DIALOG_TEZGAH_SLOGAN, DIALOG_STYLE_INPUT, "vRP: Tezgah Pankartý Belirleme", mesaj, "Tamam", "Ýptal");
		}
	}
	else if(dialogid == DIALOG_TEZGAHKUR) {
	    if(!response) return false;
	    if(!strcmp(inputtext, "Yemek Tezgahý", true)) {
        new id = -1, slogan[128];
        format(slogan, sizeof(slogan), "%s", inputtext);
		id = Stand_Yarat(playerid, 1);
		StandBilgi[id][standSlogan] = slogan;
		StandBilgi[id][standObje] = 1342;
		Stand_Yenile(id);
		if(id == -1) return HataMesaji(playerid, "Sunucu maksimum tezgah limitine ulaþtý, þu an tezgah oluþturamazsýn.");
	 	}
	    if(!strcmp(inputtext, "Dondurma Tezgahý", true)) {
        new id = -1, slogan[128];
        format(slogan, sizeof(slogan), "%s", inputtext);
		id = Stand_Yarat(playerid, 2);
		StandBilgi[id][standSlogan] = slogan;
		StandBilgi[id][standObje] = 1341;
		Stand_Yenile(id);
		if(id == -1) return HataMesaji(playerid, "Sunucu maksimum tezgah limitine ulaþtý, þu an tezgah oluþturamazsýn.");
	 	}
	 	if(!strcmp(inputtext, "Sosisli Tezgahý", true)) {
        new id = -1, slogan[128];
        format(slogan, sizeof(slogan), "%s", inputtext);
		id = Stand_Yarat(playerid, 3);
		StandBilgi[id][standSlogan] = slogan;
		StandBilgi[id][standObje] = 1340;
		Stand_Yenile(id);
		if(id == -1) return HataMesaji(playerid, "Sunucu maksimum tezgah limitine ulaþtý, þu an tezgah oluþturamazsýn.");
	 	}
	 	if(!strcmp(inputtext, "Noodle Tezgahý", true)) {
        new id = -1, slogan[128];
        format(slogan, sizeof(slogan), "%s", inputtext);
		id = Stand_Yarat(playerid, 4);
		StandBilgi[id][standSlogan] = slogan;
		StandBilgi[id][standObje] = 1570;
		Stand_Yenile(id);
		if(id == -1) return HataMesaji(playerid, "Sunucu maksimum tezgah limitine ulaþtý, þu an tezgah oluþturamazsýn.");
	 	}
	}
	else if(dialogid == DIALOG_DILSEC) {
	    if(!response) return false;

		OyuncuBilgi[playerid][oEkstraDil] = listitem;
		OyuncuKaydet(playerid);
		SunucuMesaji(playerid, "Ýkincil dilini %s olarak seçtin.", inputtext);
	}
	else if(dialogid == DIALOG_ORTAK_CIKAR) {
		if(!response) return false;

		new id = Isyeri_Yakin(playerid);
		if(id == -1) id = Oyuncu_Isyerinde(playerid);
	    if(IsyeriBilgi[id][isyeriSahip] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bir hata oluþtu, lütfen tekrar dene.");
		IsyeriBilgi[id][isyeriOrtak] = 0;
		Isyeri_Yenile(id);
		Isyeri_Kaydet(id);
		return SunucuMesaji(playerid, "Ýþyeri ortaðýný kendi isteðinle çýkarttýn.");
	}
	else if(dialogid == DIALOG_DMV) {
	    if(!response) return 0;
        new sorgu[256], Cache:sorgu_cache;
		for(new i = 0; i != MAKSIMUM_ARAC; i++) if(!strcmp(inputtext, AracBilgi[i][aracPlaka], true)) {
			if(AracBilgi[i][aracDurum] != 2) return HataMesaji(playerid, "Araç baðlanmýþ deðil.");
   			if(AracBilgi[i][aracBaglama] > 0 && OyuncuBilgi[playerid][oPara] < AracBilgi[i][aracBaglama]) return HataMesaji(playerid, "Aracýný geri almak için gereken ücreti karþýlayamýyorsun.");
			format(sorgu, sizeof(sorgu), "SELECT `ID` FROM `araccezalari` WHERE `AracID` = '%d' AND `Durum` = '0' LIMIT 1", AracBilgi[i][aracID]);
			sorgu_cache = mysql_query(mysqlB, sorgu);
			if(cache_num_rows()) return cache_delete(sorgu_cache), HataMesaji(playerid, "Bu plakaya ait ödenmemiþ cezalar mevcut, önce onlarý ödemelisin.");
			cache_delete(sorgu_cache);
		    ParaEkle(playerid, -AracBilgi[i][aracBaglama]);
		    OyuncuKaydet(playerid);
		    SunucuMesaji(playerid, "%s ödeyerek aracýný baðlanmýþ durumdan çýkardýn.", NumaraFormati(AracBilgi[i][aracBaglama]));
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) DMV'den aracýný %s ödeyerek çýkarttý. (%s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], NumaraFormati(AracBilgi[i][aracBaglama]), AracBilgi[i][aracPlaka]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/arac.txt", "%s", log_icerik);
		    AracBilgi[i][aracDurum] = 1;
			AracBilgi[i][aracInt] = 0;
			AracBilgi[i][aracWorld] = 0;
			AracBilgi[i][aracBaglama] = 0;
			Arac_Kaydet(i);
			Arac_Spawn(i);
   			SetVehiclePos(AracBilgi[i][aracYarat], 1513.79, -1661.08, 13.55);
   			return SetVehicleZAngle(AracBilgi[i][aracYarat], 0);
		}
	}
	else if(dialogid == DIALOG_ARACSIGORTA) {
	    if(!response) return 0;

		for(new i = 0; i != MAKSIMUM_ARAC; i++) if(!strcmp(inputtext, AracBilgi[i][aracPlaka], true)) {
			if(AracBilgi[i][aracDurum] != 0) return HataMesaji(playerid, "Araç hurda deðil.");
			for(new c = 0; c != sizeof(SatilikAraclar); c ++) if(SatilikAraclar[c][0] == AracBilgi[i][aracModel]) {
			    new fiyat = SatilikAraclar[c][1] / 10 + 5000;
			    if(OyuncuBilgi[playerid][oPara] < fiyat) return HataMesaji(playerid, "Aracýný geri almak için gereken ücreti karþýlayamýyorsun.");
			    ParaEkle(playerid, -fiyat);
			    OyuncuKaydet(playerid);
			    SunucuMesaji(playerid, "%s ödeyerek aracýný sigorta þirketinden geri aldýn.", NumaraFormati(fiyat));
			    new arizatur = RandomEx(1, 6);
			    AracBilgi[i][aracDurum] = 1;
	            AracBilgi[i][aracInt] = 0;
	            AracBilgi[i][aracWorld] = 0;
	            AracBilgi[i][aracArizaTur] = arizatur;
				AracBilgi[i][aracTamirde] = 1;
			    Arac_Kaydet(i);
				Arac_Spawn(i);
   				SetVehiclePos(AracBilgi[i][aracYarat], 1515.3160, -1767.3714, 13.2787);
   				return SetVehicleZAngle(AracBilgi[i][aracYarat], 0);
			}
		}
	}
	else if(dialogid == DIALOG_ISLEMLER) {
	    if(!response) return 0;

	    if(!strcmp(inputtext, "Ceza Öde", true)) DialogGoster(playerid, DIALOG_CEZALAR, DIALOG_STYLE_TABLIST_HEADERS, "Cezalar", "Ceza Türü\nKiþisel\nAraç\nEv", "Seç", "Kapat");
	    else if(!strcmp(inputtext, "Vergi Öde", true)) DialogGoster(playerid, DIALOG_VERGILER, DIALOG_STYLE_TABLIST_HEADERS, "vRP: Vergi Ödeme", "Tür\nEv\nAraç", "Seç", "Kapat");
	    else if(!strcmp(inputtext, "Araç Sigorta", true)) {
			new sayi = 0, veriler[1024], fiyat = 0;
			format(veriler, sizeof(veriler), "Plaka\tModel\tDurum\tÜcret\n");
			for(new i = 0; i < MAKSIMUM_ARAC; i ++) if(Arac_SahipKontrol(playerid, i) && AracBilgi[i][aracDurum] == 0) {
			    for(new c = 0; c != sizeof(SatilikAraclar); c ++) if(SatilikAraclar[c][0] == AracBilgi[i][aracModel]) fiyat = SatilikAraclar[c][1] / 10 + 5000;
			    format(veriler, sizeof(veriler), "%s%s\t%s\tHurda\t%s\n", veriler, AracBilgi[i][aracPlaka], AracModel(AracBilgi[i][aracModel]), NumaraFormati(fiyat));
			    sayi++;
			}
			if(!sayi) return HataMesaji(playerid, "Sigortadan geri alabileceðin aracýn yok.");
		    DialogGoster(playerid, DIALOG_ARACSIGORTA, DIALOG_STYLE_TABLIST_HEADERS, "Araç Sigorta", veriler, "Seç", "Kapat");
	    }
	}
	else if(dialogid == DIALOG_VERGILER) {
	    if(!response) return 0;

        if(!strcmp(inputtext, "Ev", true)) {
			new mesaj[256 * MAKSIMUM_EV], sayi = 0;
			format(mesaj, sizeof(mesaj), "ID\tAdres\tÜcret\n");
			for(new i = 0; i != MAKSIMUM_EV; i++) if(EvBilgi[i][evSahip] == OyuncuBilgi[playerid][oID] && EvBilgi[i][evVergi] > 0)
			{
				format(mesaj, sizeof(mesaj), "%s{FFFFFF}%d\t%s\t%s\n", mesaj, i, EvBilgi[i][evAdres], NumaraFormati(EvBilgi[i][evVergi]));
				sayi++;
			}
			if(!sayi) return HataMesaji(playerid, "Vergi kaydý olan ev bulunamadý.");
			DialogGoster(playerid, DIALOG_EV_VERGIODE, DIALOG_STYLE_TABLIST_HEADERS, "Ev - Vergi Öde", mesaj, "Öde", "Kapat");
		}
		else if(!strcmp(inputtext, "Araç", true)) {
			new mesaj[256 * MAKSIMUM_EV], sayi = 0;
			format(mesaj, sizeof(mesaj), "Plaka\tÜcret\n");
			for(new i = 0; i != MAKSIMUM_ARAC; i++) if(AracBilgi[i][aracSahip] == OyuncuBilgi[playerid][oID] && AracBilgi[i][aracKullanimda] && AracBilgi[i][aracVergi])
			{
				format(mesaj, sizeof(mesaj), "%s{FFFFFF}%s\t%s\n", mesaj, AracBilgi[i][aracPlaka], NumaraFormati(AracBilgi[i][aracVergi]));
				sayi++;
			}
			if(!sayi) return HataMesaji(playerid, "Vergi kaydý olan aracýn yok.");
			DialogGoster(playerid, DIALOG_ARAC_VERGIODE, DIALOG_STYLE_TABLIST_HEADERS, "Araç - Vergi Öde", mesaj, "Öde", "Kapat");
		}
	}
	else if(dialogid == DIALOG_ARAC_VERGIODE) {
		if(!response) return false;

		new id = -1;
		for(new i = 0; i != MAKSIMUM_ARAC; i++) if(!strcmp(inputtext, AracBilgi[i][aracPlaka], true) && AracBilgi[i][aracKullanimda] && AracBilgi[i][aracSahip] == OyuncuBilgi[playerid][oID]) { id = i; break; }
		if(id == -1) return HataMesaji(playerid, "Bir sorun oluþtu.");
		if(AracBilgi[id][aracSahip] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bir sorun oluþtu.");
		if(OyuncuBilgi[playerid][oPara] < AracBilgi[id][aracVergi]) return HataMesaji(playerid, "Vergi ücretini(%s) karþýlayamýyorsun.", NumaraFormati(AracBilgi[id][aracVergi]));

		ParaEkle(playerid, -AracBilgi[id][aracVergi]);
		SunucuMesaji(playerid, "%s karþýlýðýnda aracýnýn vergisini ödedin.", NumaraFormati(AracBilgi[id][aracVergi]));
		AracBilgi[id][aracVergi] = 0;
		OyuncuKaydet(playerid);
		Arac_Kaydet(id);
	}
	else if(dialogid == DIALOG_EV_VERGIODE) {
		if(!response) return false;

		new id = -1;
		for(new i = 0; i != MAKSIMUM_EV; i++) if(i == strval(inputtext)) { id = i; break; }
		if(id == -1) return HataMesaji(playerid, "Bir sorun oluþtu.");
		if(EvBilgi[id][evSahip] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bir sorun oluþtu.");
		if(OyuncuBilgi[playerid][oPara] < EvBilgi[id][evVergi]) return HataMesaji(playerid, "Vergi ücretini(%s) karþýlayamýyorsun.", NumaraFormati(EvBilgi[id][evVergi]));

		ParaEkle(playerid, -EvBilgi[id][evVergi]);
		SunucuMesaji(playerid, "%s karþýlýðýnda evinin vergisini ödedin.", NumaraFormati(EvBilgi[id][evVergi]));
		EvBilgi[id][evVergi] = 0;
		OyuncuKaydet(playerid);
		Ev_Kaydet(id);
	}
	else if(dialogid == DIALOG_CEZALAR) {
		if(!response) return 0;
		if(!strcmp(inputtext, "Kiþisel", true)) CezaArat1(playerid, OyuncuIsim(playerid));
		else if(!strcmp(inputtext, "Ev", true)) {
			new mesaj[256 * MAKSIMUM_EV], sayi = 0;
			format(mesaj, sizeof(mesaj), "ID\tAdres\tÜcret\n");
			for(new i = 0; i != MAKSIMUM_EV; i++) if(EvBilgi[i][evSahip] == OyuncuBilgi[playerid][oID] && EvBilgi[i][evDurum] == 4)
			{
			    format(mesaj, sizeof(mesaj), "%s{FFFFFF}%d\t%s\t%s\n", mesaj, i, EvBilgi[i][evAdres], NumaraFormati(EV_MUHUR_UCRET));
			    sayi++;
			}
			if(!sayi) return HataMesaji(playerid, "Mühürlü evin yok!");
			DialogGoster(playerid, DIALOG_MUHURKALDIR, DIALOG_STYLE_TABLIST_HEADERS, "Mühürlü Evler", mesaj, "Öde", "Kapat");
		}
		else if(!strcmp(inputtext, "Araç", true)) return DialogGoster(playerid, DIALOG_ACEZAODE, DIALOG_STYLE_INPUT, "Ceza Ödeme", "{FFFFFF}Lütfen cezasýný ödemek istediðiniz aracýn plakasýný giriniz;", "Tamam", "< Geri");
	}
	else if(dialogid == DIALOG_ACEZAODE) {
	    if(!response) return DialogGoster(playerid, DIALOG_ISLEMLER, DIALOG_STYLE_TABLIST, "Ýþlemler", "Ceza Öde\nAraç Sigorta\nVergi Öde", "Seç", "Kapat");
	
		if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_ACEZAODE, DIALOG_STYLE_INPUT, "Ceza Ödeme", "{B70000}HATA: {FFFFFF}Bu seçenek boþ býrakýlamaz.\n\n{FFFFFF}Lütfen cezasýný ödemek istediðiniz aracýn plakasýný giriniz;", "Tamam", "< Geri");
		new sorgu[256];
		for(new i = 0; i != MAKSIMUM_ARAC; i++) if(!strcmp(inputtext, AracBilgi[i][aracPlaka], true)) {
			format(sorgu, sizeof(sorgu), "SELECT * FROM `araccezalari` WHERE `AracID` = '%d'", AracBilgi[i][aracID]);
			mysql_tquery(mysqlB, sorgu, "Arac_CezaListele", "d", playerid);
		    return 1;
		}
		DialogGoster(playerid, DIALOG_ACEZAODE, DIALOG_STYLE_INPUT, "Ceza Ödeme", "{B70000}HATA: {FFFFFF}Bu plakaya ait bir sonuç bulunamadý.\n\n{FFFFFF}Lütfen cezasýný ödemek istediðiniz aracýn plakasýný giriniz;", "Tamam", "< Geri");
		return 1;
	}
	else if(dialogid == DIALOG_ACEZALAR) {
		if(!response) return false;

		new sorgu[128];
		format(sorgu, sizeof(sorgu), "SELECT * FROM `araccezalari` WHERE `ID` = '%d'", strval(inputtext));
		mysql_tquery(mysqlB, sorgu, "Arac_CezaOdeme", "d", playerid);
	}
	else if(dialogid == DIALOG_MUHURKALDIR) {
		if(!response) return false;

		new id = -1;
		for(new i = 0; i != MAKSIMUM_EV; i++) if(i == strval(inputtext)) { id = i; break; }
		if(id == -1) return HataMesaji(playerid, "Bir sorun oluþtu.");
		if(EvBilgi[id][evSahip] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bir sorun oluþtu.");
		if(OyuncuBilgi[playerid][oPara] < EV_MUHUR_UCRET) return HataMesaji(playerid, "Mühür açtýrma ücretini(%s) karþýlayamýyorsun.", NumaraFormati(EV_MUHUR_UCRET));

		ParaEkle(playerid, -EV_MUHUR_UCRET);
		OyuncuKaydet(playerid);
		EvBilgi[id][evDurum] = 3;
		EvBilgi[id][evBakimSure] = 300;
		Ev_Yenile(id);
		Ev_Kaydet(id);
		SunucuMesaji(playerid, "%s karþýlýðýnda evinin mührünü açtýrdýn, evin 5 saat sonra kullanýma açýlacak.", NumaraFormati(EV_MUHUR_UCRET));
	}
	else if(dialogid == DIALOG_CEZA_KISISEL) {
		if(!response) return false;

		CezaOde(playerid, inputtext, 0);
	}
	else if(dialogid == DIALOG_CEZA_KISISEL_ODE) {
		if(!response) return false;

		CezaOde(playerid, cezaodemesebep[playerid], 1);
	}
	else if(dialogid == DIALOG_ELKOY) {
		if(!response) return false;
		if(ElKoy[playerid] == -1 || !IsPlayerConnected(ElKoy[playerid])) return HataMesaji(playerid, "Ýþlem yapýlan oyuncu oyunda olmadýðý için iþleminiz gerçekleþtirilemiyor.");
		new oyuncuid = ElKoy[playerid], emote[144];
		ElKoy[playerid] = -1;

		if(!strcmp(inputtext, "Sürücü Lisansý", true)) {
 			if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Bir sorun oluþtu, tekrar deneyin.");
		    if(OyuncuBilgi[oyuncuid][oEhliyet] == false) return HataMesaji(playerid, "Oyuncunun zaten sürücü lisansý yok, el koyamazsýn.");

		    OyuncuBilgi[oyuncuid][oEhliyet] = false;
			format(emote, sizeof(emote), "%s adlý kiþinin sürücü lisansýna el koyar.", OyuncuIsim(oyuncuid));
		    cmd_me(playerid, emote);
		}
		else if(!strcmp(inputtext, "Ruhsat", true)) {
			if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Bir sorun oluþtu, tekrar deneyin.");
			if(OyuncuBilgi[oyuncuid][oRuhsat] == 0) return HataMesaji(playerid, "Oyuncunun zaten ruhsatý yok, el koyamazsýn.");

			OyuncuBilgi[oyuncuid][oRuhsat] = 0;
			format(emote, sizeof(emote), "%s adlý kiþinin silah ruhsatýna el koyar.", OyuncuIsim(oyuncuid));
		    cmd_me(playerid, emote);
		}
		else if(!strcmp(inputtext, "Silahlar", true)) {
            if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Bir sorun oluþtu, tekrar deneyin.");

            SilahlariSifirla(oyuncuid);
			format(emote, sizeof(emote), "%s adlý kiþinin silahlarýna el koyar.", OyuncuIsim(oyuncuid));
		    cmd_me(playerid, emote);
		}
		else if(!strcmp(inputtext, "Uyuþturucu", true)) {
            if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Bir sorun oluþtu, tekrar deneyin.");
            if(OyuncuBilgi[oyuncuid][oUyusturucu] == 0) return HataMesaji(playerid, "Oyuncunun üzerinde uyuþturucu bulunmuyor.");

            OyuncuBilgi[oyuncuid][oUyusturucu] = 0;
			format(emote, sizeof(emote), "%s adlý kiþinin uyuþturucularýna el koyar.", OyuncuIsim(oyuncuid));
		    cmd_me(playerid, emote);
		}
		else if(!strcmp(inputtext, "Tohum", true)) {
            if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Bir sorun oluþtu, tekrar deneyin.");
            if(OyuncuBilgi[oyuncuid][oTohum] == 0) return HataMesaji(playerid, "Oyuncunun üzerinde uyuþturucu tohumu bulunmuyor.");

            OyuncuBilgi[oyuncuid][oTohum] = 0;
			format(emote, sizeof(emote), "%s adlý kiþinin tohumlarýna el koyar.", OyuncuIsim(oyuncuid));
		    cmd_me(playerid, emote);
		}
		else if(!strcmp(inputtext, "Zýrh", true)) {
            if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Bir sorun oluþtu, tekrar deneyin.");
            if(OyuncuZirh(oyuncuid)) return HataMesaji(playerid, "Oyuncunun üzerinde zýrh bulunmuyor.");

            ZirhDuzenle(oyuncuid, 0);
			format(emote, sizeof(emote), "%s adlý kiþinin zýrhýna el koyar.", OyuncuIsim(oyuncuid));
		    cmd_me(playerid, emote);
		}
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], hedef_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		GetPlayerName(oyuncuid, hedef_isim, sizeof(hedef_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin eþyasýna el koydu. (%s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], hedef_isim, OyuncuBilgi[oyuncuid][oID], inputtext);
		Gunluk_LogKaydet(log_icerik);
		OyuncuKaydet(oyuncuid);
 	}
 	else if(dialogid == DIALOG_BOOMBOX) {
 	    if(!response) return false;

		if(!strcmp(inputtext, "Yerleþtir", true))
		{
		    if(BoomboxBilgi[playerid][boomboxKullanimda])
		        return HataMesaji(playerid, "Zaten bir müzik kutusu koymuþsun.");

			if(Boombox_Yakin(playerid) != INVALID_PLAYER_ID)
			    return HataMesaji(playerid, "Yakýnlarda zaten bir müzik kutusu var.");

			Boombox_Yerlestir(playerid);

			cmd_ame(playerid, "müzik kutusunu alýr ve yere koyar.");
			SunucuMesaji(playerid, "Müzik kutusunu koydun. (Ayarlarý  \"/boombox\" komutu ile yapabilirsin).");
		}
		else if(!strcmp(inputtext, "Kaldýr", true))
		{
		    if(!BoomboxBilgi[playerid][boomboxKullanimda])
		        return HataMesaji(playerid, "Yerleþtirilmiþ müzik kutun bulunmuyor.");

			if(!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxBilgi[playerid][boomboxPos][0], BoomboxBilgi[playerid][boomboxPos][1], BoomboxBilgi[playerid][boomboxPos][2]))
			    return HataMesaji(playerid, "Müzik kutusunun yanýnda olmalýsýn.");

			Boombox_Kaldir(playerid);
			cmd_ame(playerid, "müzik kutusunu yerden alýr.");
		}
		else if(!strcmp(inputtext, "URL Deðiþtir", true))
		{
			DialogGoster(playerid, DIALOG_BOOMBOX_URL, DIALOG_STYLE_INPUT, "Boombox - URL Deðiþtir", "{FFFFFF}Lütfen yeni URL'yi aþaðýya giriniz.", "Tamam", "Kapat");
		}
 	}
 	else if(dialogid == DIALOG_BOOMBOX_URL) {
 	    if(!response) return false;
			if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_BOOMBOX_URL, DIALOG_STYLE_INPUT, "Boombox - URL Deðiþtir", "{B70000}HATA: {FFFFFF}Alaný boþ býrakamazsýn.\nLütfen yeni URL'yi aþaðýya giriniz.", "Tamam", "Kapat");

			if(!BoomboxBilgi[playerid][boomboxKullanimda]) return HataMesaji(playerid, "Yerleþtirilmiþ müzik kutun bulunmuyor.");
			if(strfind(inputtext, "http://") == -1 && strfind(inputtext, "https://") == -1) return DialogGoster(playerid, DIALOG_BOOMBOX_URL, DIALOG_STYLE_INPUT, "Boombox - URL Deðiþtir", "{B70000}HATA: {FFFFFF}Lütfen geçerli bir url girin.\nLütfen yeni URL'yi aþaðýya giriniz.", "Tamam", "Kapat");
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxBilgi[playerid][boomboxPos][0], BoomboxBilgi[playerid][boomboxPos][1], BoomboxBilgi[playerid][boomboxPos][2]))
				return HataMesaji(playerid, "Müzik kutusunun yanýnda olmalýsýn.");

			Boombox_URLAyarla(playerid, inputtext);
			cmd_ame(playerid, "müzik kutusunu baþka bir radyo istasyonuna çevirir.");
 	}
 	/*else if(dialogid == DIALOG_YARDIM) {
 	    if(!response) return false;
			if(!strcmp(inputtext, "Genel Roleplay Komutlarý", true))
			{
                new yoneticiyardim[2304];
				format(yoneticiyardim, sizeof(yoneticiyardim), "{046102}Genel Roleplay Komutlarý\n");
				strcat(yoneticiyardim, "{FFFFFF}/me (emote) /do (emote) /w (fýsýlda) /s (baðýr) /l (sessizce) /e (ev konuþma) /cc (chat temizle) /id (id bul) /karakter (karakter bilgileri)\n");
				strcat(yoneticiyardim, "{FFFFFF}/soyun (soyun) /wat (aksesuar tak) /dat (aksesuar çýkar) /cpsifirla (checkpoint reset) /zaman (payday süre)  /spec /posgit /soylenti\n");
				strcat(yoneticiyardim, "{FFFFFF}\n");
				strcat(yoneticiyardim, "{FFFFFF}\n");
				strcat(yoneticiyardim, "{FFFFFF}\n");
				strcat(yoneticiyardim, "{FFFFFF}\n");
				strcat(yoneticiyardim, "{FFFFFF}\n\n");
 	    	}
 	}*/
 	else if(dialogid == DIALOG_KARAKTERDETAY)
	{
	    if(!response) return cmd_durum(playerid, "");

		if(strlen(inputtext) < 64)
		{
			format(OyuncuBilgi[playerid][oKarakterDetay], 64, inputtext);
			SunucuMesaji(playerid, "Karakter detayý deðiþtirildi, doðrulamak için /gorunus komutunu kullanabilirsin.");
			OyuncuKaydet(playerid);
    	}
    	else DialogGoster(playerid, DIALOG_KARAKTERDETAY, DIALOG_STYLE_INPUT, "Karakter Dýþ Görünüþü", "{FF0000}HATA: {FFFFFF}En fazla 64 karakterden oluþabilir.;\nÖrnek: Üstünde bulunan kiyafetler kir içinde.", "Tamam", "Ýptal");
	}
	else if(dialogid == DIALOG_SACRENGI)
	{
	    if(!response) return cmd_durum(playerid, "");

		if(!strcmp(inputtext, "Siyah", true)) {
			OyuncuBilgi[playerid][oSacRengi] = 1;
			SunucuMesaji(playerid, "Saç rengi siyah olarak deðiþtirildi.");
		}
		if(!strcmp(inputtext, "Kahverengi", true)) {
			OyuncuBilgi[playerid][oSacRengi] = 2;
			SunucuMesaji(playerid, "Saç rengi kahverengi olarak deðiþtirildi.");
		}
		if(!strcmp(inputtext, "Kumral", true)) {
			OyuncuBilgi[playerid][oSacRengi] = 3;
			SunucuMesaji(playerid, "Saç rengi kumral olarak deðiþtirildi.");
		}
		if(!strcmp(inputtext, "Sarý", true)) {
			OyuncuBilgi[playerid][oSacRengi] = 4;
			SunucuMesaji(playerid, "Saç rengi sarý olarak deðiþtirildi.");
		}
		if(!strcmp(inputtext, "Kýzýl", true)) {
			OyuncuBilgi[playerid][oSacRengi] = 5;
			SunucuMesaji(playerid, "Saç rengi kýzýl olarak deðiþtirildi.");
		}
		if(!strcmp(inputtext, "Kestane", true)) {
			OyuncuBilgi[playerid][oSacRengi] = 6;
			SunucuMesaji(playerid, "Saç rengi kestane olarak deðiþtirildi.");
		}
		if(!strcmp(inputtext, "Buzul Sarý", true)) {
			OyuncuBilgi[playerid][oSacRengi] = 7;
			SunucuMesaji(playerid, "Saç rengi buzul sarý olarak deðiþtirildi.");
		}
		if(!strcmp(inputtext, "Turuncu", true)) {
			OyuncuBilgi[playerid][oSacRengi] = 8;
			SunucuMesaji(playerid, "Saç rengi turuncu olarak deðiþtirildi.");
		}
		OyuncuKaydet(playerid);
	}
	else if(dialogid == DIALOG_GOZRENGI)
	{
	    if(!response) return cmd_durum(playerid, "");

		if(!strcmp(inputtext, "Açýk Kahverengi", true)) {
			OyuncuBilgi[playerid][oGozRengi] = 1;
			SunucuMesaji(playerid, "Göz rengi açýk kahverengi olarak deðiþtirildi.");
		}
		if(!strcmp(inputtext, "Kahverengi", true)) {
			OyuncuBilgi[playerid][oGozRengi] = 2;
			SunucuMesaji(playerid, "Göz rengi kahverengi olarak deðiþtirildi.");
		}
		if(!strcmp(inputtext, "Koyu Kahverengi", true)) {
			OyuncuBilgi[playerid][oGozRengi] = 3;
			SunucuMesaji(playerid, "Göz rengi koyu kahverengi olarak deðiþtirildi.");
		}
		if(!strcmp(inputtext, "Maviý", true)) {
			OyuncuBilgi[playerid][oGozRengi] = 4;
			SunucuMesaji(playerid, "Göz rengi mavi olarak deðiþtirildi.");
		}
		if(!strcmp(inputtext, "Yeþil", true)) {
			OyuncuBilgi[playerid][oGozRengi] = 5;
			SunucuMesaji(playerid, "Göz rengi yeþil olarak deðiþtirildi.");
		}
		if(!strcmp(inputtext, "Ela", true)) {
			OyuncuBilgi[playerid][oGozRengi] = 6;
			SunucuMesaji(playerid, "Göz rengi ela olarak deðiþtirildi.");
		}
		if(!strcmp(inputtext, "Kehribar", true)) {
			OyuncuBilgi[playerid][oGozRengi] = 7;
			SunucuMesaji(playerid, "Göz rengi kehribar olarak deðiþtirildi.");
		}
		if(!strcmp(inputtext, "Gri", true)) {
			OyuncuBilgi[playerid][oGozRengi] = 8;
			SunucuMesaji(playerid, "Göz rengi gri olarak deðiþtirildi.");
		}
		OyuncuKaydet(playerid);
	}
 	else if(dialogid == DIALOG_KARAKTERGORUNUS) {
 	    if(!response) return false;

		 if(!strcmp(inputtext, "Göz Rengi", true))
		 {
            DialogGoster(playerid, DIALOG_GOZRENGI, DIALOG_STYLE_LIST, "Karakter Göz Rengi", "\nAçýk Kahverengi\nKahverengi\nKoyu Kahverengi\nMavi\nYeþil\nEla\nKehribar\nGri", "Seç", "Kapat");
		 }
		 if(!strcmp(inputtext, "Saç Rengi", true))
		 {
            DialogGoster(playerid, DIALOG_SACRENGI, DIALOG_STYLE_LIST, "Karakter Saç Rengi", "\nSiyah\nKahverengi\nKumral\nSarý\nKýzýl\nKestane\nBuzul Sarý\nTuruncu", "Seç", "Kapat");
		 }
		 if(!strcmp(inputtext, "Karakter Detayý", true))
		 {
            DialogGoster(playerid, DIALOG_KARAKTERDETAY, DIALOG_STYLE_INPUT, "Karakter Dýþ Görünüþü", "{FFFFFF}Yeni karakter dýþ görünüþünüzü yazýn;\nÖrnek: Üstünde bulunan kiyafetler kir içinde.", "Tamam", "Ýptal");
		 }
	}
 	else if(dialogid == DIALOG_AYARLAR) {
 	    if(!response) return false;

		 if(!strcmp(inputtext, "PM Durum", true)) {
			switch(OyuncuBilgi[playerid][oPMDurum]) {
				case false: OyuncuBilgi[playerid][oPMDurum] = true, cmd_ayarlar(playerid, inputtext);
				case true: OyuncuBilgi[playerid][oPMDurum] = false, cmd_ayarlar(playerid, inputtext);
			}
 	    }
 	    else if(!strcmp(inputtext, "PM Ýzleme", true)) {
			switch(OyuncuBilgi[playerid][oPMIzlemeDurum]) {
				case false: OyuncuBilgi[playerid][oPMIzlemeDurum] = true, cmd_ayarlar(playerid, inputtext);
				case true: OyuncuBilgi[playerid][oPMIzlemeDurum] = false, cmd_ayarlar(playerid, inputtext);
			}
		}
 	    else if(!strcmp(inputtext, "Spec Ýzin", true)) {
			switch(OyuncuBilgi[playerid][oSpecDurum]) {
				case false: OyuncuBilgi[playerid][oSpecDurum] = true, cmd_ayarlar(playerid, inputtext);
				case true: OyuncuBilgi[playerid][oSpecDurum] = false, cmd_ayarlar(playerid, inputtext);
			}
		}
		else if(!strcmp(inputtext, "Hile Kontrol", true)) {
			switch(OyuncuBilgi[playerid][oHileKontrol]) {
				case false: OyuncuBilgi[playerid][oHileKontrol] = true, cmd_ayarlar(playerid, inputtext);
				case true: OyuncuBilgi[playerid][oHileKontrol] = false, cmd_ayarlar(playerid, inputtext);
			}
		}
 	    else if(!strcmp(inputtext, "Boombox Dinle", true)) {
			switch(OyuncuBilgi[playerid][oBoomboxDurum]) {
				case false: OyuncuBilgi[playerid][oBoomboxDurum] = true, cmd_ayarlar(playerid, inputtext);
				case true: {
				    if(OyuncuBilgi[playerid][oBoombox] != INVALID_PLAYER_ID) OyuncuBilgi[playerid][oBoombox] = INVALID_PLAYER_ID, StopAudioStreamForPlayer(playerid);
					OyuncuBilgi[playerid][oBoomboxDurum] = false, cmd_ayarlar(playerid, inputtext);
				}
			}
		}
 	    else if(!strcmp(inputtext, "Birlik Sohbeti", true)) {
			switch(OyuncuBilgi[playerid][oBirlikKanal]) {
				case false: OyuncuBilgi[playerid][oBirlikKanal] = true, cmd_ayarlar(playerid, inputtext);
				case true: OyuncuBilgi[playerid][oBirlikKanal] = false, cmd_ayarlar(playerid, inputtext);
			}
		}
 	    else if(!strcmp(inputtext, "Soru Bildirimi", true)) {
			switch(OyuncuBilgi[playerid][oSoruGoruntule]) {
				case false: OyuncuBilgi[playerid][oSoruGoruntule] = true, cmd_ayarlar(playerid, inputtext);
				case true: OyuncuBilgi[playerid][oSoruGoruntule] = false, cmd_ayarlar(playerid, inputtext);
			}
		}
		else if(!strcmp(inputtext, "Ceza Bildirimleri", true)) {
			switch(OyuncuBilgi[playerid][oCezaDurum]) {
				case false: OyuncuBilgi[playerid][oCezaDurum] = true, cmd_ayarlar(playerid, inputtext);
				case true: OyuncuBilgi[playerid][oCezaDurum] = false, cmd_ayarlar(playerid, inputtext);
			}
		}
		else if(!strcmp(inputtext, "Reklam Bildirimleri", true)) {
			switch(OyuncuBilgi[playerid][oCezaDurum]) {
				case false: OyuncuBilgi[playerid][oReklamDurum] = true, cmd_ayarlar(playerid, inputtext);
				case true: OyuncuBilgi[playerid][oReklamDurum] = false, cmd_ayarlar(playerid, inputtext);
			}
		}
 	    else if(!strcmp(inputtext, "Rapor Bildirimi", true)) {
			switch(OyuncuBilgi[playerid][oRaporGoruntule]) {
				case false: OyuncuBilgi[playerid][oRaporGoruntule] = true, cmd_ayarlar(playerid, inputtext);
				case true: OyuncuBilgi[playerid][oRaporGoruntule] = false, cmd_ayarlar(playerid, inputtext);
			}
		}
		else if(!strcmp(inputtext, "Destek Sohbet", true)) {
		    switch(OyuncuBilgi[playerid][oDestekSohbet]) {
		        case false: OyuncuBilgi[playerid][oDestekSohbet] = true, cmd_ayarlar(playerid, inputtext);
		        case true: OyuncuBilgi[playerid][oDestekSohbet] = false, cmd_ayarlar(playerid, inputtext);
		    }
		}
		else if(!strcmp(inputtext, "Otomatik Konuþma Animasyonu", true)) {
		    switch(OyuncuBilgi[playerid][oKonusmaAnim]) {
		        case false: OyuncuBilgi[playerid][oKonusmaAnim] = true, cmd_ayarlar(playerid, inputtext);
		        case true: OyuncuBilgi[playerid][oKonusmaAnim] = false, cmd_ayarlar(playerid, inputtext);
		    }
		}
		else if(!strcmp(inputtext, "Hediye Al", true)) {
		    if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýndayken hediye alamazsýn.");
			if(OyuncuBilgi[playerid][oHediye] < 5) return HataMesaji(playerid, "Hediye alýnabilir durumda deðil. (%d/5 maaþ kaldý)", OyuncuBilgi[playerid][oHediye]);

			//new kazanc = randomEx(1, 5);
			SunucuMesaji(playerid, "Hediye sisteminden 2VP kazandýn. Kullanmak için /vmarket'i inceleyebilirsin.");
			OyuncuBilgi[playerid][oVPoint] += 2;
			OyuncuBilgi[playerid][oHediye] = 0;
			OyuncuKaydet(playerid);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s hediye sisteminden 2VP kazandý.", Tarih());
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/hediye_log.txt", "%s", log_icerik);
		}
		else if(!strcmp(inputtext, "Bildirimler", true)) {
			if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu seçeneði kullanamazsýn.");
			return BildirimListesi(playerid);
		}
		else if(!strcmp(inputtext, "Referans", true)) {
			if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu seçeneði kullanamazsýn.");
			if(OyuncuBilgi[playerid][oOynamaSaati] < 8) return HataMesaji(playerid, "Referans sistemini kullanmak için en az 8 oynama saatine ihtiyacýn var."), cmd_ayarlar(playerid, inputtext);
			if(!isnull(OyuncuBilgi[playerid][oReferans])) return HataMesaji(playerid, "Hesabýna zaten bir referans belirlemiþsin."), cmd_ayarlar(playerid, inputtext);
			
			return DialogGoster(playerid, DIALOG_REFERANS, DIALOG_STYLE_INPUT, "Referans Sistemi", "{FFFFFF}Lütfen size referans olan kiþinin bir karakter adýný giriniz;", "Seç", "Kapat");
		}
 	}
 	else if(dialogid == DIALOG_ARIZATAMIR) {
 	    if(!response) return false;
        new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
		 if(!strcmp(inputtext, "Marþ Motoru", true)) {
		 if(AracBilgi[aracid][aracArizaTur] == 1) {
		 OyuncuBilgi[playerid][oArizaTamirSure] = ARAC_ARIZATAMIR_SURE;
		 ParaEkle(playerid, -ARIZA_MARSMOTORU_UCRET);
		 SunucuMesaji(playerid, "Aracý $%d karþýlýðýnda tamir etmeye baþladýn.", ARIZA_MARSMOTORU_UCRET);
		 OyuncuBilgi[playerid][oArizaliArac] = aracid;
		 }
		 else {
		 SunucuMesaji(playerid, "Yanlýþ arýza tespiti yaptýn. Paran boþa gitti, yeni ipucular araþtýrýn.", ARIZA_MARSMOTORU_UCRET);
		 OyuncuBilgi[playerid][oArizaTamirDelay] = gettime() + 45;
		 ParaEkle(playerid, -ARIZA_MARSMOTORU_UCRET);
		 OyuncuKaydet(playerid);
		 }
		 }
		 if(!strcmp(inputtext, "Yakýt Pompasý", true)) {
		 if(AracBilgi[aracid][aracArizaTur] == 2) {
		 OyuncuBilgi[playerid][oArizaTamirSure] = ARAC_ARIZATAMIR_SURE;
		 ParaEkle(playerid, -ARIZA_YAKITPOMPASI_UCRET);
		 SunucuMesaji(playerid, "Aracý $%d karþýlýðýnda tamir etmeye baþladýn.", ARIZA_YAKITPOMPASI_UCRET);
		 OyuncuBilgi[playerid][oArizaliArac] = aracid;
		 }
		 else {
		 SunucuMesaji(playerid, "Yanlýþ arýza tespiti yaptýn. Paran boþa gitti, yeni ipucular araþtýrýn.", ARIZA_YAKITPOMPASI_UCRET);
		 OyuncuBilgi[playerid][oArizaTamirDelay] = gettime() + 45;
		 ParaEkle(playerid, -ARIZA_YAKITPOMPASI_UCRET);
		 OyuncuKaydet(playerid);
		 }
		 }
		 if(!strcmp(inputtext, "Yað Pompasý", true)) {
		 if(AracBilgi[aracid][aracArizaTur] == 3) {
		 OyuncuBilgi[playerid][oArizaTamirSure] = ARAC_ARIZATAMIR_SURE;
		 ParaEkle(playerid, -ARIZA_YAGPOMPASI_UCRET);
		 SunucuMesaji(playerid, "Aracý $%d karþýlýðýnda tamir etmeye baþladýn.", ARIZA_YAGPOMPASI_UCRET);
		 OyuncuBilgi[playerid][oArizaliArac] = aracid;
		 }
		 else {
		 SunucuMesaji(playerid, "Yanlýþ arýza tespiti yaptýn. Paran boþa gitti, yeni ipucular araþtýrýn.", ARIZA_YAGPOMPASI_UCRET);
		 OyuncuBilgi[playerid][oArizaTamirDelay] = gettime() + 45;
		 ParaEkle(playerid, -ARIZA_YAGPOMPASI_UCRET);
		 OyuncuKaydet(playerid);
		 }
		 }
		 if(!strcmp(inputtext, "Motor Beyni", true)) {
		 if(AracBilgi[aracid][aracArizaTur] == 4) {
		 OyuncuBilgi[playerid][oArizaTamirSure] = ARAC_ARIZATAMIR_SURE;
		 ParaEkle(playerid, -ARIZA_MOTORBEYNI_UCRET);
		 SunucuMesaji(playerid, "Aracý $%d karþýlýðýnda tamir etmeye baþladýn.", ARIZA_MOTORBEYNI_UCRET);
		 OyuncuBilgi[playerid][oArizaliArac] = aracid;
		 }
		 else {
		 SunucuMesaji(playerid, "Yanlýþ arýza tespiti yaptýn. Paran boþa gitti, yeni ipucular araþtýrýn.", ARIZA_MOTORBEYNI_UCRET);
		 OyuncuBilgi[playerid][oArizaTamirDelay] = gettime() + 45;
		 ParaEkle(playerid, -ARIZA_MOTORBEYNI_UCRET);
		 OyuncuKaydet(playerid);
		 }
		 }
		 if(!strcmp(inputtext, "Buji", true)) {
		 if(AracBilgi[aracid][aracArizaTur] == 5) {
		 OyuncuBilgi[playerid][oArizaTamirSure] = ARAC_ARIZATAMIR_SURE;
		 ParaEkle(playerid, -ARIZA_BUJI_UCRET);
		 SunucuMesaji(playerid, "Aracý $%d karþýlýðýnda tamir etmeye baþladýn.", ARIZA_BUJI_UCRET);
		 OyuncuBilgi[playerid][oArizaliArac] = aracid;
		 }
		 else {
		 SunucuMesaji(playerid, "Yanlýþ arýza tespiti yaptýn. Paran boþa gitti, yeni ipucular araþtýrýn.", ARIZA_BUJI_UCRET);
		 OyuncuBilgi[playerid][oArizaTamirDelay] = gettime() + 45;
		 ParaEkle(playerid, -ARIZA_BUJI_UCRET);
		 OyuncuKaydet(playerid);
		 }
		 }
		 if(!strcmp(inputtext, "Diferansiyel", true)) {
		 if(AracBilgi[aracid][aracArizaTur] == 6) {
		 OyuncuBilgi[playerid][oArizaTamirSure] = ARAC_ARIZATAMIR_SURE;
		 ParaEkle(playerid, -ARIZA_DIFERANSIYEL_UCRET);
		 SunucuMesaji(playerid, "Aracý $%d karþýlýðýnda tamir etmeye baþladýn.", ARIZA_DIFERANSIYEL_UCRET);
		 OyuncuBilgi[playerid][oArizaliArac] = aracid;
		 }
		 else {
		 SunucuMesaji(playerid, "Yanlýþ arýza tespiti yaptýn. Paran boþa gitti, yeni ipucular araþtýrýn.", ARIZA_DIFERANSIYEL_UCRET);
		 OyuncuBilgi[playerid][oArizaTamirDelay] = gettime() + 45;
		 ParaEkle(playerid, -ARIZA_DIFERANSIYEL_UCRET);
		 OyuncuKaydet(playerid);
		 }
		 }
	}
 	else if(dialogid == DIALOG_REFERANS) {
 	    if(!response) return cmd_ayarlar(playerid, "");
		if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu seçeneði kullanamazsýn.");
		if(OyuncuBilgi[playerid][oOynamaSaati] < 8) return HataMesaji(playerid, "Referans sistemini kullanmak için en az 8 oynama saatine ihtiyacýn var."), cmd_ayarlar(playerid, inputtext);
		if(!isnull(OyuncuBilgi[playerid][oReferans])) return HataMesaji(playerid, "Hesabýna zaten bir referans belirlemiþsin."), cmd_ayarlar(playerid, inputtext);
		if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_REFERANS, DIALOG_STYLE_INPUT, "Referans Sistemi", "{B70000}HATA: {FFFFFF}Bu satýrý boþ býrakamazsýnýz.\n\n{FFFFFF}Lütfen size referans olan kiþinin bir karakter adýný giriniz;", "Seç", "Kapat");

		new sorgu[256], Cache:sorgu_cache, hesapid = 0;
		format(sorgu, sizeof(sorgu), "SELECT `hesap` FROM `oyuncular` WHERE `isim` = '%s'", SQL_ReturnEscaped(inputtext));
		sorgu_cache = mysql_query(mysqlB, sorgu);
		if(cache_num_rows()) hesapid = vericek_int(0, "hesap");
		cache_delete(sorgu_cache);
		if(hesapid == 0) return DialogGoster(playerid, DIALOG_REFERANS, DIALOG_STYLE_INPUT, "Referans Sistemi", "{B70000}HATA: {FFFFFF}Oyuncu bulunamadý, doðru girdiðinizden emin olun.\n\n{FFFFFF}Lütfen size referans olan kiþinin bir karakter adýný giriniz;", "Seç", "Kapat");
        if(hesapid == OyuncuBilgi[playerid][oHesap]) return DialogGoster(playerid, DIALOG_REFERANS, DIALOG_STYLE_INPUT, "Referans Sistemi", "{B70000}HATA: {FFFFFF}Kendinizi referans olarak belirleyemezsiniz.\n\n{FFFFFF}Lütfen size referans olan kiþinin bir karakter adýný giriniz;", "Seç", "Kapat");

		foreach(new i : Player) if(hesapid == OyuncuBilgi[i][oHesap] && i != playerid) {
			OyuncuBilgi[i][oOneriJetonu] += 1;
			SunucuMesaji(i, "%s adlý kiþi sizi referans seçtiði için 1 öneri jetonu kazandýnýz.", OyuncuIsim(playerid));
			SunucuMesaji(playerid, "Referansýnýza öneri jetonu hediye edildi, iyi oyunlar.");
			format(OyuncuBilgi[playerid][oReferans], MAX_PLAYER_NAME, "%s", inputtext);
			OyuncuKaydet(i);
			OyuncuKaydet(playerid);
			return 1;
		}
	    format(sorgu, sizeof(sorgu), "UPDATE `hesaplar` SET `OneriJetonu` = `OneriJetonu`+1 WHERE `forumID` = '%d'", hesapid);
		mysql_query(mysqlB, sorgu);
		SunucuMesaji(playerid, "Referansýnýza offline olarak öneri jetonu hediye edildi, iyi oyunlar.");
		format(OyuncuBilgi[playerid][oReferans], MAX_PLAYER_NAME, "%s", inputtext);
		OyuncuKaydet(playerid);
 	}
 	else if(dialogid == DIALOG_DEKORLAR) {
 	    if(!response) return 0;

 	    new id = strval(inputtext);
 	    if(EvBilgi[id][evTur] == 5) return HataMesaji(playerid, "Bu evin dekoru deðiþtirilemez.");
 	    if(Mobilya_Sayi(id) > 0) return HataMesaji(playerid, "Evinde mobilya varken dekoru deðiþtirilemez.");
 	    if(Raf_Sayi(id, 1) > 0) return HataMesaji(playerid, "Evinde mobilya varken dekoru deðiþtirilemez.");
		SetPVarInt(playerid, "Dekor_Ev", id);
		new mesaj[144 * MAKSIMUM_DEKOR], sayi = 0, dekorucret[64];
		for(new i = 0; i != MAKSIMUM_DEKOR; i ++) if(DekorListesi[i][dekorKullanimda] && DekorListesi[i][dekorTur] == EvBilgi[id][evTur]) {
		    switch(DekorListesi[i][dekorOOC]) {
				case 1: format(dekorucret, sizeof(dekorucret), "%sTL", NumaraFormati(DekorListesi[i][dekorUcret], ""));
				default: format(dekorucret, sizeof(dekorucret), "%s", NumaraFormati(DekorListesi[i][dekorUcret]));
			}
		    format(mesaj, sizeof(mesaj), "%s%s\t%s\n", mesaj, DekorListesi[i][dekorIsim], dekorucret), sayi++;
		}
		if(!sayi) return HataMesaji(playerid, "Ev türünüze uygun dekor eklenmemiþ.");
		DialogGoster(playerid, DIALOG_DEKORSECIM, DIALOG_STYLE_TABLIST, "Dekor - Seçim", mesaj, "Seç", "Kapat");
 	}
 	else if(dialogid == DIALOG_DEKORSECIM) {
 	    if(!response) return 0;

 	    for(new i = 0; i != MAKSIMUM_DEKOR; i ++) if(DekorListesi[i][dekorKullanimda] && !strcmp(inputtext, DekorListesi[i][dekorIsim], true)) { SetPVarInt(playerid, "Dekor_Secilen", i); break; }
 	    DialogGoster(playerid, DIALOG_DEKORSECIM_ISLEM, DIALOG_STYLE_TABLIST, "Dekor - Seçim", "Önizleme\nEve Uygula", "Seç", "Kapat");
 	}
 	else if(dialogid == DIALOG_DEKORSECIM_ISLEM) {
 	    if(!response) return 0;
 	    new dekorid = GetPVarInt(playerid, "Dekor_Secilen");

 	    if(!strcmp(inputtext, "Önizleme", true)) {
			EskiVeriler[playerid][eskiVW] = GetPlayerVirtualWorld(playerid);
            EskiVeriler[playerid][eskiInt] = GetPlayerInterior(playerid);
            GetPlayerPos(playerid, EskiVeriler[playerid][eskiPos][0], EskiVeriler[playerid][eskiPos][1], EskiVeriler[playerid][eskiPos][2]);
            GetPlayerFacingAngle(playerid, EskiVeriler[playerid][eskiPos][3]);
            cmd_ame(playerid, "dekorlara bakýnýyor.");
            OyuncuPosDegistir(playerid, DekorListesi[dekorid][dekorPos][0], DekorListesi[dekorid][dekorPos][1], DekorListesi[dekorid][dekorPos][2]);
            SetPlayerFacingAngle(playerid, DekorListesi[dekorid][dekorPos][3]);
            SetPlayerInterior(playerid, DekorListesi[dekorid][dekorInterior]);
			DondurulmaEtkisi(playerid);
			OyuncuBilgi[playerid][oDekorSure] = 30;
			return SunucuMesaji(playerid, "Önizlemeye baþladýnýz, 30 saniye sürecek.");
 	    }
 	    else if(!strcmp(inputtext, "Eve Uygula", true)) {
 	    	switch(DekorListesi[dekorid][dekorOOC]) {
				case 1: if(BakiyeKontrol(playerid) < DekorListesi[dekorid][dekorUcret]) return HataMesaji(playerid, "Bu dekor için yeterli ücreti(%sTL) karþýlayamýyorsun.", NumaraFormati(DekorListesi[dekorid][dekorUcret], ""));
 	        	default: if(OyuncuBilgi[playerid][oPara] < DekorListesi[dekorid][dekorUcret]) return HataMesaji(playerid, "Bu dekor için yeterli ücreti(%s) karþýlayamýyorsun.", NumaraFormati(DekorListesi[dekorid][dekorUcret]));
			}
 	        new id = GetPVarInt(playerid, "Dekor_Ev");
 	        foreach(new i : Player) if(IsPlayerConnected(i) && Oyuncu_Evde(i) == id) {
				OyuncuPosDegistir(i, EvBilgi[id][evPos][0], EvBilgi[id][evPos][1], EvBilgi[id][evPos][2]);
				SetPlayerFacingAngle(i, EvBilgi[id][evPos][3] - 180.0);
		        DondurulmaEtkisi(playerid);
				SetPlayerInterior(i, EvBilgi[id][evDisInt]);
				SetPlayerVirtualWorld(i, EvBilgi[id][evDisVW]);
	            PlayerTextDrawHide(i, LambaText[playerid]);
				SetCameraBehindPlayer(playerid);
				SunucuMesaji(playerid, "Ýçinde olduðunuz evin dekor deðiþtirme iþlemi baþladýðý için evden atýldýn.");
 	        }
			EvBilgi[id][evIcPos][0] = DekorListesi[dekorid][dekorPos][0];
			EvBilgi[id][evIcPos][1] = DekorListesi[dekorid][dekorPos][1];
			EvBilgi[id][evIcPos][2] = DekorListesi[dekorid][dekorPos][2];
			EvBilgi[id][evIcPos][3] = DekorListesi[dekorid][dekorPos][3];
			EvBilgi[id][evInterior] = DekorListesi[dekorid][dekorInterior];
			if(DekorListesi[dekorid][dekorOOC] == 1) BakiyeKes(playerid, DekorListesi[dekorid][dekorUcret]);
			else ParaEkle(playerid, -DekorListesi[dekorid][dekorUcret]);
			EvBilgi[id][evDurum] = 3;
			EvBilgi[id][evBakimSure] = 60;
			Ev_Yenile(id);
			Ev_Kaydet(id);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s evine bir dekor satýn aldý. (EVSQL: %d | SID: %d)", Tarih(), oyuncu_isim, EvBilgi[id][evID], DekorListesi[dekorid][dekorID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/dekor.txt", "%s", log_icerik);
			SunucuMesaji(playerid, "Dekor evinize yapýlmaya baþlandý, 60 dakika sürecek.");
 	    }
 	}
 	else if(dialogid == DIALOG_BASLANGICPOS_SEC) {
		for(new i = 0; i != MAKSIMUM_BASLANGICPOS; i ++) if(BaslangicPoslari[i][posKullanimda] && !strcmp(inputtext, BaslangicPoslari[i][pos_adi], true)) {
			OyuncuBilgi[playerid][oPos][0] = BaslangicPoslari[i][baslangic_pos][0];
			OyuncuBilgi[playerid][oPos][1] = BaslangicPoslari[i][baslangic_pos][1];
			OyuncuBilgi[playerid][oPos][2] = BaslangicPoslari[i][baslangic_pos][2];
			OyuncuBilgi[playerid][oPos][3] = BaslangicPoslari[i][baslangic_pos][3];
			SetSpawnInfo(playerid, 0, OyuncuBilgi[playerid][oKiyafet], OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2], OyuncuBilgi[playerid][oPos][3], 0, 0, 0, 0, 0, 0);
			TogglePlayerSpectating(playerid, false);
			SpawnPlayer(playerid);
			OyuncuPosDegistir(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
			SetPlayerVirtualWorld(playerid, BaslangicPoslari[i][baslangic_vw]);
			SetPlayerInterior(playerid, BaslangicPoslari[i][baslangic_int]);
			DondurulmaEtkisi(playerid);
			return 1;
		}
		HataMesaji(playerid, "Bir sorun oluþtu.");
 	}
 	else if(dialogid == DIALOG_BASLANGICPOSLARI) {
 	    if(!response) return 0;

 	    if(!strcmp(inputtext, "Pos Ekle", true)) {
		 	DialogGoster(playerid, DIALOG_BASLANGIC_POSEKLE, DIALOG_STYLE_INPUT, "Baþlangýç Posu Ekleme", "{FFFFFF}Lütfen eklemek istediðiniz baþlangýç pozisyonuna bir isim verin;", "Tamam", "Kapat");
			return 1;
		}
		for(new i = 0; i != MAKSIMUM_BASLANGICPOS; i ++) if(BaslangicPoslari[i][posKullanimda] && !strcmp(inputtext, BaslangicPoslari[i][pos_adi], true)) {
			DialogGoster(playerid, DIALOG_BASLANGIC_DUZENLE, DIALOG_STYLE_LIST, "Baþlangýç Pos - Düzenle", "Posa Iþýnlan\nÝsim Deðiþtir\nPos Kaldýr", "Seç", "<< Geri");
			return OyuncuBilgi[playerid][oKonum] = i;
		}
		HataMesaji(playerid, "Bir problem oluþtu."), cmd_apos(playerid, inputtext), OyuncuBilgi[playerid][oKonum] = -1;
	}
	else if(dialogid == DIALOG_BASLANGIC_DUZENLE) {
		if(!response) return cmd_apos(playerid, inputtext), OyuncuBilgi[playerid][oKonum] = -1;
		new id = OyuncuBilgi[playerid][oKonum];

		if(!strcmp(inputtext, "Ýsim Deðiþtir", true)) return DialogGoster(playerid, DIALOG_BASLANGIC_ISIM, DIALOG_STYLE_INPUT, "Baþlangýç Pos - Ýsim Deðiþtir", "{FFFFFF}Lütfen deðiþtirmek istediðiniz baþlangýç pozisyonuna yeni bir isim verin;", "Tamam", "Kapat");
		else if(!strcmp(inputtext, "Konum Deðiþtir", true)) {
			GetPlayerPos(playerid, BaslangicPoslari[id][baslangic_pos][0], BaslangicPoslari[id][baslangic_pos][1], BaslangicPoslari[id][baslangic_pos][2]);
			GetPlayerFacingAngle(playerid, BaslangicPoslari[id][baslangic_pos][3]);
			BaslangicPoslari[id][baslangic_int] = GetPlayerInterior(playerid);
			BaslangicPoslari[id][baslangic_vw] = GetPlayerVirtualWorld(playerid);
			
			BaslangicPos_Kaydet(id);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s baþlangýç pozisyonunu deðiþtirdi. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], BaslangicPoslari[id][posID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/bpos.txt", "%s", log_icerik);
			SunucuMesaji(playerid, "%s adlý baþlangýç pozisyonu güncellendi.", BaslangicPoslari[id][pos_adi]);
			OyuncuBilgi[playerid][oKonum] = -1;
		}
		else if(!strcmp(inputtext, "Posa Iþýnlan", true)) {
            OyuncuPosDegistir(playerid, BaslangicPoslari[id][baslangic_pos][0], BaslangicPoslari[id][baslangic_pos][1], BaslangicPoslari[id][baslangic_pos][2]);
            SetPlayerFacingAngle(playerid, BaslangicPoslari[id][baslangic_pos][3]);
            SetPlayerInterior(playerid, BaslangicPoslari[id][baslangic_int]);
            SetPlayerVirtualWorld(playerid, BaslangicPoslari[id][baslangic_vw]);
            SunucuMesaji(playerid, "\"%s\" adlý baþlangýç pozisyonuna ýþýnlandýn.", BaslangicPoslari[id][pos_adi]);
			DondurulmaEtkisi(playerid);
			OyuncuBilgi[playerid][oKonum] = -1;
		}
		else if(!strcmp(inputtext, "Pos Kaldýr", true)) {
		    SunucuMesaji(playerid, "%s adlý pos silindi.", BaslangicPoslari[id][pos_adi]);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s baþlangýç posunu silindi. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], BaslangicPoslari[id][posID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/bpos.txt", "%s", log_icerik);
			BaslangicPos_Kaldir(id);
			OyuncuBilgi[playerid][oKonum] = -1;
		}
	}
	else if(dialogid == DIALOG_BASLANGIC_POSEKLE) {
		if(!response) return 0;

 	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_BASLANGIC_POSEKLE, DIALOG_STYLE_INPUT, "Baþlangýç Posu Ekleme", "{FFFFFF}Lütfen eklemek istediðiniz baþlangýç pozisyonuna bir isim verin;", "Tamam", "Kapat");

		new id = -1;
		id = BaslangicPos_Ekle(playerid, inputtext);

		if(id == -1) return HataMesaji(playerid, "Pos limitine ulaþýldýðý için yeni pos eklenemiyor.");
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s sunucuya bir pos ekledi. (SID: %d - Ýsim: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], BaslangicPoslari[id][posID], inputtext);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/bpos.txt", "%s", log_icerik);
		SunucuMesaji(playerid, "Baþlangýç pozisyonu baþarýyla eklendi.");
	}
	else if(dialogid == DIALOG_BASLANGIC_ISIM) {
		if(!response) return 0;

 	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_BASLANGIC_ISIM, DIALOG_STYLE_INPUT, "Baþlangýç Pos - Ýsim Deðiþtir", "{FFFFFF}Lütfen deðiþtirmek istediðiniz baþlangýç pozisyonuna yeni bir isim verin;", "Tamam", "Kapat");

		new id = OyuncuBilgi[playerid][oKonum];
		format(BaslangicPoslari[id][pos_adi], 64, "%s", inputtext);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s baþlangýç posunun deðiþtirdi. (SID: %d - Ýsim: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], BaslangicPoslari[id][posID], BaslangicPoslari[id][pos_adi]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/bpos.txt", "%s", log_icerik);
		Dekor_Kaydet(id);
		SunucuMesaji(playerid, "Baþlangýç pozisyonunun adý deðiþtirildi.");
		OyuncuBilgi[playerid][oKonum] = -1;
	}
 	else if(dialogid == DIALOG_ADMIN_DEKORLAR) {
 	    if(!response) return 0;

 	    if(!strcmp(inputtext, "Dekor Ekle", true)) {
		 	DialogGoster(playerid, DIALOG_DEKOREKLE_TUR, DIALOG_STYLE_INPUT, "Dekor - Ekleme", "{FFFFFF}Lütfen eklemek istediðiniz dekorun türünü girin;", "Tamam", "Kapat");
			SendClientMessage(playerid, RENK_SARI, "[TURLER]:{FFFFFF} 0: Tek Kat, 1: Tek Kat - Geniþ, 2: Çift Kat, 3: Çift Kat - Geniþ, 4: Malikane, 6: Karavan");
			return 1;
		}
		for(new i = 0; i != MAKSIMUM_DEKOR; i ++) if(DekorListesi[i][dekorKullanimda] && !strcmp(inputtext, DekorListesi[i][dekorIsim], true)) {
			DialogGoster(playerid, DIALOG_DEKOR_DUZENLE, DIALOG_STYLE_LIST, "Dekor - Düzenle", "Dekora Iþýnlan\nÝsim Deðiþtir\nTür Deðiþtir\nKonum Deðiþtir\nÜcreti Düzenle\nOOC Satýþ Durumu\nDekoru Sil", "Seç", "<< Geri");
			return OyuncuBilgi[playerid][oKonum] = i;
		}
		HataMesaji(playerid, "Bir problem oluþtu."), cmd_adekor(playerid, inputtext), OyuncuBilgi[playerid][oKonum] = -1;
	}
 	else if(dialogid == DIALOG_DEKOREKLE_TUR) {
		if(!response) return 0;
		new tur;
 	    if(sscanf(inputtext, "d", tur)) {
		 	DialogGoster(playerid, DIALOG_DEKOR_TUR, DIALOG_STYLE_INPUT, "Dekor - Ekleme", "{FFFFFF}Lütfen eklemek istediðiniz dekorun türünü girin;", "Tamam", "Kapat");
			SendClientMessage(playerid, RENK_SARI, "[TURLER]:{FFFFFF} 0: Tek Kat, 1: Tek Kat - Geniþ, 2: Çift Kat, 3: Çift Kat - Geniþ, 4: Malikane, 6: Karavan");
			return 1;
		}
		if(tur < 0 || tur > 6) return DialogGoster(playerid, DIALOG_DEKOREKLE_TUR, DIALOG_STYLE_INPUT, "Dekor - Ekleme", "{B70000}HATA: {FFFFFF}Geçersiz tür belirlendi. (0-6)\n{FFFFFF}Lütfen eklemek istediðiniz dekorun türünü girin;", "Tamam", "Kapat");

		SetPVarInt(playerid, "Dekor_Tur", tur);
		DialogGoster(playerid, DIALOG_DEKOREKLE_ISIM, DIALOG_STYLE_INPUT, "Dekor - Ekleme", "{FFFFFF}Lütfen eklemek istediðiniz dekorun ismini girin;\n\n{B70000}UYARI: {FFFFFF}Dekor þu an olduðunuz lokasyona ve interiora eklenecektir.", "Tamam", "Kapat");
	}
 	else if(dialogid == DIALOG_DEKOREKLE_ISIM) {
		if(!response) return 0;

 	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_DEKOREKLE_ISIM, DIALOG_STYLE_INPUT, "Dekor - Ekleme", "{FFFFFF}Lütfen eklemek istediðiniz dekorun ismini girin;\n\n{B70000}UYARI: {FFFFFF}Dekor þu an olduðunuz lokasyona ve interiora eklenecektir.", "Tamam", "Kapat");

		new id = -1;
		id = Dekor_Ekle(playerid, inputtext, GetPVarInt(playerid, "Dekor_Tur"));

		if(id == -1) return HataMesaji(playerid, "Dekor limitine ulaþýldýðý için yeni dekor yaratýlamýyor.");
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s sunucuya bir dekor ekledi. (SID: %d - Ýsim: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], DekorListesi[id][dekorID], inputtext);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/dekor.txt", "%s", log_icerik);
		SunucuMesaji(playerid, "Dekor baþarýyla eklendi.");
	}
	else if(dialogid == DIALOG_DEKOR_DUZENLE) {
		if(!response) return cmd_adekor(playerid, inputtext), OyuncuBilgi[playerid][oKonum] = -1;
		new id = OyuncuBilgi[playerid][oKonum];

		if(!strcmp(inputtext, "Ýsim Deðiþtir", true)) return DialogGoster(playerid, DIALOG_DEKOR_ISIM, DIALOG_STYLE_INPUT, "Dekor - Ýsim Deðiþtir", "{FFFFFF}Lütfen yeni dekor ismini girin;", "Tamam", "Kapat");
		else if(!strcmp(inputtext, "Tür Deðiþtir", true)) {
			DialogGoster(playerid, DIALOG_DEKOR_TUR, DIALOG_STYLE_INPUT, "Dekor - Tür Deðiþtir", "{FFFFFF}Lütfen yeni dekor türünü girin;", "Tamam", "Kapat");
			SendClientMessage(playerid, RENK_SARI, "[TURLER]:{FFFFFF} 0: Tek Kat, 1: Tek Kat - Geniþ, 2: Çift Kat, 3: Çift Kat - Geniþ, 4: Malikane, 5: Sabit");
			return 1;
		}
		else if(!strcmp(inputtext, "Konum Deðiþtir", true)) {
			GetPlayerPos(playerid, DekorListesi[id][dekorPos][0], DekorListesi[id][dekorPos][1], DekorListesi[id][dekorPos][2]);
			GetPlayerFacingAngle(playerid, DekorListesi[id][dekorPos][3]);
			DekorListesi[id][dekorInterior] = GetPlayerInterior(playerid);
			Dekor_Kaydet(id);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s dekorun konumunu deðiþtirdi. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], DekorListesi[id][dekorID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/dekor.txt", "%s", log_icerik);
			SunucuMesaji(playerid, "%s adlý dekor güncellendi.", DekorListesi[id][dekorIsim]);
			OyuncuBilgi[playerid][oKonum] = -1;
		}
		else if(!strcmp(inputtext, "Ücreti Düzenle", true)) return DialogGoster(playerid, DIALOG_DEKOR_UCRET, DIALOG_STYLE_INPUT, "Dekor - Ücret Deðiþtir", "{FFFFFF}Lütfen yeni dekor ücretini girin;", "Tamam", "Kapat");
		else if(!strcmp(inputtext, "OOC Satýþ Durumu", true)) {
			switch(DekorListesi[id][dekorOOC]) {
				case 0: SunucuMesaji(playerid, "Dekor artýk market bakiyesiyle satýlýyor, ücretini düzenlemeyi unutmayýn."), DekorListesi[id][dekorOOC] = 1;
				case 1: SunucuMesaji(playerid, "Dekor artýk market bakiyesiyle satýlmýyor, ücretini $ formatýnda düzenlemeyi unutmayýn."), DekorListesi[id][dekorOOC] = 0;
				default: SunucuMesaji(playerid, "Dekor artýk market bakiyesiyle satýlmýyor, ücretini $ formatýnda düzenlemeyi unutmayýn."), DekorListesi[id][dekorOOC] = 0;
			}
			Dekor_Kaydet(id);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s dekorun satýþ durumunu deðiþtirdi. (SID: %d / %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], DekorListesi[id][dekorID], (DekorListesi[id][dekorOOC] == 0) ? ("Dolar") : ("OOC Para"));
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/dekor.txt", "%s", log_icerik);
			OyuncuBilgi[playerid][oKonum] = -1;
		}
		else if(!strcmp(inputtext, "Dekora Iþýnlan", true)) {
            OyuncuPosDegistir(playerid, DekorListesi[id][dekorPos][0], DekorListesi[id][dekorPos][1], DekorListesi[id][dekorPos][2]);
            SetPlayerFacingAngle(playerid, DekorListesi[id][dekorPos][3]);
            SetPlayerInterior(playerid, DekorListesi[id][dekorInterior]);
            SunucuMesaji(playerid, "\"%s\" adlý dekora ýþýnlandýn.", DekorListesi[id][dekorIsim]);
			DondurulmaEtkisi(playerid);
			OyuncuBilgi[playerid][oKonum] = -1;
		}
		else if(!strcmp(inputtext, "Dekoru Sil", true)) {
		    SunucuMesaji(playerid, "%s adlý dekor silindi.", DekorListesi[id][dekorIsim]);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s dekoru sildi. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], DekorListesi[id][dekorID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/dekor.txt", "%s", log_icerik);
			Dekor_Kaldir(id);
			OyuncuBilgi[playerid][oKonum] = -1;
		}
	}
 	else if(dialogid == DIALOG_DEKOR_ISIM) {
		if(!response) return 0;

 	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_DEKOR_ISIM, DIALOG_STYLE_INPUT, "Dekor - Ýsim Deðiþtir", "{FFFFFF}Lütfen yeni dekor ismini girin;", "Tamam", "Kapat");

		new id = OyuncuBilgi[playerid][oKonum];
		format(DekorListesi[id][dekorIsim], 64, "%s", inputtext);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s dekor ismi deðiþtirdi. (SID: %d - Ýsim: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], DekorListesi[id][dekorID], DekorListesi[id][dekorIsim]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/dekor.txt", "%s", log_icerik);
		Dekor_Kaydet(id);
		SunucuMesaji(playerid, "Dekorun ismi deðiþtirildi.");
		OyuncuBilgi[playerid][oKonum] = -1;
	}
 	else if(dialogid == DIALOG_DEKOR_UCRET) {
		if(!response) return 0;
		new id = OyuncuBilgi[playerid][oKonum], ucret;
		if(sscanf(inputtext, "d", ucret)) return DialogGoster(playerid, DIALOG_DEKOR_UCRET, DIALOG_STYLE_INPUT, "Dekor - Ücret Deðiþtir", "{FFFFFF}Lütfen yeni dekor ücretini girin;", "Tamam", "Kapat");
		if(ucret < 1) return DialogGoster(playerid, DIALOG_DEKOR_UCRET, DIALOG_STYLE_INPUT, "Dekor - Ücret Deðiþtir", "{B70000}HATA: {FFFFFF}Girilen ücret en az $1 olmalýdýr.\n{FFFFFF}Lütfen yeni dekor ücretini girin;", "Tamam", "Kapat");

		DekorListesi[id][dekorUcret] = ucret;
		Dekor_Kaydet(id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s dekorun satýþ ücretini deðiþtirdi. (SID: %d / %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], DekorListesi[id][dekorID], NumaraFormati(DekorListesi[id][dekorUcret]));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/dekor.txt", "%s", log_icerik);
		SunucuMesaji(playerid, "Dekorun ücreti deðiþtirildi.");
		OyuncuBilgi[playerid][oKonum] = -1;
	}
 	else if(dialogid == DIALOG_DEKOR_TUR) {
		if(!response) return 0;
		new id = OyuncuBilgi[playerid][oKonum], tur;
		if(sscanf(inputtext, "d", tur)) {
			DialogGoster(playerid, DIALOG_DEKOR_TUR, DIALOG_STYLE_INPUT, "Dekor - Tür Deðiþtir", "{FFFFFF}Lütfen yeni dekor türünü girin;", "Tamam", "Kapat");
			SendClientMessage(playerid, RENK_SARI, "[TURLER]:{FFFFFF} 0: Tek Kat, 1: Tek Kat - Geniþ, 2: Çift Kat, 3: Çift Kat - Geniþ, 4: Malikane, 5: Sabit");
			return 1;
		}
		if(tur < 0 || tur > 5) {
			DialogGoster(playerid, DIALOG_DEKOR_TUR, DIALOG_STYLE_INPUT, "Dekor - Ekleme", "{B70000}HATA: {FFFFFF}Geçersiz tür belirlendi. (0-5)\n{FFFFFF}Lütfen yeni dekor türünü girin;", "Tamam", "Kapat");
			SendClientMessage(playerid, RENK_SARI, "[TURLER]:{FFFFFF} 0: Tek Kat, 1: Tek Kat - Geniþ, 2: Çift Kat, 3: Çift Kat - Geniþ, 4: Malikane, 5: Sabit");
			return 1;
		}

		DekorListesi[id][dekorTur] = tur;
		Dekor_Kaydet(id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s dekorun türünü deðiþtirdi. (SID: %d / %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], DekorListesi[id][dekorID], tur);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/dekor.txt", "%s", log_icerik);
		SunucuMesaji(playerid, "Dekorun türü deðiþtirildi.");
		OyuncuBilgi[playerid][oKonum] = -1;
	}
 	else if(dialogid == DIALOG_ADMIN_CCTV) {
 	    if(!response) return 0;

 	    if(!strcmp(inputtext, "Konum Ekle", true)) {
 	        if(GetPlayerVirtualWorld(playerid) > 0 || GetPlayerInterior(playerid) > 0) return HataMesaji(playerid, "Farklý interiorlara ve sanal dünyalara cctv ekleyemezsin.");
			return DialogGoster(playerid, DIALOG_CCTV_EKLE, DIALOG_STYLE_INPUT, "CCTV - Ekleme", "{FFFFFF}Lütfen eklemek istediðiniz cctv ismini girin;\n\n{B70000}UYARI: {FFFFFF}CCTV þu an olduðunuz lokasyona eklenecektir.", "Tamam", "Kapat");
		}
		for(new i = 0; i != MAKSIMUM_CCTV; i ++) if(CCTVVeri[i][cctvKullanimda] && !strcmp(inputtext, CCTVVeri[i][cctvIsim], true)) {
			DialogGoster(playerid, DIALOG_CCTV_DUZENLE, DIALOG_STYLE_LIST, "CCTV - Konum Düzenle", "Ýsim Deðiþtir\nMenzil Deðiþtir\nKonum Deðiþtir\nKonum Sil", "Seç", "<< Geri");
			return OyuncuBilgi[playerid][oKonum] = i;
		}
		HataMesaji(playerid, "Bir problem oluþtu."), cmd_acctv(playerid, inputtext), OyuncuBilgi[playerid][oKonum] = -1;
	}
 	else if(dialogid == DIALOG_CCTV_ISIM) {
		if(!response) return 0;

 	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_CCTV_ISIM, DIALOG_STYLE_INPUT, "CCTV - Ýsim Deðiþtir", "{FFFFFF}Lütfen yeni cctv bölge ismini girin;", "Tamam", "Kapat");

		new id = OyuncuBilgi[playerid][oKonum];
		format(CCTVVeri[id][cctvIsim], 64, "%s", inputtext);
		CCTV_Kaydet(id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s cctv ismini deðiþtirdi. (SID: %d | Ýsim: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], CCTVVeri[id][cctvID], CCTVVeri[id][cctvIsim]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/cctv.txt", "%s", log_icerik);
		OyuncuBilgi[playerid][oKonum] = -1;
	}
 	else if(dialogid == DIALOG_CCTV_MENZIL) {
		if(!response) return 0;
		new id = OyuncuBilgi[playerid][oKonum], Float:menzil;
		if(sscanf(inputtext, "f", menzil)) {
 			new bilgi[512];
			format(bilgi, sizeof(bilgi), "{FFFFFF}Lütfen cctv'nin yeni menzilini girin;\n\n{FFFFFF}Þu anki menzil: %.4f", CCTVVeri[id][cctvMenzil]);
			return DialogGoster(playerid, DIALOG_CCTV_MENZIL, DIALOG_STYLE_INPUT, "CCTV - Menzil Deðiþtir", bilgi, "Tamam", "Kapat");
		}
		if(menzil < 10.0 || menzil > 350.0) {
			new bilgi[512];
			format(bilgi, sizeof(bilgi), "{B70000}HATA: Girilen menzil en az 10, en fazla 350 olabilir.\n\n{FFFFFF}Lütfen cctv'nin yeni menzilini girin;\n\n{FFFFFF}Þu anki menzil: %.4f", CCTVVeri[id][cctvMenzil]);
			return DialogGoster(playerid, DIALOG_CCTV_MENZIL, DIALOG_STYLE_INPUT, "CCTV - Menzil Deðiþtir", bilgi, "Tamam", "Kapat");
		}

		CCTVVeri[id][cctvMenzil] = menzil;
		CCTV_Kaydet(id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s cctv menzilini deðiþtirdi. (SID: %d | Menzil: %.1f)", Tarih(), OyuncuBilgi[playerid][oAdminNick], CCTVVeri[id][cctvID], menzil);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/cctv.txt", "%s", log_icerik);
		SunucuMesaji(playerid, "CCTV Menzili güncellendi.");
		OyuncuBilgi[playerid][oKonum] = -1;
	}
 	else if(dialogid == DIALOG_CCTV_EKLE) {
		if(!response) return 0;

 	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_CCTV_EKLE, DIALOG_STYLE_INPUT, "CCTV - Ekleme", "{FFFFFF}Lütfen eklemek istediðiniz cctv ismini girin;\n\n{B70000}UYARI: {FFFFFF}CCTV þu an olduðunuz lokasyona eklenecektir.", "Tamam", "Kapat");

		new id = -1;
		id = CCTV_Yarat(playerid, inputtext);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s yeni bir cctv yarattý. (SID: %d | Ýsim: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], CCTVVeri[id][cctvID], inputtext);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/cctv.txt", "%s", log_icerik);
		if(id == -1) return HataMesaji(playerid, "Konum limitine ulaþýldýðý için yeni konum yaratýlamýyor.");
		SunucuMesaji(playerid, "Konum baþarýyla yaratýldý.");
	}
	else if(dialogid == DIALOG_CCTV_DUZENLE) {
		if(!response) return cmd_acctv(playerid, inputtext), OyuncuBilgi[playerid][oKonum] = -1;
		new id = OyuncuBilgi[playerid][oKonum];

		if(!strcmp(inputtext, "Ýsim Deðiþtir", true)) return DialogGoster(playerid, DIALOG_CCTV_ISIM, DIALOG_STYLE_INPUT, "CCTV - Ýsim Deðiþtir", "{FFFFFF}Lütfen yeni cctv bölge ismini girin;", "Tamam", "Kapat");
		else if(!strcmp(inputtext, "Menzil Deðiþtir", true)) {
			new bilgi[512];
			format(bilgi, sizeof(bilgi), "{FFFFFF}Lütfen cctv'nin yeni menzilini girin;\n\n{FFFFFF}Þu anki menzil: %.4f", CCTVVeri[id][cctvMenzil]);
			return DialogGoster(playerid, DIALOG_CCTV_MENZIL, DIALOG_STYLE_INPUT, "CCTV - Menzil Deðiþtir", bilgi, "Tamam", "Kapat");
		}
		else if(!strcmp(inputtext, "Konum Deðiþtir", true)) {
			GetPlayerPos(playerid, CCTVVeri[id][cctvPos][0], CCTVVeri[id][cctvPos][1], CCTVVeri[id][cctvPos][2]);
			CCTV_Kaydet(id);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s cctv konumu deðiþtirdi. (SID: %d | Ýsim: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], CCTVVeri[id][cctvID], CCTVVeri[id][cctvIsim]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/cctv.txt", "%s", log_icerik);
			SunucuMesaji(playerid, "%s adlý cctv güncellendi.", CCTVVeri[id][cctvIsim]);
			OyuncuBilgi[playerid][oKonum] = -1;
		}
		else if(!strcmp(inputtext, "Konum Sil", true)) {
		    SunucuMesaji(playerid, "%s adlý cctv silindi.", CCTVVeri[id][cctvIsim]);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s bir cctv sildi. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], CCTVVeri[id][cctvID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/cctv.txt", "%s", log_icerik);
			CCTV_Kaldir(id);
			OyuncuBilgi[playerid][oKonum] = -1;
		}
	}
	else if(dialogid == DIALOG_ARACHURDA) {
	    if(!response) return 0;

		if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Parçalatma seçeneði sadece araçta kullanýlabilir.");
		if(GetEngineStatus(GetPlayerVehicleID(playerid)) == 1) return HataMesaji(playerid, "Önce aracýn motorunu kapatmalýsýn.");

	    new fiyat = 0, aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
	    if(!Arac_SahipKontrol(playerid, aracid)) return HataMesaji(playerid, "Bu araç senin deðil.");
	    for(new c = 0; c != sizeof(SatilikAraclar); c ++) if(SatilikAraclar[c][0] == AracBilgi[aracid][aracModel]) { fiyat = SatilikAraclar[c][1] / 2; break; }
	    if(fiyat > 0) ParaEkle(playerid, fiyat);
	    SunucuMesaji(playerid, "%s model aracýný {33AA33}%s {FFFFFF}fiyatýna parçalattýn.", AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(fiyat));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) kendi aracýný parçalattý. (Model: %s / Kazanýlan: %s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(fiyat));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/hurdaci.txt", "%s", log_icerik);
	    RemovePlayerFromVehicle(playerid);
	    Arac_Sil(aracid);
	}
 	else if(dialogid == DIALOG_SUC_LISTESI) {
 	    if(!response) return 0;

 	    if(!strcmp(inputtext, "Suç Ekle", true)) return DialogGoster(playerid, DIALOG_SUC_LISTESI_EKLE, DIALOG_STYLE_INPUT, "Liste - Suç Ekle", "{FFFFFF}Lütfen eklemek istediðiniz suçun ismini girin;", "Tamam", "Kapat");
		for(new i = 0; i != MAKSIMUM_SUC; i ++) if(SucListesi[i][sKullanimda] && !strcmp(SucListesi[i][sIsim], inputtext, true)) {
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s listeden suç sildi. (SID: %d | Ýsim: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], SucListesi[i][sucID], SucListesi[i][sIsim]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/suc.txt", "%s", log_icerik);
			SunucuMesaji(playerid, "Suç listeden kaldýrýldý."), SucListesi_Kaldir(i);
			return i;
		}
		HataMesaji(playerid, "Bir problem oluþtu.");
	}
 	else if(dialogid == DIALOG_SUC_LISTESI_EKLE) {
		if(!response) return 0;
		if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_SUC_LISTESI_EKLE, DIALOG_STYLE_INPUT, "Liste - Suç Ekle", "{FFFFFF}Lütfen eklemek istediðiniz suçun ismini girin;", "Tamam", "Kapat");
		if(strlen(inputtext) > 144) return DialogGoster(playerid, DIALOG_SUC_LISTESI_EKLE, DIALOG_STYLE_INPUT, "Liste - Suç Ekle", "{B70000}HATA: {FFFFFF} Girilen suç çok uzun.\n{FFFFFF}Lütfen eklemek istediðiniz suçun ismini girin;", "Tamam", "Kapat");

		SetPVarString(playerid, "Admin_SucEkle", inputtext);
		DialogGoster(playerid, DIALOG_SUC_LISTESI_DAKIKA, DIALOG_STYLE_INPUT, "Liste - Suç Ekle", "{FFFFFF}Lütfen eklemek istediðiniz suçun dakikasýný girin;", "Tamam", "Kapat");
	}
 	else if(dialogid == DIALOG_SUC_LISTESI_DAKIKA) {
		if(!response) return 0;
		new dakika;
		if(sscanf(inputtext, "d", dakika)) return DialogGoster(playerid, DIALOG_SUC_LISTESI_DAKIKA, DIALOG_STYLE_INPUT, "Liste - Suç Ekle", "{FFFFFF}Lütfen eklemek istediðiniz suçun dakikasýný girin;", "Tamam", "Kapat");
		if(dakika < 1) return DialogGoster(playerid, DIALOG_SUC_LISTESI_DAKIKA, DIALOG_STYLE_INPUT, "Liste - Suç Ekle", "{B70000}HATA: {FFFFFF} Dakika en az 1 olmalýdýr.\n{FFFFFF}Lütfen eklemek istediðiniz suçun dakikasýný girin;", "Tamam", "Kapat");

		new suc[144], id = -1;
		GetPVarString(playerid, "Admin_SucEkle", suc, sizeof(suc));
		id = SucListesi_Ekle(suc, dakika);
		if(id == -1) return HataMesaji(playerid, "Liste limitine ulaþýldýðý için yeni suç eklenemiyor.");
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s listeye bir suc ekledi. (SID: %d | Ýsim: %s | Dakika: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], SucListesi[id][sucID], SucListesi[id][sIsim], dakika);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/suc.txt", "%s", log_icerik);
		SunucuMesaji(playerid, "%s baþarýyla listeye eklendi.", suc);
	}
 	else if(dialogid == DIALOG_HIRSIZLISTE) {
 	    if(!response) return 0;

 	    if(!strcmp(inputtext, "Araç Ekle", true)) return DialogGoster(playerid, DIALOG_HIRSIZ_ARACEKLE, DIALOG_STYLE_INPUT, "Liste - Araç Ekle", "{FFFFFF}Lütfen eklemek istediðiniz araç modelini girin;", "Tamam", "Kapat");
		for(new i = 0; i != MAKSIMUM_ARACLISTE; i ++) if(AracHirsiz[i][hKullanimda] && !strcmp(AracModel(AracHirsiz[i][hModel]), inputtext, true)) {
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s listeden araç sildi. (SID: %d | Model: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], AracHirsiz[i][hirsizID], AracModel(AracHirsiz[i][hModel]));
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/hurdaci.txt", "%s", log_icerik);
			SunucuMesaji(playerid, "Araç listeden kaldýrýldý."), Liste_Kaldir(i);
			return 1;
		}
		HataMesaji(playerid, "Bir problem oluþtu.");
	}
 	else if(dialogid == DIALOG_HIRSIZ_ARACEKLE) {
		if(!response) return 0;
		new modelid;
 	    if(sscanf(inputtext, "d", modelid)) return DialogGoster(playerid, DIALOG_HIRSIZ_ARACEKLE, DIALOG_STYLE_INPUT, "Liste - Araç Ekle", "{FFFFFF}Lütfen eklemek istediðiniz araç modelini girin;", "Tamam", "Kapat");
		if(modelid < 400 || modelid > 611) return DialogGoster(playerid, DIALOG_HIRSIZ_ARACEKLE, DIALOG_STYLE_INPUT, "Liste - Araç Ekle", "{B70000}HATA: {FFFFFF}Geçersiz model.\nLütfen eklemek istediðiniz araç modelini girin;", "Tamam", "Kapat");
		for(new c = 0; c != sizeof(SatilikAraclar); c ++) if(SatilikAraclar[c][0] == modelid) {
			new id = -1;
			id = HirsizListe_Ekle(modelid);

			if(id == -1) return HataMesaji(playerid, "Liste limitine ulaþýldýðý için yeni araç eklenemiyor.");
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s listeye araç ekledi. (SID: %d | Model: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], AracHirsiz[id][hirsizID], AracModel(modelid));
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/hurdaci.txt", "%s", log_icerik);
			return SunucuMesaji(playerid, "%s baþarýyla listeye eklendi.", AracModel(modelid));
		}
		HataMesaji(playerid, "Bu araç satýþ listesinde olmadýðýndan dolayý teslimat listesine eklenemez.");
	}
 	else if(dialogid == DIALOG_ADMIN_GPS) {
 	    if(!response) return 0;

 	    if(!strcmp(inputtext, "Konum Ekle", true)) {
 	        if(GetPlayerVirtualWorld(playerid) > 0 || GetPlayerInterior(playerid) > 0) return HataMesaji(playerid, "Farklý interiorlara ve sanal dünyalara konum ekleyemezsin.");
			return DialogGoster(playerid, DIALOG_KONUM_EKLE, DIALOG_STYLE_INPUT, "GPS - Konum Ekleme", "{FFFFFF}Lütfen eklemek istediðiniz konum ismini girin;\n\n{B70000}UYARI: {FFFFFF}Konum þu an olduðunuz lokasyona eklenecektir.", "Tamam", "Kapat");
		}
		for(new i = 0; i != MAKSIMUM_GPS; i ++) if(GPSVeri[i][gpsKullanimda] && !strcmp(inputtext, GPSVeri[i][gpsIsim], true)) {
			DialogGoster(playerid, DIALOG_KONUM_DUZENLE, DIALOG_STYLE_LIST, "GPS - Konum Düzenle", "Ýsim Deðiþtir\nKonum Deðiþtir\nKonum Sil", "Seç", "<< Geri");
			return OyuncuBilgi[playerid][oKonum] = i;
		}
		HataMesaji(playerid, "Bir problem oluþtu."), cmd_agps(playerid, inputtext), OyuncuBilgi[playerid][oKonum] = -1;
	}
	else if(dialogid == DIALOG_KONUM_DUZENLE) {
		if(!response) return cmd_agps(playerid, inputtext), OyuncuBilgi[playerid][oKonum] = -1;
		new id = OyuncuBilgi[playerid][oKonum];

		if(!strcmp(inputtext, "Ýsim Deðiþtir", true)) return DialogGoster(playerid, DIALOG_KONUM_ISIM, DIALOG_STYLE_INPUT, "GPS - Ýsim Deðiþtir", "{FFFFFF}Lütfen yeni konum ismini girin;", "Tamam", "Kapat");
		else if(!strcmp(inputtext, "Konum Deðiþtir", true)) {
			GetPlayerPos(playerid, GPSVeri[id][gpsPos][0], GPSVeri[id][gpsPos][1], GPSVeri[id][gpsPos][2]);
			GPS_Kaydet(id);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s GPS noktasýnýn konumunu deðiþtirdi. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], GPSVeri[id][gpsID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/gps.txt", "%s", log_icerik);
			SunucuMesaji(playerid, "%s adlý konum güncellendi.", GPSVeri[id][gpsIsim]);
			OyuncuBilgi[playerid][oKonum] = -1;
		}
		else if(!strcmp(inputtext, "Konum Sil", true)) {
		    OyuncuBilgi[playerid][oKonum] = -1;
		    foreach(new i : Player) if(OyuncuBilgi[i][oKonum] == id) UyariMesaji(i, "Haritanýzdaki iþaretli GPS konumu bir admin tarafýndan silindi."), DisablePlayerCheckpoint(i), OyuncuBilgi[i][oKonum] = -1;
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s bir GPS konumu sildi. (SID: %d | Isim: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], GPSVeri[id][gpsID], GPSVeri[id][gpsIsim]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/gps.txt", "%s", log_icerik);
		    SunucuMesaji(playerid, "%s adlý konum silindi.", GPSVeri[id][gpsIsim]);
			Konum_Kaldir(id);
		}
	}
 	else if(dialogid == DIALOG_KONUM_ISIM) {
		if(!response) return 0;

 	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_KONUM_ISIM, DIALOG_STYLE_INPUT, "GPS - Ýsim Deðiþtir", "{FFFFFF}Lütfen yeni konum ismini girin;", "Tamam", "Kapat");

		new id = OyuncuBilgi[playerid][oKonum];
		format(GPSVeri[id][gpsIsim], 64, "%s", inputtext);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s GPS konumunun ismini deðiþtirdi. (SID: %d | Isim: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], GPSVeri[id][gpsID], GPSVeri[id][gpsIsim]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/gps.txt", "%s", log_icerik);
		GPS_Kaydet(id);
		OyuncuBilgi[playerid][oKonum] = -1;
	}
 	else if(dialogid == DIALOG_KONUM_EKLE) {
		if(!response) return 0;

 	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_KONUM_EKLE, DIALOG_STYLE_INPUT, "GPS - Konum Ekleme", "{FFFFFF}Lütfen eklemek istediðiniz konum ismini girin;\n\n{B70000}UYARI: {FFFFFF}Konum þu an olduðunuz lokasyona eklenecektir.", "Tamam", "Kapat");

		new id = -1;
		id = Konum_Yarat(playerid, inputtext);

		if(id == -1) return HataMesaji(playerid, "Konum limitine ulaþýldýðý için yeni konum yaratýlamýyor.");
		
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s bir GPS noktasý oluþturdu. (SID: %d | Isim: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], GPSVeri[id][gpsID], GPSVeri[id][gpsIsim]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/gps.txt", "%s", log_icerik);
		SunucuMesaji(playerid, "Konum baþarýyla oluþturuldu.");
	}
	else if(dialogid == DIALOG_MESLEKBUL) {
		if(!response) return 0;
		
		new sayi = -1;
		for(new i = 0; i != MAKSIMUM_MESLEK; i++) if(MeslekBilgi[i][mKullanimda] == true) {
		    sayi++;
		    if(sayi != listitem) continue;
		    OyuncuBilgi[playerid][oIsaretliMeslek] = i;
		    SetPlayerCheckpoint(playerid, MeslekBilgi[i][mPos][0], MeslekBilgi[i][mPos][1], MeslekBilgi[i][mPos][2], 5.0);
		    return SunucuMesaji(playerid, "Meslek giriþ noktasý haritanýzda iþaretlendi.");
		}
		HataMesaji(playerid, "Bir sorun oluþtu.");
	}
	else if(dialogid == DIALOG_GPS_ENYAKIN) {
	    if(!response) return cmd_gps(playerid, "");

		if(!strcmp(inputtext, "En Yakýn Tamirci", true)) {
			for(new i = 0; i != MAKSIMUM_MODIFIYENOKTASI; i ++) if(ModifiyeNoktasi[i][modifiyeKullanimda] && IsPlayerInRangeOfPoint(playerid, 1000.0, ModifiyeNoktasi[i][modifiyePos][0], ModifiyeNoktasi[i][modifiyePos][1], ModifiyeNoktasi[i][modifiyePos][2]))
			{
				if(GetPlayerInterior(playerid) == ModifiyeNoktasi[i][modifiyeInt] && GetPlayerVirtualWorld(playerid) == ModifiyeNoktasi[i][modifiyeDunya])
				return SetPlayerCheckpoint(playerid, ModifiyeNoktasi[i][modifiyePos][0], ModifiyeNoktasi[i][modifiyePos][1], ModifiyeNoktasi[i][modifiyePos][2], 6.0), OyuncuBilgi[playerid][oAdres] = 1, SunucuMesaji(playerid, "En yakýn araç tamir noktasý GPS cihazýnda iþaretlendi.");
			}
			HataMesaji(playerid, "1,000 metre yakýnýnda Araç Tamir noktasý bulunmuyor.");
		}
		else if(!strcmp(inputtext, "En Yakýn Benzinlik", true)) {
			for(new i = 0; i != MAKSIMUM_ISYERI; i ++) if(IsyeriBilgi[i][isyeriKullanimda] && IsPlayerInRangeOfPoint(playerid, 1000.0, IsyeriBilgi[i][isyeriPos][0], IsyeriBilgi[i][isyeriPos][1], IsyeriBilgi[i][isyeriPos][2]) && IsyeriBilgi[i][isyeriTur] == 9)
			{
				if(GetPlayerInterior(playerid) == IsyeriBilgi[i][isyeriInterior] && GetPlayerVirtualWorld(playerid) == IsyeriBilgi[i][isyeriVW])
				return SetPlayerCheckpoint(playerid, IsyeriBilgi[i][isyeriPos][0], IsyeriBilgi[i][isyeriPos][1], IsyeriBilgi[i][isyeriPos][2], 6.0), OyuncuBilgi[playerid][oAdres] = 1, SunucuMesaji(playerid, "En yakýn benzinlik GPS cihazýnda iþaretlendi.");
			}
			HataMesaji(playerid, "1,000 metre yakýnýnda benzinlik bulunmuyor.");
		}
		else if(!strcmp(inputtext, "En Yakýn Elektronik Maðazasý", true)) {
			for(new i = 0; i != MAKSIMUM_ISYERI; i ++) if(IsyeriBilgi[i][isyeriKullanimda] && IsPlayerInRangeOfPoint(playerid, 1000.0, IsyeriBilgi[i][isyeriPos][0], IsyeriBilgi[i][isyeriPos][1], IsyeriBilgi[i][isyeriPos][2]) && IsyeriBilgi[i][isyeriTur] == 3)
			{
				if(GetPlayerInterior(playerid) == IsyeriBilgi[i][isyeriInterior] && GetPlayerVirtualWorld(playerid) == IsyeriBilgi[i][isyeriVW])
				return SetPlayerCheckpoint(playerid, IsyeriBilgi[i][isyeriPos][0], IsyeriBilgi[i][isyeriPos][1], IsyeriBilgi[i][isyeriPos][2], 6.0), OyuncuBilgi[playerid][oAdres] = 1, SunucuMesaji(playerid, "En yakýn elektronik maðazasý cihazýnda iþaretlendi.");
			}
			HataMesaji(playerid, "1,000 metre yakýnýnda elektronik maðazasý bulunmuyor.");
		}
		else if(!strcmp(inputtext, "En Yakýn Market", true)) {
			for(new i = 0; i != MAKSIMUM_ISYERI; i ++) if(IsyeriBilgi[i][isyeriKullanimda] && IsPlayerInRangeOfPoint(playerid, 1000.0, IsyeriBilgi[i][isyeriPos][0], IsyeriBilgi[i][isyeriPos][1], IsyeriBilgi[i][isyeriPos][2]) && IsyeriBilgi[i][isyeriTur] == 1)
			{
				if(GetPlayerInterior(playerid) == IsyeriBilgi[i][isyeriInterior] && GetPlayerVirtualWorld(playerid) == IsyeriBilgi[i][isyeriVW])
				return SetPlayerCheckpoint(playerid, IsyeriBilgi[i][isyeriPos][0], IsyeriBilgi[i][isyeriPos][1], IsyeriBilgi[i][isyeriPos][2], 6.0), OyuncuBilgi[playerid][oAdres] = 1, SunucuMesaji(playerid, "En yakýn market cihazýnda iþaretlendi.");
			}
			HataMesaji(playerid, "1,000 metre yakýnýnda market bulunmuyor.");
		}
        else if(!strcmp(inputtext, "En Yakýn ATM", true)) {
		    for(new i = 0; i != MAKSIMUM_ATM; i ++) if(ATMBilgi[i][atmKullanimda] && IsPlayerInRangeOfPoint(playerid, 1000.0, ATMBilgi[i][atmPos][0], ATMBilgi[i][atmPos][1], ATMBilgi[i][atmPos][2]))
			{
				if(GetPlayerInterior(playerid) == ATMBilgi[i][atmInterior] && GetPlayerVirtualWorld(playerid) == ATMBilgi[i][atmWorld])
					return SetPlayerCheckpoint(playerid, ATMBilgi[i][atmPos][0], ATMBilgi[i][atmPos][1], ATMBilgi[i][atmPos][2], 6.0), OyuncuBilgi[playerid][oAdres] = 1, SunucuMesaji(playerid, "ATM Lokasyonu GPS cihazýnda iþaretlendi.");
			}
			HataMesaji(playerid, "1,000 metre yakýnýnda ATM bulunmuyor.");
		}
	}
	else if(dialogid == DIALOG_GPS) {
	    if(!response) return 0;

		if(!strcmp(inputtext, "Adres Bulma", true)) return DialogGoster(playerid, DIALOG_ADRES_BUL, DIALOG_STYLE_INPUT, "GPS - Adres Arama", "{FFFFFF}Lütfen bulmak istediðiniz kapý numarasýný giriniz;", "Tamam", "Kapat");
		if(!strcmp(inputtext, "Kayýtlý Lokasyonlar", true)) {
			new veriler[256 * MAKSIMUM_GPS], sayi = 0;
			for(new i = 0; i != MAKSIMUM_GPS; i ++) if(GPSVeri[i][gpsKullanimda]) {
				format(veriler, sizeof(veriler), "%s%s\n", veriler, GPSVeri[i][gpsIsim]), sayi++;
			}
			if(!sayi) return HataMesaji(playerid, "GPS'e konum eklenmemiþ.");
			DialogGoster(playerid, DIALOG_KAYITLI_LOKASYONLAR, DIALOG_STYLE_LIST, "GPS", veriler, "Ýþaretle", "<< Geri");
		}
		if(!strcmp(inputtext, "Benim Lokasyonlarým", true)) {
			new veriler[256 * MAKSIMUM_OYUNCU_GPS];
			format(veriler, sizeof(veriler), "Konum Ekle\n");
			for(new i = 0; i != MAKSIMUM_OYUNCU_GPS; i ++) if(GPSOyuncu[playerid][i][gpsKullanimda]) {
				format(veriler, sizeof(veriler), "%s%s\n", veriler, GPSOyuncu[playerid][i][gpsIsim]);
			}
			DialogGoster(playerid, DIALOG_OYUNCU_GPS, DIALOG_STYLE_LIST, "GPS", veriler, "Seç", "<< Geri");
		}
		if(!strcmp(inputtext, "En Yakýnýmdakiler Servisi", true)) {
            DialogGoster(playerid, DIALOG_GPS_ENYAKIN, DIALOG_STYLE_LIST, "GPS", "En Yakýn Tamirci\nEn Yakýn Benzinlik\nEn Yakýn Elektronik Maðazasý\nEn Yakýn Market\nEn Yakýn ATM", "Seç", "Kapat");
		}
		else if(!strcmp(inputtext, "Konum Gönder", true)) {
			if(OyuncuBilgi[playerid][oTelefonDurum] == false) return HataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýnýz.");
			if(OyuncuBilgi[playerid][oGizliNumara] == true) return HataMesaji(playerid, "Gizli numara kullanýrken konum gönderemezsin.");
			if(OyuncuBilgi[playerid][oKonumGonderilme] != 0) return HataMesaji(playerid, "Daha önce konum göndermiþsin, iptal etmeden yeni konum gönderemezsin. (/iptal)");

			DialogGoster(playerid, DIALOG_KONUM_GONDER, DIALOG_STYLE_INPUT, "vHarita: Konum Gönder", "{FFFFFF}Lütfen konum paylaþmak istediðiniz numarayý giriniz;", "Gönder", "Kapat");
		}
		if(!strcmp(inputtext, "Araç Bulma", true)) {
		    new icerik[1024], sayi = 0;
		    format(icerik, sizeof(icerik), "ID\tModel\tPlaka\n");
			for(new i = 0; i < MAKSIMUM_ARAC; i ++) if(Arac_SahipKontrol(playerid, i)) {
		        if(IsValidVehicle(AracBilgi[i][aracYarat])) format(icerik, sizeof(icerik), "%s%d\t%s\t%s\n", icerik, AracBilgi[i][aracYarat], AracModel(AracBilgi[i][aracModel]), AracBilgi[i][aracPlaka]);
			    sayi++;
			}
			if(!sayi) return HataMesaji(playerid, "Aktif durumda aracýn yok.");
			DialogGoster(playerid, DIALOG_GPS_ARACBUL, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Araç Bul", icerik, "Seç", "Kapat");
		}
	}
	else if(dialogid == DIALOG_GPS_ARACBUL) {
		if(!response) return 0;
		if(OyuncuBilgi[playerid][oKamyoncu] != -1) return HataMesaji(playerid, "Zaten yükleme yapmýþsýn.");
		if(OyuncuBilgi[playerid][oTemizlikCP] > 0) return HataMesaji(playerid, "Temizlik yaparken ürün yükleyemezsin.");
		// if(OyuncuBilgi[playerid][oMateryalTasiyor] == true) return HataMesaji(playerid, "Paket taþýrken ürün yükleyemezsin. (\"/cpsifirla\")");
		if(OyuncuBilgi[playerid][oMarker] > -1) return HataMesaji(playerid, "Konum araþtýrýrken ürün yükleyemezsin. (\"/cpsifirla\")");
		if(OyuncuBilgi[playerid][oKonum] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
		if(OyuncuBilgi[playerid][oLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
		if(OyuncuBilgi[playerid][oAdres] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
		if(OyuncuBilgi[playerid][objeLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
		if(OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
		if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
		if(OyuncuBilgi[playerid][oIsaretliMeslek] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
        
		new id = strval(inputtext), Float:arac_pos[3];

		GetVehiclePos(id, arac_pos[0], arac_pos[1], arac_pos[2]);
		OyuncuBilgi[playerid][oGPSArac] = id;
		SetPlayerCheckpoint(playerid, arac_pos[0], arac_pos[1], arac_pos[2], 5.0);
		SunucuMesaji(playerid, "%s model aracýn haritanda iþaretlendi, sýfýrlamak için /cpsifirla komutunu kullanabilirsin.", AracModel(GetVehicleModel(id)));
	}
 	else if(dialogid == DIALOG_OYUNCU_GPS) {
 	    if(!response) return 0;

 	    if(!strcmp(inputtext, "Konum Ekle", true)) {
 	        if(GetPlayerVirtualWorld(playerid) > 0 || GetPlayerInterior(playerid) > 0) return HataMesaji(playerid, "Farklý interiorlara ve sanal dünyalara konum ekleyemezsin.");
			return DialogGoster(playerid, DIALOG_OYUNCU_KONUM_EKLE, DIALOG_STYLE_INPUT, "GPS - Konum Ekleme", "{FFFFFF}Lütfen eklemek istediðiniz konum ismini girin;\n\n{B70000}UYARI: {FFFFFF}Konum þu an olduðunuz lokasyona eklenecektir.", "Tamam", "Kapat");
		}
		for(new i = 0; i != MAKSIMUM_OYUNCU_GPS; i ++) if(GPSOyuncu[playerid][i][gpsKullanimda] && !strcmp(inputtext, GPSOyuncu[playerid][i][gpsIsim], true)) {
			DialogGoster(playerid, DIALOG_OYUNCU_KONUM_DUZENLE, DIALOG_STYLE_LIST, "GPS - Konum Düzenle", "Haritada Ýþaretle\nÝsim Deðiþtir\nKonum Deðiþtir\nKonum Sil", "Seç", "<< Geri");
			return OyuncuBilgi[playerid][oKonum] = i;
		}
		HataMesaji(playerid, "Bir problem oluþtu."), cmd_gps(playerid, inputtext), OyuncuBilgi[playerid][oKonum] = -1;
	}
	else if(dialogid == DIALOG_OYUNCU_KONUM_DUZENLE) {
		if(!response) return cmd_gps(playerid, inputtext), OyuncuBilgi[playerid][oKonum] = -1;
		new id = OyuncuBilgi[playerid][oKonum];

		if(!strcmp(inputtext, "Haritada Ýþaretle", true)) {
	        if(OyuncuBilgi[playerid][oKamyoncu] != -1) return HataMesaji(playerid, "Zaten yükleme yapmýþsýn.");
		    if(OyuncuBilgi[playerid][oTemizlikCP] > 0) return HataMesaji(playerid, "Temizlik yaparken ürün yükleyemezsin.");
		    // if(OyuncuBilgi[playerid][oMateryalTasiyor] == true) return HataMesaji(playerid, "Paket taþýrken ürün yükleyemezsin. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oMarker] > -1) return HataMesaji(playerid, "Konum araþtýrýrken ürün yükleyemezsin. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oKonum] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oAdres] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][objeLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			if(OyuncuBilgi[playerid][oIsaretliMeslek] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
			
			SetPlayerCheckpoint(playerid, GPSOyuncu[playerid][id][gpsPos][0], GPSOyuncu[playerid][id][gpsPos][1], GPSOyuncu[playerid][id][gpsPos][2], 6.0);
			OyuncuBilgi[playerid][oKonum] = -1, OyuncuBilgi[playerid][oLokasyon] = id;
			return SunucuMesaji(playerid, "%s isimli sana ait konumu GPS'inde iþaretledin.", GPSOyuncu[playerid][id][gpsIsim]);
		}
		else if(!strcmp(inputtext, "Ýsim Deðiþtir", true)) return DialogGoster(playerid, DIALOG_OYUNCU_KONUM_ISIM, DIALOG_STYLE_INPUT, "GPS - Ýsim Deðiþtir", "{FFFFFF}Lütfen yeni konum ismini girin;", "Tamam", "Kapat");
		else if(!strcmp(inputtext, "Konum Deðiþtir", true)) {
			GetPlayerPos(playerid, GPSOyuncu[playerid][id][gpsPos][0], GPSOyuncu[playerid][id][gpsPos][1], GPSOyuncu[playerid][id][gpsPos][2]);
			Oyuncu_Konum_Kaydet(playerid, id);
			SunucuMesaji(playerid, "%s adlý konum güncellendi.", GPSOyuncu[playerid][id][gpsIsim]);
			OyuncuBilgi[playerid][oKonum] = -1;
		}
		else if(!strcmp(inputtext, "Konum Sil", true)) {
		    SunucuMesaji(playerid, "%s adlý konum silindi.", GPSOyuncu[playerid][id][gpsIsim]);
			Oyuncu_Konum_Kaldir(playerid, id);
			OyuncuBilgi[playerid][oKonum] = -1;
		}
	}
 	else if(dialogid == DIALOG_OYUNCU_KONUM_ISIM) {
		if(!response) return 0;

 	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_OYUNCU_KONUM_ISIM, DIALOG_STYLE_INPUT, "GPS - Ýsim Deðiþtir", "{FFFFFF}Lütfen yeni konum ismini girin;", "Tamam", "Kapat");

		new id = OyuncuBilgi[playerid][oKonum];
		format(GPSOyuncu[playerid][id][gpsIsim], 64, "%s", inputtext);
		Oyuncu_Konum_Kaydet(playerid, id);
		OyuncuBilgi[playerid][oKonum] = -1;
	}
 	else if(dialogid == DIALOG_OYUNCU_KONUM_EKLE) {
		if(!response) return 0;

 	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_OYUNCU_KONUM_EKLE, DIALOG_STYLE_INPUT, "GPS - Konum Ekleme", "{FFFFFF}Lütfen eklemek istediðiniz konum ismini girin;\n\n{B70000}UYARI: {FFFFFF}Konum þu an olduðunuz lokasyona eklenecektir.", "Tamam", "Kapat");

		new id = -1;
		id = Oyuncu_Konum_Yarat(playerid, inputtext);

		if(id == -1) return HataMesaji(playerid, "Maksimum sayýda konum oluþturmuþsun.");

		SunucuMesaji(playerid, "Konum baþarýyla eklendi.");
	}
	else if(dialogid == DIALOG_ADRES_BUL) {
		if(!response) return 0;
		new kapino;
		if(sscanf(inputtext, "d", kapino)) return DialogGoster(playerid, DIALOG_ADRES_BUL, DIALOG_STYLE_INPUT, "GPS - Adres Arama", "{FFFFFF}Lütfen bulmak istediðiniz kapý numarasýný giriniz;", "Tamam", "Kapat");

		for(new i = 0; i != MAKSIMUM_EV; i++) if(kapino == EvBilgi[i][evID]) {
			SetPlayerCheckpoint(playerid, EvBilgi[i][evPos][0], EvBilgi[i][evPos][1], EvBilgi[i][evPos][2], 6.0);
			SunucuMesaji(playerid, "Girilen adres GPS'inde iþaretlendi.");
			OyuncuBilgi[playerid][oAdres] = i;
			return 1;
		}
		for(new i = 0; i != MAKSIMUM_ISYERI; i++) if(kapino == IsyeriBilgi[i][isyeriID] + MAKSIMUM_EV) {
			SetPlayerCheckpoint(playerid, IsyeriBilgi[i][isyeriPos][0], IsyeriBilgi[i][isyeriPos][1], IsyeriBilgi[i][isyeriPos][2], 6.0);
			SunucuMesaji(playerid, "Girilen adres GPS'inde iþaretlendi.");
			OyuncuBilgi[playerid][oAdres] = i;
			return 1;
		}
		for(new i = 0; i != MAKSIMUM_BINA; i++) if(kapino == BinaBilgi[i][bID] + MAKSIMUM_EV + MAKSIMUM_ISYERI && BinaBilgi[i][binaTur] != 8) {
			SetPlayerCheckpoint(playerid, BinaBilgi[i][bPos][0], BinaBilgi[i][bPos][1], BinaBilgi[i][bPos][2], 6.0);
			SunucuMesaji(playerid, "Girilen adres GPS'inde iþaretlendi.");
			OyuncuBilgi[playerid][oAdres] = i;
			return 1;
		}
		for(new i = 0; i != MAKSIMUM_GARAJ; i++) if(kapino == GarajBilgi[i][garajID] + MAKSIMUM_EV + MAKSIMUM_ISYERI + MAKSIMUM_BINA) {
			SetPlayerCheckpoint(playerid, GarajBilgi[i][garajPos][0], GarajBilgi[i][garajPos][1], GarajBilgi[i][garajPos][2], 6.0);
			SunucuMesaji(playerid, "Girilen adres GPS'inde iþaretlendi.");
			OyuncuBilgi[playerid][oAdres] = i;
			return 1;
		}
		return DialogGoster(playerid, DIALOG_ADRES_BUL, DIALOG_STYLE_INPUT, "GPS - Adres Arama", "{B70000}HATA: {FFFFFF}Geçersiz kapý numarasý!\n{FFFFFF}Lütfen bulmak istediðiniz kapý numarasýný giriniz;", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_KAYITLI_LOKASYONLAR) {
		if(!response) return cmd_gps(playerid, inputtext);

		for(new i = 0; i != MAKSIMUM_GPS; i ++) if(GPSVeri[i][gpsKullanimda] && !strcmp(inputtext, GPSVeri[i][gpsIsim], true)) {
			SetPlayerCheckpoint(playerid, GPSVeri[i][gpsPos][0], GPSVeri[i][gpsPos][1], GPSVeri[i][gpsPos][2], 6.0);
			OyuncuBilgi[playerid][oKonum] = i;
			return SunucuMesaji(playerid, "%s isimli konumu GPS'inde iþaretledin.", inputtext);
		}
		HataMesaji(playerid, "Bir hata oluþtu.");
	}
 	else if(dialogid == DIALOG_ARACBAGAJ_ELKOY) {
		new aracid = OyuncuBilgi[playerid][oBagaj];
		if(!response) return SetTrunkStatus(AracBilgi[aracid][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
        if(!strcmp(inputtext, "Yük Kontrol", true)) {
            new yuk = KamyoncuYuk[AracBilgi[aracid][aracYarat]];
            SunucuMesaji(playerid, "Bu aracýn yükü: %s", (yuk == 0) ? ("{33aa33}Legal") : ("{B70000}Ýllegal"));
            SetTrunkStatus(AracBilgi[aracid][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
            return true;
        }
        new sorgu[256];
		format(sorgu, sizeof(sorgu), "SELECT * FROM `bagaj` WHERE `esyaIsim` = '%s' AND `esyaArac` = '%d'", SQL_ReturnEscaped(inputtext), AracBilgi[aracid][aracID]);
		return mysql_tquery(mysqlB, sorgu, "Bagaj_Elkoyuldu", "d", playerid);
 	}
 	else if(dialogid == DIALOG_ARACBAGAJ) {
		if(!response) return SetTrunkStatus(AracBilgi[OyuncuBilgi[playerid][oBagaj]][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
        if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bir sorun oluþtu."), SetTrunkStatus(AracBilgi[OyuncuBilgi[playerid][oBagaj]][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
        
		new aracid = OyuncuBilgi[playerid][oBagaj], sorgu[1024];
        if(!strcmp(inputtext, "Boþ Slot", true)) {
			if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && AracBilgi[aracid][aracBirlik] != OyuncuBilgi[playerid][oBirlikSQLID]) return HataMesaji(playerid, "LSPD birliði sadece polis araçlarýna yapabilir."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
			new liste[1024], silahid, mermi, sayi = 0;
			format(liste, sizeof(liste), "Eþya\tAdet\n");
			for(new i = 0; i < 13; i ++)
			{
				GetPlayerWeaponData(playerid, i, silahid, mermi);
				if(silahid > 0 && silahid == OyuncuBilgi[playerid][oSilah][i]) {
					if(BagajSlotKontrol(AracBilgi[aracid][aracModel]) == 1) if(silahid != 22 && silahid != 23 && silahid != 24) continue;
					if(OyuncuBilgi[playerid][oBeanbag] && silahid == 25) continue;
					format(liste, sizeof(liste), "%s%s\t%d\n", liste, SilahIsim(silahid), mermi), sayi++;
				}
			}
			if(OyuncuBilgi[playerid][oUyusturucu] > 0) format(liste, sizeof(liste), "%sUyuþturucu\t%d\n", liste, OyuncuBilgi[playerid][oUyusturucu]), sayi++;
			if(OyuncuZirh(playerid) > 39 && BagajSlotKontrol(AracBilgi[aracid][aracModel]) != 1) format(liste, sizeof(liste), "%sÇelik Yelek\t%d\n", liste, OyuncuZirh(playerid)), sayi++;
			if(OyuncuBilgi[playerid][oIlkYardim] > 0) format(liste, sizeof(liste), "%sÝlk Yardým Kiti\t%d\n", liste, OyuncuBilgi[playerid][oIlkYardim]), sayi++;
			if(OyuncuBilgi[playerid][oTamirKiti] > 0) format(liste, sizeof(liste), "%sTamir Kiti\t%d\n", liste, OyuncuBilgi[playerid][oTamirKiti]), sayi++;
			if(OyuncuBilgi[playerid][oMaymuncuk] > 0) format(liste, sizeof(liste), "%sMaymuncuk\t%d\n", liste, OyuncuBilgi[playerid][oMaymuncuk]), sayi++;
			if(OyuncuBilgi[playerid][oTohum] > 0) format(liste, sizeof(liste), "%sTohum\t%d\n", liste, OyuncuBilgi[playerid][oTohum]), sayi++;
			if(OyuncuBilgi[playerid][oBeanbag]) strcat(liste, "Beanbag Tüfeði\t1\n"), sayi++;

			if(!sayi) return HataMesaji(playerid, "Bagaja ekleyebileceðin bir eþyaya sahip deðilsin."), SetTrunkStatus(AracBilgi[OyuncuBilgi[playerid][oBagaj]][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
			DialogGoster(playerid, DIALOG_BAGAJ_EKLE, DIALOG_STYLE_TABLIST_HEADERS, "Bagaj Eþya Ekleme", liste, "Seç", "Kapat");
		}
		else if(!strcmp(inputtext, "Uyuþturucu", true)) {
		    SetPVarInt(playerid, "Bagaj_Esya_Al", 1);
		    DialogGoster(playerid, DIALOG_BAGAJ_AL, DIALOG_STYLE_TABLIST, "Bagaj - Eþya Alma", "Adet ile Al\nHepsini Al\nEkle", "Seç", "Kapat");
		}
		else if(!strcmp(inputtext, "Çelik Yelek", true)) {
			format(sorgu, sizeof(sorgu), "SELECT * FROM `bagaj` WHERE `esyaIsim` = '%s' AND `esyaArac` = '%d'", SQL_ReturnEscaped(inputtext), AracBilgi[aracid][aracID]);
			mysql_tquery(mysqlB, sorgu, "BagajEsya", "dd", playerid, 1);
		}
		else if(!strcmp(inputtext, "Beanbag Tüfeði", true)) {
			format(sorgu, sizeof(sorgu), "SELECT * FROM `bagaj` WHERE `esyaIsim` = '%s' AND `esyaArac` = '%d'", SQL_ReturnEscaped(inputtext), AracBilgi[aracid][aracID]);
			mysql_tquery(mysqlB, sorgu, "BagajEsya", "dd", playerid, 2);
		}
		else if(!strcmp(inputtext, "Ýlk Yardým Kiti", true)) {
		    if(AracBilgi[aracid][aracModel] == 416) {
				new limit = 0;
				switch(OyuncuBilgi[playerid][oVIP]) {
				    case 3: limit = 2;
				    default: limit = 1;
				}
				if(OyuncuBilgi[playerid][oIlkYardim] >= limit) return HataMesaji(playerid, "Üzerinde daha çok ilk yardým kiti bulunamaz."), SetTrunkStatus(AracBilgi[OyuncuBilgi[playerid][oBagaj]][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;

				OyuncuBilgi[playerid][oIlkYardim]++;
				cmd_ame(playerid, "ambulanstan ilk yardým kiti aldý.");
		        return SetTrunkStatus(AracBilgi[OyuncuBilgi[playerid][oBagaj]][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
		    }
			format(sorgu, sizeof(sorgu), "SELECT * FROM `bagaj` WHERE `esyaIsim` = '%s' AND `esyaArac` = '%d'", SQL_ReturnEscaped(inputtext), AracBilgi[aracid][aracID]);
			mysql_tquery(mysqlB, sorgu, "BagajEsya", "dd", playerid, 3);
		}
		else if(!strcmp(inputtext, "Maymuncuk", true)) {
		    SetPVarInt(playerid, "Bagaj_Esya_Al", 2);
		    DialogGoster(playerid, DIALOG_BAGAJ_AL, DIALOG_STYLE_TABLIST, "Bagaj - Eþya Alma", "Adet ile Al\nHepsini Al\nEkle", "Seç", "Kapat");
		}
		else if(!strcmp(inputtext, "Tamir Kiti", true)) {
			format(sorgu, sizeof(sorgu), "SELECT * FROM `bagaj` WHERE `esyaIsim` = '%s' AND `esyaArac` = '%d'", SQL_ReturnEscaped(inputtext), AracBilgi[aracid][aracID]);
			mysql_tquery(mysqlB, sorgu, "BagajEsya", "dd", playerid, 5);
		}
		else if(!strcmp(inputtext, "Tohum", true)) {
			format(sorgu, sizeof(sorgu), "SELECT * FROM `bagaj` WHERE `esyaIsim` = '%s' AND `esyaArac` = '%d'", SQL_ReturnEscaped(inputtext), AracBilgi[aracid][aracID]);
			mysql_tquery(mysqlB, sorgu, "BagajEsya", "dd", playerid, 6);
		}
		else {
		    if(OyuncuBilgi[playerid][oOynamaSaati] < 12) return HataMesaji(playerid, "Silah alabilmek için en az 12 oynama saatine ihtiyacýn var."), SetTrunkStatus(AracBilgi[OyuncuBilgi[playerid][oBagaj]][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
			format(sorgu, sizeof(sorgu), "SELECT * FROM `bagaj` WHERE `esyaIsim` = '%s' AND `esyaArac` = '%d'", SQL_ReturnEscaped(inputtext), AracBilgi[aracid][aracID]);
			return mysql_tquery(mysqlB, sorgu, "BagajSilah", "d", playerid);
		}
 	}
 	else if(dialogid == DIALOG_BAGAJ_AL) {
		if(!response) return SetTrunkStatus(AracBilgi[OyuncuBilgi[playerid][oBagaj]][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
        if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bir sorun oluþtu."), SetTrunkStatus(AracBilgi[OyuncuBilgi[playerid][oBagaj]][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
        
		if(!strcmp(inputtext, "Adet ile Al", true)) return DialogGoster(playerid, DIALOG_BAGAJ_AL_SAYI, DIALOG_STYLE_INPUT, "Bagaj - Eþya Alma", "{FFFFFF}Lütfen bagajdan almak istediðiniz adeti girin;", "Tamam", "Kapat");
		else if(!strcmp(inputtext, "Hepsini Al", true)) {
		    new aracid = OyuncuBilgi[playerid][oBagaj], sorgu[1024];
		    switch(GetPVarInt(playerid, "Bagaj_Esya_Al")) {
				case 1: format(sorgu, sizeof(sorgu), "SELECT * FROM `bagaj` WHERE `esyaIsim` = '%s' AND `esyaArac` = '%d'", SQL_ReturnEscaped("Uyuþturucu"), aracid), mysql_tquery(mysqlB, sorgu, "BagajEsya", "dd", playerid, 0);
				case 2: format(sorgu, sizeof(sorgu), "SELECT * FROM `bagaj` WHERE `esyaIsim` = '%s' AND `esyaArac` = '%d'", SQL_ReturnEscaped("Maymuncuk"), aracid), mysql_tquery(mysqlB, sorgu, "BagajEsya", "dd", playerid, 4);
		    }
		}
		else if(!strcmp(inputtext, "Ekle", true)) return DialogGoster(playerid, DIALOG_BAGAJ_EKLEME, DIALOG_STYLE_INPUT, "Bagaj - Eþya Ekleme", "{FFFFFF}Lütfen bagaja eklemek istediðiniz adeti girin;", "Tamam", "Kapat");
 	}
 	else if(dialogid == DIALOG_BAGAJ_AL_SAYI) {
		if(!response) return SetTrunkStatus(AracBilgi[OyuncuBilgi[playerid][oBagaj]][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;

		new adet;
		if(sscanf(inputtext, "d", adet)) return DialogGoster(playerid, DIALOG_BAGAJ_AL_SAYI, DIALOG_STYLE_INPUT, "Bagaj - Eþya Alma", "{FFFFFF}Lütfen bagajdan almak istediðiniz adeti girin;", "Tamam", "Kapat");
		if(adet < 1) return DialogGoster(playerid, DIALOG_BAGAJ_AL_SAYI, DIALOG_STYLE_INPUT, "Bagaj - Eþya Alma", "{B70000}HATA: {FFFFFF}Sayý en az 1 olmalýdýr.\nLütfen bagajdan almak istediðiniz adeti girin;", "Tamam", "Kapat");

		new aracid = OyuncuBilgi[playerid][oBagaj], sorgu[1024];
		switch(GetPVarInt(playerid, "Bagaj_Esya_Al")) {
			case 1: format(sorgu, sizeof(sorgu), "SELECT * FROM `bagaj` WHERE `esyaIsim` = '%s' AND `esyaArac` = '%d'", SQL_ReturnEscaped("Uyuþturucu"), AracBilgi[aracid][aracID]);
			case 2: format(sorgu, sizeof(sorgu), "SELECT * FROM `bagaj` WHERE `esyaIsim` = '%s' AND `esyaArac` = '%d'", SQL_ReturnEscaped("Maymuncuk"), AracBilgi[aracid][aracID]);
		}
		mysql_tquery(mysqlB, sorgu, "BagajEsyaSayi", "dd", playerid, adet);
 	}
 	else if(dialogid == DIALOG_BAGAJ_EKLE) {
 	    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bir sorun oluþtu."), SetTrunkStatus(AracBilgi[OyuncuBilgi[playerid][oBagaj]][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
		new aracid = OyuncuBilgi[playerid][oBagaj], silahid, mermi, adet;

 	    if(!response || !IsPlayerConnected(playerid) || GetPVarInt(playerid, "Kick") == 1) return SetTrunkStatus(AracBilgi[aracid][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
		else {
		    new esya[96];
		    if(!strcmp(inputtext, "Uyuþturucu", true)) return SetPVarInt(playerid, "Bagaj_Esya_Ekle", 1), DialogGoster(playerid, DIALOG_BAGAJ_EKLE_SAYI, DIALOG_STYLE_INPUT, "Bagaj - Eþya Ekleme", "{FFFFFF}Lütfen bagaja eklemek istediðiniz adeti girin;", "Tamam", "Kapat");
		    if(!strcmp(inputtext, "Çelik Yelek", true)) adet = OyuncuZirh(playerid), ZirhDuzenle(playerid, 0), format(esya, sizeof(esya), "Çelik Yelek");
		    if(!strcmp(inputtext, "Ýlk Yardým Kiti", true)) adet = 1, OyuncuBilgi[playerid][oIlkYardim]--, format(esya, sizeof(esya), "Ýlk Yardým Kiti");
		    if(!strcmp(inputtext, "Maymuncuk", true)) return SetPVarInt(playerid, "Bagaj_Esya_Ekle", 2), DialogGoster(playerid, DIALOG_BAGAJ_EKLE_SAYI, DIALOG_STYLE_INPUT, "Bagaj - Eþya Ekleme", "{FFFFFF}Lütfen bagaja eklemek istediðiniz adeti girin;", "Tamam", "Kapat");
		    if(!strcmp(inputtext, "Beanbag Tüfeði", true)) adet = 1, OyuncuBilgi[playerid][oBeanbag] = false, SilahAyarla(playerid), SetPlayerArmedWeapon(playerid, OyuncuBilgi[playerid][oSilah][3]), format(esya, sizeof(esya), "Beanbag Tüfeði");
		    if(!strcmp(inputtext, "Tamir Kiti", true)) adet = 1, OyuncuBilgi[playerid][oTamirKiti]--, format(esya, sizeof(esya), "Tamir Kiti");
			if(!strcmp(inputtext, "Tohum", true)) {
			    if(OyuncuBilgi[playerid][oTohum] > 0 && OyuncuBilgi[playerid][oTohum] < 5) adet = OyuncuBilgi[playerid][oTohum], OyuncuBilgi[playerid][oTohum] = 0;
				else if(OyuncuBilgi[playerid][oTohum] > 5) adet = 5, OyuncuBilgi[playerid][oTohum] -= 5;
				format(esya, sizeof(esya), "Tohum");
			}
			for(new i = 0; i < 13; i ++)
			{
				GetPlayerWeaponData(playerid, i, silahid, mermi);
				if(silahid > 0 && OyuncuBilgi[playerid][oSilah][i] == silahid) if(!strcmp(SilahIsim(silahid), inputtext, true)) {
					adet = mermi;
					ResetPlayerWeapons(playerid);
					OyuncuBilgi[playerid][oSilah][SilahSlotBul[silahid]] = 0;
					OyuncuBilgi[playerid][oMermi][SilahSlotBul[silahid]] = 0;
					format(esya, sizeof(esya), SilahIsim(silahid));
					OyuncuKaydet(playerid);
					break;
				}
			}
			if(adet == 0 || GetPVarInt(playerid, "Kick") == 1 || !IsPlayerConnected(playerid)) return SetTrunkStatus(AracBilgi[aracid][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
			new sorgu[512], emote[128];
			format(sorgu, sizeof(sorgu),"INSERT INTO bagaj (esyaIsim, esyaAdet, esyaArac) VALUES ('%s','%d','%d')", SQL_ReturnEscaped(inputtext), adet, AracBilgi[aracid][aracID]);
			mysql_query(mysqlB, sorgu);
			format(emote, sizeof(emote), "araç bagajýna %s koydu.", esya);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s araç bagajýna %s koydu. (adet: %d) (SID: %d)", Tarih(), oyuncu_isim, esya, adet, AracBilgi[aracid][aracID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/bagaj.txt", "%s", log_icerik);
			cmd_ame(playerid, emote);
			SilahAyarla(playerid);
			OyuncuKaydet(playerid);
			return SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
		}
	}
 	else if(dialogid == DIALOG_BAGAJ_EKLE_SAYI) {
 	    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bir sorun oluþtu."), SetTrunkStatus(AracBilgi[OyuncuBilgi[playerid][oBagaj]][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
		new aracid = OyuncuBilgi[playerid][oBagaj], adet;

 	    if(!response || !IsPlayerConnected(playerid)) return SetTrunkStatus(AracBilgi[aracid][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
		else {
			if(sscanf(inputtext, "d", adet)) return DialogGoster(playerid, DIALOG_BAGAJ_EKLE_SAYI, DIALOG_STYLE_INPUT, "Bagaj - Eþya Ekleme", "{FFFFFF}Lütfen bagaja eklemek istediðiniz adeti girin;", "Tamam", "Kapat");
			if(adet < 1) return DialogGoster(playerid, DIALOG_BAGAJ_EKLE_SAYI, DIALOG_STYLE_INPUT, "Bagaj - Eþya Ekleme", "{B70000}HATA: {FFFFFF}Sayý en az 1 olmalýdýr.\n{FFFFFF}Lütfen bagaja eklemek istediðiniz adeti girin;", "Tamam", "Kapat");
			if(GetPVarInt(playerid, "Bagaj_Esya_Ekle") == 1 && OyuncuBilgi[playerid][oUyusturucu] < adet) return DialogGoster(playerid, DIALOG_BAGAJ_EKLE_SAYI, DIALOG_STYLE_INPUT, "Bagaj - Eþya Ekleme", "{B70000}HATA: {FFFFFF}Üzerinde bu kadar uyuþturucu yok.\n{FFFFFF}Lütfen bagaja eklemek istediðiniz adeti girin;", "Tamam", "Kapat");
            if(GetPVarInt(playerid, "Bagaj_Esya_Ekle") == 2 && OyuncuBilgi[playerid][oMaymuncuk] < adet) return DialogGoster(playerid, DIALOG_BAGAJ_EKLE_SAYI, DIALOG_STYLE_INPUT, "Bagaj - Eþya Ekleme", "{B70000}HATA: {FFFFFF}Üzerinde bu kadar maymuncuk yok.\n{FFFFFF}Lütfen bagaja eklemek istediðiniz adeti girin;", "Tamam", "Kapat");
            if(GetPVarInt(playerid, "Bagaj_Esya_Ekle") == 1 && adet >= 30) return DialogGoster(playerid, DIALOG_BAGAJ_EKLE_SAYI, DIALOG_STYLE_INPUT, "Bagaj - Eþya Ekleme", "{B70000}HATA: {FFFFFF}En fazla 30 adet ekleyebilirsin.\n{FFFFFF}Lütfen bagaja eklemek istediðiniz adeti girin;", "Tamam", "Kapat");
			new esya[96];

		    switch(GetPVarInt(playerid, "Bagaj_Esya_Ekle")) {
				case 1: OyuncuBilgi[playerid][oUyusturucu] -= adet, format(esya, sizeof(esya), "Uyuþturucu");
				case 2: OyuncuBilgi[playerid][oMaymuncuk] -= adet, format(esya, sizeof(esya), "Maymuncuk");
			}
			OyuncuKaydet(playerid);
			new sorgu[512], emote[128];
			format(sorgu, sizeof(sorgu),"INSERT INTO bagaj (esyaIsim, esyaAdet, esyaArac) VALUES ('%s','%d','%d')", SQL_ReturnEscaped(esya), adet, AracBilgi[aracid][aracID]);
			mysql_query(mysqlB, sorgu);
			format(emote, sizeof(emote), "araç bagajýna %s koydu.", esya);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s araç bagajýna %s koydu. (adet: %d) (SID: %d)", Tarih(), oyuncu_isim, esya, adet, AracBilgi[aracid][aracID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/bagaj.txt", "%s", log_icerik);
			cmd_ame(playerid, emote);
			return SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
		}
	}
 	else if(dialogid == DIALOG_BAGAJ_EKLEME) {
		new aracid = OyuncuBilgi[playerid][oBagaj], adet;

 	    if(!response) return SetTrunkStatus(AracBilgi[aracid][aracYarat], false), OyuncuBilgi[playerid][oBagaj] = -1;
		else {
			if(sscanf(inputtext, "d", adet)) return DialogGoster(playerid, DIALOG_BAGAJ_EKLEME, DIALOG_STYLE_INPUT, "Bagaj - Eþya Ekleme", "{FFFFFF}Lütfen bagaja eklemek istediðiniz adeti girin;", "Tamam", "Kapat");
			if(adet < 1) return DialogGoster(playerid, DIALOG_BAGAJ_EKLEME, DIALOG_STYLE_INPUT, "Bagaj - Eþya Ekleme", "{B70000}HATA: {FFFFFF}Sayý en az 1 olmalýdýr.\n{FFFFFF}Lütfen bagaja eklemek istediðiniz adeti girin;", "Tamam", "Kapat");
			if(GetPVarInt(playerid, "Bagaj_Esya_Al") == 1 && OyuncuBilgi[playerid][oUyusturucu] < adet) return DialogGoster(playerid, DIALOG_BAGAJ_EKLEME, DIALOG_STYLE_INPUT, "Bagaj - Eþya Ekleme", "{B70000}HATA: {FFFFFF}Üzerinde bu kadar uyuþturucu yok.\n{FFFFFF}Lütfen bagaja eklemek istediðiniz adeti girin;", "Tamam", "Kapat");
            if(GetPVarInt(playerid, "Bagaj_Esya_Al") == 2 && OyuncuBilgi[playerid][oMaymuncuk] < adet) return DialogGoster(playerid, DIALOG_BAGAJ_EKLEME, DIALOG_STYLE_INPUT, "Bagaj - Eþya Ekleme", "{B70000}HATA: {FFFFFF}Üzerinde bu kadar maymuncuk yok.\n{FFFFFF}Lütfen bagaja eklemek istediðiniz adeti girin;", "Tamam", "Kapat");

			new sorgu[1024];
			switch(GetPVarInt(playerid, "Bagaj_Esya_Al")) {
				case 1: format(sorgu, sizeof(sorgu), "SELECT * FROM `bagaj` WHERE `esyaIsim` = '%s' AND `esyaArac` = '%d'", SQL_ReturnEscaped("Uyuþturucu"), AracBilgi[aracid][aracID]);
				case 2: format(sorgu, sizeof(sorgu), "SELECT * FROM `bagaj` WHERE `esyaIsim` = '%s' AND `esyaArac` = '%d'", SQL_ReturnEscaped("Maymuncuk"), AracBilgi[aracid][aracID]);
			}
			mysql_tquery(mysqlB, sorgu, "BagajEsyaSayiEkle", "dd", playerid, adet);
		}
	}
	else if(dialogid == DIALOG_SILAH_YOKET)
	{
		if(!response) return 0;
	    new silahid, mermi, emote[144];
		for(new i = 0; i < 13; i ++)
		{
			GetPlayerWeaponData(playerid, i, silahid, mermi);
			if(silahid > 0 && OyuncuBilgi[playerid][oSilah][i] == silahid) if(!strcmp(SilahIsim(silahid), inputtext, true)) {
				SilahSil(playerid, silahid);
				format(emote, sizeof(emote), "üzerindeki %s model silahý yok eder.", SilahIsim(silahid));
				cmd_me(playerid, emote);
				return 1;
			}
		}
		HataMesaji(playerid, "Bir sorun oluþtu.");
	}
	else if(dialogid == DIALOG_AKSESUAR)
	{
		if(!response) return 0;
        if(!strcmp(inputtext, "Tümünü Sýfýrla", true)) {
			for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS - 3; i++) if(AksesuarListesi[playerid][i][aksesuarModel] != 0) {
				if(IsPlayerAttachedObjectSlotUsed(playerid, i)) RemovePlayerAttachedObject(playerid, i);
				Aksesuar_Kaldir(playerid, i);
			}
			SunucuMesaji(playerid, "Tüm aksesuar slotlarý sýfýrlandý."), cmd_aksesuar(playerid, inputtext);
            return 1;
        }

		if(AksesuarListesi[playerid][listitem][aksesuarModel] != 0) {
			new icerik[256];
			format(icerik, sizeof(icerik), "%s\nDüzenle\nKonum Seçimi\nKaldýr", (AksesuarListesi[playerid][listitem][aksesuarKullanimda] == 0) ? ("Tak") : ("Çýkar"));
			DialogGoster(playerid, DIALOG_AKSESUAR_DUZENLE, DIALOG_STYLE_LIST, "{FFFFFF}Aksesuar Seçenekleri", icerik, "Seç", "Kapat");
			SetPVarInt(playerid, "AksesuarSecilen", listitem);
		}
		else SunucuMesaji(playerid, "Bu slot boþ."), cmd_aksesuar(playerid, inputtext);
	}
	else if(dialogid == DIALOG_AKSESUAR_ONAY)
	{
	    if(!response) return 0;

	    if(OyuncuBilgi[playerid][oPara] < GetPVarInt(playerid, "AksesuarFiyat")) return HataMesaji(playerid, "Aksesuar fiyatýný karþýlayamýyorsun. (%s)", NumaraFormati(GetPVarInt(playerid, "AksesuarFiyat")));

		new icerik[sizeof(AksesuarKemik) * 256];
		for(new x; x < sizeof(AksesuarKemik); x++) format(icerik, sizeof(icerik), "%s%s\n", icerik, AksesuarKemik[x]);
		DialogGoster(playerid, DIALOG_AKSESUAR_KEMIK, DIALOG_STYLE_LIST, "{FFFFFF}Aksesuar - Konum Seçimi", icerik, "Seç", "Kapat");
	}
	else if(dialogid == DIALOG_AKSESUAR_KEMIK_DUZENLE)
	{
		if(response)
		{
		    new slotid = GetPVarInt(playerid, "AksesuarSecilen");
			AksesuarListesi[playerid][slotid][aksesuarKemik] = listitem + 1;
			Aksesuar_Kaydet(slotid);
			SunucuMesaji(playerid, "Seçtiðiniz aksesuarýn kemiði %s olarak güncellendi.", AksesuarKemik[listitem]);
			Aksesuar_Ayarla(playerid);
		}
		DeletePVar(playerid, "AksesuarSecilen");
		DeletePVar(playerid, "AksesuarSecilenModel");
	}
	else if(dialogid == DIALOG_AKSESUAR_KEMIK)
	{
		if(response)
		{
		    switch(OyuncuBilgi[playerid][oVIP]) {
		        case 1: if(Aksesuar_Sayi(playerid) >= 5) return HataMesaji(playerid, "Daha fazla aksesuar almak için VIP seviyeni yükseltmelisin.");
		        case 2: if(Aksesuar_Sayi(playerid) >= 6) return HataMesaji(playerid, "Daha fazla aksesuar almak için VIP seviyeni yükseltmelisin.");
		        case 3: if(Aksesuar_Sayi(playerid) >= 7) return HataMesaji(playerid, "Daha fazla aksesuar alamazsýn.");
		        default: if(Aksesuar_Sayi(playerid) >= 4) return HataMesaji(playerid, "Daha fazla aksesuar almak için VIP satýn almalýsýn.");
		    }
		    if(GetPVarInt(playerid, "AksesuarFiyat") > 0 && OyuncuBilgi[playerid][oPara] < GetPVarInt(playerid, "AksesuarFiyat")) return HataMesaji(playerid, "Aksesuar fiyatýný karþýlayamýyorsun. (%s)", NumaraFormati(GetPVarInt(playerid, "AksesuarFiyat")));

			if(GetPVarInt(playerid, "AksesuarFiyat") > 0) {
			    if(Oyuncu_Isyerinde(playerid) != -1) {
					new isyeri = Oyuncu_Isyerinde(playerid);
					if(IsyeriBilgi[isyeri][isyeriTur] != 4 && !IsyeriBilgi[isyeri][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
					IsyeriBilgi[isyeri][isyeriKasa] += GetPVarInt(playerid, "AksesuarFiyat");
					IsyeriBilgi[isyeri][isyeriUrun]--;
					Isyeri_Kaydet(isyeri);
			    }
				ParaEkle(playerid, -GetPVarInt(playerid, "AksesuarFiyat"));
			}
			new id = -1;
			id = Aksesuar_Ekle(playerid, listitem + 1, GetPVarInt(playerid, "AksesuarSecilenModel"));
			if(id == -1) return HataMesaji(playerid, "Daha fazla aksesuar alamazsýn.");
		}
		DeletePVar(playerid, "AksesuarSecilen");
		DeletePVar(playerid, "AksesuarSecilenModel");
	}
	else if(dialogid == DIALOG_AKSESUAR_DUZENLE)
	{
		if(!response) return 0;

        if(!strcmp(inputtext, "Tak", true) || !strcmp(inputtext, "Çýkar", true))
		{
			new slotid = GetPVarInt(playerid, "AksesuarSecilen");
			if(AksesuarListesi[playerid][slotid][aksesuarKullanimda])
			{
				SunucuMesaji(playerid, "Aksesuar çýkartýldý.");
				AksesuarListesi[playerid][slotid][aksesuarKullanimda] = 0;
				if(IsPlayerAttachedObjectSlotUsed(playerid, GetPVarInt(playerid, "AksesuarSecilen"))) RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "AksesuarSecilen"));
			}
			else
			{
				AksesuarListesi[playerid][slotid][aksesuarKullanimda] = 1;
				SunucuMesaji(playerid, "Aksesuar takýldý.");

				new Float:pos[9];
				if(IsPlayerAttachedObjectSlotUsed(playerid, slotid)) RemovePlayerAttachedObject(playerid, slotid);
				for(new p = 0; p < 9; p++) pos[p] = AksesuarListesi[playerid][slotid][aksesuarPos][p];
                SetPlayerAttachedObject(playerid, slotid, AksesuarListesi[playerid][slotid][aksesuarModel], AksesuarListesi[playerid][slotid][aksesuarKemik], pos[0], pos[1], pos[2], pos[3], pos[4], pos[5], pos[6], pos[7], pos[8]);
			}
			Aksesuar_Kaydet(playerid);
		}
        else if(!strcmp(inputtext, "Düzenle", true))
		{
			SunucuMesaji(playerid, "{FFFF00}~k~~PED_SPRINT~{FFFFFF} tuþuna basýlý tutarak kamerayý oynatabilirsiniz.");
			EditAttachedObject(playerid, GetPVarInt(playerid, "AksesuarSecilen"));
		}
        else if(!strcmp(inputtext, "Konum Seçimi", true))
		{
			new icerik[sizeof(AksesuarKemik) * 256];
			for(new x; x < sizeof(AksesuarKemik); x++) format(icerik, sizeof(icerik), "%s%s\n", icerik, AksesuarKemik[x]);
			DialogGoster(playerid, DIALOG_AKSESUAR_KEMIK_DUZENLE, DIALOG_STYLE_LIST, "{FFFFFF}Aksesuar - Konum Seçimi", icerik, "Seç", "Kapat");
		}
        else if(!strcmp(inputtext, "Kaldýr", true))
		{
			if(IsPlayerAttachedObjectSlotUsed(playerid, GetPVarInt(playerid, "AksesuarSecilen"))) RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "AksesuarSecilen"));
			Aksesuar_Kaldir(playerid, GetPVarInt(playerid, "AksesuarSecilen"));
			SunucuMesaji(playerid, "Aksesuar kalýcý olarak kaldýrýldý.");
		}
		return 1;
	}
	else if(dialogid == DIALOG_GRAFFITI_RENK) {
		if(!response) return 0;
		
	    new id = Graffiti_Yakin(playerid);
		if(id == -1) return HataMesaji(playerid, "Bir sorun oluþtu.");

	    if(SprayNoktasiKontrol(id)) return HataMesaji(playerid, "Bu graffiti noktasý kullanýmda.");

	    switch (listitem)
	    {
	        case 0: OyuncuBilgi[playerid][oGraffitiRenk] = 0xFFFFFFFF;
	        case 1: OyuncuBilgi[playerid][oGraffitiRenk] = 0xFFFF0000;
	        case 2: OyuncuBilgi[playerid][oGraffitiRenk] = 0xFFFFFF00;
	        case 3: OyuncuBilgi[playerid][oGraffitiRenk] = 0xFF33CC33;
	        case 4: OyuncuBilgi[playerid][oGraffitiRenk] = 0xFF33CCFF;
	        case 5: OyuncuBilgi[playerid][oGraffitiRenk] = 0xFFFFA500;
	        case 6: OyuncuBilgi[playerid][oGraffitiRenk] = 0xFF1394BF;
	    }
	    DialogGoster(playerid, DIALOG_GRAFFITI_YAZI, DIALOG_STYLE_INPUT, "cGraffiti: Yazý Belirle", "Duvara iþlenecek metni aþaðýdaki kutucuða yazýnýz, unutmayýn ki en fazla 64 harf kullanabilirsiniz.", "Düzenle", "Kapat");
	    return 1;
	}
	else if(dialogid == DIALOG_GRAFFITI_YAZI) {
	    if(!response) return 0;
	    
	    new id = Graffiti_Yakin(playerid);
		if(id == -1) return 0;

	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_GRAFFITI_YAZI, DIALOG_STYLE_INPUT, "cGraffiti: Yazý Belirle", "Duvara iþlenecek metni aþaðýdaki kutucuða yazýnýz, unutmayýn ki en fazla 64 harf kullanabilirsiniz.", "Düzenle", "Kapat");
		if(strlen(inputtext) > 64) return DialogGoster(playerid, DIALOG_GRAFFITI_YAZI, DIALOG_STYLE_INPUT, "cGraffiti: Yazý Belirle", "64 harfi aþamazsýn, lütfen daha kýsa bir metin gir.\n\nDuvara iþlenecek metni aþaðýdaki kutucuða yazýnýz, unutmayýn ki en fazla 64 harf kullanabilirsiniz.", "Düzenle", "Kapat");

        if(SprayNoktasiKontrol(id)) return HataMesaji(playerid, "Bu graffiti noktasý kullanýmda.");

        OyuncuBilgi[playerid][oGraffiti] = id;
        OyuncuBilgi[playerid][oGraffitiSure] = 15;

		strpack(OyuncuBilgi[playerid][oGraffitiYazi], inputtext, 64 char);
		AnimOynat2(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0, 1);
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Boyaniyor...~w~ lutfen bekleyin!", 15000, 3);

		cmd_ame(playerid, "sprey boyanýn kapaðýný açar ve duvara püskürtmeye baþlar.");
	}
	else if(dialogid == DIALOG_HITMAN_BIRLIK) {
	    if(!response) return 0;
	
	    if(!strcmp(inputtext, "Birlik Sýfýrla", true)) {
	        if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte deðilsin, bu özelliði kullanamazsýn.");
	        SunucuMesaji(playerid, "Hitman olarak birliðini sýfýrladýn, artýk sivilsin.");
	        BirlikSifirla(playerid);
	        OyuncuKaydet(playerid);
	        return 1;
	    }
	
		new birlikid = strval(inputtext), yazi[1024], ekleme[144];
		BirlikSifirla(playerid);
		OyuncuBilgi[playerid][oBirlik] = birlikid;
		OyuncuBilgi[playerid][oBirlikSQLID] = BirlikBilgi[birlikid][birlikID];
		OyuncuBilgi[playerid][oBirlikRutbe] = 1;
		SunucuMesaji(playerid, "Baþarýyla \"%s\" adlý birliðe geçiþ yaptýn.", BirlikBilgi[birlikid][birlikAd]);
		for(new i = 0; i <= BirlikBilgi[birlikid][birlikMaksRutbe] - 1; i++)
		{
			if(i == 0) continue;
			switch(i) {
				case 1: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR1]);
				case 2: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR2]);
				case 3: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR3]);
				case 4: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR4]);
				case 5: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR5]);
				case 6: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR6]);
				case 7: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR7]);
				case 8: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR8]);
				case 9: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR9]);
				case 10: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR10]);
				case 11: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR11]);
				case 12: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR12]);
				case 13: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR13]);
				case 14: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR14]);
				case 15: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR15]);
				case 16: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR16]);
				case 17: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR17]);
				case 18: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR18]);
				case 19: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR19]);
				case 20: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR20]);
			}
			strcat(yazi, ekleme, sizeof(ekleme));
		}
		DialogGoster(playerid, DIALOG_HITMAN_BIRLIKRUTBE, DIALOG_STYLE_TABLIST, "Hitman: Birlik Rütbesi Seçimi", yazi, "Tamam", "");
	}
	else if(dialogid == DIALOG_HITMAN_BIRLIKRUTBE) {
		OyuncuBilgi[playerid][oBirlikRutbe] = listitem + 1;
		SunucuMesaji(playerid, "Birlik rütben {33aa33}%s {FFFFFF}olarak güncellendi.", OyuncuRutbeAdi(playerid));
		OyuncuKaydet(playerid);
	}
	else if(dialogid == DIALOG_HITMAN_UYELER) {
	    if(!response) return 0;

		if(!strcmp(inputtext, "Üye Ekle", true)) return DialogGoster(playerid, DIALOG_HITMAN_UYEEKLE, DIALOG_STYLE_INPUT, "Hitman - Üye Alýmý", "Lütfen hitmana almak istediðin kiþinin ID'sini veya ismini gir;", "Tamam", "Kapat");

		foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && !strcmp(inputtext, OyuncuIsim(i), true)) {
		    if(i == playerid) return HataMesaji(playerid, "Kendini atamazsýn.");
			OyuncuBilgi[i][oHitman] = 0;
			OyuncuKaydet(i);
			return SunucuMesaji(playerid, "%s adlý kiþiyi hitman üyeliðinden çýkardýn, artýk hitman deðil.", OyuncuIsim(i));
		}
		HataMesaji(playerid, "Seçilen kiþi oyunda deðil veya maskesi takýlý.");
	}
	else if(dialogid == DIALOG_HITMAN_UYEEKLE) {
	    if(!response) return 0;

		new oyuncuid;
		if(sscanf(inputtext, "u", oyuncuid)) return DialogGoster(playerid, DIALOG_HITMAN_UYEEKLE, DIALOG_STYLE_INPUT, "Hitman - Üye Alýmý", "Lütfen hitmana almak istediðin kiþinin ID'sini veya ismini gir;", "Tamam", "Kapat");
	    if(!IsPlayerConnected(oyuncuid) || OyuncuBilgi[oyuncuid][oGiris] == false) return DialogGoster(playerid, DIALOG_HITMAN_UYEEKLE, DIALOG_STYLE_INPUT, "Hitman - Üye Alýmý", "Geçersiz oyuncu veya oyuncu giriþ yapmamýþ.\nLütfen hitmana almak istediðin kiþinin ID'sini veya ismini gir;", "Tamam", "Kapat");
	    if(OyuncuBilgi[oyuncuid][oHitman] != 0) return DialogGoster(playerid, DIALOG_HITMAN_UYEEKLE, DIALOG_STYLE_INPUT, "Hitman - Üye Alýmý", "Bu kiþi zaten hitman.\nLütfen hitmana almak istediðin kiþinin ID'sini veya ismini gir;", "Tamam", "Kapat");

	    OyuncuBilgi[oyuncuid][oHitman] = 1;
	    OyuncuKaydet(oyuncuid);
	    SunucuMesaji(playerid, "%s adlý kiþiyi hitman üyeleri arasýna dahil ettin, kendisine bilgi mesajý gönderilmedi.", OyuncuIsim(oyuncuid));
	}
	else if(dialogid == DIALOG_HITMANDOLAP) {
	    if(!response) return 0;
	
	    if(!strcmp(inputtext, "Ekipmanlar", true)) return DialogGoster(playerid, DIALOG_HITMAN_EKIPMANLAR, DIALOG_STYLE_TABLIST, "Hitman - Ekipmanlar", "Plastik Jop\t-\nBeyzbol Sopasý\t-\nKatana\t-\nColt 45\t119\nDesert Eagle\t70\nShotgun\t70\nSPAS-12\t70\nMP5\t300\nAK-47\t480\nM4\t500\nRifle\t50\nSniper Rifle\t20\n", "Seç", "Kapat");
	    else if(!strcmp(inputtext, "Sahte Level", true)) {
			if(OyuncuBilgi[playerid][oSahteLevel] > 0) return SunucuMesaji(playerid, "Sahte leveliniz silindi, normal levelinizden devam ediyorsunuz."), OyuncuBilgi[playerid][oSahteLevel] = 0;
			return DialogGoster(playerid, DIALOG_HITMAN_SAHTELEVEL, DIALOG_STYLE_INPUT, "Hitman - Sahte Level", "{FFFFFF}Lütfen deðiþtirmek istediðiniz yeni leveli kutuya giriniz, unutmayýnýz ki kendinizden yüksek bir level seçemezsiniz.", "Tamam", "Kapat");
		}
		else if(!strcmp(inputtext, "Sahte Ýsim", true)) {
			if(!isnull(OyuncuBilgi[playerid][oSahteIsim])) return SunucuMesaji(playerid, "Sahte isminiz silindi, kendi isminizi kullanmaya devam edebilirsiniz."), OyuncuBilgi[playerid][oSahteIsim][0] = 0, SetPlayerName(playerid, OyuncuBilgi[playerid][oIsim]);
			return DialogGoster(playerid, DIALOG_HITMAN_SAHTEISIM, DIALOG_STYLE_INPUT, "Hitman - Sahte Ýsim", "{FFFFFF}Lütfen deðiþtirmek istediðiniz yeni ismi aþaðýdaki kutuya giriniz, unutmayýnýz ki sahte isminiz roleplay formatýna uygun olmalýdýr.", "Tamam", "Kapat");
		}
		else if(!strcmp(inputtext, "Silah Sýfýrla", true)) {
			if(GetPlayerWeapon(playerid) != 0) SetPlayerArmedWeapon(playerid, 0);
			SilahlariSifirla(playerid);
			SunucuMesaji(playerid, "Silahlarýn sýfýrlandý.");
		}
	}
	else if(dialogid == DIALOG_HITMAN_SAHTEISIM) {
	    if(!response) return 0;
	    
	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_HITMAN_SAHTEISIM, DIALOG_STYLE_INPUT, "Hitman - Sahte Ýsim", "{FFFFFF}Lütfen deðiþtirmek istediðiniz yeni ismi aþaðýdaki kutuya giriniz, unutmayýnýz ki sahte isminiz roleplay formatýna uygun olmalýdýr.", "Tamam", "Kapat");
        if(!RolePlayIsimKontrol(inputtext)) return DialogGoster(playerid, DIALOG_HITMAN_SAHTEISIM, DIALOG_STYLE_INPUT, "Hitman - Sahte Ýsim", "{B70000}HATA: {FFFFFF}Girdiðiniz isim roleplay formatýna uygun deðildir. (Örnek Format: Micheal_Sherwood)\n{FFFFFF}Lütfen deðiþtirmek istediðiniz yeni ismi aþaðýdaki kutuya giriniz, unutmayýnýz ki sahte isminiz roleplay formatýna uygun olmalýdýr.", "Tamam", "Kapat");
		if(strlen(inputtext) < 3 || strlen(inputtext) > MAX_PLAYER_NAME) return DialogGoster(playerid, DIALOG_HITMAN_SAHTEISIM, DIALOG_STYLE_INPUT, "Hitman - Sahte Ýsim", "{B70000}HATA: {FFFFFF}Girdiðiniz isim en az 3, en fazla 24 harf olmalýdýr.\n{FFFFFF}Lütfen deðiþtirmek istediðiniz yeni ismi aþaðýdaki kutuya giriniz, unutmayýnýz ki sahte isminiz roleplay formatýna uygun olmalýdýr.", "Tamam", "Kapat");

		new sorgu[256], Cache:sorgu_cache;
		format(sorgu, sizeof(sorgu), "SELECT `ID` FROM `oyuncular` WHERE `isim` = '%s' OR `SahteIsim` = '%s' LIMIT 1", SQL_ReturnEscaped(inputtext), SQL_ReturnEscaped(inputtext));
		sorgu_cache = mysql_query(mysqlB, sorgu);
		if(cache_num_rows()) return DialogGoster(playerid, DIALOG_HITMAN_SAHTEISIM, DIALOG_STYLE_INPUT, "Hitman - Sahte Ýsim", "{B70000}HATA: {FFFFFF}Bu isim bir oyuncu veya hitman tarafýndan kullanýmda.\n{FFFFFF}Lütfen deðiþtirmek istediðiniz yeni ismi aþaðýdaki kutuya giriniz, unutmayýnýz ki sahte isminiz roleplay formatýna uygun olmalýdýr.", "Tamam", "Kapat");
		cache_delete(sorgu_cache);

		format(OyuncuBilgi[playerid][oSahteIsim], MAX_PLAYER_NAME, "%s", inputtext);
		SetPlayerName(playerid, OyuncuBilgi[playerid][oSahteIsim]);
		SunucuMesaji(playerid, "Sahte isminizi %s olarak belirlediniz, sýfýrlamak için seçeneðe tekrar týklamanýz yeterlidir.", inputtext);
	}
	else if(dialogid == DIALOG_HITMAN_SAHTELEVEL) {
	    if(!response) return 0;
	    if(OyuncuBilgi[playerid][oSahteLevel] > 0) return 0;
	    
	    new yeni_level;
	    if(sscanf(inputtext, "d", yeni_level)) return DialogGoster(playerid, DIALOG_HITMAN_SAHTELEVEL, DIALOG_STYLE_INPUT, "Hitman - Sahte Level", "{FFFFFF}Lütfen deðiþtirmek istediðiniz yeni leveli kutuya giriniz, unutmayýnýz ki kendinizden yüksek bir level seçemezsiniz.", "Tamam", "Kapat");
		if(yeni_level > OyuncuBilgi[playerid][oSeviye]) return DialogGoster(playerid, DIALOG_HITMAN_SAHTELEVEL, DIALOG_STYLE_INPUT, "Hitman - Sahte Level", "{B70000}HATA: {FFFFFF}Sahte leveliniz kendi seviyenizden yüksek olamaz.\n{FFFFFF}Lütfen deðiþtirmek istediðiniz yeni leveli kutuya giriniz, unutmayýnýz ki kendinizden yüksek bir level seçemezsiniz.", "Tamam", "Kapat");
		if(yeni_level < 3) return DialogGoster(playerid, DIALOG_HITMAN_SAHTELEVEL, DIALOG_STYLE_INPUT, "Hitman - Sahte Level", "{B70000}HATA: {FFFFFF}Sahte leveliniz en az 3 olmalýdýr.\n{FFFFFF}Lütfen deðiþtirmek istediðiniz yeni leveli kutuya giriniz, unutmayýnýz ki kendinizden yüksek bir level seçemezsiniz.", "Tamam", "Kapat");

		OyuncuBilgi[playerid][oSahteLevel] = yeni_level;
		SunucuMesaji(playerid, "Sahte levelinizi %d olarak deðiþtirdiniz, sýfýrlamak için menüden sahte level seçeneðine týklayýnýz.", yeni_level);
	}
	else if(dialogid == DIALOG_HITMAN_EKIPMANLAR) {
	    if(!response) return 0;
	
	    new silah_id = 0, mermi = 0;
	    if(!strcmp(inputtext, "Plastik Jop", true)) silah_id = WEAPON_NITESTICK, mermi = 1;
	    else if(!strcmp(inputtext, "Beyzbol Sopasý", true)) silah_id = WEAPON_BAT, mermi = 1;
	    else if(!strcmp(inputtext, "Katana", true)) silah_id = WEAPON_KATANA, mermi = 1;
	    else if(!strcmp(inputtext, "Colt 45", true)) silah_id = WEAPON_COLT45, mermi = 119;
	    else if(!strcmp(inputtext, "Desert Eagle", true)) silah_id = WEAPON_DEAGLE, mermi = 70;
	    else if(!strcmp(inputtext, "Shotgun", true)) silah_id = WEAPON_SHOTGUN, mermi = 70;
	    else if(!strcmp(inputtext, "SPAS-12", true)) silah_id = WEAPON_SHOTGSPA, mermi = 70;
	    else if(!strcmp(inputtext, "MP5", true)) silah_id = WEAPON_MP5, mermi = 300;
	    else if(!strcmp(inputtext, "AK-47", true)) silah_id = WEAPON_AK47, mermi = 480;
	    else if(!strcmp(inputtext, "M4", true)) silah_id = WEAPON_M4, mermi = 500;
	    else if(!strcmp(inputtext, "Rifle", true)) silah_id = WEAPON_RIFLE, mermi = 50;
	    else if(!strcmp(inputtext, "Sniper Rifle", true)) silah_id = WEAPON_SNIPER, mermi = 20;
	    
	    if(silah_id == 0 && mermi == 0) return HataMesaji(playerid, "Bir sorun oluþtu, lütfen tekrar deneyin.");
	    if(SilahSlotKontrol(playerid, SilahSlotBul[silah_id]) && SilahSlotBul[silah_id] != 0) return HataMesaji(playerid, "Bu silah türü sizde bulunduðu için bu ekipmaný alamýyorsunuz.");
	    else Silahver(playerid, silah_id, mermi);
	    silah_id = 0, mermi = 0;
	    SunucuMesaji(playerid, "Hitman ekipman dolabýndan \"%s\" aldýn.", inputtext);
	}
	else if(dialogid == DIALOG_KONTRAKT) {
	    if(!response) return 0;

	    if(!strcmp(inputtext, "Kontrakt Listesi", true)) {
	        new icerik[1024], sayi = 0;
         	format(icerik, sizeof(icerik), "ID\tÝsim\tÜcret\n");
		    for(new i = 0; i != MAKSIMUM_KONTRAKT; i++) if(KontraktVeri[i][kontraktKullanimda] == true) {
		        format(icerik, sizeof(icerik), "%s%d\t%s\t%s\n", icerik, i, KontraktVeri[i][kontraktIsim], NumaraFormati(KontraktVeri[i][kontraktUcret])), sayi++;
			}
			if(sayi < 1) return HataMesaji(playerid, "Aktif kontrakt bulunmuyor."), cmd_kontrakt(playerid, "");
			DialogGoster(playerid, DIALOG_KONTRAKTLAR, DIALOG_STYLE_TABLIST_HEADERS, "Hitman: Kontrakt Listesi", icerik, "Seç", "Kapat");
			return 1;
	    }
	    else if(!strcmp(inputtext, "Üyeler", true)) {
		    new sorgu[128];
			format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE Hitman > 0 ORDER BY Hitman DESC");
			mysql_tquery(mysqlB, sorgu, "Hitman_UyeArat", "d", playerid);
			return 1;
	    }
	}
	else if(dialogid == DIALOG_KONTRAKTLAR) {
		if(!response) return 0;

		SetPVarInt(playerid, "kontrakt_id", strval(inputtext));
		DialogGoster(playerid, DIALOG_KONTRAKT_DUZENLE, DIALOG_STYLE_TABLIST, "Hitman: Kontrakt Düzenle", "Fiyat Düzenle\nKaldýr", "Seç", "Kapat");
	}
	else if(dialogid == DIALOG_KONTRAKT_EKLE) {
		if(!response) return 0;

		if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_KONTRAKT_EKLE, DIALOG_STYLE_INPUT, "Hitman: Kontrakt Tut", "{FFFFFF}Lütfen kontrakt oluþturmak istediðiniz kiþinin adýný paylaþýn;", "Tamam", "Kapat");

		SetPVarString(playerid, "kontrakt_isim", inputtext);
		DialogGoster(playerid, DIALOG_KONTRAKT_UCRET, DIALOG_STYLE_INPUT, "Kontrakt: Ücret Belirle", "{FFFFFF}Lütfen kontrakta eklemek istediðiniz fiyatý girin;", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_KONTRAKT_UCRET) {
	    if(!response) return 0;

	    new ucret;
	    if(sscanf(inputtext, "d", ucret)) return DialogGoster(playerid, DIALOG_KONTRAKT_UCRET, DIALOG_STYLE_INPUT, "Kontrakt: Ücret Belirle", "{FFFFFF}Lütfen kontrakta eklemek istediðiniz fiyatý girin;", "Tamam", "Kapat");
	    if(ucret < 150000) return DialogGoster(playerid, DIALOG_KONTRAKT_UCRET, DIALOG_STYLE_INPUT, "Kontrakt: Ücret Belirle", "{b70000}HATA: {FFFFFF}Girilen ücret en az {33aa33}$150,000 {FFFFFF}olmalýdýr.\n{FFFFFF}Lütfen kontrakta eklemek istediðiniz fiyatý girin.", "Tamam", "Kapat");
        if(ucret > 5000000) return DialogGoster(playerid, DIALOG_KONTRAKT_UCRET, DIALOG_STYLE_INPUT, "Kontrakt: Ücret Belirle", "{b70000}HATA: {FFFFFF}Girilen ücret en fazla {33aa33}$5,000,000 {FFFFFF}olmalýdýr.\n{FFFFFF}Lütfen kontrakta eklemek istediðiniz fiyatý girin.", "Tamam", "Kapat");

		new sorgu[128], isim[MAX_PLAYER_NAME + 1];
		GetPVarString(playerid, "kontrakt_isim", isim, sizeof(isim));
		format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE isim = '%s' LIMIT 1", isim);
		mysql_tquery(mysqlB, sorgu, "Hitman_KontraktKontrol", "dd", playerid, ucret);
	}
	else if(dialogid == DIALOG_KONTRAKT_DUZENLE) {
	    if(!response) return 0;
	    new id = GetPVarInt(playerid, "kontrakt_id");
	    if(!strcmp(inputtext, "Fiyat Düzenle", true)) {
	        if(!IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Bu seçeneði sadece management kullanabilir.");
			DialogGoster(playerid, DIALOG_KONTRAKT_YENIFIYAT, DIALOG_STYLE_INPUT, "Kontrakt - Ücret", "Lütfen kontraktýn yeni ücretini girin;", "Düzenle", "Kapat");
		}
		else if(!strcmp(inputtext, "Kaldýr", true)) {
	        Kontrakt_Kaldir(id);
	        SunucuMesaji(playerid, "Kontrakt (#%d) baþarýyla kaldýrýldý.", id);
	        DeletePVar(playerid, "kontrakt_id");
	    }
	}
	else if(dialogid == DIALOG_KONTRAKT_YENIFIYAT) {
	    if(!response) return 0;

	    new ucret;
	    if(sscanf(inputtext, "d", ucret)) return DialogGoster(playerid, DIALOG_KONTRAKT_YENIFIYAT, DIALOG_STYLE_INPUT, "Kontrakt - Ücret", "Lütfen kontraktýn yeni ücretini girin;", "Düzenle", "Kapat");
	    if(ucret < 0) return DialogGoster(playerid, DIALOG_KONTRAKT_YENIFIYAT, DIALOG_STYLE_INPUT, "Kontrakt - Ücret", "{B70000}HATA: {FFFFFF}Ücret en az $0 olmalýdýr.\nLütfen kontraktýn yeni ücretini girin;", "Düzenle", "Kapat");

	    new id = GetPVarInt(playerid, "kontrakt_id");
	    KontraktVeri[id][kontraktUcret] = ucret;
	    Kontrakt_Kaydet(id);
	    SunucuMesaji(playerid, "Kontraktýn (#%d) ücreti %s olarak deðiþtirildi.", id, NumaraFormati(ucret));
	    DeletePVar(playerid, "kontrakt_id");
	}
	else if(dialogid == DIALOG_GATELERIM) {
		if(!response) return 0;

		SetPVarInt(playerid, "gate_secim", strval(inputtext));
		DialogGoster(playerid, DIALOG_GATELERIM_DUZENLE, DIALOG_STYLE_TABLIST, "Gate - Düzenle", "Lokasyon Bul\nParola Deðiþtir\n{B70000}Sil", "Seç", "Kapat");
	}
	else if(dialogid == DIALOG_GATELERIM_DUZENLE) {
	    if(!response) return 0;

	    new id = GetPVarInt(playerid, "gate_secim");
	    if(GateBilgi[id][gateKullanimda] == false) return HataMesaji(playerid, "Bir sorun oluþtu.");

	    if(!strcmp(inputtext, "Lokasyon Bul", true)) {
	        if(GateBilgi[id][gateInterior] != 0 || GateBilgi[id][gateWorld] != 0) return HataMesaji(playerid, "Girilen gate bir interiorda, yeri bulunamaz.");

	        SetPlayerCheckpoint(playerid, GateBilgi[id][gatePos][0], GateBilgi[id][gatePos][1], GateBilgi[id][gatePos][2], 5.0);
	        SunucuMesaji(playerid, "Gate haritanda iþaretlendi.");
	    }
	    else if(!strcmp(inputtext, "Parola Deðiþtir", true)) return DialogGoster(playerid, DIALOG_GATE_PAROLADUZENLE, DIALOG_STYLE_INPUT, "Gate - Parola Deðiþtir", "{FFFFFF}Lütfen gatenizin yeni parolasýný aþaðýya girin, parola 6 karakterden ve sadece sayýlardan oluþabilir. (000000 - 999999)\n\n{B70000}NOT: {FFFFFF}\"Yok\" yazarak parolayý kaldýrabilirsin.", "Tamam", "Kapat");
	    else if(!strcmp(inputtext, "Sil", true)) {
		    SetPVarInt(playerid, "SilmeOnay", id);
		    new mesaj[144];
		    format(mesaj, sizeof(mesaj), "%s ID'li gateni, %dTL geri ödeme alarak silmek üzeresin, onaylýyor musun?", id, GATE_SIL_IADE);
		    DialogGoster(playerid, DIALOG_GATESIL_ONAY, DIALOG_STYLE_MSGBOX, "Gate Sil", mesaj, "Evet", "Hayýr");
		}
	}
	else if(dialogid == DIALOG_GATE_PAROLADUZENLE) {
		if(!response) return 0;

		if(!strcmp(inputtext, "Yok", true)) {
		    new id = GetPVarInt(playerid, "gate_secim");
		    if(GateBilgi[id][gateKullanimda] == false) return HataMesaji(playerid, "Bir sorun oluþtu.");
			if(GateBilgi[id][gateSahip] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Gatenin sahibi olmadýðýn için iþlem iptal edildi.");

			GateBilgi[id][gateParola] = 0;
			SunucuMesaji(playerid, "%d ID'li gatenin parolasý kaldýrýldý.", id);
			Gate_Kaydet(id);
			return 1;
		}
		new parola;
		if(sscanf(inputtext, "d", parola)) return DialogGoster(playerid, DIALOG_GATE_PAROLADUZENLE, DIALOG_STYLE_INPUT, "Gate - Parola Deðiþtir", "{FFFFFF}Lütfen gatenizin yeni parolasýný aþaðýya girin, parola 6 karakterden ve sadece sayýlardan oluþabilir. (000000 - 999999)\n\n{B70000}NOT: {FFFFFF}\"Yok\" yazarak parolayý kaldýrabilirsin.", "Tamam", "Kapat");
		if(parola < 000000 || parola > 999999) return DialogGoster(playerid, DIALOG_GATE_PAROLADUZENLE, DIALOG_STYLE_INPUT, "Gate - Parola", "{B70000}HATA: {FFFFFF}Girilen parola geçersiz.\n\n{FFFFFF}Lütfen gatenizin yeni parolasýný aþaðýya girin, parola 6 karakterden ve sadece sayýlardan oluþabilir. (000000 - 999999)\n\n{B70000}NOT: {FFFFFF}\"Yok\" yazarak parolayý kaldýrabilirsin.", "Tamam", "Kapat");

	    new id = GetPVarInt(playerid, "gate_secim");
	    if(GateBilgi[id][gateKullanimda] == false) return HataMesaji(playerid, "Bir sorun oluþtu.");
		if(GateBilgi[id][gateSahip] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Gatenin sahibi olmadýðýn için iþlem iptal edildi.");

		GateBilgi[id][gateParola] = parola;
		SunucuMesaji(playerid, "%d ID'li gatenin parolasý \"%d\" olarak güncellendi.", id, parola);
		Gate_Kaydet(id);
	}
	else if(dialogid == DIALOG_GATE_PAROLA) {
		if(!response) return 0;

		new parola;
		if(sscanf(inputtext, "d", parola)) return DialogGoster(playerid, DIALOG_GATE_PAROLA, DIALOG_STYLE_INPUT, "Gate - Parola", "{FFFFFF}Lütfen aþaðýdaki kutuya gate parolasýný girin;", "Tamam", "Kapat");
		if(parola < 000000 || parola > 999999) return DialogGoster(playerid, DIALOG_GATE_PAROLA, DIALOG_STYLE_INPUT, "Gate - Parola", "{B70000}HATA: {FFFFFF}Girilen parola geçersiz.\nLütfen aþaðýdaki kutuya gate parolasýný girin;", "Tamam", "Kapat");

		new id = Gate_Yakin(playerid);
		if(id == -1) return HataMesaji(playerid, "Gateden uzaklaþtýðýn için iþlem iptal edildi.");
		if(GateBilgi[id][gateParola] != parola) return DialogGoster(playerid, DIALOG_GATE_PAROLA, DIALOG_STYLE_INPUT, "Gate - Parola", "{B70000}HATA: {FFFFFF}Girilen parola yanlýþ.\nLütfen aþaðýdaki kutuya gate parolasýný girin;", "Tamam", "Kapat");

		Gate_Durum_Degistir(id);
	}
	else if(dialogid == DIALOG_ENVANTER) {
	    if(!response) return 0;
	    new bilgi[512];
		if(!strcmp(inputtext, "Telefon", true)) return cmd_telefon(playerid, "");
		else if(!strcmp(inputtext, "Tamir Kiti", true)) return cmd_tamirkiti(playerid, "");
		else if(!strcmp(inputtext, "Ýp", true)) return cmd_ipbagla(playerid, "");
		else if(!strcmp(inputtext, "Ýlk Yardým Kiti", true)) return cmd_ilkyardim(playerid, "");
		else if(!strcmp(inputtext, "Odun", true)) return cmd_kampatesi(playerid, "");
		else if(!strcmp(inputtext, "Saksý", true) || !strcmp(inputtext, "Uyuþturucu", true) || !strcmp(inputtext, "Tohum", true)) return cmd_uyusturucu(playerid, "");
		else if(!strcmp(inputtext, "Bidon", true)) return cmd_bidon(playerid, "");
		else if(!strcmp(inputtext, "Maymuncuk", true)) return cmd_maymuncuk(playerid, "");
		else if(!strcmp(inputtext, "GPS", true)) return cmd_gps(playerid, "");
		else if(!strcmp(inputtext, "Ýþlenmemiþ Madde", true)) {
			if(IsPlayerInRangeOfPoint(playerid, 5.0, 769.40, -335.17, 715.62)) return cmd_uisle(playerid, "");
			else return UyariMesaji(playerid, "Laboratuvar'a yakýn deðilsin, maddeleri iþlemek için laboratuvara gitmelisin.");
		}
		else if(!strcmp(inputtext, "Portatif Radyo", true)) {
			format(bilgi, sizeof(bilgi), "{FFFFFF}Lütfen geçmek istediðiniz frekansý giriniz;\n\n{33aa33}Güncel Frekans: {FFFFFF}#%d\n\n{B70000}UYARI: {FFFFFF}Frekans 1-999999 aralýðýnda olmalýdýr.", OyuncuBilgi[playerid][oFrekans]);
			return DialogGoster(playerid, DIALOG_PRADYO_FREKANS, DIALOG_STYLE_INPUT, "Portatif Radyo - Frekans", bilgi, "Deðiþtir", "Kapat");
		}
		/*else if(!strcmp(inputtext, "Materyal", true)) {
		    format(bilgi, sizeof(bilgi), "{33AA33}Üzerinizdeki Materyal: {FFFFFF}%s\n\n{FFFFFF}Lütfen satmak istediðiniz materyal miktarýný girin;", NumaraFormati(OyuncuBilgi[playerid][oMateryal], ""));
		    return DialogGoster(playerid, DIALOG_MATERYAL_MIKTAR, DIALOG_STYLE_INPUT, "Materyal - Sat", bilgi, "Devam", "Kapat");
		}*/
	}
	/*else if(dialogid == DIALOG_MATERYAL_MIKTAR) {
	    if(!response) return 0;
	    
        new materyal, bilgi[512];
	    if(sscanf(inputtext, "d", materyal)) {
		    format(bilgi, sizeof(bilgi), "{33AA33}Üzerinizdeki Materyal: {FFFFFF}%s\n\n{FFFFFF}Lütfen satmak istediðiniz materyal miktarýný girin;", NumaraFormati(OyuncuBilgi[playerid][oMateryal], ""));
		    return DialogGoster(playerid, DIALOG_MATERYAL_MIKTAR, DIALOG_STYLE_INPUT, "Materyal - Sat", bilgi, "Devam", "Kapat");
	    }
	    if(materyal < 1 || materyal > OyuncuBilgi[playerid][oMateryal]) {
		    format(bilgi, sizeof(bilgi), "{B70000}HATA: {FFFFFF}Üzerinizde bu kadar materyal bulunmuyor veya geçersiz sayý girdiniz.\n\n{33AA33}Üzerinizdeki Materyal: {FFFFFF}%s\n\n{FFFFFF}Lütfen satmak istediðiniz materyal miktarýný girin;", NumaraFormati(OyuncuBilgi[playerid][oMateryal], ""));
		    return DialogGoster(playerid, DIALOG_MATERYAL_MIKTAR, DIALOG_STYLE_INPUT, "Materyal - Sat", bilgi, "Devam", "Kapat");
	    }
	    OyuncuBilgi[playerid][oMateryalSat][0] = materyal;
	    format(bilgi, sizeof(bilgi), "{33AA33}Satacaðýnýz Materyal: {FFFFFF}%s\n\n{FFFFFF}Lütfen bu materyalleri satmak istediðiniz fiyatý girin;\n\n{B70000}UYARI: {FFFFFF}Fiyat $0 belirlenirse ücretsiz verebilirsiniz.", NumaraFormati(OyuncuBilgi[playerid][oMateryalSat][0], ""));
	    DialogGoster(playerid, DIALOG_MATERYAL_FIYAT, DIALOG_STYLE_INPUT, "Materyal - Sat", bilgi, "Devam", "Kapat");
	    return 1;
	}
	else if(dialogid == DIALOG_MATERYAL_FIYAT) {
	    if(!response) return 0;

        new fiyat, bilgi[512];
	    if(sscanf(inputtext, "d", fiyat)) {
		    format(bilgi, sizeof(bilgi), "{33AA33}Satacaðýnýz Materyal: {FFFFFF}%s\n\n{FFFFFF}Lütfen bu materyalleri satmak istediðiniz fiyatý girin;\n\n{B70000}UYARI: {FFFFFF}Fiyat $0 belirlenirse ücretsiz verebilirsiniz.", NumaraFormati(OyuncuBilgi[playerid][oMateryalSat][0], ""));
		    return DialogGoster(playerid, DIALOG_MATERYAL_FIYAT, DIALOG_STYLE_INPUT, "Materyal - Sat", bilgi, "Devam", "Kapat");
	    }
	    if(fiyat < 0) {
		    format(bilgi, sizeof(bilgi), "{B70000}HATA: {FFFFFF}Geçersiz fiyat belirlediniz.\n\n{33AA33}Satacaðýnýz Materyal: {FFFFFF}%s\n\n{FFFFFF}Lütfen bu materyalleri satmak istediðiniz fiyatý girin;\n\n{B70000}UYARI: {FFFFFF}Fiyat $0 belirlenirse ücretsiz verebilirsiniz.", NumaraFormati(OyuncuBilgi[playerid][oMateryalSat][0], ""));
		    return DialogGoster(playerid, DIALOG_MATERYAL_FIYAT, DIALOG_STYLE_INPUT, "Materyal - Sat", bilgi, "Devam", "Kapat");
	    }
	    OyuncuBilgi[playerid][oMateryalSat][1] = fiyat;
	    format(bilgi, sizeof(bilgi), "{33AA33}Satacaðýnýz Materyal: {FFFFFF}%s ({33aa33}%s)\n\n{FFFFFF}Lütfen bu materyali satmak istediðiniz oyuncunun ID'sini veya ismini girin;", NumaraFormati(OyuncuBilgi[playerid][oMateryalSat][0], ""), NumaraFormati(OyuncuBilgi[playerid][oMateryalSat][1]));
	    DialogGoster(playerid, DIALOG_MATERYAL_OYUNCU, DIALOG_STYLE_INPUT, "Materyal - Sat", bilgi, "Devam", "Kapat");
	    return 1;
	}
	else if(dialogid == DIALOG_MATERYAL_OYUNCU) {
		if(!response) return 0;
	
	    new oyuncuid, bilgi[512];
	    if(sscanf(inputtext, "u", oyuncuid)) {
		    format(bilgi, sizeof(bilgi), "{33AA33}Satacaðýnýz Materyal: {FFFFFF}%s ({33aa33}%s)\n\n{FFFFFF}Lütfen bu materyali satmak istediðiniz oyuncunun ID'sini veya ismini girin;", NumaraFormati(OyuncuBilgi[playerid][oMateryalSat][0], ""), NumaraFormati(OyuncuBilgi[playerid][oMateryalSat][1]));
		    return DialogGoster(playerid, DIALOG_MATERYAL_OYUNCU, DIALOG_STYLE_INPUT, "Materyal - Sat", bilgi, "Devam", "Kapat");
	    }
	    if(!IsPlayerConnected(oyuncuid)) {
		    format(bilgi, sizeof(bilgi), "{B70000}HATA: {FFFFFF}Geçersiz oyuncu girdiniz.\n\n{33AA33}Satacaðýnýz Materyal: {FFFFFF}%s ({33aa33}%s)\n\n{FFFFFF}Lütfen bu materyali satmak istediðiniz oyuncunun ID'sini veya ismini girin;", NumaraFormati(OyuncuBilgi[playerid][oMateryalSat][0], ""), NumaraFormati(OyuncuBilgi[playerid][oMateryalSat][1]));
		    return DialogGoster(playerid, DIALOG_MATERYAL_OYUNCU, DIALOG_STYLE_INPUT, "Materyal - Sat", bilgi, "Devam", "Kapat");
	    }
 	    if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) {
		    format(bilgi, sizeof(bilgi), "{B70000}HATA: {FFFFFF}Belirlediðiniz oyuncuya yakýn deðilsiniz.\n\n{33AA33}Satacaðýnýz Materyal: {FFFFFF}%s ({33aa33}%s)\n\n{FFFFFF}Lütfen bu materyali satmak istediðiniz oyuncunun ID'sini veya ismini girin;", NumaraFormati(OyuncuBilgi[playerid][oMateryalSat][0], ""), NumaraFormati(OyuncuBilgi[playerid][oMateryalSat][1]));
		    return DialogGoster(playerid, DIALOG_MATERYAL_OYUNCU, DIALOG_STYLE_INPUT, "Materyal - Sat", bilgi, "Devam", "Kapat");
	    }
	    if(OyuncuBilgi[playerid][oMateryal] < OyuncuBilgi[playerid][oMateryalSat][0]) return HataMesaji(playerid, "Bir sorun oluþtu, iþleminiz iptal edildi.");
	    if(OyuncuBilgi[playerid][oMateryalSat][1] == 0) {
	        OyuncuBilgi[playerid][oMateryal] -= OyuncuBilgi[playerid][oMateryalSat][0];
	        OyuncuBilgi[oyuncuid][oMateryal] += OyuncuBilgi[playerid][oMateryalSat][0];
	        OyuncuKaydet(oyuncuid);
	        OyuncuKaydet(playerid);
	        new emote[128 + MAX_PLAYER_NAME];
	        format(emote, sizeof(emote), "%s adlý kiþiye materyal verdi.", OyuncuIsim(oyuncuid));
	        return cmd_me(playerid, emote);
	    }
		if(OyuncuBilgi[oyuncuid][oMateryalSat][2] != INVALID_PLAYER_ID) {
		    format(bilgi, sizeof(bilgi), "{B70000}HATA: {FFFFFF}Belirlediðiniz oyuncu baþka bir satýþ iþleminde.\n\n{33AA33}Satacaðýnýz Materyal: {FFFFFF}%s ({33aa33}%s)\n\n{FFFFFF}Lütfen bu materyali satmak istediðiniz oyuncunun ID'sini veya ismini girin;", NumaraFormati(OyuncuBilgi[playerid][oMateryalSat][0], ""), NumaraFormati(OyuncuBilgi[playerid][oMateryalSat][1]));
		    return DialogGoster(playerid, DIALOG_MATERYAL_OYUNCU, DIALOG_STYLE_INPUT, "Materyal - Sat", bilgi, "Devam", "Kapat");
		}
	    OyuncuBilgi[playerid][oMateryalSat][2] = oyuncuid;
	    OyuncuBilgi[oyuncuid][oMateryalSat][2] = playerid;
	    format(bilgi, sizeof(bilgi), "{FFFFFF}%s adlý kiþi size materyal satmak istiyor, kabul ediyor musunuz?\n\n{33AA33}Satýlan Materyal: {FFFFFF}%s ({33aa33}%s)", OyuncuIsim(playerid), NumaraFormati(OyuncuBilgi[playerid][oMateryalSat][0], ""), NumaraFormati(OyuncuBilgi[playerid][oMateryalSat][1]));
	    return DialogGoster(oyuncuid, DIALOG_MATERYAL_ONAYLA, DIALOG_STYLE_MSGBOX, "Materyal - Satým", bilgi, "Evet", "Hayýr");
	}
	else if(dialogid == DIALOG_MATERYAL_ONAYLA) {
	    if(!response) {
			OyuncuBilgi[playerid][oMateryalSat][2] = INVALID_PLAYER_ID;
		    new oyuncuid = OyuncuBilgi[playerid][oMateryalSat][2];
		    if(IsPlayerConnected(oyuncuid)) OyuncuBilgi[oyuncuid][oMateryalSat][2] = INVALID_PLAYER_ID;
		    return 1;
	    }
	    new oyuncuid = OyuncuBilgi[playerid][oMateryalSat][2];
	    if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Bir sorun oluþtu.");
	    new fiyat = OyuncuBilgi[oyuncuid][oMateryalSat][1], miktar = OyuncuBilgi[oyuncuid][oMateryalSat][0];
	    if(fiyat < 1 || miktar < 1) return HataMesaji(playerid, "Bir sorun oluþtu."), OyuncuBilgi[playerid][oMateryalSat][2] = INVALID_PLAYER_ID, OyuncuBilgi[oyuncuid][oMateryalSat][2] = INVALID_PLAYER_ID;
	    if(OyuncuBilgi[playerid][oPara] < fiyat) return HataMesaji(playerid, "Ücreti karþýlayamadýðýn için iþlem iptal edildi."), HataMesaji(oyuncuid, "Oyuncunun yeterli parasý olmadýðý için iþlem iptal edildi."), OyuncuBilgi[playerid][oMateryalSat][2] = INVALID_PLAYER_ID, OyuncuBilgi[oyuncuid][oMateryalSat][2] = INVALID_PLAYER_ID;

		ParaEkle(playerid, -fiyat);
		ParaEkle(oyuncuid, fiyat);
		OyuncuBilgi[oyuncuid][oMateryal] -= miktar;
		OyuncuBilgi[playerid][oMateryal] += miktar;
		OyuncuKaydet(playerid);
		OyuncuKaydet(oyuncuid);
		new emote[128 + MAX_PLAYER_NAME];
		format(emote, sizeof(emote), "%s adlý kiþiye bir miktar materyal sattý.", OyuncuIsim(playerid));
		cmd_me(oyuncuid, emote);
		return OyuncuBilgi[playerid][oMateryalSat][2] = INVALID_PLAYER_ID, OyuncuBilgi[oyuncuid][oMateryalSat][2] = INVALID_PLAYER_ID;
	}*/
	else if(dialogid == DIALOG_PRADYO_FREKANS) {
	    if(!response) return 0;
	    
		new frekans, icerik[512];
		if(sscanf(inputtext, "d", frekans) || frekans < 1 || frekans > 999999) {
			format(icerik, sizeof(icerik), "{FFFFFF}Lütfen geçmek istediðiniz frekansý giriniz;\n\n{33aa33}Güncel Frekans: {FFFFFF}#%d\n\n{B70000}UYARI: {FFFFFF}Frekans 1-999999 aralýðýnda olmalýdýr.", OyuncuBilgi[playerid][oFrekans]);
			return DialogGoster(playerid, DIALOG_PRADYO_FREKANS, DIALOG_STYLE_INPUT, "Portatif Radyo - Frekans", icerik, "Deðiþtir", "Kapat");
		}
		if(frekans == 911 && OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) {
			format(icerik, sizeof(icerik), "{B70000}HATA: {FFFFFF}Bu frekansa geçiþ yetkiniz bulunmuyor.\n\n{FFFFFF}Lütfen geçmek istediðiniz frekansý giriniz;\n\n{33aa33}Güncel Frekans: {FFFFFF}#%d\n\n{B70000}UYARI: {FFFFFF}Frekans 1-999999 aralýðýnda olmalýdýr.", OyuncuBilgi[playerid][oFrekans]);
			return DialogGoster(playerid, DIALOG_PRADYO_FREKANS, DIALOG_STYLE_INPUT, "Portatif Radyo - Frekans", icerik, "Deðiþtir", "Kapat");
		}
		cmd_frekans(playerid, inputtext);
	}
	else if(dialogid == DIALOG_VPMARKET) {
	    if(!response) return 0;

		new vigapoint = 0;
		if(!strcmp(inputtext, "Silah Hakký", true)) {
			if(OyuncuBilgi[playerid][oVPoint] < VRP_SILAHHAKKI) return HataMesaji(playerid, "Seçtiðiniz ürünün Viga Point deðerine sahip deðilsiniz.");

			vigapoint = VRP_SILAHHAKKI;
			OyuncuBilgi[playerid][oSilahHakki]++;
		}
		else if(!strcmp(inputtext, "Kilometre Sýfýrlama", true)) {
		    if(OyuncuBilgi[playerid][oVPoint] < VRP_KMSIFIRLA) return HataMesaji(playerid, "Seçtiðiniz ürünün Viga Point deðerine sahip deðilsiniz.");
			if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Araç kullanmýyorsun.");

			new id = Arac_IDBul(GetPlayerVehicleID(playerid));
			if(!Arac_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Sürdüðün araç senin deðil.");

            vigapoint = VRP_KMSIFIRLA;
			AracBilgi[id][aracKM] = 0.0;
			Arac_Kaydet(id);
		}
		else if(!strcmp(inputtext, "Maske Kullanýmý", true)) {
		    if(OyuncuBilgi[playerid][oVPoint] < VRP_MASKEHAKKI) return HataMesaji(playerid, "Seçtiðiniz ürünün Viga Point deðerine sahip deðilsiniz.");
			if(OyuncuBilgi[playerid][oMaske] == 1) return HataMesaji(playerid, "Maske kullanýmý ürünün bu karakterinde bulunuyor.");

            vigapoint = VRP_MASKEHAKKI;
			OyuncuBilgi[playerid][oMaske] = 1;
			if(OyuncuBilgi[playerid][oMaskeID] == 0) {
				new maskeno = randomEx(10000, 99999), sorgu[256];
				format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE MaskeID = '%d'", maskeno);
				mysql_tquery(mysqlB, sorgu, "Maske_Sorgula", "dd", playerid, maskeno);
			}
			OyuncuKaydet(playerid);
		}
		else if(!strcmp(inputtext, "Özel Telefon Numarasý", true)) {
		    if(OyuncuBilgi[playerid][oVPoint] < VRP_OZELNUMARA) return HataMesaji(playerid, "Seçtiðiniz ürünün Viga Point deðerine sahip deðilsiniz.");
		    if(OyuncuBilgi[playerid][oTelefon] == 0) return HataMesaji(playerid, "Telefonun yok, ürün kullanmak için öncelikle telefon almalýsýn.");

			return DialogGoster(playerid, DIALOG_VNMARKET_OZELNUMARA, DIALOG_STYLE_INPUT, "vRP: Özel Telefon Numarasý", "{FFFFFF}Aþaðýdaki kutuya deðiþtirmek istediðiniz numarayý girin;\n\n{B70000}NOT: {FFFFFF}Yeni numaranýz 4 harfli sayýlardan oluþmalýdýr.", "Tamam", "Kapat");
		}
		else if(!strcmp(inputtext, "Bronz VIP - 15 Gün", true)) {
			if(OyuncuBilgi[playerid][oVPoint] < VRP_BRONZVIP) return HataMesaji(playerid, "Seçtiðiniz ürünün Viga Point deðerine sahip deðilsiniz.");
			if(OyuncuBilgi[playerid][oVIP] > 0) return HataMesaji(playerid, "Hesabýnda Bronz veya üzeri bir VIP seviyesine sahipsin, ürünü almak için vip sürenin bitmesini bekle.");

            vigapoint = VRP_BRONZVIP;
			OyuncuBilgi[playerid][oVIP] = 1;
			new gun = 15 * 86400;
			OyuncuBilgi[playerid][oVIPSure] = gettime() + gun;
		}
		else if(!strcmp(inputtext, "Gümüþ VIP - 15 Gün", true)) {
			if(OyuncuBilgi[playerid][oVPoint] < VRP_GUMUSVIP) return HataMesaji(playerid, "Seçtiðiniz ürünün Viga Point deðerine sahip deðilsiniz.");
			if(OyuncuBilgi[playerid][oVIP] >= 2) return HataMesaji(playerid, "Hesabýnda Silver veya üzeri bir VIP seviyesine sahipsin, ürünü almak için vip sürenin bitmesini bekle.");

            vigapoint = VRP_GUMUSVIP;
			OyuncuBilgi[playerid][oVIP] = 2;
			new gun = 15 * 86400;
			OyuncuBilgi[playerid][oVIPSure] = gettime() + gun;
		}
		else if(!strcmp(inputtext, "Altýn VIP - 10 Gün", true)) {
			if(OyuncuBilgi[playerid][oVPoint] < VRP_ALTINVIP) return HataMesaji(playerid, "Seçtiðiniz ürünün Viga Point deðerine sahip deðilsiniz.");
			if(OyuncuBilgi[playerid][oVIP] == 3) return HataMesaji(playerid, "Hesabýnda Altýn VIP ürününe sahipsin, ürünü almak için vip sürenin bitmesini bekle.");

            vigapoint = VRP_ALTINVIP;
			OyuncuBilgi[playerid][oVIP] = 3;
			new gun = 10 * 86400;
			OyuncuBilgi[playerid][oVIPSure] = gettime() + gun;
		}
		
		if(vigapoint > 0) {
			OyuncuBilgi[playerid][oVPoint] -= vigapoint;
			SunucuMesaji(playerid, "Marketten %sVP ödeyerek %s satýn aldýn.", NumaraFormati(vigapoint, ""), inputtext);
	        if(!strcmp(inputtext, "Maske Kullanýmý", true)) SunucuMesaji(playerid, "Maske Kullanýmý ürününü kullandýn, /maske komutu artýk bu karakterinde kullanýlabilir.");
	        if(!strcmp(inputtext, "Bronz VIP - 15 Gün", true)) SunucuMesaji(playerid, "%s ürününü satýn aldýn, ek özellikler açýldý.", inputtext);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) VN marketten %s satýn aldý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], inputtext);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/vinemarket.txt", "%s", log_icerik);
		}
	}
	else if(dialogid == DIALOG_OOCMARKET) {
		if(!response) return 0;
		if(!strcmp(inputtext, "Envanter", true)) {
			new sorgu[256 + MAX_PLAYER_NAME];
			format(sorgu, sizeof(sorgu), "SELECT * FROM `urunler` WHERE `Sahip` = '%d'", OyuncuBilgi[playerid][oHesap]);
			mysql_tquery(mysqlB, sorgu, "Market_Envanter", "i", playerid);
		    return 1;
		}
		new bakiye = 0;
		if(!strcmp(inputtext, "Ýsim Deðiþikliði", true)) {
			if(BakiyeKontrol(playerid) < ISIM_DEGISTIRME_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

			BakiyeKes(playerid, ISIM_DEGISTIRME_UCRET), bakiye = ISIM_DEGISTIRME_UCRET;
		}
		else if(!strcmp(inputtext, "Soyadý Kilitle", true)) {
			if(BakiyeKontrol(playerid) < SOYADI_KILITLEME_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

			BakiyeKes(playerid, SOYADI_KILITLEME_UCRET), bakiye = SOYADI_KILITLEME_UCRET;
		}
		/*else if(!strcmp(inputtext, "Karakter Sýfýrlama", true)) {
			if(BakiyeKontrol(playerid) < KARAKTER_SIFIRLAMA_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

			BakiyeKes(playerid, KARAKTER_SIFIRLAMA_UCRET), bakiye = KARAKTER_SIFIRLAMA_UCRET;
		}*/
		else if(!strcmp(inputtext, "Özel Telefon Numarasý", true)) {
			if(BakiyeKontrol(playerid) < OZEL_NUMARA_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

			BakiyeKes(playerid, OZEL_NUMARA_UCRET), bakiye = OZEL_NUMARA_UCRET;
		}
		else if(!strcmp(inputtext, "Ek Karakter Slotu", true)) {
			if(BakiyeKontrol(playerid) < EK_SLOT_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

			BakiyeKes(playerid, EK_SLOT_UCRET), bakiye = EK_SLOT_UCRET;
			OyuncuBilgi[playerid][oEkSlot]++;
			OyuncuKaydet(playerid);
			SunucuMesaji(playerid, "Ek Karakter Slotu ürününü satýn aldýn, artýk %d adet karakter oluþturabilirsin.", KARAKTER_LIMIT + OyuncuBilgi[playerid][oEkSlot]);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) marketten %s satýn aldý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], "Ek Karakter Slotu");
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
			return OyuncuKaydet(playerid);
		}
		else if(!strcmp(inputtext, "Ek Araç Slotu", true)) {
			if(BakiyeKontrol(playerid) < EK_ARACSLOT_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

			BakiyeKes(playerid, EK_ARACSLOT_UCRET), bakiye = EK_ARACSLOT_UCRET;
			OyuncuBilgi[playerid][oEkAracSlot]++;
			OyuncuKaydet(playerid);
			SunucuMesaji(playerid, "Ek Araç Slotu ürününü satýn aldýn, artýk %d adet araç alabilirsin.", OYUNCU_ARAC_LIMIT + OyuncuBilgi[playerid][oEkAracSlot]);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) marketten %s satýn aldý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], "Ek Araç Slotu");
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
			return OyuncuKaydet(playerid);
		}
		else if(!strcmp(inputtext, "Ek Ev Slotu", true)) {
			if(BakiyeKontrol(playerid) < EK_SLOT_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

			BakiyeKes(playerid, EK_EVSLOT_UCRET), bakiye = EK_EVSLOT_UCRET;
			OyuncuBilgi[playerid][oEkEvSlot]++;
			OyuncuKaydet(playerid);
			SunucuMesaji(playerid, "Ek Ev Slotu ürününü satýn aldýn, artýk %d adet ev alabilirsin.", OYUNCU_EV_LIMIT + OyuncuBilgi[playerid][oEkEvSlot]);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) marketten %s satýn aldý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], "Ek Ev Slotu");
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
			return OyuncuKaydet(playerid);
		}
		else if(!strcmp(inputtext, "Maske Kullanýmý", true)) {
			if(BakiyeKontrol(playerid) < MASKE_KULLANIM_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

			BakiyeKes(playerid, MASKE_KULLANIM_UCRET), bakiye = MASKE_KULLANIM_UCRET;
		}
		else if(!strcmp(inputtext, "Kilometre Sýfýrlama", true)) {
			if(BakiyeKontrol(playerid) < KMSIFIRLAMA_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

			BakiyeKes(playerid, KMSIFIRLAMA_UCRET), bakiye = KMSIFIRLAMA_UCRET;
		}
		/*else if(!strcmp(inputtext, "2 Seviye Araç Zýrhý", true)) {
			if(BakiyeKontrol(playerid) < IKISEVIYEZIRH_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

			BakiyeKes(playerid, IKISEVIYEZIRH_UCRET), bakiye = IKISEVIYEZIRH_UCRET;
		}*/
		else if(!strcmp(inputtext, "Özel Pet", true)) {
			if(BakiyeKontrol(playerid) < PET_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

			BakiyeKes(playerid, PET_UCRET), bakiye = PET_UCRET;
		}
		/*else if(!strcmp(inputtext, "Ev Vergi Muafiyeti", true)) {
		    if(BakiyeKontrol(playerid) < EVVERGIMUAFIYETI_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");
			new mesaj[256 * MAKSIMUM_EV], sayi = 0;
			format(mesaj, sizeof(mesaj), "ID\tAdres\n");
			for(new i = 0; i != MAKSIMUM_EV; i++) if(EvBilgi[i][evSahip] == OyuncuBilgi[playerid][oID] && EvBilgi[i][evMuafiyet] != 1)
			{
				format(mesaj, sizeof(mesaj), "%s{FFFFFF}%d\t%s\n", mesaj, i, EvBilgi[i][evAdres]);
				sayi++;
			}
			if(!sayi) return HataMesaji(playerid, "Vergi muafiyeti alabileceðin bir eve sahip deðilsin.");
			return DialogGoster(playerid, DIALOG_EVMUAFIYET, DIALOG_STYLE_TABLIST_HEADERS, "Ev - Vergi Muafiyeti", mesaj, "Seç", "Kapat");
		}*/
		else if(!strcmp(inputtext, "Son Seviye Ev", true)) {
		    if(BakiyeKontrol(playerid) < EVSONLEVEL_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");
			new mesaj[256 * MAKSIMUM_EV], sayi = 0;
			format(mesaj, sizeof(mesaj), "ID\tAdres\n");
			for(new i = 0; i != MAKSIMUM_EV; i++) if(EvBilgi[i][evSahip] == OyuncuBilgi[playerid][oID] && EvBilgi[i][evLevel] < 5)
			{
				format(mesaj, sizeof(mesaj), "%s{FFFFFF}%d\t%s\n", mesaj, i, EvBilgi[i][evAdres]);
				sayi++;
			}
			if(!sayi) return HataMesaji(playerid, "Levelini yükseltebileceðin bir eve sahip deðilsin.");
			return DialogGoster(playerid, DIALOG_EVSONSEVIYE, DIALOG_STYLE_TABLIST_HEADERS, "Ev - Son Seviye", mesaj, "Seç", "Kapat");
		}
		else if(!strcmp(inputtext, "Uyuþturucu Boost (1 Gün)", true)) {
		    if(BakiyeKontrol(playerid) < UYUSTURUCUBOOST_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

			if(OyuncuBilgi[playerid][oUyusturucuBoost] > 0) return HataMesaji(playerid, "Zaten Uyuþturucu Boostun hakkýn var, bitmeden yenisini alamazsýn.");

			OyuncuBilgi[playerid][oUyusturucuBoost] = gettime() + 86400;
			BakiyeKes(playerid, UYUSTURUCUBOOST_UCRET), bakiye = UYUSTURUCUBOOST_UCRET;
			SunucuMesaji(playerid, "OOC Marketten {33aa33}%d{FFFFFF}TL ödeyerek \"Uyuþturucu Boost (1 Gün)\" ürününü satýn aldýn.", bakiye);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) marketten %s satýn aldý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], inputtext);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
			return SunucuMesaji(playerid, "Uyuþturucu Boost karakterine 1 günlüðüne tanýmlandý.");
		}
		else if(!strcmp(inputtext, "2x Payday (1 Gün)", true)) {
		    if(BakiyeKontrol(playerid) < IKIXPAYDAY_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

			if(OyuncuBilgi[playerid][oEkstraPayday] > 0) return HataMesaji(playerid, "Zaten 2x Payday hakkýn var, bitmeden yenisini alamazsýn.");

			OyuncuBilgi[playerid][oEkstraPayday] = gettime() + 86400;
			BakiyeKes(playerid, IKIXPAYDAY_UCRET), bakiye = IKIXPAYDAY_UCRET;
			SunucuMesaji(playerid, "OOC Marketten {33aa33}%d{FFFFFF}TL ödeyerek \"2x Payday (1 Gün)\" ürününü satýn aldýn.", bakiye);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) marketten %s satýn aldý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], inputtext);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
			return SunucuMesaji(playerid, "2x Payday karakterine 1 günlüðüne tanýmlandý.");
		}
		else if(!strcmp(inputtext, "Bronz VIP - 30 Gün", true)) {
			if(BakiyeKontrol(playerid) < BRONZ_VIP_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

			if(OyuncuBilgi[playerid][oVIP] == 0) {
				OyuncuBilgi[playerid][oVIP] = 1;
				new gun = 30 * 86400;
				OyuncuBilgi[playerid][oVIPSure] = gettime() + gun;
				BakiyeKes(playerid, BRONZ_VIP_UCRET), bakiye = BRONZ_VIP_UCRET;
				SunucuMesaji(playerid, "OOC Marketten {33aa33}%d{FFFFFF}TL ödeyerek \"Bronz VIP - 30 Gün\" ürününü satýn aldýn.", bakiye);
				new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
				GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
				format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) marketten %s satýn aldý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], inputtext);
				Gunluk_LogKaydet(log_icerik);
				Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
				return SunucuMesaji(playerid, "Bronz VIP bu karakterine 30 günlüðüne tanýmlandý, ek özellikler açýldý.");
			}
			else return HataMesaji(playerid, "Hesabýnda Bronz veya üzeri bir VIP seviyesine sahipsin, ürünü almak için vip sürenin bitmesini bekle.");
		}
		else if(!strcmp(inputtext, "Gümüþ VIP - 30 Gün", true)) {
			if(BakiyeKontrol(playerid) < GUMUS_VIP_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

			if(OyuncuBilgi[playerid][oVIP] == 0) {
				OyuncuBilgi[playerid][oVIP] = 2;
				OyuncuBilgi[playerid][oEkAracSlot]++;
				OyuncuBilgi[playerid][oEkEvSlot]++;
				new gun = 30 * 86400;
				OyuncuBilgi[playerid][oVIPSure] = gettime() + gun;
				BakiyeKes(playerid, GUMUS_VIP_UCRET), bakiye = GUMUS_VIP_UCRET;
				SunucuMesaji(playerid, "OOC Marketten {33aa33}%d{FFFFFF}TL ödeyerek \"Gümüþ VIP - 30 Gün\" ürününü satýn aldýn.", bakiye);
				new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
				GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
				format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) marketten %s satýn aldý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], inputtext);
				Gunluk_LogKaydet(log_icerik);
				Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
				return SunucuMesaji(playerid, "Gümüþ VIP bu karakterine 30 günlüðüne tanýmlandý, ek özellikler açýldý.");
			}
			else if(OyuncuBilgi[playerid][oVIP] < 2) {
			    SetPVarInt(playerid, "Market_VIP", 2);
			    new icerik[144];
			    format(icerik, sizeof(icerik), "{FFFFFF}%s'ni Gümüþ VIP (30 gün) olarak {33aa33}%s{FFFFFF}TL ödeyerek yükselteceksin, onaylýyor musun?", VIPIsim(playerid), NumaraFormati(GUMUS_VIP_UCRET, ""));
			    return DialogGoster(playerid, DIALOG_VIP_YUKSELT, DIALOG_STYLE_MSGBOX, "OOC Market - VIP Yükseltme", icerik, "Evet", "Hayýr");
			}
			else return HataMesaji(playerid, "Hesabýnda Silver veya üzeri bir VIP seviyesine sahipsin, ürünü almak için vip sürenin bitmesini bekle.");
		}
		else if(!strcmp(inputtext, "Altýn VIP - 30 Gün", true)) {
			if(BakiyeKontrol(playerid) < ALTIN_VIP_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

			if(OyuncuBilgi[playerid][oVIP] == 0) {
				OyuncuBilgi[playerid][oVIP] = 3;
				OyuncuBilgi[playerid][oEkAracSlot]++;
				OyuncuBilgi[playerid][oEkEvSlot]++;
				new gun = 30 * 86400;
				OyuncuBilgi[playerid][oVIPSure] = gettime() + gun;
				BakiyeKes(playerid, ALTIN_VIP_UCRET), bakiye = ALTIN_VIP_UCRET;
				SunucuMesaji(playerid, "OOC Marketten {33aa33}%d{FFFFFF}TL ödeyerek \"Altýn VIP - 30 Gün\" ürününü satýn aldýn.", bakiye);
				new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
				GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
				format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) marketten %s satýn aldý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], inputtext);
				Gunluk_LogKaydet(log_icerik);
				Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
				return SunucuMesaji(playerid, "Altýn VIP bu karakterine 30 günlüðüne tanýmlandý, ek özellikler açýldý.");
			}
			else if(OyuncuBilgi[playerid][oVIP] < 3) {
			    SetPVarInt(playerid, "Market_VIP", 3);
			    new icerik[144];
			    format(icerik, sizeof(icerik), "{FFFFFF}%s'ni Altýn VIP (30 gün) olarak {33aa33}%s{FFFFFF}TL ödeyerek yükselteceksin, onaylýyor musun?", VIPIsim(playerid), NumaraFormati(ALTIN_VIP_UCRET, ""));
			    return DialogGoster(playerid, DIALOG_VIP_YUKSELT, DIALOG_STYLE_MSGBOX, "OOC Market - VIP Yükseltme", icerik, "Evet", "Hayýr");
			}
			else return HataMesaji(playerid, "Hesabýnda Altýn VIP tanýmlý daha fazla yükseltme yapamazsýn, ürünü almak için vip sürenin bitmesini bekle.");
		}
		else if(!strcmp(inputtext, "Birlik Konsept Deðiþikliði", true)) return UyariMesaji(playerid, "Bu ürünü satýn almak için birlik yönetimi ile iletiþime geçin.");
		else if(!strcmp(inputtext, "Gate", true)) return UyariMesaji(playerid, "Bu ürünü satýn almak için Admin V ve üzeri ile iletiþime geçin.");
		else if(!strcmp(inputtext, "Özel Obje", true)) return UyariMesaji(playerid, "Bu ürünü satýn almak için Admin V ve üzeri ile iletiþime geçin.");
		else if(!strcmp(inputtext, "Özel Mekan", true)) return UyariMesaji(playerid, "Bu ürünü satýn almak için Management ile iletiþime geçin.");
		else if(!strcmp(inputtext, "Özel Skin", true)) return UyariMesaji(playerid, "Bu ürünü satýn almak için Management ile iletiþime geçin.");
		else if(!strcmp(inputtext, "Baðýþ", true)) return DialogGoster(playerid, DIALOG_OOCBAGIS, DIALOG_STYLE_INPUT, "vRP: Baðýþ Yap", "{FFFFFF}Lütfen baðýþ yapmak istediðiniz miktarý girin;", "Tamam", "Kapat");
		
		if(bakiye == 0) return HataMesaji(playerid, "Bu ürün için fiyat bilgisi eklenmemiþ.");
		SunucuMesaji(playerid, "OOC Marketten {33aa33}%d{FFFFFF}TL ödeyerek \"%s\" ürününü satýn aldýn.", bakiye, inputtext);
		SunucuMesaji(playerid, "Ürün OOC Market envanterine eklendi, /oocmarket > Envanter bölümünden kullanabilirsin.");
		new sorgu[256 + MAX_PLAYER_NAME];
		format(sorgu, sizeof(sorgu), "INSERT INTO `urunler` (`Urun`, `Tarih`, `Sahip`) VALUES ('%s', '%s', '%d')", inputtext, Tarih(), OyuncuBilgi[playerid][oHesap]);
		mysql_query(mysqlB, sorgu);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) marketten %s satýn aldý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], inputtext);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
	}
	else if(dialogid == DIALOG_OOCBAGIS) {
	    if(!response) return false;
	
        new bagis_miktar;
		if(sscanf(inputtext, "d", bagis_miktar)) return DialogGoster(playerid, DIALOG_OOCBAGIS, DIALOG_STYLE_INPUT, "vRP: Baðýþ Yap", "{FFFFFF}Lütfen baðýþ yapmak istediðiniz miktarý girin;", "Tamam", "Kapat");
		if(bagis_miktar < 1) return DialogGoster(playerid, DIALOG_OOCBAGIS, DIALOG_STYLE_INPUT, "vRP: Baðýþ Yap", "{B70000}HATA: {FFFFFF}Girilen miktar en az 1TL olmalýdýr.\n\n{FFFFFF}Lütfen baðýþ yapmak istediðiniz miktarý girin;", "Tamam", "Kapat");
		if(BakiyeKontrol(playerid) < bagis_miktar) return DialogGoster(playerid, DIALOG_OOCBAGIS, DIALOG_STYLE_INPUT, "vRP: Baðýþ Yap", "{B70000}HATA: {FFFFFF}Bu kadar bakiyen yok.\n\n{FFFFFF}Lütfen baðýþ yapmak istediðiniz miktarý girin;", "Tamam", "Kapat");
		
		BakiyeKes(playerid, bagis_miktar);
		new query[256];
	    format(query, sizeof(query), "UPDATE `hesaplar` SET `Bagis` = `Bagis`+%d WHERE `forumID` = '%d'", bagis_miktar, OyuncuBilgi[playerid][oHesap]);
		mysql_query(mysqlB, query);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) %s deðerinde baðýþ yaptý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], NumaraFormati(bagis_miktar, ""));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
	}
	/*else if(dialogid == DIALOG_EVMUAFIYET) {
		if(!response) return 0;
		if(BakiyeKontrol(playerid) < EVVERGIMUAFIYETI_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");

		new id = -1;
		for(new i = 0; i != MAKSIMUM_EV; i++) if(i == strval(inputtext)) { id = i; break; }
		if(id == -1) return HataMesaji(playerid, "Bir sorun oluþtu.");
		if(EvBilgi[id][evSahip] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bir sorun oluþtu.");
		if(EvBilgi[id][evMuafiyet] == 1) return HataMesaji(playerid, "Bu evde zaten vergi muafiyeti bulunuyor.");

		BakiyeKes(playerid, EVVERGIMUAFIYETI_UCRET);
		EvBilgi[id][evMuafiyet] = 1;
		EvBilgi[id][evVergi] = 0;
		OyuncuKaydet(playerid);
		Ev_Kaydet(id);
		SunucuMesaji(playerid, "OOC Marketten {33aa33}%d{FFFFFF}TL ödeyerek \"%s\" ürününü satýn aldýn ve kullandýn.", EVVERGIMUAFIYETI_UCRET, "Ev Vergi Muafiyeti");
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) marketten %s satýn aldý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], "Ev Vergi Muafiyeti");
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
	}*/
	else if(dialogid == DIALOG_EVSONSEVIYE) {
		if(!response) return 0;
		if(BakiyeKontrol(playerid) < EVSONLEVEL_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");
		
		new id = -1;
		for(new i = 0; i != MAKSIMUM_EV; i++) if(i == strval(inputtext)) { id = i; break; }
		if(id == -1) return HataMesaji(playerid, "Bir sorun oluþtu.");
		if(EvBilgi[id][evSahip] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Bir sorun oluþtu.");
		if(EvBilgi[id][evLevel] == 5) return HataMesaji(playerid, "Bu ev zaten son seviye.");

		BakiyeKes(playerid, EVSONLEVEL_UCRET);
		EvBilgi[id][evLevel] = 5;
		OyuncuKaydet(playerid);
		Ev_Kaydet(id);
		SunucuMesaji(playerid, "OOC Marketten {33aa33}%d{FFFFFF}TL ödeyerek \"%s\" ürününü satýn aldýn ve kullandýn.", EVSONLEVEL_UCRET, "Son Seviye Ev");
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) marketten %s satýn aldý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], "Son Seviye Ev");
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
	}
	else if(dialogid == DIALOG_VIP_YUKSELT) {
	    if(!response) return cmd_oocmarket(playerid, "");

	    new level = GetPVarInt(playerid, "Market_VIP"), levelisim[16], bakiye;
		switch(level) {
		    case 2: {
				if(BakiyeKontrol(playerid) < GUMUS_VIP_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");
				BakiyeKes(playerid, GUMUS_VIP_UCRET), bakiye = GUMUS_VIP_UCRET;
				format(levelisim, sizeof(levelisim), "Gümüþ");
		    }
		    case 3: {
				if(BakiyeKontrol(playerid) < ALTIN_VIP_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");
				BakiyeKes(playerid, ALTIN_VIP_UCRET), bakiye = ALTIN_VIP_UCRET;
				format(levelisim, sizeof(levelisim), "Altýn");
		    }
			default: {
				if(BakiyeKontrol(playerid) < GUMUS_VIP_UCRET) return HataMesaji(playerid, "Bu ürün için yeterli market bakiyesine sahip deðilsin, forumdan yükleme yapabilirsin.");
				BakiyeKes(playerid, GUMUS_VIP_UCRET), bakiye = GUMUS_VIP_UCRET;
				format(levelisim, sizeof(levelisim), "Gümüþ");
		    }
		}
		OyuncuBilgi[playerid][oVIP] = level;
		OyuncuBilgi[playerid][oEkAracSlot]++;
		OyuncuBilgi[playerid][oEkEvSlot]++;
		new gun = 30 * 86400;
		OyuncuBilgi[playerid][oVIPSure] = gettime() + gun;
		SunucuMesaji(playerid, "OOC Marketten {33aa33}%d{FFFFFF}TL ödeyerek \"%s VIP - 30 Gün\" ürününü satýn aldýn.", bakiye, levelisim);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) marketten vip seviyesini %s olarak yükseltti.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], levelisim);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
		return SunucuMesaji(playerid, "%s VIP bu karakterine 30 günlüðüne tanýmlandý, ek özellikler açýldý.", levelisim);
	}
	else if(dialogid == DIALOG_OOCMARKET_ENVANTER) {
		if(!response) return cmd_oocmarket(playerid, "");

		if(!strcmp(inputtext, "Ýsim Deðiþikliði", true)) {
		    if(OyuncuBilgi[playerid][oMaskeDurum] == 1) return HataMesaji(playerid, "Masken açýkken isim deðiþtiremezsin.");

			return DialogGoster(playerid, DIALOG_ISIM_DEGISTIR, DIALOG_STYLE_INPUT, "Ýsim Deðiþtir", "{FFFFFF}Aþaðýdaki kutuya deðiþtirmek istediðiniz ismi giriniz;", "Tamam", "Kapat");
		}
		else if(!strcmp(inputtext, "Soyadý Kilitle", true)) {
		    if(OyuncuBilgi[playerid][oMaskeDurum] == 1) return HataMesaji(playerid, "Masken takýlýyken bu iþlemi yapamazsýn.");

		    new icerik[144];
		    format(icerik, sizeof(icerik), "Size ait %s soyadýný kilitlemek üzeresiniz, Onaylýyor musunuz?", OyuncuSoyadi(playerid, OyuncuIsim(playerid, 1)));
			return DialogGoster(playerid, DIALOG_SOYADI_KILITLE, DIALOG_STYLE_MSGBOX, "Soyadý Kilitle", icerik, "Evet", "Hayýr");
		}
		else if(!strcmp(inputtext, "Maske Kullanýmý", true)) {
		    if(OyuncuBilgi[playerid][oMaske] == 1) return HataMesaji(playerid, "Maske kullanýmý ürünün bu karakterinde bulunuyor.");

			OyuncuBilgi[playerid][oMaske] = 1;
			if(OyuncuBilgi[playerid][oMaskeID] == 0) {
				new maskeno = randomEx(10000, 99999), sorgu[256];
				format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE MaskeID = '%d'", maskeno);
				mysql_tquery(mysqlB, sorgu, "Maske_Sorgula", "dd", playerid, maskeno);
			}
			OyuncuKaydet(playerid);
			SunucuMesaji(playerid, "Maske Kullanýmý ürününü kullandýn, /maske komutu artýk bu karakterinde kullanýlabilir.");
		}
		else if(!strcmp(inputtext, "Özel Telefon Numarasý", true)) {
		    if(OyuncuBilgi[playerid][oTelefon] == 0) return HataMesaji(playerid, "Telefonun yok, ürün kullanmak için öncelikle telefon almalýsýn.");

			return DialogGoster(playerid, DIALOG_OZEL_NUMARA, DIALOG_STYLE_INPUT, "vRP: Özel Telefon Numarasý", "{FFFFFF}Aþaðýdaki kutuya deðiþtirmek istediðiniz numarayý girin;\n\n{B70000}NOT: {FFFFFF}Yeni numaranýz 7 haneli olmalýdýr.", "Tamam", "Kapat");
		}
		else if(!strcmp(inputtext, "Kilometre Sýfýrlama", true)) {
		    if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Araç kullanmýyorsun.");

			new id = Arac_IDBul(GetPlayerVehicleID(playerid));
			if(!Arac_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Sürdüðün araç senin deðil.");
			
			AracBilgi[id][aracKM] = 0.0;
			Arac_Kaydet(id);
			SunucuMesaji(playerid, "Aracýnýzýn kilometresini sýfýrladýnýz.");
		}
		/*else if(!strcmp(inputtext, "2 Seviye Araç Zýrhý", true)) {
		    if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Araç kullanmýyorsun.");

			new id = Arac_IDBul(GetPlayerVehicleID(playerid));
			if(!Arac_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Sürdüðün araç senin deðil.");
			if(AracBilgi[id][aracZirh] >= 2) return HataMesaji(playerid, "Aracýnýn zýrhý 2 seviye veya üzerinde.");

			AracZirh[GetPlayerVehicleID(playerid)] = ARAC_ZIRH_SEVIYE2;
			AracBilgi[id][aracZirh] = 2, Arac_Kaydet(id);
			SunucuMesaji(playerid, "Araç zýrhýn geliþtirildi.");
		}*/
		//else if(!strcmp(inputtext, "Karakter Sýfýrlama", true)) SunucuMesaji(playerid, "Karakterinizin özellikleri sýfýrlandý."), OyuncuCinsiyetSec(playerid);
		else if(!strcmp(inputtext, "Özel Pet", true)) return DialogGoster(playerid, DIALOG_OOCMARKETPET_TURSEC, DIALOG_STYLE_LIST, "{FFFFFF}cPet - Pet Tür Seçimi", "{FFFFFF}Black Pitbull\n{FFFFFF}Boxer Dog\n{FFFFFF}Brown Pitbull\n{FFFFFF}Bull Terrier\n{FFFFFF}Dalmation\n{FFFFFF}Doberman\n{FFFFFF}European Shepherd\n{FFFFFF}German Shorthair\n{FFFFFF}Gray Pitbull\n{FFFFFF}Siberian Husky\n{FFFFFF}White Pitbull", "Seç", "Geri");
		else return HataMesaji(playerid, "Bu ürün için kullaným seçeneði belirlenmemiþ.");

		new sorgu[256];
		format(sorgu, sizeof(sorgu), "DELETE FROM `urunler` WHERE `Sahip` = '%d' AND `Urun` = '%s' LIMIT 1", OyuncuBilgi[playerid][oHesap], inputtext);
		mysql_query(mysqlB, sorgu);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) %s ürününü kullandý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], inputtext);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
	}
	else if(dialogid == DIALOG_OOCMARKETPET_TURSEC) {
	    if(!response) return 0;
	
		new id = Pet_Olustur(OyuncuBilgi[playerid][oID], listitem + 1, 1);
		if(id == -1) return HataMesaji(playerid, "Pet oluþturulamadý, pet limiti dolmuþ.");
		
		SunucuMesaji(playerid, "Özel Pet ürününü baþarýyla kullandýn. (/petlerim - /pet)");
		OyuncuKaydet(playerid);

		new sorgu[256];
		format(sorgu, sizeof(sorgu), "DELETE FROM `urunler` WHERE `Sahip` = '%d' AND `Urun` = '%s' LIMIT 1", OyuncuBilgi[playerid][oHesap], "Özel Pet");
		mysql_query(mysqlB, sorgu);
		new oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(sorgu, sizeof(sorgu), "[%s] %s(%d) %s ürününü kullandý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], "Özel Pet");
		Gunluk_LogKaydet(sorgu);
		Log_Kaydet("loglar/oocmarket.txt", "%s", sorgu);
	}
	else if(dialogid == DIALOG_SILAHENVANTER) {
	    if(!response) return 0;
	
		if(Satici_Yakin(playerid) == -1 || Satici_Yakin(playerid) != -1 && SaticiBilgi[Satici_Yakin(playerid)][sTur] != 4) return HataMesaji(playerid, "Mermi satýcýsýna yakýn deðilsin.");
		
		new sorgu[256], Cache:sorgu_cache, silahid = 0, indirim = 0, fiyat = 0;
		format(sorgu, sizeof(sorgu), "SELECT `silahID` FROM `silahenvanter` WHERE `ID` = '%d'", strval(inputtext));
		sorgu_cache = mysql_query(mysqlB, sorgu);
		if(cache_num_rows()) silahid = vericek_int(0, "silahID");
		cache_delete(sorgu_cache);
		if(SilahSlotKontrol(playerid, SilahSlotBul[silahid]) && OyuncuBilgi[playerid][oSilah][SilahSlotBul[silahid]] != silahid) return HataMesaji(playerid, "Bu silah türü üzerinde bulunduðu için silahýný kurtaramadýk.");
		switch(silahid) {
			case WEAPON_DEAGLE: fiyat = 2000;
			case WEAPON_AK47: fiyat = 3500;
			case WEAPON_M4: fiyat = 3500;
			case WEAPON_MP5: fiyat = 2500;
			case WEAPON_TEC9: fiyat = 2250;
			case WEAPON_SHOTGUN: fiyat = 2000;
			case WEAPON_RIFLE: fiyat = 3000;
			case WEAPON_UZI: fiyat = 2250;
			case WEAPON_COLT45: fiyat = 1500;
			case WEAPON_SHOTGSPA: fiyat = 3500;
		}
		switch(OyuncuBilgi[playerid][oVIP]) {
				case 1: indirim = 10 * fiyat / 100;
				case 2: indirim = 25 * fiyat / 100;
				case 3: indirim = 50 * fiyat / 100;
		}
		if(fiyat == 0) return HataMesaji(playerid, "Bir sorun oluþtu.");
		if(OyuncuBilgi[playerid][oPara] < fiyat - indirim) return HataMesaji(playerid, "Bu silahý tekrar almak için yeterli ücreti karþýlayamýyorsun. (%s)", NumaraFormati(fiyat - indirim));
		SetPVarInt(playerid, "silahenvanter", strval(inputtext));
		new dialog_mesaj[144];
		format(dialog_mesaj, sizeof(dialog_mesaj), "%s model silahýný kurtarmak için %s ödeyeceksin, kabul ediyor musun?", SilahIsim(silahid), NumaraFormati(fiyat - indirim));
		DialogGoster(playerid, DIALOG_SILAHENVANTER_KURTAR, DIALOG_STYLE_MSGBOX, "vRP: Silah Kurtarma", dialog_mesaj, "Evet", "Hayýr");
		return 1;
	}
	else if(dialogid == DIALOG_SILAHENVANTER_KURTAR) {
	    if(!response) return DeletePVar(playerid, "silahenvanter");
	
	    new silahid = 0, envanter_id = GetPVarInt(playerid, "silahenvanter"), fiyat = 0, indirim = 0, eklenecekmermi = 0, sorgu[256], Cache:sorgu_cache;
	    DeletePVar(playerid, "silahenvanter");
		format(sorgu, sizeof(sorgu), "SELECT `silahID` FROM `silahenvanter` WHERE `ID` = '%d'", envanter_id);
		sorgu_cache = mysql_query(mysqlB, sorgu);
		if(cache_num_rows()) silahid = vericek_int(0, "silahID");
		cache_delete(sorgu_cache);
		if(SilahSlotKontrol(playerid, SilahSlotBul[silahid]) && OyuncuBilgi[playerid][oSilah][SilahSlotBul[silahid]] != silahid) return HataMesaji(playerid, "Bu silah türü üzerinde bulunduðu için silahýný kurtaramadýk.");
		switch(silahid) {
			case WEAPON_DEAGLE: eklenecekmermi = 7, fiyat = 2000;
			case WEAPON_AK47: eklenecekmermi = 30, fiyat = 3500;
			case WEAPON_M4: eklenecekmermi = 30, fiyat = 3500;
			case WEAPON_MP5: eklenecekmermi = 30, fiyat = 2500;
			case WEAPON_TEC9: eklenecekmermi = 50, fiyat = 2250;
			case WEAPON_SHOTGUN: eklenecekmermi = 10, fiyat = 2000;
			case WEAPON_RIFLE: eklenecekmermi = 10, fiyat = 3000;
			case WEAPON_UZI: eklenecekmermi = 50, fiyat = 2250;
			case WEAPON_COLT45: eklenecekmermi = 17, fiyat = 1500;
			case WEAPON_SHOTGSPA: eklenecekmermi = 7, fiyat = 3500;
		}
		switch(OyuncuBilgi[playerid][oVIP]) {
				case 1: indirim = 10 * fiyat / 100;
				case 2: indirim = 25 * fiyat / 100;
				case 3: indirim = 50 * fiyat / 100;
		}
		if(fiyat == 0) return HataMesaji(playerid, "Bir sorun oluþtu.");
		fiyat = fiyat - indirim;
		if(OyuncuBilgi[playerid][oPara] < fiyat) return HataMesaji(playerid, "Bu silahý tekrar almak için yeterli ücreti karþýlayamýyorsun. (%s)", NumaraFormati(fiyat - indirim));
		
		ParaEkle(playerid, -fiyat);
		SunucuMesaji(playerid, "%s model silahýný %s karþýlýðýnda tekrar aldýn, mermi almayý unutma.", SilahIsim(silahid), NumaraFormati(fiyat));
		Silahver(playerid, silahid, eklenecekmermi);
		format(sorgu, sizeof(sorgu), "DELETE FROM `silahenvanter` WHERE `ID` = '%d'", envanter_id);
		mysql_query(mysqlB, sorgu);
	}
	else if(dialogid == DIALOG_KEFALET) {
	    if(!response) return 0;
	
		if(OyuncuBilgi[playerid][oHapisSure][1] < 600) return HataMesaji(playerid, "Bir sorun oluþtu.");
		new gerekliucret = OyuncuBilgi[playerid][oHapisSure][1] / 60 * 100;
		if(OyuncuBilgi[playerid][oPara] < gerekliucret) return HataMesaji(playerid, "Üzerinde bu kadar para olmadýðý için kefalet sistemini kullanamýyorsun.");
		
		ParaEkle(playerid, -gerekliucret);
		OyuncuBilgi[playerid][oHapisSure][1] = 0;
		OyuncuPosDegistir(playerid, 1529.6327, -1683.8873, 13.3828);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SunucuMesaji(playerid, "%s deðerinde kefalet ödeyerek hapisten çýktýn.", NumaraFormati(gerekliucret));
		OyuncuKaydet(playerid);
		return 1;
	}
	else if(dialogid == DIALOG_KUMAR) {
	    if(!response) return 0;
	
	    if(Oyuncu_Isyerinde(playerid) == -1 || Oyuncu_Isyerinde(playerid) != -1 && IsyeriBilgi[Oyuncu_Isyerinde(playerid)][isyeriTur] != 15) return HataMesaji(playerid, "Kumarhanede deðilsin.");
		if(!strcmp(inputtext, "Kurpiyer", true)) return DialogGoster(playerid, DIALOG_KUMAR_KURPIYER, DIALOG_STYLE_INPUT, "vRP: Kumar", "{FFFFFF}Lütfen oynamak istediðiniz bahis miktarýný aþaðýdaki kutuya girin;\n\n{B70000}NOT: {FFFFFF}Unutmayýn ki bahis en az $1,000, en fazla $20,000 olabilir.", "Tamam", "Kapat");
		else if(!strcmp(inputtext, "Oyuncu", true)) return DialogGoster(playerid, DIALOG_KUMAR_OYUNCU, DIALOG_STYLE_INPUT, "vRP: Kumar", "{FFFFFF}Lütfen oynamak istediðiniz oyuncu id/isim girin;", "Tamam", "Kapat");
		else HataMesaji(playerid, "Bir sorun oluþtu.");
	}
	else if(dialogid == DIALOG_KUMAR_OYUNCU) {
	    if(!response) return 0;

		new oyuncuid;
		if(sscanf(inputtext, "u", oyuncuid)) return DialogGoster(playerid, DIALOG_KUMAR_OYUNCU, DIALOG_STYLE_INPUT, "vRP: Kumar", "{FFFFFF}Lütfen oynamak istediðiniz oyuncu id/isim girin;", "Tamam", "Kapat");
		if(!IsPlayerConnected(oyuncuid)) return DialogGoster(playerid, DIALOG_KUMAR_OYUNCU, DIALOG_STYLE_INPUT, "vRP: Kumar", "{B70000}HATA: {FFFFFF}Geçersiz oyuncu.\n\n{FFFFFF}Lütfen oynamak istediðiniz oyuncu id/isim girin;", "Tamam", "Kapat");
		if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return DialogGoster(playerid, DIALOG_KUMAR_OYUNCU, DIALOG_STYLE_INPUT, "vRP: Kumar", "{B70000}HATA: {FFFFFF}Oyuncuya yakýn deðilsin.\n\n{FFFFFF}Lütfen oynamak istediðiniz oyuncu id/isim girin;", "Tamam", "Kapat");

		foreach(new i : Player) if(oyuncuid == OyuncuBilgi[i][oKumarDialog]) return DialogGoster(playerid, DIALOG_KUMAR_OYUNCU, DIALOG_STYLE_INPUT, "vRP: Kumar", "{B70000}HATA: {FFFFFF}Bu oyuncu baþka bir kumar diyaloðunda.\n\n{FFFFFF}Lütfen oynamak istediðiniz oyuncu id/isim girin;", "Tamam", "Kapat");
		OyuncuBilgi[playerid][oKumarDialog] = oyuncuid;
        DialogGoster(playerid, DIALOG_KUMAR_OYUNCU_FIYAT, DIALOG_STYLE_INPUT, "vRP: Kumar", "{FFFFFF}Lütfen oynamak istediðiniz bahis miktarýný aþaðýdaki kutuya girin;\n\n{B70000}NOT: {FFFFFF}Unutmayýn ki bahis en az $1,000, en fazla $20,000 olabilir.", "Tamam", "Kapat");
	}
	else if(dialogid == DIALOG_KUMAR_OYUNCU_FIYAT) {
	    if(!response) return 0;

		new fiyat;
		if(sscanf(inputtext, "d", fiyat)) return DialogGoster(playerid, DIALOG_KUMAR_OYUNCU_FIYAT, DIALOG_STYLE_INPUT, "vRP: Kumar", "{FFFFFF}Lütfen oynamak istediðiniz bahis miktarýný aþaðýdaki kutuya girin;\n\n{B70000}NOT: {FFFFFF}Unutmayýn ki bahis en az $1,000, en fazla $20,000 olabilir.", "Tamam", "Kapat");
		if(fiyat < 1000 || fiyat > 20000) return DialogGoster(playerid, DIALOG_KUMAR_OYUNCU_FIYAT, DIALOG_STYLE_INPUT, "vRP: Kumar", "{FFFFFF}Lütfen oynamak istediðiniz bahis miktarýný aþaðýdaki kutuya girin;\n\n{B70000}NOT: {FFFFFF}Unutmayýn ki bahis en az $1,000, en fazla $20,000 olabilir.", "Tamam", "Kapat");
	
		new oyuncuid = OyuncuBilgi[playerid][oKumarDialog];
		if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Oyuncuya ulaþýlamadý."), OyuncuBilgi[playerid][oKumarDialog] = INVALID_PLAYER_ID;
		
		
		new dialog_icerik[256];
		OyuncuBilgi[playerid][oKumarBahis_Duello] = fiyat;
		OyuncuBilgi[oyuncuid][oKumarBahis_Duello] = fiyat;
		OyuncuBilgi[oyuncuid][oKumarDialog] = playerid;
		format(dialog_icerik, sizeof(dialog_icerik), "{FFFFFF}%s {a9c4e4}adlý oyuncu sana {33aa33}%s {a9c4e4}karþýlýðýnda zar düellosu teklifi yaptý, katýlmak istiyor musun?", OyuncuIsim(playerid), NumaraFormati(fiyat));
		DialogGoster(oyuncuid, DIALOG_ZARDUELLO_ONAY, DIALOG_STYLE_MSGBOX, "Düello Onayý", dialog_icerik, "Evet", "Hayýr");
	}
	else if(dialogid == DIALOG_ZARDUELLO_ONAY) {
	    new oyuncuid = OyuncuBilgi[playerid][oKumarDialog];
		if(!response) {
			OyuncuBilgi[playerid][oKumarBahis_Duello] = 0;
	        OyuncuBilgi[playerid][oKumarDialog] = INVALID_PLAYER_ID;
			OyuncuBilgi[oyuncuid][oKumarDialog] = INVALID_PLAYER_ID;
			SunucuMesaji(playerid, "Düelloyu kabul etmedin."), SunucuMesaji(oyuncuid, "Karþý taraf düelloyu reddetti.");
			DialogGoster(playerid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
			DialogGoster(oyuncuid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
		    return 1;
		}
		new dialog_icerik[144], fiyat = OyuncuBilgi[playerid][oKumarBahis_Duello];
		format(dialog_icerik, sizeof(dialog_icerik), "Karþý Taraf:\t\t%s\nBahis:\t\t%s\n\n\nDöndür (Onay)", OyuncuIsim(oyuncuid), NumaraFormati(fiyat));
		DialogGoster(playerid, DIALOG_ZARDUELLO, DIALOG_STYLE_TABLIST, "vRP: Kumar", dialog_icerik, "Seç", "Çýk");
		format(dialog_icerik, sizeof(dialog_icerik), "Karþý Taraf:\t\t%s\nBahis:\t\t%s\n\n\nDöndür (Onay)", OyuncuIsim(playerid), NumaraFormati(fiyat));
		DialogGoster(oyuncuid, DIALOG_ZARDUELLO, DIALOG_STYLE_TABLIST, "vRP: Kumar", dialog_icerik, "Seç", "Çýk");
	}
	else if(dialogid == DIALOG_ZARDUELLO) {
	    if(!response) {
	        OyuncuBilgi[playerid][oKumarBahis_Duello] = 0;
	        new oyuncuid = OyuncuBilgi[playerid][oKumarDialog];
	        OyuncuBilgi[playerid][oKumarDialog] = INVALID_PLAYER_ID;
			OyuncuBilgi[oyuncuid][oKumarDialog] = INVALID_PLAYER_ID;
			SunucuMesaji(playerid, "Düellodan ayrýldýn."), SunucuMesaji(oyuncuid, "Karþý taraf düellodan ayrýldý.");
			DialogGoster(playerid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
			DialogGoster(oyuncuid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
	        return 1;
	    }
	    if(!strcmp(inputtext, "Döndür (Onay)", true)) {
	        OyuncuBilgi[playerid][oKumarBaslatan] = true;
	        new fiyat = OyuncuBilgi[playerid][oKumarBahis_Duello], oyuncuid = OyuncuBilgi[playerid][oKumarDialog];
	        if(OyuncuBilgi[oyuncuid][oKumarBaslatan] == false) {
	            SunucuMesaji(oyuncuid, "Karþý taraf bahisi onayladý, döndürmek için sizde onay verin.");
		        new dialog_icerik[144];
				format(dialog_icerik, sizeof(dialog_icerik), "Karþý Taraf:\t\t%s\nBahis:\t\t%s\n\n\nOnay Bekleniyor (Karþý Taraf)", OyuncuIsim(oyuncuid), NumaraFormati(fiyat));
				DialogGoster(playerid, DIALOG_ZARDUELLO, DIALOG_STYLE_TABLIST, "vRP: Kumar", dialog_icerik, "Seç", "Çýk");
				return 1;
			}
	        if(OyuncuBilgi[playerid][oPara] < fiyat) {
				OyuncuBilgi[playerid][oKumarBahis_Duello] = 0;
		        OyuncuBilgi[playerid][oKumarDialog] = INVALID_PLAYER_ID;
				OyuncuBilgi[oyuncuid][oKumarDialog] = INVALID_PLAYER_ID;
				OyuncuBilgi[playerid][oKumarBaslatan] = false;
				OyuncuBilgi[oyuncuid][oKumarBaslatan] = false;
				SunucuMesaji(playerid, "Paran yetmediði için düellodan ayrýldýn."), SunucuMesaji(oyuncuid, "Karþý taraf düellodan ayrýldý. (parasý bitti)");
				DialogGoster(playerid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
				DialogGoster(oyuncuid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
				return 1;
	        }
	        if(OyuncuBilgi[oyuncuid][oPara] < fiyat) {
				OyuncuBilgi[playerid][oKumarBahis_Duello] = 0;
		        OyuncuBilgi[playerid][oKumarDialog] = INVALID_PLAYER_ID;
				OyuncuBilgi[oyuncuid][oKumarDialog] = INVALID_PLAYER_ID;
				OyuncuBilgi[playerid][oKumarBaslatan] = false;
				OyuncuBilgi[oyuncuid][oKumarBaslatan] = false;
				SunucuMesaji(oyuncuid, "Paran yetmediði için düellodan ayrýldýn."), SunucuMesaji(playerid, "Karþý taraf düellodan ayrýldý. (parasý bitti)");
				DialogGoster(playerid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
				DialogGoster(oyuncuid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
				return 1;
	        }
			new gelensayi = randomEx(1, 7), gelensayi_oyuncu = randomEx(1, 7), dialog_icerik[144];
			SendNearbyMessage(playerid, EMOTE_MESAFE, RENK_PEMBE, "** Bir zar attý ve %d geldi. (( %s ))", gelensayi, OyuncuIsim(playerid));
			SendNearbyMessage(playerid, EMOTE_MESAFE, RENK_PEMBE, "** Bir zar attý ve %d geldi. (( %s ))", gelensayi_oyuncu, OyuncuIsim(oyuncuid));
			if(gelensayi < gelensayi_oyuncu) {
			    SunucuMesaji(playerid, "%s düelloyu kazandý.", OyuncuIsim(oyuncuid));
			    SunucuMesaji(oyuncuid, "Düelloyu kazandýn.");
			    ParaEkle(playerid, -fiyat);
			    ParaEkle(oyuncuid, fiyat);
			    OyuncuBilgi[playerid][oKumarBaslatan] = false;
				OyuncuBilgi[oyuncuid][oKumarBaslatan] = false;
				format(dialog_icerik, sizeof(dialog_icerik), "Karþý Taraf:\t\t%s\nBahis:\t\t%s\n\n\nDöndür (Onay)", OyuncuIsim(oyuncuid), NumaraFormati(fiyat));
				DialogGoster(playerid, DIALOG_ZARDUELLO, DIALOG_STYLE_TABLIST, "vRP: Kumar", dialog_icerik, "Seç", "Çýk");
				format(dialog_icerik, sizeof(dialog_icerik), "Karþý Taraf:\t\t%s\nBahis:\t\t%s\n\n\nDöndür (Onay)", OyuncuIsim(playerid), NumaraFormati(fiyat));
				DialogGoster(oyuncuid, DIALOG_ZARDUELLO, DIALOG_STYLE_TABLIST, "vRP: Kumar", dialog_icerik, "Seç", "Çýk");
			}
			else if(gelensayi_oyuncu < gelensayi) {
				SunucuMesaji(oyuncuid, "%s düelloyu kazandý.", OyuncuIsim(playerid));
				SunucuMesaji(playerid, "Düelloyu kazandýn.");
			    ParaEkle(oyuncuid, -fiyat);
			    ParaEkle(playerid, fiyat);
			    OyuncuBilgi[playerid][oKumarBaslatan] = false;
				OyuncuBilgi[oyuncuid][oKumarBaslatan] = false;
			    format(dialog_icerik, sizeof(dialog_icerik), "Karþý Taraf:\t\t%s\nBahis:\t\t%s\n\n\nDöndür (Onay)", OyuncuIsim(oyuncuid), NumaraFormati(fiyat));
				DialogGoster(playerid, DIALOG_ZARDUELLO, DIALOG_STYLE_TABLIST, "vRP: Kumar", dialog_icerik, "Seç", "Çýk");
				format(dialog_icerik, sizeof(dialog_icerik), "Karþý Taraf:\t\t%s\nBahis:\t\t%s\n\n\nDöndür (Onay)", OyuncuIsim(playerid), NumaraFormati(fiyat));
				DialogGoster(oyuncuid, DIALOG_ZARDUELLO, DIALOG_STYLE_TABLIST, "vRP: Kumar", dialog_icerik, "Seç", "Çýk");
			}
			else if(gelensayi_oyuncu == gelensayi) {
			    OyuncuBilgi[playerid][oKumarBaslatan] = false;
				OyuncuBilgi[oyuncuid][oKumarBaslatan] = false;
			    SunucuMesaji(playerid, "Zarlar eþit geldi, kazanan olmadý.");
			    format(dialog_icerik, sizeof(dialog_icerik), "Karþý Taraf:\t\t%s\nBahis:\t\t%s\n\n\nDöndür (Onay)", OyuncuIsim(oyuncuid), NumaraFormati(fiyat));
				DialogGoster(playerid, DIALOG_ZARDUELLO, DIALOG_STYLE_TABLIST, "vRP: Kumar", dialog_icerik, "Seç", "Çýk");
				format(dialog_icerik, sizeof(dialog_icerik), "Karþý Taraf:\t\t%s\nBahis:\t\t%s\n\n\nDöndür (Onay)", OyuncuIsim(playerid), NumaraFormati(fiyat));
				DialogGoster(oyuncuid, DIALOG_ZARDUELLO, DIALOG_STYLE_TABLIST, "vRP: Kumar", dialog_icerik, "Seç", "Çýk");
			}
	    }
	    else {
	        new fiyat = OyuncuBilgi[playerid][oKumarBahis_Duello], oyuncuid = OyuncuBilgi[playerid][oKumarDialog], dialog_icerik[144];
	        if(OyuncuBilgi[oyuncuid][oKumarBaslatan] == false) {
	            SunucuMesaji(oyuncuid, "Karþý taraf bahisi onayladý, döndürmek için sizde onay verin.");
				format(dialog_icerik, sizeof(dialog_icerik), "Karþý Taraf:\t\t%s\nBahis:\t\t%s\n\n\nOnay Bekleniyor (Karþý Taraf)", OyuncuIsim(oyuncuid), NumaraFormati(fiyat));
				DialogGoster(playerid, DIALOG_ZARDUELLO, DIALOG_STYLE_TABLIST, "vRP: Kumar", dialog_icerik, "Seç", "Çýk");
				return 1;
			}
			format(dialog_icerik, sizeof(dialog_icerik), "Karþý Taraf:\t\t%s\nBahis:\t\t%s\n\n\nDöndür (Onay)", OyuncuIsim(oyuncuid), NumaraFormati(fiyat));
			DialogGoster(playerid, DIALOG_ZARDUELLO, DIALOG_STYLE_TABLIST, "vRP: Kumar", dialog_icerik, "Seç", "Çýk");
	    }
	}
	else if(dialogid == DIALOG_KUMAR_KURPIYER) {
	    if(!response) return 0;
	
	    new bahis;
	    if(sscanf(inputtext, "d", bahis) || bahis < 1000 || bahis > 20000) return DialogGoster(playerid, DIALOG_KUMAR_KURPIYER, DIALOG_STYLE_INPUT, "vRP: Kumar", "{FFFFFF}Lütfen oynamak istediðiniz bahis miktarýný aþaðýdaki kutuya girin;\n\n{B70000}NOT: {FFFFFF}Unutmayýn ki bahis en az $1,000, en fazla $20,000 olabilir.", "Tamam", "Kapat");
		if(OyuncuBilgi[playerid][oPara] < bahis) return DialogGoster(playerid, DIALOG_KUMAR_KURPIYER, DIALOG_STYLE_INPUT, "vRP: Kumar", "{B70000}Üzerinde bu kadar para yok!\n\n{FFFFFF}Lütfen oynamak istediðiniz bahis miktarýný aþaðýdaki kutuya girin;\n\n{B70000}NOT: {FFFFFF}Unutmayýn ki bahis en az $1,000, en fazla $20,000 olabilir.", "Tamam", "Kapat");
		OyuncuBilgi[playerid][oKumarBahis] = bahis;
		ParaEkle(playerid, -bahis);
		new dialog_mesaj[320];
		format(dialog_mesaj, sizeof(dialog_mesaj), "{FFFFFF}Son bir adým kaldý,\n{FFFFFF}Oyunu döndürmek için tek/çift seçimi yapmanýz gerekiyor, tek mi? çift mi?\n\n{FFFFFF}Güncel Bahis: {33aa33}%s\n\n{FFFFFF}Kazanýrsanýz ücretin iki katýný kazanacaksýnýz, kaybederseniz bahis miktarý üzerinizden {B70000}kesilir.", NumaraFormati(bahis));
		DialogGoster(playerid, DIALOG_KUMAR_TEKCIFT, DIALOG_STYLE_MSGBOX, "vRP: Kumar", dialog_mesaj, "Tek", "Çift");
	}
	else if(dialogid == DIALOG_KUMAR_TEKCIFT) {
	    new gelensayi = randomEx(1, 7), durum = 0, bahis = OyuncuBilgi[playerid][oKumarBahis];
	    OyuncuBilgi[playerid][oKumarBahis] = 0;
	    switch(gelensayi) {
	        case 1, 3, 5: durum = 1;
	        case 2, 4, 6: durum = 2;
			default: durum = 1;
	    }
	    SendClientMessageEx(playerid, RENK_DO, "* Bir zar attý ve %d geldi. {81caac}(( Kurpiyer ))", gelensayi);
		switch(durum) {
			case 1: {
				if(response) ParaEkle(playerid, bahis * 2), SunucuMesaji(playerid, "Tebrikler, bu roundu kazanarak {33aa33}%s {FFFFFF}elde ettin.", NumaraFormati(bahis));
			    else if(!response) SunucuMesaji(playerid, "Üzgünüm, bu roundu kaybettin.");
		    }
		    case 2: {
				if(!response) ParaEkle(playerid, bahis * 2), SunucuMesaji(playerid, "Tebrikler, bu roundu kazanarak {33aa33}%s {FFFFFF}elde ettin.", NumaraFormati(bahis));
			    else if(response) SunucuMesaji(playerid, "Üzgünüm, bu roundu kaybettin.");
		    }
			default: HataMesaji(playerid, "Bir sorun oluþtu.");
		}
	}
	else if(dialogid == DIALOG_VNMARKET_OZELNUMARA) {
	    if(!response) return 0;

	    new numara;
	    if(sscanf(inputtext, "d", numara)) return DialogGoster(playerid, DIALOG_OZEL_NUMARA, DIALOG_STYLE_INPUT, "vRP: Özel Telefon Numarasý", "{FFFFFF}Aþaðýdaki kutuya deðiþtirmek istediðiniz numarayý girin;\n\n{B70000}NOT: {FFFFFF}Yeni numaranýz 7 haneli olmalýdýr.", "Tamam", "Kapat");
	    if(numara < 1000000 || numara > 9999999) return DialogGoster(playerid, DIALOG_OZEL_NUMARA, DIALOG_STYLE_INPUT, "vRP: Özel Telefon Numarasý", "{B70000}HATA: {FFFFFF}Geçersiz numara formatý. (100000-9999999)\n{FFFFFF}Aþaðýdaki kutuya deðiþtirmek istediðiniz numarayý girin;\n\n{B70000}NOT: {FFFFFF}Yeni numaranýz 7 haneli olmalýdýr.", "Tamam", "Kapat");

 		new sorgu[256], Cache:sorgu_query;
		format(sorgu, sizeof(sorgu), "SELECT `TelefonNumarasi` FROM `oyuncular` WHERE `TelefonNumarasi` = '%d'", numara);
		sorgu_query = mysql_query(mysqlB, sorgu);
		if(cache_num_rows()) return DialogGoster(playerid, DIALOG_OZEL_NUMARA, DIALOG_STYLE_INPUT, "vRP: Özel Telefon Numarasý", "{B70000}HATA: {FFFFFF}Bu numara kullanýmda.\n{FFFFFF}Aþaðýdaki kutuya deðiþtirmek istediðiniz numarayý girin;\n\n{B70000}NOT: {FFFFFF}Yeni numaranýz 7 haneli olmalýdýr.", "Tamam", "Kapat"), cache_delete(sorgu_query);
		else cache_delete(sorgu_query);
		if(OyuncuBilgi[playerid][oVPoint] < VRP_OZELNUMARA) return HataMesaji(playerid, "Seçtiðiniz ürünün Viga Point deðerine sahip deðilsiniz.");
		OyuncuBilgi[playerid][oVPoint] -= VRP_OZELNUMARA;
		OyuncuBilgi[playerid][oTelefonNumarasi] = numara;
		SunucuMesaji(playerid, "%dVP ödeyerek özel telefon numarasý satýn aldýn, yeni numaran: %d", VRP_OZELNUMARA, numara);
		OyuncuKaydet(playerid);

		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) %s vnmarket ürününü kullandý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], "Özel Telefon Numarasý");
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
	}
	else if(dialogid == DIALOG_OZEL_NUMARA) {
	    if(!response) return 0;

	    new numara;
	    if(sscanf(inputtext, "d", numara)) return DialogGoster(playerid, DIALOG_OZEL_NUMARA, DIALOG_STYLE_INPUT, "vRP: Özel Telefon Numarasý", "{FFFFFF}Aþaðýdaki kutuya deðiþtirmek istediðiniz numarayý girin;\n\n{B70000}NOT: {FFFFFF}Yeni numaranýz 7 haneli olmalýdýr.", "Tamam", "Kapat");
	    if(numara < 1000000 || numara > 9999999) return DialogGoster(playerid, DIALOG_OZEL_NUMARA, DIALOG_STYLE_INPUT, "vRP: Özel Telefon Numarasý", "{B70000}HATA: {FFFFFF}Geçersiz numara formatý. (1000-9999)\n{FFFFFF}Aþaðýdaki kutuya deðiþtirmek istediðiniz numarayý girin;\n\n{B70000}NOT: {FFFFFF}Yeni numaranýz 7 haneli olmalýdýr.", "Tamam", "Kapat");

 		new sorgu[256], Cache:sorgu_query;
		format(sorgu, sizeof(sorgu), "SELECT `TelefonNumarasi` FROM `oyuncular` WHERE `TelefonNumarasi` = '%d'", numara);
		sorgu_query = mysql_query(mysqlB, sorgu);
		if(cache_num_rows()) return DialogGoster(playerid, DIALOG_OZEL_NUMARA, DIALOG_STYLE_INPUT, "vRP: Özel Telefon Numarasý", "{B70000}HATA: {FFFFFF}Bu numara kullanýmda.\n{FFFFFF}Aþaðýdaki kutuya deðiþtirmek istediðiniz numarayý girin;\n\n{B70000}NOT: {FFFFFF}Yeni numaranýz 7 haneli olmalýdýr.", "Tamam", "Kapat"), cache_delete(sorgu_query);
		else cache_delete(sorgu_query);

		OyuncuBilgi[playerid][oTelefonNumarasi] = numara;
		SunucuMesaji(playerid, "Özel numara ürününü kullandýn, yeni numaran: %d", numara);
		OyuncuKaydet(playerid);

		format(sorgu, sizeof(sorgu), "DELETE FROM `urunler` WHERE `Sahip` = '%d' AND `Urun` = '%s' LIMIT 1", OyuncuBilgi[playerid][oHesap], "Özel Telefon Numarasý");
		mysql_query(mysqlB, sorgu);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) %s ürününü kullandý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], "Özel Telefon Numarasý");
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
	}
	else if(dialogid == DIALOG_SOYADI_KILITLE) {
	    if(!response) return 0;

        new sorgu[384], isim[MAX_PLAYER_NAME + 1];
        GetPlayerName(playerid, isim, sizeof(isim));
		format(sorgu, sizeof(sorgu), "INSERT INTO `soyadikilitleri` (`Soyad`, `Kilitleyen`, `Tarih`) VALUES('%s', '%d', '%s')", OyuncuSoyadi(playerid, isim), OyuncuBilgi[playerid][oHesap], Tarih());
		mysql_tquery(mysqlB, sorgu);
		format(sorgu, sizeof(sorgu), "DELETE FROM `urunler` WHERE `Sahip` = '%d' AND `Urun` = '%s' LIMIT 1", OyuncuBilgi[playerid][oHesap], "Soyadý Kilitle");
		mysql_query(mysqlB, sorgu);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) %s ürününü kullandý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], "Soyadý Kilitle");
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
		SunucuMesaji(playerid, "Soyadýnýz kilitlendi. Baþkasýnýn kullanýmýna izin vermek için \"/soyadiizin\" komutunu kullanabilirsiniz.");
	}
	else if(dialogid == DIALOG_NONRPNAME)
	{
	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_NONRPNAME, DIALOG_STYLE_INPUT, "Non-RP - Ýsim Deðiþimi", "Bir yetkili tarafýndan isim deðiþtirmeye zorlandýn, lütfen yeni almak istediðin ismin aþaðýdaki kutucuða gir;\n\nNOT: Yeni ismin roleplay formatýna uygun olmalýdýr. (ÖRN: John_Doe)", "Deðiþtir", "");
	    if(!RolePlayIsimKontrol(inputtext)) return DialogGoster(playerid, DIALOG_NONRPNAME, DIALOG_STYLE_INPUT, "Non-RP - Ýsim Deðiþimi", "{B70000}HATA: {FFFFFF}Girilen isim roleplay formatýna uygun deðil.\nBir yetkili tarafýndan isim deðiþtirmeye zorlandýn, lütfen yeni almak istediðin ismin aþaðýdaki kutucuða gir;\n\nNOT: Yeni ismin roleplay formatýna uygun olmalýdýr. (ÖRN: John_Doe)", "Deðiþtir", "");
		if(strlen(inputtext) < 6 || strlen(inputtext) > MAX_PLAYER_NAME) return DialogGoster(playerid, DIALOG_NONRPNAME, DIALOG_STYLE_INPUT, "Non-RP - Ýsim Deðiþimi", "{B70000}HATA: {FFFFFF}Ýsmin en az 6, en fazla 24 karakterli olabilir.\nBir yetkili tarafýndan isim deðiþtirmeye zorlandýn, lütfen yeni almak istediðin ismin aþaðýdaki kutucuða gir;\n\nNOT: Yeni ismin roleplay formatýna uygun olmalýdýr. (ÖRN: John_Doe)", "Deðiþtir", "");
		if(SoyadKilitlimi(playerid, OyuncuSoyadi(playerid, inputtext))) {
			new sorgu[144 + MAX_PLAYER_NAME];
			format(sorgu, sizeof(sorgu), "SELECT * FROM soyadikilitleri WHERE Soyad = '%s' LIMIT 1", OyuncuSoyadi(playerid, inputtext));
			mysql_tquery(mysqlB, sorgu, "Soyadi_Kontrol", "dsd", playerid, inputtext, 1);
			return 1;
		}
		new sorgu[144 + MAX_PLAYER_NAME];
		format(sorgu, sizeof(sorgu), "SELECT ID, hesap, yaratildi FROM oyuncular WHERE isim = '%s' LIMIT 1", inputtext);
		mysql_tquery(mysqlB, sorgu, "Isim_Degistir", "ds", playerid, inputtext);
	}
	else if(dialogid == DIALOG_ISIM_DEGISTIR)
	{
	    if(!response) return 0;
	    if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_ISIM_DEGISTIR, DIALOG_STYLE_INPUT, "Ýsim Deðiþtir", "{FFFFFF}Aþaðýdaki kutuya deðiþtirmek istediðiniz ismi giriniz;", "Tamam", "Kapat");
	    if(!RolePlayIsimKontrol(inputtext)) return DialogGoster(playerid, DIALOG_ISIM_DEGISTIR, DIALOG_STYLE_INPUT, "vRP: Karaker Oluþturma", "{B70000}HATA: {FFFFFF}Girilen isim roleplay formatýna uygun olmalýdýr. (ÖRN: John_Doe)\n{FFFFFF}Aþaðýdaki kutuya deðiþtirmek istediðiniz ismi giriniz;", "Tamam", "Kapat");
		if(strlen(inputtext) < 6 || strlen(inputtext) > MAX_PLAYER_NAME) return DialogGoster(playerid, DIALOG_ISIM_DEGISTIR, DIALOG_STYLE_INPUT, "vRP: Karaker Oluþturma", "{B70000}HATA: {FFFFFF}Ýsmin en az 6, en fazla 24 karakterli olabilir.\n{FFFFFF}Aþaðýdaki kutuya deðiþtirmek istediðiniz ismi giriniz;", "Tamam", "Kapat");
		if(SoyadKilitlimi(playerid, OyuncuSoyadi(playerid, inputtext))) {
			new sorgu[144 + MAX_PLAYER_NAME];
			format(sorgu, sizeof(sorgu), "SELECT * FROM soyadikilitleri WHERE Soyad = '%s' LIMIT 1", OyuncuSoyadi(playerid, inputtext));
			mysql_tquery(mysqlB, sorgu, "Soyadi_Kontrol", "dsd", playerid, inputtext, 2);
			return 1;
		}
		new sorgu[144 + MAX_PLAYER_NAME];
		format(sorgu, sizeof(sorgu), "SELECT ID, hesap, yaratildi FROM oyuncular WHERE isim = '%s' LIMIT 1", inputtext);
		mysql_tquery(mysqlB, sorgu, "Isim_Degistir", "ds", playerid, inputtext);
	}
	else if(dialogid == DIALOG_MODIFIYE_SIL)
	{
	    if(!response) return 0;
		if(!strcmp(inputtext, "Hepsini Sýfýrla", true)) {
			new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
			for(new i = 0; i <= 13; i++) if(AracBilgi[aracid][aracModifiye][i]) {
				RemoveVehicleComponent(GetPlayerVehicleID(playerid), AracBilgi[aracid][aracModifiye][i]);
				AracBilgi[aracid][aracModifiye][i] = 0;
			}
			Arac_Kaydet(aracid);
			SunucuMesaji(playerid, "Aracýndaki tüm modifiyeler kaldýrýldý.");
			return 1;
		}
		new slot, aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
		for(new i = 0; i <= 13; i++) if(AracBilgi[aracid][aracModifiye][i] == strval(inputtext)) { slot = i; break; }
		
		RemoveVehicleComponent(GetPlayerVehicleID(playerid), AracBilgi[aracid][aracModifiye][slot]);
		AracBilgi[aracid][aracModifiye][slot] = 0;
		Arac_Kaydet(aracid);
		SunucuMesaji(playerid, "Aracýna ait %d. slottaki modifiye kaldýrýldý.", slot), cmd_modsil(playerid, "");
	}
	else if(dialogid == DIALOG_MODIFIYE_RENK)
	{
		if(!response) return cmd_modifiye(playerid, "");
        if(OyuncuBilgi[playerid][oPara] < MODIFIYE_RENK_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");

		if(!strcmp(inputtext, "Hazýr renk kullan", true)) DialogGoster(playerid, DIALOG_MODIFIYE_RENKLISTE, DIALOG_STYLE_LIST,"Renk Seç","Beyaz\nSiyah\nKýrmýzý\nYeþil\nKoyu Yeþil\nSarý\nMavi\nPembe\nKahverengi\nTurkuaz\nMor\nÞeker Pembe\nGri","Tamam","Iptal");
		else if(!strcmp(inputtext, "Renk ID kullan", true)) DialogGoster(playerid, DIALOG_MODIFIYE_RENK_1, DIALOG_STYLE_INPUT,"Renk 1","Renk ID girin: (0 - 255 arasýnda)","Tamam","Iptal");
	}
	else if(dialogid == DIALOG_MODIFIYE_RENKLISTE)
	{
	    if(!response) return DialogGoster(playerid, DIALOG_MODIFIYE_RENK,DIALOG_STYLE_LIST,"Renk","Hazýr renk kullan\nRenk ID kullan","Tamam","Iptal");
	    if(OyuncuBilgi[playerid][oPara] < MODIFIYE_RENK_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");
		new id = Arac_IDBul(GetPlayerVehicleID(playerid));
	    if(id == -1) return HataMesaji(playerid, "Bir sorun oluþtu.");
		if(!strcmp(inputtext, "Beyaz", true))
		{
			AracBilgi[id][aracRenk1] = 1;
			AracBilgi[id][aracRenk2] = 1;
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "Araç rengi Beyaz olarak deðiþtirildi.");
			DialogGoster(playerid, DIALOG_MODIFIYE_RENKLISTE, DIALOG_STYLE_LIST,"Renk Seç","Beyaz\nSiyah\nKýrmýzý\nYeþil\nKoyu Yeþil\nSarý\nMavi\nPembe\nKahverengi\nTurkuaz\nMor\nÞeker Pembe\nGri","Tamam","Iptal");
		}
		if(!strcmp(inputtext, "Siyah", true))
		{
			AracBilgi[id][aracRenk1] = 0;
			AracBilgi[id][aracRenk2] = 0;
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "Araç rengi Siyah olarak deðiþtirildi.");
			DialogGoster(playerid, DIALOG_MODIFIYE_RENKLISTE, DIALOG_STYLE_LIST,"Renk Seç","Beyaz\nSiyah\nKýrmýzý\nYeþil\nKoyu Yeþil\nSarý\nMavi\nPembe\nKahverengi\nTurkuaz\nMor\nÞeker Pembe\nGri","Tamam","Iptal");
		}
		if(!strcmp(inputtext, "Kýrmýzý", true))
		{
			AracBilgi[id][aracRenk1] = 3;
			AracBilgi[id][aracRenk2] = 3;
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "Araç rengi Kýrmýzý olarak deðiþtirildi.");
			DialogGoster(playerid, DIALOG_MODIFIYE_RENKLISTE, DIALOG_STYLE_LIST,"Renk Seç","Beyaz\nSiyah\nKýrmýzý\nYeþil\nKoyu Yeþil\nSarý\nMavi\nPembe\nKahverengi\nTurkuaz\nMor\nÞeker Pembe\nGri","Tamam","Iptal");
		}
		if(!strcmp(inputtext, "Yeþil", true))
		{
			AracBilgi[id][aracRenk1] = 128;
			AracBilgi[id][aracRenk2] = 128;
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "Araç rengi Yeþil olarak deðiþtirildi.");
			DialogGoster(playerid, DIALOG_MODIFIYE_RENKLISTE, DIALOG_STYLE_LIST,"Renk Seç","Beyaz\nSiyah\nKýrmýzý\nYeþil\nKoyu Yeþil\nSarý\nMavi\nPembe\nKahverengi\nTurkuaz\nMor\nÞeker Pembe\nGri","Tamam","Iptal");
		}
		if(!strcmp(inputtext, "Koyu Yeþil", true))
		{
			AracBilgi[id][aracRenk1] = 44;
			AracBilgi[id][aracRenk2] = 44;
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "Araç rengi Koyu Yeþil olarak deðiþtirildi.");
			DialogGoster(playerid, DIALOG_MODIFIYE_RENKLISTE, DIALOG_STYLE_LIST,"Renk Seç","Beyaz\nSiyah\nKýrmýzý\nYeþil\nKoyu Yeþil\nSarý\nMavi\nPembe\nKahverengi\nTurkuaz\nMor\nÞeker Pembe\nGri","Tamam","Iptal");
		}
		if(!strcmp(inputtext, "Sarý", true))
		{
			AracBilgi[id][aracRenk1] = 6;
			AracBilgi[id][aracRenk2] = 6;
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "Araç rengi Sarý olarak deðiþtirildi.");
			DialogGoster(playerid, DIALOG_MODIFIYE_RENKLISTE, DIALOG_STYLE_LIST,"Renk Seç","Beyaz\nSiyah\nKýrmýzý\nYeþil\nKoyu Yeþil\nSarý\nMavi\nPembe\nKahverengi\nTurkuaz\nMor\nÞeker Pembe\nGri","Tamam","Iptal");
		}
		if(!strcmp(inputtext, "Mavi", true))
		{
			AracBilgi[id][aracRenk1] = 79;
			AracBilgi[id][aracRenk2] = 79;
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "Araç rengi Mavi olarak deðiþtirildi.");
			DialogGoster(playerid, DIALOG_MODIFIYE_RENKLISTE, DIALOG_STYLE_LIST,"Renk Seç","Beyaz\nSiyah\nKýrmýzý\nYeþil\nKoyu Yeþil\nSarý\nMavi\nPembe\nKahverengi\nTurkuaz\nMor\nÞeker Pembe\nGri","Tamam","Iptal");
		}
		if(!strcmp(inputtext, "Pembe", true))
		{
			AracBilgi[id][aracRenk1] = 126;
			AracBilgi[id][aracRenk2] = 126;
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "Araç rengi Pembe olarak deðiþtirildi.");
			DialogGoster(playerid, DIALOG_MODIFIYE_RENKLISTE, DIALOG_STYLE_LIST,"Renk Seç","Beyaz\nSiyah\nKýrmýzý\nYeþil\nKoyu Yeþil\nSarý\nMavi\nPembe\nKahverengi\nTurkuaz\nMor\nÞeker Pembe\nGri","Tamam","Iptal");
		}
		if(!strcmp(inputtext, "Kahverengi", true))
		{
			AracBilgi[id][aracRenk1] = 30;
			AracBilgi[id][aracRenk2] = 30;
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "Araç rengi Kahverengi olarak deðiþtirildi.");
			DialogGoster(playerid, DIALOG_MODIFIYE_RENKLISTE, DIALOG_STYLE_LIST,"Renk Seç","Beyaz\nSiyah\nKýrmýzý\nYeþil\nKoyu Yeþil\nSarý\nMavi\nPembe\nKahverengi\nTurkuaz\nMor\nÞeker Pembe\nGri","Tamam","Iptal");
		}
		if(!strcmp(inputtext, "Turkuaz", true))
		{
			AracBilgi[id][aracRenk1] = 147;
			AracBilgi[id][aracRenk2] = 147;
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "Araç rengi Turkuaz olarak deðiþtirildi.");
			DialogGoster(playerid, DIALOG_MODIFIYE_RENKLISTE, DIALOG_STYLE_LIST,"Renk Seç","Beyaz\nSiyah\nKýrmýzý\nYeþil\nKoyu Yeþil\nSarý\nMavi\nPembe\nKahverengi\nTurkuaz\nMor\nÞeker Pembe\nGri","Tamam","Iptal");
		}
		if(!strcmp(inputtext, "Mor", true))
		{
			AracBilgi[id][aracRenk1] = 172;
			AracBilgi[id][aracRenk2] = 172;
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "Araç rengi Mor olarak deðiþtirildi.");
			DialogGoster(playerid, DIALOG_MODIFIYE_RENKLISTE, DIALOG_STYLE_LIST,"Renk Seç","Beyaz\nSiyah\nKýrmýzý\nYeþil\nKoyu Yeþil\nSarý\nMavi\nPembe\nKahverengi\nTurkuaz\nMor\nÞeker Pembe\nGri","Tamam","Iptal");
		}
		if(!strcmp(inputtext, "Þeker Pembe", true))
		{
			AracBilgi[id][aracRenk1] = 146;
			AracBilgi[id][aracRenk2] = 146;
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "Araç rengi Þeker Pembe olarak deðiþtirildi.");
			DialogGoster(playerid, DIALOG_MODIFIYE_RENKLISTE, DIALOG_STYLE_LIST,"Renk Seç","Beyaz\nSiyah\nKýrmýzý\nYeþil\nKoyu Yeþil\nSarý\nMavi\nPembe\nKahverengi\nTurkuaz\nMor\nÞeker Pembe\nGri","Tamam","Iptal");
		}
		if(!strcmp(inputtext, "Gri", true))
		{
			AracBilgi[id][aracRenk1] = 252;
			AracBilgi[id][aracRenk2] = 252;
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "Araç rengi Gri olarak deðiþtirildi.");
			DialogGoster(playerid, DIALOG_MODIFIYE_RENKLISTE, DIALOG_STYLE_LIST,"Renk Seç","Beyaz\nSiyah\nKýrmýzý\nYeþil\nKoyu Yeþil\nSarý\nMavi\nPembe\nKahverengi\nTurkuaz\nMor\nÞeker Pembe\nGri","Tamam","Iptal");
		}
		ParaEkle(playerid, -MODIFIYE_RENK_UCRET);
		OyuncuKaydet(playerid);
		ChangeVehicleColor(GetPlayerVehicleID(playerid), AracBilgi[id][aracRenk1], AracBilgi[id][aracRenk2]);
		Arac_Kaydet(id);
	}
	else if(dialogid == DIALOG_MODIFIYE_RENK_1)
	{
	    if(!response) return DialogGoster(playerid, DIALOG_MODIFIYE_RENK, DIALOG_STYLE_LIST,"Renk","Hazýr renk kullan\nRenk ID kullan","Tamam","Iptal");
		new renk1;
		if(sscanf(inputtext, "d", renk1)) return DialogGoster(playerid, DIALOG_MODIFIYE_RENK_1, DIALOG_STYLE_INPUT, "Renk 1", "Doðru renk ID girin.(0 - 255)", "Tamam", "Iptal");
		if(renk1 < 0 || renk1 > 255) return DialogGoster(playerid, DIALOG_MODIFIYE_RENK_1,DIALOG_STYLE_INPUT,"Renk 1","Doðru renk ID girin.(0 - 255)","Tamam","Iptal");
		SetPVarInt(playerid, "modifiye_renk1", renk1);
		DialogGoster(playerid, DIALOG_MODIFIYE_RENK_2, DIALOG_STYLE_INPUT, "Renk 2", "Renk ID girin: (0 - 255 arasýnda)","Tamam","Iptal");
	}
	else if(dialogid == DIALOG_MODIFIYE_RENK_2)
	{
	    if(!response) return DialogGoster(playerid,DIALOG_MODIFIYE_RENK_1,DIALOG_STYLE_INPUT,"Renk 1","Renk ID girin: (0 - 255 arasýnda)","Tamam", "Iptal");
	    if(OyuncuBilgi[playerid][oPara] < MODIFIYE_RENK_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");
		new renk2;
		if(sscanf(inputtext, "d", renk2)) return DialogGoster(playerid, DIALOG_MODIFIYE_RENK_2, DIALOG_STYLE_INPUT, "Renk 1", "Doðru renk ID girin.(0 - 255)", "Tamam", "Iptal");
		if(renk2 < 0 || renk2 > 255) return DialogGoster(playerid, DIALOG_MODIFIYE_RENK_2,DIALOG_STYLE_INPUT,"Renk 1","Doðru renk ID girin.(0 - 255)","Tamam","Iptal");

		ParaEkle(playerid, -MODIFIYE_RENK_UCRET);
		OyuncuKaydet(playerid);
		new id = Arac_IDBul(GetPlayerVehicleID(playerid));
		AracBilgi[id][aracRenk1] = GetPVarInt(playerid, "modifiye_renk1");
		AracBilgi[id][aracRenk2] = renk2;
		ChangeVehicleColor(GetPlayerVehicleID(playerid), AracBilgi[id][aracRenk1], AracBilgi[id][aracRenk2]);
		Arac_Kaydet(id);
		SunucuMesaji(playerid, "Araç rengi deðiþtirildi. (Renk1: %d - Renk2: %d)", GetPVarInt(playerid, "modifiye_renk1"), renk2);
		DeletePVar(playerid, "modifiye_renk1");
	}
	else if(dialogid == DIALOG_MODIFIYE_RUZGARLIK)
	{
	    if(!response) return cmd_modifiye(playerid, "");
        if(OyuncuBilgi[playerid][oPara] < MODIFIYE_RUZGARLIK_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");

	    new aracid = GetPlayerVehicleID(playerid), model = GetVehicleModel(aracid);
	    new modifiyeisim[144];
		if(!strcmp(inputtext, "Alien", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Alien Rüzgarlýk");
			if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
			{
			    switch(model)
				{
					case 562: AddVehicleComponent(aracid, 1147);
					case 565: AddVehicleComponent(aracid, 1049);
					case 559: AddVehicleComponent(aracid, 1162);
					case 561: AddVehicleComponent(aracid, 1058);
					case 560: AddVehicleComponent(aracid, 1138);
					case 558: AddVehicleComponent(aracid, 1164);
				}
                PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele Alien Rüzgarlýk ekleyemezsin.");
		}
		else if(!strcmp(inputtext, "X-Flow", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "X-Flow Rüzgarlýk");
			if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
			{
			    switch(model) {
					case 562: AddVehicleComponent(aracid, 1146);
					case 565: AddVehicleComponent(aracid, 1050);
					case 559: AddVehicleComponent(aracid, 1158);
					case 561: AddVehicleComponent(aracid, 1060);
					case 560: AddVehicleComponent(aracid, 1139);
					case 558: AddVehicleComponent(aracid, 1163);
				}
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele X-Flow Rüzgarlýk ekleyemezsin.");
		}
		else if(!strcmp(inputtext, "Win", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Win Rüzgarlýk");
			if(model == 401 || model == 518 || model == 527 || model == 415 || model == 546 || model == 603 || model == 426 || model == 436 || model == 405 || model == 477 || model == 580 || model == 550 || model == 549)
			{
				AddVehicleComponent(aracid, 1001);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele Win Rüzgarlýk ekleyemezsin.");
		}
		else if(!strcmp(inputtext, "Fury", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Fury Rüzgarlýk");
			if(model == 518 || model == 415 || model == 546 || model == 517 || model == 603 || model == 405 || model == 477 || model == 580 || model == 550 || model == 549)
			{
				AddVehicleComponent(aracid, 1023);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele Fury Rüzgarlýk ekleyemezsin.");
		}
		else if(!strcmp(inputtext, "Alpha", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Alpha Rüzgarlýk");
			if(model == 518 || model == 415 || model == 401 || model == 517 || model == 426 || model == 436 || model == 477 || model == 547 || model == 550 || model == 549)
			{
				AddVehicleComponent(aracid, 1003);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele Alpha Rüzgarlýk ekleyemezsin.");
		}
		else if(!strcmp(inputtext, "Pro", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Pro Rüzgarlýk");
			if(model == 589 || model == 492 || model == 547 || model == 405)
			{
				AddVehicleComponent(aracid, 1000);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele Pro Rüzgarlýk ekleyemezsin.");
		}
		else if(!strcmp(inputtext, "Champ", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Champ Rüzgarlýk");
			if(model == 527 || model == 542 || model == 405)
			{
				AddVehicleComponent(aracid, 1014);
  				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele Champ Rüzgarlýk ekleyemezsin.");
		}
		else if(!strcmp(inputtext, "Race", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Race Rüzgarlýk");
			if(model == 527 || model == 542)
			{
				AddVehicleComponent(aracid, 1014);
  				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele Race Rüzgarlýk ekleyemezsin.");
		}
		else if(!strcmp(inputtext, "Drag", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Drag Rüzgarlýk");
			if(model == 546 || model == 517)
			{
				AddVehicleComponent(aracid, 1002);
  				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele Drag Rüzgarlýk ekleyemezsin.");
		}
 		ParaEkle(playerid, -MODIFIYE_RUZGARLIK_UCRET);
		OyuncuKaydet(playerid);
		new id = Arac_IDBul(aracid);
		if(id != -1) Arac_Kaydet(id);
		DialogGoster(playerid,DIALOG_MODIFIYE_RUZGARLIK,DIALOG_STYLE_LIST,"Rüzgarlýk Seç","Alien\nX-Flow\nWin\nFury\nAlpha\nPro\nChamp\nRace\nDrag\n","Tamam","Iptal");
	}
	else if(dialogid == DIALOG_MODIFIYE_PAINTJOB)
	{
		if(!response) return cmd_modifiye(playerid, "");
		if(OyuncuBilgi[playerid][oPara] < MODIFIYE_PAINTJOB_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");

        new aracid = GetPlayerVehicleID(playerid), model = GetVehicleModel(aracid), id = Arac_IDBul(aracid);
		if(!strcmp(inputtext, "Kaplama 1", true))
		{
			if(model == 562 || model == 565 || model == 559 || model == 561 || model == 560 || model == 575 || model == 534 || model == 567 || model == 536 || model == 535 || model == 576 || model == 558)
			{
 				AracBilgi[id][aracPaintjob] = 0;
				PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca 1 numaralý kaplamayý yaptýn.", AracModel(model));
			}
			else return SunucuMesaji(playerid, "Bu modele kaplama yapamazsýn.");
		}
		else if(!strcmp(inputtext, "Kaplama 2", true))
		{
			if(model == 562 || model == 565 || model == 559 || model == 561 || model == 560 || model == 575 || model == 534 || model == 567 || model == 536 || model == 535 || model == 576 || model == 558)
			{
				AracBilgi[id][aracPaintjob] = 1;
				PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca 2 numaralý kaplamayý yaptýn.", AracModel(model));
			}
			else return SunucuMesaji(playerid, "Bu modele kaplama yapamazsýn.");
		}
		else if(!strcmp(inputtext, "Kaplama 3", true))
		{
			if(model == 562 || model == 565 || model == 559 || model == 561 || model == 560 || model == 575 || model == 534 || model == 567 || model == 536 || model == 535 || model == 576 || model == 558)
			{
				AracBilgi[id][aracPaintjob] = 2;
				PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca 3 numaralý kaplamayý yaptýn.", AracModel(model));
			}
			else return SunucuMesaji(playerid, "Bu modele kaplama yapamazsýn.");
		}
		ParaEkle(playerid, -MODIFIYE_PAINTJOB_UCRET);
        OyuncuKaydet(playerid);
		if(AracBilgi[id][aracPaintjob] != -1) ChangeVehiclePaintjob(aracid, AracBilgi[id][aracPaintjob]);
		Arac_Kaydet(id);
		DialogGoster(playerid,DIALOG_MODIFIYE_PAINTJOB, DIALOG_STYLE_LIST, "Kaplama Seç","Kaplama 1\nKaplama 2\nKaplama 3\n","Tamam","Iptal");
	}
	else if(dialogid == DIALOG_MODIFIYE_HOOD)
	{
	    if(!response) return cmd_modifiye(playerid, "");
		if(OyuncuBilgi[playerid][oPara] < MODIFIYE_HOOD_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");

		new aracid = GetPlayerVehicleID(playerid), model = GetVehicleModel(aracid);
		new modifiyeisim[144];
		if(!strcmp(inputtext, "Fury", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Fury Hood");
			if(model == 401 || model == 518 || model == 589 || model == 492 || model == 426 || model == 550)
			{
				AddVehicleComponent(aracid, 1005);
  				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele Fury Hood ekleyemezsin.");
		}
		else if(!strcmp(inputtext, "Champ", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Champ Hood");
			if(model == 401 || model == 402 || model == 546 || model == 426 || model == 550)
			{
				AddVehicleComponent(aracid,1004);
  				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele Champ Hood ekleyemezsin.");
		}
		else if(!strcmp(inputtext, "Race", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Race Hood");
			if(model == 401)
			{
				AddVehicleComponent(aracid, 1011);
  				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele Race Hood ekleyemezsin.");
		}
		else if(!strcmp(inputtext, "Worx", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Worx Hood");
			if(model == 549)
			{
				AddVehicleComponent(aracid, 1012);
  				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele Worx Hood ekleyemezsin.");
		}
		ParaEkle(playerid, -MODIFIYE_HOOD_UCRET);
        OyuncuKaydet(playerid);
		new id = Arac_IDBul(aracid);
		if(id != -1) Arac_Kaydet(id);
		DialogGoster(playerid, DIALOG_MODIFIYE_HOOD, DIALOG_STYLE_LIST, "Hood", "Fury\nChamp\nRace\nWorx\n", "Tamam", "Iptal");
	}
	else if(dialogid == DIALOG_MODIFIYE_HAVALANDIRMA)
	{
		if(!response) return cmd_modifiye(playerid, "");
		if(OyuncuBilgi[playerid][oPara] < MODIFIYE_HAVALANDIRMA_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");
		new aracid = GetPlayerVehicleID(playerid), model = GetVehicleModel(aracid);
		new modifiyeisim[144];

		if(!strcmp(inputtext, "Oval", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Oval Havalandýrma");
			if(model == 401 || model == 518 || model == 546 || model == 517 || model == 603 || model == 547 || model == 439 || model == 550 || model == 549)
			{
				AddVehicleComponent(aracid, 1142);
				AddVehicleComponent(aracid, 1143);
  				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Kare", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Kare Havalandýrma");
			if(model == 401 || model == 518 || model == 589 || model == 546 || model == 517 || model == 603 || model == 439 || model == 550 || model == 549)
			{
				AddVehicleComponent(aracid, 1144);
				AddVehicleComponent(aracid, 1145);
  				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele Kare Havalandýrma ekleyemezsin.");
		}
		ParaEkle(playerid, -MODIFIYE_HAVALANDIRMA_UCRET);
        OyuncuKaydet(playerid);
		new id = Arac_IDBul(aracid);
		if(id != -1) Arac_Kaydet(id);
		DialogGoster(playerid, DIALOG_MODIFIYE_HAVALANDIRMA, DIALOG_STYLE_LIST, "Havalandýrma", "Oval\nKare\n", "Tamam", "Iptal");
	}
	else if(dialogid == DIALOG_MODIFIYE_EGZOZ)
	{
		if(!response) return cmd_modifiye(playerid, "");
		if(OyuncuBilgi[playerid][oPara] < MODIFIYE_EGZOZ_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");
		new aracid = GetPlayerVehicleID(playerid), model = GetVehicleModel(aracid);
		new modifiyeisim[144];
		if(!strcmp(inputtext, "Alien", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Alien Egzoz");
			if(model == 562 || model == 565 || model == 559 || model == 558 || model == 561 || model == 560)
			{
			    switch(model) {
					case 562: AddVehicleComponent(aracid, 1034);
					case 565: AddVehicleComponent(aracid, 1046);
					case 559: AddVehicleComponent(aracid, 1065);
					case 561: AddVehicleComponent(aracid, 1064);
					case 560: AddVehicleComponent(aracid, 1028);
					case 558: AddVehicleComponent(aracid, 1089);
				}
  				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele Alien Egzoz ekleyemezsin.");
		}
		else if(!strcmp(inputtext, "X-Flow", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "X-Flow Egzoz");
			if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
			{
			    switch(model) {
					case 562: AddVehicleComponent(aracid, 1037);
					case 565: AddVehicleComponent(aracid, 1045);
					case 559: AddVehicleComponent(aracid, 1066);
					case 561: AddVehicleComponent(aracid, 1059);
					case 560: AddVehicleComponent(aracid, 1029);
					case 558: AddVehicleComponent(aracid, 1092);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Chromer", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Chromer Egzoz");
			if(model == 575 || model == 534 || model == 567 || model == 536 || model == 576 || model == 535)
			{
			    switch(model) {
					case 575: AddVehicleComponent(aracid, 1044);
					case 534: AddVehicleComponent(aracid, 1126);
					case 567: AddVehicleComponent(aracid, 1129);
					case 536: AddVehicleComponent(aracid, 1104);
					case 535: AddVehicleComponent(aracid, 1113);
					case 576: AddVehicleComponent(aracid, 1136);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Slamin", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Slamin Egzoz");
			if(model == 575 || model == 534 || model == 567 || model == 536 || model == 576 || model == 535)
			{
			    switch(model) {
					case 575: AddVehicleComponent(aracid, 1043);
					case 534: AddVehicleComponent(aracid, 1127);
					case 567: AddVehicleComponent(aracid, 1132);
					case 536: AddVehicleComponent(aracid, 1105);
					case 535: AddVehicleComponent(aracid, 1114);
					case 576: AddVehicleComponent(aracid, 1135);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Large", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Large Egzoz");
			if(model == 401 || model == 518 || model == 527 || model == 542 || model == 589 || model == 400 || model == 517 || model == 603 || model == 426 || model == 547 || model == 405 || model == 580 || model == 550 || model == 549 || model == 477)
			{
				AddVehicleComponent(aracid, 1020);
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Medium", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Medium Egzoz");
			if(model == 527 || model == 542 || model == 400 || model == 426 || model == 436 || model == 547 || model == 405 || model == 477)
			{
				AddVehicleComponent(aracid, 1021);
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Small", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Small Egzoz");
			if(model == 436)
			{
				AddVehicleComponent(aracid, 1022);
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Twin", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Twin Egzoz");
			if(model == 518 || model == 415 || model == 542 || model == 546 || model == 400 || model == 517 || model == 603 || model == 426 || model == 436 || model == 547 || model == 405 || model == 550 || model == 549 || model == 477)
			{
				AddVehicleComponent(aracid, 1019);
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Upswept", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Upswept Egzoz");
	    	if(model == 401 || model == 518 || model == 415 || model == 542 || model == 546 || model == 400 || model == 517 || model == 603 || model == 426 || model == 415 || model == 547 || model == 405 || model == 550 || model == 549 || model == 477)
			{
				AddVehicleComponent(aracid, 1018);
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		ParaEkle(playerid, -MODIFIYE_EGZOZ_UCRET);
        OyuncuKaydet(playerid);
		new id = Arac_IDBul(aracid);
		if(id != -1) Arac_Kaydet(id);
		DialogGoster(playerid, DIALOG_MODIFIYE_EGZOZ, DIALOG_STYLE_LIST, "Egzoz", "Alien\nX-Flow\nChromer\nSlamin\nLarge\nMedium\nSmall\nTwin\nUpswept", "Tamam", "Iptal");
	}
	else if(dialogid == DIALOG_MODIFIYE_ONTAMPON)
	{
		if(!response) return cmd_modifiye(playerid, "");
		if(OyuncuBilgi[playerid][oPara] < MODIFIYE_ONTAMPON_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");
		new aracid = GetPlayerVehicleID(playerid), model = GetVehicleModel(aracid);
		new modifiyeisim[144];
		if(!strcmp(inputtext, "Alien", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Alien Ön Tampon");
			if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
			{
			    switch(model) {
					case 562: AddVehicleComponent(aracid, 1171);
					case 565: AddVehicleComponent(aracid, 1153);
					case 559: AddVehicleComponent(aracid, 1160);
					case 561: AddVehicleComponent(aracid, 1155);
					case 560: AddVehicleComponent(aracid, 1169);
					case 558: AddVehicleComponent(aracid, 1166);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "X-Flow", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "X-Flow Ön Tampon");
			if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
			{
			    switch(model) {
					case 562: AddVehicleComponent(aracid, 1172);
					case 565: AddVehicleComponent(aracid, 1152);
					case 559: AddVehicleComponent(aracid, 1173);
					case 561: AddVehicleComponent(aracid, 1157);
					case 560: AddVehicleComponent(aracid, 1170);
					case 558: AddVehicleComponent(aracid, 1165);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Chromer", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Chromer Ön Tampon");
			if(model == 575 || model == 534 || model == 567 || model == 536 || model == 576 || model == 535)
			{
			    switch(model) {
					case 575: AddVehicleComponent(aracid, 1174);
					case 534: AddVehicleComponent(aracid, 1179);
					case 567: AddVehicleComponent(aracid, 1189);
					case 536: AddVehicleComponent(aracid, 1182);
					case 535: AddVehicleComponent(aracid, 1115);
					case 576: AddVehicleComponent(aracid, 1191);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Slamin", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Slamin Ön Tampon");
			if(model == 575 || model == 534 || model == 567 || model == 536 || model == 576 || model == 535)
			{
			    switch(model) {
					case 575: AddVehicleComponent(aracid, 1175);
					case 534: AddVehicleComponent(aracid, 1185);
					case 567: AddVehicleComponent(aracid, 1188);
					case 536: AddVehicleComponent(aracid, 1181);
					case 535: AddVehicleComponent(aracid, 1116);
					case 576: AddVehicleComponent(aracid, 1190);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
 		ParaEkle(playerid, -MODIFIYE_ONTAMPON_UCRET);
        OyuncuKaydet(playerid);
		new id = Arac_IDBul(aracid);
		if(id != -1) Arac_Kaydet(id);
		DialogGoster(playerid, DIALOG_MODIFIYE_ONTAMPON, DIALOG_STYLE_LIST, "Ön Tampon", "Alien\nX-Flow\nChromer\nSlamin", "Tamam", "Iptal");
	}
	else if(dialogid == DIALOG_MODIFIYE_ARKATAMPON)
	{
		if(!response) return cmd_modifiye(playerid, "");
		if(OyuncuBilgi[playerid][oPara] < MODIFIYE_ARKATAMPON_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");
		new aracid = GetPlayerVehicleID(playerid), model = GetVehicleModel(aracid);
		new modifiyeisim[144];

		if(!strcmp(inputtext, "Alien", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Alien Arka Tampon");
			if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
			{
			    switch(model) {
					case 562: AddVehicleComponent(aracid, 1149);
					case 565: AddVehicleComponent(aracid, 1150);
					case 559: AddVehicleComponent(aracid, 1159);
					case 561: AddVehicleComponent(aracid, 1154);
					case 560: AddVehicleComponent(aracid, 1141);
					case 558: AddVehicleComponent(aracid, 1168);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "X-Flow", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "X-Flow Arka Tampon");
			if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
			{
			    switch(model) {
					case 562: AddVehicleComponent(aracid, 1148);
					case 565: AddVehicleComponent(aracid, 1151);
					case 559: AddVehicleComponent(aracid, 1161);
					case 561: AddVehicleComponent(aracid, 1156);
					case 560: AddVehicleComponent(aracid, 1140);
					case 558: AddVehicleComponent(aracid, 1167);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Chromer", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Chromer Arka Tampon");
			if(model == 575 || model == 534 || model == 567 || model == 536 || model == 576 || model == 535)
			{
			    switch(model) {
					case 575: AddVehicleComponent(aracid, 1176);
					case 534: AddVehicleComponent(aracid, 1180);
					case 567: AddVehicleComponent(aracid, 1187);
					case 536: AddVehicleComponent(aracid, 1184);
					case 535: AddVehicleComponent(aracid, 1109);
					case 576: AddVehicleComponent(aracid, 1192);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Slamin", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Slamin Arka Tampon");
			if(model == 575 || model == 534 || model == 567 || model == 536 || model == 576 || model == 535)
			{
			    switch(model) {
					case 575: AddVehicleComponent(aracid, 1177);
					case 534: AddVehicleComponent(aracid, 1178);
					case 567: AddVehicleComponent(aracid, 1186);
					case 536: AddVehicleComponent(aracid, 1183);
					case 535: AddVehicleComponent(aracid, 1110);
					case 576: AddVehicleComponent(aracid, 1193);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
 		ParaEkle(playerid, -MODIFIYE_ARKATAMPON_UCRET);
        OyuncuKaydet(playerid);
  		new id = Arac_IDBul(aracid);
		if(id != -1) Arac_Kaydet(id);
		DialogGoster(playerid, DIALOG_MODIFIYE_ARKATAMPON, DIALOG_STYLE_LIST, "Arka Tampon", "Alien\nX-Flow\nChromer\nSlamin", "Tamam", "Iptal");
	}
	else if(dialogid == DIALOG_MODIFIYE_TAVAN)
	{
		if(!response) return cmd_modifiye(playerid, "");
		if(OyuncuBilgi[playerid][oPara] < MODIFIYE_TAVAN_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");
		new aracid = GetPlayerVehicleID(playerid), model = GetVehicleModel(aracid);
		new modifiyeisim[144];

		if(!strcmp(inputtext, "Alien", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Alien Tavan");
			if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
			{
			    switch(model) {
					case 562: AddVehicleComponent(aracid, 1038);
					case 565: AddVehicleComponent(aracid, 1054);
					case 559: AddVehicleComponent(aracid, 1067);
					case 561: AddVehicleComponent(aracid, 1055);
					case 560: AddVehicleComponent(aracid, 1032);
					case 558: AddVehicleComponent(aracid, 1088);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "X-Flow", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "X-Flow Çatý");
			if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
			{
			    switch(model) {
					case 562: AddVehicleComponent(aracid, 1035);
					case 565: AddVehicleComponent(aracid, 1053);
					case 559: AddVehicleComponent(aracid, 1068);
					case 561: AddVehicleComponent(aracid, 1061);
					case 560: AddVehicleComponent(aracid, 1033);
					case 558: AddVehicleComponent(aracid, 1091);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Hardtop", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Hardtop Tavan");
			if(model == 567 || model == 536)
			{
			    switch(model) {
					case 567: AddVehicleComponent(aracid, 1130);
					case 536: AddVehicleComponent(aracid, 1128);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Softtop", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Softtop Tavan");
			if(model == 567 || model == 536)
			{
			    switch(model) {
					case 567: AddVehicleComponent(aracid, 1131);
					case 536: AddVehicleComponent(aracid, 1103);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Scoop", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Scoop Tavan");
			if(model == 401 || model == 518 || model == 589 || model == 492 || model == 546 || model == 603 || model == 426 || model == 436 || model == 580 || model == 550|| model == 477)
			{
				AddVehicleComponent(aracid, 1006);
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
 		ParaEkle(playerid, -MODIFIYE_TAVAN_UCRET);
        OyuncuKaydet(playerid);
		new id = Arac_IDBul(aracid);
		if(id != -1) Arac_Kaydet(id);
		DialogGoster(playerid, DIALOG_MODIFIYE_TAVAN, DIALOG_STYLE_LIST, "Tavan", "Alien\nX-Flow\nHardtop\nSofttop\nScoop", "Tamam", "Iptal");
	}
	else if(dialogid == DIALOG_MODIFIYE_YANETEK)
	{
		if(!response) return cmd_modifiye(playerid, "");
		if(OyuncuBilgi[playerid][oPara] < MODIFIYE_YANETEK_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");
		new aracid = GetPlayerVehicleID(playerid), model = GetVehicleModel(aracid);
		new modifiyeisim[144];
		if(!strcmp(inputtext, "Alien", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Alien Yan Etek");
			if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
			{
			    switch(model) {
					case 562: AddVehicleComponent(aracid, 1036), AddVehicleComponent(aracid, 1040);
					case 565: AddVehicleComponent(aracid, 1047), AddVehicleComponent(aracid, 1051);
					case 559: AddVehicleComponent(aracid, 1069), AddVehicleComponent(aracid, 1071);
					case 561: AddVehicleComponent(aracid, 1056), AddVehicleComponent(aracid, 1062);
					case 560: AddVehicleComponent(aracid, 1026), AddVehicleComponent(aracid, 1027);
					case 558: AddVehicleComponent(aracid, 1090), AddVehicleComponent(aracid, 1094);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "X-Flow", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "X-Flow Yan Etek");
			if(model == 562 || model == 565 || model == 559 || model == 561 || model == 558 || model == 560)
			{
			    switch(model) {
					case 562: AddVehicleComponent(aracid, 1039), AddVehicleComponent(aracid, 1041);
					case 565: AddVehicleComponent(aracid, 1048), AddVehicleComponent(aracid, 1052);
					case 559: AddVehicleComponent(aracid, 1070), AddVehicleComponent(aracid, 1072);
					case 561: AddVehicleComponent(aracid, 1057), AddVehicleComponent(aracid, 1063);
					case 560: AddVehicleComponent(aracid, 1031), AddVehicleComponent(aracid, 1030);
					case 558: AddVehicleComponent(aracid, 1093), AddVehicleComponent(aracid, 1095);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Strip", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Strip Yan Etek");
			if(model == 575 || model == 536 || model == 576 || model == 567)
			{
			    switch(model) {
					case 575: AddVehicleComponent(aracid, 1042), AddVehicleComponent(aracid, 1099);
 					case 567: AddVehicleComponent(aracid, 1102), AddVehicleComponent(aracid, 1133);
					case 576: AddVehicleComponent(aracid, 1134), AddVehicleComponent(aracid, 1137);
					case 536: AddVehicleComponent(aracid, 1108), AddVehicleComponent(aracid, 1107);
				}
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Flames", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Flames Yan Etek");
			if(model == 534)
			{
				AddVehicleComponent(aracid, 1102), AddVehicleComponent(aracid, 1101);
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Arches", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Arches Yan Etek");
			if(model == 534)
			{
				AddVehicleComponent(aracid, 1106), AddVehicleComponent(aracid, 1124);
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Trim", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Trim Yan Etek");
			if(model == 535)
			{
				AddVehicleComponent(aracid, 1118), AddVehicleComponent(aracid, 1120);
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Wheelcovers", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Wheelcovers Yan Etek");
			if(model == 535)
			{
				AddVehicleComponent(aracid, 1119), AddVehicleComponent(aracid, 1121);
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Side", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Side Yan Etek");
			if(model == 401 || model == 518 || model == 527 || model == 415 || model == 589 || model == 546 || model == 517 || model == 603 || model == 436 || model == 439 || model == 580 || model == 549 || model == 477)
			{
				AddVehicleComponent(aracid, 1007), AddVehicleComponent(aracid, 1017);
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
 		ParaEkle(playerid, -MODIFIYE_YANETEK_UCRET);
        OyuncuKaydet(playerid);
		new id = Arac_IDBul(aracid);
		if(id != -1) Arac_Kaydet(id);
		DialogGoster(playerid, DIALOG_MODIFIYE_YANETEK, DIALOG_STYLE_LIST, "Yan Etek", "Alien\nX-Flow\nStrip\nFlames\nArches\nTrim\nWheelcovers\nSide", "Tamam", "Iptal");
	}
	else if(dialogid == DIALOG_MODIFIYE_BULLBARS)
	{
		if(!response) return cmd_modifiye(playerid, "");
		if(OyuncuBilgi[playerid][oPara] < MODIFIYE_BULLBARS_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");
		new aracid = GetPlayerVehicleID(playerid), model = GetVehicleModel(aracid);
		new modifiyeisim[144];

		if(!strcmp(inputtext, "Grill", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Grill Bar");
			if(model == 534)
			{
				AddVehicleComponent(aracid, 1100);
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Chrome", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Chrome Bar");
			if(model == 534)
			{
				AddVehicleComponent(aracid, 1123);
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Lights", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Lights Bar");
			if(model == 534)
			{
				AddVehicleComponent(aracid, 1125);
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
		else if(!strcmp(inputtext, "Locos", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Locos Bar");
			if(model == 535)
			{
				AddVehicleComponent(aracid, 1117);
   				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			}
			else return SunucuMesaji(playerid, "Bu modele %s ekleyemezsin.", modifiyeisim);
		}
 		ParaEkle(playerid, -MODIFIYE_BULLBARS_UCRET);
        OyuncuKaydet(playerid);
		new id = Arac_IDBul(aracid);
		if(id != -1) Arac_Kaydet(id);
		DialogGoster(playerid, DIALOG_MODIFIYE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Grill\nChrome\nLights\nLocos", "Tamam", "Iptal");
	}
	else if(dialogid == DIALOG_MODIFIYE_TEKERLEK)
	{
		if(!response) return cmd_modifiye(playerid, "");
		if(OyuncuBilgi[playerid][oPara] < MODIFIYE_TEKERLEK_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");
		new aracid = GetPlayerVehicleID(playerid), model = GetVehicleModel(aracid);
		new modifiyeisim[144];
		if(!strcmp(inputtext, "Offroad", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Offroad Tekerlek");
			AddVehicleComponent(aracid, 1025);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
		else if(!strcmp(inputtext, "Mega", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Mega Tekerlek");
			AddVehicleComponent(aracid, 1074);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
		else if(!strcmp(inputtext, "Wires", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Wires Tekerlek");
			AddVehicleComponent(aracid, 1076);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
		else if(!strcmp(inputtext, "Twist", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Twist Tekerlek");
			AddVehicleComponent(aracid, 1078);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
		else if(!strcmp(inputtext, "Grove", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Grove Tekerlek");
			AddVehicleComponent(aracid, 1081);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
		else if(!strcmp(inputtext, "Import", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Import Tekerlek");
			AddVehicleComponent(aracid, 1082);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
		else if(!strcmp(inputtext, "Atomic", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Atomic Tekerlek");
			AddVehicleComponent(aracid, 1085);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
		else if(!strcmp(inputtext, "Ahab", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Ahab Tekerlek");
			AddVehicleComponent(aracid, 1096);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
		else if(!strcmp(inputtext, "Virtual", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Virtual Tekerlek");
			AddVehicleComponent(aracid, 1097);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
		else if(!strcmp(inputtext, "Access", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Access Tekerlek");
			AddVehicleComponent(aracid, 1098);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
		else if(!strcmp(inputtext, "Trance", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Trance Tekerlek");
			AddVehicleComponent(aracid, 1084);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
		else if(!strcmp(inputtext, "Shadow", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Shadow Tekerlek");
			AddVehicleComponent(aracid, 1073);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
		else if(!strcmp(inputtext, "Rimishine", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Rimishine Tekerlek");
			AddVehicleComponent(aracid, 1075);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
		else if(!strcmp(inputtext, "Classic", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Classic Tekerlek");
			AddVehicleComponent(aracid, 1077);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
		else if(!strcmp(inputtext, "Cutter", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Cutter Tekerlek");
			AddVehicleComponent(aracid, 1079);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
		else if(!strcmp(inputtext, "Switch", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Switch Tekerlek");
			AddVehicleComponent(aracid, 1080);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
		else if(!strcmp(inputtext, "Dollar", true))
		{
			format(modifiyeisim, sizeof(modifiyeisim), "Dollar Tekerlek");
			AddVehicleComponent(aracid, 1083);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
		}
 		ParaEkle(playerid, -MODIFIYE_TEKERLEK_UCRET);
        OyuncuKaydet(playerid);
		new id = Arac_IDBul(aracid);
		if(id != -1) Arac_Kaydet(id);
		DialogGoster(playerid, DIALOG_MODIFIYE_TEKERLEK, DIALOG_STYLE_LIST, "Tekerlek", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Tamam", "Iptal");
	}
	else if(dialogid == DIALOG_MODIFIYE) {
		if(!response) return 0;
		if(!strcmp(inputtext, "Renk", true)) return DialogGoster(playerid, DIALOG_MODIFIYE_RENK, DIALOG_STYLE_LIST, "Renk", "Hazýr renk kullan\nRenk ID kullan", "Tamam", "Iptal");
		else if(!strcmp(inputtext, "Kaplama", true)) return DialogGoster(playerid, DIALOG_MODIFIYE_PAINTJOB, DIALOG_STYLE_LIST, "Kaplama Seç", "Kaplama 1\nKaplama 2\nKaplama 3\n", "Tamam", "Iptal");
		else if(!strcmp(inputtext, "Rüzgarlýk", true)) return DialogGoster(playerid, DIALOG_MODIFIYE_RUZGARLIK, DIALOG_STYLE_LIST, "Rüzgarlýk Seç", "Alien\nX-Flow\nWin\nFury\nAlpha\nPro\nChamp\nRace\nDrag\n","Tamam","Iptal");
		else if(!strcmp(inputtext, "Hood", true)) return DialogGoster(playerid, DIALOG_MODIFIYE_HOOD, DIALOG_STYLE_LIST, "Hood", "Fury\nChamp\nRace\nWorx\n", "Tamam", "Iptal");
		else if(!strcmp(inputtext, "Havalandýrma", true)) return DialogGoster(playerid, DIALOG_MODIFIYE_HAVALANDIRMA, DIALOG_STYLE_LIST, "Havalandýrma", "Oval\nKare\n", "Tamam", "Iptal");
		else if(!strcmp(inputtext, "Egzoz", true)) return DialogGoster(playerid, DIALOG_MODIFIYE_EGZOZ, DIALOG_STYLE_LIST, "Egzoz", "Alien\nX-Flow\nChromer\nSlamin\nLarge\nMedium\nSmall\nTwin\nUpswept", "Tamam", "Iptal");
		else if(!strcmp(inputtext, "Ön Tampon", true)) return DialogGoster(playerid, DIALOG_MODIFIYE_ONTAMPON, DIALOG_STYLE_LIST, "Ön Tampon", "Alien\nX-Flow\nChromer\nSlamin", "Tamam", "Iptal");
		else if(!strcmp(inputtext, "Arka Tampon", true)) return DialogGoster(playerid, DIALOG_MODIFIYE_ARKATAMPON, DIALOG_STYLE_LIST, "Arka Tampon", "Alien\nX-Flow\nChromer\nSlamin", "Tamam", "Iptal");
		else if(!strcmp(inputtext, "Tavan", true)) return DialogGoster(playerid, DIALOG_MODIFIYE_TAVAN, DIALOG_STYLE_LIST, "Tavan", "Alien\nX-Flow\nHardtop\nSofttop\nScoop", "Tamam", "Iptal");
		else if(!strcmp(inputtext, "Yan Etek", true)) return DialogGoster(playerid, DIALOG_MODIFIYE_YANETEK, DIALOG_STYLE_LIST, "Yan Etek", "Alien\nX-Flow\nStrip\nFlames\nArches\nTrim\nWheelcovers\nSide", "Tamam", "Iptal");
		else if(!strcmp(inputtext, "Bullbars", true)) return DialogGoster(playerid, DIALOG_MODIFIYE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Grill\nChrome\nLights\nLocos", "Tamam", "Iptal");
		else if(!strcmp(inputtext, "Tekerlek", true)) return DialogGoster(playerid, DIALOG_MODIFIYE_TEKERLEK, DIALOG_STYLE_LIST, "Tekerlek", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Tamam", "Iptal");
		else if(!strcmp(inputtext, "Stereo", true)) {
		    if(OyuncuBilgi[playerid][oPara] < MODIFIYE_STEREO_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");

			new aracid = GetPlayerVehicleID(playerid), model = GetVehicleModel(aracid);
			new modifiyeisim[144];
			format(modifiyeisim, sizeof(modifiyeisim), "Stereo");
	 		ParaEkle(playerid, -MODIFIYE_STEREO_UCRET);
	        OyuncuKaydet(playerid);
			AddVehicleComponent(aracid, 1086);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			new id = Arac_IDBul(aracid);
			if(id != -1) Arac_Kaydet(id);
			return cmd_modifiye(playerid, "");
		}
		else if(!strcmp(inputtext, "Hidrolik", true)) {
		    if(OyuncuBilgi[playerid][oPara] < MODIFIYE_HIDROLIK_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");

			new aracid = GetPlayerVehicleID(playerid), model = GetVehicleModel(aracid);
			new modifiyeisim[144];
			format(modifiyeisim, sizeof(modifiyeisim), "Hidrolik");
	 		ParaEkle(playerid, -MODIFIYE_HIDROLIK_UCRET);
	        OyuncuKaydet(playerid);
			AddVehicleComponent(aracid, 1087);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			new id = Arac_IDBul(aracid);
			if(id != -1) Arac_Kaydet(id);
			return cmd_modifiye(playerid, "");
		}
		else if(!strcmp(inputtext, "Nitro", true)) {
		    if(OyuncuBilgi[playerid][oPara] < MODIFIYE_NOS_UCRET) return HataMesaji(playerid, "Bu seçeneðin ücretini karþýlayamýyorsun."), cmd_modifiye(playerid, "");

			new aracid = GetPlayerVehicleID(playerid), model = GetVehicleModel(aracid);
			new modifiyeisim[144];
			format(modifiyeisim, sizeof(modifiyeisim), "Nitro");
	 		ParaEkle(playerid, -MODIFIYE_NOS_UCRET);
	        OyuncuKaydet(playerid);
			AddVehicleComponent(aracid, 1010);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SunucuMesaji(playerid, "%s model araca \"%s\" taktýn.", AracModel(model), modifiyeisim);
			new id = Arac_IDBul(aracid);
			if(id != -1) Arac_Kaydet(id);
			return cmd_modifiye(playerid, "");
		}
	}
	return true;
}

public YuruyusAnim(playerid)
{
	new keys, updown, leftright;
	GetPlayerKeys(playerid, keys, updown, leftright);
	if(OyuncuBilgi[playerid][oYuruyusStil] == YURUYUS_NORMAL)
	{
 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_player",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(OyuncuBilgi[playerid][oYuruyusStil] == YURUYUS_PED)
	{
 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_civi",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
 	else if(OyuncuBilgi[playerid][oYuruyusStil] == YURUYUS_GANGSTER)
	{
 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang1",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(OyuncuBilgi[playerid][oYuruyusStil] == YURUYUS_GANGSTER2)
	{
 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang2",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(OyuncuBilgi[playerid][oYuruyusStil] == YURUYUS_YASLI)
	{
 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_old",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(OyuncuBilgi[playerid][oYuruyusStil] == YURUYUS_SISKO_YASLI)
	{
 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fatold",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(OyuncuBilgi[playerid][oYuruyusStil] == YURUYUS_SISKO)
	{
 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fat",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(OyuncuBilgi[playerid][oYuruyusStil] == YURUYUS_KADIN)
	{
 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(OyuncuBilgi[playerid][oYuruyusStil] == YURUYUS_KADIN2)
	{
 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(OyuncuBilgi[playerid][oYuruyusStil] == YURUYUS_FAHISE)
	{
 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(OyuncuBilgi[playerid][oYuruyusStil] == YURUYUS_FAHISE2)
	{
 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(OyuncuBilgi[playerid][oYuruyusStil] == YURUYUS_SARHOS)
	{
 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_drunk",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(OyuncuBilgi[playerid][oYuruyusStil] == YURUYUS_KOR)
	{
 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","Walk_Wuzi",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	return true;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(IsPlayerAdmin(playerid) || OyuncuBilgi[playerid][oAdmin] > 1 && OyuncuBilgi[playerid][oAdminDurum] == true)
	{
		OyuncuPosDegistir(playerid, fX, fY, fZ + 2);
		SunucuMesaji(playerid, "Haritadan iþaretlediðiniz kordinata ýþýnlandýnýz.");
	}
 	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	new oyuncu_isim[MAX_PLAYER_NAME + 1], log_icerik[144];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] (komut) %s(%d): %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], cmdtext);
	Gunluk_LogKaydet(log_icerik);
	if(OyuncuBilgi[playerid][oGiris] == true) {
		printf("[%s](komut) %s(S: %d - H: %d): %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], OyuncuBilgi[playerid][oHesap], cmdtext);
	}
	if(OyuncuBilgi[playerid][oGiris] == false) {
	    printf("[%s](g-komut) %s: %s", Tarih(), oyuncu_isim, cmdtext); // g-komut: Giriþ yapmadan kullanýlan komut.
		HataMesaji(playerid, "Bu komutu kullanmak için giriþ yapmalýsýn.");
		return 0;
	}
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if(!success) return HataMesaji(playerid, "Bu komutu listemizde bulamadýk, komut listesine göz atmak için /yardim");
    return 1;
}

public Offline_Karakter(playerid, isim[])
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) {
		for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
		return HataMesaji(playerid, "%s adlý oyuncu veritabanýnda bulunamadý.", isim);
	}
	new yazi[144], hesapdurumu[64], birlik[64], rutbe[64], hapis;
	new birlikid = vericek_int(0, "birlik");
	if(birlikid > -1) {
	    for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikID] == birlikid) {
		    format(birlik, sizeof(birlik), "%s", BirlikBilgi[i][birlikAd]);
			switch(vericek_int(0, "birlikrutbe")) {
				case 1: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR1]);
				case 2: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR2]);
				case 3: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR3]);
				case 4: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR4]);
				case 5: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR5]);
				case 6: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR6]);
				case 7: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR7]);
				case 8: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR8]);
				case 9: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR9]);
				case 10: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR10]);
				case 11: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR11]);
				case 12: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR12]);
				case 13: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR13]);
				case 14: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR14]);
				case 15: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR15]);
				case 16: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR16]);
				case 17: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR17]);
				case 18: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR18]);
				case 19: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR19]);
				case 20: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[i][birlikR20]);
			}
			break;
		}
	}
	else if(birlikid == -1) birlik = "Yok", rutbe = "Yok";
	new vipisim[24];
	switch(vericek_int(0, "VIP"))
	{
		case 1: vipisim = "Bronz VIP";
		case 2: vipisim = "Gümüþ VIP";
		case 3: vipisim = "Altýn VIP";
		default: vipisim = "Yok";
	}
	if(vericek_int(0, "Hapis") > 0) hapis = vericek_int(0, "Hapis") / 60;
	else if(vericek_int(0, "ICHapis") > 0) hapis = vericek_int(0, "ICHapis") / 60;
	new oyuncu_isim[MAX_PLAYER_NAME + 1];
	format(oyuncu_isim, sizeof(oyuncu_isim), "%s", vericek_varchar(0, "isim"));
	for(new i = 0, len = strlen(oyuncu_isim); i < len; i ++) if(oyuncu_isim[i] == ' ') oyuncu_isim[i] = '_';
	format(hesapdurumu, sizeof(hesapdurumu), "%s", vericek_varchar(0, "Yasaklama"));
	if(isnull(hesapdurumu)) format(hesapdurumu, sizeof(hesapdurumu), "%s", vericek_varchar(0, "Yasaklama"));
	else format(hesapdurumu, sizeof(hesapdurumu), "Yok/Deðil");
	
	SendClientMessage(playerid, RENK_KARAKTER, "--------------------------------------------------------------------------------------------------------");
	format(yazi, sizeof(yazi), "%s - (Seviye: %d) - (Oynama Saati: %d) - (Yasaklama: %s)", oyuncu_isim, vericek_int(0, "Level"), vericek_int(0, "OynamaSaati"), hesapdurumu);
	SendClientMessageEx(playerid, RENK_BEYAZ, "%s", yazi);
	format(yazi, sizeof(yazi), "(Cinsiyet: %s) - (Doðum Yeri: %s) - (Ten Rengi: %s)", (vericek_int(0, "Cinsiyet") == 1) ? ("Erkek") : ("Kadýn"), Kokenler[vericek_int(0, "DogumYeri")], (vericek_int(0, "TenRengi") == 1) ? ("Beyaz") : ("Siyah"));
	SendClientMessageEx(playerid, RENK_KARAKTER, "%s", yazi);
	format(yazi, sizeof(yazi), "(Para: %s) - (Banka Hesabý: %s) - (Hesap NO: %d)", NumaraFormati(vericek_int(0, "Para")), NumaraFormati(vericek_int(0, "BankaPara")), vericek_int(0, "HesapNumarasi"));
	SendClientMessageEx(playerid, RENK_BEYAZ, "%s", yazi);
	if(vericek_int(0, "TelefonNumarasi") > 0) format(yazi, sizeof(yazi), "(Birlik: %s) - (Rütbe: %s) - (VIP: %s) - (Telefon Numarasý: %d)", birlik, rutbe, vipisim, vericek_int(0, "TelefonNumarasi"));
	else if(vericek_int(0, "TelefonNumarasi") == 0) format(yazi, sizeof(yazi), "(Birlik: %s) - (Rütbe: %s) - (VIP: %s) - (Telefon Numarasý: Yok)", birlik, rutbe, vipisim);
	SendClientMessageEx(playerid, RENK_KARAKTER, "%s", yazi);
 	format(yazi, sizeof(yazi), "(Hesap ID: %03d) - (Kýyafet: %d) - (SQL ID: %03d) - (Zýrh: %.0f) - (Meslek: %s)", vericek_int(0, "hesap"), vericek_int(0, "Kiyafet"), vericek_int(0, "ID"), vericek_float(0, "Zirh"), MeslekIsim(vericek_int(0, "Meslek")));
	SendClientMessageEx(playerid, RENK_BEYAZ, "%s", yazi);
	format(yazi, sizeof(yazi), "(Ýnterior: %d) - (VW: %d) - (Maaþ: %d/60dk) - (Uyarýlar: %d) - (Hapis Süresi: %d dk)", vericek_int(0, "interior"), vericek_int(0, "vw"), vericek_int(0, "Dakika"), vericek_int(0, "Uyari"), hapis);
	SendClientMessageEx(playerid, RENK_KARAKTER, "%s", yazi);
	SendClientMessage(playerid, RENK_KARAKTER, "--------------------------------------------------------------------------------------------------------");
	return 1;
}

public Uyari_Kontrol(playerid, isim[], sebep[])
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) {
		for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
		return HataMesaji(playerid, "%s adlý oyuncu veritabanýnda bulunamadý.", isim);
	}
	new uyari = vericek_int(0, "Uyari"), oyuncu_id = vericek_int(0, "ID"), oyuncu_isim[MAX_PLAYER_NAME + 1], yasaklama[64];
	format(yasaklama, sizeof(yasaklama), "%s", vericek_varchar(0, "Yasaklama"));
	if(!isnull(yasaklama) || uyari > 4) return HataMesaji(playerid, "Bu oyuncu yasaklanmýþ.");
	
	format(oyuncu_isim, sizeof(oyuncu_isim), "%s", vericek_varchar(0, "isim"));
	format(isim, MAX_PLAYER_NAME + 1, "%s", vericek_varchar(0, "isim"));
	for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
	new sorgu[256];
	format(sorgu, sizeof(sorgu),"UPDATE `oyuncular` SET `Uyari` = '%d' WHERE `ID` = '%d'", uyari + 1, oyuncu_id);
	mysql_query(mysqlB, sorgu);
	SunucuMesaji(playerid, "%s adlý oyuncuya %s sebebiyle offline uyarý verdiniz.", oyuncu_isim, sebep);
	new bildirim_icerik[144];
	format(bildirim_icerik, sizeof(bildirim_icerik), "%s adlý yetkili karakterinize %s sebebiyle offline uyarý ekledi.", OyuncuBilgi[playerid][oAdminNick], sebep);
	format(sorgu, sizeof(sorgu), "INSERT INTO `bildirimler` (`Eklenen`, `Sebep`, `Tarih`, `Ekleyen`) VALUES ('%s', '%s', '%s', '%s')", oyuncu_isim, bildirim_icerik, Tarih(), "Sistem");
	mysql_tquery(mysqlB, sorgu);
	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s adlý kiþiye offline uyarý verdi. sebep: %s", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, sebep);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_ban.txt", "%s", log_icerik);
	if(uyari + 1 >= 5) {
		format(sorgu, sizeof(sorgu), "UPDATE `oyuncular` SET `Yasaklama` = '%s' WHERE `ID` = '%d'", "5 Uyarý", oyuncu_id);
		mysql_tquery(mysqlB, sorgu);
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin karakterini yasakladý. (sebep: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, oyuncu_id, sebep);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ban.txt", "%s", log_icerik);
	}
	return 1;
}

public CK_Kontrol(playerid, isim[])
{
	new rows, fields, ck;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) {
		for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
		return HataMesaji(playerid, "%s adlý oyuncu veritabanýnda bulunamadý.", isim);
	}
	ck = vericek_int(0, "CK");
	if(ck == 1) return HataMesaji(playerid, "Bu oyuncu zaten CK edilmiþ.");
	new sorgu[256];
	format(sorgu, sizeof(sorgu),"UPDATE `oyuncular` SET `CK` = '1', `Hapis` = '0', `IDHapis` = '-1', `ICHapis` = '0' WHERE `ID` = '%d'", vericek_int(0, "ID"));
	mysql_query(mysqlB, sorgu);
	format(isim, 24, "%s", vericek_varchar(0, "isim"));
	for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
	SunucuMesaji(playerid, "%s adlý oyuncuyu CK ettiniz.", isim);
	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s adlý kiþiyi offline ck etti.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], isim);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/ck.txt", "%s", log_icerik);
	return 1;
}

public CKIptal(playerid, isim[])
{
	new rows, fields, ck;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) {
		for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
		return HataMesaji(playerid, "%s adlý oyuncu veritabanýnda bulunamadý.", isim);
	}
	ck = vericek_int(0, "CK");
	if(ck == 0) return HataMesaji(playerid, "Bu oyuncu CK edilmemiþ.");
	new sorgu[256];
	format(sorgu, sizeof(sorgu),"UPDATE `oyuncular` SET `CK` = '0', `x` = '1529.6327', `y` = '-1683.8873', `z` = '13.3828', `interior` = '0', `vw` = '0' WHERE `ID` = '%d'", vericek_int(0, "ID"));
	mysql_query(mysqlB, sorgu);
	format(isim, 24, "%s", vericek_varchar(0, "isim"));
	for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
	SunucuMesaji(playerid, "%s adlý oyuncunun CK durumu iptal edildi.", isim);
	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin ck durumunu sildi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], isim);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/ck.txt", "%s", log_icerik);
	return 1;
}

public Soyadi_Kontrol(oyuncuid, isim[], tur)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows) if(vericek_int(0, "Kilitleyen") != OyuncuBilgi[oyuncuid][oHesap] && vericek_int(0, "izin") != OyuncuBilgi[oyuncuid][oHesap]) {
		switch(tur) {
			case 0: return DialogGoster(oyuncuid, DIALOG_ISIM_DEGISTIR, DIALOG_STYLE_INPUT, "Non-RP - Ýsim Deðiþimi", "{B70000}HATA: {FFFFFF}Bu soyadý kilitli.\n{FFFFFF}Aþaðýdaki kutuya deðiþtirmek istediðiniz ismi giriniz;", "Tamam", "Kapat");
			case 1: return DialogGoster(oyuncuid, DIALOG_NONRPNAME, DIALOG_STYLE_INPUT, "Non-RP - Ýsim Deðiþimi", "{B70000}HATA: {FFFFFF}Bu soyadý kilitli.\n{FFFFFF}Bir yetkili tarafýndan isim deðiþtirmeye zorlandýn, lütfen yeni almak istediðin ismin aþaðýdaki kutucuða gir;\n\nNOT: Yeni ismin roleplay formatýna uygun olmalýdýr. (ÖRN: John_Doe)", "Deðiþtir", "");
			case 2: return DialogGoster(oyuncuid, DIALOG_KARAKTER_YARAT, DIALOG_STYLE_INPUT, "Non-RP - Ýsim Deðiþimi", "{B70000}HATA: {FFFFFF}Bu soyadý kilitli.\n{FFFFFF}Yeni karakteriniz için isim girin;", "Tamam", "Ýptal");
		}
	}
	if(!rows || rows && (vericek_int(0, "Kilitleyen") == OyuncuBilgi[oyuncuid][oHesap] || vericek_int(0, "izin") == OyuncuBilgi[oyuncuid][oHesap])) {
		new sorgu[144 + MAX_PLAYER_NAME];
		format(sorgu, sizeof(sorgu), "SELECT ID, hesap, yaratildi FROM oyuncular WHERE isim = '%s' LIMIT 1", isim);
		mysql_tquery(mysqlB, sorgu, "Isim_Degistir", "ds", oyuncuid, isim);
	}
	return 1;
}

public Isim_Degistir(oyuncuid, isim[])
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows) {
		if(vericek_int(0, "hesap") != OyuncuBilgi[oyuncuid][oHesap]) return DialogGoster(oyuncuid, DIALOG_ISIM_DEGISTIR, DIALOG_STYLE_INPUT, "vRP: Karaker Oluþturma", "{B70000}HATA: {FFFFFF}Bu isim kullanýmda.\n{FFFFFF}Aþaðýdaki kutuya deðiþtirmek istediðiniz ismi giriniz;", "Tamam", "Kapat");
		else if(vericek_int(0, "hesap") == OyuncuBilgi[oyuncuid][oHesap] && vericek_int(0, "yaratildi") != 2) return DialogGoster(oyuncuid, DIALOG_ISIM_DEGISTIR, DIALOG_STYLE_INPUT, "vRP: Karaker Oluþturma", "{B70000}HATA: {FFFFFF}Bu isim kullanýmda.\n{FFFFFF}Aþaðýdaki kutuya deðiþtirmek istediðiniz ismi giriniz;", "Tamam", "Kapat");
	}
	new eski_isim[MAX_PLAYER_NAME + 1];
	format(eski_isim, sizeof(eski_isim), "%s", OyuncuBilgi[oyuncuid][oIsim]);
	SunucuMesaji(oyuncuid, "Ýsmini %s olarak deðiþtirdin.", isim);
	SetPlayerName(oyuncuid, isim);
	IsimLabelGuncelle(oyuncuid);
	format(OyuncuBilgi[oyuncuid][oIsim], 32, "%s", isim);
	OyuncuBilgi[oyuncuid][oKarakterYaratildi] = 0;
	OyuncuCinsiyetSec(oyuncuid);
	OyuncuKaydet(oyuncuid);
	new oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	for(new i = 0; i < MAKSIMUM_EV; i ++) if(Ev_SahipKontrol(oyuncuid, i)) EvBilgi[i][evSahipIsim][0] = 0, Ev_Yenile(i);
	for(new i = 0; i < MAKSIMUM_BINA; i ++) if(Bina_SahipKontrol(oyuncuid, i)) BinaBilgi[i][binaSahipIsim][0] = 0, Bina_Yenile(i);
	for(new i = 0; i < MAKSIMUM_ISYERI; i ++) if(Isyeri_SahipKontrol(oyuncuid, i)) IsyeriBilgi[i][isyeriSahipIsim][0] = 0, Isyeri_Yenile(i);
	for(new i = 0; i < MAKSIMUM_GARAJ; i++) if(OyuncuBilgi[oyuncuid][oID] == GarajBilgi[i][garajSahip]) GarajBilgi[i][garajSahipIsim][0] = 0, Garaj_Yenile(i);
	new sorgu[256 + MAX_PLAYER_NAME];
	if(rows) {
		format(sorgu, sizeof(sorgu),"UPDATE `oyuncular` SET `isim` = '%s' WHERE `ID` = '%d'", eski_isim, vericek_int(0, "ID"));
		mysql_query(mysqlB, sorgu);
	}
	else if(!rows) {
		format(sorgu, sizeof(sorgu),"INSERT INTO oyuncular (isim, yaratildi, hesap, kiyafet, oSonGiris) VALUES ('%s','%d','%d','%d', '%s')", eski_isim, 2, OyuncuBilgi[oyuncuid][oHesap], OyuncuBilgi[oyuncuid][oKiyafet], OyuncuBilgi[oyuncuid][oSonGiris]);
		mysql_query(mysqlB, sorgu);
	}
	format(sorgu, sizeof(sorgu), "DELETE FROM `urunler` WHERE `Sahip` = '%d' AND `Urun` = '%s' LIMIT 1", OyuncuBilgi[oyuncuid][oHesap], "Ýsim Deðiþikliði");
	mysql_query(mysqlB, sorgu);
	new log_icerik[144];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) %s ürününü kullandý. (%s)", Tarih(), eski_isim, OyuncuBilgi[oyuncuid][oID], "Ýsim Deðiþikliði", oyuncu_isim);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/oocmarket.txt", "%s", log_icerik);
	return 1;
}

public Admin_IsimKontrol(playerid, oyuncuid, isim[])
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows) return HataMesaji(playerid, "Bu isimde bir kullanýcý olduðu için isim deðiþtirilemiyor.");
	else if(!rows) {
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin ismini %s olarak deðiþtirdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], isim);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
		SunucuMesaji(playerid, "%s adlý kiþinin ismini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), isim);
		SetPlayerName(oyuncuid, isim);
		IsimLabelGuncelle(oyuncuid);
		format(OyuncuBilgi[oyuncuid][oIsim], 32, "%s", isim);
		OyuncuKaydet(oyuncuid);
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		for(new i = 0; i < MAKSIMUM_EV; i ++) if(Ev_SahipKontrol(oyuncuid, i)) EvBilgi[i][evSahipIsim][0] = 0, Ev_Yenile(i);
		for(new i = 0; i < MAKSIMUM_BINA; i ++) if(Bina_SahipKontrol(oyuncuid, i)) BinaBilgi[i][binaSahipIsim][0] = 0, Bina_Yenile(i);
		for(new i = 0; i < MAKSIMUM_ISYERI; i ++) if(Isyeri_SahipKontrol(oyuncuid, i)) IsyeriBilgi[i][isyeriSahipIsim][0] = 0, Isyeri_Yenile(i);
		for(new i = 0; i < MAKSIMUM_GARAJ; i++) if(OyuncuBilgi[oyuncuid][oID] == GarajBilgi[i][garajSahip]) GarajBilgi[i][garajSahipIsim][0] = 0, Garaj_Yenile(i);
		SunucuMesaji(oyuncuid, "%s adlý yetkili, ismini %s olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	}
	return 1;
}

public Yasaklama_Kontrol(playerid)
{
	new rows, sorgu[128], ip[16];
	cache_get_row_count(rows);
	if(rows) HataMesaji(playerid, "%s sebebiyle yasaklý olduðun için oyundan atýldýn.", vericek_varchar(0, "Sebep")), KickEx(playerid);
	else if(!rows)
	{
     	GetPlayerIp(playerid, ip, sizeof(ip));
		format(sorgu, sizeof(sorgu), "SELECT * FROM `yasaklamalar` WHERE `IP` = '%s'", ip);
		mysql_tquery(mysqlB, sorgu, "IPYasaklama_Kontrol", "d", playerid);
	}
	return 1;
}

public SerialYasaklama_Kontrol(playerid)
{
	new rows, sorgu[128], isim[MAX_PLAYER_NAME];
	cache_get_row_count(rows);
	if(rows)
	{
		HataMesaji(playerid, "%s sebebiyle yasaklý olduðun için oyun sunucusuna giriþ saðlayamazsýn.", vericek_varchar(0, "Sebep"));
		KickEx(playerid);
	}
	else if(!rows)
	{
	    if(OyuncuYuklemeYapiyor[playerid] == true) return false;
		GetPlayerName(playerid, isim, sizeof(isim));
		strdel(isim, 0, 5);
		format(sorgu, sizeof(sorgu), "SELECT * FROM `hesaplar` WHERE `forumID` = '%s'", isim);
		mysql_tquery(mysqlB, sorgu, "Oyuncu_Kontrol", "d", playerid);
	}
	return 1;
}


public IPYasaklama_Kontrol(playerid)
{
	new rows, sorgu[128], szSerial[128];
	cache_get_row_count(rows);
	if(rows)
	{
		HataMesaji(playerid, "IP adresin %s sebebiyle yasaklý olduðu için oyundan atýldýn.", vericek_varchar(0, "Sebep"));
		KickEx(playerid);
	}
	else if(!rows)
	{
	    gpci(playerid, szSerial, sizeof(szSerial));
		format(sorgu, sizeof(sorgu), "SELECT * FROM `yasaklamalar` WHERE `Serial` = '%s'", szSerial);
		mysql_tquery(mysqlB, sorgu, "SerialYasaklama_Kontrol", "d", playerid);
	}
	return 1;
}

public HesapBan_Kontrol(playerid, isim[], sebep[])
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	if(!rows) {
		for(new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		return HataMesaji(playerid, "%s adlý oyuncu veritabanýnda bulunamadý.", isim);
	}

	new hesap, sorgu[256];
	hesap = vericek_int(0, "hesap");
	format(sorgu, sizeof(sorgu),"SELECT * FROM yasaklamalar WHERE Yasaklanan = '%03d'", hesap);
	mysql_tquery(mysqlB, sorgu, "Hesap_YasaklamaKontrol", "is", playerid, sebep);
	return 1;
}

public Hesap_YasaklamaKontrol(playerid, sebep[])
{
	new rows, sorgu[128], hesap;
	cache_get_row_count(rows);
	if(rows) return HataMesaji(playerid, "Hesap %s sebebiyle yasaklanmýþ, tekrar yasaklanamaz.", vericek_varchar(0, "Sebep"));
	else if(!rows)
	{
	    hesap = vericek_int(0, "hesap");
		format(sorgu, sizeof(sorgu),"SELECT * FROM hesaplar WHERE forumID = '%03d'", hesap);
		mysql_tquery(mysqlB, sorgu, "Hesap_YasaklamaDene", "ids", playerid, hesap, sebep);
	}
	return 1;
}

public Hesap_YasaklamaDene(playerid, hesap, sebep[])
{
	new sorgu[512], rows, fields, hesapst[32];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(playerid, "%03d ID'li hesap veritabanýnda bulunamadý.", hesap);

	else if(rows) {
		if(vericek_int(0, "Admin") > OyuncuBilgi[playerid][oAdmin]) return HataMesaji(playerid, "Girilen kiþinin yönetici seviyesi sizden daha yüksek.");

		format(hesapst, sizeof(hesapst), "%03d", hesap);
		format(sorgu, sizeof(sorgu),"INSERT INTO yasaklamalar (Yasaklanan, Yasaklayan, Sebep, IP) VALUES ('%s','%s','%s','%s')", hesapst, OyuncuBilgi[playerid][oAdminNick], sebep, vericek_varchar(0, "IP"));
		mysql_query(mysqlB, sorgu);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s, %03d ID'li hesabý yasakladý. sebep: %s", OyuncuBilgi[playerid][oAdminNick], hesap, sebep);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) offline bir hesap yasakladý. (ID: %d | Sebep: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], hesap, sebep);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ban.txt", "%s", log_icerik);
	}
	return 1;
}

public YasaklamaDene(playerid, isim[], sebep[])
{
	new query[128], rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) {
		for(new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		return HataMesaji(playerid, "%s adlý oyuncu veritabanýnda bulunamadý.", isim);
	}
	else if(rows) {

		format(query, sizeof(query),"UPDATE `oyuncular` SET `Yasaklama` = '%s' WHERE `ID` = '%d'", sebep, vericek_int(0, "ID"));
		mysql_query(mysqlB, query);
		for(new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s, %s adlý karakteri yasakladý. sebep: %s", OyuncuBilgi[playerid][oAdminNick], isim, sebep);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s adlý kiþinin karakterini offline yasakladý. (sebep: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], isim, sebep);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ban.txt", "%s", log_icerik);
	}
	return 1;
}

public Gate_HesapKontrol()
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return 0;

	new sorgu[512], hesap;
	hesap = vericek_int(0, "hesap");
	foreach(new i : Player) if(OyuncuBilgi[i][oHesap] == hesap) return BakiyeEkle(i, GATE_SIL_IADE);
   	format(sorgu, sizeof(sorgu), "SELECT * FROM hesaplar WHERE forumID = '%d'", hesap);
	mysql_tquery(mysqlB, sorgu, "Gate_BakiyeEkle");
	return 1;
}

public Gate_BakiyeEkle()
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return 0;

	new sorgu[512];
	format(sorgu, sizeof(sorgu),"UPDATE `hesaplar` SET `Bakiye` = %d WHERE `forumID` = '%d'", vericek_int(0, "Bakiye") + GATE_SIL_IADE, vericek_int(0, "hesap"));
	mysql_query(mysqlB, sorgu);
	return 1;
}

public Obje_HesapKontrol()
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return 0;

	new sorgu[512], hesap;
	hesap = vericek_int(0, "hesap");
	foreach(new i : Player) if(OyuncuBilgi[i][oHesap] == hesap) return BakiyeEkle(i, OBJE_SIL_IADE);
   	format(sorgu, sizeof(sorgu), "SELECT * FROM hesaplar WHERE forumID = '%d'", hesap);
	mysql_tquery(mysqlB, sorgu, "Obje_BakiyeEkle");
	return 1;
}

public Obje_BakiyeEkle()
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return 0;

	new sorgu[512];
	format(sorgu, sizeof(sorgu),"UPDATE `hesaplar` SET `Bakiye` = %d WHERE `forumID` = '%d'", vericek_int(0, "Bakiye") + OBJE_SIL_IADE, vericek_int(0, "hesap"));
	mysql_query(mysqlB, sorgu);
	return 1;
}

public ParaKesDene(playerid, isim[], miktar)
{
	static query[128], rows, fields, eski;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) {
		for(new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		HataMesaji(playerid, "%s adlý oyuncu veritabanýnda bulunamadý.", isim);
	}
	else if(rows) {

		eski = vericek_int(0, "Para");
		format(query, sizeof(query),"UPDATE `oyuncular` SET `Para` = %d WHERE `isim` = '%s'", eski - miktar, isim);
		mysql_query(mysqlB, query);
		for(new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		SunucuMesaji(playerid, "%s adlý kiþiden %s miktarýnda para kesildi.", isim, NumaraFormati(miktar));
        YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s, %s adlý kiþiden offline olarak %s miktarýnda para kesti.", OyuncuBilgi[playerid][oAdminNick], isim, NumaraFormati(miktar));
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiden offline %s kesti.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], isim, vericek_int(0, "ID"), NumaraFormati(miktar));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/yonetim.txt", "%s", log_icerik);
	}
	return 1;
}

public ParaDene(playerid, isim[], miktar)
{
	new query[128], rows, fields, eski;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) {
		for(new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		HataMesaji(playerid, "%s adlý oyuncu veritabanýnda bulunamadý.", isim);
	}
	else if(rows) {

		eski = vericek_int(0, "Para");
		format(query, sizeof(query),"UPDATE `oyuncular` SET `Para` = %d WHERE `isim` = '%s'", eski + miktar, isim);
		mysql_query(mysqlB, query);
		for(new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		SunucuMesaji(playerid, "%s adlý kiþiye %s miktarýnda para verildi.", isim, NumaraFormati(miktar));
        YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s, %s adlý kiþiye offline olarak %s miktarýnda para verdi.", OyuncuBilgi[playerid][oAdminNick], isim, NumaraFormati(miktar));
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiye offline %s verdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], isim, vericek_int(0, "ID"), NumaraFormati(miktar));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/yonetim.txt", "%s", log_icerik);
	}
	return 1;
}

public HapisDene(playerid, isim[], dakika, sebep[])
{
	new sorgu[512], rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) {
		for(new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		HataMesaji(playerid, "%s adlý oyuncu veritabanýnda bulunamadý.", isim);
	}
	else if(rows) {
		if(vericek_int(0, "Aktif") == 1) return HataMesaji(playerid, "Oyuncu aktif, /ahapis deneyin.");

		format(sorgu, sizeof(sorgu), "INSERT INTO `oocsicil` (`OyuncuID`, `Admin`, `Tarih`, `Sebep`, `Dakika`) VALUES('%d', '%s','%s', '%s', '%d')", vericek_int(0, "ID"), OyuncuBilgi[playerid][oAdminNick], Tarih(), sebep, dakika);
		mysql_tquery(mysqlB, sorgu);
		format(sorgu, sizeof(sorgu),"UPDATE `oyuncular` SET `Hapis` = %d", dakika * 60);
		for (new i = 0; i < 13; i ++) format(sorgu, sizeof(sorgu), "%s, `Silah%d` = '0', `Mermi%d` = '0'", sorgu, i + 1, i + 1);
		format(sorgu, sizeof(sorgu), "%s WHERE `isim` = '%s'", sorgu, SQL_ReturnEscaped(isim));
		mysql_query(mysqlB, sorgu);
		for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
		SunucuMesaji(playerid, "%s adlý kiþi %d dakika hapise atýldý.", isim, dakika);
        YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s, %s adlý kiþiyi %d dakika cezalandýrdý. sebep: %s", OyuncuBilgi[playerid][oAdminNick], isim, dakika, sebep);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiyi %d dakika hapise attý. sebep: %s", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], isim, vericek_int(0, "ID"), dakika, sebep);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/hapis.txt", "%s", log_icerik);
	}
	return 1;
}

public Oyuncu_Kontrol(playerid)
{
	new rows, fields, ip[16], bilgi[512];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows)
	{
		SohbetTemizle(playerid, false);
		PlayerTextDrawShow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][0]);
		DialogGoster(playerid, 0, DIALOG_STYLE_MSGBOX, "Kayýt", "Hesabýn veritabanýnda bulunamadý, oyun içi kayýtlar kapalý olduðu için sunucudan atýldýn\n\nHesap oluþturmak için forum adresine giriþ yaparak karakter oluþturma bölümünü ziyaret etmelisin.", "Tamam", "");
		return KickEx(playerid);
	}
	if(OyuncuYuklemeYapiyor[playerid] == false && OyuncuBilgi[playerid][oDialog] == -1)
	{
	    new oyuncu_isim[MAX_PLAYER_NAME + 1], isim[MAX_PLAYER_NAME + 1], hesap_id;
	    GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	    GetPlayerName(playerid, isim, sizeof(isim));
	    if(strfind(isim, "VIGA_") == -1 && strfind(isim, "Viga_") == -1) return DialogGoster(playerid, 0, DIALOG_STYLE_MSGBOX, "Hata", "Ýsim formatýnýz yanlýþ!\n Ýsminizin baþýna VIGA_ veya Viga_ etiketini almadýðýnýz için sunucuya giriþ saðlayamazsýnýz.\n\nÖrnek: VIGA_001 veya Viga_5125", "Tamam", ""), PlayerTextDrawShow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][0]), KickEx(playerid);
	    strdel(oyuncu_isim, 0, 5);
	    hesap_id = strval(oyuncu_isim);
	    foreach(new i : Player) if(OyuncuBilgi[i][oHesap] == hesap_id) return SunucuMesaji(playerid, "Bu hesap zaten oyunda."), PlayerTextDrawShow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][0]), KickEx(playerid);
	    SohbetTemizle(playerid, false);
	    SetPlayerColor(playerid, RENK_VARSAYILAN);
		GetPlayerIp(playerid, ip, sizeof(ip));
	    format(bilgi, sizeof(bilgi), "{FFFFFF}Viga Roleplay'ýn eðlence dolu dünyasýna tekrardan hoþ geldin {afafaf}%s{FFFFFF}, eðlenceye dönmek için aþaðýdaki kutuya þifreni gir.\n\n{FFFFFF}NOT: Sakýn unutma, giriþ yapmak için 60 saniyen var.", OyuncuIsim(playerid));
	    DialogGoster(playerid, DIALOG_GIRIS, DIALOG_STYLE_PASSWORD, "vRP: Giriþ", bilgi, "Tamam", "Ýptal"), PlayerTextDrawShow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][0]);
	    if(!IsPlayerAdmin(playerid) && !!strcmp(OyuncuIP(playerid), "127.0.0.1")) OyuncuBilgi[playerid][oGirisTimer] = SetTimerEx("GirisKick", 60 * 1000, false, "d", playerid);
	    if(OyuncuBilgi[playerid][oGiris] == false) {
			OyuncuPosDegistir(playerid, 1045.441040, -918.800231, -80.0);
			InterpolateCameraPos(playerid, 437.747619, -1469.347900, 36.590827, 1045.441040, -918.800231, 92.159584, 10000);
			InterpolateCameraLookAt(playerid, 442.437072, -1467.623413, 36.778285, 1049.376220, -921.691528, 93.234367, 1000);
		}
	}
	return 1;
}

public Arac_SahipArat(playerid)
{
	new rows, fields, isim[64], aracid;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
	if(rows) {
		format(isim, sizeof(isim), "%s", vericek_varchar(0, "isim"));
		for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
		SendClientMessageEx(playerid, 0xFF9966FF, "Araç Sahibi: {FFFFFF}%s {FF9966} Model: {FFFFFF}%s {FF9966} Plaka: {FFFFFF}%s", isim, AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracPlaka]);
	}
	else if(!rows) SendClientMessageEx(playerid, RENK_SERVER, "Sahip: {FFFFFF}Bulunamadý {a9c4e4}| Model: {FFFFFF}%s {a9c4e4}| Plaka: {FFFFFF}%s", AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracPlaka]);
	return 1;
}

public Karakter_YasaklamaKontrol(playerid)
{
	new rows, fields, isim[32], sorgu[128];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows)
	{
		SunucuMesaji(playerid, "Oyuncu \"%s\" sebebiyle yasaklanmýþ, yasaklanma kaldýrýldý.", vericek_varchar(0, "Yasaklama"));
		format(isim, sizeof(isim), "%s", vericek_varchar(0, "isim"));
		format(sorgu, sizeof(sorgu), "UPDATE `oyuncular` SET `Yasaklama` = '' WHERE `isim` = '%s'", vericek_varchar(0, "isim"));
		mysql_tquery(mysqlB, sorgu);
		for(new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili %s adlý oyuncunun yasaklamasýný kaldýrdý.", OyuncuBilgi[playerid][oAdminNick], isim);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s adlý karakterin yasaðýný kaldýrdý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], isim);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ban.txt", "%s", log_icerik);
	}
	else if(!rows) HataMesaji(playerid, "Girilen oyuncu yasaklýlar listesinde bulunamadý.");
	return 1;
}

public Yonetim_YasaklamaKontrol(playerid)
{
	new rows, fields, isim[32], sorgu[128];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows)
	{
		SunucuMesaji(playerid, "Oyuncu \"%s\" sebebiyle yasaklanmýþ, yasaklanma kaldýrýldý.", vericek_varchar(0, "Sebep"));
		format(isim, sizeof(isim), "%s", vericek_varchar(0, "Yasaklanan"));
		format(sorgu, sizeof(sorgu), "DELETE FROM `yasaklamalar` WHERE `Yasaklanan` = '%s'", vericek_varchar(0, "Yasaklanan"));
		mysql_tquery(mysqlB, sorgu);
		for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili %s adlý oyuncunun yasaklamasýný kaldýrdý.", OyuncuBilgi[playerid][oAdminNick], isim);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s ID'li hesabýn yasaklamasýný kaldýrdý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], isim);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ban.txt", "%s", log_icerik);
	}
	else if(!rows) HataMesaji(playerid, "Girilen oyuncu yasaklýlar listesinde bulunamadý.");
	return 1;
}

public Yonetim_IPYasaklamaKontrol(playerid)
{
	new rows, fields, ip[16], sorgu[128];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows)
	{
		format(sorgu, sizeof(sorgu), "UPDATE `yasaklamalar` SET `IP` = '0.0.0.0' WHERE `IP` = '%s'", vericek_varchar(0, "IP"));
		mysql_tquery(mysqlB, sorgu);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir IP(%s) baný açtý.", OyuncuBilgi[playerid][oAdminNick], ip);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir IP(%s) baný açtý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], ip);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ban.txt", "%s", log_icerik);
	}
	else if(!rows) HataMesaji(playerid, "Girilen IP yasaklýlar listesinde bulunamadý.");
	return 1;
}

public GirisTest(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	static rows, fields, ip[16], bilgi[512];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows)
	{
		OyuncuBilgi[playerid][oGirisTest]++;
		if(OyuncuBilgi[playerid][oGirisTest] >= 3)
		{
			HataMesaji(playerid, "Þifreni 3 defadan fazla yanlýþ girdiðin için oyundan atýldýn.");
			KickEx(playerid);
		}
		else
		{
			GetPlayerIp(playerid, ip, sizeof(ip));
	    	format(bilgi, sizeof(bilgi), "{FFFFFF}Viga Roleplay'ýn eðlence dolu dünyasýna tekrardan hoþ geldin {afafaf}%s{FFFFFF}, eðlenceye dönmek için aþaðýdaki kutuya þifreni gir.\n\n{B70000}HATA: {FFFFFF}Son girdiðin þifre hatalýydý, lütfen tekrar deneyiniz.\n\n{FFFFFF}NOT: Sakýn unutma, giriþ yapmak için 60 saniyen var.", OyuncuIsim(playerid));
	    	DialogGoster(playerid, DIALOG_GIRIS, DIALOG_STYLE_PASSWORD, "vRP: Giriþ", bilgi, "Tamam", "Ýptal");
		}
	}
	else if(rows)
	{
        if(!IsPlayerAdmin(playerid)) KillTimer(OyuncuBilgi[playerid][oGirisTimer]), OyuncuBilgi[playerid][oGirisTimer] = -1;
		new sorgu[256], isim[MAX_PLAYER_NAME], oIP[16];
		GetPlayerName(playerid, isim, sizeof(isim));
		GetPlayerIp(playerid, oIP, sizeof(oIP));
		strdel(isim, 0, 5);
		format(sorgu, sizeof(sorgu), "UPDATE `hesaplar` SET `SonGiris` = '%s', `IP` = '%s' WHERE `forumID` = '%s'", Tarih(), oIP, isim);
		mysql_query(mysqlB, sorgu);
		format(sorgu, sizeof(sorgu), "SELECT * FROM `hesaplar` WHERE `forumID` = '%s'", isim);
		mysql_tquery(mysqlB, sorgu, "HesapYukle", "d", playerid);
	}
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    CancelSelectTextDraw(playerid);
    if(playertextid == OyuncuBilgi[playerid][oGirisTextdraw][2] || playertextid == OyuncuBilgi[playerid][oGirisTextdraw][10] || playertextid == OyuncuBilgi[playerid][oGirisTextdraw][14]) {
		new satir = 0;
		if(playertextid == OyuncuBilgi[playerid][oGirisTextdraw][2]) satir = 0;
		else if(playertextid == OyuncuBilgi[playerid][oGirisTextdraw][10]) satir = 1;
		else if(playertextid == OyuncuBilgi[playerid][oGirisTextdraw][14]) satir = 2;

		new mysql_sorgu[256], isim[MAX_PLAYER_NAME];
		GetPlayerName(playerid, isim, sizeof(isim));
		strdel(isim, 0, 5);
		format(mysql_sorgu, sizeof(mysql_sorgu), "SELECT isim, Kiyafet, Level FROM oyuncular WHERE hesap = '%s' AND `yaratildi` < '2' ORDER BY ID ASC LIMIT 3", isim);
		mysql_tquery(mysqlB, mysql_sorgu, "Karakter_Yukle", "ii", playerid, satir);
		return 1;
    }
    else if(playertextid == OyuncuBilgi[playerid][oGirisTextdraw][19]) return DialogGoster(playerid, DIALOG_KARAKTER_YARAT, DIALOG_STYLE_INPUT, "vRP: Karaker Oluþturma", "{FFFFFF}Yeni karakteriniz için isim girin;", "Tamam", "Ýptal");
    else if(playertextid == OyuncuBilgi[playerid][oiphone][2]) {
    if(OyuncuBilgi[playerid][oArama] > -1) return HataMesaji(playerid, "Arama yaparken bu seçeneði kullanamazsýn.");
	DialogGoster(playerid, DIALOG_ARAMA, DIALOG_STYLE_INPUT, "Cep Telefonu > Arama", "Arama yapmak istediðiniz numarayý girin:", "Ara", "Kapat");
	}
	else if(playertextid == OyuncuBilgi[playerid][oiphone][11]) {
	DialogGoster(playerid, DIALOG_MESAJ, DIALOG_STYLE_INPUT, "vMessage", "Mesaj yollamak istediðin numarayý giriniz:", "Mesaj Yolla", "Kapat");
	}
	else if(playertextid == OyuncuBilgi[playerid][oiphone][12]) {
	DialogGoster(playerid, DIALOG_REKLAMLAR, DIALOG_STYLE_TABLIST, "SanAdvertisement", "Reklam Ver\nAjans Reklamlarý\nTüm Ajans Reklamlarý", "Seç", "Kapat");
	}
	else if(playertextid == OyuncuBilgi[playerid][oiphone][10]) {
	DialogGoster(playerid, DIALOG_MOBILBANKA, DIALOG_STYLE_TABLIST, "ZCN Banka - Online Ýþlemler", "Hesap Bilgileri\nÝþlem Geçmiþi\nEFT & Havale\nEn Yakýn ATM", "Seç", "Kapat");
	}
	else if(playertextid == OyuncuBilgi[playerid][oiphone][8]) {
	new icerik[256];
			if(!IsPlayerInAnyVehicle(playerid)) format(icerik, sizeof(icerik), "%sUber Çaðýr\n", icerik);
			else {
			    format(icerik, sizeof(icerik), "%sUber Çaðýr\n", icerik);
				if(IsPlayerInAnyVehicle(playerid)) {
					new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
					if(Arac_SahipKontrol(playerid, aracid) && AracBilgi[aracid][uberLisans] == 1) format(icerik, sizeof(icerik), "Ýþbaþý\nTaksimetre\n");
				}
			}
	DialogGoster(playerid, DIALOG_TELEFON_UBER, DIALOG_STYLE_TABLIST, "Telefon - Uber", icerik, "Seç", "Kapat");
	}
	else if(playertextid == OyuncuBilgi[playerid][oiphone][1]) {
	new ayarlar[2048], ekleme[256], baslik[64];
	format(ayarlar, sizeof(ayarlar), "Ýþlem Adý\tDurum\n");

	format(ekleme, sizeof(ekleme), "{dbdbdb}Ses Ayarý\t[%s{FFFFFF}]\n", (OyuncuBilgi[playerid][oTelefonSes] == false) ? ("{B70000}Titreþim{FFFFFF}") : ("{338833}Sesli{FFFFFF}"));
	strcat(ayarlar, ekleme);

	format(ekleme, sizeof(ekleme), "{dbdbdb}Gizli Numara\t[%s{FFFFFF}]\n", (OyuncuBilgi[playerid][oGizliNumara] == false) ? ("{B70000}Kapalý{FFFFFF}") : ("{338833}Açýk{FFFFFF}"));
	strcat(ayarlar, ekleme);
	
	format(ekleme, sizeof(ekleme), "{dbdbdb}Telefonu Kapat\t\n");
	strcat(ayarlar, ekleme);
	
	format(baslik, sizeof(baslik), "Telefon Ayarlarý");
	DialogGoster(playerid, DIALOG_TELEFON_AYARLAR, DIALOG_STYLE_TABLIST_HEADERS, baslik, ayarlar, "Seç", "Kapat");
	}
	else if(playertextid == OyuncuBilgi[playerid][oiphone][5]) {
	if(OyuncuBilgi[playerid][oYaris] != -1) return HataMesaji(playerid, "Yarýþtayken GPS açamazsýn.");
	if(OyuncuBilgi[playerid][oKamyoncu] != -1) return HataMesaji(playerid, "Yük taþýrken GPS açamazsýn.");
    if(OyuncuBilgi[playerid][oTemizlikCP] > 0) return HataMesaji(playerid, "Temizlik yaparken GPS açamazsýn.");
    // if(OyuncuBilgi[playerid][oMateryalTasiyor] == true) return HataMesaji(playerid, "Paket taþýrken GPS açamazsýn.");
	if(OyuncuBilgi[playerid][oMarker] > -1) return HataMesaji(playerid, "Konum araþtýrýrken GPS açamazsýn.");
	if(OyuncuBilgi[playerid][oKonum] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oAdres] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][objeLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oIsaretliMeslek] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");

	DialogGoster(playerid, DIALOG_GPS, DIALOG_STYLE_LIST, "GPS", "Adres Bulma\nKonum Gönder\nKayýtlý Lokasyonlar\nEn Yakýnýmdakiler Servisi\nBenim Lokasyonlarým\nAraç Bulma", "Seç", "Kapat");
	}
	else if(playertextid == OyuncuBilgi[playerid][oiphone][7]) {
	UyariMesaji(playerid, "Þu anlýk Whatsapp sistemi pasif, yakýnda sizlerle.");
	}
	else if(playertextid == OyuncuBilgi[playerid][oiphone][6]) {
	new veriler[144 * MAKSIMUM_REHBER_SAYI];
			format(veriler, sizeof(veriler), "Yeni Kiþi Oluþtur\t\n");
			for(new i = 0; i != MAKSIMUM_REHBER_SAYI; i ++) if(RehberBilgi[playerid][i][rehberKullanimda]) {
				format(veriler, sizeof(veriler), "%s%s\t%d\n", veriler, RehberBilgi[playerid][i][rehberIsim], RehberBilgi[playerid][i][rehberNumara]);
			}
	DialogGoster(playerid, DIALOG_REHBER, DIALOG_STYLE_TABLIST, "Telefon - Rehber", veriler, "Seç", "<< Geri");
	}
    else if(playertextid == OyuncuBilgi[playerid][oGirisTextdraw][17]) {
        new isim[MAX_PLAYER_NAME], bilgi[512];
		GetPlayerName(playerid, isim, sizeof(isim));
		strdel(isim, 0, 5);
		format(bilgi, sizeof(bilgi), "SELECT isim, oSonGiris FROM oyuncular WHERE hesap = '%s' AND `yaratildi` < '2' ORDER BY ID ASC", isim);
		mysql_tquery(mysqlB, bilgi, "Oyuncu_Liste", "d", playerid);
    }
    else if(playertextid == OyuncuBilgi[playerid][oGirisTextdraw][18]) {
		SunucuMesaji(playerid, "Çýkýþ yaptýnýz.");
		KickEx(playerid);
    }
    return 1;
}

public HesapYukle(playerid)
{
    if(!IsPlayerConnected(playerid)) return 0;
	new rows, fields, bilgi[1024], isim[MAX_PLAYER_NAME];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows || OyuncuBilgi[playerid][oGiris] == true) return HataMesaji(playerid, "Bir hata oluþtu."), KickEx(playerid);

	OyuncuBilgi[playerid][oHesap] = vericek_int(0, "forumID");
	foreach(new i : Player) if(OyuncuBilgi[playerid][oHesap] > 0 && OyuncuBilgi[playerid][oHesap] == OyuncuBilgi[i][oHesap] && i != playerid) return HataMesaji(playerid, "Bu hesaba zaten giriþ yapýlmýþ."), KickEx(playerid);
	OyuncuBilgi[playerid][oAdmin] = vericek_int(0, "Admin");
	OyuncuBilgi[playerid][oBirlikMod] = vericek_int(0, "BirlikMod");
	OyuncuBilgi[playerid][oEventMod] = vericek_int(0, "EventMod");
	OyuncuBilgi[playerid][oDestekEkibi] = vericek_int(0, "DestekEkibi");
	format(OyuncuBilgi[playerid][oAdminNick], 32, "%s", vericek_varchar(0, "AdminIsim"));
	format(OyuncuBilgi[playerid][oReferans], 32, "%s", vericek_varchar(0, "Referans"));
	OyuncuBilgi[playerid][oRaporSayisi] = vericek_int(0, "RaporSayisi");
	OyuncuBilgi[playerid][oSoruSayisi] = vericek_int(0, "SoruSayisi");
	OyuncuBilgi[playerid][oEkSlot] = vericek_int(0, "EkSlot");
	OyuncuBilgi[playerid][oOneriJetonu] = vericek_int(0, "OneriJetonu");
	if(OyuncuBilgi[playerid][oAdmin] >= 7) OyuncuBilgi[playerid][oSpecDurum] = false;
	GetPlayerName(playerid, isim, sizeof(isim));
	strdel(isim, 0, 5);
	format(bilgi, sizeof(bilgi), "SELECT isim, Kiyafet, Level, oSonGiris FROM oyuncular WHERE hesap = '%s' AND `yaratildi` < '2' ORDER BY ID ASC", isim);
	mysql_tquery(mysqlB, bilgi, "Karakter_Liste", "i", playerid);
	return 1;
}

public Karakter_Liste(oyuncuid)
{
	new rows, fields, ekslot = OyuncuBilgi[oyuncuid][oEkSlot];
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	PlayerTextDrawSetPreviewModel(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][4], 240);
	PlayerTextDrawSetPreviewModel(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][9], 193);
	PlayerTextDrawSetPreviewModel(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][13], 240);
	PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][2], "Bos_Slot");
	PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][6], "Level:_0");
 	PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][5], "Son_Giris:_GG/AA/YYYY, SS.DD");
	PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][10], "Ikinci_Slot");
	PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][11], "Level:_0");
	PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][12], "Son_Giris:_GG/AA/YYYY, SS.DD");
	PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][14], "Ucuncu_Slot");
	PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][15], "Level:_0");
	PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][16], "Son_Giris:_GG/AA/YYYY, SS.DD");
	new textdraw_guncelle[128];
	if(rows) {
		format(textdraw_guncelle, sizeof(textdraw_guncelle), "%s", vericek_varchar(0, "isim"));
	    PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][2], textdraw_guncelle);
	 	format(textdraw_guncelle, sizeof(textdraw_guncelle), "Level: %d", vericek_int(0, "Level"));
	    PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][6], textdraw_guncelle);
	    format(textdraw_guncelle, sizeof(textdraw_guncelle), "Son_Giris:_%s", vericek_varchar(0, "oSonGiris"));
	    PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][5], textdraw_guncelle);
	    PlayerTextDrawSetPreviewModel(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][4], vericek_int(0, "Kiyafet"));
    }
    if(rows >= 2) {
		format(textdraw_guncelle, sizeof(textdraw_guncelle), "%s", vericek_varchar(1, "isim"));
	    PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][10], textdraw_guncelle);
	 	format(textdraw_guncelle, sizeof(textdraw_guncelle), "Level:_%d", vericek_int(1, "Level"));
	    PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][11], textdraw_guncelle);
	    format(textdraw_guncelle, sizeof(textdraw_guncelle), "Son_Giris:_%s", vericek_varchar(1, "oSonGiris"));
	    PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][12], textdraw_guncelle);
	    PlayerTextDrawSetPreviewModel(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][9], vericek_int(1, "Kiyafet"));
    }
    if(rows >= 3) {
		format(textdraw_guncelle, sizeof(textdraw_guncelle), "%s", vericek_varchar(2, "isim"));
	    PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][14], textdraw_guncelle);
	 	format(textdraw_guncelle, sizeof(textdraw_guncelle), "Level:_%d", vericek_int(2, "Level"));
	    PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][15], textdraw_guncelle);
	    format(textdraw_guncelle, sizeof(textdraw_guncelle), "Son_Giris:_%s", vericek_varchar(2, "oSonGiris"));
	    PlayerTextDrawSetString(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][16], textdraw_guncelle);
	    PlayerTextDrawSetPreviewModel(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][13], vericek_int(2, "Kiyafet"));
    }
    for(new i = 0; i != 20; i++) PlayerTextDrawShow(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][i]);
    if(rows < KARAKTER_LIMIT + ekslot) PlayerTextDrawShow(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][19]);
    else PlayerTextDrawHide(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][19]);
    SelectTextDraw(oyuncuid, 0xAFAFAFFF);
	return 1;
}

public Oyuncu_Liste(playerid)
{
    if(!IsPlayerConnected(playerid)) return 0;
    if(OyuncuBilgi[playerid][oGiris] == true) return HataMesaji(playerid, "Bir hata oluþtu."), KickEx(playerid);
	new rows, fields, sayi = 0, ekslot = OyuncuBilgi[playerid][oEkSlot], bilgi[1024];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	format(bilgi, sizeof(bilgi), "Karakterlerinin arasýndan birini seç!\t\n", KARAKTER_LIMIT + ekslot);
	for(new i = 0; i < rows; i ++) format(bilgi, sizeof(bilgi), "%s%s\t%s\n", bilgi, vericek_varchar(i, "isim"), vericek_varchar(i, "oSonGiris")), sayi++;
	if(IsPlayerAdmin(playerid)) {
	    new sorgu[256];
		format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE isim = '%s' LIMIT 1", vericek_varchar(0, "isim"));
		return mysql_tquery(mysqlB, sorgu, "OyuncuYukle", "d", playerid);
	}
	if(sayi < KARAKTER_LIMIT + ekslot) strcat(bilgi, "Karakter Oluþtur\t\n");
	DialogGoster(playerid, DIALOG_KARAKTERSEC, DIALOG_STYLE_TABLIST_HEADERS, "vRP: Karakter Seçimi", bilgi, "Tamam", "");
	return 1;
}

public Karakter_Yukle(playerid, satir)
{
	new rows, fields, sorgu[360], isim[MAX_PLAYER_NAME];
	cache_get_row_count(rows);
    cache_get_field_count(fields);
	if(!rows || rows < satir + 1) {
	    HataMesaji(playerid, "Bu karakter slotun boþ.");
		GetPlayerName(playerid, isim, sizeof(isim));
		strdel(isim, 0, 5);
		format(sorgu, sizeof(sorgu), "SELECT isim, Kiyafet, Level FROM oyuncular WHERE hesap = '%s' AND `yaratildi` < '2' ORDER BY ID ASC", isim);
		mysql_tquery(mysqlB, sorgu, "Karakter_Liste", "i", playerid);
		return 1;
	}
	format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE isim = '%s' LIMIT 1", vericek_varchar(satir, "isim"));
	mysql_tquery(mysqlB, sorgu, "OyuncuYukle", "d", playerid);
	for(new i = 0; i != 20; i++) PlayerTextDrawHide(playerid, OyuncuBilgi[playerid][oGirisTextdraw][i]);
	return 1;
}

public OyuncuYukle(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	new rows, fields;
	cache_get_row_count(rows);
    cache_get_field_count(fields);
	if(!rows) return HataMesaji(playerid, "Karakterin yüklenemedi."), KickEx(playerid);
	new yasaklama[64];
	format(yasaklama, 	sizeof(yasaklama), "%s", vericek_varchar(0, "Yasaklama"));
	if(!isnull(yasaklama)) {
		HataMesaji(playerid, "Karakterin yasaklý olduðu için giriþ yapamýyorsun.");
		new isim[MAX_PLAYER_NAME + 1], sorgu[256];
		GetPlayerName(playerid, isim, sizeof(isim));
		strdel(isim, 0, 5);
		format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE hesap = '%s' AND `yaratildi` < '2'", isim);
		return mysql_tquery(mysqlB, sorgu, "Oyuncu_Liste", "d", playerid);
	}
	new query[256], kiyafet;
	OyuncuBilgi[playerid][oID] = vericek_int(0, "ID");
	OyuncuBilgi[playerid][oKarakterYaratildi] = vericek_int(0, "yaratildi");
	OyuncuBilgi[playerid][oKiyafet] = vericek_int(0, "Kiyafet");
	OyuncuBilgi[playerid][oGeciciKiyafet] = vericek_int(0, "GKiyafet");
	OyuncuBilgi[playerid][oCan] = vericek_float(0, "Can");
	OyuncuBilgi[playerid][oZirh] = vericek_float(0, "Zirh");
	OyuncuBilgi[playerid][oPos][0] = vericek_float(0, "x");
	OyuncuBilgi[playerid][oPos][1] = vericek_float(0, "y");
	OyuncuBilgi[playerid][oPos][2] = vericek_float(0, "z");
	OyuncuBilgi[playerid][oPos][3] = vericek_float(0, "a");
	OyuncuBilgi[playerid][oPara] = vericek_int(0, "Para");
	OyuncuBilgi[playerid][oVW] = vericek_int(0, "vw");
	OyuncuBilgi[playerid][oInterior] = vericek_int(0, "interior");
	OyuncuBilgi[playerid][oCinsiyet] = vericek_int(0, "Cinsiyet");
	OyuncuBilgi[playerid][oSeviye] = vericek_int(0, "Level");
	OyuncuBilgi[playerid][oExp] = vericek_int(0, "Exp");
	OyuncuBilgi[playerid][oDakika] = vericek_int(0, "Dakika");
	OyuncuBilgi[playerid][oOynamaSaati] = vericek_int(0, "OynamaSaati");
	OyuncuBilgi[playerid][oBirlikSQLID] = vericek_int(0, "birlik");
	OyuncuBilgi[playerid][oBirlikRutbe] = vericek_int(0, "birlikrutbe");
	OyuncuBilgi[playerid][oBirlikLider] = vericek_int(0, "BirlikLider");
	OyuncuBilgi[playerid][oTenRengi] = vericek_int(0, "TenRengi");
	OyuncuBilgi[playerid][oKibrit] = vericek_int(0, "Kibrit");
	OyuncuBilgi[playerid][oOdun] = vericek_int(0, "Odun");
	OyuncuBilgi[playerid][oHesapNumarasi] = vericek_int(0, "HesapNumarasi");
	OyuncuBilgi[playerid][oBankaPara] = vericek_int(0, "BankaPara");
	OyuncuBilgi[playerid][oSigara] = vericek_int(0, "Sigara");
	OyuncuBilgi[playerid][oTelefon] = vericek_int(0, "Telefon");
	OyuncuBilgi[playerid][oTelefonNumarasi] = vericek_int(0, "TelefonNumarasi");
	/*OyuncuBilgi[playerid][oArizaTamirDelay] = vericek_int(0, "ArizaTamirDelay");
	OyuncuBilgi[playerid][oArizaTespitDelay] = vericek_int(0, "ArizaTespitDelay");*/
	OyuncuBilgi[playerid][oSaksi] = vericek_int(0, "Saksi");
	OyuncuBilgi[playerid][oGubre] = vericek_int(0, "Gubre");
	OyuncuBilgi[playerid][oTohum] = vericek_int(0, "Tohum");
	OyuncuBilgi[playerid][oIslenmemisMadde] = vericek_int(0, "IslenmemisMadde");
	OyuncuBilgi[playerid][oMaymuncuk] = vericek_int(0, "Maymuncuk");
	OyuncuBilgi[playerid][oUyusturucu] = vericek_int(0, "Uyusturucu");
	OyuncuBilgi[playerid][oHapisSure][0] = vericek_int(0, "Hapis");
	OyuncuBilgi[playerid][oHapisSure][1] = vericek_int(0, "ICHapis");
	OyuncuBilgi[playerid][oVatandaslikNo] = vericek_int(0, "VatandaslikNo");
	OyuncuBilgi[playerid][oRuhsat] = vericek_int(0, "Ruhsat");
	OyuncuBilgi[playerid][oHapisID] = vericek_int(0, "IDHapis");
	OyuncuBilgi[playerid][oEkstraDil] = vericek_int(0, "EkstraDil");
	OyuncuBilgi[playerid][oBirim] = vericek_int(0, "Birim");
	OyuncuBilgi[playerid][oMuzikKutusu] = vericek_int(0, "boombox");
	OyuncuBilgi[playerid][oGPS] = vericek_int(0, "GPS");
	OyuncuBilgi[playerid][oUyari] = vericek_int(0, "Uyari");
	OyuncuBilgi[playerid][oMaske] = vericek_int(0, "Maske");
	OyuncuBilgi[playerid][oMaskeID] = vericek_int(0, "MaskeID");
	OyuncuBilgi[playerid][oIlkYardim] = vericek_int(0, "IlkYardim");
	OyuncuBilgi[playerid][oYarali] = vericek_int(0, "Yarali");
	OyuncuBilgi[playerid][oYaraliSure] = vericek_int(0, "YaraliSure");
	OyuncuBilgi[playerid][oVIP] = vericek_int(0, "VIP");
	OyuncuBilgi[playerid][oVIPSure] = vericek_int(0, "VIPSure");
	OyuncuBilgi[playerid][oHirsizVIPTeslim] = vericek_int(0, "HirsizVIP");
	OyuncuBilgi[playerid][oGaspSure] = vericek_int(0, "GaspSure");
	OyuncuBilgi[playerid][oEkstraPayday] = vericek_int(0, "EkstraPayday");
	OyuncuBilgi[playerid][oDogumYeri] = vericek_int(0, "DogumYeri");
	OyuncuBilgi[playerid][oBidon] = vericek_int(0, "Bidon");
	OyuncuBilgi[playerid][oBidonBenzin] = vericek_int(0, "BidonBenzin");
	OyuncuBilgi[playerid][oCK] = vericek_int(0, "CK");
	OyuncuBilgi[playerid][oHediye] = vericek_int(0, "Hediye");
	OyuncuBilgi[playerid][oUyusturucuBoost] = vericek_int(0, "UyusturucuBoost");
	OyuncuBilgi[playerid][oKelepceli] = vericek_int(0, "Kelepce");
	OyuncuBilgi[playerid][oKamyoncuTeslimat] = vericek_int(0, "KamyoncuTeslimat");
	OyuncuBilgi[playerid][oHitman] = vericek_int(0, "Hitman");
	OyuncuBilgi[playerid][oDinlenenYayin] = vericek_int(0, "DinlenenYayin");
	OyuncuBilgi[playerid][oTamirKiti] = vericek_int(0, "TamirKiti");
	OyuncuBilgi[playerid][oKilogram] = vericek_int(0, "Kilogram");
	OyuncuBilgi[playerid][oBoy] = vericek_int(0, "Boy");
	OyuncuBilgi[playerid][oSacRengi] = vericek_int(0, "SacRengi");
	OyuncuBilgi[playerid][oGozRengi] = vericek_int(0, "GozRengi");
	OyuncuBilgi[playerid][oIpUrun] = vericek_int(0, "IpUrun");
	OyuncuBilgi[playerid][oDovusStil] = vericek_int(0, "DovusStil");
	OyuncuBilgi[playerid][oPortatifRadyo] = vericek_int(0, "PRadyo");
	OyuncuBilgi[playerid][oFrekans] = vericek_int(0, "Frekans");
	OyuncuBilgi[playerid][oZar] = vericek_int(0, "Zar");
	OyuncuBilgi[playerid][oEkEvSlot] = vericek_int(0, "EkEvSlot");
	OyuncuBilgi[playerid][oEkAracSlot] = vericek_int(0, "EkAracSlot");
	OyuncuBilgi[playerid][oSilahDelay] = vericek_int(0, "SilahDelay");
	OyuncuBilgi[playerid][oSilahHakki] = vericek_int(0, "SilahHakki");
	OyuncuBilgi[playerid][oMeslek] = vericek_int(0, "Meslek");
	OyuncuBilgi[playerid][oVPoint] = vericek_int(0, "vPoint");
	OyuncuBilgi[playerid][oNewbieMute] = vericek_int(0, "NewbieMute");
	OyuncuBilgi[playerid][oAvukatLisans] = vericek_int(0, "AvukatLisans");
	OyuncuBilgi[playerid][oPapaz] = vericek_int(0, "Papaz");
	OyuncuBilgi[playerid][oUnlu] = vericek_int(0, "Unlu");
	OyuncuBilgi[playerid][oAvukatBekleme] = vericek_int(0, "AvukatBekleme");
	OyuncuBilgi[playerid][oAvukatYetenek] = vericek_int(0, "AvukatYetenek");
	OyuncuBilgi[playerid][oBankaSifre] = vericek_int(0, "BankaSifre");
	OyuncuBilgi[playerid][oBalikYetenek] = vericek_int(0, "BalikYetenek");
	OyuncuBilgi[playerid][oMadenYetenek] = vericek_int(0, "MadenYetenek");
	OyuncuBilgi[playerid][oSahteLevel] = vericek_int(0, "SahteLevel");
	OyuncuBilgi[playerid][oYuruyusStil] = vericek_int(0, "YuruyusStil");
	if(OyuncuBilgi[playerid][oBirlikSQLID] > 0) OyuncuBilgi[playerid][oBirlik] = birlik_id_bul(OyuncuBilgi[playerid][oBirlikSQLID]);
	new meslek_verileri[256];
	format(meslek_verileri, sizeof(meslek_verileri), "%s", vericek_varchar(0, "Baliklar"));
	sscanf(meslek_verileri, "p<|>iiiiiiiiiiiiiii",
		OyuncuBilgi[playerid][oBaliklar][0],
		OyuncuBilgi[playerid][oBaliklar][1],
		OyuncuBilgi[playerid][oBaliklar][2],
		OyuncuBilgi[playerid][oBaliklar][3],
		OyuncuBilgi[playerid][oBaliklar][4],
		OyuncuBilgi[playerid][oBaliklar][5],
		OyuncuBilgi[playerid][oBaliklar][6],
		OyuncuBilgi[playerid][oBaliklar][7],
		OyuncuBilgi[playerid][oBaliklar][8],
		OyuncuBilgi[playerid][oBaliklar][9],
		OyuncuBilgi[playerid][oBaliklar][10],
		OyuncuBilgi[playerid][oBaliklar][11],
		OyuncuBilgi[playerid][oBaliklar][12],
		OyuncuBilgi[playerid][oBaliklar][13],
		OyuncuBilgi[playerid][oBaliklar][14]
	);
	format(meslek_verileri, sizeof(meslek_verileri), "%s", vericek_varchar(0, "Yemler"));
	sscanf(meslek_verileri, "p<|>iiiii", OyuncuBilgi[playerid][oYemler][0], OyuncuBilgi[playerid][oYemler][1], OyuncuBilgi[playerid][oYemler][2], OyuncuBilgi[playerid][oYemler][3], OyuncuBilgi[playerid][oYemler][4]);
	format(meslek_verileri, sizeof(meslek_verileri), "%s", vericek_varchar(0, "Madenler"));
	sscanf(meslek_verileri, "p<|>iiiii", OyuncuBilgi[playerid][oMadenler][0], OyuncuBilgi[playerid][oMadenler][1], OyuncuBilgi[playerid][oMadenler][2], OyuncuBilgi[playerid][oMadenler][3], OyuncuBilgi[playerid][oMadenler][4]);
	/*format(meslek_verileri, sizeof(meslek_verileri), "%s", vericek_varchar(0, "SilahParcalari"));
	sscanf(meslek_verileri, "p<|>iiiii", OyuncuBilgi[playerid][oGovde], OyuncuBilgi[playerid][oNamlu], OyuncuBilgi[playerid][oHazne], OyuncuBilgi[playerid][oUretimSure], OyuncuBilgi[playerid][oUretimSilah]);*/
	new silah_sorgu[144], silah[13], mermi[13];
	for (new i = 0; i < 13; i ++) {
			format(silah_sorgu, sizeof(silah_sorgu), "Silah%d", i + 1);
			silah[i] = vericek_int(0, silah_sorgu);
			format(silah_sorgu, sizeof(silah_sorgu), "Mermi%d", i + 1);
			mermi[i] = vericek_int(0, silah_sorgu);
			Silahver(playerid, silah[i], mermi[i]);
	}
	if(OyuncuBilgi[playerid][oMaskeID] == 0) {
		new maskeno = randomEx(10000, 99999);
		format(query, sizeof(query), "SELECT * FROM oyuncular WHERE MaskeID = '%d'", maskeno);
		mysql_tquery(mysqlB, query, "Maske_Sorgula", "dd", playerid, maskeno);
	}
	if(OyuncuBilgi[playerid][oVatandaslikNo] == 0) {
		new vno6 = randomEx(10000000, 99999999);
		format(query, sizeof(query), "SELECT * FROM oyuncular WHERE VatandaslikNo = '%d'", vno6);
		mysql_tquery(mysqlB, query, "Vatandaslik_Numarasi", "dd", playerid, vno6);
	}
	if(OyuncuBilgi[playerid][oHesapNumarasi] == 0) {
		new hesapno = randomEx(100000, 999999);
		format(query, sizeof(query), "SELECT * FROM oyuncular WHERE HesapNumarasi = '%d'", hesapno);
		mysql_tquery(mysqlB, query, "Banka_Kontrol", "dd", playerid, hesapno);
	}
	switch(vericek_bool(0, "isbasi")) {
	    case 0: OyuncuBilgi[playerid][oIsbasi] = false;
	    case 1: OyuncuBilgi[playerid][oIsbasi] = true;
	}
	switch(vericek_bool(0, "Ehliyet")) {
		case 0: OyuncuBilgi[playerid][oEhliyet] = false;
		case 1: OyuncuBilgi[playerid][oEhliyet] = true;
	}
	switch(vericek_bool(0, "Cakmak")) {
	    case 0: OyuncuBilgi[playerid][oCakmak] = false;
	    case 1: OyuncuBilgi[playerid][oCakmak] = true;
	}
	if(OyuncuBilgi[playerid][oKarakterYaratildi] != 2) {
		format(OyuncuBilgi[playerid][oIsim], MAX_PLAYER_NAME, "%s", vericek_varchar(0, "isim"));
		format(OyuncuBilgi[playerid][oSahteIsim], MAX_PLAYER_NAME, "%s", vericek_varchar(0, "SahteIsim"));
		if(!isnull(OyuncuBilgi[playerid][oSahteIsim])) SetPlayerName(playerid, OyuncuBilgi[playerid][oSahteIsim]);
		else SetPlayerName(playerid, OyuncuBilgi[playerid][oIsim]);
	}
	format(OyuncuBilgi[playerid][oSonGiris], 36, "%s", vericek_varchar(0, "oSonGiris"));
	format(OyuncuBilgi[playerid][oKarakterDetay], 96, "%s", vericek_varchar(0, "KarakterDetay"));
	CanDuzenle(playerid, OyuncuBilgi[playerid][oCan]);
	ZirhDuzenle(playerid, OyuncuBilgi[playerid][oZirh]);
	new oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	switch(OyuncuBilgi[playerid][oGeciciKiyafet]) {
		case 0: kiyafet = OyuncuBilgi[playerid][oKiyafet];
		default: kiyafet = OyuncuBilgi[playerid][oGeciciKiyafet];
	}
	switch(OyuncuBilgi[playerid][oKarakterYaratildi]) {
	    case 0: OyuncuCinsiyetSec(playerid);
	    case 2: {
			HataMesaji(playerid, "Bu karakter isim deðiþtirme dolayýsýyla kapalýdýr.");
			new isim[MAX_PLAYER_NAME + 1], sorgu[256];
			GetPlayerName(playerid, isim, sizeof(isim));
			format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE hesap = '%s' AND `yaratildi` < '2'", isim);
			return mysql_tquery(mysqlB, sorgu, "Oyuncu_Liste", "d", playerid);
		}
	}
	if(OyuncuBilgi[playerid][oKarakterYaratildi] == 1) {
		SetSpawnInfo(playerid, 0, kiyafet, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2], OyuncuBilgi[playerid][oPos][3], 0, 0, 0, 0, 0, 0);
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid, OyuncuBilgi[playerid][oPara]);
		SetPlayerInterior(playerid, OyuncuBilgi[playerid][oInterior]);
		SetPlayerVirtualWorld(playerid, OyuncuBilgi[playerid][oVW]);
		OyuncuBilgi[playerid][oIlkGiris] = true;
		OyuncuBilgi[playerid][oGiris] = true;
		TogglePlayerSpectating(playerid, false);
		SpawnPlayer(playerid);
		SetTimerEx("Kiyafet_Duzelt", 100, false, "i", playerid);
		DondurulmaEtkisi(playerid);
		SilahAyarla(playerid);
		SetPlayerFightingStyle(playerid, OyuncuBilgi[playerid][oDovusStil]);
	}
	foreach(new i : Player) if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && OyuncuBilgi[i][oDestek] == true) SetPlayerMarkerForPlayer(playerid, i, 0xFF0000AA);

	if(OyuncuBilgi[playerid][oAdmin] > 0) {
	    foreach(new i : Player) if(OyuncuBilgi[playerid][oAdmin] <= OyuncuBilgi[i][oAdmin] && playerid != i) SendClientMessageEx(i, RENK_BEYAZ, "%s (%s - ID: %d) %s olarak giriþ yaptý.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(playerid), playerid, Admin_RutbeIsim(OyuncuBilgi[playerid][oAdmin]));
	}
	SendClientMessageEx(playerid, RENK_SERVER, "Ödül ve etkinliklerden yararlanmak için Viga Roleplay Discord sunucusuna katýlmayý unutma.");
	if(dini_Exists(SUNUCU_DOSYA)) { if(strcmp(dini_Get(SUNUCU_DOSYA, "DUYURU"), "Yok", true)) DuyuruMesaji(playerid, "%s", dini_Get(SUNUCU_DOSYA, "DUYURU")); }
	else {
        dini_Create(SUNUCU_DOSYA);
        dini_Set(SUNUCU_DOSYA, "DUYURU", SUNUCU_ADI);
		DuyuruMesaji(playerid, "%s", dini_Get(SUNUCU_DOSYA, "DUYURU"));
	}
	if(OyuncuBilgi[playerid][oBirlik] > -1 && !isnull(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikDuyuru])) BirlikDuyuruMesaji(playerid, "%s", BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikDuyuru]);
	if(Oyuncu_Evde(playerid) > -1 && EvBilgi[Oyuncu_Evde(playerid)][evLamba] == true) {
		PlayerTextDrawShow(playerid, LambaText[playerid]);
		SetCameraBehindPlayer(playerid);
	}
	if(OyuncuBilgi[playerid][oYarali] > 0 && OyuncuBilgi[playerid][oYaraliSure] > 0) {
        OyuncuPosDegistir(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
        SetPlayerFacingAngle(playerid, OyuncuBilgi[playerid][oPos][3]);
		SunucuMesaji(playerid, "Yaralandýn. %d saniye bekledikten sonra ayaða kalkacaksýn.", OyuncuBilgi[playerid][oYaraliSure]);
	}
	if(OyuncuBilgi[playerid][oCK] == 1) SunucuMesaji(playerid, "Karakteriniz CK olduðu için hapise gönderildiniz."), HapiseAt(playerid);
	if(OyuncuBilgi[playerid][oKelepceli] == 1) {
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
	    SetPlayerAttachedObject(playerid, 9, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	}
	if(OyuncuBilgi[playerid][oDinlenenYayin] == 0) UyariMesaji(playerid, "Þu anda bir yayýnda deðilsin, ajanslarýn haberlerini alabilmek için /yayindinle");
	else if(OyuncuBilgi[playerid][oDinlenenYayin] > 0) {
		for(new y = 0; y != MAKSIMUM_YAYIN; y++) if(YayinBilgi[y][yayinKullanimda] == true && OyuncuBilgi[playerid][oDinlenenYayin] == YayinBilgi[y][yayinBirlik]) if(!isnull(YayinBilgi[y][yayinMuzik])) {
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, YayinBilgi[y][yayinMuzik]);
			SunucuMesaji(playerid, "Yayýndan gelen müziði dinlemeye baþladýn.");
			break;
		}
	}
	if(OyuncuBilgi[playerid][oIsbasi] == true) {
		if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) SetPlayerColor(playerid, RENK_PDISBASI);
		else if(OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL) SetPlayerColor(playerid, RENK_FMDISBASI);
		else if(OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) SetPlayerColor(playerid, RENK_GOVISBASI);
		else SetPlayerColor(playerid, RENK_VARSAYILAN);
	}
	else SetPlayerColor(playerid, RENK_VARSAYILAN);
	new sorgu[512];
	format(sorgu, sizeof(sorgu), "SELECT * FROM `bildirimler` WHERE `Eklenen` = '%s' AND `Okundu` = '0'", OyuncuBilgi[playerid][oIsim]);
	mysql_tquery(mysqlB, sorgu, "Bildirim_Kontrol", "i", playerid);
	format(sorgu, sizeof(sorgu), "SELECT * FROM `gps` WHERE `gpsOyuncu` = '%d'", OyuncuBilgi[playerid][oID]);
	mysql_tquery(mysqlB, sorgu, "GPSYukle", "d", playerid);
	format(sorgu, sizeof(sorgu), "SELECT * FROM `rehberkayitlari` WHERE `Kaydeden` = '%d'", OyuncuBilgi[playerid][oID]);
	mysql_tquery(mysqlB, sorgu, "RehberYukle", "d", playerid);
	format(sorgu, sizeof(sorgu), "SELECT * FROM `aksesuarlar` WHERE `Sahip` = '%d'", OyuncuBilgi[playerid][oID]);
	mysql_tquery(mysqlB, sorgu, "AksesuarYukle", "d", playerid);
	OyuncuBilgi[playerid][oAktif] = 1;
	SetPlayerArmedWeapon(playerid, 0);
	OyuncuPosDegistir(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
	format(sorgu, sizeof(sorgu),"UPDATE `oyuncular` SET `Aktif` = %d WHERE `ID` = '%d'", OyuncuBilgi[playerid][oAktif], OyuncuBilgi[playerid][oID]);
	mysql_query(mysqlB, sorgu);
	IsimLabelGuncelle(playerid);
	if(OyuncuBilgi[playerid][oTelefonDurum] == true && OyuncuBilgi[playerid][oTelefonNumarasi] != 0 && OyuncuBilgi[playerid][oTelefon] != 0) SendClientMessageEx(playerid, 0x33AA33FF, "Telefon þebekesine baðlantý baþarýlý.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) HapiseAt(playerid);
	else if(OyuncuBilgi[playerid][oHapisSure][1] > 0) ICHapiseAt(playerid, OyuncuBilgi[playerid][oHapisID]);
	return 1;
}

public SunucuRestart() {
	if(restart == false) return 0;

	foreach (new i : Player) if(OyuncuBilgi[i][oGiris] == true) {
		OyuncuKaydet(i);
		new isim[MAX_PLAYER_NAME];
		format(isim, sizeof(isim), "%03d", OyuncuBilgi[i][oHesap]);
		SetPlayerName(i, isim);
		IsimLabelGuncelle(i);
		OyuncuBilgi[i][oGiris] = false;
		OyuncuSifirla(i);
		if(!IsPlayerAdmin(i) && OyuncuBilgi[i][oAdmin] < 1) KickEx(i);
	}
	if(sunucukilit == true) sunucukilit = false, SendRconCommand("password 0");
	SendRconCommand("gmx");
	return 1;
}

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
    if(extraid == MODELLER_GROTTI)
    {
        if(!response) return 0;

   	    new bilgi[256], bilgi_ek[16];
     	SetPVarInt(playerid, "galerimodel", modelid);
	    for(new i = 0; i != sizeof(SatilikAraclar); i ++) if(SatilikAraclar[i][0] == modelid) { SetPVarInt(playerid, "galerifiyat", SatilikAraclar[i][1]); break; }
	    new isyeri_id = Oyuncu_Isyerinde(playerid);
	    if(isyeri_id == -1) return HataMesaji(playerid, "Bir sorun oluþtu.");
	    switch(IsyeriBilgi[isyeri_id][isyeriTur]) {
			case 4: bilgi_ek = "motoru";
			case 13: bilgi_ek = "uçaðý";
			case 14: bilgi_ek = "tekneyi";
			default: bilgi_ek = "aracý";
	    }
	    format(bilgi, sizeof(bilgi), "{FFFFFF}%s modelindeki %s {33aa33}%s {FFFFFF}fiyatýna almak üzeresin, bu iþlemi onaylýyor musun?", AracModel(modelid), bilgi_ek, NumaraFormati(GetPVarInt(playerid, "galerifiyat")));
	    return DialogGoster(playerid, DIALOG_GALERI_SATINAL, DIALOG_STYLE_MSGBOX, "Galeri - Onayla", bilgi, "Evet", "Hayýr");
    }
    else if(extraid == MODELLER_MOBILYA)
    {
        if(!response) return 0;
        if(!Ev_SahipKontrol(playerid, Oyuncu_Evde(playerid)) && !Ev_AnahtarKontrol(playerid, Oyuncu_Evde(playerid))) return HataMesaji(playerid, "Bu evin sahibi deðilsin ve anahtarýn yok.");
		for(new i = 0; i != sizeof(Mobilyalar); i ++) if(Mobilyalar[i][0] == modelid) {
		    new onay[144];
		    OyuncuBilgi[playerid][oMobilyaOnay] = modelid;
		    format(onay, sizeof(onay), "Seçtiðiniz mobilyayý %s fiyatýna ekleyeceksiniz, onaylýyor musunuz?", NumaraFormati(Mobilyalar[i][1]));
            DialogGoster(playerid, DIALOG_MOBILYA_EKLE_ONAY, DIALOG_STYLE_MSGBOX, "vRP: Mobilya Ekle", onay, "Tamam", "<< Geri");
		    return 1;
		}
		SunucuMesaji(playerid, "Seçtiðiniz obje mobilya listesinde bulunmuyor, iþleminiz iptal edildi.");
    }
    else if(extraid == MODELLER_VIPSKIN)
    {
        if(!response) return 0;

   	    OyuncuBilgi[playerid][oKiyafet] = modelid;
		switch(OyuncuBilgi[playerid][oGeciciKiyafet]) {
			case 0: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oKiyafet]);
			default: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oGeciciKiyafet]);
		}
    }
    else if(extraid == MODELLER_SOYUN)
    {
        if(!response) return 0;

   	    OyuncuBilgi[playerid][oGeciciKiyafet] = modelid;
		switch(OyuncuBilgi[playerid][oGeciciKiyafet]) {
			case 0: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oKiyafet]);
			default: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oGeciciKiyafet]);
		}
		cmd_ame(playerid, "kýyafetlerini çýkarýr.");
    }
    else if(extraid == MODELLER_UNIFORMA) {
		if(!response) return 0;

		OyuncuBilgi[playerid][oGeciciKiyafet] = modelid;
		switch(OyuncuBilgi[playerid][oGeciciKiyafet]) {
			case 0: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oKiyafet]);
			default: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oGeciciKiyafet]);
		}
		SunucuMesaji(playerid, "Dolaptan üniforma aldýn.");
    }
    else if(extraid == MODELLER_GIRISKIYAFET) {
		if(!response) {
		    if(OyuncuDolapYakin(playerid) || Oyuncu_Isyerinde(playerid) != -1) return 1;
			if(OyuncuBilgi[playerid][oCinsiyet] == 1) {
				switch(OyuncuBilgi[playerid][oTenRengi]) {
					case 1: {
						new kiyafetler[sizeof(ErkekBeyaz)];
						for(new c = 0; c != sizeof(ErkekBeyaz); c++) kiyafetler[c] = ErkekBeyaz[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "Kiyafet", MODELLER_GIRISKIYAFET, 0.0, 0.0, 0.0);
					}
					case 2: {
						new kiyafetler[sizeof(ErkekSiyah)];
						for(new c = 0; c != sizeof(ErkekSiyah); c++) kiyafetler[c] = ErkekSiyah[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "Kiyafet", MODELLER_GIRISKIYAFET, 0.0, 0.0, 0.0);
					}
				}
			}
			else if(OyuncuBilgi[playerid][oCinsiyet] == 2) {
				switch(OyuncuBilgi[playerid][oTenRengi]) {
					case 1: {
						new kiyafetler[sizeof(KadinBeyaz)];
						for(new c = 0; c != sizeof(KadinBeyaz); c++) kiyafetler[c] = KadinBeyaz[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "Kiyafet", MODELLER_GIRISKIYAFET, 0.0, 0.0, 0.0);
					}
					case 2: {
						new kiyafetler[sizeof(KadinSiyah)];
						for(new c = 0; c != sizeof(KadinSiyah); c++) kiyafetler[c] = KadinSiyah[c][0];
						ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "Kiyafet", MODELLER_GIRISKIYAFET, 0.0, 0.0, 0.0);
					}
				}
			}
			return 1;
		}

		OyuncuBilgi[playerid][oKiyafet] = modelid;
		switch(OyuncuBilgi[playerid][oGeciciKiyafet]) {
			case 0: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oKiyafet]);
			default: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oGeciciKiyafet]);
		}
		if(OyuncuDolapYakin(playerid) || Oyuncu_Isyerinde(playerid) != -1) return 1;
		new veriler[256 * MAKSIMUM_BASLANGICPOS];
		format(veriler, sizeof(veriler), "Lütfen baþlamak istediðiniz pozisyonu seçin;\n");
		for(new i = 0; i != MAKSIMUM_BASLANGICPOS; i ++) if(BaslangicPoslari[i][posKullanimda]) format(veriler, sizeof(veriler), "%s%s\n", veriler, BaslangicPoslari[i][pos_adi]);
		DialogGoster(playerid, DIALOG_BASLANGICPOS_SEC, DIALOG_STYLE_TABLIST_HEADERS, "Baþlangýç Pozisyonlarý", veriler, "Seç", "Kapat");
    }
    else if(extraid == MODELLER_KIYAFET) {
		if(!response) return 0;

		new ucret;
		switch(OyuncuBilgi[playerid][oVIP]) {
			case 1: ucret = 20;
			case 2: ucret = 10;
			case 3: ucret = 0;
			default: ucret = 25;
		}
		if(ucret > 0) {
		    if(ucret > OyuncuBilgi[playerid][oPara]) return HataMesaji(playerid, "Bu kýyafetin ücretini karþýlayamýyorsun.");
			new mesaj[144];
			format(mesaj, sizeof(mesaj), "Kýyafet: %d\tFiyat: %s\nKýyafeti satýn almak ister misin?", modelid, NumaraFormati(ucret));
			DialogGoster(playerid, DIALOG_GIYIM_ONAY, DIALOG_STYLE_MSGBOX, "Kýyafet Onay", mesaj, "Satýn Al", "Vazgeç");
			SetPVarInt(playerid, "SectigiKiyafet", modelid);
			SetPVarInt(playerid, "KiyafetUcret", ucret);
		}
		else if(ucret == 0) {
			OyuncuBilgi[playerid][oKiyafet] = modelid;
			switch(OyuncuBilgi[playerid][oGeciciKiyafet]) {
				case 0: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oKiyafet]);
				default: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oGeciciKiyafet]);
			}
			SunucuMesaji(playerid, "Yeni kýyafetini ücretsiz olarak satýn aldýn.");
		}
    }
    else if(extraid == MODELLER_AKSESUAR)
    {
		if(!response) return 0;
		switch(OyuncuBilgi[playerid][oVIP]) {
  			case 1: if(Aksesuar_Sayi(playerid) >= 5) return HataMesaji(playerid, "Daha fazla aksesuar almak için VIP seviyeni yükseltmelisin.");
			case 2: if(Aksesuar_Sayi(playerid) >= 6) return HataMesaji(playerid, "Daha fazla aksesuar almak için VIP seviyeni yükseltmelisin.");
			case 3: if(Aksesuar_Sayi(playerid) >= 7) return HataMesaji(playerid, "Daha fazla aksesuar alamazsýn.");
			default: if(Aksesuar_Sayi(playerid) >= 4) return HataMesaji(playerid, "Daha fazla aksesuar almak için VIP satýn almalýsýn.");
		}
		new icerik[144], fiyat = 50, id = -1;
		if(Oyuncu_Isyerinde(playerid) != -1) {
			id = Oyuncu_Isyerinde(playerid);
			switch(IsyeriBilgi[id][isyeriTur]) {
			    case 1, 9: for(new c = 0; c != sizeof(MarketAksesuar); c++) if(MarketAksesuar[c][0] == modelid) fiyat = MarketAksesuar[c][1];
			    case 2: for(new c = 0; c != sizeof(RestoranAksesuar); c++) if(RestoranAksesuar[c][0] == modelid) fiyat = RestoranAksesuar[c][1];
			    case 3: for(new c = 0; c != sizeof(ElektronikAksesuar); c++) if(ElektronikAksesuar[c][0] == modelid) fiyat = ElektronikAksesuar[c][1];
			    case 7: for(new c = 0; c != sizeof(KiyafetciAksesuar); c++) if(KiyafetciAksesuar[c][0] == modelid) fiyat = KiyafetciAksesuar[c][1];
			}
		}
		SetPVarInt(playerid, "AksesuarSecilenModel", modelid);
		SetPVarInt(playerid, "AksesuarFiyat", fiyat);
		format(icerik, sizeof(icerik), "%d modelindeki aksesuarý almak için %s ödeyeceksin, onaylýyor musun?", modelid, NumaraFormati(fiyat));
		DialogGoster(playerid, DIALOG_AKSESUAR_ONAY, DIALOG_STYLE_MSGBOX, "{FFFFFF}Aksesuar - Satýn Al", icerik, "Evet", "Hayýr");
    }
    else if(extraid == MODELLER_AKSESUAR_PD) {
		if(!response) return 0;

		SetPVarInt(playerid, "AksesuarSecilenModel", modelid);
		SetPVarInt(playerid, "AksesuarFiyat", 0);
		new icerik[sizeof(AksesuarKemik) * 256];
		for(new x; x < sizeof(AksesuarKemik); x++) format(icerik, sizeof(icerik), "%s%s\n", icerik, AksesuarKemik[x]);
		DialogGoster(playerid, DIALOG_AKSESUAR_KEMIK, DIALOG_STYLE_LIST, "{FFFFFF}Aksesuar - Konum Seçimi", icerik, "Seç", "Kapat");
    }
    else if(extraid == MODELLER_BARIKAT) {
		if(!response) return 0;

		new id = Barikat_Yarat(playerid, modelid);
		if(id == -1) return HataMesaji(playerid, "Barikat slotu kalmadýðý için eklenemedi.");
		SunucuMesaji(playerid, "Barikatý ekledin. (ID: %d)", id);
    }
    else if(extraid == MODELLER_VIPSILAH) {
        if(!response) return 0;
        
		new mesaj[256], indirim = 0, silah_ucret = 0, silah_id = 0;
		switch(OyuncuBilgi[playerid][oVIP]) {
		    case 1: indirim = 30;
		    case 2: indirim = 40;
		    case 3: indirim = 50;
		    default: indirim = 0;
		}
		for(new c = 0; c != sizeof(VIP_Silahlar); c++) if(VIP_Silahlar[c][1] == modelid) silah_ucret = VIP_Silahlar[c][2], silah_id = VIP_Silahlar[c][0];
		if(silah_ucret == 0) return HataMesaji(playerid, "Bir sorun oluþtu.");
		
		if(indirim > 0) indirim = indirim * silah_ucret / 100;
		silah_ucret = silah_ucret - indirim;
		SetPVarInt(playerid, "VIP_Silah", silah_id);
		SetPVarInt(playerid, "VIP_Silah_Fiyat", silah_ucret);
		format(mesaj, sizeof(mesaj), "{FFFFFF}Silah: {33aa33}%s\n{FFFFFF}Fiyat: {33aa33}%s\n\n{FFFFFF}Bu silahý satýn almak istiyor musunuz?", SilahIsim(silah_id), NumaraFormati(silah_ucret));
		DialogGoster(playerid, DIALOG_VIP_SILAHONAY, DIALOG_STYLE_MSGBOX, "VIP - Silah Onayý", mesaj, "Satýn Al", "Vazgeç");
    }
    return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	return 1;
}

CMD:w(playerid, params[])
	return cmd_fisilda(playerid, params);

CMD:f(playerid, params[])
	return cmd_olusum(playerid, params);

CMD:s(playerid, params[])
	return cmd_bagir(playerid, params);

CMD:l(playerid, params[])
	return cmd_kses(playerid, params);
	
CMD:re(playerid, params[])
	return cmd_reply(playerid, params);
	
CMD:bagla(playerid, params[])
	return cmd_ipbagla(playerid, params);

CMD:ahelp(playerid, params[])
	return cmd_yetkiliyardim(playerid, params);

CMD:ah(playerid, params[])
	return cmd_yetkiliyardim(playerid, params);
	
CMD:meslekler(playerid, params[])
	return cmd_meslekbul(playerid, params);
	
CMD:rehber(playerid, params[])
	return cmd_yardim(playerid, params);
	
CMD:talep(playerid, params[])
	return cmd_rapor(playerid, params);
	
CMD:setname(playerid, params[])
	return cmd_aisimdegistir(playerid, params);
	
CMD:setstaffname(playerid, params[])
	return cmd_anick(playerid, params);

CMD:cc(playerid, params[])
	return cmd_clearchat(playerid, params);
	
CMD:t(playerid, params[])
	return cmd_radyo(playerid, params);

CMD:r(playerid, params[])
	return cmd_radyo(playerid, params);

CMD:d(playerid, params[])
	return cmd_departman(playerid, params);

CMD:karakter(playerid, params[])
	return cmd_stats(playerid, params);
	
CMD:zar(playerid, params[])
	return cmd_zarat(playerid, params);
	
CMD:aduzenle(playerid, params[])
	return cmd_aracduzenle(playerid, params);

CMD:araclarim(playerid, params[])
	return cmd_aliste(playerid, params);

CMD:admins(playerid, params[])
	return cmd_yetkililer(playerid, params);

CMD:adminler(playerid, params[])
	return cmd_yetkililer(playerid, params);

CMD:animhelp(playerid, params[])
	return cmd_animlist(playerid, params);

CMD:anims(playerid, params[])
	return cmd_animlist(playerid, params);

CMD:animler(playerid, params[])
	return cmd_animlist(playerid, params);

CMD:kickall(playerid, params[])
	return cmd_herkesiat(playerid, params);

CMD:cpsil(playerid, params[])
	return cmd_cpsifirla(playerid, params);

CMD:hedefsifirla(playerid, params[])
	return cmd_cpsifirla(playerid, params);

CMD:hedefsil(playerid, params[])
	return cmd_cpsifirla(playerid, params);
	
CMD:farlar(playerid, params[])
	return cmd_far(playerid, params);

CMD:gotopos(playerid, params[])
	return cmd_posgit(playerid, params);

CMD:zaman(playerid, params[])
	return cmd_saat(playerid, params);

CMD:aksesuarlarim(playerid, params[])
	return cmd_aksesuar(playerid, params);

CMD:aksesuarlar(playerid, params[])
	return cmd_aksesuar(playerid, params);

CMD:oyuncaklarim(playerid, params[])
	return cmd_aksesuar(playerid, params);

CMD:oyuncaklar(playerid, params[])
	return cmd_aksesuar(playerid, params);

CMD:toys(playerid, params[])
	return cmd_aksesuar(playerid, params);

CMD:hesap(playerid, params[])
	return cmd_ayarlar(playerid, params);

CMD:setstat(playerid, params[])
	return cmd_oyuncuduzenle(playerid, params);

CMD:setweather(playerid, params[])
	return cmd_havayidegistir(playerid, params);

CMD:unban(playerid, params[])
	return cmd_bankaldir(playerid, params);

CMD:setadmin(playerid, params[])
	return cmd_setstaff(playerid, params);
	
CMD:ar(playerid, params[])
	return cmd_rkabul(playerid, params);
	
CMD:tr(playerid, params[])
	return cmd_rsil(playerid, params);
	
CMD:speclist(playerid, params[])
	return cmd_izlemelistesi(playerid, params);
	
CMD:reports(playerid, params[])
	return cmd_raporlar(playerid, params);
	
CMD:owarn(playerid, params[])
	return cmd_ouyariver(playerid, params);
	
CMD:yap(playerid, params[])
	return cmd_do(playerid, params);
	
CMD:sorusor(playerid, params[])
	return cmd_soru(playerid, params);
	
CMD:unhban(playerid, params[])
	return cmd_hbankaldir(playerid, params);
	
CMD:pb(playerid, params[])
	return cmd_paintball(playerid, params);
	
CMD:healnear(playerid, params[])
	return cmd_ycanver(playerid, params);
	
CMD:setmoney(playerid, params[])
	return cmd_aparaduzenle(playerid, params);
	
CMD:near(playerid, params[])
	return cmd_yakindakiler(playerid, params);
	
CMD:sjail(playerid, params[])
	return cmd_shapis(playerid, params);
	
	
/*CMD:n(playerid, params[])
	return cmd_newbie(playerid, params);
	
CMD:newb(playerid, params[])
	return cmd_newbie(playerid, params);*/
	


CMD:yardim(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Bu komutu kullanmak için giriþ yapmalýsýn.");

	SendClientMessage(playerid, RENK_SERVER, "ÝLETÝÞÝM: {FFFFFF}/w /s /l /b /e /k /cc /me /ame /do /pm");
	SendClientMessage(playerid, RENK_SERVER, "GENEL: {FFFFFF}/hesapla /soyun /wat /dat /aksesuar /cpsifirla /maskecikar /adminler /zaman /id");
	SendClientMessage(playerid, RENK_SERVER, "GENEL: {FFFFFF}/iptal /dilsec /gozbagla /silahver /ustara /dene /satinal /oocmarket /animler /yuruyus");
	SendClientMessage(playerid, RENK_SERVER, "GENEL: {FFFFFF}/karakter /envanter /mulklerim /araclarim /cezalarim /objelerim /gatelerim /ilkyardim");
	SendClientMessage(playerid, RENK_SERVER, "GENEL: {FFFFFF}/kimlikgoster /lisansgoster /ckol /ayarlar /rapor /soru /gps /meslekbul /meslek");
	SendClientMessage(playerid, RENK_SERVER, "GENEL: {FFFFFF}/bidon /sigara /sigarayak /maske /soyadiizin /boombox /kampatesi /birlikkur");
	SendClientMessage(playerid, RENK_SERVER, "TELEFON: {FFFFFF}/telefon /ara /cevapla /kapat /sms");
	SendClientMessage(playerid, RENK_SERVER, "ARAÇ: {FFFFFF}/motor /arac /ason /acam /park /far /kaput /bagaj /arackirala /aractanat /kilit");
	SendClientMessage(playerid, RENK_SERVER, "MÜLK: {FFFFFF}/ev /evlamba /isyeri /bina /banahtarver /banahtarsifirla");
	SendClientMessage(playerid, RENK_SERVER, "ANAHTAR: {FFFFFF}/anahtarver /anahtarsifirla /evanahtarver /evanahtarsifirla");
	if(OyuncuBilgi[playerid][oBirlik] > -1 && OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) {
		SendClientMessage(playerid, RENK_SERVER, "LSPD: {FFFFFF}/r /yt /d /cezakes /camkir /aracbagla /aracicek /aracibirak /havaalanikapi");
		SendClientMessage(playerid, RENK_SERVER, "LSPD: {FFFFFF}/barikat /barikatkaldir /barikatduzenle /destek /mdc /siren /elkoy /taser /dolap");
 		SendClientMessage(playerid, RENK_SERVER, "LSPD: {FFFFFF}/rozetgoster /m /callsign /yereyatir /pdspawn /pdtamir /surukle /kelepce /aracaat");
	}
	if(OyuncuBilgi[playerid][oBirlik] > -1 && OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL) {
		SendClientMessage(playerid, RENK_SERVER, "DOKTOR: {FFFFFF}/birlik /hastateslim /ilkyardim /dolap /m");
	}
	if(OyuncuBilgi[playerid][oBirlik] > -1 && OyuncuBirlikTuru(playerid) == BIRLIK_HABERAJANSI) {
		SendClientMessage(playerid, RENK_SERVER, "HABER: {FFFFFF}/birlik /yayinpanel /yayin");
	}
	if(OyuncuBilgi[playerid][oBirlik] > -1)
		SendClientMessage(playerid, RENK_SERVER, "BIRLIK: {FFFFFF}/birlik /f");
		
	if(OyuncuBilgi[playerid][oMeslek] == 1)
	    SendClientMessage(playerid, RENK_SERVER, "MESLEK: {FFFFFF}/kamyoncu");
	    
	if(OyuncuBilgi[playerid][oMeslek] == 2)
	    SendClientMessage(playerid, RENK_SERVER, "MESLEK: {FFFFFF}/temizlikci");
	    
	if(OyuncuBilgi[playerid][oMeslek] == 3)
	    SendClientMessage(playerid, RENK_SERVER, "MESLEK: {FFFFFF}/hurdaci, /duzkontak");

	if(OyuncuBilgi[playerid][oMeslek] == 4)
	    SendClientMessage(playerid, RENK_SERVER, "MESLEK: {FFFFFF}/gasp");
	    
	if(OyuncuBilgi[playerid][oMeslek] == 5)
	    SendClientMessage(playerid, RENK_SERVER, "MESLEK: {FFFFFF}/tamirkiti, /nos");
	    
	if(OyuncuBilgi[playerid][oMeslek] == 10)
	    SendClientMessage(playerid, RENK_SERVER, "MESLEK: {FFFFFF}/zirhsat");

	if(OyuncuBilgi[playerid][oDestekEkibi] > 0) SendClientMessage(playerid, RENK_SERVER, "« Destek » {FFFFFF}/sorular, /skabul, /ssil, /sbitir, /apm");
	if(OyuncuBilgi[playerid][oAdmin]) SendClientMessage(playerid, 0x33AA33FF, "« ADMIN » {FFFFFF}/ah, /raporlar, /rkabul, /rsil, /rbitir, /apm");
	return 1;
}

CMD:yetkiliyardim(playerid, params[])
{
	if(!OyuncuBilgi[playerid][oAdmin]) return YetkinizYok(playerid);

	//SendCilentMessage(playerid, -1, "")

	new yoneticiyardim[2304];
	format(yoneticiyardim, sizeof(yoneticiyardim), "{046102}Oyun Yetkilisi I\n");
	strcat(yoneticiyardim, "{FFFFFF}/a /h /entercar /aduty /jetpack /afkliste /maskeliler /maskeid /karakter (id)");
	strcat(yoneticiyardim, "{FFFFFF}/birlikler /setvw /setint /nrn /binalar /forumid /spec /posgit /soylenti\n");
	strcat(yoneticiyardim, "{FFFFFF}/raporlar /rkabul /rsil /rbitir /rsoru /rforum /unjail /ojail /skick /level /aliste\n");
	strcat(yoneticiyardim, "{FFFFFF}/karakterban /slap /unfreeze /freeeze /bildiri /respawnnear /ipbankaldir /bankaldir /weapons /uyariver /aliste\n");
	strcat(yoneticiyardim, "{FFFFFF}/okarakter /ck /cksil /oban /bbkaldir /flipcar /hbankaldir /atamir /nsahipbul /ouyariver\n");
	strcat(yoneticiyardim, "{FFFFFF}/hban /yakindakiler /ohban /shapis\n");
	strcat(yoneticiyardim, "{FFFFFF}/get /goto /apm /kick /spawnla /jail /petgizle /respawncar /getcar /revive /amotor\n\n");
	if(OyuncuBilgi[playerid][oAdmin] >= 2) {
	    strcat(yoneticiyardim, "{046102}Oyun Yetkilisi II\n");
	    strcat(yoneticiyardim, "{FFFFFF}/respawnallcar /acc /ydondur /ycoz\n");
		strcat(yoneticiyardim, "{FFFFFF}/ooc /abagla\n\n");
	}
	if(OyuncuBilgi[playerid][oAdmin] >= 3) {
		strcat(yoneticiyardim, "{046102}Oyun Yetkilisi III\n");
		strcat(yoneticiyardim, "{FFFFFF}/setarmor /sethp /barikatlarikaldir\n");
		strcat(yoneticiyardim, "{FFFFFF}/asahipsiz /avukatyap /unluyap /setskin\n\n");
	}
	if(OyuncuBilgi[playerid][oAdmin] >= 4) {
	strcat(yoneticiyardim, "{046102}Oyun Yetkilisi IV\n");
	strcat(yoneticiyardim, "{FFFFFF}/resetweapons /ahizradar /agraffiti /ukaldir\n\n");
	}
	if(OyuncuBilgi[playerid][oAdmin] >= 5) {
        strcat(yoneticiyardim, "{003399}Oyun Yöneticisi\n");
        strcat(yoneticiyardim, "{FFFFFF}/pompayarat /apompa /abina /herkesecan /aatm /seteventmod /giveweapon\n");
        strcat(yoneticiyardim, "{FFFFFF}/setleader /birlikayarla /arutbe /adekor /abirlik /oparakes\n");
	}
	if(OyuncuBilgi[playerid][oAdmin] >= 6) {
        strcat(yoneticiyardim, "{FFFFFF}/raporkontrol /destekyap /ahurdaci /acctv /asuc /herkesezirh /agaraj\n");
		strcat(yoneticiyardim, "{FFFFFF}/aev /aisyeri /ysilahsifirla /aduzenle /makebirlikmod\n");
		strcat(yoneticiyardim, "{FFFFFF}/agate /fabrikayarat /afabrika /asandik /aracsil /aracyarat /aobje\n\n");
	}
	if(OyuncuBilgi[playerid][oAdmin] >= 7) {
		strcat(yoneticiyardim, "{9d0808}Genel Yönetici\n");
		strcat(yoneticiyardim, "{FFFFFF}/setstaff /herkesiat /agps /yzirhver /duyuruduzenle /asatici/oyuncuduzenle\n");
        strcat(yoneticiyardim, "{FFFFFF}/havayidegistir /ameslek /karaktersec /yetkilihesaplar /vipyap\n");
		strcat(yoneticiyardim, "{FFFFFF}/bakiyever /sunucu /aparaduzenle /aparaver /oparaver /aracver /izlemelistesi /herkesepara /herkesecap /oizin /cekilis\n");
		strcat(yoneticiyardim, "{FFFFFF}/ozelmodel /petolustur /petsil /udurum /udakika /anick /ysilahver\n\n");
	}
	if(OyuncuBilgi[playerid][oAdmin] >= 8) {
		strcat(yoneticiyardim, "{FFFFFF}/restart /bakiyekes /bakiyever\n");
	}
	DialogGoster(playerid, 0, DIALOG_STYLE_MSGBOX, "Yetkili Komutlarý", yoneticiyardim, "Kapat", "");
	return 1;
}

CMD:ozelmodel(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	new oyuncuid, modelid;
	if(sscanf(params, "ud", oyuncuid, modelid)) return KullanimMesaji(playerid, "/ozelmodel [ID / Oyuncu] [model id]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Geçersiz oyuncu belirlendi.");
	if(modelid < 20000) return HataMesaji(playerid, "Geçersiz model.");
	
	new sorgu[256 + MAX_PLAYER_NAME];
	format(sorgu, sizeof(sorgu), "INSERT INTO `ozelmodel` (`hesapID`, `modelID`) VALUES ('%d', '%d')", OyuncuBilgi[oyuncuid][oHesap], modelid);
	mysql_query(mysqlB, sorgu);
	SunucuMesaji(playerid, "Özel model oyuncunun hesabýna tanýmlandý.");
	return 1;
}

CMD:hesapla(playerid, params[])
{
	new islem[20], veri1, veri2;
	if(sscanf(params, "ds[20]d", veri1, islem, veri2))
	{
	 	KullanimMesaji(playerid, "/hesapla [veri1] [iþlem] [veri2]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝÞLEMLER]:{FFFFFF} Topla (+), Çarp (*), Böl (/), Çýkar (-)");
		return 1;
	}
    if(veri2 == 0 || veri1 == 0) return HataMesaji(playerid, "Girilen veri sýfýr(0) olamaz.");
	if(strcmp(islem, "*",true) == 0)
	{
		SunucuMesaji(playerid, "%d çarpý %d eþittir %d", veri1, veri2, veri1 * veri2);
	}
	if(strcmp(islem, "/",true) == 0)
	{
		SunucuMesaji(playerid, "%d bölü %d eþittir %d", veri1, veri2, veri1 / veri2);
	}
	if(strcmp(islem, "+",true) == 0)
	{
		SunucuMesaji(playerid, "%d artý %d eþittir %d", veri1, veri2, veri1 + veri2);
	}
	if(strcmp(islem, "-",true) == 0)
	{
		SunucuMesaji(playerid, "%d eksi %d eþittir %d", veri1, veri2, veri1 - veri2);
	}
	return 1;
}

CMD:kontrakt(playerid, params[])
{
	if(OyuncuBilgi[playerid][oHitman] < 1) {
		if(OyuncuBilgi[playerid][oTelefon] == 0 || OyuncuBilgi[playerid][oTelefonNumarasi] == 0) return HataMesaji(playerid, "Telefonun yok veya operatöre baðlý deðil.");
		if(OyuncuBilgi[playerid][oTelefonDurum] == false) return HataMesaji(playerid, "Telefonun kapalýyken bu sisteme ulaþamazsýn.");
		
		DialogGoster(playerid, DIALOG_KONTRAKT_EKLE, DIALOG_STYLE_INPUT, "Hitman: Kontrakt Tut", "{FFFFFF}Lütfen kontrakt oluþturmak istediðiniz kiþinin adýný paylaþýn;", "Tamam", "Kapat");
		return 1;
	}
	new icerik[96];
	switch(OyuncuBilgi[playerid][oHitman]) {
		case 1: format(icerik, sizeof(icerik), "Kontrakt Listesi\n");
		case 2: format(icerik, sizeof(icerik), "Kontrakt Listesi\nÜyeler\n");
	}
	DialogGoster(playerid, DIALOG_KONTRAKT, DIALOG_STYLE_TABLIST, "Hitman: Kontrakt Menü", icerik, "Seç", "Kapat");
	return 1;
}

CMD:hbirlik(playerid, params[])
{
	if(OyuncuBilgi[playerid][oHitman] == 0) return YetkinizYok(playerid);
	
	new mesaj[256 * MAKSIMUM_BIRLIK];
	format(mesaj, sizeof(mesaj), "ID\tÝsim\tTür\n");
	for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikKullanimda] == true && (BirlikBilgi[i][birlikTur] == BIRLIK_POLIS || BirlikBilgi[i][birlikTur] == BIRLIK_MEDIKAL || BirlikBilgi[i][birlikTur] == BIRLIK_DEVLET))
	{
	    format(mesaj, sizeof(mesaj), "%s{FFFFFF}%d\t%s\t%s\n", mesaj, i, BirlikBilgi[i][birlikAd], birlikturadi(i));
	}
	format(mesaj, sizeof(mesaj), "%s{B70000}Birlik Sýfýrla\t\t\n", mesaj);
	DialogGoster(playerid, DIALOG_HITMAN_BIRLIK, DIALOG_STYLE_TABLIST_HEADERS, "Hitman: Birlik Seçimi", mesaj, "Seç", "Kapat");
	return 1;
}

CMD:hdolap(playerid, params[])
{
	if(OyuncuBilgi[playerid][oHitman] == 0) return YetkinizYok(playerid);
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1261.7869, -795.8909, 1084.2415)) return HataMesaji(playerid, "Hitman dolabýna yakýn deðilsin.");
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yetkili iþbaþýnda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0 || OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araç içerisinde kullanýlamaz.");

	DialogGoster(playerid, DIALOG_HITMANDOLAP, DIALOG_STYLE_TABLIST, "Hitman Menüsü", "Ekipmanlar\nSahte Level\nSahte Ýsim\nSilah Sýfýrla", "Seç", "Kapat");
	return 1;
}

CMD:ktamamla(playerid, params[])
{
	if(OyuncuBilgi[playerid][oHitman] == 0) return 0;

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/ktamamla [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Geçersiz oyuncu.");
	if(!YakinlikKontrol(playerid, oyuncuid, 4.0)) return HataMesaji(playerid, "Oyuncuya yakýn deðilsin.");

	for(new i = 0; i != MAKSIMUM_KONTRAKT; i++) if(KontraktVeri[i][kontraktKullanimda] == true && !strcmp(KontraktVeri[i][kontraktIsim], OyuncuBilgi[oyuncuid][oIsim], true)) {
	    if(OyuncuBilgi[oyuncuid][oYarali] == 0 && OyuncuBilgi[oyuncuid][oYaraliSure] == 0) return HataMesaji(playerid, "Oyuncu yaralý durumda deðil, görevini tamamlamak için onu yaralamalýsýn.");

		SunucuMesaji(playerid, "Görevini baþarýyla tamamladýn, %s banka hesabýna yatýrýldý.", NumaraFormati(KontraktVeri[i][kontraktUcret]));
		OyuncuBilgi[playerid][oBankaPara] += KontraktVeri[i][kontraktUcret];
		OyuncuBilgi[oyuncuid][oCK] = 1;
		if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0) OyuncuBilgi[oyuncuid][oHapisSure][0] = 0;
		if(OyuncuBilgi[oyuncuid][oHapisSure][1] > 0) OyuncuBilgi[oyuncuid][oHapisSure][1] = 0;
		HapiseAt(oyuncuid);
		UyariMesaji(oyuncuid, "Bir kiralýk katil tarafýndan öldürüldün, karakterin CK oldu.");
		Kontrakt_Kaldir(i);
		return 1;
	}
	HataMesaji(playerid, "Bu kiþi adýna tutulmuþ bir kontrakt yok.");
	return 1;
}

CMD:soyun(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
	if((OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) && OyuncuBilgi[playerid][oIsbasi] == true) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0 || OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araç içerisinde kullanýlamaz.");
	if(OyuncuBilgi[playerid][oGeciciKiyafet] > 0) {
		OyuncuBilgi[playerid][oGeciciKiyafet] = 0;
		KiyafetDegistir(playerid, OyuncuBilgi[playerid][oKiyafet]);
		cmd_ame(playerid, "kýyafetlerini giyer.");
		return 1;
	}
	if(OyuncuBilgi[playerid][oCinsiyet] == 1) {
		switch(OyuncuBilgi[playerid][oTenRengi]) {
			case 1: {
				new kiyafetler[sizeof(SoyunErkekBeyaz)];
				for(new c = 0; c != sizeof(SoyunErkekBeyaz); c++) kiyafetler[c] = SoyunErkekBeyaz[c][0];
				ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "Soyun", MODELLER_SOYUN, 0.0, 0.0, 0.0);
			}
			case 2: {
				new kiyafetler[sizeof(SoyunErkekSiyah)];
				for(new c = 0; c != sizeof(SoyunErkekSiyah); c++) kiyafetler[c] = SoyunErkekSiyah[c][0];
				ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "Soyun", MODELLER_SOYUN, 0.0, 0.0, 0.0);
			}
		}
	}
	else if(OyuncuBilgi[playerid][oCinsiyet] == 2) {
		switch(OyuncuBilgi[playerid][oTenRengi]) {
			case 1: {
				new kiyafetler[sizeof(SoyunKadinBeyaz)];
				for(new c = 0; c != sizeof(SoyunKadinBeyaz); c++) kiyafetler[c] = SoyunKadinBeyaz[c][0];
				ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "Soyun", MODELLER_SOYUN, 0.0, 0.0, 0.0);
			}
			case 2: {
				new kiyafetler[sizeof(SoyunKadinSiyah)];
				for(new c = 0; c != sizeof(SoyunKadinSiyah); c++) kiyafetler[c] = SoyunKadinSiyah[c][0];
				ShowModelSelectionMenuEx(playerid, kiyafetler, sizeof(kiyafetler), "Soyun", MODELLER_SOYUN, 0.0, 0.0, 0.0);
			}
		}
	}
	return 1;
}

/*CMD:paketal(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2394.3757, -1204.5647, 27.8816)) return HataMesaji(playerid, "Materyal noktasýnda deðilsin.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0 || OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn");

	if(OyuncuBilgi[playerid][oMarker] > -1 || OyuncuBilgi[playerid][oKonum] != -1 || OyuncuBilgi[playerid][oLokasyon] != -1 || OyuncuBilgi[playerid][oAdres] != -1 || OyuncuBilgi[playerid][objeLokasyon] != -1 || OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID || OyuncuBilgi[playerid][oIsaretliKonum] != 0 || OyuncuBilgi[playerid][oIsaretliMeslek] != -1)
		return HataMesaji(playerid, "Haritanda iþaretli bir checkpoint var, /cpsifirla yazdýktan sonra bu komutu kullanabilirsin.");

	if(OyuncuBilgi[playerid][oPara] < MATERYAL_UCRET) { HataMesaji(playerid, "Materyal almak için gerekli ücreti karþýlayamýyorsun. (%s)", NumaraFormati(MATERYAL_UCRET)); return 1; }
	if(OyuncuBilgi[playerid][oMateryalTasiyor] == true) return HataMesaji(playerid, "Zaten þu anda materyal taþýyorsun.");

    OyuncuBilgi[playerid][oMeslekDelay] = gettime() + 30;
	ParaEkle(playerid, -MATERYAL_UCRET);
	OyuncuBilgi[playerid][oMateryalTasiyor] = true;
	SetPlayerCheckpoint(playerid, -382.3842, -1426.2419, 26.1702, 5.0);
	SunucuMesaji(playerid, "Teslimat noktasý haritanda iþaretlendi.");
	return 1;
}*/

CMD:gasp(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan komut kullanamazsýn.");
	if(OyuncuBilgi[playerid][oSeviye] < 8) return HataMesaji(playerid, "Bu komutu 8 level ve üstü kullanabilir.");
	if(OyuncuBilgi[playerid][oMeslek] != 4) return HataMesaji(playerid, "Hýrsýz mesleðinde deðilsin.");
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýnda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken gasp yapamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken gasp yapamazsýn.");
	if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken gasp yapamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken gasp yapamazsýn.");
	if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL) return HataMesaji(playerid, "Polis veya medikal birlikleri gasp yapamaz.");
	if(OyuncuBilgi[playerid][oGasp] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Þu anda bir gasp yapýyorsun, iþlemin bitmesini bekle.");
	if(OyuncuBilgi[playerid][oGaspSure] > 0) {
		SendClientMessageEx(playerid, RENK_SERVER, "[GASP] {FFFFFF}Yeni gasp için kalan süre: %s", ConvertTime(OyuncuBilgi[playerid][oGaspSure] - gettime()));
		return 1;
	}
	
	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/gasp [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Geçersiz oyuncu.");
	if(playerid == oyuncuid) return HataMesaji(playerid, "Kendini gasp edemezsin.");
	if(!YakinlikKontrol(playerid, oyuncuid, 4.0)) return HataMesaji(playerid, "Oyuncuya yakýn deðilsin.");
	if(OyuncuBilgi[oyuncuid][oGiris] == false) return HataMesaji(playerid, "Bu oyuncu giriþ yapmamýþ.");
	if(OyuncuBilgi[oyuncuid][oSeviye] < 5) return HataMesaji(playerid, "Gasp edeceðiniz kiþi en az 5 Level olmalýdýr.");
	if(OyuncuBilgi[oyuncuid][oAdminDurum] == true) return HataMesaji(playerid, "Ýþbaþýndaki bir admini gasp edemezsin.");
	if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0 || OyuncuBilgi[oyuncuid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteki bir oyuncuyu gasp edemezsin.");
	if(OyuncuBilgi[oyuncuid][oDialog] != -1) return HataMesaji(playerid, "Oyuncu baþka bir diyalog kullanýyor lütfen bekleyiniz.");
	if(OyuncuBilgi[oyuncuid][oGasp] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Oyuncu baþka birisiyle gasp sistemini kullanýyor, lütfen bekleyin.");
	if((OyuncuBirlikTuru(oyuncuid) == BIRLIK_POLIS || OyuncuBirlikTuru(oyuncuid) == BIRLIK_MEDIKAL) && OyuncuBilgi[oyuncuid][oIsbasi] == true) return HataMesaji(playerid, "Ýþbaþýndaki devlet kurumu üyeleri gasp edilemez.");
	
	SunucuMesaji(playerid, "Gasp isteðiniz %s adlý kiþiye iletildi.", OyuncuIsim(oyuncuid));
	new icerik[144 + MAX_PLAYER_NAME];
	OyuncuBilgi[oyuncuid][oGasp] = playerid;
	OyuncuBilgi[playerid][oGasp] = oyuncuid;
	format(icerik, sizeof(icerik), "%s adlý kiþi tarafýndan size gasp isteði gönderildi, karþýnýzdaki kiþinin gasp sistemini kullanmasýný onaylýyor musunuz?", OyuncuIsim(playerid));
	DialogGoster(oyuncuid, DIALOG_GASP_ONAY, DIALOG_STYLE_MSGBOX, "Gasp Onayý", icerik, "Kabul", "Red");
	return 1;
}

/*CMD:atip(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 2) return YetkinizYok(playerid);
	
	
	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/atip [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return KullanimMesaji(playerid, "Geçersiz oyuncu.");
	if(playerid == oyuncuid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");
	if(OyuncuBilgi[oyuncuid][oGiris] == false) return HataMesaji(playerid, "Bu oyuncu giriþ yapmamýþ.");
	if(OyuncuBilgi[oyuncuid][oAdminDurum] == true) return HataMesaji(playerid, "Ýþbaþýndaki bir admin üzerinde bu komutu kullanamazsýn.");
	if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteki bir oyuncu üzerinde bu komutu kullanamazsýn.");
	if(OyuncuBilgi[oyuncuid][oAltTab] < 30) return HataMesaji(playerid, "Oyuncu AFK deðil.");
	if(OyuncuBilgi[oyuncuid][oPaintball] != -1) return HataMesaji(playerid, "Oyuncu paintballda.");
	if(eskiworld[oyuncuid] != -1) return HataMesaji(playerid, "Bu oyuncu zaten baþka bir dünyaya gönderilmiþ.");
	
	eskiworld[oyuncuid] = GetPlayerVirtualWorld(oyuncuid);
	SetPlayerVirtualWorld(oyuncuid, oyuncuid + 4040);
	SunucuMesaji(playerid, "%s adlý oyuncu afk olduðu için farklý bir dünyaya gönderildi.");
	return 1;
}*/

CMD:afkliste(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new sayi = 0;
	foreach(new i : Player) if(OyuncuBilgi[i][oAltTab] > 5) {
		new afkbilgi[128], isim[MAX_PLAYER_NAME];
		format(afkbilgi, sizeof(afkbilgi), "(%d saniye)", OyuncuBilgi[i][oAltTab]);
		if(OyuncuBilgi[i][oAltTab] >= 300) format(afkbilgi, sizeof(afkbilgi), "(5+ dakika)");
		GetPlayerName(i, isim, sizeof(isim));
		for(new is = 0, len = strlen(isim); is < len; is++) if(isim[is] == '_') isim[is] = ' ';
		SendClientMessageEx(playerid, RENK_GRI, "%s(%d) %s", isim, i, afkbilgi);
		sayi++;
	}
	if(!sayi) return HataMesaji(playerid, "Oyunda AFK durumunda kimse bulunmuyor.");
	SunucuMesaji(playerid, "AFK Durumda %s adet kiþi var.", NumaraFormati(sayi, ""));
	return 1;
}

CMD:wat(playerid, params[])
{
	new sayi = 0;
	for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS - 3; i++) if(AksesuarListesi[playerid][i][aksesuarModel] != 0) AksesuarListesi[playerid][i][aksesuarKullanimda] = 1, sayi++;
	if(!sayi) return HataMesaji(playerid, "Takýlabilecek aksesuarýn yok.");
	Aksesuar_Ayarla(playerid);
	SunucuMesaji(playerid, "%d adet aksesuarýný taktýn.", sayi);
	return 1;
}

CMD:dat(playerid, params[])
{
	new sayi = 0;
	for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS - 3; i++) if(AksesuarListesi[playerid][i][aksesuarModel] != 0) AksesuarListesi[playerid][i][aksesuarKullanimda] = 0, sayi++;
	if(!sayi) return HataMesaji(playerid, "Çýkartýlabilecek aksesuarýn yok.");
	Aksesuar_Ayarla(playerid);
	SunucuMesaji(playerid, "%d adet aksesuarýný çýkarttýn.", sayi);
	return 1;
}

CMD:aksesuar(playerid, params[])
{
	new icerik[512], slot[144];
	for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS - 3; i++) {
		if(AksesuarListesi[playerid][i][aksesuarModel] != 0)
		{
			format(slot, 256, "Aksesuar %d: (Model ID: %d)\n", i + 1, AksesuarListesi[playerid][i][aksesuarModel]);
		}
		else format(slot, 256, "Aksesuar %d: (Boþ)\n", i + 1);
		strcat(icerik, slot);
	}
	strcat(icerik, "Tümünü Sýfýrla");
	DialogGoster(playerid, DIALOG_AKSESUAR, DIALOG_STYLE_TABLIST, "Aksesuarlar", icerik, "Seç", "Kapat");
	return 1;
}

CMD:cpsifirla(playerid, params[])
{
	if(OyuncuBilgi[playerid][oMarker] > -1) {
		DisablePlayerCheckpoint(playerid);
		SetPlayerMarkerForPlayer(playerid, OyuncuBilgi[playerid][oMarker], RENK_VARSAYILAN);
		if(OyuncuBilgi[playerid][oIsbasi] == true) {
			if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) SetPlayerColor(playerid, RENK_PDISBASI);
			else if(OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL) SetPlayerColor(playerid, RENK_FMDISBASI);
			else if(OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) SetPlayerColor(playerid, RENK_GOVISBASI);
		}
		else SetPlayerColor(OyuncuBilgi[playerid][oMarker], RENK_VARSAYILAN);
		OyuncuBilgi[playerid][oMarker] = -1;
	}
	if(OyuncuBilgi[playerid][oKonum] != -1) {
		DisablePlayerCheckpoint(playerid);
		OyuncuBilgi[playerid][oKonum] = -1;
	}
	if(OyuncuBilgi[playerid][oLokasyon] != -1) {
		DisablePlayerCheckpoint(playerid);
		OyuncuBilgi[playerid][oLokasyon] = -1;
	}
	if(OyuncuBilgi[playerid][oAdres] != -1) {
		DisablePlayerCheckpoint(playerid);
		OyuncuBilgi[playerid][oAdres] = -1;
	}
	if(OyuncuBilgi[playerid][objeLokasyon] != -1) {
		DisablePlayerCheckpoint(playerid);
		OyuncuBilgi[playerid][objeLokasyon] = -1;
	}
	/*if(OyuncuBilgi[playerid][oMateryalTasiyor] == true) {
		DisablePlayerCheckpoint(playerid);
		OyuncuBilgi[playerid][oMateryalTasiyor] = false;
	}*/
	if(OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID) {
	    DisablePlayerCheckpoint(playerid);
	    OyuncuBilgi[playerid][oGPSArac] = INVALID_VEHICLE_ID;
	}
	if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) {
	    DisablePlayerCheckpoint(playerid);
	    OyuncuBilgi[playerid][oIsaretliKonum] = 0;
	}
	if(OyuncuBilgi[playerid][oIsaretliMeslek] != -1) {
		DisablePlayerCheckpoint(playerid);
		OyuncuBilgi[playerid][oIsaretliMeslek] = -1;
	}
	if(OyuncuBilgi[playerid][oKamyoncu] != -1) {
		DialogGoster(playerid, DIALOG_MESLEKYOLDA_BIRAK, DIALOG_STYLE_MSGBOX, "Yükünü Býrak", "Mesleðini yarýda býrakmak istediðine emin misin?\nBu yüzden 5 dakika boyunca meslek yapamayacaksýn.", "Evet", "Hayýr");
	}
	SunucuMesaji(playerid, "Checkpointleriniz sýfýrlandý.");
	return 1;
}

CMD:bildiri(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new isim[32], sebep[144];
	if(sscanf(params, "s[32]s[144]", isim, sebep)) return KullanimMesaji(playerid, "/bildiri [oyuncu isim] [sebep]");

	new sorgu[512];
	format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE isim = '%s'", isim);
	mysql_tquery(mysqlB, sorgu, "Bildirim_Ekle", "is", playerid, sebep);
	return 1;
}

CMD:oizin(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/oizin [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Geçersiz oyuncu.");
	if(OyuncuBilgi[oyuncuid][oGiris] == false) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ.");

	switch(OyuncuBilgi[oyuncuid][objeIzin]) {
	    case false: OyuncuBilgi[oyuncuid][objeIzin] = true, SunucuMesaji(playerid, "Oyuncuya obje izni verildi.");
		case true: OyuncuBilgi[oyuncuid][objeIzin] = false, SunucuMesaji(playerid, "Oyuncunun obje izni iptal edildi.");
	}
	return 1;
}

CMD:karaktersec(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);
	CallRemoteFunction("OnPlayerDisconnect", "id", playerid, 1);
	OyuncuKaydet(playerid);
	SetSpawnInfo(playerid, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
	SpawnPlayer(playerid);
	OyuncuPosDegistir(playerid, 1045.441040, -918.800231, -80.0);
	InterpolateCameraPos(playerid, 437.747619, -1469.347900, 36.590827, 1045.441040, -918.800231, 92.159584, 10000);
	InterpolateCameraLookAt(playerid, 442.437072, -1467.623413, 36.778285, 1049.376220, -921.691528, 93.234367, 1000);
	new isim[MAX_PLAYER_NAME];
	format(isim, sizeof(isim), "VIGA_%03d", OyuncuBilgi[playerid][oHesap]);
	SetPlayerName(playerid, isim);
	new oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	IsimLabelGuncelle(playerid);
	OyuncuSifirla(playerid);
	CallRemoteFunction("OnPlayerConnect", "i", playerid);
	return 1;
}

CMD:durum(playerid, params[])
{
    new ayarlar[256], ekleme[256], baslik[64];
    format(ayarlar, sizeof(ayarlar), "Ýþlem Adý\tDurum\n");
    
    format(ekleme, sizeof(ekleme), "{FFFFFF}Göz Rengi\t[%s]\n", GozRengi(OyuncuBilgi[playerid][oGozRengi]));
    strcat(ayarlar, ekleme);
    format(ekleme, sizeof(ekleme), "{FFFFFF}Saç Rengi\t[%s]\n", SacRengi(OyuncuBilgi[playerid][oSacRengi]));
    strcat(ayarlar, ekleme);
    format(ekleme, sizeof(ekleme), "{FFFFFF}Karakter Detayý\t[-]\n");
	strcat(ayarlar, ekleme);
	format(baslik, sizeof(baslik), "Karakter Görünüþü - #%03d", OyuncuBilgi[playerid][oID]);
	DialogGoster(playerid, DIALOG_KARAKTERGORUNUS, DIALOG_STYLE_TABLIST_HEADERS, baslik, ayarlar, "Seç", "Kapat");
	return 1;
}

/*CMD:canli(playerid, params[])
{
    new ayarlar[512], ekleme[256], baslik[64], yayinid = OyuncuBilgi[playerid][oID], aciklama[32];
    format(aciklama, sizeof(aciklama), "%s", CanliBilgi[yayinid][canliAciklama]);
    strmid(aciklama, 0, 16);
    format(ayarlar, sizeof(ayarlar), "Ýþlem Adý\tDurum\n");
    
    format(ekleme, sizeof(ekleme), "{FFFFFF}Yayýn Baþlýðý\t[%s]\n", CanliBilgi[yayinid][canliBaslik]);
    strcat(ayarlar, ekleme);
    format(ekleme, sizeof(ekleme), "{FFFFFF}Yayýn Açýklamasý\t[%s]\n", aciklama);
    strcat(ayarlar, ekleme);
    format(ekleme, sizeof(ekleme), "{FFFFFF}Sohbet\t[%s]\n", (CanliBilgi[yayinid][canliSohbet] == false) ? ("{B70000}Kapalý") : ("{338833}Açýk")););
    strcat(ayarlar, ekleme);
    format(ekleme, sizeof(ekleme), "{FFFFFF}Takipçi Sayýsý\t[%s]\n", CanliBilgi[yayinid][canliTakipci]);
	strcat(ayarlar, ekleme);
	format(ekleme, sizeof(ekleme), "{FFFFFF}Toplam Kazanç\t[{338833}$%s{FFFFFF}]\n", CanliBilgi[yayinid][canliKazanc]);
	strcat(ayarlar, ekleme);
	format(ekleme, sizeof(ekleme), "{FFFFFF}Yayýn\t[%s]\n", (CanliBilgi[yayinid][canliSohbet] == false) ? ("{338833}Baþlat") : ("{B70000}Durdur")););
    strcat(ayarlar, ekleme);
	format(baslik, sizeof(baslik), "Karakter Görünüþü - #%03d", OyuncuBilgi[playerid][oID]);
	DialogGoster(playerid, DIALOG_KARAKTERGORUNUS, DIALOG_STYLE_TABLIST_HEADERS, baslik, ayarlar, "Seç", "Kapat");
	return 1;
}*/


CMD:ayarlar(playerid, params[])
{
	new ayarlar[2048], ekleme[256], baslik[64];
	format(ayarlar, sizeof(ayarlar), "Ýþlem Adý\tDurum\n");

	format(ekleme, sizeof(ekleme), "{dbdbdb}PM Durum\t[%s{FFFFFF}]\n", (OyuncuBilgi[playerid][oPMDurum] == false) ? ("{B70000}Kapalý") : ("{338833}Açýk"));
	strcat(ayarlar, ekleme);

	format(ekleme, sizeof(ekleme), "{dbdbdb}Boombox Dinle\t[%s{FFFFFF}]\n", (OyuncuBilgi[playerid][oBoomboxDurum] == false) ? ("{B70000}Kapalý") : ("{338833}Açýk"));
	strcat(ayarlar, ekleme);
	
	format(ekleme, sizeof(ekleme), "{dbdbdb}Ceza Bildirimleri\t[%s{FFFFFF}]\n", (OyuncuBilgi[playerid][oCezaDurum] == false) ? ("{B70000}Kapalý") : ("{338833}Açýk"));
	strcat(ayarlar, ekleme);
	
	format(ekleme, sizeof(ekleme), "{dbdbdb}Reklam Bildirimleri\t[%s{FFFFFF}]\n", (OyuncuBilgi[playerid][oReklamDurum] == false) ? ("{B70000}Kapalý") : ("{338833}Açýk"));
	strcat(ayarlar, ekleme);
	
	format(ekleme, sizeof(ekleme), "{dbdbdb}Otomatik Konuþma Animasyonu\t[%s{FFFFFF}]\n", (OyuncuBilgi[playerid][oKonusmaAnim] == false) ? ("{B70000}Kapalý") : ("{338833}Açýk"));
	strcat(ayarlar, ekleme);

	if(OyuncuBilgi[playerid][oBirlik] > -1) {
		format(ekleme, sizeof(ekleme), "{dbdbdb}Birlik Sohbeti\t[%s{FFFFFF}]\n", (OyuncuBilgi[playerid][oBirlikKanal] == false) ? ("{B70000}Kapalý") : ("{338833}Açýk"));
		strcat(ayarlar, ekleme);
	}
	if(OyuncuBilgi[playerid][oAdmin] > 0 || OyuncuBilgi[playerid][oDestekEkibi] > 0) {
		format(ekleme, sizeof(ekleme), "{dbdbdb}Soru Bildirimi\t[%s{FFFFFF}]\n", (OyuncuBilgi[playerid][oSoruGoruntule] == false) ? ("{B70000}Kapalý") : ("{338833}Açýk"));
		strcat(ayarlar, ekleme);
		
		format(ekleme, sizeof(ekleme), "{dbdbdb}Destek Sohbet\t[%s{FFFFFF}]\n", (OyuncuBilgi[playerid][oDestekSohbet] == false) ? ("{B70000}Kapalý") : ("{338833}Açýk"));
		strcat(ayarlar, ekleme);
	}
	if(OyuncuBilgi[playerid][oAdmin] > 0) {
		format(ekleme, sizeof(ekleme), "{dbdbdb}Rapor Bildirimi\t[%s{FFFFFF}]\n", (OyuncuBilgi[playerid][oRaporGoruntule] == false) ? ("{B70000}Kapalý") : ("{338833}Açýk"));
		strcat(ayarlar, ekleme);
	}
	if(OyuncuBilgi[playerid][oAdmin] >= 7) {
		format(ekleme, sizeof(ekleme), "{dbdbdb}PM Ýzleme\t[%s{FFFFFF}]\n", (OyuncuBilgi[playerid][oPMIzlemeDurum] == false) ? ("{B70000}Kapalý") : ("{338833}Açýk"));
		strcat(ayarlar, ekleme);

		format(ekleme, sizeof(ekleme), "{dbdbdb}Spec Ýzin\t[%s{FFFFFF}]\n", (OyuncuBilgi[playerid][oSpecDurum] == false) ? ("{B70000}Kapalý") : ("{338833}Açýk"));
		strcat(ayarlar, ekleme);
		
		format(ekleme, sizeof(ekleme), "{dbdbdb}Hile Kontrol\t[%s{FFFFFF}]\n", (OyuncuBilgi[playerid][oHileKontrol] == false) ? ("{B70000}Kapalý") : ("{338833}Açýk"));
		strcat(ayarlar, ekleme);
	}
	if(isnull(OyuncuBilgi[playerid][oReferans])) format(ekleme, sizeof(ekleme), "{dbdbdb}Referans\t[Belirlenmemiþ{FFFFFF}]\n"), strcat(ayarlar, ekleme);
	if(OyuncuBilgi[playerid][oAdminDurum] == false) {
		if(OyuncuBilgi[playerid][oHediye] >= 5) format(ekleme, sizeof(ekleme), "{427CB5}Hediye Al\t[{338833}Alýnabilir{FFFFFF}]\n"), strcat(ayarlar, ekleme);
		else if(OyuncuBilgi[playerid][oHediye] < 5) format(ekleme, sizeof(ekleme), "{427CB5}Hediye Al\t[%d/5{FFFFFF}]\n", OyuncuBilgi[playerid][oHediye]), strcat(ayarlar, ekleme);
	}
    else if(!isnull(OyuncuBilgi[playerid][oReferans])) format(ekleme, sizeof(ekleme), "{427CB5}Referans\t[%s{FFFFFF}]\n", OyuncuBilgi[playerid][oReferans]), strcat(ayarlar, ekleme);
    format(ekleme, sizeof(ekleme), "{dbdbdb}Hile Kontrol\t[%s{FFFFFF}]\n", (OyuncuBilgi[playerid][oHileKontrol] == false) ? ("{B70000}Kapalý") : ("{338833}Açýk"));
	strcat(ayarlar, ekleme);
	strcat(ayarlar, "{427CB5}Bildirimler");
	new isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, isim, sizeof(isim));

	for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
	format(baslik, sizeof(baslik), "%s - #%03d", isim, OyuncuBilgi[playerid][oID]);
	DialogGoster(playerid, DIALOG_AYARLAR, DIALOG_STYLE_TABLIST_HEADERS, baslik, ayarlar, "Seç", "Kapat");
	return 1;
}

CMD:adekor(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5) return YetkinizYok(playerid);

	new veriler[256 * MAKSIMUM_DEKOR], dekorucret[64];
	format(veriler, sizeof(veriler), "Dekor Ekle\t\n");
	for(new i = 0; i != MAKSIMUM_DEKOR; i ++) if(DekorListesi[i][dekorKullanimda]) {
		switch(DekorListesi[i][dekorOOC]) {
			case 1: format(dekorucret, sizeof(dekorucret), "$%s", NumaraFormati(DekorListesi[i][dekorUcret], ""));
			default: format(dekorucret, sizeof(dekorucret), "%s", NumaraFormati(DekorListesi[i][dekorUcret]));
		}
		format(veriler, sizeof(veriler), "%s%s\t(%s)\n", veriler, DekorListesi[i][dekorIsim], dekorucret);
	}
	DialogGoster(playerid, DIALOG_ADMIN_DEKORLAR, DIALOG_STYLE_TABLIST, "Dekor Düzenle", veriler, "Seç", "Kapat");
	return 1;
}

CMD:apos(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 6) return YetkinizYok(playerid);

	new veriler[256 * MAKSIMUM_BASLANGICPOS];
	format(veriler, sizeof(veriler), "Pos Ekle\t\n");
	for(new i = 0; i != MAKSIMUM_BASLANGICPOS; i ++) if(BaslangicPoslari[i][posKullanimda]) format(veriler, sizeof(veriler), "%s%s\n", veriler, BaslangicPoslari[i][pos_adi]);
	DialogGoster(playerid, DIALOG_BASLANGICPOSLARI, DIALOG_STYLE_TABLIST, "Baþlangýç Pozisyonlarý", veriler, "Seç", "Kapat");
	return 1;
}

CMD:dekor(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 4524.1831, 1788.9287, 108.3460)) return HataMesaji(playerid, "Dekor noktasýnda deðilsin.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0 || OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araç içerisinde kullanýlamaz.");

	new mesaj[144 * MAKSIMUM_EV], sayi = 0;
	format(mesaj, sizeof(mesaj), "ID\tAdres\n");
	for(new i = 0; i != MAKSIMUM_EV; i++) if(EvBilgi[i][evSahip] == OyuncuBilgi[playerid][oID])
	{
		format(mesaj, sizeof(mesaj), "%s{FFFFFF}%d\t%s\n", mesaj, i, EvBilgi[i][evAdres]);
		sayi++;
	}
	if(!sayi) return HataMesaji(playerid, "Eviniz olmadýðý için dekorlarý kullanamazsýnýz.");
	DialogGoster(playerid, DIALOG_DEKORLAR, DIALOG_STYLE_TABLIST_HEADERS, "Dekorlar - Ev Seç", mesaj, "Seç", "Kapat");
	return 1;
}

CMD:acctv(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 6) return YetkinizYok(playerid);

	new veriler[256 * MAKSIMUM_CCTV];
	format(veriler, sizeof(veriler), "Konum Ekle\n");
	for(new i = 0; i != MAKSIMUM_CCTV; i ++) if(CCTVVeri[i][cctvKullanimda]) {
		format(veriler, sizeof(veriler), "%s%s\n", veriler, CCTVVeri[i][cctvIsim]);
	}
	DialogGoster(playerid, DIALOG_ADMIN_CCTV, DIALOG_STYLE_LIST, "CCTV Düzenle", veriler, "Seç", "Kapat");
	return 1;
}

CMD:asuc(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 6) return YetkinizYok(playerid);

	new veriler[256 * MAKSIMUM_SUC];
	format(veriler, sizeof(veriler), "Suç\tDakika\nSuç Ekle\t\n");
	for(new i = 0; i != MAKSIMUM_SUC; i ++) if(SucListesi[i][sKullanimda]) {
		format(veriler, sizeof(veriler), "%s%s\t%d\n", veriler, SucListesi[i][sIsim], SucListesi[i][sDakika]);
	}
	DialogGoster(playerid, DIALOG_SUC_LISTESI, DIALOG_STYLE_TABLIST_HEADERS, "Liste Düzenle", veriler, "Seç", "Kapat");
	return 1;
}

CMD:ahurdaci(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 6) return YetkinizYok(playerid);

	new veriler[256 * MAKSIMUM_ARACLISTE];
	format(veriler, sizeof(veriler), "Araç Ekle\n");
	for(new i = 0; i != MAKSIMUM_ARACLISTE; i ++) if(AracHirsiz[i][hKullanimda]) {
		format(veriler, sizeof(veriler), "%s%s\n", veriler, AracModel(AracHirsiz[i][hModel]));
	}
	DialogGoster(playerid, DIALOG_HIRSIZLISTE, DIALOG_STYLE_LIST, "Liste Düzenle", veriler, "Seç", "Kapat");
	return 1;
}

CMD:yaris(playerid, params[])
{
	if(OyuncuBilgi[playerid][oBirlik] == -1 && OyuncuBilgi[playerid][oVIP] < 2) return HataMesaji(playerid, "Bir birlikte veya Altýn VIP+ deðilsin.");
	if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikOnay][5] == 0 && OyuncuBilgi[playerid][oVIP] < 2) return HataMesaji(playerid, "Birliðinin yarýþçý izini yok veya Altýn VIP+ deðilsin.");
	
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýnda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn.");
	if(Yaris_ID(playerid) != -1) {
		new icerik[512], id = Yaris_ID(playerid);
		format(icerik, sizeof(icerik), "Maksimum CP\t%d\nTur Sayýsý\t%d\nYarýþcýlar\t\nCheckPoint Düzenle\t\nOyuncu Davet\t\nBaþlat\t\nYarýþ Bitir\n", YarisBilgi[id][yarisMaksCP], YarisBilgi[id][yarisTur]);
        DialogGoster(playerid, DIALOG_YARIS, DIALOG_STYLE_TABLIST, "Yarýþ", icerik, "Seç", "Kapat");
        return 1;
	}
	DialogGoster(playerid, DIALOG_YARIS, DIALOG_STYLE_TABLIST, "Yarýþ", "Yarýþ Baþlat\n", "Seç", "Kapat");
	return 1;
}

CMD:hurdaci(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýnda bu komutu kullanamazsýn.");
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1863.6262, -1683.7197, 21.7500)) return HataMesaji(playerid, "Araç parçalama noktasýnda deðilsin.");
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");
    if(GetEngineStatus(GetPlayerVehicleID(playerid)) == 1) return HataMesaji(playerid, "Aracýn motoru açýkken bu komutu kullanamazsýn.");
    
	if(IsPlayerInAnyVehicle(playerid) && Arac_SahipKontrol(playerid, Arac_IDBul(GetPlayerVehicleID(playerid)))) {
	    if(OyuncuBilgi[playerid][oBirlikSQLID] == AracBilgi[Arac_IDBul(GetPlayerVehicleID(playerid))][aracBirlik]) return HataMesaji(playerid, "Birlik aracýný parçalatamazsýn.");
	    new fiyat = 0, mesaj[144];
	    for(new c = 0; c != sizeof(SatilikAraclar); c ++) if(SatilikAraclar[c][0] == GetVehicleModel(GetPlayerVehicleID(playerid))) { fiyat = SatilikAraclar[c][1] / 2; break; }
	    format(mesaj, sizeof(mesaj), "Sana ait %s model aracý %s fiyatýna parçalatacaksýn, onaylýyor musun?", AracModel(GetVehicleModel(GetPlayerVehicleID(playerid))), NumaraFormati(fiyat));
	    DialogGoster(playerid, DIALOG_ARACHURDA, DIALOG_STYLE_MSGBOX, "Araç Parçalatma", mesaj, "Evet", "Kapat");
	    return 1;
	}
    if(OyuncuBilgi[playerid][oMeslek] != 3) return HataMesaji(playerid, "Mekanik mesleðinde deðilsin.");
    if(OyuncuBilgi[playerid][oHirsizVIPTeslim] != 0) {
		HataMesaji(playerid, "Araç parçalatmak için %s beklemen gerekiyor.", ConvertTime(OyuncuBilgi[playerid][oHirsizVIPTeslim] - gettime()));
        return 1;
	}
	new sayi = 0, fiyat = 0, model = GetVehicleModel(GetPlayerVehicleID(playerid)), aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
	if(AracBilgi[aracid][aracBirlik] > 0) return HataMesaji(playerid, "Birlik araçlarý parçalatýlamaz.");
	for(new c = 0; c != sizeof(SatilikAraclar); c ++) if(SatilikAraclar[c][0] == model) {
		fiyat = SatilikAraclar[c][1] / 10, sayi++;
		break;
	}
	if(sayi == 0) return HataMesaji(playerid, "Altýndaki araç satýlýk listesinde deðil.");
	SunucuMesaji(playerid, "Aracý parçalatmaya baþladýn, %d saniye sürecek ve %s kazanacaksýn.", ARAC_PARCALATMA_SURE, NumaraFormati(fiyat));
	OyuncuBilgi[playerid][oHirsizSure] = ARAC_PARCALATMA_SURE;
	OyuncuBilgi[playerid][oHirsizArac] = GetPlayerVehicleID(playerid);
	return 1;
}

CMD:agps(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);

	new veriler[256 * MAKSIMUM_GPS];
	format(veriler, sizeof(veriler), "Konum Ekle\n");
	for(new i = 0; i != MAKSIMUM_GPS; i ++) if(GPSVeri[i][gpsKullanimda]) format(veriler, sizeof(veriler), "%s%s\n", veriler, GPSVeri[i][gpsIsim]);

	DialogGoster(playerid, DIALOG_ADMIN_GPS, DIALOG_STYLE_LIST, "GPS Düzenle", veriler, "Seç", "Kapat");
	return 1;
}

CMD:konumkabul(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGPS] == 0) return HataMesaji(playerid, "GPS Cihazýn yok.");
	if(OyuncuBilgi[playerid][oYaris] != -1) return HataMesaji(playerid, "Yarýþtayken bunu yapamazsýn.");
	if(OyuncuBilgi[playerid][oKamyoncu] != -1) return HataMesaji(playerid, "Yük taþýrken bunu yapamazsýn.");
    if(OyuncuBilgi[playerid][oTemizlikCP] > 0) return HataMesaji(playerid, "Temizlik yaparken bunu yapamazsýn.");
    // if(OyuncuBilgi[playerid][oMateryalTasiyor] == true) return HataMesaji(playerid, "Paket taþýrken bunu yapamazsýn.");
	if(OyuncuBilgi[playerid][oMarker] > -1) return HataMesaji(playerid, "Konum araþtýrýrken bunu yapamazsýn.");
	if(OyuncuBilgi[playerid][oKonum] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oAdres] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][objeLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oIsaretliMeslek] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballda bunu yapamazsýn.");
	
	new numara;
	if(sscanf(params, "d", numara)) return KullanimMesaji(playerid, "/konumkabul [telefon numarasý]");
	if(numara == 911 || numara == 0) return HataMesaji(playerid, "Geçersiz numara.");
	
	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oKonumGonderilme] > 0 && OyuncuBilgi[i][oKonumGonderilme] == OyuncuBilgi[playerid][oTelefonNumarasi] && OyuncuBilgi[i][oTelefonNumarasi] == numara) {
	    if(OyuncuBilgi[i][oPaintball] != -1) return HataMesaji(playerid, "Konum davetine ulaþýlamadý."), OyuncuBilgi[i][oKonumGonderilme] = 0;
		OyuncuBilgi[playerid][oIsaretliKonum] = numara;
		OyuncuBilgi[i][oKonumGonderilme] = 0;
		SendClientMessageEx(i, RENK_BEYAZ, "{5453AE}[KONUM] {FFFFFF}Konum davetiniz karþý taraf tarafýndan kabul edildi.");
		GetPlayerPos(i, OyuncuBilgi[i][oPos][0], OyuncuBilgi[i][oPos][1], OyuncuBilgi[i][oPos][2]);
		SetPlayerCheckpoint(playerid, OyuncuBilgi[i][oPos][0], OyuncuBilgi[i][oPos][1], OyuncuBilgi[i][oPos][2], 5.0);
        SendClientMessageEx(playerid, RENK_BEYAZ, "{5453AE}[KONUM] {FFFFFF}Talep kabul edildi, konumu haritandan görüntüleyebilirsin.");
		return 1;
	}
	HataMesaji(playerid, "Bu numaradan tarafýnýza bir konum iletilmemiþ.");
	return 1;
}

CMD:meslekbul(playerid, params[])
{
	if(OyuncuBilgi[playerid][oMarker] > -1) return HataMesaji(playerid, "Konum araþtýrýrken GPS açamazsýn.");
	if(OyuncuBilgi[playerid][oKonum] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oAdres] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][objeLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oIsaretliMeslek] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	
	new icerik[144 * MAKSIMUM_MESLEK];
	format(icerik, sizeof(icerik), "Ýsim\tKonum\n");
	for(new i = 0; i != MAKSIMUM_MESLEK; i++) if(MeslekBilgi[i][mKullanimda] == true && MeslekBilgi[i][mWorld] == 0 && MeslekBilgi[i][mInterior] == 0) {
	    format(icerik, sizeof(icerik), "%s%s\t%s\n", icerik, MeslekIsim(MeslekBilgi[i][mTur]), LokasyonBul(MeslekBilgi[i][mPos][0], MeslekBilgi[i][mPos][1], MeslekBilgi[i][mPos][2]));
	}
	DialogGoster(playerid, DIALOG_MESLEKBUL, DIALOG_STYLE_TABLIST_HEADERS, "Meslek Arama", icerik, "Ýþaretle", "Kapat");
	return 1;
}

CMD:gps(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGPS] == 0 && OyuncuBilgi[playerid][oTelefon] == 0) return HataMesaji(playerid, "Telefonun veya GPS cihazýn yok.");
	if(OyuncuBilgi[playerid][oYaris] != -1) return HataMesaji(playerid, "Yarýþtayken GPS açamazsýn.");
	if(OyuncuBilgi[playerid][oKamyoncu] != -1) return HataMesaji(playerid, "Yük taþýrken GPS açamazsýn.");
    if(OyuncuBilgi[playerid][oTemizlikCP] > 0) return HataMesaji(playerid, "Temizlik yaparken GPS açamazsýn.");
    // if(OyuncuBilgi[playerid][oMateryalTasiyor] == true) return HataMesaji(playerid, "Paket taþýrken GPS açamazsýn.");
	if(OyuncuBilgi[playerid][oMarker] > -1) return HataMesaji(playerid, "Konum araþtýrýrken GPS açamazsýn.");
	if(OyuncuBilgi[playerid][oKonum] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oAdres] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][objeLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oIsaretliMeslek] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");

	DialogGoster(playerid, DIALOG_GPS, DIALOG_STYLE_LIST, "GPS", "Adres Bulma\nKonum Gönder\nKayýtlý Lokasyonlar\nEn Yakýnýmdakiler Servisi\nBenim Lokasyonlarým\nAraç Bulma", "Seç", "Kapat");
	return 1;
}

CMD:raf(playerid, params[])
{
	new id = Raf_Yakin(playerid);
	if(id == -1) return HataMesaji(playerid, "Herhangi bir rafa yakýn deðilsin.");
	foreach(new i : Player) if(i != playerid && OyuncuBilgi[i][oRaf] == id) return HataMesaji(playerid, "Bu raf baþkasý tarafýndan kullanýlýyor.");
    new evid = Oyuncu_Evde(playerid);
	if(evid > -1) {
		if(Ev_SahipKontrol(playerid, evid) || Ev_AnahtarKontrol(playerid, evid)) {
			if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) return HataMesaji(playerid, "Bu birlik türü bu iþlemi yapamaz.");

			return Raf_SilahListele(playerid, id);
		}
		else if(!Ev_SahipKontrol(playerid, evid) && !Ev_AnahtarKontrol(playerid, evid) && OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) {
			if(OyuncuBilgi[playerid][oIsbasi] == false) return HataMesaji(playerid, "Bu iþlemi yapabilmek için iþbaþýnda olmalýsýn.");
			
			return Raf_SilahListele(playerid, id);
		}
	}
	new binaid = Oyuncu_Binada(playerid);
	if(binaid > -1) {
		if(Bina_SahipKontrol(playerid, binaid) || Bina_AnahtarKontrol(playerid, binaid)) {
			if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) return HataMesaji(playerid, "Bu birlik türü bu iþlemi yapamaz.");

			return Raf_SilahListele(playerid, id);
		}
		else if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && !Bina_SahipKontrol(playerid, binaid) && !Bina_AnahtarKontrol(playerid, binaid)) {
			if(OyuncuBilgi[playerid][oIsbasi] == false) return HataMesaji(playerid, "Bu iþlemi yapabilmek için iþbaþýnda olmalýsýn.");

			return Raf_SilahListele(playerid, id);
		}
	}
	HataMesaji(playerid, "Bu ev veya bina senin deðil.");
	return 1;
}

CMD:tedaviet(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL && !OyuncuBilgi[playerid][oAdmin]) return HataMesaji(playerid, "Medikal görevlisi deðilsin.");
	new id;
	if(sscanf(params, "u", id)) return KullanimMesaji(playerid, "/tedaviet [ID / Oyuncu]");
	if(!IsPlayerConnected(id)) return HataMesaji(playerid, "Girilen oyuncu geçersiz.");
	if(!YakinlikKontrol(playerid, id, 5.0)) return HataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");
	if(OyuncuBilgi[id][oYarali] == 0) return HataMesaji(playerid, "Kiþi yaralý deðil.");
	if(OyuncuBilgi[id][oYaraliSure] > 0) return HataMesaji(playerid, "Kiþinin yaralý süresi bitmeden bu komutu kullanamazsýn.");
	foreach(new i : Player) if(OyuncuBilgi[i][oIlkYardimYapilan] == id) return HataMesaji(playerid, "Kiþiye ilkyardým yapýlýrken bu komutu kullanamazsýnýz.");

	OyuncuBilgi[id][oYarali] = 0, BayginlikBitir(id);
	CanDuzenle(id, 100);
	SunucuMesaji(id, "Tedavi iþlemi baþarýlý, artýk tamamen iyileþtin. Saðlýðýna dikkat et.");
	SunucuMesaji(playerid, "Kiþiyi baþarýyla iyileþtirdin.");
	return 1;
}

CMD:tedaviol(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, -28.7558, 152.2807, 999.0613)) return HataMesaji(playerid, "Tedavi olma noktasýnda deðilsin.");
	if(OyuncuBilgi[playerid][oYarali] == 0) return HataMesaji(playerid, "Yaralý deðilsin.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralý süren bitmeden bu komutu kullanamazsýn.");
	new gerekliucret = 0;
	switch(OyuncuBilgi[playerid][oVIP]) {
	    case 1: gerekliucret = 300;
	    case 2: gerekliucret = 200;
	    case 3: gerekliucret = 0;
	    default: gerekliucret = 400;
	}
	if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) gerekliucret = 0;
	if(gerekliucret > 0 && OyuncuBilgi[playerid][oPara] < gerekliucret) {
		HataMesaji(playerid, "Tedavi için yeterli paran yok. (%s)", NumaraFormati(gerekliucret));
		return 1;
	}
	foreach(new i : Player) if(OyuncuBilgi[i][oIlkYardimYapilan] == playerid) return HataMesaji(playerid, "Sana ilk yardým yapýlýrken bu komutu kullanamazsýn.");

	OyuncuBilgi[playerid][oYarali] = 0, BayginlikBitir(playerid);
	CanDuzenle(playerid, 100);
	ParaEkle(playerid, -gerekliucret);
	SunucuMesaji(playerid, "Tedavi iþlemi baþarýlý, artýk tamamen iyileþtin ve taburcu oldun. Saðlýðýna dikkat et.");
	return 1;
}

CMD:hastateslim(playerid, params[])
{
	if(OyuncuBilgi[playerid][oBirlik] == -1 || OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL) return HataMesaji(playerid, "LSPD veya LSFMD üyesi deðilsin.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1135.9270, -1333.9471, 13.6847)) return HataMesaji(playerid, "Hasta Teslim noktasýnda deðilsin.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oIlkYardimYapilan] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Ýlk yardým yaparken bu komutu kullanamazsýn.");
	if(MaymuncukVeri[playerid][mSaniye] > 0) return HataMesaji(playerid, "Maymuncuk kullanýrken bu komutu kullanamazsýn.");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/hastateslim [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen oyuncu geçersiz.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return HataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");
	if(OyuncuBilgi[oyuncuid][oYaraliSure] > 0) return HataMesaji(playerid, "Oyuncu yerde yaralý, lütfen öncelikle ilk yardým yapýn.");
	if(OyuncuBilgi[oyuncuid][oYarali] == 0) return HataMesaji(playerid, "Oyuncu yaralý deðil.");

	SetPlayerInterior(oyuncuid, 1);
	SetPlayerVirtualWorld(oyuncuid, oyuncuid);
	OyuncuPosDegistir(oyuncuid, 1973.3918, 1154.0151, -4.4788);
	SetPlayerFacingAngle(oyuncuid, 0);
	OyuncuBilgi[oyuncuid][oKontrol] = false;
	TogglePlayerControllable(oyuncuid, false);
	OyuncuBilgi[oyuncuid][oYarali] = 0;
	UyariMesaji(oyuncuid, "%s tarafýndan hastaneye teslim edildin, tedavi süren bittiðinde ayaða kalkacaksýn. (Son 60 dakikayý hatýrlamýyorsun.)", OyuncuIsim(playerid));

	ApplyAnimation(oyuncuid, "CRACK", "crckidle1", 4.1, 0, 1, 1, 1, 0, 1);
	OyuncuBilgi[oyuncuid][oTedaviSure] = 30;
	return 1;
}

CMD:ilkyardim(playerid, params[])
{
	if(OyuncuBilgi[playerid][oIlkYardim] < 1) return HataMesaji(playerid, "Ýlk yardým kitin yok.");
	if(OyuncuBilgi[playerid][oIlkYardimYapilan] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Zaten þu an ilk yardým uyguluyorsun, biraz bekle.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken ilk yardým yapamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýnda bu komutu kullanamazsýn.");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/ilkyardim [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen oyuncu geçersiz.");
	if(!YakinlikKontrol(playerid, oyuncuid, 4.0)) return HataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");

	if(OyuncuBilgi[oyuncuid][oYaraliSure]) {
		if(OyuncuBilgi[oyuncuid][oYaraliSure] < 40) return HataMesaji(playerid, "Oyuncunun yaralý süresi bitmek üzere.");

		OyuncuBilgi[playerid][oIlkYardimSure] = ILK_YARDIM_SURE;
		OyuncuBilgi[playerid][oIlkYardimYapilan] = oyuncuid;
		AnimOynat2(playerid, "MEDIC", "CPR", 4.0, 1, 0, 0, 0, 0, 1);
		new emote[64], log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], hedef_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		GetPlayerName(oyuncuid, hedef_isim, sizeof(hedef_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(SID: %d), %s(SID: %d) adlý kiþiye ilk yardým yaptý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], hedef_isim, OyuncuBilgi[oyuncuid][oID]);
		Gunluk_LogKaydet(log_icerik);
		format(emote, sizeof(emote), "%s adlý kiþiye ilk yardým yapýyor.", OyuncuIsim(oyuncuid));
		cmd_ame(playerid, emote);
		return 1;
	}
	if(OyuncuCan(oyuncuid) >= 100) return HataMesaji(playerid, "Kiþinin ilk yardýma ihtiyacý yok.");
	OyuncuBilgi[playerid][oIlkYardimSure] = ILK_YARDIM_SURE;
	OyuncuBilgi[playerid][oIlkYardimYapilan] = oyuncuid;
	AnimOynat2(playerid, "BD_FIRE", "wash_up", 4.0, 1, 0, 0, 0, 0, 1);
	new emote[64];
	if(oyuncuid != playerid) format(emote, sizeof(emote), "%s adlý kiþiye ilk yardým yapýyor.", OyuncuIsim(oyuncuid));
	else if(oyuncuid == playerid) format(emote, sizeof(emote), "kendine ilk yardým yapýyor.");
	cmd_ame(playerid, emote);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], hedef_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	GetPlayerName(oyuncuid, hedef_isim, sizeof(hedef_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(SID: %d), %s(SID: %d) adlý kiþiye ilk yardým yaptý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], hedef_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:maske(playerid, params[])
{
	if(OyuncuBilgi[playerid][oBirlik] != -1 && OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && OyuncuBilgi[playerid][oBirim] != 0) {
		for(new i = 0; i != MAKSIMUM_BIRIM; i ++) if(BirimBilgi[i][birimID] == OyuncuBilgi[playerid][oBirim])
			if(!!strcmp(BirimBilgi[i][birimAd], "DET", true) && !!strcmp(BirimBilgi[i][birimAd], "SWAT", true)) if(!OyuncuBilgi[playerid][oMaske]) return HataMesaji(playerid, "Maske kullanýmý ürünün olmadýðý için bu komutu kullanamazsýn.");
	}
	else if(!OyuncuBilgi[playerid][oMaske]) return HataMesaji(playerid, "Maske kullanýmý ürünün olmadýðý için bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] == 1) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	switch(OyuncuBilgi[playerid][oMaskeDurum])
	{
		case 0:
		{
		    cmd_ame(playerid, "maskesini yüzüne geçirir.");
		    OyuncuBilgi[playerid][oMaskeDurum] = 1;
		}
		case 1:
		{
		    OyuncuBilgi[playerid][oMaskeDurum] = 0;
		    cmd_ame(playerid, "maskesini yüzünden çýkarýr.");
		}
	}
	IsimLabelGuncelle(playerid);
	return 1;
}

CMD:maskecikar(playerid, params[])
{
	new maskeid, oyuncuid = INVALID_PLAYER_ID;
    if(sscanf(params, "d", maskeid)) return KullanimMesaji(playerid, "/maskecikar [maske id]");

	foreach(new i : Player) if(OyuncuBilgi[i][oMaskeID] == maskeid) oyuncuid = i;
    if(!IsPlayerConnected(oyuncuid) || oyuncuid == INVALID_PLAYER_ID) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
    if(oyuncuid == playerid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");
	if(!YakinlikKontrol(playerid, oyuncuid, 4.0)) return HataMesaji(playerid, "Oyuncuya yakýn deðilsin.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(OyuncuBilgi[oyuncuid][oMaskeDurum] == 0) return HataMesaji(playerid, "Oyuncu zaten maske takmamýþ.");
	if(OyuncuBilgi[oyuncuid][oKelepceli] != 1 && OyuncuBilgi[oyuncuid][oYaraliSure] < 1 && OyuncuBilgi[playerid][oDonduruldu] == 0) return HataMesaji(playerid, "Girilen oyuncu yaralý veya etkisiz halde deðil, komut üzerinde kullanýlamaz.");

	OyuncuBilgi[oyuncuid][oMaskeDurum] = 0;
	IsimLabelGuncelle(oyuncuid);
	new emote[64];
	format(emote, sizeof(emote), "%s adlý kiþinin maskesini yüzünden çýkartýr.", OyuncuIsim(oyuncuid));
	cmd_ame(playerid, emote);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], hedef_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	GetPlayerName(oyuncuid, hedef_isim, sizeof(hedef_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(SID: %d), %s(SID: %d) adlý kiþinin maskesini çýkardý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], hedef_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:maskeliler(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

    new isim[MAX_PLAYER_NAME + 1];
	foreach(new i : Player) if(OyuncuBilgi[i][oMaskeDurum]) {
		GetPlayerName(i, isim, sizeof(isim));

		for(new s = 0, len = strlen(isim); s < len; s ++) if(isim[s] == '_') isim[s] = ' ';
		SunucuMesaji(playerid, "Maske ID: %d | Ýsim: %s | Level: %d", OyuncuBilgi[i][oMaskeID], isim, OyuncuBilgi[i][oSeviye]);
	}
	return 1;
}

CMD:maskeid(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new maskeid;
	if(sscanf(params, "d", maskeid)) return KullanimMesaji(playerid, "/maskeid [maske id]");

	new sorgu[512];
	format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE MaskeID = '%d'", maskeid);
	mysql_tquery(mysqlB, sorgu, "Maske_Isim", "d", playerid);
	return 1;
}

CMD:bidon(playerid, params[])
{
	if(OyuncuBilgi[playerid][oBidon] == 0) return HataMesaji(playerid, "Benzin bidonun yok.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn");
	if(OyuncuBilgi[playerid][oBenzinDolduruyor] > -1) return HataMesaji(playerid, "Bidonla þu an iþlem yapýyorsunuz.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bidon araç içerisinde kullanýlamaz.");

	new mesaj[256], baslik[32];
	format(baslik, sizeof(baslik), "Benzin Bidonu (Doluluk: %d/10)", OyuncuBilgi[playerid][oBidonBenzin]);
	format(mesaj, sizeof(mesaj), "%sAraca Doldur", (Pompa_Yakin(playerid) == -1) ? ("") : ("Bidonu Doldur\n"));
	DialogGoster(playerid, DIALOG_BIDON, DIALOG_STYLE_TABLIST, baslik, mesaj, "Seç", "Kapat");
	return 1;
}

CMD:benzinal(playerid, params[])
{
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araç dýþýnda kullanýlamaz.");
	if(Pompa_Yakin(playerid) == -1) return HataMesaji(playerid, "Bir benzinliðe yakýn deðilsin.");
	if(GetEngineStatus(GetPlayerVehicleID(playerid)) == 1) return HataMesaji(playerid, "Önce aracýn motorunu kapatmalýsýn.");
	if(OyuncuBilgi[playerid][oMotorCalistir]) return HataMesaji(playerid, "Aracýn motorunu çalýþtýrýrken benzin alamazsýn.");
	if(OyuncuBilgi[playerid][oBenzinAliyor] != -1) return HataMesaji(playerid, "Zaten þu anda benzin alýyorsun.");
	new id = Arac_IDBul(GetPlayerVehicleID(playerid));
	if(Arac_SahipKontrol(playerid, id) || Arac_Anahtar(playerid, id) || AracBilgi[id][aracBirlik] > 0 && OyuncuBilgi[playerid][oBirlikSQLID] == AracBilgi[id][aracBirlik])
	{
	    if(AracBilgi[id][aracBenzin] > 99.9) return HataMesaji(playerid, "Daha fazla benzin alamazsýn.");
	    OyuncuBilgi[playerid][oBenzinAliyor] = Pompa_Yakin(playerid);
        for(new i = 0; i < MAKSIMUM_ISYERI; i++) if(BenzinPompasi[Pompa_Yakin(playerid)][pompaIsyeri] == IsyeriBilgi[i][isyeriID]) OyuncuBilgi[playerid][oBenzinIsyeri] = i;
		SetTimerEx("Benzin_Al", 500, false, "id", playerid, id);
		SunucuMesaji(playerid, "Benzin almaya baþladýn, durdurmak için \"/benziniptal\" yazýn.");
	}
	else HataMesaji(playerid, "Bu aracýn anahtarý sende yok, benzin alamazsýn.");
	return true;
}

CMD:benziniptal(playerid, params[]) {
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araç dýþýnda kullanýlamaz.");
	if(OyuncuBilgi[playerid][oBenzinAliyor] == -1) return HataMesaji(playerid, "Benzin almadýðýn için iptal edemezsin.");
	new id = Arac_IDBul(GetPlayerVehicleID(playerid));
	if(Arac_SahipKontrol(playerid, id) || Arac_Anahtar(playerid, id) || AracBilgi[id][aracBirlik] > 0 && OyuncuBilgi[playerid][oBirlikSQLID] == AracBilgi[id][aracBirlik])
	{
		OyuncuBilgi[playerid][oBenzinAliyor] = -1;
		OyuncuBilgi[playerid][oBenzinIsyeri] = -1;
	    SunucuMesaji(playerid, "Benzin alma iþlemini durdurdunuz.");
	}
	else HataMesaji(playerid, "Bu aracýn anahtarý sende yok, müdahele edemezsin.");
	return true;
}

CMD:cezakes(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");

	new oyuncuid, ceza, sebep[64];
	if(sscanf(params, "udS()[64]", oyuncuid, ceza, sebep)) return KullanimMesaji(playerid, "/cezakes [ID / Oyuncu] [miktar] [ceza nedeni]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Belirtilen oyuncu aktif deðil.");
	if(!YakinlikKontrol(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");
	if(OyuncuBilgi[oyuncuid][oGiris] == false) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, ceza kesemezsin.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Kendine ceza kesemezsin.");
	if(ceza < 1 || ceza > MAKSIMUM_CEZA) {
		HataMesaji(playerid, "Ceza miktarý en az $1, en fazla %s olmalýdýr.", NumaraFormati(MAKSIMUM_CEZA));
		return 1;
	}
	if(isnull(sebep)) return HataMesaji(playerid, "Ceza nedeni boþ býrakýlamaz.");
 	if(!strcmp(sebep, ".", true)) return HataMesaji(playerid, "Sebep \".\" olamaz.");
 	if(!strcmp(sebep, "Yok", true)) return HataMesaji(playerid, "Sebep \"Yok\" olamaz.");

	new id = Ceza_Ekle(oyuncuid, ceza, sebep, OyuncuIsim(playerid)), emote[64 + MAX_PLAYER_NAME];
	if(id == 0) return HataMesaji(playerid, "Ceza yazýlamadý, tekrar deneyin.");

    SunucuMesaji(playerid, "%s adlý oyuncuya %s para cezasý yazdýn, sebep: %s", OyuncuIsim(oyuncuid), NumaraFormati(ceza), sebep);
    SunucuMesaji(oyuncuid, "%s adlý memur sana %s para cezasý yazdý, sebep: %s", OyuncuIsim(playerid), NumaraFormati(ceza), sebep);
	format(emote, sizeof(emote), "bir makbuz ve kalem çýkarýr, doldurup %s adlý kiþiye verir.", OyuncuIsim(oyuncuid));
	cmd_ame(playerid, emote);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], hedef_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	GetPlayerName(oyuncuid, hedef_isim, sizeof(hedef_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(SID: %d), %s(SID: %d) adlý kiþiye ceza yazdý. (miktar: %s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], hedef_isim, OyuncuBilgi[oyuncuid][oID], NumaraFormati(ceza));
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/mdc.txt", "%s", log_icerik);
	return 1;
}

CMD:cezalarim(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false || OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	new isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, isim, sizeof(isim));

	for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
	CezaGoster(playerid, isim);
	return 1;
}

CMD:oyuncuduzenle(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);

	new oyuncuid, tip[32], miktar[144];
	if(sscanf(params, "us[32]S()[144]", oyuncuid, tip, miktar))
 	{
	 	KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [adlar]");
	 	SendClientMessage(playerid, RENK_SARI, "[ADLAR]:{FFFFFF} cinsiyet, dilsifirla, uyusturucu, oynamasaati, tohum, slisans, tamirkiti, tenrengi, silahhakki");
	 	SendClientMessage(playerid, RENK_SARI, "[ADLAR]:{FFFFFF} uyari, dakika, maymuncuk, kamyoncu, imadde, tnumara, yaralisure, ilkyardim, gaspsifirla");
	 	SendClientMessage(playerid, RENK_SARI, "[ADLAR]:{FFFFFF} govde, namlu, hazne, ruhsat");
	 	if(OyuncuBilgi[playerid][oAdmin] >= 7) SendClientMessage(playerid, RENK_SARI, "[ADLAR]:{7a8a9a} kslot, hediyesaati, hitman, bankapara, uboost, 2xpayday, vpoint");
		return true;
	}
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Belirtilen oyuncu aktif deðil.");
	if(oyuncuid == playerid && !IsPlayerAdmin(playerid) && OyuncuBilgi[playerid][oAdmin] < 7) return HataMesaji(playerid, "Kendi bilgilerini deðiþtiremezsin.");
	if(!strcmp(tip, "cinsiyet", true))
	{
		switch(OyuncuBilgi[oyuncuid][oCinsiyet]) {
		    case 1: OyuncuBilgi[oyuncuid][oCinsiyet] = 2;
		    case 2: OyuncuBilgi[oyuncuid][oCinsiyet] = 1;
		}
		SunucuMesaji(playerid, "%s adlý oyuncunun cinsiyetini \"%s\" olarak deðiþtirdin.", OyuncuIsim(oyuncuid), (OyuncuBilgi[oyuncuid][oCinsiyet] == 1) ? ("Erkek") : ("Kadýn"));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin cinsiyetini deðiþtirdi. (%s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], (OyuncuBilgi[oyuncuid][oCinsiyet] == 1) ? ("Erkek") : ("Kadýn"));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "tenrengi", true))
	{
		switch(OyuncuBilgi[oyuncuid][oTenRengi]) {
		    case 1: OyuncuBilgi[oyuncuid][oTenRengi] = 2;
		    case 2: OyuncuBilgi[oyuncuid][oTenRengi] = 1;
		}
		SunucuMesaji(playerid, "%s adlý oyuncunun ten rengini \"%s\" olarak deðiþtirdin.", OyuncuIsim(oyuncuid), (OyuncuBilgi[oyuncuid][oTenRengi] == 1) ? ("Beyaz") : ("Siyah"));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin ten rengini deðiþtirdi. (%s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], (OyuncuBilgi[oyuncuid][oTenRengi] == 1) ? ("Beyaz") : ("Siyah"));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "hitman", true) && OyuncuBilgi[playerid][oAdmin] >= 7)
	{
	    new uyari[48 + MAX_PLAYER_NAME];
		if(OyuncuBilgi[oyuncuid][oHitman] < 2) OyuncuBilgi[oyuncuid][oHitman] = 2, format(uyari, sizeof(uyari), "%s adlý oyuncu hitman lideri yapýldý.", OyuncuIsim(oyuncuid));
		else OyuncuBilgi[oyuncuid][oHitman] = 0, format(uyari, sizeof(uyari), "%s adlý oyuncu hitman kadrosundan çýkarýldý.", OyuncuIsim(oyuncuid));

		SunucuMesaji(playerid, "%s", uyari);
	}
	else if(!strcmp(tip, "ruhsat", true))
	{
		switch(OyuncuBilgi[oyuncuid][oRuhsat]) {
		    case 1: OyuncuBilgi[oyuncuid][oRuhsat] = 0;
		    case 0: OyuncuBilgi[oyuncuid][oRuhsat] = 1;
		}
		SunucuMesaji(playerid, "%s adlý oyuncunun silah ruhsatýný \"%s\" olarak deðiþtirdin.", OyuncuIsim(oyuncuid), (OyuncuBilgi[oyuncuid][oRuhsat] == 1) ? ("Mevcut") : ("Yok"));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin silah ruhsatýný deðiþtirdi. (%s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], (OyuncuBilgi[oyuncuid][oRuhsat] == 1) ? ("Mevcut") : ("Yok"));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	/*else if(!strcmp(tip, "govde", true))
	{
	    if(isnull(miktar)) return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [govde] [yeni adet]");

		OyuncuBilgi[oyuncuid][oGovde] = strval(miktar);
		SunucuMesaji(playerid, "%s adlý oyuncunun gövde sayýsýný %d olarak deðiþtirdin.", OyuncuIsim(oyuncuid), strval(miktar));
		SunucuMesaji(oyuncuid, "%s adlý yetkili silah gövdesi sayýný %d olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], strval(miktar));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin silah gövdesi sayýsýný deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], strval(miktar));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "namlu", true))
	{
	    if(isnull(miktar)) return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [namlu] [yeni adet]");

		OyuncuBilgi[oyuncuid][oNamlu] = strval(miktar);
		SunucuMesaji(playerid, "%s adlý oyuncunun namlu sayýsýný %d olarak deðiþtirdin.", OyuncuIsim(oyuncuid), strval(miktar));
		SunucuMesaji(oyuncuid, "%s adlý yetkili silah namlusu sayýný %d olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], strval(miktar));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin silah namlusu sayýsýný deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], strval(miktar));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "hazne", true))
	{
	    if(isnull(miktar)) return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [hazne] [yeni adet]");

		OyuncuBilgi[oyuncuid][oHazne] = strval(miktar);
		SunucuMesaji(playerid, "%s adlý oyuncunun hazne sayýsýný %d olarak deðiþtirdin.", OyuncuIsim(oyuncuid), strval(miktar));
		SunucuMesaji(oyuncuid, "%s adlý yetkili silah haznesi sayýný %d olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], strval(miktar));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin silah haznesi sayýsýný deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], strval(miktar));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}*/
	else if(!strcmp(tip, "yaralisure", true))
	{
	    if(OyuncuBilgi[oyuncuid][oYaraliSure] == 0) return HataMesaji(playerid, "Oyuncu yaralý deðil.");
	    if(isnull(miktar)) return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [yaralisure] [yarali süre]");

		OyuncuBilgi[oyuncuid][oYaraliSure] = strval(miktar);
		SunucuMesaji(playerid, "%s adlý oyuncunun yaralý süresi %d saniye olarak deðiþtirildi.", OyuncuIsim(oyuncuid), strval(miktar));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin yaralý süresini deðiþtirdi. (%d sn)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], strval(miktar));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "bankapara", true) && OyuncuBilgi[playerid][oAdmin] >= 7)
	{
	    if(isnull(miktar)) return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [banka] [Yeni bakiye]");

		OyuncuBilgi[oyuncuid][oBankaPara] = strval(miktar);
		SunucuMesaji(playerid, "%s adlý oyuncunun banka bakiyesini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(strval(miktar)));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin bankasýndaki parayý deðiþtirdi. (%s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], NumaraFormati(strval(miktar)));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/para.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "oynamasaati", true))
	{
	    if(isnull(miktar))
	        return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [oynamasaati] [Deðer]");

		OyuncuBilgi[oyuncuid][oOynamaSaati] = strval(miktar);
		SunucuMesaji(playerid, "%s adlý oyuncunun oynama saatini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(strval(miktar), ""));
		OyuncuBilgi[oyuncuid][oExp] = strval(miktar);
		OyuncuBilgi[oyuncuid][oSeviye] = 1;
		SetTimerEx("levelsenk", 1, false, "i", oyuncuid);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin oynama saatini deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], strval(miktar));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "hediyesaati", true) && OyuncuBilgi[playerid][oAdmin] >= 7)
	{
	    if(isnull(miktar)) return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [hediyesaati] [Deðer]");
		if(strval(miktar) < 0 || strval(miktar) > 5) return HataMesaji(playerid, "0-5 arasýnda hediye saati verebilirsin.");
		OyuncuBilgi[oyuncuid][oHediye] = strval(miktar);
		SunucuMesaji(playerid, "%s adlý oyuncunun hediye saatini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(strval(miktar), ""));
		
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) hediye saatini deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], strval(miktar));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "dakika", true))
	{
	    if(isnull(miktar)) return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [dakika] [Deðer]");

		OyuncuBilgi[oyuncuid][oDakika] = strval(miktar);
		SunucuMesaji(playerid, "%s adlý oyuncunun oyunda kalma dakikasýný %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(strval(miktar), ""));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin dakikasýný deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], strval(miktar));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "gaspsifirla", true))
	{
	    if(OyuncuBilgi[oyuncuid][oGaspSure] == 0) return HataMesaji(playerid, "Oyuncunun ikinci dili yok.");

		OyuncuBilgi[oyuncuid][oGaspSure] = 0;
		SunucuMesaji(playerid, "%s adlý kiþinin gasp süresini sýfýrladýn.", OyuncuIsim(oyuncuid));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin gasp süresini sýfýrladý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "dilsifirla", true))
	{
	    if(OyuncuBilgi[oyuncuid][oEkstraDil] == -1) return HataMesaji(playerid, "Oyuncunun ikinci dili yok.");

		OyuncuBilgi[oyuncuid][oEkstraDil] = -1;
		SunucuMesaji(playerid, "%s adlý oyuncunun dilini sýfýrladýn.", OyuncuIsim(oyuncuid));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin ikinci dilini sýfýrladý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "silahhakki", true))
	{
	    new miktar2;
	    if(sscanf(miktar, "d", miktar2)) return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [silahhakki] [yeni miktar]");

		if(miktar2 < 0) return HataMesaji(playerid, "Girilen miktar en az 0 olmalýdýr.");
		OyuncuBilgi[oyuncuid][oSilahHakki] = miktar2;
		SunucuMesaji(playerid, "%s adlý kiþinin silah hakkýný %d olarak deðiþtirdin.", OyuncuIsim(oyuncuid), miktar2);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin silah hakkýný deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], miktar2);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "kamyoncu", true))
	{
	    new miktar2;
	    if(sscanf(miktar, "d", miktar2))
	        return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [kteslimat] [yeni miktar]");

		if(miktar2 < 0) return HataMesaji(playerid, "Girilen miktar en az 0 olmalýdýr.");
		OyuncuBilgi[oyuncuid][oKamyoncuTeslimat] = miktar2;
		SunucuMesaji(playerid, "%s adlý kiþinin kamyoncu teslimatýný %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(miktar2, ""));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin kamyoncu teslimatýný deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], miktar2);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "tamirkiti", true))
	{
	    new miktar2;
	    if(sscanf(miktar, "d", miktar2)) return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [tamirkiti] [yeni miktar]");

		if(miktar2 < 0 || miktar2 > 3) return HataMesaji(playerid, "Girilen miktar en az 0 olmalýdýr, en fazla 3 olmalýdýr.");
		OyuncuBilgi[oyuncuid][oTamirKiti] = miktar2;
		SunucuMesaji(playerid, "%s adlý kiþinin tamir kitini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(miktar2, ""));
		SunucuMesaji(oyuncuid, "%s adlý yetkili tamir kitini %s olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], NumaraFormati(miktar2, ""));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin tamir kitini deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], miktar2);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "ilkyardim", true))
	{
	    new miktar2;
	    if(sscanf(miktar, "d", miktar2))
	        return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [ilkyardim] [yeni miktar]");

		if(miktar2 < 0 || miktar2 > 3) return HataMesaji(playerid, "Girilen miktar en az 0 olmalýdýr, en fazla 3 olmalýdýr.");
		OyuncuBilgi[oyuncuid][oIlkYardim] = miktar2;
		SunucuMesaji(playerid, "%s adlý kiþinin ilk yardým kitini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(miktar2, ""));
		SunucuMesaji(oyuncuid, "%s adlý yetkili ilk yardým kitini %s olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], NumaraFormati(miktar2, ""));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin ilk yardým kitini deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], miktar2);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "imadde", true))
	{
	    new miktar2;
	    if(sscanf(miktar, "d", miktar2))
	        return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [imadde] [yeni miktar]");

		if(miktar2 < 0) return HataMesaji(playerid, "Girilen miktar en az 0 olmalýdýr.");
		OyuncuBilgi[oyuncuid][oIslenmemisMadde] = miktar2;
		SunucuMesaji(playerid, "%s adlý kiþinin iþlenmemiþ maddesini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(miktar2, ""));
		SunucuMesaji(oyuncuid, "%s adlý yetkili iþlenmemiþ maddesini %s olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], NumaraFormati(miktar2, ""));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin iþlenmemiþ maddesini deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], miktar2);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "uyusturucu", true))
	{
	    new miktar2;
	    if(sscanf(miktar, "d", miktar2))
	        return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [uyusturucu] [yeni miktar]");

		if(miktar2 < 0) return HataMesaji(playerid, "Girilen miktar en az 0 olmalýdýr.");
		OyuncuBilgi[oyuncuid][oUyusturucu] = miktar2;
		SunucuMesaji(playerid, "%s adlý kiþinin uyuþturucu sayýsýný %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(miktar2, ""));
		SunucuMesaji(oyuncuid, "%s adlý yetkili uyuþturucu sayýný %s olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], NumaraFormati(miktar2, ""));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin uyuþturucusunu deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], miktar2);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "maymuncuk", true))
	{
	    new maymuncuk;
	    if(sscanf(miktar, "d", maymuncuk))
	        return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [maymuncuk] [yeni miktar]");

		if(maymuncuk < 0) return HataMesaji(playerid, "Girilen miktar en az 0 olmalýdýr.");
		OyuncuBilgi[oyuncuid][oMaymuncuk] = maymuncuk;
		SunucuMesaji(playerid, "%s adlý kiþinin maymuncuk sayýsýný %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(maymuncuk, ""));
		SunucuMesaji(oyuncuid, "%s adlý yetkili maymuncuk sayýný %s olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], NumaraFormati(maymuncuk, ""));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin maymuncuk sayýsýný deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], maymuncuk);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "tnumara", true))
	{
	    if(OyuncuBilgi[oyuncuid][oTelefon] == 0) return HataMesaji(playerid, "Bu oyuncunun telefonu yok, numarasý deðiþtirilemez.");

	    new numara;
	    if(sscanf(miktar, "d", numara)) return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [tnumara] [yeni numara]");

		if(numara < 100000 || numara > 999999) return HataMesaji(playerid, "Girilen numara en az 6 haneli olmalýdýr.");
		OyuncuBilgi[oyuncuid][oTelefonNumarasi] = numara;
		SunucuMesaji(playerid, "%s adlý kiþinin numarasýný %d olarak deðiþtirdin.", OyuncuIsim(oyuncuid), numara);
		SunucuMesaji(oyuncuid, "%s adlý yetkili tarafýndan numaran %d olarak deðiþtirildi.", OyuncuBilgi[playerid][oAdminNick], numara);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin numarasýný deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], numara);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	/*else if(!strcmp(tip, "materyal", true))
	{
	    new materyal;
	    if(sscanf(miktar, "d", materyal)) return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [materyal] [yeni miktar]");

		if(materyal < 0) return HataMesaji(playerid, "Girilen miktar en az 0 olmalýdýr.");
		OyuncuBilgi[oyuncuid][oMateryal] = materyal;
		SunucuMesaji(playerid, "%s adlý kiþinin materyal sayýsýný %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(materyal, ""));
		SunucuMesaji(oyuncuid, "%s adlý yetkili materyal sayýný %s olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], NumaraFormati(materyal, ""));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin materyalini deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], materyal);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}*/
	else if(!strcmp(tip, "tohum", true))
	{
	    new tohum;
	    if(sscanf(miktar, "d", tohum))
	        return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [tohum] [yeni miktar]");

		if(tohum < 0) return HataMesaji(playerid, "Girilen miktar en az 0 olmalýdýr.");
		OyuncuBilgi[oyuncuid][oTohum] = tohum;
		SunucuMesaji(playerid, "%s adlý kiþinin tohum sayýsýný %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(tohum, ""));
		SunucuMesaji(oyuncuid, "%s adlý yetkili tohum sayýný %s olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], NumaraFormati(tohum, ""));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin tohumunu deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], tohum);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "slisans", true))
	{
		switch(OyuncuBilgi[oyuncuid][oEhliyet]) {
		    case true: OyuncuBilgi[oyuncuid][oEhliyet] = false;
		    case false: OyuncuBilgi[oyuncuid][oEhliyet] = true;
		}
		SunucuMesaji(playerid, "%s adlý oyuncunun sürücü lisansýný \"%s\" olarak deðiþtirdin.", OyuncuIsim(oyuncuid), (OyuncuBilgi[oyuncuid][oEhliyet] == false) ? ("yok") : ("mevcut"));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin sürücü lisansýný deðiþtirdi. (%s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], (OyuncuBilgi[oyuncuid][oEhliyet] == false) ? ("yok") : ("mevcut"));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "uyari", true))
	{
	    new uyari;
	    if(sscanf(miktar, "d", uyari))
	        return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [uyari] [yeni uyarý sayýsý]");

		if(uyari < 0 || uyari > 4) return HataMesaji(playerid, "Girilen uyarý sayýsý en az 0, en fazla 4 olabilir.");
		OyuncuBilgi[oyuncuid][oUyari] = uyari;
		SunucuMesaji(playerid, "%s adlý kiþinin uyarýlarýný %d olarak deðiþtirdin.", OyuncuIsim(oyuncuid), uyari);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin uyarý sayýsýný deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], uyari);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "vpoint", true) && OyuncuBilgi[playerid][oAdmin] >= 7)
	{
	    new point;
	    if(sscanf(miktar, "d", point)) return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [vpoint] [yeni point]");

		if(point < 0) return HataMesaji(playerid, "Girilen deðer en az 0 olmalýdýr.");
		OyuncuBilgi[oyuncuid][oVPoint] = point;
		SunucuMesaji(playerid, "%s adlý kiþinin vPoint'ini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(point, ""));
		SunucuMesaji(oyuncuid, "%s adlý yetkili vPoint'ini %s olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], NumaraFormati(point, ""));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin yn-pointini deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], point);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "kslot", true) && OyuncuBilgi[playerid][oAdmin] >= 7)
	{
	    new slot;
	    if(sscanf(miktar, "d", slot))
	        return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [kslot] [yeni deðer]");

		if(slot < 0) return HataMesaji(playerid, "Girilen deðer en az 0 olmalýdýr.");
		OyuncuBilgi[oyuncuid][oEkSlot] = slot;
		SunucuMesaji(playerid, "%s adlý kiþinin karakter slotu sayýsýný %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(slot, ""));
		SunucuMesaji(oyuncuid, "%s adlý yetkili karakter slotu sayýný %s olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], NumaraFormati(slot, ""));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin ek slotunu deðiþtirdi. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], slot);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "2xpayday", true) && OyuncuBilgi[playerid][oAdmin] >= 7)
	{
	    new boost;
	    if(sscanf(miktar, "d", boost)) return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [2xpayday] [gün sayýsý]");
		if(boost < 0 || boost > 60) return HataMesaji(playerid, "Girilen miktar en az 0, en fazla 60 olabilir.");
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		if(boost == 0) {
		    OyuncuBilgi[oyuncuid][oEkstraPayday] = 0;
			SunucuMesaji(playerid, "%s adlý kiþinin 2x paydayýný iptal ettin.", OyuncuIsim(oyuncuid));
			SunucuMesaji(oyuncuid, "%s adlý yetkili tarafýndan 2x paydayýn iptal edildi.", OyuncuBilgi[playerid][oAdminNick]);
			format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin 2x paydayýný sýfýrladý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
		}
		else {
			new gun = boost * 86400;
			OyuncuBilgi[oyuncuid][oEkstraPayday] = gettime() + gun;
			SunucuMesaji(playerid, "%s adlý kiþiye %d günlük 2x payday verdin.", OyuncuIsim(oyuncuid), boost);
			SunucuMesaji(oyuncuid, "%s adlý yetkili sana %d günlük 2x payday verdi.", OyuncuBilgi[playerid][oAdminNick], boost);
			format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþiye 2x payday verdi. (%d gün)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], boost);
		}
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else if(!strcmp(tip, "uboost", true) && OyuncuBilgi[playerid][oAdmin] >= 7)
	{
	    new boost;
	    if(sscanf(miktar, "d", boost)) return KullanimMesaji(playerid, "/oyuncuduzenle [ID / Oyuncu] [uboost] [gün sayýsý]");
		if(boost < 0 || boost > 60) return HataMesaji(playerid, "Girilen miktar en az 0, en fazla 60 olabilir.");
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		if(boost == 0) {
		    OyuncuBilgi[oyuncuid][oUyusturucuBoost] = 0;
			SunucuMesaji(playerid, "%s adlý kiþinin uyuþturucu boostunu iptal ettin.", OyuncuIsim(oyuncuid));
			SunucuMesaji(oyuncuid, "%s adlý yetkili tarafýndan uyuþturucu boostun iptal edildi.", OyuncuBilgi[playerid][oAdminNick]);
			format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþinin uyuþturucu boostunu sýfýrladý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
		}
		else {
			new gun = boost * 86400;
			OyuncuBilgi[oyuncuid][oUyusturucuBoost] = gettime() + gun;
			SunucuMesaji(playerid, "%s adlý kiþiye %d günlük uyuþturucu boost verdin.", OyuncuIsim(oyuncuid), boost);
			SunucuMesaji(oyuncuid, "%s adlý yetkili sana %d günlük uyuþturucu boost verdi.", OyuncuBilgi[playerid][oAdminNick], boost);
			format(log_icerik, sizeof(log_icerik), "[%s] %s, %s(%d) adlý kiþiye uyuþturucu boost verdi. (%d gün)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], boost);
		}
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	}
	else return HataMesaji(playerid, "Geçersiz opsiyon.");
	OyuncuKaydet(oyuncuid);
 	return 1;
}

CMD:yoket(playerid, params[])
{
	new durum[48], miktar[144];
	if(sscanf(params, "s[48]S()[144]", durum, miktar))
 	{
	 	KullanimMesaji(playerid, "/yoket [adlar]");
	 	SendClientMessage(playerid, RENK_SARI, "[ADLAR]:{7a8a9a} silah, tumsilahlar, tohum, uyusturucu, imadde");
		return true;
	}

	if(!strcmp(durum, "tumsilahlar", true))
	{
	    new sayi = 0, silahid, mermi;
		for(new i = 0; i < 13; i ++)
		{
			GetPlayerWeaponData(playerid, i, silahid, mermi);

			if(silahid > 0 && OyuncuBilgi[playerid][oSilah][i] == silahid) sayi++;
		}
		if(!sayi) return HataMesaji(playerid, "Üzerine silah bulunmuyor.");
		SilahlariSifirla(playerid);
		SunucuMesaji(playerid, "Üzerinizdeki %d adet silahý yokettiniz.", sayi);
	}
	else if(!strcmp(durum, "silah", true))
	{
	    new liste[2048], sayi = 0, silahid, mermi;
		for(new i = 0; i < 13; i++)
		{
			GetPlayerWeaponData(playerid, i, silahid, mermi);
			if(silahid > 0 && silahid == OyuncuBilgi[playerid][oSilah][i]) {
			    if(OyuncuBilgi[playerid][oTaser] && silahid == 23) continue;
				if(OyuncuBilgi[playerid][oBeanbag] && silahid == 25) continue;
				format(liste, sizeof(liste), "%s%s\t%d\n", liste, SilahIsim(silahid), mermi), sayi++;
			}
		}
		if(!sayi) return HataMesaji(playerid, "Üzerine silah bulunmuyor.");
		DialogGoster(playerid, DIALOG_SILAH_YOKET, DIALOG_STYLE_TABLIST, "Silah - Yoket", liste, "Seç", "Kapat");
	}
	else if(!strcmp(durum, "imadde", true))
	{
	    if(OyuncuBilgi[playerid][oIslenmemisMadde] == 0) return HataMesaji(playerid, "Üzerinde iþlenmemiþ madde yok.");

		OyuncuBilgi[playerid][oIslenmemisMadde] = 0;
		cmd_me(playerid, "üzerindeki iþlenmemiþ maddeleri yok etti.");
	}
	else if(!strcmp(durum, "uyusturucu", true))
	{
	    if(OyuncuBilgi[playerid][oUyusturucu] == 0) return HataMesaji(playerid, "Üzerinde uyuþturucu yok.");

		OyuncuBilgi[playerid][oUyusturucu] = 0;
		cmd_me(playerid, "üzerindeki uyuþturucularý yok etti.");
	}
	else if(!strcmp(durum, "tohum", true))
	{
	    if(OyuncuBilgi[playerid][oTohum] == 0) return HataMesaji(playerid, "Üzerinde tohum yok.");
	    
		OyuncuBilgi[playerid][oTohum] = 0;
		cmd_me(playerid, "üzerindeki tohumlarý yok etti.");
	}
 	return 1;
}

CMD:iptal(playerid, params[])
{
	new durum[48], miktar[144];
	if(sscanf(params, "s[48]S()[144]", durum, miktar))
 	{
	 	KullanimMesaji(playerid, "/iptal [adlar]");
	 	SendClientMessage(playerid, RENK_SARI, "[ADLAR]:{7a8a9a} ilkyardim, maymuncuk, rapor, soru, bidon, konum, silah, silahsat");
	 	SendClientMessage(playerid, RENK_SARI, "[ADLAR]:{7a8a9a} uber, ubertalep, yaris, yarisdavet, bodyguard, etkinlik");
		return true;
	}

	if(!strcmp(durum, "ilkyardim", true))
	{
		if(OyuncuBilgi[playerid][oIlkYardimSure] < 1) return HataMesaji(playerid, "Ýlk yardým yapmýyorsun.");

		OyuncuBilgi[playerid][oIlkYardimSure] = 0;
		OyuncuBilgi[playerid][oIlkYardimYapilan] = INVALID_PLAYER_ID;
		SunucuMesaji(playerid, "Ýlk yardýmý iptal ettin.");
	}
	else if(!strcmp(durum, "maymuncuk", true))
	{
		if(MaymuncukVeri[playerid][mSaniye] < 1) return HataMesaji(playerid, "Maymuncuk iþleminde deðilsin.");

		MaymuncukVeri[playerid][mSaniye] = 0;
		MaymuncukVeri[playerid][mHedef] = 0;
		OyuncuBilgi[playerid][oMaymuncuk]--;
		SunucuMesaji(playerid, "Maymuncuk iþlemini iptal ettin, maymuncuðun kýrýldý.");
	}
	else if(!strcmp(durum, "soru", true))
	{
		if(isnull(OyuncuBilgi[playerid][oSoru])) return HataMesaji(playerid, "Soru göndermemiþsin.");

		OyuncuBilgi[playerid][oIlgilenenYetkili] = INVALID_PLAYER_ID;
		OyuncuBilgi[playerid][oSoru][0] = 0;
		OyuncuBilgi[playerid][oSoruGecikme] = 0;
		SunucuMesaji(playerid, "Gönderdiðin soruyu iptal ettin.");
	}
	else if(!strcmp(durum, "rapor", true))
	{
		if(isnull(OyuncuBilgi[playerid][oRapor])) return HataMesaji(playerid, "Rapor göndermemiþsin.");

		OyuncuBilgi[playerid][oIlgilenenAdmin] = INVALID_PLAYER_ID;
		OyuncuBilgi[playerid][oRapor][0] = 0;
		OyuncuBilgi[playerid][oRaporGecikme] = 0;
		SunucuMesaji(playerid, "Gönderdiðin raporu iptal ettin.");
	}
	else if(!strcmp(durum, "bidon", true))
	{
		if(OyuncuBilgi[playerid][oBenzinDolduruyor] > 0) return HataMesaji(playerid, "Bidonla iþlem yapmýyorsun.");

		OyuncuBilgi[playerid][oBenzinDolduruyor] = -1;
		SunucuMesaji(playerid, "Bidon doldurma iþlemini iptal ettin.");
	}
	else if(!strcmp(durum, "konum", true))
	{
	    if(OyuncuBilgi[playerid][oKonumGonderilme] == 0) return HataMesaji(playerid, "Kimseye konum göndermemiþsin.");
	
	    new numara = OyuncuBilgi[playerid][oKonumGonderilme];
	    foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oTelefonNumarasi] == numara) SendClientMessageEx(i, RENK_BEYAZ, "{5453AE}[KONUM] {FFFFFF}Karþý taraf konum davetini iptal etti.");
		OyuncuBilgi[playerid][oKonumGonderilme] = 0;
	    SunucuMesaji(playerid, "Ýlettiðiniz konum davetini iptal ettiniz.");
	}
	else if(!strcmp(durum, "silah", true))
	{
	    if(GetPVarInt(playerid, "silah_satis") == INVALID_PLAYER_ID) return HataMesaji(playerid, "Sana silah satýþý önerilmemiþ.");

		new oyuncu_id = GetPVarInt(playerid, "silah_satis");
		SetPVarInt(oyuncu_id, "silah_satiyor", INVALID_PLAYER_ID);
		SetPVarInt(playerid, "silah_satis", INVALID_PLAYER_ID);
		SetPVarInt(playerid, "silah_satiliyor", 0);
		SetPVarInt(playerid, "silah_fiyat", 0);
		SunucuMesaji(playerid, "Silah satýþ iþlemi reddedildi.");
		SunucuMesaji(oyuncu_id, "Silah satýþýnýz reddedildi.");
	}
	else if(!strcmp(durum, "silahsat", true))
	{
	    if(GetPVarInt(playerid, "silah_satiyor") == INVALID_PLAYER_ID) return HataMesaji(playerid, "Kimseye silah satmýyorsun.");

		new oyuncu_id = GetPVarInt(playerid, "silah_satiyor");
		SetPVarInt(playerid, "silah_satiyor", INVALID_PLAYER_ID);
		SetPVarInt(oyuncu_id, "silah_satis", INVALID_PLAYER_ID);
		SetPVarInt(oyuncu_id, "silah_satiliyor", 0);
		SetPVarInt(oyuncu_id, "silah_fiyat", 0);
		SunucuMesaji(playerid, "Silah satýþ iþlemini iptal ettiniz.");
		SunucuMesaji(oyuncu_id, "Silah satýþý satýcý tarafýndan iptal edildi.");
	}
	else if(!strcmp(durum, "ubertalep", true))
	{
		if(OyuncuBilgi[playerid][oUberTalep] == INVALID_PLAYER_ID) return HataMesaji(playerid, "Uber çaðýrmamýþsýn.");

		foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oUberIsaret] == playerid) {
		    OyuncuBilgi[i][oUberIsaret] = INVALID_PLAYER_ID;
		    DisablePlayerCheckpoint(i);
		    SunucuMesaji(i, "Müþteri uber talebini iptal etti.");
		    break;
		}
		OyuncuBilgi[playerid][oUberTalep] = INVALID_PLAYER_ID;
		SunucuMesaji(playerid, "Uber talebiniz iptal edildi.");
	}
	else if(!strcmp(durum, "uber", true))
	{
		if(OyuncuBilgi[playerid][oUberIsaret] == INVALID_PLAYER_ID) return HataMesaji(playerid, "Kimsenin uber talebini kabul etmemiþsin.");

		foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oUberTalep] == playerid) {
		    OyuncuBilgi[i][oUberTalep] = INVALID_PLAYER_ID;
		    SunucuMesaji(i, "Sürücü uber talebini iptal etti.");
		    break;
		}
		DisablePlayerCheckpoint(playerid);
		OyuncuBilgi[playerid][oUberIsaret] = INVALID_PLAYER_ID;
		SunucuMesaji(playerid, "Kabul ettiðiniz uber talebini sonlandýrdýnýz.");
	}
	else if(!strcmp(durum, "yaris", true))
	{
		if(OyuncuBilgi[playerid][oYaris] == -1) return HataMesaji(playerid, "Bir yarýþta deðilsin.");

		new id = OyuncuBilgi[playerid][oYaris];
		DisablePlayerCheckpoint(playerid);
		OyuncuBilgi[playerid][oYaris] = -1;
		SunucuMesaji(playerid, "Yarýþtan ayrýldýn.");
		if(IsPlayerConnected(YarisBilgi[id][yarisSahip])) SunucuMesaji(YarisBilgi[id][yarisSahip], "%s adlý kiþi yarýþtan ayrýldý.", OyuncuIsim(playerid));
	}
	else if(!strcmp(durum, "yarisdavet", true))
	{
		if(OyuncuBilgi[playerid][oYarisDavet] == INVALID_PLAYER_ID) return HataMesaji(playerid, "Kimseye yarýþ daveti göndermemiþsin.");

		new id = OyuncuBilgi[playerid][oYarisDavet];
		OyuncuBilgi[playerid][oYarisDavet] = INVALID_PLAYER_ID;
		if(IsPlayerConnected(id)) SunucuMesaji(id, "%s adlý kiþi yarýþ davetini iptal etti.", OyuncuIsim(playerid));
		SunucuMesaji(playerid, "Gönderdiðiniz yarýþ davetini iptal ettiniz.");
	}
	else if(!strcmp(durum, "bodyguard", true))
	{
	    if(OyuncuBilgi[playerid][oBodyguardOneren] == INVALID_PLAYER_ID) return HataMesaji(playerid, "Sana satýþ önerisinde bulunulmamýþ, gaipten sesler duyuyorsun galiba?");
	    new oyuncuid = OyuncuBilgi[playerid][oBodyguardOneren];
	    if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Sana zýrh satmak isteyen bodyguard artýk aktif deðil."), OyuncuBilgi[playerid][oBodyguardOneren] = INVALID_PLAYER_ID;
	    
	    OyuncuBilgi[playerid][oBodyguardOneren] = INVALID_PLAYER_ID;
	    SunucuMesaji(playerid, "%s adlý kiþinin zýrh satýþ önerisini reddettin.", OyuncuIsim(oyuncuid));
	    SunucuMesaji(oyuncuid, "%s adlý kiþi zýrh satýþ önerini iptal etti.", OyuncuIsim(playerid));
	}
	else if(!strcmp(durum, "etkinlik", true))
	{
		if(OyuncuBilgi[playerid][oEtkinlikDurum] == false) return HataMesaji(playerid, "Bir etkinlikte olmadýðýn için ayrýlamýyorsun.");
		
		OyuncuBilgi[playerid][oEtkinlikDurum] = true;
	    OyuncuBilgi[playerid][oPos][0] = EskiVeriler[playerid][eskiPos][0], OyuncuBilgi[playerid][oPos][1] = EskiVeriler[playerid][eskiPos][1], OyuncuBilgi[playerid][oPos][2] = EskiVeriler[playerid][eskiPos][2];
		SetPlayerColor(playerid, EskiVeriler[playerid][eskiRenk]);
		OyuncuPosDegistir(playerid, EskiVeriler[playerid][eskiPos][0], EskiVeriler[playerid][eskiPos][1], EskiVeriler[playerid][eskiPos][2]);
		SetPlayerFacingAngle(playerid, EskiVeriler[playerid][eskiPos][3]);
		OyuncuBilgi[playerid][oVW] = EskiVeriler[playerid][eskiVW];
		OyuncuBilgi[playerid][oInterior] = EskiVeriler[playerid][eskiInt];
		SetPlayerVirtualWorld(playerid, EskiVeriler[playerid][eskiVW]);
		SetPlayerInterior(playerid, EskiVeriler[playerid][eskiInt]);
		DondurulmaEtkisi(playerid);
		SetCameraBehindPlayer(playerid);
		CanDuzenle(playerid, EskiVeriler[playerid][eskiCan]);
		ZirhDuzenle(playerid, EskiVeriler[playerid][eskiZirh]);
		SilahAyarla(playerid);
	}
 	return 1;
}

CMD:kabul(playerid, params[])
{
	new durum[48], miktar[144];
	if(sscanf(params, "s[48]S()[144]", durum, miktar))
 	{
	 	KullanimMesaji(playerid, "/kabul [adlar]");
	 	SendClientMessage(playerid, RENK_SARI, "[ADLAR]:{7a8a9a} silah, uber, yaris, bodyguard, tokalas, etkinlik");
		return true;
	}
	if(!strcmp(durum, "silah", true))
	{
	    if(GetPVarInt(playerid, "silah_satis") == INVALID_PLAYER_ID) return HataMesaji(playerid, "Sana silah satýþý önerilmemiþ.");

		new oyuncuid = GetPVarInt(playerid, "silah_satis"), fiyat = GetPVarInt(playerid, "silah_fiyat"), silahid = GetPVarInt(playerid, "silah_satiliyor");
		if(OyuncuBilgi[playerid][oPara] < fiyat || fiyat < 1) {
			HataMesaji(playerid, "Satýþ ücretini karþýlayamýyorsun.");
			HataMesaji(oyuncuid, "Karþý taraf satýþ ücretini karþýlayamadýðý için iþlem iptal edildi.");
			SetPVarInt(oyuncuid, "silah_satiyor", INVALID_PLAYER_ID);
			SetPVarInt(playerid, "silah_satis", INVALID_PLAYER_ID);
			SetPVarInt(playerid, "silah_satiliyor", 0);
			SetPVarInt(playerid, "silah_fiyat", 0);
			return 1;
		}
		if(OyuncuBilgi[playerid][oSilah][SilahSlotBul[silahid]] != 0) {
			HataMesaji(playerid, "Boþ slotun olmadýðý için silahý satýn alamýyorsun.");
			HataMesaji(oyuncuid, "Satýþ yapacaðýnýz insanda boþ slot olmadýðý için silah satýlamadý.");
			SetPVarInt(oyuncuid, "silah_satiyor", INVALID_PLAYER_ID);
			SetPVarInt(playerid, "silah_satis", INVALID_PLAYER_ID);
			SetPVarInt(playerid, "silah_satiliyor", 0);
			SetPVarInt(playerid, "silah_fiyat", 0);
			return 1;
		}
		if(!YakinlikKontrol(playerid, oyuncuid, 4.0)) {
			HataMesaji(playerid, "Satýþta bir hata oluþtu, oyuncuya yakýn deðilsin.");
			HataMesaji(oyuncuid, "Satýþta bir hata oluþtu, oyuncuya yakýn deðilsin.");
			SetPVarInt(oyuncuid, "silah_satiyor", INVALID_PLAYER_ID);
			SetPVarInt(playerid, "silah_satis", INVALID_PLAYER_ID);
			SetPVarInt(playerid, "silah_satiliyor", 0);
			SetPVarInt(playerid, "silah_fiyat", 0);
			return 1;
		}
		if(OyuncuBilgi[oyuncuid][oSilah][SilahSlotBul[silahid]] != silahid) {
			HataMesaji(playerid, "Satýþta bir hata oluþtu, silah oyuncuda deðil.");
			HataMesaji(oyuncuid, "Satýþta bir hata oluþtu, silah sizde deðil.");
			SetPVarInt(oyuncuid, "silah_satiyor", INVALID_PLAYER_ID);
			SetPVarInt(playerid, "silah_satis", INVALID_PLAYER_ID);
			SetPVarInt(playerid, "silah_satiliyor", 0);
			SetPVarInt(playerid, "silah_fiyat", 0);
			return 1;
		}
		if(!IsPlayerConnected(oyuncuid)) {
			HataMesaji(playerid, "Satýþta bir hata oluþtu, oyuncu oyunda deðil.");
			SetPVarInt(oyuncuid, "silah_satiyor", INVALID_PLAYER_ID);
			SetPVarInt(playerid, "silah_satis", INVALID_PLAYER_ID);
			SetPVarInt(playerid, "silah_satiliyor", 0);
			SetPVarInt(playerid, "silah_fiyat", 0);
			return 1;
		}
		ParaEkle(playerid, -fiyat);
		ParaEkle(oyuncuid, fiyat);
		new mermi = OyuncuBilgi[oyuncuid][oMermi][SilahSlotBul[silahid]];
		SilahSil(oyuncuid, silahid);
		Silahver(playerid, silahid, mermi);
		SunucuMesaji(playerid, "Silah satýþýnýz tamamlandý, %s ödediniz.", NumaraFormati(fiyat));
		SunucuMesaji(oyuncuid, "Silah satýþýnýz tamamlandý, %s kazandýnýz.", NumaraFormati(fiyat));
	}
	else if(!strcmp(durum, "uber", true))
	{
	    new oyuncuid;
	    if(sscanf(miktar, "u", oyuncuid)) return KullanimMesaji(playerid, "/kabul [uber] [ID / Oyuncu]");
		if(!IsPlayerConnected(oyuncuid) || OyuncuBilgi[oyuncuid][oGiris] == false) return HataMesaji(playerid, "Geçersiz oyuncu.");
		if(OyuncuBilgi[oyuncuid][oUberTalep] != playerid) return HataMesaji(playerid, "Bu oyuncu sizden uber talep etmemiþ.");
		if(OyuncuBilgi[playerid][oUberIsaret] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Bir kiþinin uber talebini kabul etmiþsin, önce onu iptal etmelisin.");
		
		new Float:oyuncu_pos[3];
		OyuncuBilgi[playerid][oUberIsaret] = oyuncuid;
		GetPlayerPos(oyuncuid, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2]);
		SetPlayerCheckpoint(playerid, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2], 5.0);
		SunucuMesaji(oyuncuid, "%s adlý sürücü talebinizi kabul etti.", OyuncuIsim(playerid));
		SunucuMesaji(playerid, "Müþterinin talebini kabul ettin, konumu haritanda iþaretlendi.");
	}
	else if(!strcmp(durum, "yaris", true))
	{
	    new oyuncuid;
	    if(sscanf(miktar, "u", oyuncuid)) return KullanimMesaji(playerid, "/kabul [yaris] [ID / Oyuncu]");
		if(!IsPlayerConnected(oyuncuid) || OyuncuBilgi[oyuncuid][oGiris] == false) return HataMesaji(playerid, "Geçersiz oyuncu.");
		if(OyuncuBilgi[oyuncuid][oYarisDavet] != playerid) return HataMesaji(playerid, "Bu oyuncu size yarýþ talebi göndermemiþ.");
		if(OyuncuBilgi[playerid][oYaris] != -1) return HataMesaji(playerid, "Bir yarýþa katýlmýþsýn, öncelikle ondan çýkmalýsýn.");

		OyuncuBilgi[playerid][oYaris] = Yaris_ID(oyuncuid);
		OyuncuBilgi[oyuncuid][oYarisDavet] = INVALID_PLAYER_ID;
		SunucuMesaji(oyuncuid, "%s adlý kiþi yarýþ talebinizi kabul etti.", OyuncuIsim(playerid));
		SunucuMesaji(playerid, "%s adlý kiþinin yarýþ talebini kabul ettin, yarýþa katýldýn.", OyuncuIsim(oyuncuid));
	}
	else if(!strcmp(durum, "bowling", true))
	{
	    new oyuncuid;
	    if(sscanf(miktar, "u", oyuncuid)) return KullanimMesaji(playerid, "/kabul [bowling] [ID / Oyuncu]");
		if(!IsPlayerConnected(oyuncuid) || OyuncuBilgi[oyuncuid][oGiris] == false) return HataMesaji(playerid, "Geçersiz oyuncu.");
		if(OyuncuBilgi[playerid][oBowlingIstek] != oyuncuid) return HataMesaji(playerid, "Bu oyuncu size bowling oynama talebi göndermemiþ.");
		if(OyuncuBilgi[playerid][oBowling] == true) return HataMesaji(playerid, "Bir oyuna katýlmýþsýn, öncelikle oyunu bitirmelisin.");

		OyuncuBilgi[playerid][oBowlingPartner] = oyuncuid;
		OyuncuBilgi[oyuncuid][oBowlingPartner] = playerid;
		OyuncuBilgi[playerid][oBowlingSira] = playerid;
		OyuncuBilgi[oyuncuid][oBowlingSira] = playerid;
		OyuncuBilgi[oyuncuid][oBowlingIstek] = -1;
		OyuncuBilgi[oyuncuid][oBowling] = true;
		OyuncuBilgi[playerid][oBowling] = true;
		SunucuMesaji(oyuncuid, "%s adlý kiþi bowling oynama talebinizi kabul etti. (/bowlingoyna komutuyla oynayabilirsin.)", OyuncuIsim(playerid));
		SunucuMesaji(playerid, "%s adlý kiþinin bowling oynama talebini kabul ettin. (/bowlingoyna komutuyla oynayabilirsin.)", OyuncuIsim(oyuncuid));
	}
	else if(!strcmp(durum, "bodyguard", true))
	{
	    if(OyuncuBilgi[playerid][oBodyguardOneren] == INVALID_PLAYER_ID) return HataMesaji(playerid, "Sana satýþ önerisinde bulunulmamýþ, gaipten sesler duyuyorsun galiba?");
	    new fiyat = OyuncuBilgi[playerid][oBodyguardFiyat], oyuncuid = OyuncuBilgi[playerid][oBodyguardOneren];
	    if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Sana zýrh satmak isteyen bodyguard artýk aktif deðil."), OyuncuBilgi[playerid][oBodyguardOneren] = INVALID_PLAYER_ID;
	    if(OyuncuBilgi[playerid][oPara] < fiyat) return HataMesaji(playerid, "Bu zýrhýn fiyatýný karþýlayamýyorsun."), OyuncuBilgi[playerid][oBodyguardOneren] = INVALID_PLAYER_ID;
	    if(OyuncuZirh(playerid) >= 25) return HataMesaji(playerid, "Yeterince zýrhýn var, daha fazla alamazsýn."), OyuncuBilgi[playerid][oBodyguardOneren] = INVALID_PLAYER_ID;
	    
	    ParaEkle(playerid, -fiyat);
	    ZirhDuzenle(playerid, 25);
	    fiyat = 90 * fiyat / 100;
	    ParaEkle(oyuncuid, fiyat);
	    OyuncuBilgi[playerid][oBodyguardOneren] = INVALID_PLAYER_ID;
	    SunucuMesaji(playerid, "%s adlý bodyguardýn zýrh satýþ önerisini kabul ettin.", OyuncuIsim(oyuncuid));
	    SunucuMesaji(oyuncuid, "%s adlý kiþi zýrh satýþ önerini kabul etti, %s kazandýn.", OyuncuIsim(oyuncuid), NumaraFormati(fiyat));
	}
	else if(!strcmp(durum, "tokalas", true))
	{
		if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "OOC hapisteyken animasyon kullanamazsýn.");
		if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken animasyon kullanamazsýn.");
		if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Dondurulma etkisindeyken animasyon kullanamazsýn.");
		if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken animasyon kullanamazsýn.");
		if(!IsPlayerConnected(OyuncuBilgi[playerid][oTokalasIstek])) return HataMesaji(playerid, "Bekleyen bir tokalaþma isteðin yok.");
		
		new tokalas_oyuncu = OyuncuBilgi[playerid][oTokalasIstek], Float:yon_duzenle;
		if(!YakinlikKontrol(playerid, tokalas_oyuncu, 3.0)) return HataMesaji(playerid, "Sana istek gönderen kiþiye yeterince yakýn deðilsin.");
		GetPlayerFacingAngle(playerid, yon_duzenle);
		SetPlayerFacingAngle(tokalas_oyuncu, yon_duzenle+180);
		switch(OyuncuBilgi[playerid][oTokalasStil]) {
			case 1: {
				AnimOynat2(playerid, "GANGS","prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
				AnimOynat2(tokalas_oyuncu, "GANGS","prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			}
			case 2: {
				AnimOynat2(playerid,"GANGS","prtial_hndshk_01", 4.0, 0, 0, 0, 0, 0);
				AnimOynat2(tokalas_oyuncu, "GANGS","prtial_hndshk_01", 4.0, 0, 0, 0, 0, 0);
			}
			case 3: {
                AnimOynat2(playerid,"GANGS","hndshkaa", 4.0, 0, 0, 0, 0, 0);
				AnimOynat2(tokalas_oyuncu, "GANGS","hndshkaa", 4.0, 0, 0, 0, 0, 0);
			}
			case 4: {
				AnimOynat2(playerid,"GANGS","hndshkba", 4.0, 0, 0, 0, 0, 0);
				AnimOynat2(tokalas_oyuncu, "GANGS","hndshkba", 4.0, 0, 0, 0, 0, 0);
			}
			case 5: {
				AnimOynat2(playerid,"GANGS","hndshkca", 4.0, 0, 0, 0, 0, 0);
				AnimOynat2(tokalas_oyuncu, "GANGS","hndshkca", 4.0, 0, 0, 0, 0, 0);
			}
			case 6: {
				AnimOynat2(playerid,"GANGS","hndshkcb", 4.0, 0, 0, 0, 0, 0);
				AnimOynat2(tokalas_oyuncu, "GANGS","hndshkcb", 4.0, 0, 0, 0, 0, 0);
			}
			case 7: {
				AnimOynat2(playerid,"GANGS","hndshkda", 4.0, 0, 0, 0, 0, 0);
				AnimOynat2(tokalas_oyuncu, "GANGS","hndshkda", 4.0, 0, 0, 0, 0, 0);
			}
			case 8: {
				AnimOynat2(playerid,"GANGS","hndshkea", 4.0, 0, 0, 0, 0, 0);
				AnimOynat2(tokalas_oyuncu, "GANGS","hndshkea", 4.0, 0, 0, 0, 0, 0);
			}
			case 9: {
				AnimOynat2(playerid,"GANGS","hndshkfa", 4.0, 0, 0, 0, 0, 0);
				AnimOynat2(tokalas_oyuncu, "GANGS","hndshkfa", 4.0, 0, 0, 0, 0, 0);
			}
			case 10: {
				ApplyAnimation(playerid,"GANGS","hndshkfa_swt", 4.0, 0, 0, 0, 0, 0);
				ApplyAnimation(tokalas_oyuncu, "GANGS","hndshkfa_swt", 4.0, 0, 0, 0, 0, 0);
			}
			default: {
				AnimOynat2(playerid, "GANGS","prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
				AnimOynat2(tokalas_oyuncu, "GANGS","prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			}
		}
		new emote[64];
		format(emote, sizeof(emote), "%s adlý kiþiyle el sýkýþtý.", OyuncuIsim(tokalas_oyuncu));
		cmd_ame(playerid, emote);
		format(emote, sizeof(emote), "%s adlý kiþiyle el sýkýþtý.", OyuncuIsim(playerid));
		cmd_ame(tokalas_oyuncu, emote);
        OyuncuBilgi[playerid][oTokalasIstek] = INVALID_PLAYER_ID;
        OyuncuBilgi[playerid][oTokalasStil] = 0;
	}
	else if(!strcmp(durum, "etkinlik", true)) {
		if(OyuncuBilgi[playerid][oDestek] == true) return HataMesaji(playerid, "Desteðin açýkken etkinliðe katýlamazsýn.");
		if(OyuncuBilgi[playerid][oCevaplandi] == true) return HataMesaji(playerid, "Aramada iken etkinliðe katýlamazsýn.");
		if(OyuncuBilgi[playerid][oDekorSure] > 0) return HataMesaji(playerid, "Dekor önizlerken etkinliðe katýlamazsýn.");
		if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Dondurulma etkisindeyken etkinliðe katýlamazsýn.");
		if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken etkinliðe katýlamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araç içerisindeyken etkinliðe katýlamazsýn.");
		if(OyuncuBilgi[playerid][oEtkinlikDurum] == true) return HataMesaji(playerid, "Zaten etkinliktesin, ayrýlmak için /iptal etkinlik");

		SilahKaydet(playerid);
		EskiVeriler[playerid][eskiRenk] = GetPlayerColor(playerid);
		EskiVeriler[playerid][eskiVW] = GetPlayerVirtualWorld(playerid);
		EskiVeriler[playerid][eskiInt] = GetPlayerInterior(playerid);
		GetPlayerPos(playerid, EskiVeriler[playerid][eskiPos][0], EskiVeriler[playerid][eskiPos][1], EskiVeriler[playerid][eskiPos][2]);
		GetPlayerFacingAngle(playerid, EskiVeriler[playerid][eskiPos][3]);
		GetPlayerHealth(playerid, EskiVeriler[playerid][eskiCan]);
		GetPlayerArmour(playerid, EskiVeriler[playerid][eskiZirh]);
		OyuncuBilgi[playerid][oEtkinlikDurum] = true;
		SetPlayerColor(playerid, 0x1D7A3900);
		OyuncuPosDegistir(playerid, EtkinlikBilgi[etkPos][0], EtkinlikBilgi[etkPos][1], EtkinlikBilgi[etkPos][2]);
		SetPlayerFacingAngle(playerid, EtkinlikBilgi[etkPos][3]);
		SetPlayerVirtualWorld(playerid, EtkinlikBilgi[etkVirtualWorld]);
		SetPlayerInterior(playerid, EtkinlikBilgi[etkInterior]);
		DondurulmaEtkisi(playerid);
		SetCameraBehindPlayer(playerid);
		CanDuzenle(playerid, EtkinlikBilgi[etkCan]);
		ZirhDuzenle(playerid, EtkinlikBilgi[etkZirh]);
		ResetPlayerWeapons(playerid);
		UyariMesaji(playerid, "Etkinliðe katýldýn, baþlayana kadar kimseye hasar veremeyeceksin.");
		UyariMesaji(playerid, "Eðer etkinlikten ayrýlmak istersen /iptal etkinlik yazman yeterli.");
	}
	return 1;
}

CMD:k(playerid, params[])
{
	if(OyuncuBilgi[playerid][oEkstraDil] == -1) return HataMesaji(playerid, "Ýkincil dil seçmemiþsin, /dilsec komutu ile kendine ekstra bir dil seçebilirsin.");
	if(isnull(params)) return KullanimMesaji(playerid, "/k [ikincil dil]");
    /*else if(OyuncuBilgi[playerid][oArama] > -1 && OyuncuBilgi[playerid][oCevaplandi] == true) {
	new oyuncuid = OyuncuBilgi[playerid][oArama], bool:bulundu = false;
			foreach(new i : Player)
			{
	   		if(YakinlikKontrol(playerid, i, KONUSMA_MESAFESI) && OyuncuBilgi[i][oEkstraDil] == OyuncuBilgi[playerid][oEkstraDil]) return SendClientMessageEx(i, RENK_BEYAZ, "[%s] (telefon) %s: %s", EkstraDilCek(playerid), OyuncuIsim(playerid), params);
			else return SendClientMessageEx(i, RENK_BEYAZ, "[%s] (telefon) %s: ??? ??? ???", EkstraDilCek(playerid), OyuncuIsim(playerid));
			}
            if(OyuncuBilgi[playerid][oGizliNumara] == true) {
			if(OyuncuBilgi[oyuncuid][oEkstraDil] == OyuncuBilgi[playerid][oEkstraDil]) return SendClientMessageEx(oyuncuid, RENK_SARI, "[%s] (telefon) Gizli: %s", EkstraDilCek(playerid), params), bulundu = true;
			else return SendClientMessageEx(oyuncuid, RENK_SARI, "[%s] (telefon) Gizli: ??? ??? ???", EkstraDilCek(playerid)), bulundu = true;
			}
			else if(OyuncuBilgi[playerid][oGizliNumara] == false) {
 			for(new r = 0; r != MAKSIMUM_REHBER_SAYI; r ++) if(RehberBilgi[oyuncuid][r][rehberKullanimda] && RehberBilgi[oyuncuid][r][rehberNumara] == OyuncuBilgi[playerid][oTelefonNumarasi]) {
    		if(OyuncuBilgi[oyuncuid][oEkstraDil] == OyuncuBilgi[playerid][oEkstraDil]) return SendClientMessageEx(oyuncuid, RENK_SARI, "[%s] (telefon) %s (%d): %s", EkstraDilCek(playerid), RehberBilgi[oyuncuid][r][rehberIsim], OyuncuBilgi[playerid][oTelefonNumarasi], params), bulundu = true;
			else return SendClientMessageEx(oyuncuid, RENK_SARI, "[%s] (telefon) %s (%d): ??? ??? ???", EkstraDilCek(playerid), RehberBilgi[oyuncuid][r][rehberIsim], OyuncuBilgi[playerid][oTelefonNumarasi]), bulundu = true;
			}
			}
			if(bulundu == false) {
			switch(OyuncuBilgi[playerid][oCinsiyet]) {
			case 1: {
			if(OyuncuBilgi[oyuncuid][oEkstraDil] == OyuncuBilgi[playerid][oEkstraDil]) return SendClientMessageEx(oyuncuid, RENK_SARI, "[E] [%s] (telefon) %d: %s", EkstraDilCek(playerid), OyuncuBilgi[playerid][oTelefonNumarasi], params);
			else return SendClientMessageEx(oyuncuid, RENK_SARI, "[E] [%s] (telefon) %d: ??? ??? ???", EkstraDilCek(playerid), OyuncuBilgi[playerid][oTelefonNumarasi]);
			}
			case 2: {
			if(OyuncuBilgi[oyuncuid][oEkstraDil] == OyuncuBilgi[playerid][oEkstraDil]) return SendClientMessageEx(oyuncuid, RENK_SARI, "[K] [%s] (telefon) %d: %s", EkstraDilCek(playerid), OyuncuBilgi[playerid][oTelefonNumarasi], params);
			else return SendClientMessageEx(oyuncuid, RENK_SARI, "[K] [%s] (telefon) %d: ??? ??? ???", EkstraDilCek(playerid), OyuncuBilgi[playerid][oTelefonNumarasi]);
			}
			}
			}
	}*/
	foreach(new i : Player)
	{
	    if(YakinlikKontrol(playerid, i, KONUSMA_MESAFESI) && (OyuncuBilgi[i][oEkstraDil] == OyuncuBilgi[playerid][oEkstraDil] || OyuncuBilgi[i][oAdminDurum] == true || OyuncuBilgi[i][oAdmin] >= 7))
			SendClientMessageEx(i, RENK_BEYAZ, "[%s] %s: %s", EkstraDilCek(playerid), OyuncuIsim(playerid), params);

		else if(YakinlikKontrol(playerid, i, KONUSMA_MESAFESI) && OyuncuBilgi[i][oEkstraDil] != OyuncuBilgi[playerid][oEkstraDil])
			SendClientMessageEx(i, RENK_BEYAZ, "[%s] %s: ??? ??? ???", EkstraDilCek(playerid), OyuncuIsim(playerid));
	}
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [chat] %s %s(%d): %s", Tarih(), EkstraDilCek(playerid), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:dilsec(playerid, params[])
{
    if(OyuncuBilgi[playerid][oEkstraDil] > -1) return HataMesaji(playerid, "Zaten ikincil bir dil seçmiþsin.");
	if(OyuncuBilgi[playerid][oDialog] > -1) return HataMesaji(playerid, "Þu anda baþka bir dialog kullanýyorsunuz, lütfen daha sonra deneyin.");
	new icerik[512];
	icerik[0] = 0;
	for(new x; x < sizeof(EkstraDiller); x++)
	{
		format(icerik, sizeof(icerik), "%s%s\n", icerik, EkstraDiller[x]);
	}
    DialogGoster(playerid, DIALOG_DILSEC, DIALOG_STYLE_LIST, "Ýkincil Dil Seçin", icerik, "Seç", "Kapat");
	return 1;
}

/*CMD:vwduzelt(playerid, params[])
{
	if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) > 0 && Oyuncu_Binada(playerid) == -1 && Oyuncu_Isyerinde(playerid) == -1 && Oyuncu_Evde(playerid) == -1)
	{
	    SetPlayerVirtualWorld(playerid, 0);
	    SunucuMesaji(playerid, "Sanal dünya sorununuz düzeltildi.");
	}
	else HataMesaji(playerid, "Sanal dünyanda bir sorun saptanmadýðý için düzeltilmedi.");
	return 1;
}*/

CMD:nsahipbul(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new numara;
	if(sscanf(params, "d", numara)) return KullanimMesaji(playerid, "/nsahipbul [telefon numarasý]");

	if(numara == 0) return HataMesaji(playerid, "Geçersiz numara belirttin.");
	if(NumaraSahibiBul(numara) == INVALID_PLAYER_ID) return HataMesaji(playerid, "Girilen numara geçersiz ya da sahibi oyunda deðil.");

	SunucuMesaji(playerid, "%d numarasýnýn sahibi: %s", numara, OyuncuIsim(NumaraSahibiBul(numara)));
	return 1;
}

CMD:hasarlar(playerid, params[])
{
	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/hasarlar [oyuncuid/isim]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return HataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");
    if(OyuncuBilgi[oyuncuid][oYarali] == 0) return HataMesaji(playerid, "Oyuncu yaralý deðil.");
    new hasarsayi = 0, mesaj[MAKSIMUM_HASAR * 256];
    hasarsayi = 0;
	mesaj[0] = 0;
	for(new i = 0; i < MAKSIMUM_HASAR; i ++)
	{
		if(HasarBilgi[oyuncuid][i][hasarVarmi] && IsPlayerConnected(HasarBilgi[oyuncuid][i][hasarVeren])) {
			format(mesaj, sizeof(mesaj), "%s%.1f\t%s\t%s\t%s\n", mesaj, HasarBilgi[oyuncuid][i][hasarDeger], HasarBolge(HasarBilgi[oyuncuid][i][hasarBolge]), OyuncuIsim(HasarBilgi[oyuncuid][i][hasarVeren]), SilahIsim(HasarBilgi[oyuncuid][i][hasarSilah]));
			hasarsayi++;
		}
	}
	if(hasarsayi == 0) return HataMesaji(playerid, "Oyuncu hasar almamýþ.");
	strins(mesaj, "Hasar\tBölge\tHasar Veren\tSilah\n", 0);
	DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, OyuncuIsim(oyuncuid), mesaj, "Kapat", "");
	return 1;
}

CMD:afk(playerid, params[])
{
	if(isnull(OyuncuBilgi[playerid][oyuncuKod])) return HataMesaji(playerid, "AFK komutunu þu an kullanamazsýn.");
	
	new kod[12];
	if(sscanf(params, "s[12]", kod))
	    return KullanimMesaji(playerid, "/afk [afk kodunuz]");

	if(!strcmp(kod, OyuncuBilgi[playerid][oyuncuKod], true))
	{
        OyuncuBilgi[playerid][oyuncuKod][0] = 0;
        SunucuMesaji(playerid, "AFK durumunuz baþarýyla iptal edildi.");
        KillTimer(OyuncuBilgi[playerid][oAFKTimer]);
	}
	else HataMesaji(playerid, "Girilen kod yanlýþ. Kodunuz: %s", OyuncuBilgi[playerid][oyuncuKod]);
	return 1;
}

CMD:ason(playerid, params[])
{
	if(OyuncuBilgi[playerid][oSonBinilenArac] == 0) return HataMesaji(playerid, "Son giriþinden itibaren yeni bir araca binmemiþsin!");

	SunucuMesaji(playerid, "Son bindiðin araç ID: %d", OyuncuBilgi[playerid][oSonBinilenArac]);
	return 1;
}

CMD:saat(playerid, params[])
{
	new mesaj[256], ay[12], tarih[6];
	getdate(tarih[2], tarih[1], tarih[0]);
	gettime(tarih[3], tarih[4], tarih[5]);

	switch(tarih[1]) {
	    case 1: ay = "Ocak";
	    case 2: ay = "Subat";
	    case 3: ay = "Mart";
	    case 4: ay = "Nisan";
	    case 5: ay = "Mayis";
	    case 6: ay = "Haziran";
	    case 7: ay = "Temmuz";
	    case 8: ay = "Agustos";
	    case 9: ay = "Eylul";
	    case 10: ay = "Ekim";
	    case 11: ay = "Kasim";
	    case 12: ay = "Aralik";
	}
	SunucuMesaji(playerid, "Maaþ almanýz için %d dakika kalmýþ.", 60 - OyuncuBilgi[playerid][oDakika]);
	format(mesaj, sizeof(mesaj), "~r~%s %02d %d~n~~w~%02d:%02d:%02d", ay, tarih[0], tarih[2], tarih[3], tarih[4], tarih[5]);
	if(OyuncuBilgi[playerid][oHapisSure][0] > 60) format(mesaj, sizeof(mesaj), "%s~n~~r~Hapis Suresi: ~w~%d dakika", mesaj, OyuncuBilgi[playerid][oHapisSure][0] / 60);
	else if(OyuncuBilgi[playerid][oHapisSure][0] > 0 && OyuncuBilgi[playerid][oHapisSure][0] < 60) format(mesaj, sizeof(mesaj), "%s~n~~r~Hapis Suresi: ~w~%d saniye", mesaj, OyuncuBilgi[playerid][oHapisSure][0]);
	if(OyuncuBilgi[playerid][oHapisSure][1] > 60) format(mesaj, sizeof(mesaj), "%s~n~~r~Hapis Suresi: ~w~%d dakika", mesaj, OyuncuBilgi[playerid][oHapisSure][1] / 60);
	else if(OyuncuBilgi[playerid][oHapisSure][1] > 0 && OyuncuBilgi[playerid][oHapisSure][1] < 60) format(mesaj, sizeof(mesaj), "%s~n~~r~Hapis Suresi: ~w~%d saniye", mesaj, OyuncuBilgi[playerid][oHapisSure][1]);
	GameTextForPlayer(playerid, mesaj, 5 * 1000, 1);
	return 1;
}

CMD:yetenekler(playerid, params[])
{
	new meslek_id;
	if(sscanf(params, "d", meslek_id)) {
	    KullanimMesaji(playerid, "/yetenekler [meslek id]");
	    SendClientMessage(playerid, RENK_SARI, "[MESLEKLER]:{FFFFFF} 1: Kamyon Þöförü - 2: Balýkçý - 3: Madenci");
	    return 1;
	}
	if(meslek_id < 1 || meslek_id > 3) return HataMesaji(playerid, "Girilen meslek geçersiz. (1-4)");
	
	new level = 1;
	switch(meslek_id) {
	    case 1: {
			if(OyuncuBilgi[playerid][oKamyoncuTeslimat] >= 25 && OyuncuBilgi[playerid][oKamyoncuTeslimat] < 75) level = 2;
			else if(OyuncuBilgi[playerid][oKamyoncuTeslimat] >= 75 && OyuncuBilgi[playerid][oKamyoncuTeslimat] < 150) level = 3;
			else if(OyuncuBilgi[playerid][oKamyoncuTeslimat] >= 175 && OyuncuBilgi[playerid][oKamyoncuTeslimat] < 325) level = 4;
			else if(OyuncuBilgi[playerid][oKamyoncuTeslimat] >= 325) level = 5;
			SunucuMesaji(playerid, "%s adet teslimat yapmýþsýn, kamyon þöförü levelin: %d", NumaraFormati(OyuncuBilgi[playerid][oKamyoncuTeslimat], ""), level);
	    }
	    case 2: {
			if(OyuncuBilgi[playerid][oBalikYetenek] >= 0 && OyuncuBilgi[playerid][oBalikYetenek] < 100) level = 1;
			else if(OyuncuBilgi[playerid][oBalikYetenek] >= 100 && OyuncuBilgi[playerid][oBalikYetenek] < 200) level = 2;
			else if(OyuncuBilgi[playerid][oBalikYetenek] >= 200 && OyuncuBilgi[playerid][oBalikYetenek] < 400) level = 3;
			else if(OyuncuBilgi[playerid][oBalikYetenek] >= 400) level = 4;
			SunucuMesaji(playerid, "%s adet balýk tutmuþsun, balýk levelin: %d", NumaraFormati(OyuncuBilgi[playerid][oBalikYetenek], ""), level);
	    }
	    case 3: {
			if(OyuncuBilgi[playerid][oMadenYetenek] >= 0 && OyuncuBilgi[playerid][oMadenYetenek] < 100) level = 1;
			else if(OyuncuBilgi[playerid][oMadenYetenek] >= 100 && OyuncuBilgi[playerid][oMadenYetenek] < 200) level = 2;
			else if(OyuncuBilgi[playerid][oMadenYetenek] >= 200 && OyuncuBilgi[playerid][oMadenYetenek] < 400) level = 3;
			else if(OyuncuBilgi[playerid][oMadenYetenek] >= 400) level = 4;
			SunucuMesaji(playerid, "%s adet maden kazmýþsýn, madenci levelin: %d", NumaraFormati(OyuncuBilgi[playerid][oMadenYetenek], ""), level);
		}
	}
	return 1;
}

CMD:vwsifirla(playerid, params[])
{
	if(Oyuncu_Binada(playerid) != -1 || Oyuncu_Evde(playerid) != -1) return HataMesaji(playerid, "Bina veya ev içerisinde bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçtayken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan komut kullanamazsýn.");
	if(GetPlayerVirtualWorld(playerid) == 0) return HataMesaji(playerid, "Sanal dünya(vw) ile ilgili bir hata tespit edilemedi.");
	foreach(new i : Player) {
	GetPlayerVirtualWorld(i);
	if(YakinlikKontrol(playerid, i, KONUSMA_MESAFESI) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
	{
		SendClientMessageEx(i, RENK_TURUNCU, "%s adlý oyuncu virtualworld deðiþtirdi. (/vwsifirla)", OyuncuIsim(playerid));
	}
	}
	SetPlayerVirtualWorld(playerid, 0);
	UyariMesaji(playerid, "Virtualworld baþarýyla sýfýrlandý.");
	return 1;
}

CMD:stats(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan komut kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdmin] < 1) return OyuncuBilgileri2(playerid, playerid);

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return OyuncuBilgileri2(playerid, playerid);

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, bilgilerini görmek için giriþ yapmasýný bekleyin.");

    OyuncuBilgileri2(playerid, oyuncuid);
	return 1;
}

CMD:okarakter(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	
	new isim[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", isim)) return KullanimMesaji(playerid, "/okarakter [oyuncu isim]");

    new oyuncuid = AktiflikKontrol(isim);
	if(IsPlayerConnected(oyuncuid)) return OyuncuBilgileri2(playerid, oyuncuid);
	
	new sorgu[144];
	format(sorgu,sizeof(sorgu),"SELECT * FROM oyuncular WHERE isim = '%s'", isim);
	mysql_tquery(mysqlB, sorgu, "Offline_Karakter", "is", playerid, isim);
	return 1;
}

CMD:senvanter(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	
	new sorgu[128];
	format(sorgu, sizeof(sorgu), "SELECT `silahID`, `ID` FROM `silahenvanter` WHERE `karakterID` = '%d'", OyuncuBilgi[playerid][oID]);
	mysql_tquery(mysqlB, sorgu, "SilahEnvanter", "d", playerid);
	return 1;
}

CMD:envanter(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	
	new icerik[2048], ekleme[144], sayi = 0;
	if(OyuncuBilgi[playerid][oPortatifRadyo] > 0) {
		format(ekleme, sizeof(ekleme), "Portatif Radyo\t%d\n", OyuncuBilgi[playerid][oFrekans]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oGPS] > 0) {
		format(ekleme, sizeof(ekleme), "GPS\tMevcut\n");
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oTamirKiti] > 0) {
		format(ekleme, sizeof(ekleme), "Tamir Kiti\t%d\n", OyuncuBilgi[playerid][oTamirKiti]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oIpUrun] > 0) {
		format(ekleme, sizeof(ekleme), "Ýp\t%d\n", OyuncuBilgi[playerid][oIpUrun]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oIlkYardim] > 0) {
		format(ekleme, sizeof(ekleme), "Ýlk Yardým Kiti\t%d\n", OyuncuBilgi[playerid][oIlkYardim]);
		strcat(icerik, ekleme), sayi++;
	}
	/*if(OyuncuBilgi[playerid][oMateryal] > 0) {
		format(ekleme, sizeof(ekleme), "Materyal\t%d\n", OyuncuBilgi[playerid][oMateryal]);
		strcat(icerik, ekleme), sayi++;
	}*/
	if(OyuncuBilgi[playerid][oOdun] > 0) {
		format(ekleme, sizeof(ekleme), "Odun\t%d\n", OyuncuBilgi[playerid][oOdun]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oTelefon] > 0) {
	    new numara[32];
	    if(OyuncuBilgi[playerid][oTelefonNumarasi] == 0) format(numara, sizeof(numara), "Yok");
	    else format(numara, sizeof(numara), "%d", OyuncuBilgi[playerid][oTelefonNumarasi]);
		format(ekleme, sizeof(ekleme), "Telefon\t%s\n", numara);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oMaymuncuk] > 0) {
		format(ekleme, sizeof(ekleme), "Maymuncuk\t%d\n", OyuncuBilgi[playerid][oMaymuncuk]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oBidon] > 0) {
		format(ekleme, sizeof(ekleme), "Bidon\t%d\n", OyuncuBilgi[playerid][oBidonBenzin]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oUyusturucu] > 0) {
		format(ekleme, sizeof(ekleme), "Uyuþturucu\t%d\n", OyuncuBilgi[playerid][oUyusturucu]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oTohum] > 0) {
		format(ekleme, sizeof(ekleme), "Tohum\t%d\n", OyuncuBilgi[playerid][oTohum]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oSaksi] > 0) {
		format(ekleme, sizeof(ekleme), "Saksý\t%d\n", OyuncuBilgi[playerid][oSaksi]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oGubre] > 0) {
		format(ekleme, sizeof(ekleme), "Gübre\t%d\n", OyuncuBilgi[playerid][oGubre]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oIslenmemisMadde] > 0) {
		format(ekleme, sizeof(ekleme), "Ýþlenmemiþ Madde\t%d\n", OyuncuBilgi[playerid][oIslenmemisMadde]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oYemler][0] > 0) {
		format(ekleme, sizeof(ekleme), "Ekmek\t%d\n", OyuncuBilgi[playerid][oYemler][0]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oYemler][1] > 0) {
		format(ekleme, sizeof(ekleme), "Boru Kurdu\t%d\n", OyuncuBilgi[playerid][oYemler][1]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oYemler][2] > 0) {
		format(ekleme, sizeof(ekleme), "Sahte Yem\t%d\n", OyuncuBilgi[playerid][oYemler][2]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oYemler][3] > 0) {
		format(ekleme, sizeof(ekleme), "Tavuk Göðsü\t%d\n", OyuncuBilgi[playerid][oYemler][3]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oYemler][4] > 0) {
		format(ekleme, sizeof(ekleme), "Karides\t%d\n", OyuncuBilgi[playerid][oYemler][4]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oBaliklar][0] > 0) {
		format(ekleme, sizeof(ekleme), "Çipura\t%d gram\n", OyuncuBilgi[playerid][oBaliklar][0]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oBaliklar][1] > 0) {
		format(ekleme, sizeof(ekleme), "Levrek\t%d gram\n", OyuncuBilgi[playerid][oBaliklar][1]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oBaliklar][2] > 0) {
		format(ekleme, sizeof(ekleme), "Lagos\t%d gram\n", OyuncuBilgi[playerid][oBaliklar][2]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oBaliklar][3] > 0) {
		format(ekleme, sizeof(ekleme), "Lambuka\t%d gram \n", OyuncuBilgi[playerid][oBaliklar][3]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oBaliklar][4] > 0) {
		format(ekleme, sizeof(ekleme), "Orkinos\t%d gram\n", OyuncuBilgi[playerid][oBaliklar][4]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oBaliklar][5] > 0) {
		format(ekleme, sizeof(ekleme), "Morina\t%d gram\n", OyuncuBilgi[playerid][oBaliklar][5]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oBaliklar][6] > 0) {
		format(ekleme, sizeof(ekleme), "Somon\t%d gram\n", OyuncuBilgi[playerid][oBaliklar][6]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oBaliklar][7] > 0) {
		format(ekleme, sizeof(ekleme), "Sarina\t%d gram\n", OyuncuBilgi[playerid][oBaliklar][7]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oBaliklar][8] > 0) {
		format(ekleme, sizeof(ekleme), "Barramundi\t%d gram\n", OyuncuBilgi[playerid][oBaliklar][8]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oBaliklar][9] > 0) {
		format(ekleme, sizeof(ekleme), "Zargana\t%d gram\n", OyuncuBilgi[playerid][oBaliklar][9]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oBaliklar][10] > 0) {
		format(ekleme, sizeof(ekleme), "Kefal\t%d gram\n", OyuncuBilgi[playerid][oBaliklar][10]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oBaliklar][11] > 0) {
		format(ekleme, sizeof(ekleme), "Mazak\t%d gram\n", OyuncuBilgi[playerid][oBaliklar][11]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oBaliklar][12] > 0) {
		format(ekleme, sizeof(ekleme), "Bakalyaro\t%d gram\n", OyuncuBilgi[playerid][oBaliklar][12]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oBaliklar][13] > 0) {
		format(ekleme, sizeof(ekleme), "Akya\t%d gram\n", OyuncuBilgi[playerid][oBaliklar][13]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oBaliklar][14] > 0) {
		format(ekleme, sizeof(ekleme), "Ahtapot\t%d gram\n", OyuncuBilgi[playerid][oBaliklar][14]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oMadenler][0] > 0) {
		format(ekleme, sizeof(ekleme), "Kömür\t%d gram\n", OyuncuBilgi[playerid][oMadenler][0]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oMadenler][1] > 0) {
		format(ekleme, sizeof(ekleme), "Bakýr\t%d gram\n", OyuncuBilgi[playerid][oMadenler][1]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oMadenler][2] > 0) {
		format(ekleme, sizeof(ekleme), "Bronz\t%d gram\n", OyuncuBilgi[playerid][oMadenler][2]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oMadenler][3] > 0) {
		format(ekleme, sizeof(ekleme), "Gümüþ\t%d gram \n", OyuncuBilgi[playerid][oMadenler][3]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oMadenler][4] > 0) {
		format(ekleme, sizeof(ekleme), "Altýn\t%d gram\n", OyuncuBilgi[playerid][oMadenler][4]);
		strcat(icerik, ekleme), sayi++;
	}
	/*if(OyuncuBilgi[playerid][oGovde] > 0) {
		format(ekleme, sizeof(ekleme), "Silah Gövdesi\t%d\n", OyuncuBilgi[playerid][oGovde]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oNamlu] > 0) {
		format(ekleme, sizeof(ekleme), "Silah Namlusu\t%d\n", OyuncuBilgi[playerid][oNamlu]);
		strcat(icerik, ekleme), sayi++;
	}
	if(OyuncuBilgi[playerid][oHazne] > 0) {
		format(ekleme, sizeof(ekleme), "Silah Haznesi\t%d\n", OyuncuBilgi[playerid][oHazne]);
		strcat(icerik, ekleme), sayi++;
	}*/
	if(!sayi) return HataMesaji(playerid, "Envanterinizde hiç bir þey yok.");
	DialogGoster(playerid, DIALOG_ENVANTER, DIALOG_STYLE_TABLIST, "vRP: {FFFFFF}Envanter", icerik, "Seç", "Kapat");
	return 1;
}

CMD:olusum(playerid, params[])
{
	if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Bir birlik üyesi deðilsin.");
	new birlikid = OyuncuBilgi[playerid][oBirlik];
	if(BirlikBilgi[birlikid][oKanal] == 0) return HataMesaji(playerid, "Birlik kanalýn birlik yöneticileri tarafýndan kapatýlmýþ.");
	if(OyuncuBilgi[playerid][oBirlikKanal] == false) return HataMesaji(playerid, "Öncelikle birlik kanalýný açmalýsýn. (/ayarlar)");
	if(isnull(params)) return KullanimMesaji(playerid, "/olusum [mesajýn]");

	new isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, isim, sizeof(isim));

	for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
	foreach(new i : Player) if(OyuncuBilgi[i][oBirlik] == birlikid && OyuncuBilgi[i][oBirlikKanal] == true) SendClientMessageEx(i, RENK_BEYAZ, "{005e29}[BIRLIK] %s %s: {FFFFFF}%s", OyuncuRutbeAdi(playerid), isim, params);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [chat] [%s] %s(%d): %s", Tarih(), BirlikBilgi[birlikid][birlikAd], oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/birlikchat.txt", "%s", log_icerik);
	return 1;
}

CMD:arutbe(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5  && OyuncuBilgi[playerid][oBirlikMod] == 0) return YetkinizYok(playerid);
	static oyuncuid, rutbe;
	if(sscanf(params, "ud", oyuncuid, rutbe)) return KullanimMesaji(playerid, "/arutbe [ID / Oyuncu] [rutbe]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen oyuncu aktif deðil.");
	if(oyuncuid == playerid && OyuncuBilgi[playerid][oAdmin] < 7 && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Kendi rütbeni deðiþtiremezsin.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ.");
	if(OyuncuBilgi[oyuncuid][oBirlik] < 0) return HataMesaji(playerid, "Oyuncu herhangi birlikte deðil.");
	new birlikid = OyuncuBilgi[oyuncuid][oBirlik];
	if(BirlikBilgi[birlikid][birlikMaksRutbe] < rutbe || rutbe < 1) return HataMesaji(playerid, "Geçersiz rütbe.");
	if(rutbe == BirlikBilgi[birlikid][birlikMaksRutbe]) return HataMesaji(playerid, "Bu rütbe sadece /liderayarla ile verilebilir.");

	OyuncuBilgi[oyuncuid][oBirlikRutbe] = rutbe;
	OyuncuKaydet(oyuncuid);
	SunucuMesaji(playerid, "%s adlý oyuncunun rütbesini %s(%d) olarak deðiþtirdin.", OyuncuIsim(oyuncuid), OyuncuRutbeAdi(oyuncuid), rutbe);
	SunucuMesaji(oyuncuid, "%s adlý yetkili tarafýndan rütben %s(%d) olarak deðiþtirildi.", OyuncuBilgi[playerid][oAdminNick], OyuncuRutbeAdi(oyuncuid), rutbe);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [ADM] %s, %s(%d) adlý kiþiye %d rütbesini verdi. (birlik: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], rutbe, BirlikBilgi[birlikid][birlikAd]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
	return 1;
}

CMD:forumid(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	
	new forumid;
	if(sscanf(params, "d", forumid)) return KullanimMesaji(playerid, "/forumid [id]");
	if(forumid < 1) return HataMesaji(playerid, "Geçersiz ID.");

	new sorgu[144];
	format(sorgu,sizeof(sorgu),"SELECT isim, ID, Level FROM oyuncular WHERE hesap = '%d'", forumid);
	mysql_tquery(mysqlB, sorgu, "Forum_ID", "i", playerid);
	return 1;
}

CMD:binalar(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new mesaj[144 * MAKSIMUM_BINA];
	format(mesaj, sizeof(mesaj), "ID\tÝsim\tTür\n");
	for(new i = 0; i != MAKSIMUM_BINA; i ++) if(BinaBilgi[i][bKullanimda] == true)
	{
	    format(mesaj, sizeof(mesaj), "%s{FFFFFF}%d\t%s\t%s\n", mesaj, i, BinaBilgi[i][bIsim], binaturisim(BinaBilgi[i][binaTur]));
	}
	DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Binalar", mesaj, "Kapat", "");
	return 1;
}

CMD:birlikler(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new mesaj[256 * MAKSIMUM_BIRLIK];
	format(mesaj, sizeof(mesaj), "ID\tÝsim\tTür\n");
	for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikKullanimda] == true)
	{
	    format(mesaj, sizeof(mesaj), "%s{FFFFFF}%d\t%s\t%s\n", mesaj, i, BirlikBilgi[i][birlikAd], birlikturadi(i));
	}
	DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Birlikler", mesaj, "Kapat", "");
	return 1;
}


CMD:ekipler(playerid, params[])
{
    if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Birlik üyesi deðilsin.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "Bu komutu kullanmak için birlik türünüz uyumlu deðildir.");
	new mesaj[256 * MAKSIMUM_EKIP];
	format(mesaj, sizeof(mesaj), "ID\tEkip\tLider\n");
	for(new i = 0; i != MAKSIMUM_EKIP; i ++) if(EkipBilgi[i][ekipKullanimda] == true)
	{
	    format(mesaj, sizeof(mesaj), "%s{FFFFFF}%d\t%s\t%s\n", mesaj, i, EkipBilgi[i][ekipAd], OyuncuIsim(EkipBilgi[i][ekipYoneticisi]));
	}
	DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Ekipler", mesaj, "Kapat", "");
	return 1;
}

CMD:birlikkur(playerid, params[])
{
	if(!OyuncuBilgi[playerid][oGiris]) return HataMesaji(playerid, "Bu komutu kullanmak için giriþ yapmalýsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçtayken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oBirlik] != -1) return HataMesaji(playerid, "Birliðin varken bu seçeneði kullanamazsýn.");

    if(OyuncuBilgi[playerid][oSeviye] < BIRLIK_LEVEL || OyuncuBilgi[playerid][oPara] < BIRLIK_UCRET) {
		HataMesaji(playerid, "Birlik kurmak için %d level olman ve %s miktarýnda paran olmasý gerekiyor.", BIRLIK_LEVEL, NumaraFormati(BIRLIK_UCRET));
		return 1;
	}
	new bilgi[256];
	format(bilgi, sizeof(bilgi), "{FFFFFF}Oluþturmak istediðiniz birlik ismini girin;\n{B70000}NOT: {FFFFFF}Birlik kurma ücreti; %s", NumaraFormati(BIRLIK_UCRET));
	DialogGoster(playerid, DIALOG_BIRLIKKUR, DIALOG_STYLE_INPUT, "Birlik Kurma Paneli", bilgi, "Tamam", "Ýptal");
	return 1;
}

CMD:giselerikapat(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) return HataMesaji(playerid, "Polis deðilsin.");
	
	new son_durum;
	for(new i = 0; i != MAKSIMUM_GISE; i++) if(GiseBilgi[i][giseKullanimda]) {
	    switch(GiseBilgi[i][giseDurum]) {
			case 2: GiseBilgi[i][giseDurum] = 0;
			default: GiseBilgi[i][giseDurum] = 2;
	    }
	    son_durum = GiseBilgi[i][giseDurum];
	}
	if(son_durum == 0) SunucuMesaji(playerid, "Giþeler açýldý.");
	else SunucuMesaji(playerid, "Giþeler kapatýldý.");
	return 1;
}

CMD:birlik(playerid, params[]) {
	if(!OyuncuBilgi[playerid][oGiris]) return HataMesaji(playerid, "Bu komutu kullanmak için giriþ yapmalýsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	new icerik[1024], birlikid, gereksinim[64], techizatdurum[64];
	if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Birlik üyesi deðilsin.");
	birlikid = OyuncuBilgi[playerid][oBirlik];
	if(OyuncuBilgi[playerid][oBirlikSQLID] == 0) OyuncuBilgi[playerid][oBirlikSQLID] = BirlikBilgi[birlikid][birlikID], OyuncuKaydet(playerid);
	switch(BirlikBilgi[birlikid][birlikLevel]) {
		case 1: format(gereksinim, sizeof(gereksinim), "3 Üye");
		case 2: format(gereksinim, sizeof(gereksinim), "5 Üye");
		case 3: format(gereksinim, sizeof(gereksinim), "7 Üye veya %s", NumaraFormati(BIRLIK_LEVELUCRET, ""));
		case 4: format(gereksinim, sizeof(gereksinim), "10 Üye veya %s", NumaraFormati(BIRLIK_LEVELUCRET, ""));
		case 5: format(gereksinim, sizeof(gereksinim), "15 Üye veya %s", NumaraFormati(BIRLIK_LEVELUCRET, ""));
		case 6: format(gereksinim, sizeof(gereksinim), "Son Seviye");
	}
	format(icerik, sizeof(icerik), "Seçenek\t\tÝþlem\n{5781FF}Bilgiler\n{5781FF}Üyeler\n{5781FF}Birlik Araçlarý\n{5781FF}Davet Et\n{5781FF}Birlikten At\n{5781FF}Rütbe Ver\n{5781FF}Birlik Yetkilisi Ayarla\n{5781FF}Duyuru Düzenle\n{5781FF}Araç Ekle\n{5781FF}Araçlarý Spawnla\n{5781FF}Maks. Rütbe\t\t[%d]\n{5781FF}OOC Kanal\t\t[%s]\n", BirlikBilgi[birlikid][birlikMaksRutbe], (BirlikBilgi[birlikid][oKanal] == 0) ? ("Aç") : ("Kapat"));
	format(icerik, sizeof(icerik), "%s{5781FF}Rütbeler\t\t[Düzenle]\n{5781FF}Maaþlar\t\t[Düzenle]\n{5781FF}Birimler\t\t[Düzenle]\n{5781FF}Seviye Atlat\t\t[%s]\n{5781FF}Kasa Ayarla\t\t[%s]\n{5781FF}Kasa Ýþlemleri\n", icerik, gereksinim, NumaraFormati(KASA_KONUMLANDIRMA_UCRET));
	if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && (BirlikBilgi[birlikid][birlikMaksRutbe] == OyuncuBilgi[playerid][oBirlikRutbe] || OyuncuBilgi[playerid][oBirlikLider] == BirlikBilgi[birlikid][birlikID])) format(techizatdurum, sizeof(techizatdurum), "{5781FF}Techizat Ýzni\t\t[%s]\n", (techizatizni == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk")), strcat(icerik, techizatdurum);
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL && OyuncuBirlikTuru(playerid) != BIRLIK_DEVLET) strcat(icerik, "{B70000}Ayrýl\n");
	if(BirlikBilgi[birlikid][birlikMaksRutbe] == OyuncuBilgi[playerid][oBirlikRutbe] && OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL && OyuncuBirlikTuru(playerid) != BIRLIK_DEVLET) strcat(icerik, "{B70000}Birlik Sil\n");
	DialogGoster(playerid, DIALOG_BIRLIK, DIALOG_STYLE_TABLIST_HEADERS, BirlikBilgi[birlikid][birlikAd], icerik, "Seç", "Kapat");
	return 1;
}

CMD:paintball(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan komut kullanamazsýn.");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1726.88, -1636.61, 20.22) && OyuncuBilgi[playerid][oPaintball] == -1) return HataMesaji(playerid, "Paintball noktasýnda deðilsin.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçtayken paintball kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Dondurulma etkisindeyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýnda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDestek] == true) return HataMesaji(playerid, "Desteðin açýkken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oTaser] == true) return HataMesaji(playerid, "Taserin açýkken paintballa giremezsin.");
	if(OyuncuBilgi[playerid][oBeanbag] == true) return HataMesaji(playerid, "Beanbangýn üzerindeyken paintballa giremezsin.");
	if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bunu yapamazsýn.");
	if(paintball_sistemi == false) return HataMesaji(playerid, "Paintball þu anlýk devre dýþý, lütfen daha sonra tekrar deneyin.");
	if(PetKontrol[playerid] != -1) return HataMesaji(playerid, "Pet kontrol ederken bunu yapamazsýn.");
	
	new icerik[512];
	if(Paintball_ID(playerid) == -1) format(icerik, sizeof(icerik), "Lobi Kur\nLobiler");
	else if(Paintball_ID(playerid) != -1) format(icerik, sizeof(icerik), "Lobini Kapat\n");
	if(OyuncuBilgi[playerid][oPaintball] != -1 && Paintball_ID(playerid) == -1) format(icerik, sizeof(icerik), "Ayrýl\n");
	DialogGoster(playerid, DIALOG_PAINTBALL, DIALOG_STYLE_TABLIST, "cPaintball", icerik, "Seç", "Kapat");
	return 1;
}

CMD:ipbagla(playerid, params[])
{
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oGozBagli] == true) return HataMesaji(playerid, "Gözünüz baðlýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oBagli] == true) return HataMesaji(playerid, "Ýple baðlýsýnýz.");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/ipbagla [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!YakinlikKontrol(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Oyuncuya yakýn deðilsin.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");

	if(OyuncuBilgi[oyuncuid][oBagli] == false) {
		if(OyuncuBilgi[playerid][oDialog] > -1) return HataMesaji(playerid, "Girilen oyuncuya þu anda baðlama önerisi verilemez, diyalogu kapatmasýný bekleyin.");
		if(OyuncuBilgi[playerid][oIpUrun] == 0) return HataMesaji(playerid, "Üzerinde ip olmadan kimseyi baðlayamazsýn, marketten ip almalýsýn.");
		new mesaj[128 + MAX_PLAYER_NAME];
		format(mesaj, sizeof(mesaj), "{FFFFFF}%s adlý oyuncu sizi ip ile baðlamak istiyor.", OyuncuIsim(playerid));
		DialogGoster(oyuncuid, DIALOG_IPBAGLAMA, DIALOG_STYLE_MSGBOX, "Ýp Baðlama - Talep", mesaj, "Kabul", "Reddet");
		SetPVarInt(oyuncuid, "ipbaglama_id", playerid);
	}
	else if(OyuncuBilgi[oyuncuid][oBagli] == true) {
		OyuncuBilgi[oyuncuid][oBagli] = false;
		ClearAnimations(oyuncuid);
		SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_NONE);
		new emote[128 + MAX_PLAYER_NAME];
		format(emote, sizeof(emote), "%s adlý kiþinin ip baðýný açar.", OyuncuIsim(oyuncuid));
		cmd_me(playerid, emote);
	}
	return 1;
}

CMD:gozbagla(playerid, params[])
{
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oGozBagli] == true) return HataMesaji(playerid, "Gözünüz baðlýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn.");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/gozbagla [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!YakinlikKontrol(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Oyuncuya yakýn deðilsin.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");

	if(OyuncuBilgi[oyuncuid][oGozBagli] == false) {
		if(OyuncuBilgi[playerid][oDialog] > -1) return HataMesaji(playerid, "Girilen oyuncuya þu anda göz baðlama önerisi verilemez, diyalogu kapatmasýný bekleyin.");

		new mesaj[128 + MAX_PLAYER_NAME];
		format(mesaj, sizeof(mesaj), "{FFFFFF}%s adlý oyuncu gözünüzü baðlamak istiyor.", OyuncuIsim(playerid));
		DialogGoster(oyuncuid, DIALOG_GOZBAGLA, DIALOG_STYLE_MSGBOX, "Göz Baðlama - Talep", mesaj, "Kabul", "Reddet");
		SetPVarInt(oyuncuid, "gozbaglayanid", playerid);
	}
	else if(OyuncuBilgi[oyuncuid][oGozBagli] == true) {
		OyuncuBilgi[oyuncuid][oGozBagli] = false;
		PlayerTextDrawHide(oyuncuid, siyahekran[oyuncuid]);
		new emote[128 + MAX_PLAYER_NAME];
		format(emote, sizeof(emote), "%s adlý kiþinin göz baðýný açar.", OyuncuIsim(oyuncuid));
		cmd_me(playerid, emote);
	}
	return 1;
}

CMD:boombox(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oMuzikKutusu] == 0) return HataMesaji(playerid, "Müzik kutun yok.");
	if(Oyuncu_Isyerinde(playerid) != -1 && IsyeriBilgi[Oyuncu_Isyerinde(playerid)][isyeriTur] == 8) return HataMesaji(playerid, "Bar tipi iþyeri içinde boombox koyamazsýn.");

	new menu[256];
	menu[0] = 0;
	if(!BoomboxBilgi[playerid][boomboxKullanimda]) strcat(menu, "Yerleþtir\n");
	else if(BoomboxBilgi[playerid][boomboxKullanimda]) strcat(menu, "Kaldýr\nURL Deðiþtir");
	DialogGoster(playerid, DIALOG_BOOMBOX, DIALOG_STYLE_TABLIST, "Boombox", menu, "Seç", "Kapat");
	return 1;
}

CMD:bbkaldir(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	foreach (new i : Player) if(BoomboxBilgi[i][boomboxKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxBilgi[i][boomboxPos][0], BoomboxBilgi[i][boomboxPos][1], BoomboxBilgi[i][boomboxPos][2])) {
		Boombox_Kaldir(i);

		SunucuMesaji(playerid, "%s adlý oyuncunun müzik kutusunu kaldýrdýn.", OyuncuIsim(i));
		return SunucuMesaji(i, "%s adlý yetkili müzik kutunu kaldýrdý.", OyuncuBilgi[playerid][oAdminNick]);
	}
	HataMesaji(playerid, "Yakýnýnda müzik kutusu yok.");
	return 1;
}

CMD:kampatesi(playerid, params[])
{
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oVIP] < 2) return HataMesaji(playerid, "Bu komutu Altýn VIP ve üzeri kullanabilir.");

	new tip[24], Float:objex, Float:objey, Float:objez;
	if(sscanf(params, "s[24]", tip))
 	{
	 	KullanimMesaji(playerid, "/kampatesi [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ISIMLER]:{FFFFFF} kur, kaldir");
		return 1;
	}
    if(!strcmp(tip, "kur", true))
	{
	    if(OyuncuBilgi[playerid][oKampAtesi] == true)
	        return HataMesaji(playerid, "Zaten kamp ateþi kurmuþsunuz.");

		if(OyuncuBilgi[playerid][oOdun] < 1 || OyuncuBilgi[playerid][oCakmak] == false && OyuncuBilgi[playerid][oKibrit] < 1)
		    return HataMesaji(playerid, "Odununuz ya da ateþi yakabileceðiniz bir çakmaðýnýz yok.");

		if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		    return HataMesaji(playerid, "Interior ve farklý sanal dünyalara kamp ateþi kurulamaz.");

		GetPlayerPos(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
		GetPlayerFacingAngle(playerid, OyuncuBilgi[playerid][oPos][3]);
		OyuncuBilgi[playerid][oKampAtesiObje][0] = CreateDynamicObject(841, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]-1, 0.000, 0.000, OyuncuBilgi[playerid][oPos][3]);
		OyuncuBilgi[playerid][oKampAtesiObje][1] = CreateDynamicObject(18688, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]-2.3, 0.000, 0.000, OyuncuBilgi[playerid][oPos][3]);
		OyuncuBilgi[playerid][oKampAtesi] = true;
		OyuncuBilgi[playerid][oOdun]--;
		if(OyuncuBilgi[playerid][oKibrit] > 0) OyuncuBilgi[playerid][oKibrit]--;
		SunucuMesaji(playerid, "Kamp ateþi yerleþtirdin.");
		return 1;
	}
	else if(!strcmp(tip, "kaldir", true))
	{
	    if(OyuncuBilgi[playerid][oKampAtesi] == false)
	        return HataMesaji(playerid, "Kamp ateþi yerleþtirmemiþsin.");

        GetDynamicObjectPos(OyuncuBilgi[playerid][oKampAtesiObje][0], objex, objey, objez);
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, objex, objey, objez))
			return HataMesaji(playerid, "Kamp ateþine yakýn deðilsin.");

        DestroyDynamicObject(OyuncuBilgi[playerid][oKampAtesiObje][0]);
        DestroyDynamicObject(OyuncuBilgi[playerid][oKampAtesiObje][1]);
        OyuncuBilgi[playerid][oKampAtesi] = false;
        SunucuMesaji(playerid, "Kamp ateþi baþarýyla kaldýrýldý.");
		return 1;
	}
	return 1;
}

CMD:sigarayak(playerid,params[])
{
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
    if(OyuncuBilgi[playerid][oSigara] < 1) return HataMesaji(playerid, "Sigaran bulunmuyor.");
	if(OyuncuBilgi[playerid][oCakmak] == false && OyuncuBilgi[playerid][oKibrit] < 1) return HataMesaji(playerid, "Çakmaðýn veya kibritin bulunmuyor.");

    new oyuncuid, mesaj[256];
	if(sscanf(params, "u", oyuncuid) || oyuncuid == playerid)
	{
		if(OyuncuBilgi[playerid][oSigaraDurum] < 1) return HataMesaji(playerid, "Sigaran aðzýnda deðil.");

		cmd_ame(playerid, "çakmaðý ile kendi sigarasýný yakar.");
		SunucuMesaji(playerid, "Sigara içmek için \"~k~~PED_FIREWEAPON~\" tuþunu kullanabilirsiniz.");
		OyuncuBilgi[playerid][oSigaraIciyor] = 1;
		OyuncuBilgi[playerid][oSigaraKalanHak] = 10;
		OyuncuBilgi[playerid][oSigara]--;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		return 1;
	}

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!YakinlikKontrol(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Oyuncuya yakýn deðilsin.");
	if(OyuncuBilgi[oyuncuid][oSigaraDurum] == 0) return HataMesaji(playerid, "Kiþinin aðzýnda sigara yok.");

	format(mesaj, sizeof(mesaj), "çakmaðýný %s adlý kiþinin sigarasýna doðru yaklaþtýrýr ve sigarasýný yakar", OyuncuIsim(oyuncuid));
	cmd_ame(playerid, mesaj);
	SunucuMesaji(oyuncuid, "Sigarayý kullanmak için {FFFF00}~k~~PED_FIREWEAPON~{FFFFFF} tuþunu kullanabilirsiniz.");
	OyuncuBilgi[oyuncuid][oSigaraIciyor] = 1;
	OyuncuBilgi[oyuncuid][oSigaraKalanHak] = 10;
	OyuncuBilgi[oyuncuid][oSigara]--;
	SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_SMOKE_CIGGY);
	return 1;
}

CMD:sigara(playerid,params[])
{
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oSigara] < 1) return HataMesaji(playerid,"Sigaran bulunmuyor.");

	switch(OyuncuBilgi[playerid][oSigaraDurum]) {
        case 0: {
			cmd_ame(playerid, "sigarasýný dudaklarýnýn arasýna sýkýþtýrýr.");
			OyuncuBilgi[playerid][oSigaraDurum] = 1;
		}
		case 1: {
        	cmd_ame(playerid, "sigarasýný dudaklarýnýn arasýndan alýr.");
			OyuncuBilgi[playerid][oSigaraDurum] = 0;
		}
	}
	return 1;
}

CMD:havaalanikapi(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1961.7814, -2189.9543, 13.5469)) return HataMesaji(playerid, "Havaalanýna yakýn deðilsin.");
	if(OyuncuBilgi[playerid][oBirlik] == -1 || OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_DEVLET) return HataMesaji(playerid, "Bu kapýyý açmak için yetkin yok.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	if(hdurum) {
        hdurum = false;
        MoveDynamicObject(HavaAlaniKapi[0], 1964.48792, -2189.76563, 13.55250, 3.0);
        MoveDynamicObject(HavaAlaniKapi[1], 1958.99146, -2189.76563, 13.55250, 3.0);
		for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikTur] == BIRLIK_POLIS || BirlikBilgi[i][birlikTur] == BIRLIK_DEVLET)
			BirlikMesaji(i, RENK_TELSIZ, "TELSIZ: %s hava alaný kapýlarýný kapattý.", OyuncuIsim(playerid));
	}
	else if(!hdurum) {
        hdurum = true;
        MoveDynamicObject(HavaAlaniKapi[0], 1969.00000, -2189.76563, 13.55250, 3.0);
        MoveDynamicObject(HavaAlaniKapi[1], 1954.00000, -2189.76563, 13.55250, 3.0);
		for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikTur] == BIRLIK_POLIS || BirlikBilgi[i][birlikTur] == BIRLIK_DEVLET)
			BirlikMesaji(i, RENK_TELSIZ, "TELSIZ: %s hava alaný kapýlarýný açtý.", OyuncuIsim(playerid));
	}
	return 1;
}

CMD:destek(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici olarak iþbaþýnda isen bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballda bu komutu kullanamazsýn.");

	if(OyuncuBilgi[playerid][oDestek] == false) {
	    for(new i = 0; i != MAKSIMUM_DESTEK; i++) if(DestekBilgi[i][destekKullanimda] == false) {
	        DestekBilgi[i][destekKullanimda] = true;
			DestekBilgi[i][destekOyuncu] = playerid;
	        switch(i) {
				case 0: DestekBilgi[i][destekRenk] = 0xFF0000AA;
				case 1: DestekBilgi[i][destekRenk] = 0x008000AA;
				case 2: DestekBilgi[i][destekRenk] = 0xA52A2AAA;
				case 3: DestekBilgi[i][destekRenk] = 0x00FFFFAA;
				case 4: DestekBilgi[i][destekRenk] = 0xFFFF00AA;
				case 5: DestekBilgi[i][destekRenk] = 0xFF1493AA;
				case 6: DestekBilgi[i][destekRenk] = 0xFFA500AA;
				case 7: DestekBilgi[i][destekRenk] = 0x0000FFAA;
				default: DestekBilgi[i][destekRenk] = 0xFF0000AA;
	        }
		    OyuncuBilgi[playerid][oDestek] = true;
			GetPlayerPos(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
			EskiVeriler[playerid][eskiRenk] = GetPlayerColor(playerid);
		    foreach(new o : Player) if(OyuncuBirlikTuru(o) == BIRLIK_POLIS) SetPlayerMarkerForPlayer(o, playerid, DestekBilgi[i][destekRenk]);
			cmd_ame(playerid, "telsizden destek istiyor.");
			BirlikMesaji(OyuncuBilgi[playerid][oBirlik], DestekBilgi[i][destekRenk], "BIRLIK: %s, %s lokasyonuna destek istiyor.", OyuncuIsim(playerid), LokasyonBul(OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]));
			return 1;
		}
		HataMesaji(playerid, "Tüm destek talepleri kullanýmda.");
	}
	else if(OyuncuBilgi[playerid][oDestek] == true) {
	    for(new i = 0; i != MAKSIMUM_DESTEK; i++) if(DestekBilgi[i][destekKullanimda] == true && DestekBilgi[i][destekOyuncu] == playerid) {
	        DestekBilgi[i][destekKullanimda] = false;
	        DestekBilgi[i][destekOyuncu] = INVALID_PLAYER_ID;
			BirlikMesaji(OyuncuBilgi[playerid][oBirlik], DestekBilgi[i][destekRenk], "%s adlý kiþi destek talebini sonlandýrdý.", OyuncuIsim(playerid));
			break;
	    }
	    OyuncuBilgi[playerid][oDestek] = false;
	    foreach(new i : Player) if(OyuncuBirlikTuru(i) == BIRLIK_POLIS) SetPlayerMarkerForPlayer(i, playerid, EskiVeriler[playerid][eskiRenk]);
	}
	return 1;
}

CMD:renkler(playerid, params[])
{
	ShowCarColorList(playerid,0,"Araç Renkleri","Kapat","");
	return 1;
}

CMD:labelekle(playerid, params[])
{
    if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "Birlik türünüz polis deðil.");
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçtayken bu komutu kullanamazsýn.");
    new mesaj[128];
    if(sscanf(params, "s[128]", mesaj)) return KullanimMesaji(playerid, "/labelekle [Yazý]");
    new id = -1;
	id = Label_Yarat(playerid, mesaj);
	if(id == -1) return HataMesaji(playerid, "Sunucu maksimum label limitine ulaþýldýðýndan label yaratýlamýyor.");
	SunucuMesaji(playerid, "Label baþarýyla oluþturuldu. (ID: %d)", id);
	return 1;
}

CMD:labelsil(playerid, params[])
{
    if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "Birlik türünüz polis deðil.");

	new labelid;
	if(sscanf(params, "d", labelid)) return KullanimMesaji(playerid, "/labelsil [Label ID]");
 	Label_Sil(labelid);
	SunucuMesaji(playerid, "%d ID'li labeli sildin.", labelid);
	return 1;
}

CMD:mdc(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "Birlik türünüz polis deðil.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilken bu komutu kullanamazsýn.");
	if(Arac_BirlikTuru(GetPlayerVehicleID(playerid)) != BIRLIK_POLIS) return HataMesaji(playerid, "Bu araç LSPD'ye ait deðil.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 497 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 523) return HataMesaji(playerid, "Motorlarda ve helikopterlerde MDC'yi kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýndayken bu komutu kullanamazsýn.");

	DialogGoster(playerid, DIALOG_MDC, DIALOG_STYLE_TABLIST, "Mobil Veri Tabaný", "Arananlar Listesi\nBolo Kayýtlarý\nKiþi Sorgula\nVatandaþlýk Numarasý Sorgulama\nTelefon Numarasý Sorgulama\nCeza Sorgula\nPlaka Sorgula\nHesap Numarasý Sorgulama", "Seç", "Kapat");
	return 1;
}

CMD:asahipsiz(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 3) return YetkinizYok(playerid);

	new mesaj[2048], sayi = 0;
	format(mesaj, sizeof(mesaj), "ID\tModel\tDurum\n");
	for(new i = 0; i < MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracKullanimda] && AracBilgi[i][aracSahip] == 0 && AracBilgi[i][aracBirlik] == 0)
		format(mesaj, sizeof(mesaj), "%s%d\t%s\t%s\n", mesaj, AracBilgi[i][aracYarat], AracModel(AracBilgi[i][aracModel]), AracDurum(i)), sayi++;

	if(!sayi) return HataMesaji(playerid, "Sunucuda sahipsiz araç yok.");
	DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Sahipsiz Araçlar", mesaj, "Kapat", "");
	return 1;
}

CMD:barikat(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
    if(OyuncuBilgi[playerid][oIsbasi] == false) return HataMesaji(playerid,"Ýþbaþýnda deðilken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta barikat kuramazsýn.");
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) return HataMesaji(playerid, "Eðilirken barikat kuramazsýn.");
	if(GetPVarInt(playerid, "anim") != 0) return HataMesaji(playerid, "Animasyon yaparken barikat kuramazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici iþbaþýndayken barikat kuramazsýn.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || OyuncuBilgi[playerid][oIzlenen] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Ýzleme yaparken barikat kuramazsýn.");

	new barikat_secim[sizeof(Barikatlar)];
	for(new c = 0; c != sizeof(Barikatlar); c++) barikat_secim[c] = Barikatlar[c][0];
	ShowModelSelectionMenuEx(playerid, barikat_secim, sizeof(barikat_secim), "Barikat", MODELLER_BARIKAT, 0.0, 0.0, 180.0);
	return true;
}

CMD:barikatkaldir(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
    if(OyuncuBilgi[playerid][oIsbasi] == false) return HataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçtayken barikat kaldýramazsýn.");
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) return HataMesaji(playerid, "Eðilirken barikat kaldýramazsýn.");
	if(GetPVarInt(playerid, "anim") != 0) return HataMesaji(playerid, "Anim kullanýrken barikat kaldýramazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici iþbaþýndayken barikat kaldýramazsýn.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || OyuncuBilgi[playerid][oIzlenen] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Ýzleme yaparken barikat kaldýramazsýn.");

	new id;
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/barikatkaldir [id]");
	if((id < 0 || id >= MAKSIMUM_BARIKAT) || !BarikatBilgi[id][barikatKullanimda]) return HataMesaji(playerid, "Geçersiz barikat!");

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, BarikatBilgi[id][barikatPos][0], BarikatBilgi[id][barikatPos][1], BarikatBilgi[id][barikatPos][2]))
	    return HataMesaji(playerid, "Barikata yakýn deðilsin.");

	Barikat_Kaldir(id);
	SunucuMesaji(playerid, "Barikat kaldýrýldý. (ID: %d)", id);
	return true;
}

CMD:barikatlarikaldir(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBilgi[playerid][oAdmin] < 3) return YetkinizYok(playerid);
	if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe] && OyuncuBilgi[playerid][oAdmin] < 3) return YetkinizYok(playerid);

	new sayi = 0;
	for(new i = 0; i != MAKSIMUM_BARIKAT; i ++) if(BarikatBilgi[i][barikatKullanimda]) Barikat_Kaldir(i), sayi++;
	if(sayi == 0) return HataMesaji(playerid, "Sunucuda barikat yok.");

	UyariMesaji(playerid, "%s adet barikat kaldýrýldý.", NumaraFormati(sayi, ""));
	return true;
}

CMD:barikatduzenle(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
    if(OyuncuBilgi[playerid][oIsbasi] == false) return HataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçtayken barikat düzenleyemezsin.");
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) return HataMesaji(playerid, "Eðilirken barikat düzenleyemezsin.");
	if(GetPVarInt(playerid, "anim") != 0) return HataMesaji(playerid, "Anim kullanýrken barikat düzenleyemezsin.");
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici iþbaþýndayken barikat düzenleyemezsin.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || OyuncuBilgi[playerid][oIzlenen] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Ýzleme yaparken barikat düzenleyemezsin.");

	new id;
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/barikatduzenle [id]");
	if((id < 0 || id >= MAKSIMUM_BARIKAT) || !BarikatBilgi[id][barikatKullanimda]) return HataMesaji(playerid, "Geçersiz barikat!");

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, BarikatBilgi[id][barikatPos][0], BarikatBilgi[id][barikatPos][1], BarikatBilgi[id][barikatPos][2]))
	    return HataMesaji(playerid, "Barikata yakýn deðilsin.");

	EditDynamicObject(playerid, BarikatBilgi[id][barikatObje]);
	OyuncuBilgi[playerid][oEditlenenBarikat] = id;
	SunucuMesaji(playerid, "Barikatý düzenliyorsunuz. (ID: %d)", id);
	return true;
}

CMD:elkoy(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
    if(OyuncuBilgi[playerid][oIsbasi] == false) return HataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/elkoy [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen oyuncu oyunda deðil.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return HataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");
	if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0) return HataMesaji(playerid, "Oyuncu hapiste olduðu için bu komutu kullanamazsýn.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Kendi eþyalarýna el koyamazsýn.");
	if(OyuncuBilgi[oyuncuid][oAdminDurum]) return HataMesaji(playerid, "Ýþbaþýndaki adminlerin eþyalarýna el koyamazsýn.");

	new dialog[256], silahid, mermi, sayi, esya;
	dialog[0] = 0, sayi = 0, esya = 0;
	format(dialog, sizeof(dialog), "Eþya\tTür\n");
	if(OyuncuBilgi[oyuncuid][oEhliyet] == true) strcat(dialog, "Sürücü Lisansý\tBelge\n"), esya++;
	if(OyuncuBilgi[oyuncuid][oRuhsat] == 1) strcat(dialog, "Ruhsat\tBelge\n"), esya++;
	for(new i = 0; i < 13; i ++)
	{
		GetPlayerWeaponData(oyuncuid, i, silahid, mermi);
		if(silahid > 0 && OyuncuBilgi[oyuncuid][oSilah][i] == silahid) sayi++;
	}
	if(sayi > 0) strcat(dialog, "Silahlar\t-\n"), esya++;
	if(OyuncuBilgi[oyuncuid][oUyusturucu] > 0) strcat(dialog, "Uyuþturucu\tEþya\n"), esya++;
	if(OyuncuBilgi[oyuncuid][oTohum] > 0) strcat(dialog, "Tohum\tEþya\n"), esya++;
	if(OyuncuZirh(oyuncuid) > 0) strcat(dialog, "Zýrh\tEþya\n"), esya++;
	if(esya < 1) return HataMesaji(playerid, "Oyuncunun üzerinde el konulabilecek bir eþya bulunmuyor.");

	ElKoy[playerid] = oyuncuid;
	DialogGoster(playerid, DIALOG_ELKOY, DIALOG_STYLE_TABLIST_HEADERS, OyuncuIsim(oyuncuid), dialog, "Seç", "Kapat");
	return 1;
}

/*CMD:pdgps(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
    if(OyuncuBilgi[playerid][oIsbasi] == false) return HataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1585.0575, -1677.7401, 5.8977)) return HataMesaji(playerid, "LSPD iþlem noktasýnda deðilsin.");

	switch(OyuncuBilgi[playerid][oPDgps]) {
	    case true: {
	        if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu seçeneði araçtayken kapatamazsýn.");

			OyuncuBilgi[playerid][oPDgps] = false;
			for(new i = 0; i < MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracBirlik] == BIRLIK_POLIS && OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) {
	        	SetVehicleParamsForPlayer(AracBilgi[i][aracYarat], playerid, 0, AracBilgi[i][aracKilit]);
	    	}
	    	new eski;
	    	eski = GetPlayerVirtualWorld(playerid);
	    	SetPlayerVirtualWorld(playerid, eski-500);
	    	SetTimerEx("Eski_Virtual", 600, false, "id", playerid, eski);
	    	SunucuMesaji(playerid, "LSPD GPS sistemi kapatýldý.");
	    }
	    case false: {
			OyuncuBilgi[playerid][oPDgps] = true;
			for(new i = 0; i < MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracBirlik] == BIRLIK_POLIS && OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) {
	        	SetVehicleParamsForPlayer(AracBilgi[i][aracYarat], playerid, 1, AracBilgi[i][aracKilit]);
	    	}
	    	SunucuMesaji(playerid, "LSPD GPS sistemi açýldý.");
	    }
	}
	return 1;
}*/

CMD:taser(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
    if(OyuncuBilgi[playerid][oIsbasi] == false) return HataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
    if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballda bu komutu kullanamazsýn.");

	if(!OyuncuBilgi[playerid][oTaser])
	{
	    OyuncuBilgi[playerid][oTaser] = true;
	    GetPlayerWeaponData(playerid, 2, OyuncuBilgi[playerid][oSilah][2], OyuncuBilgi[playerid][oMermi][2]);

		GivePlayerWeapon(playerid, 23, 99999);
	    cmd_ame(playerid, "taserini kýlýfýndan çýkartýr.");
	}
	else
	{
	    OyuncuBilgi[playerid][oTaser] = false;
		SilahAyarla(playerid);

		SetPlayerArmedWeapon(playerid, OyuncuBilgi[playerid][oSilah][2]);
	    cmd_ame(playerid, "taserini kýlýfýna geri koyar.");
	}
	return 1;
}

CMD:birlikayarla(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 5 && OyuncuBilgi[playerid][oBirlikMod] == 0) return YetkinizYok(playerid);

	new oyuncuid, id;
	if(sscanf(params, "ud", oyuncuid, id))
	    return KullanimMesaji(playerid, "/birlikayarla [ID / Oyuncu] [birlik id] (birlikten atmak için -1 kullanýn)");

	if(!IsPlayerConnected(oyuncuid))
	    return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

    if((id < -1 || id >= MAKSIMUM_BIRLIK) || (id != -1 && !BirlikBilgi[id][birlikKullanimda]))
	    return HataMesaji(playerid, "Geçersiz birlik.");

	if(id == -1)
	{
	    BirlikSifirla(oyuncuid);
	    SunucuMesaji(playerid, "%s adlý kiþiyi birliðinden attýn.", OyuncuIsim(oyuncuid));
    	SunucuMesaji(oyuncuid, "%s tarafýndan birlikten atýldýn.", OyuncuBilgi[playerid][oAdminNick]);
	}
	else
	{
		OyuncuBilgi[oyuncuid][oBirlik] = id;
		OyuncuBilgi[oyuncuid][oBirlikRutbe] = 1;
		OyuncuBilgi[oyuncuid][oBirlikSQLID] = BirlikBilgi[id][birlikID];
		SunucuMesaji(playerid, "%s adlý kiþiyi \"%s\" adlý birlik üyesi yaptýn.", OyuncuIsim(oyuncuid), BirlikBilgi[id][birlikAd]);
    	SunucuMesaji(oyuncuid, "%s adlý yetkili tarafýndan \"%s\" birlik üyesi yapýldýn.", OyuncuBilgi[playerid][oAdminNick], BirlikBilgi[id][birlikAd]);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] [ADM] %s(%d), %s(%d) adlý kiþiyi %s birlik üyesi yaptý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], BirlikBilgi[id][birlikAd]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
	}
    return 1;
}

CMD:setleader(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 5  && OyuncuBilgi[playerid][oBirlikMod] == 0) return YetkinizYok(playerid);

	new oyuncuid, id;
	if(sscanf(params, "ud", oyuncuid, id))
	    return KullanimMesaji(playerid, "/setleader [ID / Oyuncu] [birlik id] (birlikten atmak için -1 kullanýn)");

	if(!IsPlayerConnected(oyuncuid))
	    return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

    if((id < -1 || id >= MAKSIMUM_BIRLIK) || (id != -1 && !BirlikBilgi[id][birlikKullanimda]))
	    return HataMesaji(playerid, "Geçersiz birlik.");

	if(id == -1)
	{
	    BirlikSifirla(oyuncuid);
	    SunucuMesaji(playerid, "%s adlý kiþiyi birliðinden attýn.", OyuncuIsim(oyuncuid));
    	SunucuMesaji(oyuncuid, "%s tarafýndan birlikten atýldýn.", OyuncuBilgi[playerid][oAdminNick]);
	}
	else
	{
		BirlikAyarla(oyuncuid, id);
		OyuncuBilgi[oyuncuid][oBirlikRutbe] = BirlikBilgi[id][birlikMaksRutbe];
		OyuncuBilgi[oyuncuid][oBirlikLider] = BirlikBilgi[id][birlikID];
		SunucuMesaji(playerid, "%s adlý kiþiyi \"%s\" adlý birlik lideri yaptýn.", OyuncuIsim(oyuncuid), BirlikBilgi[id][birlikAd]);
    	SunucuMesaji(oyuncuid, "%s adlý yetkili tarafýndan \"%s\" birlik lideri yapýldýn.", OyuncuBilgi[playerid][oAdminNick], BirlikBilgi[id][birlikAd]);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] [ADM] %s(%d), %s(%d) adlý kiþiyi %s birlik lideri yaptý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], BirlikBilgi[id][birlikAd]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
	}
    return 1;
}

CMD:revive(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/revive [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(OyuncuBilgi[oyuncuid][oYaraliSure] < 2 && OyuncuBilgi[oyuncuid][oYarali] == 0) return HataMesaji(playerid, "Girilen oyuncu yaralý deðil.");

    OyuncuBilgi[oyuncuid][oYaraliSure] = 0;
    OyuncuBilgi[oyuncuid][oYarali] = 0;
    BayginlikBitir(oyuncuid);
    SunucuMesaji(playerid, "%s adlý kiþiyi yaralý durumdan çýkardýn.", OyuncuIsim(oyuncuid));
    SunucuMesaji(oyuncuid, "%s tarafýndan yaralý durumdan çýkarýldýn.", OyuncuBilgi[playerid][oAdminNick]);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiyi yaralý durumdan çýkardý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_basit.txt", "%s", log_icerik);
	return 1;
}

CMD:duyuruduzenle(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);

	if(isnull(params)) return KullanimMesaji(playerid, "/duyuruduzenle [yeni duyuru]");

	dini_Set(SUNUCU_DOSYA, "DUYURU", params);
	if(!strcmp(params, "Yok", true)) return YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s admin duyurusunu kaldýrdý.", OyuncuBilgi[playerid][oAdminNick]);

	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true) DuyuruMesaji(i, "%s", dini_Get(SUNUCU_DOSYA, "DUYURU"));
	YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s admin duyurusunu deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick]);
	return 1;
}

CMD:duyuru(playerid, params[])
{
	if(dini_Exists(SUNUCU_DOSYA)) {
        if(!strcmp(dini_Get(SUNUCU_DOSYA, "DUYURU"), "Yok", true)) return HataMesaji(playerid, "Duyuru yok.");
		DuyuruMesaji(playerid, "%s", dini_Get(SUNUCU_DOSYA, "DUYURU"));
	}
	else {
        dini_Create(SUNUCU_DOSYA);
        dini_Set(SUNUCU_DOSYA, "DUYURU", SUNUCU_ADI);
		DuyuruMesaji(playerid, "%s", dini_Get(SUNUCU_DOSYA, "DUYURU"));
	}
	return 1;
}

CMD:havayidegistir(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);

	new havaid;
	if(sscanf(params, "d", havaid)) return KullanimMesaji(playerid, "/havayidegistir [hava id]");

	SetWeather(havaid);
	YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s tarafýndan hava durumu deðiþtirildi.", OyuncuBilgi[playerid][oAdminNick]);
	return 1;
}


CMD:ekipsil(playerid, params[])
{
    if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Birlik üyesi deðilsin.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "Bu komutu kullanmak için birlik türünüz uyumlu deðildir.");
	if(OyuncuBilgi[playerid][oBirlikRutbe] <= 4) return HataMesaji(playerid, "Rütbeniz bu iþlemi yapmak için yetersiz.");

	new id, ekipisim[32];
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/ekilsil [Ekip ID]");

    format(ekipisim, sizeof(ekipisim), "%s", EkipBilgi[id][ekipAd]);
    BirlikMesaji(OyuncuBilgi[playerid][oBirlik], RENK_BIRLIK, "[BIRLIK] %s, %s adlý ekibi sildi.", OyuncuIsim(playerid), ekipisim);
	Ekip_Sil(id);
	return 1;
}

CMD:ekipkabul(playerid, params[])
{
    if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Birlik üyesi deðilsin.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "Bu komutu kullanmak için birlik türünüz uyumlu deðildir.");
	if(OyuncuBilgi[playerid][oEkipIstek] == false) return HataMesaji(playerid, "Herhangi bir ekip daveti almamýþsýnýz.");
	
	OyuncuBilgi[playerid][oEkip] = OyuncuBilgi[OyuncuBilgi[playerid][oEkipDavet]][oEkip];
	
	SunucuMesaji(playerid, "Ekibe dahil edildiniz.");
	return 1;
}

CMD:ekip(playerid, params[])
{
    if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Birlik üyesi deðilsin.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "Bu komutu kullanmak için birlik türünüz uyumlu deðildir.");
    new sayi = 0, ekipid;
	if(sscanf(params, "d", ekipid))	return KullanimMesaji(playerid, "/ekip [Ekip ID]");
	foreach(new i : Player) if(OyuncuBilgi[i][oEkip] == ekipid) {
		SendClientMessageEx(playerid, RENK_TURUNCU, "[Ekip-%d] {FFFFFF}%s(%d)", ekipid, OyuncuIsim(i), i), sayi++;
	}
	return 1;
}

CMD:ekipdavet(playerid, params[])
{
    if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Birlik üyesi deðilsin.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "Bu komutu kullanmak için birlik türünüz uyumlu deðildir.");
    if(OyuncuBilgi[playerid][oEkip] == -1) return HataMesaji(playerid, "Herhangi bir ekipte bulunmuyorsun.");
	if(OyuncuBilgi[playerid][oEkipYoneticisi] == false) return HataMesaji(playerid, "Yöneticisi olmadýðýn ekipte davet yollayamazsýn.");
	//if(OyuncuBilgi[playerid][oEkipLider] != true) return HataMesaji(playerid, "Ekip lideri olmadýðýndan kimseyi davet edemezsin.");
	new oyuncu, yazi[128];
	if(sscanf(params, "u", oyuncu))	return KullanimMesaji(playerid, "/ekipdavet [Oyuncu ID]");
	if(!IsPlayerConnected(oyuncu) || OyuncuBilgi[oyuncu][oGiris] == false) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ");
	if(oyuncu == playerid) return HataMesaji(playerid, "Kendine davet yollayamazsýn.");
	if(OyuncuBilgi[oyuncu][oBirlik] == -1) return HataMesaji(playerid, "Kiþi herhangi bir birlikte bulunmuyor.");
	if(OyuncuBirlikTuru(oyuncu) != BIRLIK_POLIS && OyuncuBirlikTuru(oyuncu) != BIRLIK_MEDIKAL && OyuncuBirlikTuru(oyuncu) != BIRLIK_DEVLET) return HataMesaji(playerid, "Kiþi resmi kuruluþta bulunmuyor.");
	if(OyuncuBilgi[oyuncu][oEkip] > -1) return HataMesaji(playerid, "Bu oyuncunun zaten bir ekibi bulunuyor.");
	OyuncuBilgi[oyuncu][oBirlikDavetEden] = playerid;
 	SunucuMesaji(playerid, "%s adlý oyuncuyu ekibe davet ettin.", OyuncuIsim(oyuncu));
 	format(yazi, sizeof(yazi), "%s adlý ekibe %s tarafýndan davet edildin. /ekipkabul", EkipBilgi[OyuncuBilgi[playerid][oEkip]][ekipAd], OyuncuIsim(playerid));
	SunucuMesaji(oyuncu, "%s", yazi);
	OyuncuBilgi[oyuncu][oEkipIstek] = true;
	OyuncuBilgi[oyuncu][oEkipDavet] = playerid;
	return 1;
}

CMD:ekipkur(playerid, params[])
{
	if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Birlik üyesi deðilsin.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL && OyuncuBirlikTuru(playerid) != BIRLIK_DEVLET) return HataMesaji(playerid, "Bu komutu kullanmak için birlik türünüz uyumlu deðildir.");
	
	new isim[32], id;
	if(sscanf(params, "s[32]", isim))
	    return KullanimMesaji(playerid, "/ekipyarat [isim]");
	    
	id = Ekip_Yarat(isim);
	if(id == -1)
	    return HataMesaji(playerid, "Sunucu ekip kurma limitine ulaþtýðý için yeni ekip kurulamýyor. Yöneticiye ulaþýn.");
	OyuncuBilgi[playerid][oEkip] = id;
	SunucuMesaji(playerid, "Yeni bir ekip yarattýn. (ID: %d | Ýsim: %s)", id, isim);
	BirlikMesaji(OyuncuBilgi[playerid][oBirlik], RENK_BIRLIK, "[BIRLIK] %s, %s adlý ekibi oluþturdu.", OyuncuIsim(playerid), isim);
	OyuncuBilgi[playerid][oEkipYoneticisi] = true;
	EkipBilgi[id][ekipYoneticisi] = playerid;
	return 1;
}

CMD:birlikyarat(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 5 && OyuncuBilgi[playerid][oBirlikMod] == 0) return YetkinizYok(playerid);

	new isim[32], id;
	if(sscanf(params, "s[32]", isim))
	    return KullanimMesaji(playerid, "/birlikyarat [isim]");
	id = Birlik_Yarat(isim);
	if(id == -1)
	    return HataMesaji(playerid, "Sunucu birlik limitine ulaþtýðý için yeni birlik yaratýlamýyor!");

	SunucuMesaji(playerid, "Yeni bir birlik yarattýn. (ID: %d | Ýsim: %s)", id, isim);
	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] [ADM]%s(%d) bir birlik yarattý. (SID: %d / isim: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BirlikBilgi[id][birlikID], isim);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
	return 1;
}

CMD:abirlik(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5  && OyuncuBilgi[playerid][oBirlikMod] == 0) return YetkinizYok(playerid);

	new id, tur[24], mesaj[128];
	if(sscanf(params, "ds[24]S()[128]", id, tur, mesaj))
 	{
	 	KullanimMesaji(playerid, "/abirlik [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} isim, maxrutbe, tur, dolap, level, izin, bolge, onay, sil");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_BIRLIK) || !BirlikBilgi[id][birlikKullanimda]) return HataMesaji(playerid, "Geçersiz birlik.");

    if(!strcmp(tur, "isim", true))
	{
	    new isim[32];

	    if(sscanf(mesaj, "s[32]", isim))
	        return KullanimMesaji(playerid, "/abirlik [id] [isim] [yeni isim]");

	    format(BirlikBilgi[id][birlikAd], 32, isim);
        Birlik_Yenile(id);
	    Birlik_Kaydet(id);
		SunucuMesaji(playerid, "Bir birliðin ismini deðiþtirdin. (BID: %d | \"%s\")", id, isim);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] [ADM]%s(%d) bir birliðin ismini deðiþtirdi. (SID: %d / isim: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BirlikBilgi[id][birlikID], isim);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
	}
	else if(!strcmp(tur, "maxrutbe", true))
	{
	    new maxrutbe;
	    if(sscanf(mesaj, "d", maxrutbe)) return KullanimMesaji(playerid, "/abirlik [id] [maxrutbe] [maximum rank]");
		if(maxrutbe < 1 || maxrutbe > 20) return HataMesaji(playerid, "Girilen rütbe en az 1, en fazla 20 olabilir!");

	    BirlikBilgi[id][birlikMaksRutbe] = maxrutbe;
	    Birlik_Kaydet(id);
		SunucuMesaji(playerid, "Bir birliðin maksimum rütbesini deðiþtirdin. (ID: %d | Deðer: %d)", id, maxrutbe);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] [ADM]%s(%d) birliðin maks rütbesini deðiþtirdi. (ID: %d / Maks: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BirlikBilgi[id][birlikID], maxrutbe);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
	}
	else if(!strcmp(tur, "izin", true))
	{
	    SetPVarInt(playerid, "Birlik_Onay", id);
        new icerik[1024];
        format(icerik, sizeof(icerik), "{AFAFAF}Silah\t%s\n{AFAFAF}Uyuþturucu\t%s\n{AFAFAF}Araç Hýrsýzlýðý\t%s\n{AFAFAF}Gasp\t%s\n{AFAFAF}Tamirci\t%s\n{AFAFAF}Yarýþçý\t%s\n{AFAFAF}Taksici\t%s\n{AFAFAF}Graffiti\t%s\n",
			(BirlikBilgi[id][birlikOnay][0] == 0) ? ("{B70000}Yok") : ("{33AA33}Var"),
			(BirlikBilgi[id][birlikOnay][1] == 0) ? ("{B70000}Yok") : ("{33AA33}Var"),
			(BirlikBilgi[id][birlikOnay][2] == 0) ? ("{B70000}Yok") : ("{33AA33}Var"),
			(BirlikBilgi[id][birlikOnay][3] == 0) ? ("{B70000}Yok") : ("{33AA33}Var"),
			(BirlikBilgi[id][birlikOnay][4] == 0) ? ("{B70000}Yok") : ("{33AA33}Var"),
			(BirlikBilgi[id][birlikOnay][5] == 0) ? ("{B70000}Yok") : ("{33AA33}Var"),
			(BirlikBilgi[id][birlikOnay][6] == 0) ? ("{B70000}Yok") : ("{33AA33}Var"),
			(BirlikBilgi[id][birlikOnay][7] == 0) ? ("{B70000}Yok") : ("{33AA33}Var")
		);
		DialogGoster(playerid, DIALOG_BIRLIK_ONAY, DIALOG_STYLE_TABLIST, "Birlik Onay", icerik, "Seç", "Kapat");
	}
	else if(!strcmp(tur, "tur", true))
	{
	    new birliktipi;

	    if(sscanf(mesaj, "d", birliktipi))
     	{
		 	KullanimMesaji(playerid, "/abirlik [id] [tur] [birlik türü]");
            SendClientMessage(playerid, RENK_SARI, "[TÜRLER]:{FFFFFF} 1: Polis | 2: Medikal | 3: Devlet | 4: Haber Ajansý | 5: Onaysýz | 6: Onaylý");
            return 1;
		}
		if(birliktipi < 1 || birliktipi > 6) return HataMesaji(playerid, "Hatalý birlik türü!");

	    BirlikBilgi[id][birlikTur] = birliktipi;
	    if(birliktipi == BIRLIK_LEGAL || birliktipi == BIRLIK_ILLEGAL) {
			BirlikBilgi[id][bDolapPos][0] = 0.0;
			BirlikBilgi[id][bDolapPos][1] = 0.0;
			BirlikBilgi[id][bDolapPos][2] = 0.0;
			BirlikBilgi[id][bDolapInt] = 0;
			BirlikBilgi[id][bDolapVW] = 0;
			Birlik_Yenile(id);
	    }

	    Birlik_Kaydet(id);
		SunucuMesaji(playerid, "Bir birliðin türünü deðiþtirdin. (BID: %d | Tür: %s)", id, birlikturadi(id));
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] [ADM]%s(%d) birlik türünü deðiþtirdi. (ID: %d / Tur: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BirlikBilgi[id][birlikID], birlikturadi(id));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
	}
	else if(!strcmp(tur, "dolap", true))
	{
	    if(BirlikBilgi[id][birlikTur] == BIRLIK_LEGAL || BirlikBilgi[id][birlikTur] == BIRLIK_ILLEGAL)
	        return HataMesaji(playerid, "Bu birlik türlerinin dolabý olamaz.");

		GetPlayerPos(playerid, BirlikBilgi[id][bDolapPos][0], BirlikBilgi[id][bDolapPos][1], BirlikBilgi[id][bDolapPos][2]);
		BirlikBilgi[id][bDolapInt] = GetPlayerInterior(playerid);
		BirlikBilgi[id][bDolapVW] = GetPlayerVirtualWorld(playerid);
		Birlik_Yenile(id);
		Birlik_Kaydet(id);
		SunucuMesaji(playerid, "Bir birliðin dolap yerini deðiþtirdin. (BID: %d)", id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] [ADM]%s(%d) birliðin dolap yerini deðiþtirdi. (ID: %d / isim: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BirlikBilgi[id][birlikID], BirlikBilgi[id][birlikAd]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
	}
	else if(!strcmp(tur, "level", true))
	{
	    new level;
	    if(sscanf(mesaj, "d", level)) return KullanimMesaji(playerid, "/abirlik [id] [level] [yeni level]");
		if(level < 1 || level > 6) return HataMesaji(playerid, "Girilen level en az 1, en çok 6 olabilir.");

	    BirlikBilgi[id][birlikLevel] = level;
	    Birlik_Kaydet(id);
		SunucuMesaji(playerid, "Bir birliðin levelini deðiþtirdin. (ID: %d | Level: %d)", id, level);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] [ADM]%s(%d) bir birliðin levelini deðiþtirdi. (ID: %d / Level: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BirlikBilgi[id][birlikID], level);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
	}
	else if(!strcmp(tur, "bolge", true))
	{
	    if(BirlikBilgi[id][birlikPosDurum] == 1) {
	        BirlikBilgi[id][birlikPos][0] = 0.0, BirlikBilgi[id][birlikPos][1] = 0.0, BirlikBilgi[id][birlikPos][2] = 0.0;
	        BirlikBilgi[id][birlikPosDurum] = 0, SunucuMesaji(playerid, "Birlik bölgesi kaldýrýldý.");
	    }
	    else {
	        GetPlayerPos(playerid, BirlikBilgi[id][birlikPos][0], BirlikBilgi[id][birlikPos][1], BirlikBilgi[id][birlikPos][2]);
	        BirlikBilgi[id][birlikPosDurum] = 1, SunucuMesaji(playerid, "Birlik bölgesi ayarlandý.");
	    }
	    Birlik_Yenile(id);
	    Birlik_Kaydet(id);
	}
	else if(!strcmp(tur, "onay", true))
	{
		switch(BirlikBilgi[id][birlikOnayDurum]) {
			case 1: BirlikBilgi[id][birlikOnayDurum] = 0, SunucuMesaji(playerid, "%s adlý birliðin onayýný kaldýrdýn.", BirlikBilgi[id][birlikAd]);
			case 0: BirlikBilgi[id][birlikOnayDurum] = 1, SunucuMesaji(playerid, "%s adlý birliðe onay verdin.", BirlikBilgi[id][birlikAd]);
			default: BirlikBilgi[id][birlikOnayDurum] = 1, SunucuMesaji(playerid, "%s adlý birliðe onay verdin.", BirlikBilgi[id][birlikAd]);
		}
		Birlik_Kaydet(id);
	}
	else if(!strcmp(tur, "sil", true))
	{
		SunucuMesaji(playerid, "Birlik %d baþarýyla silindi.", id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] [ADM]%s(%d) bir birlik sildi. (ID: %d / isim: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BirlikBilgi[id][birlikID], BirlikBilgi[id][birlikAd]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
		Birlik_Sil(id);
	}
	return 1;
}

CMD:dolap(playerid, params[])
{
	new birlikid = OyuncuBilgi[playerid][oBirlik];
	if(birlikid == -1) return HataMesaji(playerid, "Birlik üyesi deðilsin.");
	if(BirlikBilgi[birlikid][birlikTur] == BIRLIK_ILLEGAL || BirlikBilgi[birlikid][birlikTur] == BIRLIK_LEGAL) return HataMesaji(playerid, "Birlik türünüz bu komut için uyumlu deðil.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(!OyuncuDolapYakin(playerid)) return HataMesaji(playerid, "Birlik dolabýna yakýn deðilsin.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");

	switch(BirlikBilgi[birlikid][birlikTur]) {
	    case BIRLIK_POLIS: DialogGoster(playerid, DIALOG_POLIS_DOLAP, DIALOG_STYLE_TABLIST, "LSPD - Dolap", "Ýþbaþý\nEkipmanlar\nÇelik Yelek\nÜniformalar\nAksesuarlar\nAðrý Kesici\nBeanbag Býrak\nBeanbag Al\nSilah Sýfýrla", "Seç", "Ýptal");
	    case BIRLIK_DEVLET: DialogGoster(playerid, DIALOG_DEVLET_DOLAP, DIALOG_STYLE_TABLIST, "Devlet - Dolap", "Ýþbaþý\nAðrý Kesici\nÇelik Yelek", "Seç", "Ýptal");
	    case BIRLIK_HABERAJANSI: DialogGoster(playerid, DIALOG_HABERAJANSI_DOLAP, DIALOG_STYLE_TABLIST, "Haber Ajansý - Dolap", "Aðrý Kesici\nKýyafetler\nEkipmanlar", "Seç", "Ýptal");
	    case BIRLIK_MEDIKAL: DialogGoster(playerid, DIALOG_MEDIKAL_DOLAP, DIALOG_STYLE_TABLIST, "Medikal - Dolap", "Ýþbaþý\nÜniformalar\nAðrý Kesici", "Seç", "Ýptal");
	}
	return 1;
}

CMD:yayinpanel(playerid, params[])
{
	if(OyuncuBilgi[playerid][oBirlik] != -1 && OyuncuBirlikTuru(playerid) == BIRLIK_HABERAJANSI && OyuncuBilgi[playerid][oBirim] != 0) {
		for(new i = 0; i != MAKSIMUM_BIRIM; i ++) if(BirimBilgi[i][birimID] == OyuncuBilgi[playerid][oBirim])
			if(!!strcmp(BirimBilgi[i][birimAd], "Yayýn", true) && !!strcmp(BirimBilgi[i][birimAd], "Yayin", true)) return HataMesaji(playerid, "Yayýn biriminde olmadýðýn için bu komutu kullanamazsýn.");
			
	}
	else return HataMesaji(playerid, "Bu komutu sadece Haber Ajansý birlikleri kullanabilir.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oMaskeDurum] == 1) return HataMesaji(playerid, "Masken açýkken yayýn yapamazsýn.");

	new birlikid = OyuncuBilgi[playerid][oBirlik], icerik[256];
	for(new i = 0; i != MAKSIMUM_YAYIN; i++) if(YayinBilgi[i][yayinKullanimda] == true && YayinBilgi[i][yayinBirlik] == OyuncuBilgi[playerid][oBirlikSQLID]) {
	    if(YayinBilgi[i][yayinYapan] != playerid) return HataMesaji(playerid, "Birliðinizden daha önce yayýn açýlmýþ, kapatýlmasýný bekleyin.");
	    
	    if(YayinBilgi[i][yayinDavetli] == INVALID_PLAYER_ID) format(icerik, sizeof(icerik), "%s{%06x}Yayýn Davet\n", icerik, RENK_YAYIN >>> 8);
	    if(YayinBilgi[i][yayinDavetli] != INVALID_PLAYER_ID) format(icerik, sizeof(icerik), "%s{%06x}Davetli Çýkar\n", icerik, RENK_YAYIN >>> 8);
		if(YayinBilgi[i][yayinCekilis] == 0) format(icerik, sizeof(icerik), "%s{%06x}Çekiliþ Ayarla\n", icerik, RENK_YAYIN >>> 8);
		if(YayinBilgi[i][yayinCekilis] > 0) format(icerik, sizeof(icerik), "%s{%06x}Çekiliþ Yap\n", icerik, RENK_YAYIN >>> 8);
	    
	    format(icerik, sizeof(icerik), "%s{%06x}Müzik Ayarla\n{%06x}Yayýn Bitir\n", icerik, RENK_YAYIN >>> 8, RENK_YAYIN >>> 8);
	    DialogGoster(playerid, DIALOG_YAYIN, DIALOG_STYLE_TABLIST, BirlikBilgi[birlikid][birlikAd], icerik, "Seç", "Kapat");
	    return 1;
	}
	format(icerik, sizeof(icerik), "{%06x}Yayýn Baþlat\n", RENK_YAYIN >>> 8);
	DialogGoster(playerid, DIALOG_YAYIN, DIALOG_STYLE_TABLIST, BirlikBilgi[birlikid][birlikAd], icerik, "Seç", "Kapat");
	return 1;
}

CMD:yayin(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");

	for(new i = 0; i != MAKSIMUM_YAYIN; i++) if(YayinBilgi[i][yayinKullanimda] == true)
	{
	    if(YayinBilgi[i][yayinYapan] != playerid && YayinBilgi[i][yayinDavetli] != playerid) continue;
	    if(isnull(params)) return KullanimMesaji(playerid, "/yayin [yayýn kanalý]");
	    SendClientMessageEx(YayinBilgi[i][yayinYapan], RENK_BEYAZ, "{%06x}[YAYIN] {FFFFFF}%s: %s", RENK_YAYIN >>> 8, OyuncuIsim(playerid), params);
	    if(YayinBilgi[i][yayinDavetli] != INVALID_PLAYER_ID) SendClientMessageEx(YayinBilgi[i][yayinDavetli], RENK_BEYAZ, "{%06x}[YAYIN] {FFFFFF}%s: %s", RENK_YAYIN >>> 8, OyuncuIsim(playerid), params);
	    foreach(new o : Player) if(OyuncuBilgi[o][oGiris] == true && OyuncuBilgi[o][oDinlenenYayin] == YayinBilgi[i][yayinBirlik]) {
			if(YayinBilgi[i][yayinDavetli] != o && YayinBilgi[i][yayinYapan] != o) SendClientMessageEx(o, RENK_BEYAZ, "{%06x}[YAYIN] {FFFFFF}%s: %s", RENK_YAYIN >>> 8, OyuncuIsim(playerid), params);
		}
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] [yayýn sohbet] %s(%d): %s (birlik: %d)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params, YayinBilgi[i][yayinBirlik]);
		Gunluk_LogKaydet(log_icerik);
		return 1;
	}
	HataMesaji(playerid, "Bir yayýnda deðilsin veya bir yayýn davetlisi deðilsin.");
	return 1;
}

CMD:yayindinle(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");

	new sayi = 0, icerik[1024], dinleyici = 0;
	format(icerik, sizeof(icerik), "ID\t\tAjans Ýsmi\tDinleyici\nHaber Kapat\t\t\n");
	for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikKullanimda] == true && BirlikBilgi[i][birlikTur] == BIRLIK_HABERAJANSI)
	{
	    foreach(new o : Player) if(IsPlayerConnected(o) && OyuncuBilgi[o][oGiris] == true && OyuncuBilgi[o][oDinlenenYayin] == BirlikBilgi[i][birlikID]) dinleyici++;
	    format(icerik, sizeof(icerik), "%s%d\t%s\t%d\n", icerik, i, BirlikBilgi[i][birlikAd], dinleyici), sayi++;
	    dinleyici = 0;
	}
	if(!sayi) return HataMesaji(playerid, "Haber Ajansý birliði oluþturulmadýðý için bu komutu kullanamazsýn.");
	DialogGoster(playerid, DIALOG_YAYIN_DINLE, DIALOG_STYLE_TABLIST_HEADERS, "Yayýn Dinle", icerik, "Seç", "Kapat");
	return 1;
}

CMD:kimlikgoster(playerid, params[])
{
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/kimlikgoster [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return HataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");

	SendClientMessage(oyuncuid, RENK_GRI, "-----------------------------------------------------------");
	SendClientMessageEx(oyuncuid, RENK_GRI, "Vatandaþlýk Numarasý: {FFE4C4}%d", OyuncuBilgi[playerid][oVatandaslikNo]);
	SendClientMessageEx(oyuncuid, RENK_GRI, "Ad / Soyad: {FFE4C4}%s", OyuncuIsim(playerid));
	SendClientMessageEx(oyuncuid, RENK_GRI, "Uyruk / Köken: {FFE4C4}%s", Kokenler[OyuncuBilgi[playerid][oDogumYeri]]);
	SendClientMessageEx(oyuncuid, RENK_GRI, "Cinsiyet: {FFE4C4}%s", (OyuncuBilgi[playerid][oCinsiyet] == 1) ? ("Erkek") : ("Kadýn"));
	SendClientMessage(oyuncuid, RENK_GRI, "-----------------------------------------------------------");
	static emote[128];
	if(oyuncuid != playerid) {
		format(emote, sizeof(emote), "kimliðini çýkartýr ve %s adlý kiþiye gösterir.", OyuncuIsim(oyuncuid));
		cmd_ame(playerid, emote);
	}
	else if(oyuncuid == playerid) cmd_ame(playerid, "kimliðini çýkarýr ve görebileceði hizada kaldýrýr.");
	return 1;
}

CMD:lisansgoster(playerid, params[])
{
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	new oyuncuid, emote[128];
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/lisansgoster [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return HataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");

	SendClientMessage(oyuncuid, RENK_GRI, "-----------------------------------------------------------");
	SendClientMessageEx(oyuncuid, RENK_GRI, "Sürücü Lisansý: %s", (OyuncuBilgi[oyuncuid][oEhliyet] == false) ? ("{B70000}Yok") : ("{33AA33}Mevcut"));
	SendClientMessageEx(oyuncuid, RENK_GRI, "Silah Ruhsatý: %s", (OyuncuBilgi[oyuncuid][oRuhsat] == 0) ? ("{B70000}Yok") : ("{33AA33}Mevcut"));
	SendClientMessageEx(oyuncuid, RENK_GRI, "Avukat Lisansý: %s", (OyuncuBilgi[oyuncuid][oAvukatLisans] == 0) ? ("{B70000}Yok") : ("{33AA33}Mevcut"));
	SendClientMessage(oyuncuid, RENK_GRI, "-----------------------------------------------------------");
	if(oyuncuid != playerid) {
		format(emote, sizeof(emote), "lisanslarýný çýkartýr ve %s adlý kiþiye gösterir.", OyuncuIsim(oyuncuid));
		cmd_ame(playerid, emote);
	}
	else if(oyuncuid == playerid) cmd_ame(playerid, "lisanslarýný çýkarýr ve görebileceði hizada kaldýrýr.");
	return 1;
}

CMD:rozetgoster(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL && OyuncuBirlikTuru(playerid) != BIRLIK_DEVLET)
	    return HataMesaji(playerid, "Resmi kuruluþ üyesi olmadýðýnýzdan bu komutu kullanma izniniz bulunmamaktadýr.");

	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	new oyuncuid, emote[128];
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/rozetgoster [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return HataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");

	SendClientMessage(oyuncuid, RENK_GRI, "-----------------------------------------------------------");
	SendClientMessageEx(oyuncuid, RENK_GRI, "Ad / Soyad: {FFE4C4}%s", OyuncuIsim(playerid));
	SendClientMessageEx(oyuncuid, RENK_GRI, "Baðlý Olduðu Kurum: {FFE4C4}%s", BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd]);
	SendClientMessageEx(oyuncuid, RENK_GRI, "Rütbe: {FFE4C4}%s", OyuncuRutbeAdi(playerid));
	SendClientMessage(oyuncuid, RENK_GRI, "-----------------------------------------------------------");
	if(oyuncuid != playerid) format(emote, sizeof(emote), "rozetini çýkartýr ve %s adlý kiþiye gösterir.", OyuncuIsim(oyuncuid)), cmd_ame(playerid, emote);
	else if(oyuncuid == playerid) cmd_ame(playerid, "rozetini çýkarýr ve görebileceði hizada kaldýrýr.");
	return 1;
}

CMD:m(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL) return HataMesaji(playerid, "Megafon için yetkin yok.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	if(isnull(params)) return KullanimMesaji(playerid, "/(m)egafon [mesaj]");

	if(IsPlayerInAnyVehicle(playerid)) SendNearbyMessage(playerid, MEGAFON_MESAFE, RENK_SARI, "[Araç M] %s: %s", OyuncuIsim(playerid), params);
	else if(!IsPlayerInAnyVehicle(playerid)) SendNearbyMessage(playerid, MEGAFON_MESAFE, RENK_SARI, "[El M] %s: %s", OyuncuIsim(playerid), params);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [megafon] %s(%d): %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:callsign(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");

	if(OyuncuBilgi[playerid][oBirlikSQLID] != AracBilgi[Arac_IDBul(GetPlayerVehicleID(playerid))][aracBirlik]) return HataMesaji(playerid, "Bu iþlemi yapabilmen için birliðinin aracýnda olmalýsýn.");
	if(!IsValidVehicle(GetPlayerVehicleID(playerid)) || Arac_IDBul(GetPlayerVehicleID(playerid)) == -1) return HataMesaji(playerid, "Ýçinde bulunduðunuz araçta bu komut kullanýlamaz!");
	new aracid = GetPlayerVehicleID(playerid), id = -1;

	id = Arac_IDBul(aracid);
	if(aractabeladurum[aracid] == 1)
	{
		if(IsValidDynamic3DTextLabel(AracBilgi[id][aracText])) DestroyDynamic3DTextLabel(AracBilgi[id][aracText]), AracBilgi[id][aracText] = Text3D:INVALID_3DTEXT_ID;
	    aractabeladurum[aracid] = 0;
	    SunucuMesaji(playerid, "Callsign kaldýrýldý.");
	    AracBilgi[id][aracYazi][0] = 0;
	    Arac_Kaydet(id);
	    return 1;
	}
	if(isnull(params)) return KullanimMesaji(playerid, "/callsign [birim]");

	format(AracBilgi[id][aracYazi], 128, "%s", params);
	if(IsValidDynamic3DTextLabel(AracBilgi[id][aracText])) DestroyDynamic3DTextLabel(AracBilgi[aracid][aracText]), AracBilgi[aracid][aracText] = Text3D:INVALID_3DTEXT_ID;
	AracBilgi[id][aracText] = CreateDynamic3DTextLabel(AracBilgi[id][aracYazi], RENK_BEYAZ, -0.8, -2.8, 0.0, 10.0, INVALID_PLAYER_ID, AracBilgi[id][aracYarat], 1);
	aractabeladurum[aracid] = 1;
	Arac_Kaydet(id);
	return 1;
}

CMD:pr(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan komut kullanamazsýn.");
	if(OyuncuBilgi[playerid][oPortatifRadyo] == 0) return HataMesaji(playerid, "Portatif Radyon yok.");
	if(OyuncuBilgi[playerid][oFrekans] == 0) return HataMesaji(playerid, "Frekans seçmeden bu komutu kullanamazsýn. (/frekans)");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	
	if(isnull(params)) return KullanimMesaji(playerid, "/pr [mesaj]");
	
	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oFrekans] == OyuncuBilgi[playerid][oFrekans]) SendClientMessageEx(i, RENK_PRADYO, "(%d kHz) %s: %s", OyuncuBilgi[playerid][oFrekans], OyuncuIsim(playerid), params);
	return 1;
}

CMD:frekans(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan komut kullanamazsýn.");
	if(OyuncuBilgi[playerid][oPortatifRadyo] == 0) return HataMesaji(playerid, "Portatif Radyon yok.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	
	new frekans;
	if(sscanf(params, "d", frekans)) return KullanimMesaji(playerid, "/frekans [frekans]");
	if(frekans < 1 || frekans > 999999) return HataMesaji(playerid, "Geçersiz frekans, frekans 1-999999 aralýðýnda olmalýdýr.");
	if(frekans == 911 && OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "Bu frekansa geçiþ yetkin yok.");
	
	OyuncuBilgi[playerid][oFrekans] = frekans;
	OyuncuKaydet(playerid);
	SunucuMesaji(playerid, "Frekans geçiþi baþarýlý. (#%d)", frekans);
	return 1;
}

CMD:gov(playerid, params[])
{
	if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Birlik üyesi deðilsin.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL && OyuncuBirlikTuru(playerid) != BIRLIK_DEVLET) return HataMesaji(playerid, "Bu komutu kullanmak için birlik türünüz uyumlu deðildir.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	new birlikid = OyuncuBilgi[playerid][oBirlik];
	if(BirlikBilgi[birlikid][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe] && OyuncuBilgi[playerid][oBirlikLider] != BirlikBilgi[birlikid][birlikID]) return HataMesaji(playerid, "Birlik yetkilisi deðilsin.");
	if(OyuncuBilgi[playerid][oMaskeDurum] == 1) return HataMesaji(playerid, "Masken açýkken bu komutu kullanamazsýn.");

	if(isnull(params)) return KullanimMesaji(playerid, "/gov [duyuru mesajýn]");

	SendClientMessageToAllEx(RENK_BEYAZ, "|___________  Devlet Haberleri  ___________|");
	SendClientMessageToAllEx(RENK_GOVDUYURU, "%s %s: {FFFFFF}%s", OyuncuRutbeAdi(playerid), OyuncuIsim(playerid), params);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [gov-duyuru] %s(%d): %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:op(playerid, params[])
{
	new birlikid = OyuncuBilgi[playerid][oBirlik];
	if(birlikid == -1) return HataMesaji(playerid, "Birlik üyesi deðilsin.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL) return HataMesaji(playerid, "Bu komutu kullanmak için birlik türünüz uyumlu deðildir.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe] && OyuncuBilgi[playerid][oBirlikLider] != BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID]) return HataMesaji(playerid, "Birlik yetkilisi deðilsin.");

	if(isnull(params)) return KullanimMesaji(playerid, "/op [telsiz mesajýn]");

	BirlikMesaji(birlikid, RENK_TELSIZ, "[CH: 91%d S: %d] [OP-%s]: %s", birlikid, OyuncuBirlikTuru(playerid), OyuncuIsim(playerid), params);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [operator-99%d] %s(%d): %s", Tarih(), birlikid, oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:radyo(playerid, params[])
{
	new birlikid = OyuncuBilgi[playerid][oBirlik];
	if(birlikid == -1) return HataMesaji(playerid, "Birlik üyesi deðilsin.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL && OyuncuBirlikTuru(playerid) != BIRLIK_DEVLET) return HataMesaji(playerid, "Bu komutu kullanmak için birlik türünüz uyumlu deðildir.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	if(isnull(params))
	    return KullanimMesaji(playerid, "/radyo [telsiz mesajýn]");

	BirlikMesaji(birlikid, RENK_TELSIZ, "[CH: 91%d S: %d] %s: %s", birlikid, OyuncuBirlikTuru(playerid), OyuncuIsim(playerid), params);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [radyo-91%d] %s(%d): %s", Tarih(), birlikid, oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:departman(playerid, params[])
{
	if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Birlik üyesi deðilsin.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL && OyuncuBirlikTuru(playerid) != BIRLIK_DEVLET) return HataMesaji(playerid, "Bu komutu kullanmak için birlik türünüz uyumlu deðildir.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(isnull(params)) return KullanimMesaji(playerid, "/departman [departman mesajýn]");

	for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikTur] == BIRLIK_POLIS || BirlikBilgi[i][birlikTur] == BIRLIK_MEDIKAL || BirlikBilgi[i][birlikTur] == BIRLIK_DEVLET)
	{
		BirlikMesaji(i, RENK_TELSIZ, "[CH: 911 S: DEP] %s: %s", OyuncuIsim(playerid), params);
	}
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [dept-%d] %s(%d): %s", Tarih(), OyuncuBilgi[playerid][oBirlikSQLID], oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:yt(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(isnull(params)) return KullanimMesaji(playerid, "/yt [yakýn telsiz]");

	new Float:telsiz_pos[3];
	GetPlayerPos(playerid, telsiz_pos[0], telsiz_pos[1], telsiz_pos[2]);
	foreach(new i: Player)
	{
	    if(IsPlayerInRangeOfPoint(i, 100.0, telsiz_pos[0], telsiz_pos[1], telsiz_pos[2]) && (OyuncuBilgi[playerid][oBirlik] == OyuncuBilgi[i][oBirlik]) )
		{
        	SendClientMessageEx(i, RENK_TELSIZ, "[YT][CH: 91%d S: %d] %s: %s", OyuncuBilgi[playerid][oBirlik], OyuncuBirlikTuru(playerid), OyuncuIsim(playerid), params);
		}
	}
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [radyo-91%d] %s(%d): %s", Tarih(), OyuncuBilgi[playerid][oBirlik], oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:yereyatir(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "Bu komutu kullanmak için polis olman gerekiyor.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballda bunu yapamazsýn.");
    if(GetPVarInt(playerid, "yereyatir") > gettime()) {
	    HataMesaji(playerid, "Yeniden bu komutu kullanmak için %d saniye beklemelisin.", GetPVarInt(playerid, "yereyatir") - gettime());
	    return 1;
	}

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/yereyatir [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
    if(oyuncuid == playerid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");
	if(!YakinlikKontrol(playerid, oyuncuid, 2.5)) return HataMesaji(playerid, "Bu oyuncuya yakýn olmalýsýn.");
	if(OyuncuBilgi[oyuncuid][oYaraliSure] > 0 || OyuncuBilgi[oyuncuid][oDonduruldu] > 0 || IsPlayerInAnyVehicle(oyuncuid)) return HataMesaji(playerid, "Bu komut þu anda bu kiþinin üzerinde kullanýlamaz.");
	if(OyuncuBilgi[oyuncuid][oAdminDurum] == true) return HataMesaji(playerid, "Bu seçenek iþbaþýndaki yöneticiler için kullanýlamaz.");

	new bilgi[144];
	switch(random(4)) {
	    case 0, 1, 3: format(bilgi, sizeof(bilgi), "%s adlý kiþinin üzerine atlar ve yere yatýrýr.", OyuncuIsim(oyuncuid)), OyuncuBilgi[oyuncuid][oDonduruldu] = 15;
	    case 2, 4: format(bilgi, sizeof(bilgi), "%s adlý kiþinin üzerine atlamayý dener, baþaramaz.", OyuncuIsim(oyuncuid));
	}
	cmd_ame(playerid, bilgi);
	OyuncuBilgi[playerid][oDonduruldu] = 3;
	SetPVarInt(playerid, "yereyatir", gettime() + 5);
	if(OyuncuBilgi[oyuncuid][oDonduruldu] > 0) {
	    if(OyuncuBilgi[oyuncuid][oTamirKitiSure] > 0) return HataMesaji(oyuncuid, "Etkisi hale geldiðin için tamir iþlemin iptal edildi."), OyuncuBilgi[playerid][oTamirArac] = INVALID_VEHICLE_ID, OyuncuBilgi[playerid][oTamirKiti]--;
		ApplyAnimation(oyuncuid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0);
		TogglePlayerControllable(oyuncuid, false);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], hedef_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		GetPlayerName(oyuncuid, hedef_isim, sizeof(hedef_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiyi yere yatýrdý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], hedef_isim, OyuncuBilgi[oyuncuid][oID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/polis.txt", "%s", log_icerik);
	}
	return 1;
}

/*CMD:pdspawn(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 766.1522, -1356.2513, 13.4860)) return HataMesaji(playerid, "LSPD iþlem noktasýna yakýn deðilsin.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Aracýn sürücüsü olmalýsýn.");
	if(Arac_BirlikTuru(GetPlayerVehicleID(playerid)) != BIRLIK_POLIS) return HataMesaji(playerid, "Bu araç LSPD birliðine ait deðil.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	ASpawn(GetPlayerVehicleID(playerid));
	SunucuMesaji(playerid, "Araç baþarýyla spawnlandý. (Araç ID: %d)", GetPlayerVehicleID(playerid));
	return 1;
}

CMD:pdtamir(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araç kullanmýyorsun.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Aracýn sürücüsü olmalýsýn.");
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 766.1522, -1356.2513, 13.4860)) return HataMesaji(playerid, "LSPD iþlem noktasýna yakýn deðilsin.");
	if(Arac_BirlikTuru(GetPlayerVehicleID(playerid)) != BIRLIK_POLIS) return HataMesaji(playerid, "Bu araç LSPD'ye ait deðil.");
	if(GetEngineStatus(GetPlayerVehicleID(playerid)) == 1) return HataMesaji(playerid, "Önce aracýn motorunu kapatmalýsýn.");

	TogglePlayerControllable(playerid, false);
	OyuncuBilgi[playerid][oTamirSure] = TAMIR_SURE;
	SetTimerEx("pdaractamir", TAMIR_SURE * 1000, false, "ud", playerid, GetPlayerVehicleID(playerid));
	return 1;
}

CMD:memurcagir(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1263.7529, 2427.5007, 3501.4866)) return HataMesaji(playerid, "Memur çaðýrma noktasýnda deðilsin.");
	if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) return HataMesaji(playerid, "Birlik türünüz polis olduðu için bu seçeneði kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

   	BirlikMesajiEx(BIRLIK_POLIS, RENK_TELSIZ, "MEMUR ÇAÐRISI: %s adlý kiþi lobiye memur talep ediyor.", OyuncuIsim(playerid));
   	SunucuMesaji(playerid, "Memur çaðýrma talebin iletildi, lütfen bekleyin.");
    return 1;
}*/

CMD:surukle(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");
	if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oSuruklenen] != INVALID_PLAYER_ID) {
	    new hedefid = OyuncuBilgi[playerid][oSuruklenen];
		OyuncuBilgi[playerid][oSuruklenen] = INVALID_PLAYER_ID;
		OyuncuBilgi[playerid][oSuruklemeTipi] = 0;
		if(IsPlayerConnected(hedefid)) {
			OyuncuBilgi[hedefid][oSurukleniyor] = INVALID_PLAYER_ID;
			new emote[64];
			format(emote, sizeof(emote), "%s isimli kiþiyi sürüklemeyi býrakýr.", OyuncuIsim(hedefid));
			cmd_me(playerid, emote);
			TogglePlayerControllable(hedefid, true);
		}
	    return 1;
	}
	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/surukle [ID / Oyuncu]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
    if(oyuncuid == playerid) return HataMesaji(playerid, "Kendini sürükleyemezsin.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return HataMesaji(playerid, "Girilen kiþiye yakýn deðilsin.");
    if(!OyuncuBilgi[oyuncuid][oKelepceli] && OyuncuBilgi[oyuncuid][oYaraliSure] == 0) return HataMesaji(playerid, "Bu oyuncu kelepçelenmemiþ, sürüklenemez.");
	if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0 || OyuncuBilgi[oyuncuid][oHapisSure][1] > 0) return HataMesaji(playerid, "Oyuncu hapiste, sürüklenemez.");

	new emote[64];
	OyuncuBilgi[playerid][oSuruklenen] = oyuncuid;
	OyuncuBilgi[oyuncuid][oSurukleniyor] = playerid;
	if(OyuncuBilgi[oyuncuid][oYaraliSure] > 0) {
		OyuncuBilgi[playerid][oSuruklemeTipi] = 1;
		ApplyAnimation(oyuncuid, "WUZI", "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 0);
		UyariMesaji(playerid, "Yaralý insanlarý sadece eðilerek sürükleyebilirsin.");
		format(emote, sizeof(emote), "%s adlý yaralýyý sürüklemeye baþlar.", OyuncuIsim(oyuncuid));
	}
	else {
        format(emote, sizeof(emote), "%s adlý kiþiyi kolundan tutarak sürüklemeye baþlar.", OyuncuIsim(oyuncuid));
		OyuncuBilgi[playerid][oSuruklemeTipi] = 0;
	}
	if(OyuncuBilgi[oyuncuid][oDonduruldu] > 0) OyuncuBilgi[oyuncuid][oDonduruldu] = 0;
	TogglePlayerControllable(oyuncuid, false);
	cmd_me(playerid, emote);
	return 1;
}

CMD:kelepce(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "Polis memuru deðilsin.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");
	if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballda bunu yapamazsýn.");
	if(PetKontrol[playerid] != -1) return HataMesaji(playerid, "Pet kontrol ederken bunu yapamazsýn.");

	new oyuncuid, mesaj[128];
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/kelepce [ID / Oyuncu]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
    if(oyuncuid == playerid) return HataMesaji(playerid, "Kendini kelepçeleyemezsin.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return HataMesaji(playerid, "Girilen kiþiye yakýn deðilsin.");
	if(PetKontrol[oyuncuid] != -1) return HataMesaji(playerid, "Oyuncu pet kontrol ediyor.");
	if(IsPlayerInAnyVehicle(oyuncuid)) return HataMesaji(playerid, "Araçtaki bir oyuncunun kelepçe durumuna müdahale edemezsin.");
	if(OyuncuBilgi[oyuncuid][oKelepceli] == 0) {
		if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0 || OyuncuBilgi[oyuncuid][oHapisSure][1] > 0) return HataMesaji(playerid, "Oyuncu hapiste.");
		if(OyuncuBilgi[oyuncuid][oDonduruldu] == 0 && GetPVarInt(oyuncuid, "kelepce_anim") == 0 && GetPlayerSpecialAction(oyuncuid) != SPECIAL_ACTION_HANDSUP && OyuncuBilgi[playerid][oYarali] == 0) return HataMesaji(playerid, "Bu oyuncu kelepçelenebilir durumda deðil."); // GetPlayerAnimationIndex(oyuncuid) != 1442

	    OyuncuBilgi[oyuncuid][oKelepceli] = 1;
	    SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_CUFFED);
	    SetPlayerAttachedObject(oyuncuid, 9, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	    
		format(mesaj, sizeof(mesaj), "sað elini beline atar, kavradýðý kelepçeyi %s adlý kiþinin bileklerine geçirir.", OyuncuIsim(oyuncuid));
		if(GetPVarInt(oyuncuid, "anim") != 0)
		{
		    ClearAnimations(oyuncuid);
			switch(OyuncuBilgi[oyuncuid][oGeciciKiyafet]) {
				case 0: KiyafetDegistir(oyuncuid, OyuncuBilgi[oyuncuid][oKiyafet]);
				default: KiyafetDegistir(oyuncuid, OyuncuBilgi[oyuncuid][oGeciciKiyafet]);
			}
	        TextDrawHideForPlayer(oyuncuid, AnimBozText);
	        SetPVarInt(oyuncuid, "anim", 0);
	        if(GetPVarInt(oyuncuid, "kelepce_anim") == 1) SetPVarInt(oyuncuid, "kelepce_anim", 0);
	    }
		TogglePlayerControllable(oyuncuid, true);
		OyuncuBilgi[oyuncuid][oKontrol] = true;
		OyuncuBilgi[oyuncuid][oDonduruldu] = 0;
		cmd_me(playerid, mesaj);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], hedef_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		GetPlayerName(oyuncuid, hedef_isim, sizeof(hedef_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiyi kelepçeledi.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], hedef_isim, OyuncuBilgi[oyuncuid][oID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/polis.txt", "%s", log_icerik);
	}
	else if(OyuncuBilgi[oyuncuid][oKelepceli] == 1) {
	    OyuncuBilgi[oyuncuid][oKelepceli] = 0;
		if(OyuncuBilgi[oyuncuid][oSurukleniyor] != INVALID_PLAYER_ID && IsPlayerConnected(OyuncuBilgi[oyuncuid][oSurukleniyor])) {
		    new hedefid = OyuncuBilgi[oyuncuid][oSurukleniyor];
			OyuncuBilgi[hedefid][oSuruklenen] = INVALID_PLAYER_ID;
			UyariMesaji(hedefid, "Sürüklediðiniz kiþinin kelepçesi çýkarýldý.");
		}
	    SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_NONE);
	    RemovePlayerAttachedObject(oyuncuid, 9);
		format(mesaj, sizeof(mesaj), "kelepçe anahtarýyla %s adlý kiþninin çözer.", OyuncuIsim(oyuncuid));
		cmd_me(playerid, mesaj);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], hedef_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		GetPlayerName(oyuncuid, hedef_isim, sizeof(hedef_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin kelepçesini çýkardý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], hedef_isim, OyuncuBilgi[oyuncuid][oID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/polis.txt", "%s", log_icerik);
	}
    return 1;
}

CMD:wp(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araçta kullanýlabilir.");
    new iSeat = GetPlayerVehicleSeat(playerid), aracid = Arac_IDBul(GetPlayerVehicleID(playerid)) + 1;
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Araç sürücüsü bu komutu kullanamaz.");
	PutPlayerInVehicle(playerid, aracid, iSeat);
	return 1;
}

CMD:aracaat(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	static oyuncuid, aracid, mesaj[128 + MAX_PLAYER_NAME];
	aracid = YakinAracKontrol(playerid);
	if(sscanf(params, "u", oyuncuid))
	    return KullanimMesaji(playerid, "/aracaat [oyuncu id]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
    if(oyuncuid == playerid) return HataMesaji(playerid, "Kendini araca atamazsýn.");
    if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return HataMesaji(playerid, "Girilen kiþiye yakýn deðilsin.");
    if(!OyuncuBilgi[oyuncuid][oKelepceli]) return HataMesaji(playerid, "Oyuncu þu anda kelepçeli deðil.");
	if(aracid == INVALID_VEHICLE_ID) return HataMesaji(playerid, "Herhangi bir aracýn yakýnýnda deðilsin.");
	if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0 || OyuncuBilgi[oyuncuid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[oyuncuid][oYaraliSure] > 0) return HataMesaji(playerid, "Oyuncu yaralanmýþ, bu komutu þu an kullanamazsýn.");
	if(OyuncuBilgi[oyuncuid][oDonduruldu] > 0) return HataMesaji(playerid, "Oyuncu dondurulmuþ, bu komut þu an kullanýlamaz.");

	if(KoltukSayiKontrol(aracid) < 2) return HataMesaji(playerid, "Bu araç uygun deðildir.");

	if(IsPlayerInVehicle(oyuncuid, aracid))
	{
		TogglePlayerControllable(oyuncuid, true);
		RemovePlayerFromVehicle(playerid);
		format(mesaj, sizeof(mesaj), "kapýyý açar ve %s adlý kiþiyi kolundan tutar.", OyuncuIsim(oyuncuid));
		cmd_me(playerid, mesaj);
	}
	else
	{
		new koltukid = KoltukKontrol(aracid, 2);
		if(koltukid == -1)
		    return HataMesaji(playerid, "Araçta boþ koltuk yok.");

		TogglePlayerControllable(oyuncuid, false);
		PutPlayerInVehicle(oyuncuid, aracid, koltukid);
		format(mesaj, sizeof(mesaj), "%s adlý kiþiyi araca atar.", OyuncuIsim(oyuncuid));
		cmd_me(playerid, mesaj);
		if(OyuncuBilgi[playerid][oSuruklenen] == oyuncuid) {
		    OyuncuBilgi[playerid][oSuruklenen] = INVALID_PLAYER_ID;
			OyuncuBilgi[oyuncuid][oSurukleniyor] = INVALID_PLAYER_ID;
			new emote[64];
			format(emote, sizeof(emote), "%s isimli kiþiyi sürüklemeyi býrakýr.", OyuncuIsim(oyuncuid));
			cmd_me(playerid, emote);
			TogglePlayerControllable(oyuncuid, true);
		}
	}
	return 1;
}

CMD:jetpack(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid))
 	{
 	    OyuncuBilgi[playerid][oJetpack] = true;
	 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	}
	else
	{
	    if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
		if(IsPlayerInAnyVehicle(oyuncuid)) return HataMesaji(playerid, "Araçtaki bir oyuncuya jetpack veremezsin.");
		if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0 || OyuncuBilgi[oyuncuid][oHapisSure][1] > 0) return HataMesaji(playerid, "Oyuncu hapiste, bu komutu kullanamazsýn.");
		if(OyuncuBilgi[oyuncuid][oYarali] > 0) return HataMesaji(playerid, "Oyuncu yaralanmýþ, bu komutu þu an kullanamazsýn.");
		if(OyuncuBilgi[oyuncuid][oDonduruldu] > 0) return HataMesaji(playerid, "Oyuncu dondurulmuþ, bu komut þu an kullanýlamaz.");

		OyuncuBilgi[oyuncuid][oJetpack] = true;
		SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_USEJETPACK);
		SunucuMesaji(playerid, "%s adlý kiþiye jetpack verdin.", OyuncuIsim(oyuncuid));
		SunucuMesaji(oyuncuid, "%s adlý yetkili sana jetpack verdi!", OyuncuBilgi[playerid][oAdminNick]);
	}
	return 1;
}

CMD:slap(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/slap [ID / Oyuncu]");
    if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
    if(OyuncuBilgi[oyuncuid][oAdmin] > OyuncuBilgi[playerid][oAdmin]) return HataMesaji(playerid, "Girdiðin kiþi sizden yüksek bir admin seviyesine sahip.");
	if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0 || OyuncuBilgi[oyuncuid][oHapisSure][1] > 0) return HataMesaji(playerid, "Oyuncu hapiste, bu komutu þu an kullanamazsýn.");
	if(OyuncuBilgi[oyuncuid][oYarali] > 0) return HataMesaji(playerid, "Oyuncu yaralanmýþ, bu komutu þu an kullanamazsýn.");
	if(OyuncuBilgi[oyuncuid][oDonduruldu] > 0) return HataMesaji(playerid, "Oyuncu dondurulmuþ, bu komut þu an kullanýlamaz.");
    if(OyuncuBilgi[oyuncuid][oIzlenen] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Oyuncu birisini izliyor, þu an kullanýlamaz.");

	new Float:oyuncu_pos[3];
	GetPlayerPos(oyuncuid, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2]);
	OyuncuPosDegistir(oyuncuid, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2] + 5);

	PlayerPlaySound(oyuncuid, 1130, 0.0, 0.0, 0.0);
	YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s, %s adlý kiþiyi tokatladý.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiyi tokatladý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_basit.txt", "%s", log_icerik);
	return 1;
}

CMD:flipcar(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	if(GetPlayerVehicleID(playerid) > 0 && isnull(params))
	{
		AracDuzelt(GetPlayerVehicleID(playerid));
		SunucuMesaji(playerid, "Ýçinde olduðunuz aracý çevirdin.");
	}
	else
	{
	    new aracid;
		if(sscanf(params, "d", aracid))
	    	return KullanimMesaji(playerid, "/flipcar [araç ID]");

		else if(!IsValidVehicle(aracid)) return HataMesaji(playerid, "Geçersiz araç.");

		AracDuzelt(aracid);
		SunucuMesaji(playerid, "Araç %d çevrildi.", aracid);
	}
	return 1;
}

/*CMD:avratlar(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 8) return 0;
	new sayi = 0;
	foreach(new i : Player) if(OyuncuBilgi[i][oCinsiyet] == 2 && OyuncuBilgi[i][oID] != 1)
	{
	    sayi++;
		SendClientMessageEx(playerid, RENK_SERVER, "AVRAT %d: {FFFFFF}%s (ID: %d) - Numara: %d - Level: %d", sayi, OyuncuIsim(i), i, OyuncuBilgi[i][oTelefonNumarasi], OyuncuBilgi[i][oSeviye]);
	}
	if(!sayi) HataMesaji(playerid, "Serverde arvad yoxdur!");
	return 1;
}*/

CMD:silahver(playerid, params[])
{
    if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) return HataMesaji(playerid, "Devlet kurumlarý bu komutu kullanamaz.");
	if(OyuncuBilgi[playerid][oDonduruldu] != 0 || GetPlayerState(playerid) == PLAYER_STATE_SPECTATING) return HataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komutu araçta kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballdayken bu komutu kullanamazsýn.");

	new silahid, mermi, oyuncuid;
	silahid = OyuncuSilah(playerid);
	if(!silahid) return HataMesaji(playerid, "Silah vermek için silahýn elinde olmasý gereklidir.");

	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/silahver [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0) || GetPlayerState(oyuncuid) == PLAYER_STATE_SPECTATING) return HataMesaji(playerid, "Bu oyuncu sana yakýn deðil.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Kendine silah veremezsin.");
	if(IsPlayerInAnyVehicle(oyuncuid)) return HataMesaji(playerid, "Araçtaki oyuncuya silah verilemez.");
	if(OyuncuBilgi[oyuncuid][oAdminDurum] == true) return HataMesaji(playerid, "Bu komut iþbaþýndaki yöneticiler üzerinde kullanýlamaz.");
	if(OyuncuBilgi[oyuncuid][oSilah][SilahSlotBul[silahid]] != 0) return HataMesaji(playerid, "Bu oyuncuda boþ slot bulunmamaktadýr.");
    if(SilahSlotKontrol(oyuncuid, SilahSlotBul[silahid]) && SilahSlotBul[silahid] != 0) return HataMesaji(playerid, "Bu silah türü oyuncuda bulunuyor.");
    if(OyuncuBilgi[oyuncuid][oOynamaSaati] < 12) return HataMesaji(playerid, "Bu oyuncu 12 oynama saati olmadan silah alamaz.");
    if(PetKontrol[oyuncuid] != -1) return HataMesaji(playerid, "Pet kontrol modundaki birisine silah veremezsin.");

	if(GetPlayerWeapon(playerid) == 0) return HataMesaji(playerid, "Silah vermek için silahýn elinde olmasý gereklidir.");
	if(GetPlayerWeapon(playerid) == 34) return HataMesaji(playerid, "Bu silah verilemez.");
	silahid = GetPlayerWeapon(playerid), mermi = GetPlayerAmmo(playerid);
	SilahSil(playerid, GetPlayerWeapon(playerid));
	Silahver(oyuncuid, GetPlayerWeapon(playerid), mermi);
	SilahAyarla(oyuncuid);
	SilahAyarla(playerid);
	if(GetPlayerState(oyuncuid) == PLAYER_STATE_DRIVER) SetPlayerArmedWeapon(oyuncuid, 0);
	if(GetPlayerState(oyuncuid) == PLAYER_STATE_PASSENGER && silahid != WEAPON_UZI && silahid != WEAPON_MP5 && silahid != WEAPON_AK47 && silahid != WEAPON_M4 && silahid != WEAPON_TEC9) SetPlayerArmedWeapon(oyuncuid, 0);
	new bilgi[128 + MAX_PLAYER_NAME];
	format(bilgi, sizeof(bilgi), "%s model silahý %s adlý kiþiye verir.", SilahIsim(silahid), OyuncuIsim(oyuncuid));
	cmd_ame(playerid, bilgi);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], hedef_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	GetPlayerName(oyuncuid, hedef_isim, sizeof(hedef_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiye %s model silah verdi.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], hedef_isim, OyuncuBilgi[oyuncuid][oID], SilahIsim(silahid));
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:silahsat(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) return HataMesaji(playerid, "Devlet kurumlarý bu komutu kullanamaz.");
	if(OyuncuBilgi[playerid][oDonduruldu] != 0 || GetPlayerState(playerid) == PLAYER_STATE_SPECTATING) return HataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komutu araçta kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballdayken bu komutu kullanamazsýn.");
	
	new oyuncuid, fiyat;
	if(sscanf(params, "ud", oyuncuid, fiyat)) return KullanimMesaji(playerid, "/silahsat [ID / Oyuncu] [fiyat]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(fiyat < 1) return HataMesaji(playerid, "Fiyat en az $1 olmalýdýr.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0) || GetPlayerState(oyuncuid) == PLAYER_STATE_SPECTATING) return HataMesaji(playerid, "Bu oyuncu sana yakýn deðil.");
	if(oyuncuid == playerid && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Kendine silah satamazsýn.");
	if(OyuncuBilgi[oyuncuid][oOynamaSaati] < 12) return HataMesaji(playerid, "Bu oyuncu 12 oynama saati olmadan silah alamaz.");
	if(IsPlayerInAnyVehicle(oyuncuid)) return HataMesaji(playerid, "Araçtaki oyuncuya silah satýlamaz.");
	if(OyuncuBilgi[oyuncuid][oAdminDurum] == true) return HataMesaji(playerid, "Bu komut iþbaþýndaki yöneticiler üzerinde kullanýlamaz.");
	if(PetKontrol[oyuncuid] != -1) return HataMesaji(playerid, "Pet kontrol modundaki birisine silah veremezsin.");
	new silahid = OyuncuSilah(playerid);
	if(!silahid) return HataMesaji(playerid, "Silah satmak için silahýn elinde olmasý gereklidir.");
	if(silahid == 34) return HataMesaji(playerid, "Bu silah satýlamaz.");
	if(OyuncuBilgi[oyuncuid][oSilah][SilahSlotBul[silahid]] != 0) return HataMesaji(playerid, "Bu oyuncuda boþ slot bulunmamaktadýr.");
    if(SilahSlotKontrol(oyuncuid, SilahSlotBul[silahid]) && SilahSlotBul[silahid] != 0) return HataMesaji(playerid, "Bu silah türü oyuncuda bulunuyor.");
    if(OyuncuBilgi[oyuncuid][oDialog] != -1) return HataMesaji(playerid, "Oyuncu baþka bir diyalog kullanýyor, lütfen bekleyiniz.");
    
	SetPVarInt(playerid, "silah_satiyor", oyuncuid);
	SetPVarInt(oyuncuid, "silah_satis", playerid);
	SetPVarInt(oyuncuid, "silah_satiliyor", silahid);
	SetPVarInt(oyuncuid, "silah_fiyat", fiyat);
	SunucuMesaji(oyuncuid, "%s, %s model silahýný size %s fiyatýndan satmak istiyor. (/kabul silah veya /iptal silah)", OyuncuIsim(playerid), SilahIsim(silahid), NumaraFormati(fiyat));
	SunucuMesaji(playerid, "%s adlý kiþiye silah satýþ isteðiniz iletildi.", OyuncuIsim(oyuncuid));
	return 1;
}

CMD:weapons(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new oyuncuid, silahid, mermi, sayi = 0;
	sayi = 0;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/weapons [ID / Oyuncu]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(OyuncuBilgi[oyuncuid][oGiris] == false) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ.");
	if(OyuncuBilgi[oyuncuid][oPaintball] != -1) return HataMesaji(playerid, "Oyuncu paintballda.");

    SendClientMessageEx(playerid, RENK_ACIKKIRMIZI, "%s adlý kiþinin üzerindeki silahlar:", OyuncuIsim(oyuncuid));
	for(new i = 0; i < 13; i ++)
	{
		GetPlayerWeaponData(oyuncuid, i, silahid, mermi);

		if(silahid > 0) {
			if(OyuncuBilgi[oyuncuid][oSilah][i] != silahid) SendClientMessageEx(playerid, RENK_BEYAZ, "{B70000}[HÝLE ÝLE ALINMIÞ] {FFFFFF}* %s (%d mermi)", SilahIsim(silahid), mermi);
			else if(OyuncuBilgi[oyuncuid][oSilah][i] == silahid) SendClientMessageEx(playerid, RENK_BEYAZ, "* %s (%d mermi)", SilahIsim(silahid), mermi);
			sayi++;
		}
	}
	if(!sayi) HataMesaji(playerid, "Oyuncunun üzerine silah bulunmuyor.");
	return 1;
}

CMD:ustara(playerid, params[])
{
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/ustara [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Kendini arayamazsýn.");
	if(!YakinlikKontrol(playerid, oyuncuid, 3.0) || GetPlayerState(oyuncuid) == PLAYER_STATE_SPECTATING) return HataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");
	if(OyuncuBilgi[oyuncuid][oDialog] != -1) return HataMesaji(playerid, "Girilen oyuncuya þu anda satýþ önerisi verilemez, diyalogu kapatmasýný bekleyin.");

	new bilgi[144];
	SetPVarInt(oyuncuid, "ustarayan", playerid);
	format(bilgi, sizeof(bilgi), "%s adlý kiþi üzerini aramak istiyor.", OyuncuIsim(playerid));
	DialogGoster(oyuncuid, DIALOG_USTARAMA, DIALOG_STYLE_MSGBOX, "Üst Arama Talebi", bilgi, "Kabul", "Red");
	SunucuMesaji(playerid, "Arama isteðin %s adlý kiþiye iletildi.", OyuncuIsim(oyuncuid));
	return 1;
}

CMD:giveweapon(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);

	new oyuncuid, silahid, mermi;
	if(sscanf(params, "udI(50)", oyuncuid, silahid, mermi)) return KullanimMesaji(playerid, "/giveweapon [ID / Oyuncu] [silah id] [mermi]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(OyuncuBilgi[oyuncuid][oOynamaSaati] < 12) return HataMesaji(playerid, "Bu oyuncu 12 oynama saati olmadýðý için silah alamaz.");
	if(silahid <= 0 || silahid > 46 || (silahid >= 19 && silahid <= 21)) return HataMesaji(playerid, "Geçersiz silah belirlendi.");
	if(silahid == 35 && OyuncuBilgi[playerid][oAdmin] < 7 || silahid == 38 && OyuncuBilgi[playerid][oAdmin] < 7) return HataMesaji(playerid, "Bu silahý vermek için seviye 7 yönetici olman gerekiyor.");
	if(OyuncuBilgi[oyuncuid][oPaintball] != -1) return HataMesaji(playerid, "Oyuncu paintballda, silah verilemez.");
	if(PetKontrol[oyuncuid] != -1) return HataMesaji(playerid, "Pet kontrol modundaki birisine silah veremezsin.");

	if(mermi < 1) return HataMesaji(playerid, "Mermi en az 1 olmalýdýr.");
	new limit = 0;
	switch(silahid) {
		case WEAPON_DEAGLE: limit = DEAGLE_LIMIT;
		case WEAPON_AK47: limit = AK47_LIMIT;
		case WEAPON_MP5: limit = MP5_LIMIT;
	    case WEAPON_TEC9: limit = TEC9_LIMIT;
	    case WEAPON_SHOTGUN: limit = SHOTGUN_LIMIT;
	    case WEAPON_RIFLE: limit = RIFLE_LIMIT;
	    case WEAPON_UZI: limit = UZI_LIMIT;
	    case WEAPON_COLT45: limit = COLT45_LIMIT;
	    case WEAPON_M4: limit = M4_LIMIT;
	    case WEAPON_SNIPER: limit = SNIPER_LIMIT;
	    case WEAPON_SHOTGSPA: limit = COMBATSHOTGUN_LIMIT;
	    default: limit = 600;
	}
	if(limit != 0 && mermi > limit) {
		HataMesaji(playerid, "Bu silaha bu kadar mermi veremezsin. (maksimum: %d)", limit);
		return 1;
	}
	Silahver(oyuncuid, silahid, mermi);
	if(GetPlayerState(oyuncuid) == PLAYER_STATE_DRIVER) SetPlayerArmedWeapon(oyuncuid, 0);
	if(GetPlayerState(oyuncuid) == PLAYER_STATE_PASSENGER && silahid != WEAPON_UZI && silahid != WEAPON_MP5 && silahid != WEAPON_AK47 && silahid != WEAPON_M4 && silahid != WEAPON_TEC9) SetPlayerArmedWeapon(oyuncuid, 0);
	AdminMesaji(playerid, "%s adlý kiþiye %s model silahý %d mermiyle verdin.", OyuncuIsim(oyuncuid), SilahIsim(silahid), mermi);
	AdminMesaji(oyuncuid, "%s adlý yetkili sana %s model silahý %d mermiyle verdi.", OyuncuBilgi[playerid][oAdminNick], SilahIsim(silahid), mermi);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiye %s model silah verdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], SilahIsim(silahid));
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_silah.txt", "%s", log_icerik);
	return 1;
}

CMD:resetweapons(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 4) return HataMesaji(playerid, "Bu komutu kullanma yetkin yok!");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/asilahsifirla [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(GetPlayerWeapon(oyuncuid) != 0) SetPlayerArmedWeapon(oyuncuid, 0);
	if(!IsPlayerInAnyVehicle(oyuncuid)) ClearAnimations(oyuncuid);
	SilahlariSifirla(oyuncuid);
	AdminMesaji(playerid, "%s adlý kiþinin silahlarýný sýfýrladýn.", OyuncuIsim(oyuncuid));
	AdminMesaji(oyuncuid, "%s adlý yetkili silahlarýný sýfýrladý.", OyuncuBilgi[playerid][oAdminNick]);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin silahlarýný sýfýrladý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_silah.txt", "%s", log_icerik);
	return 1;
}

CMD:cekilis(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	new kazanan, sayi = 0, oyuncu_isim[MAX_PLAYER_NAME + 1];
	foreach(new i : Player) if(IsPlayerConnected(i)) sayi++;
	kazanan = random(sayi);
	if(IsPlayerConnected(kazanan) && OyuncuBilgi[kazanan][oGiris] == true) {
		GetPlayerName(kazanan, oyuncu_isim, sizeof(oyuncu_isim));
		for(new i = 0, len = strlen(oyuncu_isim); i < len; i ++) if(oyuncu_isim[i] == '_') oyuncu_isim[i] = ' ';
		return SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "admCMD: %s tarafýndan bir çekiliþ yapýldý ve %s(%d) kazandý.", OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, kazanan);
	}
	SendClientMessage(playerid, -1, "Oyuncu giriþ yapmamýþ tekrar çekilmesi gerekiyor.");
	return 1;
}

CMD:izlemelistesi(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);
	new sayi = 0, oyuncu_isim[MAX_PLAYER_NAME + 1];
	SendClientMessage(playerid, RENK_GRI, "--------------------------------------------------------------------------------------------------------");
	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && (GetPlayerState(i) == PLAYER_STATE_SPECTATING || OyuncuBilgi[i][oIzlenen] != INVALID_PLAYER_ID))
	{
	    GetPlayerName(i, oyuncu_isim, sizeof(oyuncu_isim));
	    for(new b = 0, len = strlen(oyuncu_isim); b < len; b++) if(oyuncu_isim[b] == '_') oyuncu_isim[b] = ' ';
	    if(OyuncuBilgi[i][oIzlenen] == INVALID_PLAYER_ID) SendClientMessageEx(playerid, RENK_GRI, "[HÝLE OLABÝLÝR] %s - izleme modunda", oyuncu_isim);
	    else if(OyuncuBilgi[i][oIzlenen] != INVALID_PLAYER_ID) SendClientMessageEx(playerid, RENK_GRI, "[%s] %s - %s(%d) adlý kiþiyi izliyor.", (OyuncuBilgi[i][oAdmin] == 0) ? ("HÝLE OLABÝLÝR") : ("NORMAL"), oyuncu_isim, OyuncuIsim(OyuncuBilgi[i][oIzlenen]), OyuncuBilgi[i][oIzlenen]);
		sayi++;
	}
	if(!sayi) SendClientMessageEx(playerid, RENK_GRI, "Ýzleme kullanan kimse yok.");
	SendClientMessage(playerid, RENK_GRI, "--------------------------------------------------------------------------------------------------------");
	return 1;
}

CMD:savepos(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	GetPlayerPos(playerid, eskipos[playerid][0], eskipos[playerid][1], eskipos[playerid][2]);
	GetPlayerFacingAngle(playerid, eskipos[playerid][3]);
	eskiint[playerid] = GetPlayerInterior(playerid);
	eskiworld[playerid] = GetPlayerVirtualWorld(playerid);
	SunucuMesaji(playerid, "Pozisyonunuz baþarýyla kaydedildi, bu pozisyona ýþýnlanmak için /loadpos komutunu kullanýn.");
	return 1;
}

CMD:loadpos(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
    OyuncuPosDegistir(playerid, eskipos[playerid][0], eskipos[playerid][1], eskipos[playerid][2]);
    SetPlayerInterior(playerid, eskiint[playerid]);
    SetPlayerVirtualWorld(playerid, eskiworld[playerid]);
    SunucuMesaji(playerid, "Kaydettiðiniz pozisyona ýþýnlandýnýz.");
	return 1;
}

CMD:spec(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1 && OyuncuBilgi[playerid][oEventMod] == 0) return YetkinizYok(playerid);
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");
	if(!strcmp(params, "bitir", true) || !strcmp(params, "off", true)) {
		if(OyuncuBilgi[playerid][oIzlenen] == INVALID_PLAYER_ID) return HataMesaji(playerid, "Kimseyi izlemiyorsunuz!");

	    PlayerSpectatePlayer(playerid, INVALID_PLAYER_ID);
	    PlayerSpectateVehicle(playerid, INVALID_VEHICLE_ID);
	    OyuncuBilgi[playerid][oIzlenen] = INVALID_PLAYER_ID;
	    OyuncuBilgi[playerid][oPos][0] = eskipos[playerid][0];
	    OyuncuBilgi[playerid][oPos][1] = eskipos[playerid][1];
	    OyuncuBilgi[playerid][oPos][2] = eskipos[playerid][2];
		SetSpawnInfo(playerid, 0, OyuncuBilgi[playerid][oKiyafet], eskipos[playerid][0], eskipos[playerid][1], eskipos[playerid][2], eskipos[playerid][3], 0, 0, 0, 0, 0, 0);
		TogglePlayerSpectating(playerid, false);
		DondurulmaEtkisi(playerid);
	    SilahAyarla(playerid);
	    SetPlayerInterior(playerid, eskiint[playerid]);
	    SetPlayerVirtualWorld(playerid, eskiworld[playerid]);
	    eskiworld[playerid] = -1;
	    SetTimerEx("Kiyafet_Duzelt", 100, false, "i", playerid);
	    return 1;
	}
	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/spec [ID / Oyuncu] / [off veya bitir]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Kendini izleyemezsin.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, izlenebilir durumda deðil.");
	if(OyuncuBilgi[oyuncuid][oSpecDurum] == false && OyuncuBilgi[playerid][oAdmin] < 7) return HataMesaji(playerid, "Girilen oyuncu izlenebilir durumda deðil.");
    if(OyuncuBilgi[oyuncuid][oIzlenen] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Girilen oyuncu izlenebilir durumda deðil.");

	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		GetPlayerPos(playerid, eskipos[playerid][0], eskipos[playerid][1], eskipos[playerid][2]);
		GetPlayerFacingAngle(playerid, eskipos[playerid][3]);
		eskiint[playerid] = GetPlayerInterior(playerid);
		eskiworld[playerid] = GetPlayerVirtualWorld(playerid);
	}
	OyuncuBilgi[playerid][oIzlenen] = oyuncuid;
	TogglePlayerSpectating(playerid, true);
	if(IsPlayerInAnyVehicle(oyuncuid)) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(oyuncuid));
	else PlayerSpectatePlayer(playerid, oyuncuid);
	SetPlayerInterior(playerid, GetPlayerInterior(oyuncuid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(oyuncuid));
	SunucuMesaji(playerid, "%s adlý kiþiyi izliyorsunuz.", OyuncuIsim(oyuncuid));
	if(OyuncuBilgi[oyuncuid][oAdmin] >= 8) UyariMesaji(oyuncuid, "%s (%s) adlý kiþi seni izlemeye baþladý.", OyuncuIsim(playerid), OyuncuBilgi[playerid][oAdminNick]);
	return 1;
}

CMD:aisimdegistir(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5) return YetkinizYok(playerid);

	new oyuncuid, isim[32], query[128];
	if(sscanf(params, "us[32]", oyuncuid, isim))
	    return KullanimMesaji(playerid, "/aisimdegistir [ID / Oyuncu] [yeni isim]");

	if(!RolePlayIsimKontrol(isim))
 	   return HataMesaji(playerid, "Girilen isim roleplay formatýna uygun olmalýdýr. (ÖRN: John_Doe)");

	if(!IsPlayerConnected(oyuncuid))
 	   return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(playerid == oyuncuid && !IsPlayerAdmin(playerid) && OyuncuBilgi[playerid][oAdmin] < 6)
	    return HataMesaji(playerid, "Kendi ismini deðiþtirebilmek için en az 6 seviye yönetici olman gerekiyor.");

	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, giriþ yapmasýný bekleyin.");
	if(OyuncuBilgi[oyuncuid][oAdminDurum] == true) return HataMesaji(playerid, "Girilen oyuncu iþbaþýnda olduðu için isim deðiþtirme uygulanamaz.");

	format(query, sizeof(query), "SELECT `isim` FROM oyuncular WHERE isim = '%s' LIMIT 1", isim);
	mysql_tquery(mysqlB, query, "Admin_IsimKontrol", "dds", playerid, oyuncuid, isim);
	return 1;
}

CMD:nrn(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	
	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/nrn [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(playerid == oyuncuid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");
	if(OyuncuBilgi[oyuncuid][oGiris] == false) return HataMesaji(playerid, "Bu oyuncu giriþ yapmamýþ.");
	if(OyuncuBilgi[oyuncuid][oAdmin] > 0) return HataMesaji(playerid, "Bu komut adminler üzerinde kullanýlamaz.");
	
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiye nrn gönderdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/oyuncuduzenle.txt", "%s", log_icerik);
	DialogGoster(oyuncuid, DIALOG_NONRPNAME, DIALOG_STYLE_INPUT, "Non-RP - Ýsim Deðiþimi", "Bir yetkili tarafýndan isim deðiþtirmeye zorlandýn, lütfen yeni almak istediðin ismin aþaðýdaki kutucuða gir;\n\nNOT: Yeni ismin roleplay formatýna uygun olmalýdýr. (ÖRN: John_Doe)", "Deðiþtir", "");
	return 1;
}

CMD:acc(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 2) return YetkinizYok(playerid);

	for(new i = 0; i < 100; i ++) SendClientMessageToAll(-1, "");
	YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili sunucu ekranýný temizledi.", OyuncuBilgi[playerid][oAdminNick]);
	return 1;
}

CMD:ssmod(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oGozBagli] == true) return HataMesaji(playerid, "Gözün baðlýyken bu komutu kullanamazsýn.");
	
	if(OyuncuBilgi[playerid][oSSMod] == true) {
	    OyuncuBilgi[playerid][oSSMod] = false;
	    PlayerTextDrawColor(playerid, siyahekran[playerid], 0x000000FF);
	    PlayerTextDrawHide(playerid, siyahekran[playerid]);
	    return 1;
	}
	new ss_id;
	if(sscanf(params, "d", ss_id)) ss_id = 1;
	switch(ss_id) {
	    case 1: PlayerTextDrawColor(playerid, siyahekran[playerid], 0x000000FF);
	    case 2: PlayerTextDrawColor(playerid, siyahekran[playerid], 0x4071DAFF);
	    case 3: PlayerTextDrawColor(playerid, siyahekran[playerid], 0x33AA33FF);
	    case 4: PlayerTextDrawColor(playerid, siyahekran[playerid], 0xBC2828FF);
	    case 5: PlayerTextDrawColor(playerid, siyahekran[playerid], 0xB70000FF);
	    default: return HataMesaji(playerid, "Bu renk geçersiz.");
	}
	PlayerTextDrawShow(playerid, siyahekran[playerid]);
	OyuncuBilgi[playerid][oSSMod] = true;
	return 1;
}

CMD:clearchat(playerid, params[])
{
	SohbetTemizle(playerid, true);
	return 1;
}

CMD:posgit(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	new Float:x, Float:y, Float:z, interior;
	if(sscanf(params, "p<,>fffd", x, y, z, interior))
	    return KullanimMesaji(playerid, "/posgit [x] [y] [z] [interior]");

	OyuncuPosDegistir(playerid, x, y, z);
	SetPlayerInterior(playerid, interior);
	SunucuMesaji(playerid, "Girilen kordinatlara ýþýnlandýn.");
	return 1;
}

CMD:restart(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);

	if(restart) {
		KillTimer(restarttimer);
		restart = false;
		SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili restart iþlemini iptal etti.", OyuncuBilgi[playerid][oAdminNick]);
		return 1;
	}
	new saniye, sebep[32];
	if(sscanf(params, "ds[32]", saniye, sebep)) return KullanimMesaji(playerid, "/restart [saniye] [sebep]");
	if(saniye < 1 || saniye > 900) return HataMesaji(playerid, "Girilen süre en az 1 saniye, en fazla 900 saniye olabilir.");
	if(isnull(sebep)) return HataMesaji(playerid, "Bir sebep belirtmelisin.");

	restarttimer = SetTimer("SunucuRestart", saniye * 1000, false);
	restart = true;
    sebep[0] = IlkHarfBuyut(sebep[0]);
	SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "admCMD: %s, sunucuyu %s sebebiyle %d saniye içerisinde yeniden baþlatacak.", OyuncuBilgi[playerid][oAdminNick], sebep, saniye);
	return 1;
}

CMD:amaas(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 8) return YetkinizYok(playerid);

	new sql[512];
	format(sql, sizeof(sql), "SELECT * FROM hesaplar WHERE Admin > 0 ORDER BY Admin DESC");
	mysql_tquery(mysqlB, sql, "Admin_Maas", "d", playerid);
	return 1;
}

CMD:yetkilihesaplar(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);

	new sql[512];
	format(sql, sizeof(sql), "SELECT * FROM hesaplar WHERE Admin > 0 ORDER BY Admin DESC");
	mysql_tquery(mysqlB, sql, "yetkilihesaplar", "d", playerid);
	return 1;
}

CMD:yetkililer(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Bu komutu kullanmak için giriþ yapman gerekiyor.");
	new sayi = 0, oyuncu_isim[MAX_PLAYER_NAME + 1];
    foreach (new i : Player) if(OyuncuBilgi[i][oAdmin] > 0 && OyuncuBilgi[i][oGiris] == true)
	{
	    GetPlayerName(i, oyuncu_isim, sizeof(oyuncu_isim));
	    for(new k = 0, len = strlen(oyuncu_isim); k < len; k++) if(oyuncu_isim[k] == '_') oyuncu_isim[k] = ' ';
		if(OyuncuBilgi[i][oAdmin] <= OyuncuBilgi[playerid][oAdmin] && OyuncuBilgi[i][oAdminDurum] == false || OyuncuBilgi[i][oAdminDurum] == true)
			SendClientMessageEx(playerid, RENK_BEYAZ, "* %s %s (%s) - %s ", Admin_RutbeIsim(OyuncuBilgi[i][oAdmin]), oyuncu_isim, OyuncuBilgi[i][oAdminNick], (OyuncuBilgi[i][oAdminDurum] == true) ? ("{33CC33}(Ýþbaþýnda)") : ("{FF6347}(Ýþbaþýnda deðil)")), sayi++;
	}
	if(!sayi) return HataMesaji(playerid, "Sunucuda aktif yetkili bulunmuyor.");
	return 1;
}

CMD:sorukontrol(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 4) return YetkinizYok(playerid);
	new mesaj[1024], sayi = 0;
	format(mesaj, sizeof(mesaj), "Yetkili\tBakýlan Soru\n");
    foreach(new i : Player) if(OyuncuBilgi[i][oDestekEkibi] > 0 && OyuncuBilgi[i][oGiris] == true)
		format(mesaj, sizeof(mesaj), "%s{FFFFFF}%s\t%s\n", mesaj, OyuncuBilgi[i][oAdminNick], NumaraFormati(OyuncuBilgi[i][oSoruSayisi], "")), sayi++;

	if(!sayi) return HataMesaji(playerid, "Aktif destek olmadýðý için tabloyu görüntüleyemiyorsun.");
	DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "vRP: Soru Kontrol", mesaj, "Kapat", "");
	return 1;
}

CMD:raporkontrol(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5) return YetkinizYok(playerid);
	new mesaj[1024], sayi = 0;
	format(mesaj, sizeof(mesaj), "Yetkili\tBakýlan Rapor\tBakýlan Soru\n");
    foreach(new i : Player) if(OyuncuBilgi[i][oAdmin] > 0 && OyuncuBilgi[i][oGiris] == true)
		format(mesaj, sizeof(mesaj), "%s{FFFFFF}%s\t%s\n", mesaj, OyuncuBilgi[i][oAdminNick], NumaraFormati(OyuncuBilgi[i][oRaporSayisi], ""), NumaraFormati(OyuncuBilgi[i][oSoruSayisi], "")), sayi++;

	if(!sayi) return HataMesaji(playerid, "Aktif yetkili olmadýðý için tabloyu görüntüleyemiyorsun.");
	DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "vRP: Rapor Kontrol", mesaj, "Kapat", "");
	return 1;
}

/*CMD:newbie(playerid, params[])
{
	if(newbie_kanali == false) return HataMesaji(playerid, "Bu kanal.");
    if(OyuncuBilgi[playerid][oNewbieDurum] == false) return HataMesaji(playerid, "Newbie kanalýný kapatmýþsýn, /ayarlar komutundan açabilirsin.");
	if(OyuncuBilgi[playerid][oNewbieMute] != 0) return HataMesaji(playerid, "Bu kanaldan susturulmuþsun.");
	if(OyuncuBilgi[playerid][oNewbieSure] > gettime()) {
		HataMesaji(playerid, "Bu kanala yeni bir yazý yazmak için %d saniye beklemelisin.", OyuncuBilgi[playerid][oNewbieSure] - gettime());
	    return 1;
	}
	if(isnull(params)) return KullanimMesaji(playerid, "/newbie [mesajýnýz]");
	new mesaj[144 + MAX_PLAYER_NAME];
	if(OyuncuBilgi[playerid][oAdmin] < 1 && OyuncuBilgi[playerid][oDestekEkibi] < 1) {
		new oyuncu_isim[MAX_PLAYER_NAME];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		for(new i = 0, len = strlen(oyuncu_isim); i < len; i ++) if(oyuncu_isim[i] == '_') oyuncu_isim[i] = ' ';
		OyuncuBilgi[playerid][oNewbieSure] = gettime() + 60;
	    format(mesaj, sizeof(mesaj), "Oyuncu %s: %s", oyuncu_isim, params);
	}
	else if(OyuncuBilgi[playerid][oAdmin] > 0) format(mesaj, sizeof(mesaj), "%s %s: %s", Admin_RutbeIsim(OyuncuBilgi[playerid][oAdmin]), OyuncuBilgi[playerid][oAdminNick], params);
	else if(OyuncuBilgi[playerid][oDestekEkibi] > 0) format(mesaj, sizeof(mesaj), "%s %s: %s", Supporter_RutbeIsim(OyuncuBilgi[playerid][oDestekEkibi]), OyuncuBilgi[playerid][oAdminNick], params);
	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oNewbieDurum] == true) SendClientMessageEx(i, RENK_NEWBIE, "%s", mesaj);
	new log_icerik[256];
	format(log_icerik, sizeof(log_icerik), "[%s] [newbie] %s", Tarih(), mesaj);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}*/

/*CMD:nmute(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1 && OyuncuBilgi[playerid][oDestekEkibi] < 1) return YetkinizYok(playerid);
    
	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/nmute [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid) || OyuncuBilgi[oyuncuid][oGiris] == false) return HataMesaji(playerid, "Geçersiz oyuncu veya oyuncu giriþ yapmamýþ.");
	if(OyuncuBilgi[oyuncuid][oDestekEkibi] > 0 || OyuncuBilgi[oyuncuid][oAdmin] > 0) return HataMesaji(playerid, "Yetkililer bu kanaldan susturulamaz.");
	if(oyuncuid == playerid && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Kendini muteleyemezsin.");
	new bilgi[96];
	switch(OyuncuBilgi[oyuncuid][oNewbieMute]) {
		case 0: {
			OyuncuBilgi[oyuncuid][oNewbieMute] = 1;
			SunucuMesaji(oyuncuid, "%s tarafýndan newbie kanalýndan susturuldun, artýk yazý yazamayacaksýn.", OyuncuBilgi[playerid][oAdminNick]);
			SunucuMesaji(playerid, "%s adlý kiþiyi newbie kanalýndan susturdun.", OyuncuIsim(oyuncuid));
			format(bilgi, sizeof(bilgi), "kiþiyi muteledi");
		}
		case 1: {
			OyuncuBilgi[oyuncuid][oNewbieMute] = 0;
			SunucuMesaji(oyuncuid, "%s tarafýndan newbie kanalýndan susturulman açýldý.", OyuncuBilgi[playerid][oAdminNick]);
			SunucuMesaji(playerid, "%s adlý kiþiyi newbie kanalýndan susturulmasýný açtýn.", OyuncuIsim(oyuncuid));
			format(bilgi, sizeof(bilgi), "kiþinin mutesini kaldýrdý");
		}
		default: {
			OyuncuBilgi[oyuncuid][oNewbieMute] = 1;
			SunucuMesaji(oyuncuid, "%s tarafýndan newbie kanalýndan susturuldun, artýk yazý yazamayacaksýn.", OyuncuBilgi[playerid][oAdminNick]);
			SunucuMesaji(playerid, "%s adlý kiþiyi newbie kanalýndan susturdun.", OyuncuIsim(oyuncuid));
			format(bilgi, sizeof(bilgi), "kiþiyi muteledi");
		}
	}
	new log_icerik[256], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý %s.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], bilgi);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/mute.txt", "%s", log_icerik);
	return 1;
}*/

CMD:soru(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] > 0 || OyuncuBilgi[playerid][oDestekEkibi] > 0) return HataMesaji(playerid, "Yetkililer bu komutu kullanamaz.");
	if(OyuncuBilgi[playerid][oSoruSure] > gettime()) {
		HataMesaji(playerid, "Yeni bir soru gönderebilmek için %d saniye beklemelisin.", OyuncuBilgi[playerid][oSoruSure] - gettime());
	    return 1;
	}
	if(!isnull(OyuncuBilgi[playerid][oSoru]) || OyuncuBilgi[playerid][oIlgilenenYetkili] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Þu anda aktif bir sorunuz var, /iptal \"soru\" komutunu kullanýn veya süresinin bitmesini bekleyin.");
	if(isnull(params)) return KullanimMesaji(playerid, "/soru [soru mesajýnýz]");

	format(OyuncuBilgi[playerid][oSoru], 144, "%s", params);
	SunucuMesaji(playerid, "Sorunuz yardýmcýlara iletildi.");
	new sayi = 0, isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, isim, sizeof(isim));
	OyuncuBilgi[playerid][oSoruSure] = gettime() + 60;
	OyuncuBilgi[playerid][oSoruGecikme] = gettime() + 300;

	for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
	foreach(new i : Player) if((OyuncuBilgi[i][oAdmin] > 0 || OyuncuBilgi[i][oDestekEkibi] > 0) && OyuncuBilgi[i][oSoruGoruntule] == true) SendClientMessageEx(i, RENK_SORU, "Gelen Soru [%d] %s: %s", playerid, isim, params), sayi++;

	if(!sayi) HataMesaji(playerid, "Þu anda sorunuzla ilgilenebilecek bir yetkili bulunmamaktadýr, forumdan destek alabilirsiniz.");
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) soru gönderdi: %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/sorular.txt", "%s", log_icerik);
	return 1;
}

CMD:sorular(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1 && OyuncuBilgi[playerid][oDestekEkibi] < 1) return YetkinizYok(playerid);

	new sayi = 0;
	foreach(new i : Player) if(IsPlayerConnected(i) && !isnull(OyuncuBilgi[i][oSoru])) {
		SendClientMessageEx(playerid, RENK_SORU, "%s [%d]: %s", OyuncuIsim(i), i, OyuncuBilgi[i][oSoru]), sayi++;
	}
	if(sayi > 0) UyariMesaji(playerid, "Ýlgilenilmemiþ %s adet soru bulunuyor. (/skabul, /ssil)", NumaraFormati(sayi, ""));
	if(!sayi) HataMesaji(playerid, "Gönderilmiþ soru yok.");
	return 1;
}

/*CMD:sgit(playerid, params[])
{
	if(OyuncuBilgi[playerid][oDestekEkibi] < 2) return YetkinizYok(playerid);
	if(OyuncuBilgi[playerid][oIncelenenSoruSahibi] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Bir soruyla ilgileniyorsun, öncelikle onu bitirmelisin. (/sbitir)");
	
	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/sgit [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Geçersiz oyuncu.");
	if(isnull(OyuncuBilgi[oyuncuid][oSoru])) return HataMesaji(playerid, "Bu oyuncu soru göndermemiþ.");
	if(OyuncuBilgi[oyuncuid][oPaintball] != -1) return HataMesaji(playerid, "Bu oyuncu paintballda, yanýna gidemezsin.");
	if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0 || OyuncuBilgi[oyuncuid][oHapisSure][1] > 0) return HataMesaji(playerid, "Bu oyuncu hapiste, yanýna gidemezsin.");
	if(oyuncuid == playerid && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Kendi sorunu kabul edemezsin.");
	
	OyuncuBilgi[playerid][oSoruSayisi]++;
	OyuncuBilgi[playerid][oIncelenenSoruSahibi] = oyuncuid;
	OyuncuBilgi[oyuncuid][oIlgilenenYetkili] = playerid;
	OyuncuBilgi[oyuncuid][oSoru][0] = 0;
	OyuncuBilgi[oyuncuid][oSoruSure] = 0;
	SetPVarInt(playerid, "Supporter_Soru", 1);
	EskiVeriler[playerid][eskiVW] = GetPlayerVirtualWorld(playerid);
	EskiVeriler[playerid][eskiInt] = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, EskiVeriler[playerid][eskiPos][0], EskiVeriler[playerid][eskiPos][1], EskiVeriler[playerid][eskiPos][2]);
	GetPlayerFacingAngle(playerid, EskiVeriler[playerid][eskiPos][3]);
	GetPlayerHealth(playerid, EskiVeriler[playerid][eskiCan]);
	GetPlayerArmour(playerid, EskiVeriler[playerid][eskiZirh]);
	GetPlayerPos(oyuncuid, OyuncuBilgi[oyuncuid][oPos][0], OyuncuBilgi[oyuncuid][oPos][1], OyuncuBilgi[oyuncuid][oPos][2]);
	OyuncuPosDegistir(playerid, OyuncuBilgi[oyuncuid][oPos][0], OyuncuBilgi[oyuncuid][oPos][1], OyuncuBilgi[oyuncuid][oPos][2]);
	SetPlayerInterior(playerid, GetPlayerInterior(oyuncuid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(oyuncuid));
	SunucuMesaji(playerid, "%s adlý kiþinin sorusunu kabul ettin ve yanýna ýþýnlandýn, /sbitir ile eski konumuna dönebilirsin.", OyuncuIsim(oyuncuid));
	SunucuMesaji(oyuncuid, "%s sorunu kabul etti ve yanýna ýþýnlandý, sana yardýmcý olacak.", OyuncuBilgi[playerid][oAdminNick]);
	SunucuMesaji(oyuncuid, "Ýletiþime geçmek için /scevap, soruyu bitirmek için /sorubitir komutlarýný kullanabilirsin.");
	
	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && (OyuncuBilgi[i][oAdmin] > 0 || OyuncuBilgi[i][oDestekEkibi] > 0) && OyuncuBilgi[i][oSoruGoruntule] == true) {
		if(OyuncuBilgi[playerid][oAdmin] > 0) SendClientMessageEx(i, RENK_SORU, "SORU: {ffffff}%s adlý yetkili %s adlý kiþinin sorusunu kabul etti.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid));
		else if(OyuncuBilgi[playerid][oDestekEkibi] > 0) SendClientMessageEx(i, RENK_SORU, "SORU: {ffffff}%s adlý supporter %s adlý kiþinin sorusunu kabul etti.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	}
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], yetkili_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, yetkili_isim, sizeof(yetkili_isim));
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin sorusunu kabul etti.", Tarih(), yetkili_isim, OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/sorular.txt", "%s", log_icerik);
	return 1;
}*/

CMD:skabul(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1 && OyuncuBilgi[playerid][oDestekEkibi] < 1) return YetkinizYok(playerid);
	if(OyuncuBilgi[playerid][oIncelenenSoruSahibi] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Bir soruyla ilgileniyorsun, öncelikle onu bitirmelisin. (/sbitir)");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/skabul [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Geçersiz oyuncu.");
	if(isnull(OyuncuBilgi[oyuncuid][oSoru])) return HataMesaji(playerid, "Bu oyuncu soru göndermemiþ.");
	if(oyuncuid == playerid && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Kendi sorunu kabul edemezsin.");

	OyuncuBilgi[playerid][oSoruSayisi]++;
	OyuncuBilgi[playerid][oIncelenenSoruSahibi] = oyuncuid;
	OyuncuBilgi[oyuncuid][oIlgilenenYetkili] = playerid;
	OyuncuBilgi[oyuncuid][oSoru][0] = 0;
	OyuncuBilgi[oyuncuid][oSoruSure] = 0;

	SunucuMesaji(playerid, "%s adlý kiþinin sorusunu kabul ettin. \"/apm\" komutuyla iletiþime geçebilirsin.", OyuncuIsim(oyuncuid));
	SunucuMesaji(oyuncuid, "%s sorunu kabul etti, \"/scevap\" komutuyla cevap verebilir \"/sorubitir\" komutuyla kapatabilirsiniz.", OyuncuBilgi[playerid][oAdminNick]);

	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && (OyuncuBilgi[i][oAdmin] > 0 || OyuncuBilgi[i][oDestekEkibi] > 0) && OyuncuBilgi[i][oSoruGoruntule] == true) {
		if(OyuncuBilgi[playerid][oAdmin] > 0) SendClientMessageEx(i, RENK_SORU, "SORU: {ffffff}%s adlý yetkili %s adlý kiþinin sorusunu kabul etti.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid));
		else if(OyuncuBilgi[playerid][oDestekEkibi] > 0) SendClientMessageEx(i, RENK_SORU, "SORU: {ffffff}%s adlý destek %s adlý kiþinin sorusunu kabul etti.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	}
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], yetkili_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, yetkili_isim, sizeof(yetkili_isim));
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin sorusunu kabul etti.", Tarih(), yetkili_isim, OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/sorular.txt", "%s", log_icerik);
	return 1;
}

CMD:ssil(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1 && OyuncuBilgi[playerid][oDestekEkibi] < 1) return YetkinizYok(playerid);
	if(OyuncuBilgi[playerid][oIncelenenSoruSahibi] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Bir soruyla ilgileniyorsun, öncelikle onu bitirmelisin. (/sbitir)");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/ssil [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Geçersiz oyuncu.");
	if(isnull(OyuncuBilgi[oyuncuid][oSoru])) return HataMesaji(playerid, "Bu oyuncu soru göndermemiþ.");
	if(oyuncuid == playerid && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Kendi sorunu red edemezsin.");

	OyuncuBilgi[playerid][oIncelenenSoruSahibi] = INVALID_PLAYER_ID;
	OyuncuBilgi[oyuncuid][oIlgilenenYetkili] = INVALID_PLAYER_ID;
	OyuncuBilgi[oyuncuid][oSoru][0] = 0;
	OyuncuBilgi[oyuncuid][oSoruSure] = 0;

	SunucuMesaji(playerid, "%s adlý kiþinin sorusunu red ettin.", OyuncuIsim(oyuncuid));
	SunucuMesaji(oyuncuid, "%s adlý yetkili sorunu reddetti.", OyuncuBilgi[playerid][oAdminNick]);

	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && (OyuncuBilgi[i][oAdmin] > 0 || OyuncuBilgi[i][oDestekEkibi] > 0) && OyuncuBilgi[i][oSoruGoruntule] == true) {
		if(OyuncuBilgi[playerid][oAdmin] > 0) SendClientMessageEx(i, RENK_SORU, "SORU: {ffffff}%s adlý yetkili %s adlý kiþinin sorusunu red etti.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid));
		else if(OyuncuBilgi[playerid][oDestekEkibi] > 0) SendClientMessageEx(i, RENK_SORU, "SORU: {ffffff}%s adlý destek %s adlý kiþinin sorusunu red etti.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	}
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], yetkili_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, yetkili_isim, sizeof(yetkili_isim));
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin sorusunu sildi.", Tarih(), yetkili_isim, OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/sorular.txt", "%s", log_icerik);
	return 1;
}

CMD:sbitir(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1 && OyuncuBilgi[playerid][oDestekEkibi] < 1) return YetkinizYok(playerid);
	if(OyuncuBilgi[playerid][oIncelenenSoruSahibi] == INVALID_PLAYER_ID) return HataMesaji(playerid, "Bir soruyla ilgilenmiyorsun.");

	new oyuncuid = OyuncuBilgi[playerid][oIncelenenSoruSahibi];
	UyariMesaji(playerid, "Ýlgilendiðiniz soruyu kapattýnýz.");
	UyariMesaji(oyuncuid, "Soru talebiniz ilgilenen yetkili tarafýndan kapatýldý.");
	OyuncuBilgi[playerid][oIncelenenSoruSahibi] = INVALID_PLAYER_ID;
	OyuncuBilgi[oyuncuid][oIlgilenenYetkili] = INVALID_PLAYER_ID;
	if(GetPVarInt(playerid, "Destek_Soru") == 1) {
	    SetPVarInt(playerid, "Destek_Soru", 0);
		OyuncuPosDegistir(playerid, EskiVeriler[playerid][eskiPos][0], EskiVeriler[playerid][eskiPos][1], EskiVeriler[playerid][eskiPos][2]);
		SetPlayerFacingAngle(playerid, EskiVeriler[playerid][eskiPos][3]);
		SetPlayerVirtualWorld(playerid, EskiVeriler[playerid][eskiVW]);
		SetPlayerInterior(playerid, EskiVeriler[playerid][eskiInt]);
		SetCameraBehindPlayer(playerid);
		DondurulmaEtkisi(playerid);
		CanDuzenle(playerid, EskiVeriler[playerid][eskiCan]);
		ZirhDuzenle(playerid, EskiVeriler[playerid][eskiZirh]);
	}
	return 1;
}

CMD:sorubitir(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] > 0 || OyuncuBilgi[playerid][oDestekEkibi] > 0) return HataMesaji(playerid, "Yetkililer bu komutu kullanamaz.");
	if(OyuncuBilgi[playerid][oIlgilenenYetkili] == INVALID_PLAYER_ID) return SunucuMesaji(playerid, "Ýlgilenilen bir sorunuz bulunmuyor.");

	new oyuncuid = OyuncuBilgi[playerid][oIlgilenenYetkili];
	UyariMesaji(playerid, "Soruyu kapattýnýz.");
	UyariMesaji(oyuncuid, "Sorunuz sahibi tarafýndan kapatýldý.");
	OyuncuBilgi[playerid][oIlgilenenYetkili] = INVALID_PLAYER_ID;
	OyuncuBilgi[oyuncuid][oIncelenenSoruSahibi] = INVALID_PLAYER_ID;
	if(GetPVarInt(oyuncuid, "Destek_Soru") == 1) {
	    SetPVarInt(oyuncuid, "Destek_Soru", 0);
		OyuncuPosDegistir(oyuncuid, EskiVeriler[oyuncuid][eskiPos][0], EskiVeriler[oyuncuid][eskiPos][1], EskiVeriler[oyuncuid][eskiPos][2]);
		SetPlayerFacingAngle(oyuncuid, EskiVeriler[oyuncuid][eskiPos][3]);
		SetPlayerVirtualWorld(oyuncuid, EskiVeriler[oyuncuid][eskiVW]);
		SetPlayerInterior(oyuncuid, EskiVeriler[oyuncuid][eskiInt]);
		SetCameraBehindPlayer(oyuncuid);
		DondurulmaEtkisi(oyuncuid);
		CanDuzenle(oyuncuid, EskiVeriler[oyuncuid][eskiCan]);
		ZirhDuzenle(oyuncuid, EskiVeriler[oyuncuid][eskiZirh]);
	}
	return 1;
}

CMD:scevap(playerid, params[])
{
	if(OyuncuBilgi[playerid][oIlgilenenYetkili] == INVALID_PLAYER_ID) return HataMesaji(playerid, "Kabul edilmiþ bir sorun yok.");

	if(isnull(params)) return KullanimMesaji(playerid, "/scevap [mesaj]");
	new oyuncuid = OyuncuBilgi[playerid][oIlgilenenYetkili];
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Bir sorun oluþtu.");

	SendClientMessageEx(playerid, RENK_SARI, "(>> cevap) %s: %s", OyuncuBilgi[oyuncuid][oAdminNick], params);
	SendClientMessageEx(oyuncuid, RENK_SARI, "(<< cevap) %s (%d): %s", OyuncuIsim(playerid), playerid, params);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], yetkili_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, yetkili_isim, sizeof(yetkili_isim));
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [scevap] %s(%d) > %s(%d): %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], yetkili_isim, OyuncuBilgi[oyuncuid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:rapor(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] > 0) return HataMesaji(playerid, "Yetkililer bu komutu kullanamaz.");
	if(OyuncuBilgi[playerid][oRaporSure] > gettime()) {
		HataMesaji(playerid, "Yeni bir rapor gönderebilmek için %d saniye beklemelisin.", OyuncuBilgi[playerid][oRaporSure] - gettime());
	    return 1;
	}
	if(!isnull(OyuncuBilgi[playerid][oRapor]) || OyuncuBilgi[playerid][oIlgilenenAdmin] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Þu anda aktif bir raporunuz var, /iptal \"rapor\" komutunu kullanýn veya süresinin bitmesini bekleyin.");
	if(isnull(params)) return KullanimMesaji(playerid, "/rapor [rapor mesajýnýz]");

	format(OyuncuBilgi[playerid][oRapor], 144, "%s", params);
	SunucuMesaji(playerid, "Rapor mesajýnýz yetkililere iletildi.");
	new sayi = 0, isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, isim, sizeof(isim));
	OyuncuBilgi[playerid][oRaporSure] = gettime() + 60;
	OyuncuBilgi[playerid][oRaporGecikme] = gettime() + 300;

	for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
	foreach(new i : Player) if(OyuncuBilgi[i][oAdmin] > 0 && OyuncuBilgi[i][oRaporGoruntule] == true) SendClientMessageEx(i, RENK_RAPOR, "Gelen Rapor [%d] %s: %s", playerid, isim, params), sayi++;

	if(!sayi) HataMesaji(playerid, "Þu anda raporunuzla ilgilenebilecek bir yetkili bulunmamaktadýr. Yaþadýðýnýz sorunun kanýtýný alarak forumda konu açabilirsiniz.");
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) rapor gönderdi: %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/raporlar.txt", "%s", log_icerik);
	return 1;
}

CMD:raporlar(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new sayi = 0;
	foreach(new i : Player) if(IsPlayerConnected(i) && !isnull(OyuncuBilgi[i][oRapor])) {
		SendClientMessageEx(playerid, RENK_RAPOR, "%s [%d]: %s", OyuncuIsim(i), i, OyuncuBilgi[i][oRapor]), sayi++;
	}
	if(sayi > 0) UyariMesaji(playerid, "Ýlgilenilmemiþ %s adet rapor bulunuyor. (/rkabul, /rsil)", NumaraFormati(sayi, ""));
	if(!sayi) HataMesaji(playerid, "Gönderilmiþ rapor yok.");
	return 1;
}

CMD:rkabul(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	if(OyuncuBilgi[playerid][oIncelenenRaporSahibi] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Bir raporla ilgileniyorsun, öncelikle onu bitirmelisin. (/rbitir)");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/rkabul [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Geçersiz oyuncu.");
	if(isnull(OyuncuBilgi[oyuncuid][oRapor])) return HataMesaji(playerid, "Bu oyuncu rapor göndermemiþ.");
	if(oyuncuid == playerid && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Kendi raporunu kabul edemezsin.");

	OyuncuBilgi[playerid][oRaporSayisi]++;
	OyuncuBilgi[playerid][oIncelenenRaporSahibi] = oyuncuid;
	OyuncuBilgi[oyuncuid][oIlgilenenAdmin] = playerid;
	OyuncuBilgi[oyuncuid][oRapor][0] = 0;
	OyuncuBilgi[oyuncuid][oRaporGecikme] = 0;

	SunucuMesaji(playerid, "%s adlý kiþinin raporunu kabul ettin. \"/apm\" komutuyla iletiþime geçebilirsin.", OyuncuIsim(oyuncuid));
	if(OyuncuBilgi[playerid][oAdmin] > 0) SunucuMesaji(oyuncuid, "%s raporunu kabul etti, \"/cevap\" komutuyla cevap verebilir \"/raporbitir\" komutuyla kapatabilirsiniz.", OyuncuBilgi[playerid][oAdminNick]);

	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oAdmin] > 0 && OyuncuBilgi[i][oRaporGoruntule] == true) {
		if(OyuncuBilgi[playerid][oAdmin] > 0) SendClientMessageEx(i, RENK_TURUNCU, "RAPOR: %s, %s adlý kiþinin raporunu kabul etti.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	}
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], yetkili_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, yetkili_isim, sizeof(yetkili_isim));
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin raporunu kabul etti.", Tarih(), yetkili_isim, OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/raporlar.txt", "%s", log_icerik);
	return 1;
}

CMD:rsoru(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	if(OyuncuBilgi[playerid][oIncelenenRaporSahibi] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Bir raporla ilgileniyorsun, öncelikle onu bitirmelisin. (/rbitir)");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/rsoru [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Geçersiz oyuncu.");
	if(isnull(OyuncuBilgi[oyuncuid][oRapor])) return HataMesaji(playerid, "Bu oyuncu rapor göndermemiþ.");
	if(oyuncuid == playerid && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Kendi raporunu soruya yönlendiremezsin.");

    OyuncuBilgi[playerid][oRaporSayisi]++;
	OyuncuBilgi[playerid][oIncelenenRaporSahibi] = INVALID_PLAYER_ID;
	OyuncuBilgi[oyuncuid][oIlgilenenAdmin] = INVALID_PLAYER_ID;
	format(OyuncuBilgi[oyuncuid][oSoru], 144, "%s", OyuncuBilgi[oyuncuid][oRapor]);
	new isim[MAX_PLAYER_NAME];
	GetPlayerName(oyuncuid, isim, sizeof(isim));
	for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
	foreach(new i : Player) if((OyuncuBilgi[i][oAdmin] > 0 || OyuncuBilgi[i][oDestekEkibi] > 0) && OyuncuBilgi[i][oSoruGoruntule] == true) SendClientMessageEx(i, RENK_SORU, "Gelen Soru [%d] %s: %s", oyuncuid, isim, OyuncuBilgi[oyuncuid][oRapor]);

	OyuncuBilgi[oyuncuid][oRapor][0] = 0;
	OyuncuBilgi[oyuncuid][oRaporGecikme] = 0;

	SunucuMesaji(oyuncuid, "%s adlý yetkili raporunu inceledi ve sorulara yönlendirdi.", OyuncuBilgi[playerid][oAdminNick]);

	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oAdmin] > 0 && OyuncuBilgi[i][oRaporGoruntule] == true) {
		SendClientMessageEx(i, RENK_TURUNCU, "RAPOR: %s, %s adlý kiþinin raporunu sorulara yönlendirdi.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	}
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], yetkili_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, yetkili_isim, sizeof(yetkili_isim));
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin raporunu sorulara yönlendirdi.", Tarih(), yetkili_isim, OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/raporlar.txt", "%s", log_icerik);
	return 1;
}

CMD:rforum(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	if(OyuncuBilgi[playerid][oIncelenenRaporSahibi] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Bir raporla ilgileniyorsun, öncelikle onu bitirmelisin. (/rbitir)");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/rforum [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Geçersiz oyuncu.");
	if(isnull(OyuncuBilgi[oyuncuid][oRapor])) return HataMesaji(playerid, "Bu oyuncu rapor göndermemiþ.");
	if(oyuncuid == playerid && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Kendi raporunu foruma yönlendiremezsin.");

    OyuncuBilgi[playerid][oRaporSayisi]++;
	OyuncuBilgi[playerid][oIncelenenRaporSahibi] = INVALID_PLAYER_ID;
	OyuncuBilgi[oyuncuid][oIlgilenenAdmin] = INVALID_PLAYER_ID;
	OyuncuBilgi[oyuncuid][oRapor][0] = 0;
	OyuncuBilgi[oyuncuid][oRaporGecikme] = 0;

	SunucuMesaji(oyuncuid, "%s adlý yetkili raporunu inceledi ve foruma yönlendirdi. (www.viga-roleplay.com)", OyuncuBilgi[playerid][oAdminNick]);

	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oAdmin] > 0 && OyuncuBilgi[i][oRaporGoruntule] == true) {
		SendClientMessageEx(i, RENK_TURUNCU, "RAPOR: %s, %s adlý kiþinin raporunu foruma yönlendirdi.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	}
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], yetkili_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, yetkili_isim, sizeof(yetkili_isim));
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin raporunu foruma yönlendirdi.", Tarih(), yetkili_isim, OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/raporlar.txt", "%s", log_icerik);
	return 1;
}

CMD:rsil(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	if(OyuncuBilgi[playerid][oIncelenenRaporSahibi] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Bir raporla ilgileniyorsun, öncelikle onu bitirmelisin. (/rbitir)");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/rsil [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Geçersiz oyuncu.");
	if(isnull(OyuncuBilgi[oyuncuid][oRapor])) return HataMesaji(playerid, "Bu oyuncu rapor göndermemiþ.");
	if(oyuncuid == playerid && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Kendi raporunu red edemezsin.");

    OyuncuBilgi[playerid][oRaporSayisi]++;
	OyuncuBilgi[playerid][oIncelenenRaporSahibi] = INVALID_PLAYER_ID;
	OyuncuBilgi[oyuncuid][oIlgilenenAdmin] = INVALID_PLAYER_ID;
	OyuncuBilgi[oyuncuid][oRapor][0] = 0;
	OyuncuBilgi[oyuncuid][oRaporGecikme] = 0;

	SunucuMesaji(playerid, "%s adlý kiþinin raporunu red ettin.", OyuncuIsim(oyuncuid));
	if(OyuncuBilgi[playerid][oAdmin] > 0) SunucuMesaji(oyuncuid, "%s adlý yetkili raporunu reddetti.", OyuncuBilgi[playerid][oAdminNick]);

	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oAdmin] > 0 && OyuncuBilgi[i][oRaporGoruntule] == true) {
		SendClientMessageEx(i, RENK_TURUNCU, "RAPOR: %s, %s adlý kiþinin raporunu reddetti.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	}
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], yetkili_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, yetkili_isim, sizeof(yetkili_isim));
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin raporunu sildi.", Tarih(), yetkili_isim, OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/raporlar.txt", "%s", log_icerik);
	return 1;
}

CMD:rbitir(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	if(OyuncuBilgi[playerid][oIncelenenRaporSahibi] == INVALID_PLAYER_ID) return HataMesaji(playerid, "Bir raporla ilgilenmiyorsun.");

	new oyuncuid = OyuncuBilgi[playerid][oIncelenenRaporSahibi];
	UyariMesaji(playerid, "Ýlgilendiðiniz raporu kapattýnýz.");
	UyariMesaji(oyuncuid, "Raporunuz ilgilenen yetkili tarafýndan kapatýldý.");
	OyuncuBilgi[playerid][oIncelenenRaporSahibi] = INVALID_PLAYER_ID;
	OyuncuBilgi[oyuncuid][oIlgilenenAdmin] = INVALID_PLAYER_ID;
	return 1;
}

CMD:raporbitir(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] > 0) return HataMesaji(playerid, "Yetkililer bu komutu kullanamaz.");
	if(OyuncuBilgi[playerid][oIlgilenenAdmin] == INVALID_PLAYER_ID) return SunucuMesaji(playerid, "Ýlgilenilen bir raporunuz bulunmuyor.");

	new oyuncuid = OyuncuBilgi[playerid][oIlgilenenAdmin];
	UyariMesaji(playerid, "Raporu kapattýnýz.");
	UyariMesaji(oyuncuid, "Raporunuz sahibi tarafýndan kapatýldý.");
	OyuncuBilgi[playerid][oIlgilenenAdmin] = INVALID_PLAYER_ID;
	OyuncuBilgi[oyuncuid][oIncelenenRaporSahibi] = INVALID_PLAYER_ID;
	return 1;
}

CMD:cevap(playerid, params[])
{
	if(OyuncuBilgi[playerid][oIlgilenenAdmin] == INVALID_PLAYER_ID) return HataMesaji(playerid, "Kabul edilmiþ bir raporun yok.");

	if(isnull(params)) return KullanimMesaji(playerid, "/cevap [mesaj]");
	new oyuncuid = OyuncuBilgi[playerid][oIlgilenenAdmin];
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Bir sorun oluþtu.");

	if(OyuncuBilgi[oyuncuid][oAdmin] > 0) SendClientMessageEx(playerid, RENK_SARI, "(rapor cevap) %s: %s", OyuncuBilgi[oyuncuid][oAdminNick], params);
	else if(OyuncuBilgi[oyuncuid][oDestekEkibi] > 0) {
	    new destek_isim[MAX_PLAYER_NAME + 1];
	    GetPlayerName(oyuncuid, destek_isim, sizeof(destek_isim));
	    for(new i = 0, len = strlen(destek_isim); i < len; i ++) if(destek_isim[i] == '_') destek_isim[i] = ' ';
		SendClientMessageEx(playerid, RENK_SARI, "(rapor cevap) %s: %s", destek_isim, params);
	}
	SendClientMessageEx(oyuncuid, RENK_SARI, "(rapor cevap) %s (%d): %s", OyuncuIsim(playerid), playerid, params);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], yetkili_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, yetkili_isim, sizeof(yetkili_isim));
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [rcevap] %s(%d) > %s(%d): %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], yetkili_isim, OyuncuBilgi[oyuncuid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:destekler(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1 && OyuncuBilgi[playerid][oDestekEkibi] < 1) return YetkinizYok(playerid);
	new sayi = 0, destek_isim[MAX_PLAYER_NAME + 1];
    foreach (new i : Player) if(OyuncuBilgi[i][oDestekEkibi] > 0)
	{
	    GetPlayerName(i, destek_isim, sizeof(destek_isim));
	    for(new h = 0, len = strlen(destek_isim); h < len; h++) if(destek_isim[h] == '_') destek_isim[h] = ' ';
	    SendClientMessageEx(playerid, RENK_BEYAZ, "* %s - %s ", destek_isim, OyuncuBilgi[i][oAdminNick]);
		sayi++;
	}
	if(!sayi) HataMesaji(playerid, "Sunucuda aktif destek bulunmuyor.");
	return 1;
}

CMD:soylenti(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1 && OyuncuBilgi[playerid][oEventMod] == 0) return YetkinizYok(playerid);
    if(isnull(params)) return KullanimMesaji(playerid, "/soylenti [metin]");

	foreach (new i : Player) SendClientMessageEx(i, RENK_SOKAKTANSESLER, "(( Þehirdeki Söylentiler: %s ))", params);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	new DCC_Channel:dcid = DCC_FindChannelById("982777853424844861"), duzeltmeli[144];
	format(duzeltmeli, sizeof(duzeltmeli), "[%s] - **%s**", Tarih(), ConvertToTurkish(params));
	DCC_SendChannelMessage(dcid, duzeltmeli);
	format(log_icerik, sizeof(log_icerik), "[%s] [ss] %s(%d): %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_log.txt", "%s", log_icerik);
	return 1;
}

CMD:ooc(playerid, params[])
{
	if(!oockanal && !IsPlayerAdmin(playerid) && OyuncuBilgi[playerid][oAdmin] < 5) return HataMesaji(playerid, "OOC kanal yetkili tarafýndan kapatýlmýþ.");

	if(isnull(params)) return KullanimMesaji(playerid, "/ooc [ooc kanal]");

	foreach(new i : Player) if(OyuncuBilgi[i][oGiris]) SendClientMessageEx(i, RENK_BEYAZ, "(( [OOC] {%06x}%s{FFFFFF}: %s ))", RENK_Y1 >>> 8, OyuncuIsim(playerid), params);
	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] [adm-ooc] %s(%d): %s", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:b(playerid, params[])
{
	if(isnull(params)) return KullanimMesaji(playerid, "/b [yazý]");

	if(OyuncuBilgi[playerid][oAdminDurum])
	{
		SendNearbyMessage(playerid, OOC_MESAFE, RENK_BEYAZ, "(( {%06x}%s{FFFFFF}: %s ))", GetPlayerColor(playerid) >>> 8, OyuncuIsim(playerid), params);
		return 1;
	}
	SendNearbyMessage(playerid, OOC_MESAFE, RENK_BEYAZ, "(( [%d] %s: %s ))", playerid, OyuncuIsim(playerid), params);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [ooc] %s(%d): %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:ks(playerid, params[])
{
	if(OyuncuBilgi[playerid][oEkstraDil] == -1) return HataMesaji(playerid, "Ýkincil dil seçmemiþsin, /dilsec komutu ile kendine ekstra bir dil seçebilirsin.");
	if(PetKontrol[playerid] != -1) return HataMesaji(playerid, "Pet kontrol modunda bu komutu kullanamazsýn.");
	if(isnull(params)) return KullanimMesaji(playerid, "/k [ikincil dil]");

	foreach(new i : Player)
	{
	    if(YakinlikKontrol(playerid, i, BAGIR_MESAFE) && (OyuncuBilgi[i][oEkstraDil] == OyuncuBilgi[playerid][oEkstraDil] || OyuncuBilgi[i][oAdminDurum] == true || OyuncuBilgi[i][oAdmin] >= 7))
			SendClientMessageEx(i, RENK_BEYAZ, "[%s] %s baðýrýr: %s!", EkstraDilCek(playerid), OyuncuIsim(playerid), params);

		else if(YakinlikKontrol(playerid, i, BAGIR_MESAFE) && OyuncuBilgi[i][oEkstraDil] != OyuncuBilgi[playerid][oEkstraDil])
			SendClientMessageEx(i, RENK_BEYAZ, "[%s] %s baðýrýr: ?!? ?!? ?!?", EkstraDilCek(playerid), OyuncuIsim(playerid));
	}
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [chat] %s %s(%d): %s", Tarih(), EkstraDilCek(playerid), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:bagir(playerid, params[])
{
	/*if(OyuncuBilgi[playerid][oDonduruldu] > 0) {
		HataMesaji(playerid, "Taser veya beanbag etkisindeyken konuþamazsýn.");
		cmd_ame(playerid, "konuþmaya çalýþýr ancak elektro þok etkisinde olduðu için söylediði anlaþýlmaz.");
		return 1;
	} */// Konuþamama Etkisi
	if(PetKontrol[playerid] != -1) return HataMesaji(playerid, "Pet kontrol modunda bu komutu kullanamazsýn.");
	if(isnull(params)) return KullanimMesaji(playerid, "/bagir [yazý]");

	SendNearbyMessage(playerid, BAGIR_MESAFE, RENK_BEYAZ, "%s baðýrýr: %s!", OyuncuIsim(playerid), params);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [bagirma] %s(%d): %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	/*if(Ev_Yakin(playerid) != -1) {
		new evid = Ev_Yakin(playerid);
		foreach(new o : Player) if(EvBilgi[evid][evKullanimda] && IsPlayerInRangeOfPoint(o, 10.0, EvBilgi[evid][evIcPos][0], EvBilgi[evid][evIcPos][1], EvBilgi[evid][evIcPos][2]))
		{
			if(GetPlayerInterior(o) == EvBilgi[evid][evInterior] && GetPlayerVirtualWorld(o) == EvBilgi[evid][evVW])
			SendClientMessageEx(o, RENK_BEYAZ, "(Ev Dýþý) %s baðýrýr: %s!", OyuncuIsim(playerid), params);
		}
	}
	for(new i = 0; i != MAKSIMUM_EV; i ++) if(EvBilgi[i][evKullanimda] && IsPlayerInRangeOfPoint(playerid, 10.0, EvBilgi[i][evIcPos][0], EvBilgi[i][evIcPos][1], EvBilgi[i][evIcPos][2])) {
		if(GetPlayerInterior(playerid) != EvBilgi[i][evInterior] || GetPlayerVirtualWorld(playerid) != EvBilgi[i][evVW]) return 1;
		foreach(new o : Player) if(Ev_Yakin(o) == i) SendClientMessageEx(o, RENK_BEYAZ, "(Ev Ýçi) %s baðýrýr: %s!", OyuncuIsim(playerid), params);
	}*/
	return 1;
}

CMD:kses(playerid, params[])
{
	/*if(OyuncuBilgi[playerid][oDonduruldu] > 0) {
		HataMesaji(playerid, "Taser veya beanbag etkisindeyken konuþamazsýn.");
		cmd_ame(playerid, "konuþmaya çalýþýr ancak elektro þok etkisinde olduðu için söylediði anlaþýlmaz.");
		return 1;
	}*/ // Konuþamama Etkisi
	if(IsPlayerInAnyVehicle(playerid) && AracCamDurum[GetPlayerVehicleID(playerid)] == false) return HataMesaji(playerid, "Camý kapalý bir araçta kýsýk ses kullanamazsýn.");
    if(PetKontrol[playerid] != -1) return HataMesaji(playerid, "Pet kontrol modunda bu komutu kullanamazsýn.");
	if(isnull(params)) return KullanimMesaji(playerid, "/kses [yazý]");

	new konusma_bilgi[144 + MAX_PLAYER_NAME];
	format(konusma_bilgi, sizeof(konusma_bilgi), "%s kýsýk sesle: %s", OyuncuIsim(playerid), params);
	ProxDetectorArac(KSES_MESAFE, playerid, konusma_bilgi, RENK_KONUSMA1, RENK_KONUSMA2, RENK_KONUSMA3, RENK_KONUSMA4, RENK_KONUSMA5);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [kses] %s(%d): %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:kl(playerid, params[])
{
	if(OyuncuBilgi[playerid][oEkstraDil] == -1) return HataMesaji(playerid, "Ýkincil dil seçmemiþsin, /dilsec komutu ile kendine ekstra bir dil seçebilirsin.");
	if(PetKontrol[playerid] != -1) return HataMesaji(playerid, "Pet kontrol modunda bu komutu kullanamazsýn.");
	if(isnull(params)) return KullanimMesaji(playerid, "/k [ikincil dil]");

	foreach(new i : Player)
	{
	    if(YakinlikKontrol(playerid, i, KSES_MESAFE) && (OyuncuBilgi[i][oEkstraDil] == OyuncuBilgi[playerid][oEkstraDil] || OyuncuBilgi[i][oAdminDurum] == true || OyuncuBilgi[i][oAdmin] >= 7))
			SendClientMessageEx(i, RENK_BEYAZ, "[%s] %s kýsýk sesle: %s", EkstraDilCek(playerid), OyuncuIsim(playerid), params);

		else if(YakinlikKontrol(playerid, i, KSES_MESAFE) && OyuncuBilgi[i][oEkstraDil] != OyuncuBilgi[playerid][oEkstraDil])
			SendClientMessageEx(i, RENK_BEYAZ, "[%s] %s kýsýk sesle: ??? ??? ???", EkstraDilCek(playerid), OyuncuIsim(playerid));
	}
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [chat] %s %s(%d): %s", Tarih(), EkstraDilCek(playerid), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:id(playerid, params[])
{
	if(isnull(params)) return KullanimMesaji(playerid, "/id [isim]");
	if(strlen(params) < 2) return HataMesaji(playerid, "Bulmak istediðin kiþinin ismi en az 2 karakterden oluþmalýdýr.");

	new sayi = 0, isim[MAX_PLAYER_NAME + 1], fps = 0;
	foreach(new i : Player)
	{
	    GetPlayerName(i, isim, sizeof(isim));
	    if(strfind(isim, params, true) != -1)
	    {
			for(new x = 0, len = strlen(isim); x < len; x++) if(isim[x] == '_') isim[x] = ' ';
			if(GetPlayerFPS(i) > 300) fps = 300;
			else if(GetPlayerFPS(i) < 0) fps = 0;
			else if(GetPlayerFPS(i) > 0 && GetPlayerFPS(i) < 300) fps = GetPlayerFPS(i);
	        SendClientMessageEx(playerid, RENK_BEYAZ, "ID: %d - Ýsim: %s - Level: %d - Ping: %d - FPS: %d", i, isim, OyuncuBilgi[i][oSeviye], GetPlayerPing(i), fps);
	        sayi++;
		}
	}
	if(!sayi) HataMesaji(playerid, "\"%s\" adýna sonuç bulunamadý.", params);
	return 1;
}

CMD:a(playerid, params[])
{
	if(!OyuncuBilgi[playerid][oAdmin]) return YetkinizYok(playerid);
	if(!akanal) return HataMesaji(playerid, "Admin iletiþim kanalý yönetim tarafýndan kapatýlmýþ.");
	if(isnull(params)) return KullanimMesaji(playerid, "/a [Yazý]");

	new isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, isim, sizeof(isim));

	for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
    YoneticiMesaji(RENK_BEYAZ, "{AA3333}%s %s(%d): {FFFFFF}%s", Admin_RutbeIsim(OyuncuBilgi[playerid][oAdmin]), isim, playerid, params);
 	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [adm-chat] %s(%d): %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:h(playerid, params[])
{
	if(!OyuncuBilgi[playerid][oDestekEkibi] && !OyuncuBilgi[playerid][oAdmin]) return YetkinizYok(playerid);
	if(!hkanal) return HataMesaji(playerid, "Destek iletiþim kanalý yönetim tarafýndan kapatýlmýþ.");
	if(OyuncuBilgi[playerid][oDestekSohbet] == false) return HataMesaji(playerid, "Destek kanalýn kapalý, /ayarlar komutuyla açabilirsin.");
	
	if(isnull(params)) return KullanimMesaji(playerid, "/h [Yazý]");
	new isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, isim, sizeof(isim));

	for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && (OyuncuBilgi[i][oAdmin] > 0 || OyuncuBilgi[i][oDestekEkibi] > 0) && OyuncuBilgi[i][oDestekSohbet] == true) {
		if(OyuncuBilgi[playerid][oAdmin]) SendClientMessageEx(i, RENK_BEYAZ, "{698144}%s %s(%d): {FFFFFF}%s", Admin_RutbeIsim(OyuncuBilgi[playerid][oAdmin]), isim, playerid, params);
		else if(OyuncuBilgi[playerid][oDestekEkibi]) SendClientMessageEx(i, RENK_BEYAZ, "{698144}%s %s(%d): {FFFFFF}%s", Destek_RutbeIsim(OyuncuBilgi[playerid][oDestekEkibi]), isim, playerid, params);
	}
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [destek-chat] %s(%d): %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:respawnnear(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new sayi = 0, Float:arac_pos[3];
	for(new a = 0; a != MAKSIMUM_ARAC; a++) if(AracBilgi[a][aracKullanimda])
	{
	    if(IsValidVehicle(AracBilgi[a][aracYarat]) && SurucuBul(AracBilgi[a][aracYarat]) == INVALID_PLAYER_ID)
		{
			GetVehiclePos(AracBilgi[a][aracYarat], arac_pos[0], arac_pos[1], arac_pos[2]);
			if(IsPlayerInRangeOfPoint(playerid, 30.0, arac_pos[0], arac_pos[1], arac_pos[2])) ASpawn(AracBilgi[a][aracYarat]), sayi++;
		}
	}
	if(!sayi) return HataMesaji(playerid, "Yakýnýnda kullanýlmayan hiçbir araç yok.");
	SunucuMesaji(playerid, "Yakýnýndaki %d adet kullanýlmayan aracý yeniden çýkardýn.", sayi);
	return 1;
}

CMD:ysilahver(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);

	new silahid, mermi, sayi;
	if(sscanf(params, "dI(200)", silahid, mermi)) return KullanimMesaji(playerid, "/ysilahver [silah id] [mermi]");
	if(silahid <= 0 || silahid > 46 || (silahid >= 19 && silahid <= 21)) return HataMesaji(playerid, "Geçersiz silah belirlendi.");
	if(silahid == 35 && OyuncuBilgi[playerid][oAdmin] < 7 || silahid == 38 && OyuncuBilgi[playerid][oAdmin] < 7)
		return HataMesaji(playerid, "Bu silahý vermek için seviye 7 yönetici olman gerekiyor.");

	if(mermi < 1) return HataMesaji(playerid, "Mermi en az 1 olmalýdýr.");
	sayi = 0;
	foreach(new i: Player) if(YakinlikKontrol(playerid, i, 20.0) && OyuncuBilgi[i][oGiris] == true)
	{
	    if(OyuncuBilgi[i][oOynamaSaati] < 12) continue;
	    if(SilahSlotKontrol(i, SilahSlotBul[silahid]) && SilahSlotBul[silahid] != 0) continue;
		Silahver(i, silahid, mermi);
	 	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(i, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiye %s model silah verdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[i][oID], SilahIsim(silahid));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_silah.txt", "%s", log_icerik);
		AdminMesaji(i, "%s adlý yetkili sana %s model silahý %d mermiyle verdi.", OyuncuBilgi[playerid][oAdminNick], SilahIsim(silahid), mermi);
		sayi++;
	}
	SunucuMesaji(playerid, "Yakýnýndaki %d adet kiþiye %s model silahý %d mermiyle verdin.", sayi, SilahIsim(silahid), mermi);
	return 1;
}

CMD:ysilahsifirla(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 5) return YetkinizYok(playerid);

    new sayi = 0;
	foreach(new i: Player) if(YakinlikKontrol(playerid, i, 20.0) && OyuncuBilgi[i][oGiris] == true)
	{
		SilahlariSifirla(i);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(i, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin silahlarýný sýfýrladý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[i][oID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_silah.txt", "%s", log_icerik);
		AdminMesaji(i, "%s adlý yetkili silahlarýný sýfýrladý.", OyuncuBilgi[playerid][oAdminNick]);
		sayi++;
	}
	SunucuMesaji(playerid, "Yakýnýndaki %d adet kiþinin silahlarýný sýfýrladýn.", sayi);
	return 1;
}

CMD:ycanver(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 3) return YetkinizYok(playerid);

    new Float:can, sayi;
	if(sscanf(params, "f", can)) return KullanimMesaji(playerid, "/ycanver [can deðeri]");
	if(can < 0 || can > 100) return HataMesaji(playerid, "Girilen can deðeri geçersizdir.");

	sayi = 0;
	foreach(new i: Player) if(YakinlikKontrol(playerid, i, 20.0)) {
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(i, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin canýný %.0f olarak deðiþtirdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[i][oID], can);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_log.txt", "%s", log_icerik);
		CanDuzenle(i, can);
		sayi++;
	}
	SunucuMesaji(playerid, "Kendin dahil %d adet kiþinin can deðerini %.0f olarak deðiþtirdin.", sayi, can);
	return 1;
}

CMD:yzirhver(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);

    new Float:zirh, sayi;
	if(sscanf(params, "f", zirh))
	    return KullanimMesaji(playerid, "/yzirhver [zýrh deðeri]");

	if(zirh < 0 || zirh > 100)
	    return HataMesaji(playerid, "Girilen zýrh deðeri geçersizdir.");

	sayi = 0;
	foreach(new i: Player) if(YakinlikKontrol(playerid, i, 20.0)) {
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(i, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin zýrhýný %.0f olarak deðiþtirdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[i][oID], zirh);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_log.txt", "%s", log_icerik);
		ZirhDuzenle(i, zirh);
		sayi++;
	}
	SunucuMesaji(playerid, "Kendin dahil %d adet kiþinin zýrh deðerini %.0f olarak deðiþtirdin.", sayi, zirh);
	return 1;
}

CMD:ydondur(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 2) return YetkinizYok(playerid);

	new komut[8];
	foreach(new i: Player) if(YakinlikKontrol(playerid, i, 10.0)) {
		TogglePlayerControllable(i, false);
		format(komut, sizeof(komut), "%d", i);
		cmd_freeze(playerid, komut);
	}
	return 1;
}

CMD:ycoz(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 2) return YetkinizYok(playerid);

    new komut[8];
	foreach(new i: Player) if(YakinlikKontrol(playerid, i, 10.0)) {
		TogglePlayerControllable(i, true);
		format(komut, sizeof(komut), "%d", i);
		cmd_unfreeze(playerid, komut);
	}
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	new oyuncu;
	if(sscanf(params, "u", oyuncu)) return KullanimMesaji(playerid, "/unfreeze [ID / Oyuncu]");

	if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(OyuncuBilgi[oyuncu][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralý bir oyuncuyu çözemezsin.");

	TogglePlayerControllable(oyuncu, true);
	OyuncuBilgi[oyuncu][oKontrol] = true;
	OyuncuBilgi[oyuncu][oDonduruldu] = 0;
	SunucuMesaji(playerid, "%s adlý kiþiyi çözdün.", OyuncuIsim(oyuncu));
	SunucuMesaji(oyuncu, "%s seni çözdü.", OyuncuBilgi[playerid][oAdminNick]);
	return 1;
}

CMD:freeze(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	new oyuncu;
	if(sscanf(params, "u", oyuncu))
	    return KullanimMesaji(playerid, "/freeze [ID / Oyuncu]");

	if(!IsPlayerConnected(oyuncu))
	    return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(playerid == oyuncu && OyuncuBilgi[playerid][oAdmin] < 6)
	    return HataMesaji(playerid, "Kendini dondurmak için en az seviye 6 yönetici olmalýsýn.");

	TogglePlayerControllable(oyuncu, false);
	OyuncuBilgi[oyuncu][oKontrol] = false;
	SunucuMesaji(playerid, "%s adlý kiþiyi dondurdun.", OyuncuIsim(oyuncu));
	SunucuMesaji(oyuncu, "%s tarafýndan donduruldun.", OyuncuBilgi[playerid][oAdminNick]);
	return 1;
}

CMD:level(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);

	new bilgi[2048], sayi, rakam;
	if(sscanf(params, "d", rakam)) return KullanimMesaji(playerid, "/level [Level]");
	bilgi[0] = 0;
	sayi = 0;
	format(bilgi, sizeof(bilgi), "Oyuncu\tOynama Saati\tID\n");
 	foreach(new i : Player) if(OyuncuBilgi[i][oSeviye] == rakam && OyuncuBilgi[i][oGiris] == true)
	{
		format(bilgi, sizeof(bilgi), "%s%s\t%d\t%d\n", bilgi, OyuncuIsim(i), OyuncuBilgi[i][oOynamaSaati], i);
		sayi++;
	}
	if(!sayi) return HataMesaji(playerid, "Sunucuda seviye %d oyuncu bulunmuyor.", rakam);
	DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Oyuncular", bilgi, "Tamam", "");
	return 1;
}

CMD:destekyap(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);

	new oyuncu, destekleveli;
	if(sscanf(params, "ud", oyuncu, destekleveli)) return KullanimMesaji(playerid, "/destekyap [ID / Oyuncu] [destek leveli]");
	if(destekleveli < 0 || destekleveli > 4) return HataMesaji(playerid, "Girilen destek seviyesi geçersizdir. (0-3)");
	if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncu == playerid && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Kendi destek seviyeni deðiþtiremezsin.");
	if(OyuncuBilgi[oyuncu][oAdmin]) return HataMesaji(playerid, "Girilen kiþi bir yönetici, destek seviyesi deðiþtirilemez.");
	if(OyuncuBilgi[oyuncu][oDestekEkibi] == destekleveli) return HataMesaji(playerid, "Oyuncu zaten bu seviye herperliðe sahip.");

	if(OyuncuBilgi[oyuncu][oDestekEkibi] < destekleveli) {
	    SunucuMesaji(playerid, "%s adlý kiþinin destek seviyesini %s olarak yükselttin.", OyuncuIsim(oyuncu), Destek_RutbeIsim(destekleveli));
	    SunucuMesaji(oyuncu, "%s adlý yetkili tarafýndan destek seviyen %s olarak yükseltildi.", OyuncuBilgi[playerid][oAdminNick], Destek_RutbeIsim(destekleveli));
	}
	else if(destekleveli == 0) {
		SunucuMesaji(playerid, "%s adlý kiþiyi destek kadrosundan çýkardýn.", OyuncuIsim(oyuncu));
		SunucuMesaji(oyuncu, "%s adlý kiþi tarafýndan destek kadrosundan çýkarýldýn.", OyuncuBilgi[playerid][oAdminNick]);
	}
	else if(OyuncuBilgi[oyuncu][oDestekEkibi] > destekleveli) {
	    SunucuMesaji(playerid, "%s adlý yetkilinin destek seviyesini %s olarak düþürdün.", OyuncuIsim(oyuncu), Destek_RutbeIsim(destekleveli));
	    SunucuMesaji(oyuncu, "%s adlý yetkili tarafýndan destek seviyen %s olarak düþürüldü.", OyuncuBilgi[playerid][oAdminNick], Destek_RutbeIsim(destekleveli));
	}
	OyuncuBilgi[oyuncu][oDestekEkibi] = destekleveli;
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncu, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin destek levelini %s yaptý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncu][oID], Destek_RutbeIsim(destekleveli));
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/yonetim.txt", "%s", log_icerik);
	return 1;
}

CMD:setstaff(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);

	new oyuncu, adminleveli;
	if(sscanf(params, "ud", oyuncu, adminleveli)) return KullanimMesaji(playerid, "/adminyap [oyuncu isim/id] [admin leveli]");
	if(adminleveli < 0 || adminleveli > 7) return HataMesaji(playerid, "Girilen yönetici seviyesi geçersizdir. (0-7)");
	if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncu == playerid && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Kendi yönetici seviyeni deðiþtiremezsin.");
	if(OyuncuBilgi[oyuncu][oAdmin] == adminleveli) return HataMesaji(playerid, "Oyuncu zaten bu seviye yöneticiliðe sahip.");
	if(adminleveli > OyuncuBilgi[playerid][oAdmin] && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Kendinden yüksek seviye yöneticilik veremezsin.");
	if(OyuncuBilgi[playerid][oAdmin] < OyuncuBilgi[oyuncu][oAdmin] && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Kendinden yüksek seviye bir yöneticinin seviyesini deðiþtiremezsin.");
	
	if(OyuncuBilgi[oyuncu][oAdmin] < adminleveli) {
	    SunucuMesaji(playerid, "%s adlý kiþinin yönetici seviyesini %d olarak yükselttin.", OyuncuIsim(oyuncu), adminleveli);
	    SunucuMesaji(oyuncu, "%s adlý yetkili tarafýndan yönetici seviyen %d olarak yükseltildi.", OyuncuBilgi[playerid][oAdminNick], adminleveli);
	}
	else if(adminleveli == 0) {
		SunucuMesaji(playerid, "%s adlý kiþiyi yönetici kadrosundan çýkardýn.", OyuncuIsim(oyuncu));
		SunucuMesaji(oyuncu, "%s adlý kiþi tarafýndan yönetim kadrosundan çýkarýldýn.", OyuncuBilgi[playerid][oAdminNick]);
		if(OyuncuBilgi[oyuncu][oIzlenen] != INVALID_PLAYER_ID) cmd_spec(oyuncu, "bitir");
		if(OyuncuBilgi[oyuncu][oAdminDurum] == true) cmd_aduty(oyuncu, "");
		format(OyuncuBilgi[oyuncu][oAdminNick], 32, "Yok");
	}
	else if(OyuncuBilgi[oyuncu][oAdmin] > adminleveli) {
	    SunucuMesaji(playerid, "%s adlý yetkilinin yönetici seviyesini %d olarak düþürdün.", OyuncuIsim(oyuncu), adminleveli);
	    SunucuMesaji(oyuncu, "%s adlý yetkili tarafýndan yönetici seviyen %d olarak düþürüldü.", OyuncuBilgi[playerid][oAdminNick], adminleveli);
	}
	OyuncuBilgi[oyuncu][oAdmin] = adminleveli;
	if(adminleveli > 0 && OyuncuBilgi[oyuncu][oDestekEkibi] > 0) OyuncuBilgi[oyuncu][oDestekEkibi] = 0;
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncu, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin admin levelini %d yaptý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncu][oID], adminleveli);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/yonetim.txt", "%s", log_icerik);
	return 1;
}

CMD:unluyap(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 3 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	new oyuncu;
	if(sscanf(params, "u", oyuncu)) return KullanimMesaji(playerid, "/unluyap [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(OyuncuBilgi[oyuncu][oUnlu] == 1) {
		OyuncuBilgi[oyuncu][oUnlu] = 0;
	    SunucuMesaji(playerid, "%s adlý kiþinin karakter ününü aldýn.", OyuncuIsim(oyuncu));
	    SunucuMesaji(oyuncu, "%s adlý yetkili tarafýndan karakterinin ünü alýndý.", OyuncuBilgi[playerid][oAdminNick]);
	}
	else if(OyuncuBilgi[oyuncu][oUnlu] == 0) {
		OyuncuBilgi[oyuncu][oUnlu] = 1;
	    SunucuMesaji(playerid, "%s adlý kiþinin karakterini ünlü yaptýn.", OyuncuIsim(oyuncu));
	    SunucuMesaji(oyuncu, "%s adlý yetkili tarafýndan karakteriniz ünlü yapýldý.", OyuncuBilgi[playerid][oAdminNick]);
	}
	return 1;
}

CMD:seteventmod(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	new oyuncu;
	if(sscanf(params, "u", oyuncu)) return KullanimMesaji(playerid, "/seteventmod [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(OyuncuBilgi[oyuncu][oEventMod] == 1) {
		OyuncuBilgi[oyuncu][oEventMod] = 0;
	    SunucuMesaji(playerid, "%s adlý kiþiyi etkinlik moderatörü yetkisini aldýn.", OyuncuIsim(oyuncu));
	    SunucuMesaji(oyuncu, "%s adlý yetkili tarafýndan etkinlik moderatörü yetkin alýndý.", OyuncuBilgi[playerid][oAdminNick]);
	}
	else if(OyuncuBilgi[oyuncu][oEventMod] == 0) {
		OyuncuBilgi[oyuncu][oEventMod] = 1;
	    SunucuMesaji(playerid, "%s adlý kiþiyi etkinlik moderatörü yaptýn.", OyuncuIsim(oyuncu));
	    SunucuMesaji(oyuncu, "%s adlý yetkili tarafýndan etkinlik moderatörü yapýldýnýz.", OyuncuBilgi[playerid][oAdminNick]);
	}
	return 1;
}

CMD:makebirlikmod(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 6 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	new oyuncu;
	if(sscanf(params, "u", oyuncu)) return KullanimMesaji(playerid, "/makebirlikmod [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(OyuncuBilgi[oyuncu][oBirlikMod] == 1) {
		OyuncuBilgi[oyuncu][oBirlikMod] = 0;
	    SunucuMesaji(playerid, "%s adlý kiþinin birlik moderatörü yetkisini aldýn.", OyuncuIsim(oyuncu));
	    SunucuMesaji(oyuncu, "%s adlý yetkili tarafýndan birlik moderatörü yetkin alýndý.", OyuncuBilgi[playerid][oAdminNick]);
	}
	else if(OyuncuBilgi[oyuncu][oBirlikMod] == 0) {
		OyuncuBilgi[oyuncu][oBirlikMod] = 1;
	    SunucuMesaji(playerid, "%s adlý kiþiyi birlik moderatörü yaptýn.", OyuncuIsim(oyuncu));
	    SunucuMesaji(oyuncu, "%s adlý yetkili tarafýndan birlik moderatörü yapýldýnýz.", OyuncuBilgi[playerid][oAdminNick]);
	}
	return 1;
}


CMD:avukatyap(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 3 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	new oyuncu;
	if(sscanf(params, "u", oyuncu)) return KullanimMesaji(playerid, "/avukatyap [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	
	if(OyuncuBilgi[oyuncu][oAvukatLisans] == 1) {
		OyuncuBilgi[oyuncu][oAvukatLisans] = 0;
	    SunucuMesaji(playerid, "%s adlý kiþinin avukatlýk lisansýný iptal ettin.", OyuncuIsim(oyuncu));
	    SunucuMesaji(oyuncu, "%s tarafýndan avukatlýk lisansýnýz iptal edildi.", OyuncuBilgi[playerid][oAdminNick]);
	}
	else if(OyuncuBilgi[oyuncu][oAvukatLisans] == 0) {
		OyuncuBilgi[oyuncu][oAvukatLisans] = 1;
	    SunucuMesaji(playerid, "%s adlý kiþinin karakterine avukatlýk lisansý tanýmladýn.", OyuncuIsim(oyuncu));
	    SunucuMesaji(oyuncu, "%s tarafýndan karakterinize avukatlýk lisansý tanýmlandý.", OyuncuBilgi[playerid][oAdminNick]);
	}
	return 1;
}

CMD:papazyap(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	new oyuncu;
	if(sscanf(params, "u", oyuncu)) return KullanimMesaji(playerid, "/papazyap [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(OyuncuBilgi[oyuncu][oPapaz] == 1) {
		OyuncuBilgi[oyuncu][oPapaz] = 0;
	    SunucuMesaji(playerid, "%s adlý kiþinin papazlýðýný aldýn.", OyuncuIsim(oyuncu));
	    SunucuMesaji(oyuncu, "%s tarafýndan papazlýðýnýz iptal edildi.", OyuncuBilgi[playerid][oAdminNick]);
	}
	else if(OyuncuBilgi[oyuncu][oPapaz] == 0) {
		OyuncuBilgi[oyuncu][oPapaz] = 1;
	    SunucuMesaji(playerid, "%s adlý kiþinin karakterine papazlýk tanýmladýn.", OyuncuIsim(oyuncu));
	    SunucuMesaji(oyuncu, "%s tarafýndan karakterinize papazlýk tanýmlandý.", OyuncuBilgi[playerid][oAdminNick]);
	}
	return 1;
}

CMD:evlendir(playerid, params[])
{
	if(OyuncuBilgi[playerid][oPapaz] == 0) return YetkinizYok(playerid);
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	new oyuncu1, oyuncu2;
	if(sscanf(params, "uu", oyuncu1, oyuncu2)) return KullanimMesaji(playerid, "/evlendir [1.ID] [2.ID]");
	if(!IsPlayerConnected(oyuncu1) || !IsPlayerConnected(oyuncu2)) return HataMesaji(playerid, "Girilen kiþilerden birisi oyunda deðil.");
	if(!YakinlikKontrol(playerid, oyuncu1, 4.0) || !YakinlikKontrol(playerid, oyuncu2, 4.0)) return HataMesaji(playerid, "Kiþilere yakýn deðilsin.");
	if(OyuncuBilgi[oyuncu1][oGiris] == false || OyuncuBilgi[oyuncu2][oGiris] == false) return HataMesaji(playerid, "Oyunculardan birisi giriþ yapmamýþ.");
	if(OyuncuBilgi[oyuncu1][oPartner] > 0 || OyuncuBilgi[oyuncu2][oPartner] > 0) return HataMesaji(playerid, "Girilen oyunculardan birisinin partneri var.");
	if(oyuncu1 == playerid || playerid == oyuncu2) return HataMesaji(playerid, "Kendini birisiyle evlendiremezsin.");
	
	OyuncuBilgi[oyuncu1][oPartner] = OyuncuBilgi[oyuncu2][oID];
	OyuncuBilgi[oyuncu2][oPartner] = OyuncuBilgi[oyuncu1][oID];
	
	foreach (new i : Player) SendClientMessageEx(i, RENK_SOKAKTANSESLER, "(( Evlilik Duyurusu: %s ile %s evlendi. Bir ömür mutluluklar! ))", OyuncuIsim(oyuncu1), OyuncuIsim(oyuncu2));
	return 1;
}

CMD:vipyap(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);

	new oyuncuid, sure, level, viptext[64];
	if(sscanf(params, "udI(30)", oyuncuid, level, sure)) return KullanimMesaji(playerid, "/vipyap [ID/Isim] [seviye] [gün] (-1 sýnýrsýz)");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(sure < -1) return HataMesaji(playerid, "Gün en az -1 olmalýdýr.");
	if(sure == 0) return HataMesaji(playerid, "Girilen gün 0 olamaz.");
	if(level < 0 || level > 3) return HataMesaji(playerid, "Girilen VIP seviyesi geçersiz. (0-3)");
	if(level == OyuncuBilgi[oyuncuid][oVIP]) return HataMesaji(playerid, "Girilen oyuncu zaten bu seviye VIP'ye sahip.");

	OyuncuBilgi[oyuncuid][oVIP] = level;
	if(OyuncuBilgi[oyuncuid][oVIP] > 0 && sure > -1) {
		new gun = sure * 86400;
		OyuncuBilgi[oyuncuid][oVIPSure] = gettime() + gun;
		format(viptext, sizeof(viptext), "%s gün", NumaraFormati(sure, ""));
	}
	if(sure == -1) OyuncuBilgi[oyuncuid][oVIPSure] = sure, format(viptext, sizeof(viptext), "Sýnýrsýz");
	if(level == 0) {
	    if(OyuncuBilgi[oyuncuid][oVIPTag] == true) OyuncuBilgi[oyuncuid][oVIPTag] = false;
		SunucuMesaji(playerid, "%s adlý kiþinin VIP üyeliðini iptal ettin.", OyuncuIsim(oyuncuid));
		SunucuMesaji(oyuncuid, "%s adlý yetkili tarafýndan VIP üyeliðin iptal edildi.", OyuncuBilgi[playerid][oAdminNick]);
	}
	else {
	    SunucuMesaji(playerid, "%s adlý kiþinin VIP üyeliðini %s(%s) olarak güncelledin.", OyuncuIsim(oyuncuid), VIPIsim(oyuncuid), viptext);
	    SunucuMesaji(oyuncuid, "%s adlý yetkili tarafýndan VIP seviyen %s(%s) olarak güncellendi.", OyuncuBilgi[playerid][oAdminNick], VIPIsim(oyuncuid), viptext);
	}
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin VIP levelini %d(%s) yaptý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], level, viptext);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/yonetim.txt", "%s", log_icerik);
	return 1;
}

CMD:vipdolap(playerid, params[])
{
	if(OyuncuBilgi[playerid][oVIP] < 1) return HataMesaji(playerid, "VIP deðilsin, dolabý kullanamazsýn.");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2108.7786, 4509.6445, 65.7870)) return HataMesaji(playerid, "VIP dolabýna yakýn deðilsin.");
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yetkili iþbaþýnda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0 || OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araç içerisinde kullanýlamaz.");
	
	new dolap_icerik[144], zirh_ucret = GUMUS_ZIRH_UCRET;
	switch(OyuncuBilgi[playerid][oVIP]) {
	    case 1: zirh_ucret = GUMUS_ZIRH_UCRET;
	    case 2: zirh_ucret = ALTIN_ZIRH_UCRET;
	    case 3: zirh_ucret = ELMAS_ZIRH_UCRET;
	    default: zirh_ucret = GUMUS_ZIRH_UCRET;
	}
	format(dolap_icerik, sizeof(dolap_icerik), "Can\t\tÜcretsiz\nZýrh\t\t%s\nSilah Dolabý\t\t\nVIP Kýyafetler\t\t\n", NumaraFormati(zirh_ucret));
	DialogGoster(playerid, DIALOG_VIP_DOLAP, DIALOG_STYLE_TABLIST, "VIP Dolabý", dolap_icerik, "Seç", "Kapat");
	return 1;
}

CMD:vipmenu(playerid, params[])
{
	if(OyuncuBilgi[playerid][oVIP] < 1) return HataMesaji(playerid, "VIP Deðilsin.");
	
	new dialog_icerik[256];
	format(dialog_icerik, sizeof(dialog_icerik), "VIP Tag\t\t%s\nVIP Türü:\t\t%s\n", (OyuncuBilgi[playerid][oVIPTag] == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"), VIPIsim(playerid));
	if(OyuncuBilgi[playerid][oVIPSure] == -1) format(dialog_icerik, sizeof(dialog_icerik), "%sKalan Süre\t\tSýnýrsýz\n", dialog_icerik);
	else format(dialog_icerik, sizeof(dialog_icerik), "%sKalan Süre\t\t%s\n", dialog_icerik, ConvertTime(OyuncuBilgi[playerid][oVIPSure] - gettime()));
	
	DialogGoster(playerid, DIALOG_VIPMENU, DIALOG_STYLE_TABLIST, "VIP Menu", dialog_icerik, "Seç", "Kapat");
	return 1;
}

CMD:anick(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);

	new oyuncuid, isim[20];
	if(sscanf(params, "us[20]", oyuncuid, isim)) return KullanimMesaji(playerid, "/anick [oyuncu isim/id] [nick]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(OyuncuBilgi[oyuncuid][oAdmin] < 0 && OyuncuBilgi[oyuncuid][oDestekEkibi] < 0) return HataMesaji(playerid, "Girilen kiþi yetkili veya destek deðil.");
	if(OyuncuBilgi[oyuncuid][oAdminDurum]) return HataMesaji(playerid, "Bu yönetici iþbaþýnda ismini deðiþtirebilmek için iþbaþýndan çýkmalýdýr.");
	if(strlen(isim) < 3 || strlen(isim) > 20)
	{
		HataMesaji(playerid, "Ýsim 3 karakterden az, 20 karakterden fazla olamaz.");
		return 1;
	}
	if(!strcmp(isim, "Yok", true))
		return HataMesaji(playerid, "Girilen yönetici ismi geçersizdir.");

	format(OyuncuBilgi[oyuncuid][oAdminNick], 20, "%s", isim);
	OyuncuKaydet(oyuncuid);
	SunucuMesaji(playerid, "%s adlý kiþinin yetkili ismini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), isim);
	SunucuMesaji(oyuncuid, "%s adlý yetkili, yetkili ismini %s olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], isim);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin yetkili ismini %s yaptý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], isim);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/yonetim.txt", "%s", log_icerik);
	return 1;
}

CMD:etkpanel(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	
	new dialog_icerik[512];
	format(dialog_icerik, sizeof(dialog_icerik), "{FF8000}Can:\t{33aa33}[%.0f]\n{FF8000}Zýrh:\t{FFFFFF}[%.0f]\n{FF8000}Silah #1:\t{FFFFFF}[%s]\n{FF8000}Silah #2:\t{FFFFFF}[%s]\n{FF8000}Konum\t{33aa33}[deðiþtir]\n{FF8000}Giriþ:\t{FFFFFF}[%s{FFFFFF}]\n{FF8000}Durum:\t{FFFFFF}[%s{FFFFFF}]\n{FF8000}Sýfýrla\t\n",
	    EtkinlikBilgi[etkCan],
	    EtkinlikBilgi[etkZirh],
	    SilahIsim(EtkinlikBilgi[etkSilah][0]),
	    SilahIsim(EtkinlikBilgi[etkSilah][1]),
		(EtkinlikBilgi[etkGiris] == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"),
		(EtkinlikBilgi[etkDurum] == false) ? ("{B70000}Baþlamadý") : ("{33AA33}Baþladý")
	);
	DialogGoster(playerid, DIALOG_ETKINLIKPANEL, DIALOG_STYLE_TABLIST, "vRP: Etkinlik Sistemi", dialog_icerik, "Seç", "Kapat");
	return 1;
}

CMD:tickrate(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
    SunucuMesaji(playerid, "%i", GetServerTickRate());
    return 1;
}

CMD:aduty(playerid, params[])
{
	if(!OyuncuBilgi[playerid][oAdmin]) return YetkinizYok(playerid);
	if(!strcmp(OyuncuBilgi[playerid][oAdminNick], "Yok", true) || !strcmp(OyuncuBilgi[playerid][oAdminNick], "NULL", true)) return HataMesaji(playerid, "Ýþbaþý yapmak için bir admin ismine ihtiyacýn var.");
	if(OyuncuBilgi[playerid][oCevaplandi] == true) return HataMesaji(playerid, "Aramada iken iþbaþý yapamazsýn.");
	//if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste iþbaþý yapamazsýn.");

	switch(OyuncuBilgi[playerid][oAdminDurum]) {
	    case true: {
	        if(OyuncuBilgi[playerid][oIzlenen] != INVALID_PLAYER_ID) cmd_spec(playerid, "bitir");
	        SunucuMesaji(playerid, "Yönetici olarak iþbaþýndan çýktýn.");
     		/*SetPlayerName(playerid, OyuncuBilgi[playerid][oIsim]);*/
	        OyuncuBilgi[playerid][oAdminDurum] = false;
			SetPlayerColor(playerid, EskiVeriler[playerid][eskiRenk]);
	    }
	    case false: {
	        EskiVeriler[playerid][eskiRenk] = GetPlayerColor(playerid);
	        adminrenk(playerid);
	        SunucuMesaji(playerid, "Yönetici olarak iþbaþýna geçtin.");
	        /*SetPlayerName(playerid, OyuncuBilgi[playerid][oAdminNick]);*/
	        OyuncuBilgi[playerid][oAdminDurum] = true;
	        OyuncuBilgi[playerid][oRaporGoruntule] = true;
	    }
	}
	IsimLabelGuncelle(playerid);
	return 1;
}

CMD:herkesecan(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);

	new sayi = 0;
	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true) {
	    CanDuzenle(i, 100.0);
	    sayi++;
	}
	YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s sunucudaki tüm oyuncularýn(%d) canýný doldurdu.", OyuncuBilgi[playerid][oAdminNick], sayi);
	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) sunucudaki herkese can verdi. (%d kiþi)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], sayi);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/yonetim.txt", "%s", log_icerik);
	return 1;
}

CMD:herkesezirh(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 6 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	static sayi;
	sayi = 0;
	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true) {
	    ZirhDuzenle(i, 100.0);
	    sayi++;
	}
	YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s sunucudaki tüm oyuncularýn(%d) zýrhýný doldurdu.", OyuncuBilgi[playerid][oAdminNick], sayi);
	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) sunucudaki herkese zýrh verdi. (%d kiþi)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], sayi);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/yonetim.txt", "%s", log_icerik);
	return 1;
}

CMD:sethp(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 3 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);

	new oyuncu, Float:can;
	if(sscanf(params, "uf", oyuncu, can))
	    return KullanimMesaji(playerid, "/sethp [oyuncu isim/id] [can]");

	if(can < 0 || can > 100) return HataMesaji(playerid, "Girilen can deðeri geçersizdir.");
	if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(OyuncuBilgi[playerid][oAdmin] < OyuncuBilgi[oyuncu][oAdmin]) return HataMesaji(playerid, "Girilen kiþi sizden yüksek seviye yöneticiliðe sahip.");

	CanDuzenle(oyuncu, can);
	SunucuMesaji(playerid, "%s adlý oyuncunun can deðerini %.0f olarak deðiþtirdin.", OyuncuIsim(oyuncu), can);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncu, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin canýný %.0f olarak deðiþtirdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncu][oID], can);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_log.txt", "%s", log_icerik);
	return 1;
}

CMD:setarmor(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 3 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	
	new oyuncuid, Float:zirh;
	if(sscanf(params, "uf", oyuncuid, zirh))
	    return KullanimMesaji(playerid, "/zirhver [oyuncu isim/id] [zýrh]");

	if(zirh < 0 || zirh > 100) return HataMesaji(playerid, "Girilen zýrh deðeri geçersizdir.");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(OyuncuBilgi[playerid][oAdmin] < OyuncuBilgi[oyuncuid][oAdmin]) return HataMesaji(playerid, "Girilen kiþi sizden yüksek seviye yöneticiliðe sahip.");

	ZirhDuzenle(oyuncuid, zirh);
	SunucuMesaji(playerid, "%s adlý oyuncunun zýrh deðerini %.0f olarak deðiþtirdin.", OyuncuIsim(oyuncuid), zirh);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin zýrhýný %.0f olarak deðiþtirdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], zirh);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_log.txt", "%s", log_icerik);
	return 1;
}

CMD:setskin(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 3) return YetkinizYok(playerid);

	new oyuncuid, kiyafet;
	if(sscanf(params, "ud", oyuncuid, kiyafet)) return KullanimMesaji(playerid, "/setskin [oyuncu isim/id] [Kýyafet ID]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(kiyafet < 1 || kiyafet > 311 && kiyafet < 20001 || kiyafet > 21000 && OyuncuBilgi[playerid][oAdmin] < 7 || kiyafet > 30000 || kiyafet == 74) return HataMesaji(playerid, "Girilen kýyafet geçersiz.");
	if(OyuncuBilgi[playerid][oAdmin] < OyuncuBilgi[oyuncuid][oAdmin]) return HataMesaji(playerid, "Girilen kiþi sizden yüksek seviye yöneticiliðe sahip.");

	OyuncuBilgi[oyuncuid][oKiyafet] = kiyafet;
	if(OyuncuBilgi[oyuncuid][oGeciciKiyafet] == 0) KiyafetDegistir(oyuncuid, kiyafet);
	OyuncuKaydet(oyuncuid);
	SunucuMesaji(playerid, "%s adlý kiþinin kýyafetini %d olarak deðiþtirdin.", OyuncuIsim(oyuncuid), kiyafet);
	SunucuMesaji(oyuncuid, "%s adlý yetkili tarafýndan kýyafetin %d olarak deðiþtirildi.", OyuncuBilgi[playerid][oAdminNick], kiyafet);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin kýyafetini %d olarak deðiþtirdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], kiyafet);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_log.txt", "%s", log_icerik);
	return 1;
}

/*CMD:hesapsifirla(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/hesapsifirla [ID / Oyuncu]");

 	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(OyuncuBilgi[playerid][oAdmin] < OyuncuBilgi[oyuncuid][oAdmin]) return HataMesaji(playerid, "Girilen kiþi sizden yüksek seviye yöneticiliðe sahip.");

	switch(GetPlayerState(oyuncuid)) {
		case PLAYER_STATE_DRIVER: AracSpawnla(GetPlayerVehicleID(oyuncuid));
		default: OyuncuSpawnla(oyuncuid);
	}
	SetPlayerInterior(oyuncuid, 0);
    SetPlayerVirtualWorld(oyuncuid, 0);
    new seviye = OyuncuBilgi[oyuncuid][oAdmin];
	OyuncuSifirla(oyuncuid);
	OyuncuCinsiyetSec(oyuncuid);
	OyuncuBilgi[oyuncuid][oAdmin] = seviye;
	new query[256], vno6 = randomEx(10000000, 99999999);
	format(query, sizeof(query), "SELECT * FROM oyuncular WHERE VatandaslikNo = '%d'", vno6);
	mysql_tquery(mysqlB, query, "Vatandaslik_Numarasi", "dd", playerid, vno6);
	new hesapno = randomEx(100000, 999999);
	format(query, sizeof(query), "SELECT * FROM oyuncular WHERE HesapNumarasi = '%d'", hesapno);
	mysql_tquery(mysqlB, query, "Banka_Kontrol", "dd", playerid, hesapno);
    AdminMesaji(playerid, "%s adlý kiþinin hesabýný sýfýrladýn.", OyuncuIsim(oyuncuid));
    AdminMesaji(oyuncuid, "%s adlý yetkili hesabýný sýfýrladý.", OyuncuBilgi[playerid][oAdminNick]);
    YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s, %s adlý oyuncunun hesabýný sýfýrladý.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	return 1;
}*/

CMD:me(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
    if(PetKontrol[playerid] != -1) return HataMesaji(playerid, "Pet kontrol modunda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(isnull(params)) return KullanimMesaji(playerid, "/me [hareket]");

	new action[256], ilk, son;
    strdel(action, 0, 256);
	strcat(action, params);
    if(strfind(action, "\"", true, 1) != -1)
	{
			ilk = strfind(action, "\"", true, 1);
			son = strfind(action, "\"", true, ilk+1);
			strins(action, "{FFFFFF}", ilk);
			strins(action, "{C2A2DA}", son+9);
	}
	SendNearbyMessage(playerid, EMOTE_MESAFE, RENK_PEMBE, "* %s %s", OyuncuIsim(playerid), action);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [cmd_me] %s(%d) %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:do(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
    if(PetKontrol[playerid] != -1) return HataMesaji(playerid, "Pet kontrol modunda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(isnull(params)) return KullanimMesaji(playerid, "/do [durum]");

	SendNearbyMessage(playerid, EMOTE_MESAFE, RENK_PEMBE, "* %s (( %s ))", params, OyuncuIsim(playerid));
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [cmd_do] %s(%d) %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:dene(playerid, params[])
{
    if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
	new gelensayi = randomEx(1, 3), str[24];
	if(!strcmp(params, "admin", true) && OyuncuBilgi[playerid][oAdmin] >= 7) gelensayi = 1;
	switch(gelensayi) {
		case 1: format(str, sizeof(str), "{33aa33}Baþarýlý");
		case 2: format(str, sizeof(str), "{8B0000}Baþarýsýz");
	}
	SendNearbyMessage(playerid, EMOTE_MESAFE, RENK_DO, "* %s. {81caac}(( %s ))", str, OyuncuIsim(playerid));
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [dene] %s(%d) %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], (gelensayi == 1) ? ("Baþarýlý") : ("Baþarýsýz"));
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:kumar(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oZar] == 0) return HataMesaji(playerid, "Zarýn yok.");
    if(Oyuncu_Isyerinde(playerid) == -1 || Oyuncu_Isyerinde(playerid) != -1 && IsyeriBilgi[Oyuncu_Isyerinde(playerid)][isyeriTur] != 15) return HataMesaji(playerid, "Kumarhanede deðilsin.");


	// DialogGoster(playerid, DIALOG_KUMAR, DIALOG_STYLE_TABLIST_HEADERS, "vRP: Kumar", "Kime?\tOyun Türü\nKurpiyer\tTekli\nOyuncu\tÇift\n", "Seç", "Kapat");
	DialogGoster(playerid, DIALOG_KUMAR, DIALOG_STYLE_TABLIST_HEADERS, "vRP: Kumar", "Kime?\tOyun Türü\nKurpiyer\tTekli\n", "Seç", "Kapat");
	return 1;
}

CMD:bowlingdavet(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2770.8549, 1410.2374, 802.0114)) return HataMesaji(playerid, "Bowling oynama alanýnda deðilsin.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oBowling] == true) return HataMesaji(playerid, "Zaten bir bowling oyununun içindesin.");
	new oyuncu;
	if(sscanf(params, "u", oyuncu)) return KullanimMesaji(playerid, "/bowlingdavet [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Belirttiðin oyuncu oyunda deðil.");
	if(!YakinlikKontrol(playerid, oyuncu, 5.0)) return HataMesaji(playerid, "Belirlediðin oyuncuya yeterince yakýn deðilsin.");
	if(OyuncuBilgi[oyuncu][oBowling] == true) return HataMesaji(playerid, "Belirtilen oyuncu zaten þu an bowling oynuyor.");
	if(oyuncu == playerid) return HataMesaji(playerid, "Kendinle bowling oynayamazsýn.");

	OyuncuBilgi[oyuncu][oBowlingIstek] = playerid;
	SunucuMesaji(oyuncu, "%s seninle bowling oynamak istiyor. (/kabul bowling)", OyuncuIsim(playerid));
	SunucuMesaji(playerid, "%s adlý kiþiye bowling oynama talebin iletildi.", OyuncuIsim(oyuncu));
	return 1;
}

CMD:bowlingoyna(playerid, params[])
{
    if(OyuncuBilgi[playerid][oBowling] == false) return HataMesaji(playerid, "Þu an bowling oynamýyorsun.");
	if(OyuncuBilgi[playerid][oBowlingSira] != playerid) return SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[!]: {FFFFFF}Sýra %s adlý kiþide, sýraný bekle!", RENK_KIRMIZI >>> 8, OyuncuIsim(OyuncuBilgi[playerid][oBowlingPartner]));
 	new gelensayi = randomEx(0, 7);
	SendNearbyMessage(playerid, EMOTE_MESAFE, RENK_DO, "** %d kukayý yýktý. (( %s ))", gelensayi, OyuncuIsim(playerid));
	OyuncuBilgi[playerid][oBowlingSira] = OyuncuBilgi[playerid][oBowlingPartner];
	OyuncuBilgi[OyuncuBilgi[playerid][oBowlingPartner]][oBowlingSira] = OyuncuBilgi[playerid][oBowlingPartner];
	OyuncuBilgi[playerid][oBowlingSayi] = OyuncuBilgi[playerid][oBowlingSayi] + gelensayi;
	SetPlayerFacingAngle(playerid, 269.3077);
	cmd_throw(playerid, "2");
	if(OyuncuBilgi[playerid][oBowlingSayi] <= 24) {
	SunucuMesaji(OyuncuBilgi[playerid][oBowlingPartner], "%s adlý kiþinin toplam puaný (%d/25).", OyuncuIsim(playerid), OyuncuBilgi[playerid][oBowlingSayi]);
	SunucuMesaji(playerid, "Toplam puanýn (%d/25).", OyuncuBilgi[playerid][oBowlingSayi]);
	}
	else {
	SendNearbyMessage(playerid, EMOTE_MESAFE, RENK_DO, "** Bowling oyununu kazanýr. (( %s ))", OyuncuIsim(playerid));
	SunucuMesaji(playerid, "Bowling oyunu sona erdi.");
	SunucuMesaji(OyuncuBilgi[playerid][oBowlingPartner], "Bowling oyunu sona erdi.");
	OyuncuBilgi[OyuncuBilgi[playerid][oBowlingPartner]][oBowlingSayi] = 0;
	OyuncuBilgi[OyuncuBilgi[playerid][oBowlingPartner]][oBowlingPartner] = -1;
	OyuncuBilgi[OyuncuBilgi[playerid][oBowlingPartner]][oBowling] = false;
	OyuncuBilgi[playerid][oBowlingSayi] = 0;
	OyuncuBilgi[playerid][oBowlingPartner] = -1;
	OyuncuBilgi[playerid][oBowling] = false;
	}
	return 1;
}

CMD:zarat(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oZar] == 0) return HataMesaji(playerid, "Zarýn yok.");
	
	new gelensayi = randomEx(1, 7);
	SendNearbyMessage(playerid, EMOTE_MESAFE, RENK_PEMBE, "** Bir zar attý ve %d geldi. (( %s ))", gelensayi, OyuncuIsim(playerid));
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [zar] %s(%d) zar attý: %d", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], gelensayi);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:ame(playerid, params[])
{
    if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(isnull(params)) return KullanimMesaji(playerid, "/ame [hareket]");

	new string[128];
	format(string, sizeof(string), "* %s %s", OyuncuIsim(playerid), params);
 	SetPlayerChatBubble(playerid, string, RENK_PEMBE, 30.0, 5 * 1000);
 	SendClientMessageEx(playerid, RENK_PEMBE, "* %s %s", OyuncuIsim(playerid), params);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [cmd_ame] %s(%d) %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:ado(playerid, params[])
{
    if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(isnull(params)) return KullanimMesaji(playerid, "/ado [durum]");

    new string[128];
	format(string, sizeof(string), "* %s (( %s ))", params, OyuncuIsim(playerid));
 	SetPlayerChatBubble(playerid, string, RENK_DO, 30.0, 5 * 1000);
 	SendClientMessageEx(playerid, RENK_DO, "* %s (( %s ))", params, OyuncuIsim(playerid));
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [cmd_ado] %s(%d) %s", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:gorunus(playerid, params[])
{
    new oyuncu;
	if(sscanf(params, "u", oyuncu)) return KullanimMesaji(playerid, "/gorunus [ID / Oyuncu]");
	if(oyuncu == playerid) return cmd_gorunum(playerid, "");
    new string[256], string2[128], emote[128], ustmesaj[128], gorunum[128], boyalt = OyuncuBilgi[oyuncu][oBoy] - 4, boyust = OyuncuBilgi[oyuncu][oBoy] + 2, kgalt = OyuncuBilgi[oyuncu][oKilogram] - 2, kgust = OyuncuBilgi[oyuncu][oKilogram] + 3;
	format(string, sizeof(string), "{A4A4A4}Boy: {FFFFFF}%dcm - %dcm {A4A4A4}Kilo: {FFFFFF}%dkg - %dkg {A4A4A4}Göz Rengi: {FFFFFF}%s", boyalt, boyust, kgalt, kgust, GozRengi(OyuncuBilgi[oyuncu][oGozRengi]));
	format(string2, sizeof(string2), "{A4A4A4}Saç Rengi: {FFFFFF}%s {A4A4A4}Ten Rengi: {FFFFFF}%s", SacRengi(OyuncuBilgi[oyuncu][oSacRengi]), (OyuncuBilgi[oyuncu][oTenRengi] == 1) ? ("Beyaz") : ("Siyah"));
	format(ustmesaj, sizeof(ustmesaj), "               [%s Dýþ Görünüþ]", OyuncuIsim(oyuncu));
	format(gorunum, sizeof(gorunum), "{A4A4A4}Detay: {FFFFFF}%s", OyuncuBilgi[oyuncu][oKarakterDetay]);
	format(emote, sizeof(emote), "%s göz ucuyla %s adlý kiþiyi süzer.", OyuncuIsim(playerid), OyuncuIsim(oyuncu));
	SetPlayerChatBubble(playerid, emote, RENK_PEMBE, 30.0, 5 * 1000);
	SendClientMessageEx(playerid, RENK_BEYAZ, "%s", ustmesaj);
 	SendClientMessageEx(playerid, RENK_BEYAZ, "%s", string);
 	SendClientMessageEx(playerid, RENK_BEYAZ, "%s", string2);
 	SendClientMessageEx(playerid, RENK_BEYAZ, "%s", gorunum);
	return 1;
}

CMD:gorunum(playerid, params[])
{
    new string[256], string2[128], ustmesaj[128], gorunum[128], boyalt = OyuncuBilgi[playerid][oBoy] - 7, boyust = OyuncuBilgi[playerid][oBoy] + 5, kgalt = OyuncuBilgi[playerid][oKilogram] - 4, kgust = OyuncuBilgi[playerid][oKilogram] + 6;
	format(string, sizeof(string), "{A4A4A4}Boy: {FFFFFF}%dcm - %dcm {A4A4A4}Kilo: {FFFFFF}%dkg - %dkg {A4A4A4}Göz Rengi: {FFFFFF}%s", boyalt, boyust, kgalt, kgust, GozRengi(OyuncuBilgi[playerid][oGozRengi]));
	format(string2, sizeof(string2), "{A4A4A4}Saç Rengi: {FFFFFF}%s {A4A4A4}Ten Rengi: {FFFFFF}%s", SacRengi(OyuncuBilgi[playerid][oSacRengi]), (OyuncuBilgi[playerid][oTenRengi] == 1) ? ("Beyaz") : ("Siyah"));
	format(ustmesaj, sizeof(ustmesaj), "               [%s Dýþ Görünüþ]", OyuncuIsim(playerid));
	format(gorunum, sizeof(gorunum), "{A4A4A4}Detay: {FFFFFF}%s", OyuncuBilgi[playerid][oKarakterDetay]);
	SendClientMessageEx(playerid, RENK_BEYAZ, "%s", ustmesaj);
 	SendClientMessageEx(playerid, RENK_BEYAZ, "%s", string);
 	SendClientMessageEx(playerid, RENK_BEYAZ, "%s", string2);
 	SendClientMessageEx(playerid, RENK_BEYAZ, "%s", gorunum);
	return 1;
}


CMD:aliste(playerid, params[])
{
    if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdmin] < 1) return AracListesi(playerid, playerid);

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return AracListesi(playerid, playerid);

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, bilgilerini görmek için giriþ yapmasýný bekleyin.");

    AracListesi(playerid, oyuncuid);
	return 1;
}

CMD:objelerim(playerid, params[])
{
    if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaris] != -1) return HataMesaji(playerid, "Yarýþtayken bunu yapamazsýn.");
	if(OyuncuBilgi[playerid][oKamyoncu] != -1) return HataMesaji(playerid, "Yük taþýrken bunu yapamazsýn.");
    if(OyuncuBilgi[playerid][oTemizlikCP] > 0) return HataMesaji(playerid, "Temizlik yaparken bunu yapamazsýn.");
    // if(OyuncuBilgi[playerid][oMateryalTasiyor] == true) return HataMesaji(playerid, "Paket taþýrken bunu yapamazsýn.");
	if(OyuncuBilgi[playerid][oMarker] > -1) return HataMesaji(playerid, "Konum araþtýrýrken bunu yapamazsýn.");
	if(OyuncuBilgi[playerid][oKonum] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oAdres] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][objeLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oIsaretliMeslek] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");

	new sayi = 0, mesaj[2048];
	format(mesaj, sizeof(mesaj), "ID\tModel\n");
	for(new i = 0; i < MAKSIMUM_OBJE; i++) if(ObjeBilgi[i][objeSahip] == OyuncuBilgi[playerid][oID] && ObjeBilgi[i][objeKullanimda] == true) {
	    format(mesaj, sizeof(mesaj), "%s%d\t%d\n", mesaj, i, ObjeBilgi[i][objeModel]);
	    sayi++;
	}
	if(!sayi) return HataMesaji(playerid, "Üzerine kayýtlý obje bulunmadýðý için bu listeyi kullanamazsýn.");
	DialogGoster(playerid, DIALOG_OBJELERIM, DIALOG_STYLE_TABLIST_HEADERS, "Obje Listesi", mesaj, "Seç", "Kapat");
	return 1;
}


CMD:mulklerim(playerid, params[])
{
    if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan komut kullanamazsýn.");
    if(OyuncuBilgi[playerid][oAdmin] < 1) return MulkListesi(playerid, playerid);
    new oyuncuid;

	if(sscanf(params, "u", oyuncuid)) return DialogGoster(playerid, DIALOG_MULKLERIM, DIALOG_STYLE_TABLIST_HEADERS, "Sahip Olduðun Mülkler", "Mülk Listesi\nAraçlarým\nMülklerim\nPetlerim\nGatelerim\nObjelerim\n", "Seç", "Kapat");
    MulkListesi(playerid, oyuncuid);
	return 1;
}

/*CMD:mulkler(playerid, params[])
{
    if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan komut kullanamazsýn.");
    if(OyuncuBilgi[playerid][oAdmin] < 1) return MulkListesi(playerid, playerid);

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return MulkListesi(playerid, playerid);

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, bilgilerini görmek için giriþ yapmasýný bekleyin.");
    MulkListesi(playerid, oyuncuid);
	return 1;
}*/

CMD:bakiyever(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 8 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);

	new oyuncuid, miktar;
	if(sscanf(params, "ud", oyuncuid, miktar))
	    return KullanimMesaji(playerid, "/bakiyever [ID / Oyuncu] [miktar]");

	if(!IsPlayerConnected(oyuncuid))
	    return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(!OyuncuBilgi[oyuncuid][oGiris])
	    return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");

	if(miktar < 1 || miktar > 1000)
	    return HataMesaji(playerid, "Miktar en az 1, en fazla 1,000 olabilir.");

	BakiyeEkle(oyuncuid, miktar);
	OyuncuKaydet(oyuncuid);
	SunucuMesaji(oyuncuid, "%s adlý yetkili sana %s miktarýnda market kredisi verdi.", OyuncuIsim(playerid), NumaraFormati(miktar, ""));
	SunucuMesaji(playerid, "%s adlý oyuncuya %s miktarýnda market kredisi verdin.", OyuncuIsim(oyuncuid), NumaraFormati(miktar, ""));
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiye %dTL bakiye verdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], miktar);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/yonetim.txt", "%s", log_icerik);
	return 1;
}

CMD:bakiyekes(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 8 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);

	new oyuncuid, miktar;
	if(sscanf(params, "ud", oyuncuid, miktar)) return KullanimMesaji(playerid, "/bakiyekes [ID / Oyuncu] [miktar]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(miktar < 1 || miktar > 1000) return HataMesaji(playerid, "Miktar en az 1, en fazla 1,000 olabilir.");
	if(BakiyeKontrol(oyuncuid) < miktar) return HataMesaji(playerid, "Girilen kiþinin bu kadar bakiyesi bulunmuyor.");

	BakiyeKes(oyuncuid, miktar);
	OyuncuKaydet(oyuncuid);
	SunucuMesaji(oyuncuid, "%s adlý yetkili senden %s miktarýnda market kredisi kesti.", OyuncuIsim(playerid), NumaraFormati(miktar, ""));
	SunucuMesaji(playerid, "%s adlý oyuncudan %s miktarýnda market kredisi kestin.", OyuncuIsim(oyuncuid), NumaraFormati(miktar, ""));
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiden %dTL bakiye kesti.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], miktar);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/yonetim.txt", "%s", log_icerik);
	return 1;
}

CMD:aparaduzenle(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	static oyuncuid, miktar;
	if(sscanf(params, "ud", oyuncuid, miktar))
	    return KullanimMesaji(playerid, "/aparaduzenle [ID / Oyuncu] [miktar]");

	if(!IsPlayerConnected(oyuncuid))
	    return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(oyuncuid == playerid && OyuncuBilgi[playerid][oAdmin] < 7)
		return HataMesaji(playerid, "Kendine para veremezsin.");

	if(!OyuncuBilgi[oyuncuid][oGiris])
	    return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");

	if(miktar < 1)
	    return HataMesaji(playerid, "Girilen miktar en az 1 olabilir.");

	ParaDuzenle(oyuncuid, miktar);
	SunucuMesaji(oyuncuid, "%s adlý yetkili paraný %s olarak düzenledi.", OyuncuBilgi[playerid][oAdminNick], NumaraFormati(miktar));
	YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili %s adlý kiþinin parasýný %s olarak düzenledi.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid), NumaraFormati(miktar));
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin parasýný %s olarak düzenledi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], NumaraFormati(miktar));
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/yonetim.txt", "%s", log_icerik);
	return 1;
}

CMD:herkesevp(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 8 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);

	new miktar;
	if(sscanf(params, "d", miktar)) return KullanimMesaji(playerid, "/herkesecap [miktar]");
	if(miktar < 1 || miktar > 100) return HataMesaji(playerid, "Girilen miktar en az 1, en fazla 100 olabilir.");

	foreach(new i : Player) if(IsPlayerConnected(i) && OyuncuBilgi[i][oGiris] == true) {
		OyuncuBilgi[i][oVPoint] += miktar;
	}
	SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "[V-ADMIN] %s adlý yetkili herkese %s VP hediye verdi.", OyuncuBilgi[playerid][oAdminNick], NumaraFormati(miktar, ""));
	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) sunucudaki herkese %s VP verdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], NumaraFormati(miktar, ""));
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/yonetim.txt", "%s", log_icerik);
	return 1;
}

CMD:herkesepara(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 8 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);

	new miktar;
	if(sscanf(params, "d", miktar)) return KullanimMesaji(playerid, "/herkesepara [miktar]");
	if(miktar < 1 || miktar > 10000) return HataMesaji(playerid, "Girilen miktar en az 1, en fazla 10.000 olabilir.");

	foreach(new i : Player) if(IsPlayerConnected(i) && OyuncuBilgi[i][oGiris] == true) {
		ParaEkle(i, miktar);
	}
	SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "[V-ADMIN] %s adlý yetkili herkese %s miktarýnda hediye verdi.", OyuncuBilgi[playerid][oAdminNick], NumaraFormati(miktar));
	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) sunucudaki herkese %s verdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], NumaraFormati(miktar));
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/yonetim.txt", "%s", log_icerik);
	return 1;
}

CMD:aparaver(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);

	new oyuncuid, miktar;
	if(sscanf(params, "ud", oyuncuid, miktar)) return KullanimMesaji(playerid, "/aparaver [ID / Oyuncu] [miktar]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuid == playerid && OyuncuBilgi[playerid][oAdmin] < 7) return HataMesaji(playerid, "Kendine para veremezsin.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(OyuncuBilgi[oyuncuid][oAdminDurum] == true) return HataMesaji(playerid, "Ýþbaþýndaki adminlere para veremezsin.");
	if(miktar < 1 || miktar > 1000000) return HataMesaji(playerid, "Girilen miktar en az 1, en fazla 1,000,000 olabilir.");

	ParaEkle(oyuncuid, miktar);
	SunucuMesaji(oyuncuid, "%s adlý yetkili sana %s miktarýnda para verdi.", OyuncuBilgi[playerid][oAdminNick], NumaraFormati(miktar));
	YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili %s adlý kiþiye %s miktarýnda para verdi.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid), NumaraFormati(miktar));
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiye %s verdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], NumaraFormati(miktar));
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/yonetim.txt", "%s", log_icerik);
	return 1;
}

CMD:parakes(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);

	new oyuncuid, miktar;
	if(sscanf(params, "ud", oyuncuid, miktar)) return KullanimMesaji(playerid, "/parakes [ID / Oyuncu] [miktar]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuid == playerid && OyuncuBilgi[playerid][oAdmin] < 7) return HataMesaji(playerid, "Kendinden para kesemezsin.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(miktar < 1 || miktar > 1000000) return HataMesaji(playerid, "Girilen miktar en az 1, en fazla 1,000,000 olabilir.");

	ParaEkle(oyuncuid, -miktar);
	SunucuMesaji(oyuncuid, "%s adlý yetkili senden %s miktarýnda para kesti.", OyuncuBilgi[playerid][oAdminNick], NumaraFormati(miktar));
	YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili %s adlý kiþiden %s miktarýnda para kesti.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid), NumaraFormati(miktar));
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiden %s miktarýnda para kesti.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], NumaraFormati(miktar));
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/yonetim.txt", "%s", log_icerik);
	return 1;
}

CMD:uyariver(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	new oyuncuid, sebep[64];
	if(sscanf(params, "us[64]", oyuncuid, sebep)) return KullanimMesaji(playerid, "/uyariver [ID / Oyuncu] [sebep]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Kendine uyarý veremezsin.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(OyuncuBilgi[oyuncuid][oAdmin] && OyuncuBilgi[playerid][oAdmin] < 7) {
		HataMesaji(playerid, "Girilen kiþi admin, uyarý veremezsin.");
		UyariMesaji(oyuncuid, "%s adlý yetkili sana uyarý vermeye çalýþtý.", OyuncuIsim(playerid));
		return 1;
	}
	if(OyuncuBilgi[oyuncuid][oUyari] > 4) return HataMesaji(playerid, "Oyuncuya daha fazla uyarý ekleyemezsin.");
	
	OyuncuBilgi[oyuncuid][oUyari]++;
	OyuncuKaydet(oyuncuid);
	SunucuMesaji(oyuncuid, "%s adlý yetkili karakterinize %s sebebiyle uyarý ekledi.", OyuncuBilgi[playerid][oAdminNick], sebep);
	YoneticiMesaji(RENK_SERVER, "admCMD: %s, %s adlý kiþiye %s sebebiyle uyarý ekledi.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid), sebep);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiye %s sebebiyle uyarý verdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], sebep);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_ban.txt", "%s", log_icerik);
	if(OyuncuBilgi[oyuncuid][oUyari] >= 5) {
	    new sorgu[144];
		format(sorgu, sizeof(sorgu), "UPDATE `oyuncular` SET `Yasaklama` = '%s' WHERE `ID` = '%d'", "5 Uyarý", OyuncuBilgi[oyuncuid][oID]);
		mysql_tquery(mysqlB, sorgu);
		SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "admCMD: %s, %s adlý karakteri yasakladý. Sebep: %s", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid), "5 Uyarý");
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin karakterini yasakladý. (sebep: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], sebep);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ban.txt", "%s", log_icerik);
		KickEx(oyuncuid);
	}
	return 1;
}

CMD:ouyariver(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new query[128], isim[MAX_PLAYER_NAME], sebep[64];
	if(sscanf(params, "s[24]s[64]", isim, sebep)) return KullanimMesaji(playerid, "/ouyariver [oyuncu isim] [sebep]");

    new oyuncuid = AktiflikKontrol(isim);
	if(IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Oyuncu oyunda, /uyariver komutunu kullanabilirsiniz.");
	
	format(query,sizeof(query),"SELECT * FROM oyuncular WHERE isim = '%s'", isim);
	mysql_tquery(mysqlB, query, "Uyari_Kontrol", "iss", playerid, isim, sebep);
	return 1;
}

CMD:paraver(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici iþbaþýnda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(GetPVarInt(playerid, "paraver_delay") > gettime()) return HataMesaji(playerid, "Bu komut 20 saniyede bir kez kullanýlabilir.");
	if(OyuncuBilgi[playerid][oKumarBahis] != 0) return HataMesaji(playerid, "Kumar sistemini kullanýrken para veremezsin.");

	new oyuncuid, miktar, yazi[128];
    if(sscanf(params, "ud", oyuncuid, miktar)) return KullanimMesaji(playerid, "/paraver [ID / Oyuncu] [miktar]");

    if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
    if(oyuncuid == playerid) return HataMesaji(playerid, "Kendine para veremezsin.");
	if(!YakinlikKontrol(playerid, oyuncuid, 4.0)) return HataMesaji(playerid, "Oyuncuya yakýn deðilsin.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(miktar < 1) return HataMesaji(playerid, "Girilen miktar $1'in altýnda olamaz.");
	if(miktar > 100000) return HataMesaji(playerid, "Bir seferde en fazla $100,000 verebilirsin");
	if(OyuncuBilgi[playerid][oPara] < miktar) return HataMesaji(playerid, "Girilen miktar fiyatýnda paran yok.");
	if(miktar > 200 && OyuncuBilgi[playerid][oSeviye] < 2) return HataMesaji(playerid, "$200 dolardan fazla verebilmek için en az 2 seviye olmalýsýn.");
	if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[oyuncuid][oAdminDurum] == true) return HataMesaji(playerid, "Girilen kiþi yetkili iþbaþýnda, komutu üzerinde kullanamazsýn.");

    SetPVarInt(playerid, "paraver_delay", gettime() + 20);
    ParaEkle(oyuncuid, miktar);
    ParaEkle(playerid, -miktar);
	SendClientMessageEx(oyuncuid, RENK_GRI, "%s adlý kiþi sana {33AA33}%s {AFAFAF}verdi.", OyuncuIsim(playerid), NumaraFormati(miktar));
	SendClientMessageEx(playerid, RENK_GRI, "%s adlý kiþiye {33AA33}%s {AFAFAF}verdin.", OyuncuIsim(oyuncuid), NumaraFormati(miktar));
    format(yazi, sizeof(yazi), "adlý kiþi %s adlý kiþiye bir miktar para verdi.", OyuncuIsim(oyuncuid));
    cmd_ame(playerid, yazi);
    OyuncuKaydet(playerid);
    OyuncuKaydet(oyuncuid);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], hedef_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	GetPlayerName(oyuncuid, hedef_isim, sizeof(hedef_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiye %s verdi.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], hedef_isim, OyuncuBilgi[oyuncuid][oID], NumaraFormati(miktar));
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/para.txt", "%s", log_icerik);
    return 1;
}

CMD:setvw(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new oyuncuid, dunya;
	if(sscanf(params, "ud", oyuncuid, dunya)) return KullanimMesaji(playerid, "/setvw [ID / Oyuncu] [VW ID]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(GetPlayerVirtualWorld(oyuncuid) == dunya) return HataMesaji(playerid, "Girilen oyuncu zaten ayný dünyada.");

	SetPlayerVirtualWorld(oyuncuid, dunya);
	SunucuMesaji(playerid, "%s adlý kiþinin VW'sini %d olarak deðiþtirdin.", OyuncuIsim(oyuncuid), dunya);
    SunucuMesaji(oyuncuid, "%s adlý yetkili VW'ni %d olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], dunya);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin VW'sini %d olarak deðiþtirdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], dunya);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_basit.txt", "%s", log_icerik);
    return 1;
}

CMD:setint(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new oyuncuid, interior;
	if(sscanf(params, "ud", oyuncuid, interior)) return KullanimMesaji(playerid, "/setint [ID / Oyuncu] [interior id]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(GetPlayerInterior(oyuncuid) == interior) return HataMesaji(playerid, "Girilen oyuncu zaten ayný interiorda.");
	if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0 || OyuncuBilgi[oyuncuid][oHapisSure][1] > 0) return HataMesaji(playerid, "Oyuncu hapiste, bu komutu kullanamazsýn.");

	SetPlayerInterior(oyuncuid, interior);
	SunucuMesaji(playerid, "%s adlý kiþinin interiorunu %d olarak deðiþtirdin.", OyuncuIsim(oyuncuid), interior);
    SunucuMesaji(oyuncuid, "%s adlý yetkili interiorunuzu %d olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], interior);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin interiorunu %d olarak deðiþtirdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], interior);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_basit.txt", "%s", log_icerik);
    return 1;
}

CMD:fisilda(playerid, params[])
{
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	static oyuncuid, mesaj[128], yazi[128];
    if(sscanf(params, "us[128]", oyuncuid, mesaj)) return KullanimMesaji(playerid, "/fisilda [ID / Oyuncu] [mesaj]");

    if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
    if(oyuncuid == playerid) return HataMesaji(playerid, "Kendine fýsýldayamazsýn.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(!YakinlikKontrol(playerid, oyuncuid, 4.0)) return HataMesaji(playerid, "Oyuncuya yakýn deðilsin.");

    format(yazi, sizeof(yazi), "* %s, %s adlý kiþiye yaklaþýr ve kulaðýna fýsýldar.", OyuncuIsim(playerid), OyuncuIsim(oyuncuid));
    SetPlayerChatBubble(playerid, yazi, RENK_PEMBE, 30.0, 10 * 1000);
    SendClientMessageEx(playerid, RENK_SARI, "[Gönderilen] %s (ID: %d): %s", OyuncuIsim(oyuncuid), oyuncuid, mesaj);
    SendClientMessageEx(oyuncuid, RENK_SARI, "[Gelen] %s (ID: %d): %s", OyuncuIsim(playerid), playerid, mesaj);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], hedef_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	GetPlayerName(oyuncuid, hedef_isim, sizeof(hedef_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) fýsýldadý: %d", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], hedef_isim, OyuncuBilgi[oyuncuid][oID], params);
	Gunluk_LogKaydet(log_icerik);
    return 1;
}

CMD:kw(playerid, params[])
{
	static oyuncuid, mesaj[128], yazi[128];
    if(sscanf(params, "us[128]", oyuncuid, mesaj)) return KullanimMesaji(playerid, "/kw [ID / Oyuncu] [mesaj]");

    if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
    if(oyuncuid == playerid) return HataMesaji(playerid, "Kendine fýsýldayamazsýn.");
    if(PetKontrol[playerid] != -1) return HataMesaji(playerid, "Pet kontrol modunda bu komutu kullanamazsýn.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(!YakinlikKontrol(playerid, oyuncuid, 4.0)) return HataMesaji(playerid, "Oyuncuya yakýn deðilsin.");

    format(yazi, sizeof(yazi), "* %s, %s adlý kiþiye yaklaþýr ve kulaðýna fýsýldar.", OyuncuIsim(playerid), OyuncuIsim(oyuncuid));
    SetPlayerChatBubble(playerid, yazi, RENK_PEMBE, 30.0, 10 * 1000);
    SendClientMessageEx(playerid, RENK_SARI, "[%s Fýsýldadýn] %s: %s", EkstraDilCek(playerid), OyuncuIsim(oyuncuid), mesaj);
    if(OyuncuBilgi[playerid][oEkstraDil] == OyuncuBilgi[oyuncuid][oEkstraDil]) {
    SendClientMessageEx(oyuncuid, RENK_SARI, "[%s Fýsýldadý] %s: %s", EkstraDilCek(playerid), OyuncuIsim(playerid), mesaj);
    }
    if(OyuncuBilgi[playerid][oEkstraDil] != OyuncuBilgi[oyuncuid][oEkstraDil]) {
    SendClientMessageEx(oyuncuid, RENK_SARI, "[%s Fýsýldadý] %s: ???? ???? ????", EkstraDilCek(playerid), OyuncuIsim(playerid));
    }
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], hedef_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	GetPlayerName(oyuncuid, hedef_isim, sizeof(hedef_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) fýsýldadý: %d", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], hedef_isim, OyuncuBilgi[oyuncuid][oID], params);
	Gunluk_LogKaydet(log_icerik);
    return 1;
}

CMD:get(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Dondurulmuþken bu komutu kullanamazsýn.");

    new oyuncuid;
    if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/get [ID / Oyuncu]");
    if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(playerid == oyuncuid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
    if(OyuncuBilgi[playerid][oAdmin] < OyuncuBilgi[oyuncuid][oAdmin] && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Girdiðin kiþi sizden yüksek bir yönetici leveline sahip.");
	if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0 || OyuncuBilgi[oyuncuid][oHapisSure][1] > 0) return HataMesaji(playerid, "Oyuncu hapiste, bu komutu onun üzerinde kullanamazsýn.");
	if(OyuncuBilgi[oyuncuid][oYaraliSure] > 0) return HataMesaji(playerid, "Oyuncu yaralanmýþ, bu komut üzerinde kullanýlamýyor.");
	if(OyuncuBilgi[oyuncuid][oDonduruldu] > 0) return HataMesaji(playerid, "Oyuncu etkisiz halde, bu komut üzerinde kullanýlamýyor.");
	if(OyuncuBilgi[oyuncuid][oCK] == 1) return HataMesaji(playerid, "Oyuncu CK olmuþ, bu komutu üzerinde kullanamazsýn.");
	if(OyuncuBilgi[oyuncuid][oPaintball] != -1) return HataMesaji(playerid, "Oyuncu paintballda.");
	if(YakinlikKontrol(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Oyuncu zaten yanýnda.");

    OyuncuyuOyuncuyaGonder(oyuncuid, playerid);
    SunucuMesaji(oyuncuid, "%s adlý yetkili seni yanýna çekti.", OyuncuBilgi[playerid][oAdminNick]);
    SunucuMesaji(playerid, "%s adlý kiþiyi kendine çektin.", OyuncuIsim(oyuncuid));
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiyi yanýna çekti.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
    return 1;
}

CMD:sunucu(playerid, params[])
{
	if(!IsPlayerAdmin(playerid) && OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);
	new yazi[1024], sunucuadi[64];
	GetServerVarAsString("hostname", sunucuadi, sizeof(sunucuadi));

	format(yazi, sizeof(yazi), "Ýþlem\t\tDurum\nKilit\t\t[%s]{FFFFFF}\nSunucu Ýsmini Deðiþtir\t\t[%s]\nÝlk Harf Büyüt\t\t[%s]\nOOC Kanal\t\t[%s]\nAFK Dakika\t\t[%s]\nAFK Kick\t\t[%s]\nAdmin Kanalý\t\t[%s]\nDestek Kanalý\t\t[%s]\n2x PayDay\t\t[%s]\n",
		(sunucukilit == true) ? ("{33AA33}KALDIR") : ("{B70000}EKLE"),
		sunucuadi,
		(ilkharf == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"),
		(oockanal == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"),
		(anti_afk == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"),
		(afk_aktif == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"),
		(akanal == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"),
		(hkanal == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"),
		(ikixpayday == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk")
	);
	format(yazi, sizeof(yazi), "%s3x PayDay\t\t[%s]\nAv Yasaðý\t\t[%s]\nPaintball\t\t[%s]\nYat Kiralama\t\t[%s]\nNewbie Kanalý\t\t[%s]\nOOC Market\t\t[%s]\nvMarket\t\t[%s]\nVergiler\t\t[%s]\n",
	    yazi,
	    (ucxpayday == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"),
	    (avyasagi == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"),
	    (paintball_sistemi == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"),
	    (yat_kiralama == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"),
	    (newbie_kanali == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"),
	    (oocmarket_kullanim == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"),
	    (vmarket_kullanim == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"),
	    (vergiler_durum == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk")
	);
	DialogGoster(playerid, DIALOG_SUNUCU, DIALOG_STYLE_TABLIST_HEADERS, "vRP: Sunucu Paneli", yazi, "Seç", "Ýptal");
	return 1;
}

CMD:gotocar(playerid, params[])
{
	if(!OyuncuBilgi[playerid][oAdmin]) return YetkinizYok(playerid);
	new Float:aracx, Float:aracy, Float:aracz, arabaid;
	if(sscanf(params, "d", arabaid)) return KullanimMesaji(playerid, "/gotocar [Araç ID]");
	if(!IsValidVehicle(arabaid) || Arac_IDBul(arabaid) == -1)	return HataMesaji(playerid, "Geçersiz araç.");
	GetVehiclePos(arabaid, aracx, aracy, aracz);
	OyuncuPosDegistir(playerid, aracx, aracy, aracz + 2);
	SunucuMesaji(playerid, "Girilen araca ýþýnlandýn. (ID: %d)", arabaid);
	arabaid = Arac_IDBul(arabaid);
 	SetPlayerVirtualWorld(playerid, AracBilgi[arabaid][aracWorld]);
  	SetPlayerInterior(playerid, AracBilgi[arabaid][aracInt]);
   	return 1;
}

CMD:pos(playerid, params[])
{
	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	SunucuMesaji(playerid, "X-Y-Z: %f %f %f Facing Angle: %f", x, y, z, a);
	return 1;
}

CMD:x(playerid, params[])
{
	new Float:ekleme, Float:x, Float:y, Float:z;
	if(sscanf(params, "f", ekleme)) return KullanimMesaji(playerid, "/x [Miktar] - 0.001 vs.");
	
	GetPlayerPos(playerid, x, y, z);
	OyuncuPosDegistir(playerid, x+ekleme, y, z);
	return 1;
}

CMD:y(playerid, params[])
{
	new Float:ekleme, Float:x, Float:y, Float:z;
	if(sscanf(params, "f", ekleme)) return KullanimMesaji(playerid, "/y[Miktar] - 0.001 vs.");

	GetPlayerPos(playerid, x, y, z);
	OyuncuPosDegistir(playerid, x, y+ekleme, z);
	return 1;
}

CMD:z(playerid, params[])
{
	new Float:ekleme, Float:x, Float:y, Float:z;
	if(sscanf(params, "f", ekleme)) return KullanimMesaji(playerid, "/z [Miktar] - 0.001 vs.");

	GetPlayerPos(playerid, x, y, z);
	OyuncuPosDegistir(playerid, x, y, z+ekleme);
	return 1;
}

CMD:goto(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballda bu komutu kullanamazsýn.");

    new oyuncu, yer[32], ek[64], id;
    if(sscanf(params, "u", oyuncu)) {
		KullanimMesaji(playerid, "/goto [isim veya oyuncu id/isim]");
		SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} bina, arac, aracsql, gate, ev, ls, sf, lv, isyeri, atm, tnoktasi, garaj");
		SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} meslek, obje, interior, tamirci, satici, pompa, dolap, hitman");
		SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} asgh, san, grotti, santa, dmv, airport, igs, idlewood, cgh, banka, fbi");
		SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} pigpen, jefferson, palomino, montgomery, dillimore, blueberry");
		SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} docks, stadyum, tgs, mezarlýk, mall, flintcounty, grove, gym");
		return 1;
	}
    if(!IsPlayerConnected(oyuncu)) {
	    if(sscanf(params, "s[32]S()[64]", yer, ek))
		{
			KullanimMesaji(playerid, "/git [isim veya oyuncu id/isim]");
			SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} bina, arac, aracsql, gate, ev, ls, sf, lv, isyeri, atm, tnoktasi, garaj");
			SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} meslek, obje, interior, tamirci, satici, pompa, dolap, hitman");
			SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} asgh, san, grotti, santa, dmv, airport, igs, idlewood, cgh, banka, fbi");
			SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} pigpen, jefferson, palomino, montgomery, dillimore, blueberry");
			SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} docks, stadyum, tgs, mezarlýk, mall, flintcounty, grove, gym");
			return 1;
	    }
   		else if(!strcmp(yer, "x", true))
		{
		    new Float:ekleme, Float:x, Float:y, Float:z;
		    if(sscanf(ek, "f", ekleme))
		        return KullanimMesaji(playerid, "/git [x] [eklenecek miktar]");

			GetPlayerPos(playerid, x, y, z);
			OyuncuPosDegistir(playerid, x+ekleme, y, z);
		    return 1;
		}
   		else if(!strcmp(yer, "y", true))
		{
		    new Float:ekleme, Float:x, Float:y, Float:z;
		    if(sscanf(ek, "f", ekleme)) return KullanimMesaji(playerid, "/git [y] [eklenecek miktar]");

			GetPlayerPos(playerid, x, y, z);
			OyuncuPosDegistir(playerid, x, y+ekleme, z);
		    return 1;
		}
   		else if(!strcmp(yer, "z", true))
		{
		    new Float:ekleme, Float:x, Float:y, Float:z;
		    if(sscanf(ek, "f", ekleme)) return KullanimMesaji(playerid, "/git [z] [eklenecek miktar]");

			GetPlayerPos(playerid, x, y, z);
			OyuncuPosDegistir(playerid, x, y, z+ekleme);
		    return 1;
		}
		else if(!strcmp(yer, "dolap", true))
		{
		    if(sscanf(ek, "d", id))
		        return KullanimMesaji(playerid, "/git [dolap] [birlik ID]");

			if((id < 0 || id >= MAKSIMUM_BIRLIK) || !BirlikBilgi[id][birlikKullanimda]) return HataMesaji(playerid, "Geçersiz birlik.");
		    if(BirlikBilgi[id][birlikTur] == BIRLIK_LEGAL || BirlikBilgi[id][birlikTur] == BIRLIK_ILLEGAL) return HataMesaji(playerid, "Bu birlik türlerinin dolabý olamaz.");
			if(BirlikBilgi[id][bDolapPos][0] == 0.0 && BirlikBilgi[id][bDolapPos][1] == 0.0 && BirlikBilgi[id][bDolapPos][2] == 0.0) return HataMesaji(playerid, "Birliðin dolabý yerleþtirilmemiþ.");
			
			OyuncuPosDegistir(playerid, BirlikBilgi[id][bDolapPos][0], BirlikBilgi[id][bDolapPos][1], BirlikBilgi[id][bDolapPos][2]);
			SetPlayerInterior(playerid, BirlikBilgi[id][bDolapInt]);
			SetPlayerVirtualWorld(playerid, BirlikBilgi[id][bDolapVW]);

		    SunucuMesaji(playerid, "%s adlý birliðin dolabýna ýþýnlandýn.", BirlikBilgi[id][birlikAd]);
		    return 1;
		}
		else if(!strcmp(yer, "satici", true))
		{
		    if(sscanf(ek, "d", id))
		        return KullanimMesaji(playerid, "/git [satici] [satýcý ID]");

			if((id < 0 || id >= MAKSIMUM_SATICI) || !SaticiBilgi[id][sKullanimda])
			    return HataMesaji(playerid, "Geçersiz satýcý.");

		    OyuncuPosDegistir(playerid, SaticiBilgi[id][sPos][0], SaticiBilgi[id][sPos][1] + 1, SaticiBilgi[id][sPos][2]);
		    SetPlayerInterior(playerid, SaticiBilgi[id][sInterior]);
			SetPlayerVirtualWorld(playerid, SaticiBilgi[id][sWorld]);

		    SunucuMesaji(playerid, "Girilen satýcýya ýþýnlandýn. (ID: %d)", id);
		    return 1;
		}
		else if(!strcmp(yer, "aktor", true))
		{
		    if(sscanf(ek, "d", id))
		        return KullanimMesaji(playerid, "/git [aktor] [aktör ID]");

			if((id < 0 || id >= MAKSIMUM_NPC) || !NPCBilgi[id][nKullanimda])
			    return HataMesaji(playerid, "Geçersiz aktör.");

		    OyuncuPosDegistir(playerid, NPCBilgi[id][nPos][0], NPCBilgi[id][nPos][1] + 1, NPCBilgi[id][nPos][2]);
		    SetPlayerInterior(playerid, NPCBilgi[id][nInterior]);
			SetPlayerVirtualWorld(playerid, NPCBilgi[id][nWorld]);

		    SunucuMesaji(playerid, "Girilen aktöre ýþýnlandýn. (ID: %d)", id);
		    return 1;
		}
		else if(!strcmp(yer, "pompa", true))
		{
		    if(sscanf(ek, "d", id))
		        return KullanimMesaji(playerid, "/git [pompa] [benzin pompasý ID]");

			if((id < 0 || id >= MAKSIMUM_BENZIN_POMPASI) || !BenzinPompasi[id][pompaKullanimda])
			    return HataMesaji(playerid, "Geçersiz benzin pompasý.");

		    OyuncuPosDegistir(playerid, BenzinPompasi[id][pompaPos][0], BenzinPompasi[id][pompaPos][1], BenzinPompasi[id][pompaPos][2]);
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

		    SunucuMesaji(playerid, "Benzin pompasýna ýþýnlandýn. (ID: %d)", id);
		    return 1;
		}
		else if(!strcmp(yer, "tamirci", true))
		{
		    if(sscanf(ek, "d", id))
		        return KullanimMesaji(playerid, "/git [tamirci] [modifiye noktasý ID]");

			if((id < 0 || id >= MAKSIMUM_MODIFIYENOKTASI) || !ModifiyeNoktasi[id][modifiyeKullanimda])
			    return HataMesaji(playerid, "Geçersiz modifiye noktasý.");

		    OyuncuPosDegistir(playerid, ModifiyeNoktasi[id][modifiyePos][0], ModifiyeNoktasi[id][modifiyePos][1], ModifiyeNoktasi[id][modifiyePos][2]);
		    SetPlayerInterior(playerid, ModifiyeNoktasi[id][modifiyeInt]);
			SetPlayerVirtualWorld(playerid, ModifiyeNoktasi[id][modifiyeDunya]);

		    SunucuMesaji(playerid, "Girilen modifiye/tamir noktasýna ýþýnlandýn. (ID: %d)", id);
		    return 1;
		}
		else if(!strcmp(yer, "bina", true))
		{
		    if(sscanf(ek, "d", id))
		        return KullanimMesaji(playerid, "/git [bina] [bina ID]");

			if((id < 0 || id >= MAKSIMUM_BINA) || !BinaBilgi[id][bKullanimda])
			    return HataMesaji(playerid, "Geçersiz bina!");

		    OyuncuPosDegistir(playerid, BinaBilgi[id][bPos][0], BinaBilgi[id][bPos][1], BinaBilgi[id][bPos][2]);
		    SetPlayerInterior(playerid, BinaBilgi[id][bDisInt]);

			SetPlayerVirtualWorld(playerid, BinaBilgi[id][bDisVW]);
		    SunucuMesaji(playerid, "Girilen binaya ýþýnlandýn. (ID: %d)", id);
		    return 1;
		}
		else if(!strcmp(yer, "aracsql", true))
		{
		    if(sscanf(ek, "d", id)) return KullanimMesaji(playerid, "/git [aracsql] [araç ID]");

			for(new i = 0; i != MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracKullanimda] && AracBilgi[i][aracID] == id)
			{
				if(!IsValidVehicle(AracBilgi[i][aracYarat])) return SunucuMesaji(playerid, "Bu araç kullanýmda deðil, baðlý veya hurdacýya teslim edilmiþ.");
	            new Float:aracx, Float:aracy, Float:aracz;
	            GetVehiclePos(AracBilgi[i][aracYarat], aracx, aracy, aracz);
			    OyuncuPosDegistir(playerid, aracx, aracy, aracz + 2);
			    SunucuMesaji(playerid, "Girilen araca ýþýnlandýn. (SQL ID: %d)", id);
			    SetPlayerVirtualWorld(playerid, AracBilgi[id][aracWorld]);
			    SetPlayerInterior(playerid, AracBilgi[id][aracInt]);
			}
			HataMesaji(playerid, "Araç Bulunamadý.");
		    return 1;
		}
		else if(!strcmp(yer, "arac", true))
		{
		    new Float:aracx, Float:aracy, Float:aracz;

		    if(sscanf(ek, "d", id))
		        return KullanimMesaji(playerid, "/git [arac] [araç ID]");

			if(!IsValidVehicle(id) || Arac_IDBul(id) == -1)
			    return HataMesaji(playerid, "Geçersiz araç.");

            GetVehiclePos(id, aracx, aracy, aracz);
		    OyuncuPosDegistir(playerid, aracx, aracy, aracz + 2);
		    SunucuMesaji(playerid, "Girilen araca ýþýnlandýn. (ID: %d)", id);
		    id = Arac_IDBul(id);
		    SetPlayerVirtualWorld(playerid, AracBilgi[id][aracWorld]);
		    SetPlayerInterior(playerid, AracBilgi[id][aracInt]);
		    return 1;
		}
		else if(!strcmp(yer, "gate", true))
		{
		    if(sscanf(ek, "d", id))
		        return KullanimMesaji(playerid, "/git [gate] [gate ID]");

			if((id < 0 || id >= MAKSIMUM_GATE) || !GateBilgi[id][gateKullanimda])
			    return HataMesaji(playerid, "Geçersiz gate!");

		    OyuncuPosDegistir(playerid, GateBilgi[id][gatePos][0], GateBilgi[id][gatePos][1] + 2, GateBilgi[id][gatePos][2]);
		    SetPlayerVirtualWorld(playerid, GateBilgi[id][gateWorld]);
		    SetPlayerInterior(playerid, GateBilgi[id][gateInterior]);
		    SunucuMesaji(playerid, "Girilen gateye ýþýnlandýn. (ID: %d)", id);
		    return 1;
		}
		else if(!strcmp(yer, "ev", true))
		{
		    if(sscanf(ek, "d", id))
		        return KullanimMesaji(playerid, "/git [ev] [ev ID]");

			if((id < 0 || id >= MAKSIMUM_EV) || !EvBilgi[id][evKullanimda])
			    return HataMesaji(playerid, "Geçersiz ev!");

		    OyuncuPosDegistir(playerid, EvBilgi[id][evPos][0], EvBilgi[id][evPos][1], EvBilgi[id][evPos][2]);
		    SetPlayerVirtualWorld(playerid, EvBilgi[id][evDisVW]);
		    SetPlayerInterior(playerid, EvBilgi[id][evDisInt]);
		    SunucuMesaji(playerid, "Girilen eve ýþýnlandýn. (ID: %d)", id);
		    return 1;
		}
		else if(!strcmp(yer, "isyeri", true))
		{
		    if(sscanf(ek, "d", id))
		        return KullanimMesaji(playerid, "/git [isyeri] [isyeri ID]");

			if((id < 0 || id >= MAKSIMUM_ISYERI) || !IsyeriBilgi[id][isyeriKullanimda])
			    return HataMesaji(playerid, "Geçersiz iþyeri!");

		    OyuncuPosDegistir(playerid, IsyeriBilgi[id][isyeriPos][0], IsyeriBilgi[id][isyeriPos][1], IsyeriBilgi[id][isyeriPos][2]);
		    SetPlayerVirtualWorld(playerid, IsyeriBilgi[id][isyeriDisVW]);
		    SetPlayerInterior(playerid, IsyeriBilgi[id][isyeriDisInt]);
		    SunucuMesaji(playerid, "Girilen iþyerine ýþýnlandýn. (ID: %d)", id);
		    return 1;
		}
		else if(!strcmp(yer, "ls", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) AracPosDegistir(GetPlayerVehicleID(playerid), 1529.6327, -1683.8873, 13.3828);
		    else OyuncuPosDegistir(playerid, 1529.6327, -1683.8873, 13.3828);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Los Santos'a ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "sf", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) AracPosDegistir(GetPlayerVehicleID(playerid), -1986.4033, 137.6835, 27.6875);
		    else OyuncuPosDegistir(playerid, -1986.4033, 137.6835, 27.6875);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "San Fierro'ya ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "lv", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 2029.8564, 1009.2123, 10.8203);
		    }
		    else {
				OyuncuPosDegistir(playerid, 2029.8564,1009.2123,10.8203);
			}
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Las Venturas'a ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "hitman", true))
		{
		    if(IsPlayerInAnyVehicle(playerid))  AracPosDegistir(GetPlayerVehicleID(playerid), -21.2619, 82.0709, 3.1096);
		    else OyuncuPosDegistir(playerid, -21.2619, 82.0709, 3.1096);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Hitman'a ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "garaj", true))
		{
		    if(sscanf(ek, "d", id))
		        return KullanimMesaji(playerid, "/git [garaj] [garaj ID]");

			if((id < 0 || id >= MAKSIMUM_GARAJ) || !GarajBilgi[id][garajKullanimda])
			    return HataMesaji(playerid, "Geçersiz garaj!");

		    OyuncuPosDegistir(playerid, GarajBilgi[id][garajPos][0], GarajBilgi[id][garajPos][1], GarajBilgi[id][garajPos][2]);
		    SetPlayerVirtualWorld(playerid, GarajBilgi[id][garajDunya]);
		    SetPlayerInterior(playerid, GarajBilgi[id][garajInt]);
		    SunucuMesaji(playerid, "Garaja ýþýnlandýn. (ID: %d)", id);
		    return 1;
		}
		else if(!strcmp(yer, "atm", true))
		{
		    if(sscanf(ek, "d", id))
		        return KullanimMesaji(playerid, "/git [atm] [atm ID]");

			if((id < 0 || id >= MAKSIMUM_ATM) || !ATMBilgi[id][atmKullanimda])
			    return HataMesaji(playerid, "Geçersiz ATM!");

		    OyuncuPosDegistir(playerid, ATMBilgi[id][atmPos][0], ATMBilgi[id][atmPos][1], ATMBilgi[id][atmPos][2]);
		    SetPlayerVirtualWorld(playerid, ATMBilgi[id][atmWorld]);
		    SetPlayerInterior(playerid, ATMBilgi[id][atmInterior]);
		    SunucuMesaji(playerid, "ATM'ye ýþýnlandýn. (ID: %d)", id);
		    return 1;
		}
		else if(!strcmp(yer, "anktelefon", true))
		{
		    if(sscanf(ek, "d", id))
		        return KullanimMesaji(playerid, "/git [anktelefon] [Ankesörlü Telefon ID]");
		        
			if((id < 0 || id >= MAKSIMUM_ANKESORLU_TELEFON) || !ATelBilgi[id][aTelKullanimda])
			    return HataMesaji(playerid, "Geçersiz ankesörlü telefon!");
			    
			OyuncuPosDegistir(playerid, ATelBilgi[id][aTelPos][0] + 1.5, ATelBilgi[id][aTelPos][1], ATelBilgi[id][aTelPos][2]);
			SetPlayerVirtualWorld(playerid, ATelBilgi[id][aTelWorld]);
			SetPlayerInterior(playerid, ATelBilgi[id][aTelInterior]);
			SunucuMesaji(playerid, "Ankesörlü telefona ýþýnlandýn. (ID: %d)", id);
			return 1;
		}
		else if(!strcmp(yer, "tnoktasi", true))
		{
		    if(sscanf(ek, "d", id))
		        return KullanimMesaji(playerid, "/git [tnoktasi] [tutuklama noktasý ID]");

			if((id < 0 || id >= MAKSIMUM_TUTUKLAMANOKTASI) || !TutuklamaNoktasi[id][tKullanimda])
			    return HataMesaji(playerid, "Geçersiz tutuklama noktasý!");

		    OyuncuPosDegistir(playerid, TutuklamaNoktasi[id][tPos][0], TutuklamaNoktasi[id][tPos][1], TutuklamaNoktasi[id][tPos][2]);
		    SetPlayerVirtualWorld(playerid, TutuklamaNoktasi[id][tWorld]);
		    SetPlayerInterior(playerid, TutuklamaNoktasi[id][tInterior]);
		    SunucuMesaji(playerid, "Girilen tutuklama noktasýna ýþýnlandýn. (ID: %d)", id);
		    return 1;
		}
		else if(!strcmp(yer, "meslek", true))
		{
		    if(sscanf(ek, "d", id))
		        return KullanimMesaji(playerid, "/git [meslek] [meslek ID]");

			if((id < 0 || id >= MAKSIMUM_MESLEK) || !MeslekBilgi[id][mKullanimda])
			    return HataMesaji(playerid, "Geçersiz meslek!");

		    OyuncuPosDegistir(playerid, MeslekBilgi[id][mPos][0], MeslekBilgi[id][mPos][1], MeslekBilgi[id][mPos][2]);
		    SetPlayerVirtualWorld(playerid, MeslekBilgi[id][mWorld]);
		    SetPlayerInterior(playerid, MeslekBilgi[id][mInterior]);
		    SunucuMesaji(playerid, "Girilen mesleðe ýþýnlandýn. (ID: %d)", id);
		    return 1;
		}
		else if(!strcmp(yer, "obje", true))
		{
		    if(sscanf(ek, "d", id))
		        return KullanimMesaji(playerid, "/git [obje] [obje ID]");

			if((id < 0 || id >= MAKSIMUM_OBJE) || !ObjeBilgi[id][objeKullanimda])
			    return HataMesaji(playerid, "Geçersiz obje!");

		    OyuncuPosDegistir(playerid, ObjeBilgi[id][objePos][0], ObjeBilgi[id][objePos][1] + 2, ObjeBilgi[id][objePos][2]);
		    SetPlayerVirtualWorld(playerid, ObjeBilgi[id][objeWorld]);
		    SetPlayerInterior(playerid, ObjeBilgi[id][objeInterior]);
		    SunucuMesaji(playerid, "Girilen objeye ýþýnlandýn. (ID: %d)", id);
		    return 1;
		}
		else if(!strcmp(yer, "interior", true))
		{
		    new str[6000];
			str[0] = '\0';

			for(new i = 0; i < sizeof(InteriorListesi); i ++) {
			    strcat(str, InteriorListesi[i][intIsim]);
			    strcat(str, "\n");
		    }
		    DialogGoster(playerid, DIALOG_INTERIORLIST, DIALOG_STYLE_LIST, "Iþýnlan: Interior Listesi", str, "Seç", "Kapat");
		    return 1;
		}
		else if(!strcmp(yer, "asgh", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 1170.1310, -1305.0184, 31.4800);
		    }
		    else OyuncuPosDegistir(playerid, 1170.1310, -1305.0184, 31.4800);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "All Saints General Hospital'a ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "san", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 651.5371, -1356.5760, 21.7632);
		    }
		    else OyuncuPosDegistir(playerid, 651.5371, -1356.5760, 21.7632);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "San Andreas News'a ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "grotti", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 530.1821, -1296.6431, 27.2406);
		    }
		    else OyuncuPosDegistir(playerid, 530.1821, -1296.6431, 27.2406);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Grottiye ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "santa", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 154.3244, -1952.0233, 51.3438);
		    }
		    else OyuncuPosDegistir(playerid, 154.3244, -1952.0233, 51.3438);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Santa Mariaya ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "dmv", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 1106.0265, -1763.6534, 17.1582);
		    }
		    else OyuncuPosDegistir(playerid, 1106.0265, -1763.6534, 17.1582);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "DMV Binasýna ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "airport", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 1954.0907, -2182.5820, 17.0000);
		    }
		    else OyuncuPosDegistir(playerid, 1954.0907, -2182.5820, 17.0000);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Airport'a ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "igs", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 1941.1389, -1772.5120, 19.5250);
		    }
		    else OyuncuPosDegistir(playerid, 1941.1389, -1772.5120, 19.5250);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Idle Gas Station'a ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "idlewood", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 2050.4917, -1789.3660, 21.8351);
		    }
		    else OyuncuPosDegistir(playerid, 2050.4917, -1789.3660, 21.8351);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Idlewood'a ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "igs", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 1941.1389, -1772.5120, 19.5250);
		    }
		    else OyuncuPosDegistir(playerid, 1941.1389, -1772.5120, 19.5250);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Idle Gas Station'a ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "cgh", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 2030.1018, -1406.4637, 23.1193);
		    }
		    else OyuncuPosDegistir(playerid, 2030.1018, -1406.4637, 23.1193);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "County General Hospital'a ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "banka", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 1452.4292, -1012.3880, 26.8438);
		    }
		    else OyuncuPosDegistir(playerid, 1452.4292, -1012.3880, 26.8438);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Bankaya ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "gym", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 2231.8198, -1719.4609, 22.8527);
		    }
		    else OyuncuPosDegistir(playerid, 2231.8198, -1719.4609, 22.8527);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "GYM'e ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "grove", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 2497.8264, -1694.2590, 22.2867);
		    }
		    else OyuncuPosDegistir(playerid, 2497.8264, -1694.2590, 22.2867);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Grove Street'e ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "pigpen", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 2423.1067, -1217.1078, 36.0313);
		    }
		    else OyuncuPosDegistir(playerid, 2423.1067, -1217.1078, 36.0313);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "The Pig Pen'e ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "jefferson", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 2199.4470, -1144.0481, 38.1016);
		    }
		    else OyuncuPosDegistir(playerid, 2199.4470, -1144.0481, 38.1016);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Jefferson Motel'e ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "palomino", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 2332.3406, 79.3228, 32.0073);
		    }
		    else OyuncuPosDegistir(playerid, 2332.3406, 79.3228, 32.0073);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Palomino Creek'e ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "montgomery", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 1364.9452, 235.5704, 24.2750);
		    }
		    else OyuncuPosDegistir(playerid, 1364.9452, 235.5704, 24.2750);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Montgomery'e ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "dillimore", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 656.3563, -568.1587, 22.1478);
		    }
		    else OyuncuPosDegistir(playerid, 656.3563, -568.1587, 22.1478);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Dillimore'a ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "blueberry", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 195.6627, -197.9051, 7.5781);
		    }
		    else OyuncuPosDegistir(playerid, 195.6627, -197.9051, 7.5781);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Blueberry'e ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "flintcounty", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), -90.5282, -1167.4711, 7.7439);
		    }
		    else OyuncuPosDegistir(playerid, -90.5282, -1167.4711, 7.7439);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Flint County'e ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "docks", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 2216.3518, -2665.8455, 26.4961);
		    }
		    else OyuncuPosDegistir(playerid, 2216.3518, -2665.8455, 26.4961);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Docks'a ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "stadyum", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 2759.0830, -1701.3258, 37.8869);
		    }
		    else OyuncuPosDegistir(playerid, 2759.0830, -1701.3258, 37.8869);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Stadyuma ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "mezarlik", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 935.5939, -1079.9694, 31.2618);
		    }
		    else OyuncuPosDegistir(playerid, 935.5939, -1079.9694, 31.2618);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Mezarlýða ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "mall", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 1164.8229, -1462.6949, 30.5181);
		    }
		    else OyuncuPosDegistir(playerid, 1164.8229, -1462.6949, 30.5181);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Verona Mall'a ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "tgs", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 1006.6279, -940.1429, 48.2118);
		    }
		    else OyuncuPosDegistir(playerid, 1006.6279, -940.1429, 48.2118);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Temple Gas Station'a ýþýnlandýn.");
		    return 1;
		}
		else if(!strcmp(yer, "fbi", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) {
		        AracPosDegistir(GetPlayerVehicleID(playerid), 924.8152, -1001.0588, 38);
		    }
		    else OyuncuPosDegistir(playerid, 924.8152, -1001.0588, 38);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "FBI'a ýþýnlandýn.");
		    return 1;
		}
		else return HataMesaji(playerid, "Girilen oyuncu geçersiz.");
	}
	if(!OyuncuBilgi[oyuncu][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(oyuncu == playerid) return HataMesaji(playerid, "Kendine ýþýnlanamazsýn.");
	if(OyuncuBilgi[oyuncu][oPaintball] != -1) return HataMesaji(playerid, "Oyuncu paintballda, bu oyuncuya ýþýnlanamazsýn.");

    OyuncuyuOyuncuyaGonder(playerid, oyuncu);
    SunucuMesaji(playerid, "%s adlý kiþiye ýþýnlandýn.", OyuncuIsim(oyuncu));
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncu, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiye ýþýnlandý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncu][oID]);
	Gunluk_LogKaydet(log_icerik);
    return 1;
}

CMD:apm(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1 && OyuncuBilgi[playerid][oDestekEkibi] < 1) return YetkinizYok(playerid);
    if(OyuncuBilgi[playerid][oMaskeDurum] == 1) return HataMesaji(playerid, "Masken takýlýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDestekEkibi] > 0) {
	    if(OyuncuBilgi[playerid][oIncelenenSoruSahibi] == INVALID_PLAYER_ID) return HataMesaji(playerid, "Bir soruyla ilgilenmiyorsun.");
	    if(isnull(params)) return KullanimMesaji(playerid, "/apm [soru cevap]");
	    
		new oyuncuid = OyuncuBilgi[playerid][oIncelenenSoruSahibi];
		if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Bir sorun oluþtu.");

		SendClientMessageEx(oyuncuid, RENK_PM, "(( << %s: %s ))", OyuncuIsim(playerid), params), SendClientMessageEx(playerid, RENK_PM, ">> %s: %s", OyuncuIsim(playerid), params);
	    return 1;
	}
	new oyuncuid, yazi[128];
	if(sscanf(params, "us[128]", oyuncuid, yazi)) return KullanimMesaji(playerid, "/apm [ID / Oyuncu] [mesaj]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(playerid == oyuncuid && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");

	if(OyuncuBilgi[playerid][oAdmin] > 0) SendClientMessageEx(oyuncuid, RENK_PM, "<< %s: %s", OyuncuBilgi[playerid][oAdminNick], yazi), SendClientMessageEx(playerid, RENK_PM, "(( >> %s: %s ))", OyuncuBilgi[playerid][oAdminNick], yazi);
	if(OyuncuBilgi[playerid][oDestekEkibi] > 0) SendClientMessageEx(oyuncuid, RENK_PM, "<< %s: %s", OyuncuIsim(playerid), yazi), SendClientMessageEx(playerid, RENK_PM, "(( >> %s: %s ))", OyuncuIsim(playerid), yazi);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1], hedef_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	GetPlayerName(oyuncuid, hedef_isim, sizeof(hedef_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] [APM]%s(%d) > %s(%d): %d", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], hedef_isim, OyuncuBilgi[oyuncuid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:pmkapat(playerid, params[])
{
	switch(OyuncuBilgi[playerid][oPMDurum])
	{
	case true:
	{
	OyuncuBilgi[playerid][oPMDurum] = false;
	UyariMesaji(playerid, "Artýk PM almayacaksýnýz.");
	}
	case false:
	{
	OyuncuBilgi[playerid][oPMDurum] = true;
	SunucuMesaji(playerid, "Artýk PM alabileceksiniz.");
	}
	}
	return 1;
}

CMD:pm(playerid, params[])
{
    if(!OyuncuBilgi[playerid][oGiris]) return HataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
    if(!OyuncuBilgi[playerid][oPMDurum]) return HataMesaji(playerid, "PM durumunuz kapalý.");

	new oyuncuid, mesaj[128];
	if(sscanf(params, "us[128]", oyuncuid, mesaj)) return KullanimMesaji(playerid, "/pm [ID / Oyuncu] [mesaj]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Kendine PM atamazsýn.");
	if(!OyuncuBilgi[oyuncuid][oPMDurum]) return HataMesaji(playerid, "Girilen oyuncu PM alma durumunu kapatmýþ.");

    /* --------------------------------[ Maskeliyken ID öðrenilmesi için engel. ]-------------------------------- */
	new pm_isim[MAX_PLAYER_NAME + 1], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, pm_isim, sizeof(pm_isim));
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	for(new i = 0, len = strlen(pm_isim); i < len; i ++) if(pm_isim[i] == '_') pm_isim[i] = ' ';
    for(new i = 0, len = strlen(oyuncu_isim); i < len; i ++) if(oyuncu_isim[i] == '_') oyuncu_isim[i] = ' ';
    /* --------------------------------[ Maskeliyken ID öðrenilmesi için engel. ]-------------------------------- */

	SendClientMessageEx(playerid, RENK_PM, "(( >> %s (%d): %s ))", OyuncuIsim(oyuncuid), oyuncuid, mesaj);
	SendClientMessageEx(oyuncuid, RENK_SARI, "(( << %s (%d): %s ))", pm_isim, playerid, mesaj);
	OyuncuBilgi[oyuncuid][oSonPM] = playerid;
	OyuncuBilgi[oyuncuid][oPMAldi] = true;
	foreach(new i : Player) if(OyuncuBilgi[i][oAdmin] > 0 && OyuncuBilgi[i][oPMIzlemeDurum] == true)
		SendClientMessageEx(i, RENK_PM, "(( %s(%d) > %s(%d): %s ))", pm_isim, playerid, OyuncuIsim(oyuncuid), oyuncuid, mesaj);

	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] [PM]%s(%d) > %s(%d): %d", Tarih(), pm_isim, OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:reply(playerid, params[])
{
    if(!OyuncuBilgi[playerid][oGiris]) return HataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
    if(!OyuncuBilgi[playerid][oPMDurum]) return HataMesaji(playerid, "PM durumunuz kapalý.");

	new mesaj[128];
	if(sscanf(params, "s[128]", mesaj)) return KullanimMesaji(playerid, "/re(ply) [mesaj]");
	if(OyuncuBilgi[playerid][oPMAldi] == false) return HataMesaji(playerid, "Size PM gönderen birisi bulunamadý.");
	if(!IsPlayerConnected(OyuncuBilgi[playerid][oSonPM])) return HataMesaji(playerid, "Size son PM atan ID oyunda deðil.");
	if(!OyuncuBilgi[OyuncuBilgi[playerid][oSonPM]][oGiris]) return HataMesaji(playerid, "Size son PM atan ID oyuna giriþ yapmamýþ.");
	if(!OyuncuBilgi[OyuncuBilgi[playerid][oSonPM]][oPMDurum]) return HataMesaji(playerid, "Girilen oyuncu PM alma durumunu kapatmýþ.");

    /* --------------------------------[ Maskeliyken ID öðrenilmesi için engel. ]-------------------------------- */
	new pm_isim[MAX_PLAYER_NAME + 1], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, pm_isim, sizeof(pm_isim));
	GetPlayerName(OyuncuBilgi[playerid][oSonPM], oyuncu_isim, sizeof(oyuncu_isim));
	for(new i = 0, len = strlen(pm_isim); i < len; i ++) if(pm_isim[i] == '_') pm_isim[i] = ' ';
    for(new i = 0, len = strlen(oyuncu_isim); i < len; i ++) if(oyuncu_isim[i] == '_') oyuncu_isim[i] = ' ';
    /* --------------------------------[ Maskeliyken ID öðrenilmesi için engel. ]-------------------------------- */

	SendClientMessageEx(playerid, RENK_PM, "(( >> %s (%d): %s ))", OyuncuIsim(OyuncuBilgi[playerid][oSonPM]), OyuncuBilgi[playerid][oSonPM], mesaj);
	SendClientMessageEx(OyuncuBilgi[playerid][oSonPM], RENK_SARI, "(( << %s (%d): %s ))", pm_isim, playerid, mesaj);
	foreach(new i : Player) if(OyuncuBilgi[i][oAdmin] > 0 && OyuncuBilgi[i][oPMIzlemeDurum] == true)
		SendClientMessageEx(i, RENK_PM, "(( %s(%d) > %s(%d): %s ))", pm_isim, playerid, OyuncuIsim(OyuncuBilgi[playerid][oSonPM]), OyuncuBilgi[playerid][oSonPM], mesaj);

	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] [PM]%s(%d) > %s(%d): %d", Tarih(), pm_isim, OyuncuBilgi[playerid][oID], OyuncuBilgi[playerid][oSonPM], OyuncuBilgi[OyuncuBilgi[playerid][oSonPM]][oID], params);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:ck(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new query[128], isim[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", isim)) return KullanimMesaji(playerid, "/ck [oyuncu isim]");

    new oyuncuid = AktiflikKontrol(isim);
	if(IsPlayerConnected(oyuncuid)) {
	    if(OyuncuBilgi[oyuncuid][oCK] == 1) return HataMesaji(playerid, "Bu oyuncu zaten CK edilmiþ.");
	    if(oyuncuid == playerid) return HataMesaji(playerid, "Kendini CK etmek için /ckol komutunu kullan.");
		OyuncuBilgi[oyuncuid][oCK] = 1;
		if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0) OyuncuBilgi[oyuncuid][oHapisSure][0] = 0;
		if(OyuncuBilgi[oyuncuid][oHapisSure][1] > 0) OyuncuBilgi[oyuncuid][oHapisSure][1] = 0;
		HapiseAt(oyuncuid);
		SunucuMesaji(playerid, "%s adlý oyuncuyu CK ettin.", OyuncuIsim(oyuncuid));
		SunucuMesaji(oyuncuid, "%s adlý yetkili tarafýndan CK edildin.", OyuncuBilgi[playerid][oAdminNick]);
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiyi ck etti.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ck.txt", "%s", log_icerik);
		return 1;
	}
	format(query,sizeof(query),"SELECT * FROM oyuncular WHERE isim = '%s'", isim);
	mysql_tquery(mysqlB, query, "CK_Kontrol", "is", playerid, isim);
	return 1;
}

CMD:cksil(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	new query[128], isim[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", isim)) return KullanimMesaji(playerid, "/cksil [oyuncu isim]");

    new oyuncuid = AktiflikKontrol(isim);
	if(IsPlayerConnected(oyuncuid)) {
	    if(OyuncuBilgi[oyuncuid][oCK] == 0) return HataMesaji(playerid, "Bu oyuncu CK edilmemiþ.");
	    OyuncuBilgi[oyuncuid][oCK] = 0;
		if(IsPlayerInAnyVehicle(oyuncuid)) AracPosDegistir(GetPlayerVehicleID(oyuncuid), 1529.6327, -1683.8873, 13.3828);
		else OyuncuPosDegistir(oyuncuid, 1529.6327, -1683.8873, 13.3828);
		SetPlayerInterior(oyuncuid, 0);
		SetPlayerVirtualWorld(oyuncuid, 0);
		TogglePlayerControllable(oyuncuid, true);
		SunucuMesaji(oyuncuid, "CK durumun %s tarafýndan iptal edildi.", OyuncuBilgi[playerid][oAdminNick]);
		SunucuMesaji(playerid, "%s adlý oyuncunun CK durumu iptal edildi.", OyuncuIsim(oyuncuid));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin ck durumunu sildi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ck.txt", "%s", log_icerik);
		return 1;
	}
	format(query, sizeof(query),"SELECT * FROM oyuncular WHERE isim = '%s'", isim);
	mysql_tquery(mysqlB, query, "CKIptal", "is", playerid, isim);
	return 1;
}

CMD:ckol(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle giriþ yapmalýsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralý süren bitmeden bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdmin] > 0 && OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýndayken bu komutu kullanamazsýn.");

	DialogGoster(playerid, DIALOG_CKOL, DIALOG_STYLE_MSGBOX, "CK Talebi", "Eðer onaylarsan bu karakterini kullanýma kapatacaksýn, bu iþlemin geri dönüþü yoktur.", "Onayla", "Kapat");
	return 1;
}

CMD:shapis(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new oyuncuid, dakika, sebep[64];
	if(sscanf(params, "uds[64]", oyuncuid, dakika, sebep)) return KullanimMesaji(playerid, "/shapis [ID / Oyuncu] [dakika] [sebep]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(oyuncuid == playerid && OyuncuBilgi[playerid][oAdmin] < 7) return HataMesaji(playerid, "Kendinizi hapise atamazsýnýz.");
	if(OyuncuBilgi[oyuncuid][oAdmin] && OyuncuBilgi[playerid][oAdmin] < 7) {
		HataMesaji(playerid, "Girilen kiþi yönetici, hapise atamazsýn.");
		UyariMesaji(oyuncuid, "%s adlý yetkili seni hapise atmaya çalýþtý.", OyuncuIsim(playerid));
		return 1;
	}
	if(OyuncuBilgi[oyuncuid][oPaintball] != -1) {
		foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oPaintball] == OyuncuBilgi[oyuncuid][oPaintball]) SendClientMessageEx(i, RENK_BEYAZ, "{%06x}[PAINTBALL]: {FFFFFF}%s arenadan ayrýldý.", RENK_PAINTBALL >>> 8, OyuncuIsim(oyuncuid));

		ResetPlayerWeapons(oyuncuid);
		OyuncuBilgi[oyuncuid][oPaintball] = -1;
		SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[PAINTBALL-ISTATISTIK]: {FFFFFF}%s öldürme, %s ölüm.", RENK_PAINTBALL >>> 8, NumaraFormati(OyuncuBilgi[oyuncuid][oPBOldurme], ""), NumaraFormati(OyuncuBilgi[oyuncuid][oPBOlum], ""));
		OyuncuBilgi[oyuncuid][oPBOldurme] = 0;
		OyuncuBilgi[oyuncuid][oPBOlum] = 0;
		SetPlayerVirtualWorld(oyuncuid, 0);
		SetPlayerInterior(oyuncuid, 0);
		OyuncuPosDegistir(oyuncuid, 1726.88, -1636.61, 20.22);
		SilahAyarla(oyuncuid);
		CanDuzenle(oyuncuid, EskiVeriler[oyuncuid][eskiCan]);
		ZirhDuzenle(oyuncuid, EskiVeriler[oyuncuid][eskiZirh]);
	}
	YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s, %s adlý kiþiyi sessizce hapse attý. Sebep: %s", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid), sebep);
	new sorgu[512];
	format(sorgu, sizeof(sorgu), "INSERT INTO `oocsicil` (`OyuncuID`, `Admin`, `Tarih`, `Sebep`, `Dakika`) VALUES('%d', '%s','%s', '%s', '%d')", OyuncuBilgi[oyuncuid][oID], OyuncuBilgi[playerid][oAdminNick], Tarih(), sebep, dakika);
	mysql_tquery(mysqlB, sorgu);
	SilahlariSifirla(oyuncuid);
	OyuncuBilgi[oyuncuid][oHapisSure][0] = dakika * 60;
	HapiseAt(oyuncuid);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiyi %d dakika sessiz hapise attý. sebep: %s", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], dakika, sebep);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/hapis.txt", "%s", log_icerik);
	return 1;
}

CMD:jail(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new oyuncuid, dakika, sebep[64];
	if(sscanf(params, "uds[64]", oyuncuid, dakika, sebep)) return KullanimMesaji(playerid, "/ahapis [ID / Oyuncu] [dakika] [sebep]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(oyuncuid == playerid && OyuncuBilgi[playerid][oAdmin] < 7) return HataMesaji(playerid, "Kendinizi hapise atamazsýnýz.");
	if(OyuncuBilgi[oyuncuid][oAdmin] && OyuncuBilgi[playerid][oAdmin] < 7) {
		HataMesaji(playerid, "Girilen kiþi yönetici, hapise atamazsýn.");
		if(OyuncuBilgi[playerid][oAdmin] > 0) UyariMesaji(oyuncuid, "%s adlý yetkili seni hapise atmaya çalýþtý.", OyuncuIsim(playerid));
		return 1;
	}
	if(dakika < 1) return HataMesaji(playerid, "Dakika en az 1 olmalýdýr.");
	if(OyuncuBilgi[oyuncuid][oPaintball] != -1) {
		foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && OyuncuBilgi[i][oPaintball] == OyuncuBilgi[oyuncuid][oPaintball]) SendClientMessageEx(i, RENK_BEYAZ, "{%06x}[PAINTBALL]: {FFFFFF}%s arenadan ayrýldý.", RENK_PAINTBALL >>> 8, OyuncuIsim(oyuncuid));

		ResetPlayerWeapons(oyuncuid);
		OyuncuBilgi[oyuncuid][oPaintball] = -1;
		SendClientMessageEx(oyuncuid, RENK_BEYAZ, "{%06x}[PAINTBALL-ISTATISTIK]: {FFFFFF}%s öldürme, %s ölüm.", RENK_PAINTBALL >>> 8, NumaraFormati(OyuncuBilgi[oyuncuid][oPBOldurme], ""), NumaraFormati(OyuncuBilgi[oyuncuid][oPBOlum], ""));
		OyuncuBilgi[oyuncuid][oPBOldurme] = 0;
		OyuncuBilgi[oyuncuid][oPBOlum] = 0;
		SetPlayerVirtualWorld(oyuncuid, 0);
		SetPlayerInterior(oyuncuid, 0);
		OyuncuPosDegistir(oyuncuid, 1726.88, -1636.61, 20.22);
		SilahAyarla(oyuncuid);
		CanDuzenle(oyuncuid, EskiVeriler[playerid][eskiCan]);
		ZirhDuzenle(oyuncuid, EskiVeriler[playerid][eskiZirh]);
	}
	if(OyuncuBilgi[playerid][oAdmin] > 0 && OyuncuBilgi[playerid][oCezaDurum] == true) SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "%s, %s adlý kiþiyi %d dakika hapse attý. Sebep: %s", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid), dakika, sebep);
	new sorgu[512];
	format(sorgu, sizeof(sorgu), "INSERT INTO `oocsicil` (`OyuncuID`, `Admin`, `Tarih`, `Sebep`, `Dakika`) VALUES('%d', '%s','%s', '%s', '%d')", OyuncuBilgi[oyuncuid][oID], OyuncuBilgi[playerid][oAdminNick], Tarih(), sebep, dakika);
	mysql_tquery(mysqlB, sorgu);
	SilahlariSifirla(oyuncuid);
	OyuncuBilgi[oyuncuid][oHapisSure][0] = dakika * 60;
	HapiseAt(oyuncuid);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiyi %d dakika hapise attý. sebep: %s", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], dakika, sebep);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/hapis.txt", "%s", log_icerik);
	return 1;
}

CMD:unjail(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/unjail [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(oyuncuid == playerid && OyuncuBilgi[playerid][oAdmin] < 7) return HataMesaji(playerid, "Kendinizi hapise hapisten çýkaramazsýn.");
	if(OyuncuBilgi[oyuncuid][oHapisSure][0] == 0 && OyuncuBilgi[oyuncuid][oHapisSure][1] == 0)
	    return HataMesaji(playerid, "Oyuncu hapiste deðil.");

	YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s, %s adlý kiþiyi hapisten çýkardý.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	OyuncuBilgi[oyuncuid][oHapisSure][0] = 0;
	OyuncuBilgi[oyuncuid][oHapisSure][1] = 0;
	OyuncuPosDegistir(oyuncuid, 1529.6327, -1683.8873, 13.3828);
	SetPlayerInterior(oyuncuid, 0);
	SetPlayerVirtualWorld(oyuncuid, 0);
	SunucuMesaji(oyuncuid, "%s tarafýndan hapisten çýkarýldýn.", OyuncuBilgi[playerid][oAdminNick]);
	OyuncuKaydet(oyuncuid);
	TogglePlayerControllable(oyuncuid, true);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiyi hapisten çýkardý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/hapis.txt", "%s", log_icerik);
	return 1;
}

CMD:oparakes(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5) return YetkinizYok(playerid);

	new query[128], isim[MAX_PLAYER_NAME], miktar;
	if(sscanf(params, "s[24]d", isim, miktar))
		return KullanimMesaji(playerid, "/oparakes [oyuncu isim] [miktar]");

    new oyuncuid = AktiflikKontrol(isim);
	if(IsPlayerConnected(oyuncuid))
		return HataMesaji(playerid, "Girilen oyuncu oyunda.");

	format(query,sizeof(query),"SELECT * FROM oyuncular WHERE isim = '%s'", isim);
	mysql_tquery(mysqlB, query, "ParaKesDene", "isd", playerid, isim, miktar);
	return 1;
}

CMD:oparaver(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);

	static query[128], isim[MAX_PLAYER_NAME], miktar;
	if(sscanf(params, "s[24]d", isim, miktar))
		return KullanimMesaji(playerid, "/oparaver [oyuncu isim] [miktar]");

    new oyuncuid = AktiflikKontrol(isim);
	if(IsPlayerConnected(oyuncuid))
		return HataMesaji(playerid, "Girilen oyuncu oyunda, /aparaver komutunu kullan.");

	format(query,sizeof(query),"SELECT * FROM oyuncular WHERE isim = '%s'", isim);
	mysql_tquery(mysqlB, query, "ParaDene", "isd", playerid, isim, miktar);
	return 1;
}

CMD:ojail(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new query[128], isim[MAX_PLAYER_NAME], dakika, sebep[64];
	if(sscanf(params, "s[24]ds[64]", isim, dakika, sebep))
		return KullanimMesaji(playerid, "/ojail [oyuncu isim] [dakika] [sebep]");

    new oyuncuid = AktiflikKontrol(isim);
	if(IsPlayerConnected(oyuncuid))
		return HataMesaji(playerid, "Girilen oyuncu oyunda, /ahapis komutunu kullan.");

	format(query,sizeof(query),"SELECT * FROM oyuncular WHERE isim = '%s'", isim);
	mysql_tquery(mysqlB, query, "HapisDene", "isds", playerid, isim, dakika, sebep);
	return 1;
}

CMD:skick(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new oyuncuid, sebep[64];
	if(sscanf(params, "us[64]", oyuncuid, sebep)) return KullanimMesaji(playerid, "/skick [ID / Oyuncu] [sebep]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Kendini oyundan atamazsýn.");
	if(!strcmp(sebep, ".", true)) return HataMesaji(playerid, "Sebep \".\" olamaz.");

	if(OyuncuBilgi[oyuncuid][oAdmin] && OyuncuBilgi[playerid][oAdmin] < 7) {
		HataMesaji(playerid, "Girilen kiþi yetkili, oyundan atamazsýn.");
		UyariMesaji(oyuncuid, "%s adlý yetkili seni oyundan atmaya çalýþtý.", OyuncuIsim(playerid));
		return 1;
	}

	YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s, %s adlý kiþiyi sessiz olarak oyundan attý. sebep: %s", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid), sebep);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþi oyundan attý. sebep: %s", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], sebep);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/kick.txt", "%s", log_icerik);
	KickEx(oyuncuid);
	return 1;
}

CMD:kick(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1 && OyuncuBilgi[playerid][oEventMod] == 0) return YetkinizYok(playerid);

	new oyuncuid, sebep[64];
	if(sscanf(params, "us[64]", oyuncuid, sebep)) return KullanimMesaji(playerid, "/kick [ID / Oyuncu] [sebep]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Kendini oyundan atamazsýn.");
	if(!strcmp(sebep, ".", true)) return HataMesaji(playerid, "Sebep \".\" olamaz.");

	if(OyuncuBilgi[oyuncuid][oAdmin] && OyuncuBilgi[playerid][oAdmin] < 7) {
		HataMesaji(playerid, "Girilen kiþi yetkili, oyundan atamazsýn.");
		if(OyuncuBilgi[playerid][oAdmin] > 0) UyariMesaji(oyuncuid, "%s adlý yetkili seni oyundan atmaya çalýþtý.", OyuncuIsim(playerid));
		else if(OyuncuBilgi[playerid][oAdmin] < 1) UyariMesaji(oyuncuid, "%s adlý görevli seni oyundan atmaya çalýþtý.", OyuncuIsim(playerid));
		return 1;
	}

	if(OyuncuBilgi[playerid][oAdmin] > 0) {
	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] && OyuncuBilgi[i][oCezaDurum] == false) return SendClientMessageEx(i, RENK_ACIKKIRMIZI, "aKick: %s, %s adlý kiþiyi oyundan attý. Sebep: %s", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid), sebep);
	}
	else if(OyuncuBilgi[playerid][oDestekEkibi] == 3) {
	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] && OyuncuBilgi[i][oCezaDurum] == false) return SendClientMessageEx(i, RENK_ACIKKIRMIZI, "gKick: Görevli %s, %s adlý kiþiyi oyundan attý. Sebep: %s", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid), sebep);
	}
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþi oyundan attý. sebep: %s", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], sebep);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/kick.txt", "%s", log_icerik);
	KickEx(oyuncuid);
	return 1;
}

CMD:herkesiat(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);
    if(isnull(params)) return KullanimMesaji(playerid, "/herkesiat [sebep]");
    if(strlen(params) > 12) return HataMesaji(playerid, "Sebep en fazla 12 harfli olabilir.");
	new sayi;
	sayi = 0;
	SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "admCMD: %s, tüm oyuncularý oyundan attý. sebep: %s", OyuncuBilgi[playerid][oAdminNick], params);
	foreach(new o : Player) {
	    if(o == playerid || OyuncuBilgi[o][oAdmin] >= 7) continue;
	    KickEx(o);
	    sayi++;
	}
	if(sayi > 0) {
		SunucuMesaji(playerid, "%d adet oyuncu oyundan atýldý.", sayi);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) herkesi oyundan attý. (%d kiþi - %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], sayi, params);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/kick.txt", "%s", log_icerik);
	}
	else SunucuMesaji(playerid, "Oyundan atýlacak oyuncu yok, kalanlar admin.");
	return true;
}

CMD:karakterban(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new oyuncuid, sebep[32], sorgu[128];
	if(sscanf(params, "us[32]", oyuncuid, sebep)) return KullanimMesaji(playerid, "/karakterban [ID / Oyuncu] [sebep]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(playerid == oyuncuid) return HataMesaji(playerid, "Girilen oyuncu geçersiz.");
	if(!strcmp(sebep, ".", true) || !strcmp(sebep, "..", true) || !strcmp(sebep, "...", true) || !strcmp(sebep, "....", true)) return HataMesaji(playerid, "Sebep \".\" olamaz.");
	if(!strcmp(sebep, "Ananýn Amý", true) || !strcmp(sebep, "Orospu Çoçuðu", true) || !strcmp(sebep, "Orospu", true) || !strcmp(sebep, "Gerizekalý", true) || !strcmp(sebep, "Amcýk", true)) return HataMesaji(playerid, "Sebep küfürlü olamaz, Texa'ya bildirildi.");
	if(OyuncuBilgi[oyuncuid][oAdmin] && OyuncuBilgi[playerid][oAdmin] < 7) {
		HataMesaji(playerid, "Yasaklamaya çalýþtýðýn kiþi admin.");
		UyariMesaji(oyuncuid, "%s adlý yetkili seni yasaklamaya çalýþtý.", OyuncuIsim(playerid));
		return 1;
	}

	format(sorgu, sizeof(sorgu), "UPDATE `oyuncular` SET `Yasaklama` = '%s' WHERE `ID` = '%d'", sebep, OyuncuBilgi[oyuncuid][oID]);
	mysql_tquery(mysqlB, sorgu);
	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] && OyuncuBilgi[i][oCezaDurum] == false) return SendClientMessageEx(i, RENK_ACIKKIRMIZI, "aBan: %s, %s adlý kiþiyi yasakladý. Sebep: %s", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid), sebep);
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþinin karakterini yasakladý. (sebep: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], sebep);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/ban.txt", "%s", log_icerik);
	KickEx(oyuncuid);
	return 1;
}

CMD:oban(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 3) return YetkinizYok(playerid);

	new sorgu[128], isim[MAX_PLAYER_NAME], sebep[32];
	if(sscanf(params, "s[32]s[32]", isim, sebep))
		return KullanimMesaji(playerid, "/oban [oyuncu isim] [sebep]");

    new oyuncuid = AktiflikKontrol(isim);
	if(IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen oyuncu oyunda, /yasakla komutunu kullan.");

	format(sorgu, sizeof(sorgu),"SELECT * FROM oyuncular WHERE isim = '%s'", isim);
	mysql_tquery(mysqlB, sorgu, "YasaklamaDene", "iss", playerid, isim, sebep);
	return 1;
}

CMD:ohban(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new sorgu[128], isim[MAX_PLAYER_NAME], sebep[32];
	if(sscanf(params, "s[32]s[32]", isim, sebep)) return KullanimMesaji(playerid, "/ohban [oyuncu isim] [sebep]");

    new oyuncuid = AktiflikKontrol(isim);
	if(IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen oyuncu oyunda, /hban komutunu kullan.");

	format(sorgu, sizeof(sorgu),"SELECT * FROM oyuncular WHERE isim = '%s'", isim);
	mysql_tquery(mysqlB, sorgu, "HesapBan_Kontrol", "iss", playerid, isim, sebep);
	return 1;
}

CMD:bankaldir(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new oyuncu[32], query[128];
	if(sscanf(params, "s[32]", oyuncu)) return KullanimMesaji(playerid, "/bankaldir [karakter isim]");

	format(query, sizeof(query), "SELECT * FROM oyuncular WHERE isim = '%s'", oyuncu);
	mysql_tquery(mysqlB, query, "Karakter_YasaklamaKontrol", "d", playerid);
	return 1;
}

CMD:hban(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new oyuncuid, sebep[32], sorgu[256], oIP[16], isim[MAX_PLAYER_NAME], szSerial[128];
	if(sscanf(params, "us[32]", oyuncuid, sebep))
	    return KullanimMesaji(playerid, "/hban [ID / Oyuncu] [sebep]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!OyuncuBilgi[oyuncuid][oGiris]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(playerid == oyuncuid) return HataMesaji(playerid, "Girilen oyuncu geçersiz.");
	if(!strcmp(sebep, ".", true)) return HataMesaji(playerid, "Sebep \".\" olamaz.");
	if(OyuncuBilgi[oyuncuid][oAdmin] && OyuncuBilgi[playerid][oAdmin] < 7) {
		HataMesaji(playerid, "Girilen kiþi yönetici, bu kiþiyi yasaklayamazsýn.");
		UyariMesaji(oyuncuid, "%s adlý yetkili seni yasaklamaya çalýþtý.", OyuncuIsim(playerid));
		return 1;
	}

	GetPlayerIp(oyuncuid, oIP, sizeof(oIP));
	gpci(oyuncuid, szSerial, sizeof(szSerial));
	format(isim, sizeof(isim), "%03d", OyuncuBilgi[oyuncuid][oHesap]);
	format(sorgu, sizeof(sorgu),"INSERT INTO yasaklamalar (Yasaklanan, Yasaklayan, Sebep, IP, Serial) VALUES ('%s', '%s', '%s', '%s', '%s')", isim, OyuncuBilgi[playerid][oAdminNick], sebep, oIP, szSerial);
	mysql_query(mysqlB, sorgu);
	SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "admCMD: %s, %s adlý kiþinin hesabýný yasakladý. sebep: %s", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid), sebep);
	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s ID'li hesabý yasakladý. (sebep: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], isim, sebep);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/ban.txt", "%s", log_icerik);
	KickEx(oyuncuid);
	return 1;
}

CMD:hbankaldir(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	new oyuncu[32], query[128];
	if(sscanf(params, "s[32]", oyuncu)) return KullanimMesaji(playerid, "/hbankaldir [hesap id]");

	format(query, sizeof(query), "SELECT * FROM yasaklamalar WHERE Yasaklanan = '%s'", oyuncu);
	mysql_tquery(mysqlB, query, "Yonetim_YasaklamaKontrol", "d", playerid);
	return 1;
}

CMD:ipbankaldir(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new ip[16], query[128];
	if(sscanf(params, "s[16]", ip)) return KullanimMesaji(playerid, "/ipbankaldir [ip]");

	format(query, sizeof(query), "SELECT * FROM yasaklamalar WHERE IP = '%s'", ip);
	mysql_tquery(mysqlB, query, "Yonetim_IPYasaklamaKontrol", "d", playerid);
	return 1;
}

CMD:temizlikci(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçtayken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oMeslek] != 2) return HataMesaji(playerid, "Temizlik Þöförü mesleðinde deðilsin.");
	if(Meslek_Yakin(playerid) == -1) return HataMesaji(playerid, "Meslek noktasýna yakýn deðilsin.");
	if(MeslekBilgi[Meslek_Yakin(playerid)][mTur] != 2) return HataMesaji(playerid, "Yakýnýnda olduðun meslek noktasý \"%s\" deðil.", MeslekIsim(2));
	if(OyuncuBilgi[playerid][oTemizlikCP] > 0) return HataMesaji(playerid, "Mesleðini bitirmeden veya iptal etmeden bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oKamyoncu] != -1) return HataMesaji(playerid, "Kamyoncu mesleðini yaparken bu mesleðe giremezsin.");
	if(OyuncuBilgi[playerid][oYaris] != -1) return HataMesaji(playerid, "Yarýþtayken meslek yapamazsýn.");
	// if(OyuncuBilgi[playerid][oMateryalTasiyor] == true) return HataMesaji(playerid, "Paket taþýrken mesleðe giremezsin. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oMarker] > -1) return HataMesaji(playerid, "Konum araþtýrýrken mesleðe giremezsin. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oKonum] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oAdres] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][objeLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oIsaretliMeslek] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

	DialogGoster(playerid, DIALOG_TEMIZLIK_SOFORU, DIALOG_STYLE_MSGBOX, "Temizlik Þöförü", "Temizlik yapman için sana bir araç verilecek. Araçtan indiðin takdirde araç geri alýnýr ve meslek iptal olur.\nBu aracý sadece \"Temizlik Þöförü\" mesleðini yapmak için kullanabilirsin, aksi halde ceza alýrsýn. Baþlamak istiyor musun?", "Evet", "Hayýr");
	return 1;
}

CMD:isbasi(playerid, params[])
{
    if(Meslek_Yakin(playerid) == -1) return HataMesaji(playerid, "Bir meslek noktasýna yakýn deðilsin.");
    if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu seçeneði kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu seçeneði kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu seçeneði kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu seçeneði kullanamazsýn.");
	if(OyuncuBilgi[playerid][oMeslek] == 0) return HataMesaji(playerid, "Herhangi bir meslekte deðilsiniz.");

	switch(OyuncuBilgi[playerid][oMeslekIsbasi])
	{
	    case true:
		{
		UyariMesaji(playerid, "Artýk iþbaþýnda deðilsiniz.");
        /*OyuncuBilgi[playerid][oGeciciKiyafet] = 0;
		KiyafetDegistir(playerid, OyuncuBilgi[playerid][oKiyafet]);*/
		OyuncuBilgi[playerid][oMeslekIsbasi] = false;
	    }
	    case false:
	    {
		/*new kiyafet;
		kiyafet = GetPlayerSkin(playerid);
		OyuncuBilgi[playerid][oKiyafet] = kiyafet;*/
		SunucuMesaji(playerid, "Ýþbaþýna geçtiniz.");
		OyuncuBilgi[playerid][oMeslekIsbasi] = true;
		/*switch(OyuncuBilgi[playerid][oMeslek])
		{
		    case 9:
		    {
			switch(OyuncuBilgi[playerid][oCinsiyet])
			{
			case 1:
			{
			switch(OyuncuBilgi[playerid][oTenRengi])
			{
			case 1:
			{
			OyuncuBilgi[playerid][oGeciciKiyafet] = 240;
			KiyafetDegistir(playerid, OyuncuBilgi[playerid][oGeciciKiyafet]);
			}
			case 2:
			{
			OyuncuBilgi[playerid][oGeciciKiyafet] = 299;
   			KiyafetDegistir(playerid, OyuncuBilgi[playerid][oGeciciKiyafet]);
			}
			}
			}
			case 2:
			{
            switch(OyuncuBilgi[playerid][oTenRengi])
			{
			case 1:
			{
			OyuncuBilgi[playerid][oGeciciKiyafet] = 240;
			KiyafetDegistir(playerid, OyuncuBilgi[playerid][oGeciciKiyafet]);
			}
			case 2:
			{
			OyuncuBilgi[playerid][oGeciciKiyafet] = 299;
			KiyafetDegistir(playerid, OyuncuBilgi[playerid][oGeciciKiyafet]);
			}
			}
			}
			}
		    }
		}*/
	    }
	}
	OyuncuKaydet(playerid);
	return 1;
}

CMD:meslek(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan komut kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Ýþbaþýndayken bunu yapamazsýn.");
	if(OyuncuBilgi[playerid][oMeslek] != 0) {
		new bilgi[512];
		format(bilgi, sizeof(bilgi), "{FFFFFF}%s adlý mesleðinden ayrýlmak istiyor musun?\n\n{B70000}UYARI: {FFFFFF}Bu iþlemin geri dönüþü yoktur, lütfen iþlemlerinizi dikkatli yapýnýz.\n{FFFFFF}Ayrýlma iþleminin sonunda hiçbir iade alamayacaksýnýz.", MeslekIsim(OyuncuBilgi[playerid][oMeslek]));
		DialogGoster(playerid, DIALOG_MESLEKAYRIL, DIALOG_STYLE_MSGBOX, "Meslek - Ayrýlma", bilgi, "Evet", "Hayýr");
	    return 1;
	}
	
	if(Meslek_Yakin(playerid) == -1) return HataMesaji(playerid, "Bir meslek noktasýna yakýn deðilsin.");
	
	new id = Meslek_Yakin(playerid);
	if(MeslekBilgi[id][mTur] == 6) {
	    if(OyuncuBilgi[playerid][oAvukatLisans] == 0) return HataMesaji(playerid, "Bu mesleðe eriþebilmek için avukat olmalýsýn.");
	}
	if(MeslekBilgi[id][mTur] == 4) {
	    if(OyuncuBilgi[playerid][oSeviye] < 5) return HataMesaji(playerid, "Hýrsýz mesleðine girmek için en az 5 seviye olmalýsýn.");
	    if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) return HataMesaji(playerid, "Devlet kurumlarý bu mesleði kullanamaz.");
	    new icerik[256];
	    format(icerik, sizeof(icerik), "{FFFFFF}Bu mesleðe katýlmak için {33aa33}%s {FFFFFF}ödeyeceksin, katýlmak istiyor musun?", NumaraFormati(HIRSIZ_MESLEK_UCRET));
	    DialogGoster(playerid, DIALOG_MESLEK_HIRSIZ, DIALOG_STYLE_MSGBOX, "Meslek - Katýl", icerik, "Evet", "Hayýr");
		return 1;
	}
	if(MeslekBilgi[id][mTur] == 3) {
	    if(OyuncuBilgi[playerid][oSeviye] < 5) return HataMesaji(playerid, "Mekanik mesleðine girmek için en az 5 seviye olmalýsýn.");
	    if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) return HataMesaji(playerid, "Devlet kurumlarý bu mesleði kullanamaz.");
	    new icerik[256];
	    format(icerik, sizeof(icerik), "{FFFFFF}Bu mesleðe katýlmak için {33aa33}%s {FFFFFF}ödeyeceksin, katýlmak istiyor musun?", NumaraFormati(MEKANIK_MESLEK_UCRET));
	    DialogGoster(playerid, DIALOG_MESLEK_MEKANIK, DIALOG_STYLE_MSGBOX, "Meslek - Katýl", icerik, "Evet", "Hayýr");
		return 1;
	}
	OyuncuBilgi[playerid][oMeslek] = MeslekBilgi[id][mTur];
	SunucuMesaji(playerid, "%s mesleðine katýldýn, /yardim yazarak meslek komutlarýný görüntüleyebilirsin.", MeslekIsim(OyuncuBilgi[playerid][oMeslek]));
	SunucuMesaji(playerid, "Meslekten ayrýlmak için tekrar /meslek komutunu kullanmanýz yeterlidir.");
	return 1;
}

/*CMD:zirhsat(playerid, params[])
{
	if(OyuncuBilgi[playerid][oMeslek] != 10) return HataMesaji(playerid, "Bodyguard deðilsin.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Dondurulma etkisinde olduðun için bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oBodyguardBekleme] > gettime()) { HataMesaji(playerid, "Tekrar zýrh satmak için %d saniye beklemelisin.", OyuncuBilgi[playerid][oBodyguardBekleme] - gettime()); return 1; }
	
	new oyuncuid, fiyat;
	if(sscanf(params, "ud", oyuncuid, fiyat)) return KullanimMesaji(playerid, "/zirhsat [ID / Oyuncu] [ucret]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Belirttiðin oyuncu geçersiz.");
	if(!YakinlikKontrol(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Girdiðin oyuncuya yakýn deðilsin.");
	if(OyuncuZirh(oyuncuid) >= 25) return HataMesaji(playerid, "Bu oyuncunun yüzde 25 veya daha fazla zýrhý var, zýrh satýlamaz.");
	if(OyuncuBilgi[oyuncuid][oBodyguardOneren] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Bu oyuncuya daha önce zýrh satma isteði gönderilmiþ.");
	if(fiyat < 1000 || fiyat > 10000) return HataMesaji(playerid, "Girilen fiyat geçersiz, en az $1,000 - en fazla $10,000");
	
	OyuncuBilgi[playerid][oBodyguardBekleme] = gettime() + 45;
	OyuncuBilgi[oyuncuid][oBodyguardOneren] = playerid;
	OyuncuBilgi[oyuncuid][oBodyguardFiyat] = fiyat;
	SunucuMesaji(playerid, "%s adlý oyuncuya %s karþýlýðýnda zýrh satma önerisinde bulundun.", OyuncuIsim(oyuncuid), NumaraFormati(fiyat));
	SunucuMesaji(oyuncuid, "%s adlý bodyguard sana %s karþýlýðýnda zýrh satmak istiyor. (/kabul bodyguard - /iptal bodyguard)", OyuncuIsim(playerid), NumaraFormati(fiyat));
	return 1;
}*/

CMD:avukatsifirla(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return 0;
    OyuncuBilgi[playerid][oAvukatSecim] = INVALID_PLAYER_ID, SunucuMesaji(playerid, "sýfýrlandý.");
	return 1;
}

/*CMD:avukat(playerid, params[])
{
	if(OyuncuBilgi[playerid][oMeslek] != 6) return HataMesaji(playerid, "Avukat mesleðinde deðilsin.");
	if(OyuncuBilgi[playerid][oAvukatSecim] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Avukatlýk iþleminiz bitmeden bu komutu kullanamazsýnýz.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Dondurulma etkisinde olduðun için bu komutu kullanamazsýn.");
	
	new dialog_baslik[64], level = 1;
	if(OyuncuBilgi[playerid][oAvukatYetenek] > 0 && OyuncuBilgi[playerid][oAvukatYetenek] < 15) level = 1;
	else if(OyuncuBilgi[playerid][oAvukatYetenek] >= 15 && OyuncuBilgi[playerid][oAvukatYetenek] < 30) level = 2;
	else if(OyuncuBilgi[playerid][oAvukatYetenek] >= 30 && OyuncuBilgi[playerid][oAvukatYetenek] < 60) level = 3;
	else if(OyuncuBilgi[playerid][oAvukatYetenek] >= 60 && OyuncuBilgi[playerid][oAvukatYetenek] < 120) level = 4;
	else if(OyuncuBilgi[playerid][oAvukatYetenek] >= 120) level = 5;
	format(dialog_baslik, sizeof(dialog_baslik), "Avukat [Level: %d/5]", level);
	DialogGoster(playerid, DIALOG_AVUKAT, DIALOG_STYLE_TABLIST, dialog_baslik, "Aranma Temizle\nSuç Ýndirimi\n", "Seç", "Kapat");
	return 1;
}*/

CMD:kamyoncu(playerid, params[])
{
    if(OyuncuBilgi[playerid][oMeslek] != 1) return HataMesaji(playerid, "Kamyon Þöförü mesleðinde deðilsin.");
	if(Meslek_Yakin(playerid) == -1) return HataMesaji(playerid, "Meslek noktasýna yakýn deðilsin.");
	if(MeslekBilgi[Meslek_Yakin(playerid)][mTur] != 1) return HataMesaji(playerid, "Yakýnýnda olduðun meslek noktasý \"%s\" deðil.", MeslekIsim(1));
	if(OyuncuBilgi[playerid][oMeslekIsbasi] != true) return HataMesaji(playerid, "Ýþbaþýnda deðilsin, iþbaþý yapmak için /isbasi komutunu kullanýn.");

	new baslik[64], level = 1, gereken = 25;
	if(OyuncuBilgi[playerid][oKamyoncuTeslimat] >= 25 && OyuncuBilgi[playerid][oKamyoncuTeslimat] < 75) level = 2, gereken = 75;
	else if(OyuncuBilgi[playerid][oKamyoncuTeslimat] >= 75 && OyuncuBilgi[playerid][oKamyoncuTeslimat] < 150) level = 3, gereken = 150;
	else if(OyuncuBilgi[playerid][oKamyoncuTeslimat] >= 175 && OyuncuBilgi[playerid][oKamyoncuTeslimat] < 325) level = 4, gereken = 325;
	else if(OyuncuBilgi[playerid][oKamyoncuTeslimat] >= 325) level = 5, gereken = 0;
	if(level < 5) format(baslik, sizeof(baslik), "Kamyoncu - Seviye: %d [%d/%d]", level, OyuncuBilgi[playerid][oKamyoncuTeslimat], gereken);
	else if(level >= 5) format(baslik, sizeof(baslik), "Kamyoncu - Seviye: %d [Toplam Teslimat: %d]", level, OyuncuBilgi[playerid][oKamyoncuTeslimat]);
	new icerik[144];
	icerik[0] = 0;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 499) strcat(icerik, "Ürün Yükle\t\n");
	if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) strcat(icerik, "Kamyon Kirala\t\n");
	for(new i = 0; i < MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aKiraZaman] > 0 && AracBilgi[i][aracKullanimda] == true && AracBilgi[i][aracAnahtar] == OyuncuBilgi[playerid][oID] && AracBilgi[i][aracModel] == 499 && AracBilgi[i][aracSahip] == 0)
	    format(icerik, sizeof(icerik), "%s[KÝRA] Kalan Süre\t%d dakika\n[KÝRA] Aracý Bul\t\n", icerik, AracBilgi[i][aKiraZaman]);

	DialogGoster(playerid, DIALOG_KAMYONCU, DIALOG_STYLE_TABLIST, baslik, icerik, "Seç", "Kapat");
	return 1;
}

CMD:ainsaat(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 6) return YetkinizYok(playerid);
    
	new tip[24], bilgi[128];
	if(sscanf(params, "s[24]S()[128]", tip, bilgi))
 	{
	 	KullanimMesaji(playerid, "/ainsaat [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} teslimat, kota, ucret");
		return 1;
	}
	if(!strcmp(tip, "teslimat", true))
	{
	    if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return HataMesaji(playerid, "Teslimat noktasýný farklý dünyalara koyamazsýn.");
	    
	    GetPlayerPos(playerid, insaat_Pos[0], insaat_Pos[1], insaat_Pos[2]);
	    SunucuMesaji(playerid, "Ýnþaat mesleði teslimat noktasýný deðiþtirdin.");
	    return 1;
	}
	else if(!strcmp(tip, "kota", true))
	{
	    new yeni_kota;
		if(sscanf(bilgi, "d", yeni_kota)) return KullanimMesaji(playerid, "/ainsaat [kota] [yeni kota]");
		if(yeni_kota < 0) return HataMesaji(playerid, "Kota en az 0 olmalýdýr.");
		insaat_Kota = yeni_kota;
		SunucuMesaji(playerid, "Kota %d olarak deðiþtirildi.", yeni_kota);
	    return 1;
	}
	else if(!strcmp(tip, "ucret", true))
	{
	    new ucret;
		if(sscanf(bilgi, "d", ucret)) return KullanimMesaji(playerid, "/ainsaat [kota] [yeni kota]");
		if(ucret < 1) return HataMesaji(playerid, "Ücret en az $1 olmalýdýr.");
		insaat_Ucret = ucret;
		SunucuMesaji(playerid, "Ücret %s olarak deðiþtirildi.", NumaraFormati(ucret));
	    return 1;
	}
	return 1;
}

CMD:ameslek(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);
    if(!strcmp(params, "olustur", true)) {
        new id = -1;
		id = Meslek_Yarat(playerid, 1);
		if(id == -1) return HataMesaji(playerid, "Sunucu dinamik meslek limitine ulaþtýðý için yeni meslek yaratamazsýn.");

		SunucuMesaji(playerid, "Meslek baþarýyla oluþturuldu. (ID: %d)", id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir meslek noktasýný oluþturdu.", Tarih(), OyuncuBilgi[playerid][oAdmin], OyuncuBilgi[playerid][oID], MeslekBilgi[id][mID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_meslek.txt", "%s", log_icerik);
		return 1;
    }
	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/ameslek [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} olustur, lokasyon, tur, sil");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_MESLEK) || !MeslekBilgi[id][mKullanimda]) return HataMesaji(playerid, "Geçersiz ID!");

	if(!strcmp(type, "lokasyon", true))
	{
	    new Float:x, Float:y, Float:z;
	    GetPlayerPos(playerid, x, y, z);

		MeslekBilgi[id][mPos][0] = x;
		MeslekBilgi[id][mPos][1] = y;
		MeslekBilgi[id][mPos][2] = z;
		MeslekBilgi[id][mInterior] = GetPlayerInterior(playerid);
		MeslekBilgi[id][mWorld] = GetPlayerVirtualWorld(playerid);

	    Meslek_Yenile(id);
	    Meslek_Kaydet(id);
		SunucuMesaji(playerid, "Bir mesleðin yerini deðiþtirdin. (ID: %d)", id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir meslek noktasýnýn yerini deðiþtirdi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdmin], OyuncuBilgi[playerid][oID], MeslekBilgi[id][mID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_meslek.txt", "%s", log_icerik);
	}
 	else if(!strcmp(type, "tur", true))
	{
	    new turid;
	    if(sscanf(string, "d", turid)) return KullanimMesaji(playerid, "/ameslek [id] [tur] [yeni tür]");
        if(turid < 1 || turid > 10) return HataMesaji(playerid, "Geçersiz meslek türü! (1-10)");

	    MeslekBilgi[id][mTur] = turid;
	    Meslek_Yenile(id);
	    Meslek_Kaydet(id);
		SunucuMesaji(playerid, "Bir mesleðin türünü deðiþtirdin. (ID: %d | Tür: %s)", id, MeslekIsim(turid));
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir mesleðin türünü deðiþtirdi. (ID: %d | Tür: %s)", Tarih(), OyuncuBilgi[playerid][oAdmin], OyuncuBilgi[playerid][oID], MeslekBilgi[id][mID], MeslekIsim(turid));
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_meslek.txt", "%s", log_icerik);
	}
 	else if(!strcmp(type, "sil", true))
	{
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir meslek noktasýný sildi.", Tarih(), OyuncuBilgi[playerid][oAdmin], OyuncuBilgi[playerid][oID], MeslekBilgi[id][mID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_meslek.txt", "%s", log_icerik);
		Meslek_Sil(id);
		SunucuMesaji(playerid, "Meslek noktasý silindi. (ID: %d)", id);
	}
	return 1;
}

CMD:yakindakiler(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new id = -1, sayi = 0;
	if((id = Ev_Yakin(playerid)) != -1)
	    SunucuMesaji(playerid, "Yakýnýndaki Ev ID: %d.", id), sayi++;

    if((id = Isyeri_Yakin(playerid)) != -1)
	    SunucuMesaji(playerid, "Yakýnýndaki Ýþyeri ID: %d.", id), sayi++;

    if((id = Bina_Yakin(playerid)) != -1)
	    SunucuMesaji(playerid, "Yakýnýndaki Bina ID: %d.", id), sayi++;

    if((id = Gate_Yakin(playerid)) != -1)
	    SunucuMesaji(playerid, "Yakýnýndaki Gate ID: %d.", id), sayi++;

    if((id = ATM_Yakin(playerid)) != -1)
	    SunucuMesaji(playerid, "Yakýnýndaki ATM ID: %d.", id), sayi++;

    if((id = Obje_Yakin(playerid)) != -1)
	    SunucuMesaji(playerid, "Yakýnýndaki Obje ID: %d.", id), sayi++;

    if((id = Uyusturucu_Yakin(playerid)) != -1)
	    SunucuMesaji(playerid, "Yakýnýndaki Uyuþturucu ID: %d.", id), sayi++;
	    
    if((id = Ankesorlu_Telefon_Yakin(playerid)) != -1)
	    SunucuMesaji(playerid, "Yakýnýndaki Ankesörlü Telefon ID: %d.", id), sayi++;

    if((id = Tutuklama_Yakin(playerid)) != -1)
	    SunucuMesaji(playerid, "Yakýnýndaki Tutuklama Noktasý ID: %d.", id), sayi++;

    if((id = Meslek_Yakin(playerid)) != -1)
	    SunucuMesaji(playerid, "Yakýnýndaki Meslek ID: %d.", id); sayi++;

    if((id = Satici_Yakin(playerid)) != -1)
	    SunucuMesaji(playerid, "Yakýnýndaki Satýcý ID: %d.", id); sayi++;
	    
    if((id = Graffiti_Yakin(playerid)) != -1)
 		SunucuMesaji(playerid, "Yakýnýnýzdaki graffiti ID: %d.", id);
 		
    if((id = NPC_Yakin(playerid)) != -1)
 		SunucuMesaji(playerid, "Yakýnýnýzdaki NPC ID: %d.", id);

	if(!sayi) HataMesaji(playerid, "Yakýnýnda dinamik bir eþya bulunmuyor.");
	return 1;
}

CMD:gatelerim(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Giriþ yapmadan komut kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaris] != -1) return HataMesaji(playerid, "Yarýþtayken bunu yapamazsýn.");
	if(OyuncuBilgi[playerid][oKamyoncu] != -1) return HataMesaji(playerid, "Yük taþýrken bunu yapamazsýn.");
    if(OyuncuBilgi[playerid][oTemizlikCP] > 0) return HataMesaji(playerid, "Temizlik yaparken bunu yapamazsýn.");
    // if(OyuncuBilgi[playerid][oMateryalTasiyor] == true) return HataMesaji(playerid, "Paket taþýrken bunu yapamazsýn.");
	if(OyuncuBilgi[playerid][oMarker] > -1) return HataMesaji(playerid, "Konum araþtýrýrken bunu yapamazsýn.");
	if(OyuncuBilgi[playerid][oKonum] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oAdres] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][objeLokasyon] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oGPSArac] != INVALID_VEHICLE_ID) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oIsaretliKonum] != 0) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[playerid][oIsaretliMeslek] != -1) return HataMesaji(playerid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");

	new sayi = 0, bilgi[1024], gateparola[32];
	format(bilgi, sizeof(bilgi), "ID\tParola\n");
	for(new i = 0; i < MAKSIMUM_GATE; i ++) if(GateBilgi[i][gateKullanimda] == true && GateBilgi[i][gateSahip] == OyuncuBilgi[playerid][oID])
	{
		if(GateBilgi[i][gateParola] == 0) format(gateparola, sizeof(gateparola), "Yok");
		else format(gateparola, sizeof(gateparola), "%d", GateBilgi[i][gateParola]);
	    format(bilgi, sizeof(bilgi), "%s%d\t%s\n", bilgi, i, gateparola);
	    sayi++;
	}
	if(sayi == 0) return HataMesaji(playerid, "Üzerinize kayýtlý gate bulunmuyor.");
	DialogGoster(playerid, DIALOG_GATELERIM, DIALOG_STYLE_TABLIST_HEADERS, "Gate Seçim", bilgi, "Seç", "Kapat");
	return 1;
}

CMD:gise(playerid, params[])
{
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	new id = Gise_Yakin(playerid);
	if(id != -1)
	{
		if(OyuncuBilgi[playerid][oPara] < GiseBilgi[id][giseUcret]) return HataMesaji(playerid, "Giþe ücretini karþýlayamýyorsun.");
		Gise_Durum_Degistir(playerid, id);
		return true;
	}
	HataMesaji(playerid, "Yakýnýnda giþe yok!");
	return 1;
}

CMD:gateac(playerid, params[])
{
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	new id = Gate_Yakin(playerid);
	if(id != -1)
	{
		if(OyuncuBilgi[playerid][oBirlikSQLID] != GateBilgi[id][gateBirlik] && GateBilgi[id][gateSahip] != OyuncuBilgi[playerid][oID]) {
		    if(GateBilgi[id][gateParola] == 0) return HataMesaji(playerid, "Bu kapýyý açamýyorsunuz.");
			DialogGoster(playerid, DIALOG_GATE_PAROLA, DIALOG_STYLE_INPUT, "Gate - Parola", "{FFFFFF}Lütfen aþaðýdaki kutuya gate parolasýný girin;", "Tamam", "Kapat");
		    return 1;
		}
		Gate_Durum_Degistir(id);
		return true;
	}
	HataMesaji(playerid, "Yakýnýnda gate yok!");
	return 1;
}

CMD:elegecir(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Birlik üyesi deðilsin.");
	if(Point_Yakin(playerid) == -1) return HataMesaji(playerid, "Yakýnýnda bir point yok.");
	if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) return HataMesaji(playerid, "Devlet kurumlarý bu sisteme dahil olamaz.");
	if(OyuncuBilgi[playerid][oEleGecirme] != -1) return HataMesaji(playerid, "Bir point ele geçirmeye çalýþýyorsun, tekrar bu komutu kullanamazsýn.");
	
	foreach(new i : Player) if(OyuncuBilgi[i][oEleGecirme] == Point_Yakin(playerid)) return HataMesaji(playerid, "Bu point baþkasý tarafýndan ele geçiriliyor, onu yaralamadan ele geçiremezsin.");

	OyuncuBilgi[playerid][oEleGecirme] = Point_Yakin(playerid);
	OyuncuBilgi[playerid][oEleGecirmeSure] = 900;
	SunucuMesaji(playerid, "Pointi ele geçirmeye baþladýn, 15 dakika boyunca yaralanmaman ve bölgeden uzaklaþmaman gerekiyor.");
	SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "vPoint: %s bölgesini %s birliði ele geçiriyor.", PointBilgi[Point_Yakin(playerid)][pointBolge], BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd]);
	return 1;
}

CMD:apoint(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5) return YetkinizYok(playerid);

    if(!strcmp(params, "olustur", true)) {
        if(GetPlayerVirtualWorld(playerid) > 0 || GetPlayerInterior(playerid) > 0) return HataMesaji(playerid, "Interior ve farklý sanal dünyalara point eklenemez.");
        new id = -1;
		id = Point_Olustur(playerid);
		if(id == -1) return HataMesaji(playerid, "Sunucu point limitine ulaþtýðý için yeni point yaratýlamýyor.");

		SunucuMesaji(playerid, "Point baþarýyla oluþturuldu. (ID: %d)", id);
		return 1;
    }

	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/apoint [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ISIMLER]:{FFFFFF} olustur, lokasyon, bolge, savas, sil");
		return true;
	}

	if((id < 0 || id >= MAKSIMUM_POINT) || !PointBilgi[id][pointKullanimda]) return HataMesaji(playerid, "Geçersiz garaj.");

    if(!strcmp(type, "lokasyon", true))
	{
	    if(GetPlayerVirtualWorld(playerid) > 0 || GetPlayerInterior(playerid) > 0) return HataMesaji(playerid, "Interior ve farklý sanal dünyalara point taþýnamaz.");
		GetPlayerPos(playerid, PointBilgi[id][pointPos][0], PointBilgi[id][pointPos][1], PointBilgi[id][pointPos][2]);

		Point_Yenile(id);
		Point_Kaydet(id);
		SunucuMesaji(playerid, "Point lokasyonu deðiþtirildi.");
		return 1;
	}
	else if(!strcmp(type, "bolge", true))
	{
		if(isnull(string)) return KullanimMesaji(playerid, "/apoint [id] [bolge] [bölge adý]");
		if(strlen(string) > 64) return HataMesaji(playerid, "Bölge adý en fazla 64 harf olabilir.");
		
		format(PointBilgi[id][pointBolge], 64, "%s", string);
		Point_Yenile(id), Point_Kaydet(id);
		SunucuMesaji(playerid, "Point bölge adý \"%s\" olarak düzenlendi.", string);
		return 1;
	}
	else if(!strcmp(type, "savas", true))
	{
	    switch(PointBilgi[id][pointSavas]) {
	        case true: {
				foreach(new i : Player) if(OyuncuBilgi[i][oEleGecirme] == id) return HataMesaji(playerid, "Bir oyuncu bu pointi ele geçirmeye çalýþýyor, þu anda savaþý bitiremezsin.");
				PointBilgi[id][pointSavas] = false, SunucuMesaji(playerid, "Point savaþ durumu bitirildi.");
			}
	        case false: {
				PointBilgi[id][pointSavas] = true;
				SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "admCMD: %s bölgesindeki savaþ durumu aktif edildi. (/elegecir)", PointBilgi[id][pointBolge]);
	        }
	    }
		return 1;
	}
	else if(!strcmp(type, "sil", true))
	{
	    foreach(new i : Player) if(OyuncuBilgi[i][oEleGecirme] == id) {
			OyuncuBilgi[i][oEleGecirme] = 0;
	        SunucuMesaji(i, "Ele geçirmeye çalýþtýðýn point %s tarafýndan silindi.", OyuncuBilgi[playerid][oAdminNick]);
	        break;
	    }
		Point_Sil(id);
		SunucuMesaji(playerid, "Point baþarýyla kaldýrýldý.");
		return 1;
	}
	HataMesaji(playerid, "Bu opsiyon geçersiz. (%s)", params);
	return 1;
}

CMD:garaj(playerid, params[])
{
	if(Garaj_Yakin(playerid) == -1) return HataMesaji(playerid, "Bir garaja yakýn deðilsin.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	
	new bilgi[256], id = Garaj_Yakin(playerid), sayi = 0;
	if(IsPlayerInAnyVehicle(playerid) && Arac_SahipKontrol(playerid, Arac_IDBul(GetPlayerVehicleID(playerid))) && GarajBilgi[id][garajDurum] != 2) strcat(bilgi, "Aracý Garaja Koy\n"), sayi++;
	if(!IsPlayerInAnyVehicle(playerid)) {
		if(GarajBilgi[id][garajDurum] != 2) strcat(bilgi, "Araçlarým\n"), sayi++;
		if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && OyuncuBilgi[playerid][oIsbasi] == true && OyuncuBilgi[playerid][oBirlikRutbe] >= 7 || OyuncuBilgi[playerid][oAdmin] >= 3 && OyuncuBilgi[playerid][oAdminDurum] == true) strcat(bilgi, "Araç Çýkart\n"), sayi++;
	}
	if(GarajBilgi[id][garajSahip] > 0 && GarajBilgi[id][garajSahip] == OyuncuBilgi[playerid][oID]) {
	    if(GarajBilgi[id][garajDurum] != 2) strcat(bilgi, "Garajdaki Araçlar\n");
	    //if(GarajBilgi[id][garajDurum] != 2) strcat(bilgi, "Ücret Deðiþtir\n");
		switch(GarajBilgi[id][garajDurum]) {
		    case 1: format(bilgi, sizeof(bilgi), "%sKilitle", bilgi), sayi++;
		    case 2: format(bilgi, sizeof(bilgi), "%sKilidi Aç", bilgi), sayi++;
		    default: format(bilgi, sizeof(bilgi), "%sKilitle", bilgi), sayi++;
		}
	}
	if(!sayi) return HataMesaji(playerid, "Bu garajda kullanýlabilir bir seçenek yok.");
	DialogGoster(playerid, DIALOG_GARAJ, DIALOG_STYLE_TABLIST, "Garaj", bilgi, "Seç", "Kapat");
	return 1;
}

CMD:agaraj(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5) return YetkinizYok(playerid);
	
	
    if(!strcmp(params, "olustur", true)) {
        new id = -1;
		id = Garaj_Ekle(playerid);
		if(id == -1) return HataMesaji(playerid, "Sunucu garaj limitine ulaþtýðý için yeni garaj yaratýlamýyor.");

		SunucuMesaji(playerid, "Garaj baþarýyla oluþturuldu. (ID: %d)", id);
		return 1;
    }
    
	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/agaraj [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ISIMLER]:{FFFFFF} olustur, lokasyon, cikis, limit, durum, sahip, ucret, sil");
		return true;
	}

	if((id < 0 || id >= MAKSIMUM_GARAJ) || !GarajBilgi[id][garajKullanimda]) return HataMesaji(playerid, "Geçersiz garaj.");

    if(!strcmp(type, "lokasyon", true))
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		GarajBilgi[id][garajPos][0] = x;
		GarajBilgi[id][garajPos][1] = y;
		GarajBilgi[id][garajPos][2] = z;
		Garaj_Yenile(id);
		Garaj_Kaydet(id);
		SunucuMesaji(playerid, "Garajýn lokasyonu deðiþtirildi.");
		return 1;
	}
	else if(!strcmp(type, "cikis", true))
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		GarajBilgi[id][garajPos][3] = x;
		GarajBilgi[id][garajPos][4] = y;
		GarajBilgi[id][garajPos][5] = z;
		
		Garaj_Kaydet(id);
		SunucuMesaji(playerid, "Garajýn çýkýþ lokasyonu deðiþtirildi.");
		return 1;
	}
	else if(!strcmp(type, "limit", true))
	{
	    new limit;
		if(sscanf(string, "d", limit)) return KullanimMesaji(playerid, "/agaraj [id] [limit] [yeni limit]");

        if(limit < 1 || limit > 300) return HataMesaji(playerid, "Limit geçersiz. (1-300)");

        GarajBilgi[id][garajLimit] = limit;
        Garaj_Yenile(id);
        Garaj_Kaydet(id);

		SunucuMesaji(playerid, "Garajýn yeni limiti %d olarak güncellendi.", limit);
		return 1;
	}
	else if(!strcmp(type, "ucret", true))
	{
	    if(GarajBilgi[id][garajSahip] != 0) return HataMesaji(playerid, "Bu garajýn bir sahibi yok.");
	    new ucret;
		if(sscanf(string, "d", ucret)) return KullanimMesaji(playerid, "/agaraj [id] [ucret] [yeni ücret]");

        if(ucret < 0 || ucret > 10000) return HataMesaji(playerid, "Girdiðiniz fiyat geçersiz. (0-10000)");

        GarajBilgi[id][garajUcret] = ucret;
        Garaj_Yenile(id);
        Garaj_Kaydet(id);

		SunucuMesaji(playerid, "Garajýn yeni giriþ ücreti %d olarak güncellendi.", ucret);
		return 1;
	}
	else if(!strcmp(type, "durum", true))
	{
		new durum;
		if(sscanf(string, "d", durum)) return KullanimMesaji(playerid, "/agaraj [id] [durum] [yeni durum]");
		if(durum < 1 || durum > 2) return HataMesaji(playerid, "Geçersiz durum.");

       	GarajBilgi[id][garajDurum] = durum;
       	Garaj_Yenile(id);
		Garaj_Kaydet(id);
		new garajdurum[32];
		switch(GarajBilgi[id][garajDurum]) {
		    case 1: format(garajdurum, sizeof(garajdurum), "{33AA33}Kilitsiz");
			case 2: format(garajdurum, sizeof(garajdurum), "{B70000}Kilitli");
			default: format(garajdurum, sizeof(garajdurum), "{33AA33}Kilitsiz");
		}
		SunucuMesaji(playerid, "Garaj durumu %s {FFFFFF}olarak deðiþtirildi. (ID: %d)", garajdurum, id);
		return 1;
	}
	else if(!strcmp(type, "sahip", true))
	{
		new sahip;
		if(sscanf(string, "d", sahip)) return KullanimMesaji(playerid, "/agaraj [id] [sahip] [oyuncu ID] (silmek için -1)");

		if(sahip == -1) {
        	GarajBilgi[id][garajSahip] = 0;
        	GarajBilgi[id][garajSahipIsim][0] = 0;
        	Garaj_Yenile(id);
			Garaj_Kaydet(id);
			SunucuMesaji(playerid, "Garaj sahibini \"Devlet\" olarak deðiþtirdin. (ID: %d)", id);
			return 1;
		}
		else {
		    if(!IsPlayerConnected(sahip)) return HataMesaji(playerid, "Geçersiz oyuncu.");
		    if(OyuncuBilgi[sahip][oGiris] == false) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ.");
		    
		    GarajBilgi[id][garajUcret] = 0;
		    GarajBilgi[id][garajSahipIsim][0] = 0;
        	GarajBilgi[id][garajSahip] = OyuncuBilgi[sahip][oID];
        	Garaj_Yenile(id);
			Garaj_Kaydet(id);
			new isim[MAX_PLAYER_NAME];
			GetPlayerName(sahip, isim, sizeof(isim));
			for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
			SunucuMesaji(playerid, "Garaj sahibini \"%s\" olarak deðiþtirdin. (ID: %d)", isim, id);
			return 1;
		}
	}
	else if(!strcmp(type, "sil", true))
	{
		Garaj_Sil(id);
		SunucuMesaji(playerid, "Garaj silindi.");
		return 1;
	}
	HataMesaji(playerid, "Bu opsiyon geçersiz. (%s)", params);
	return 1;
}

CMD:aobje(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 6) return YetkinizYok(playerid);
    
    if(!strcmp(params, "olustur", true)) {
        new id = -1;
		id = Obje_Yarat(playerid, 1536);
		if(id == -1) return HataMesaji(playerid, "Sunucu obje limitine ulaþtýðý için yeni obje yaratamazsýn.");

		SunucuMesaji(playerid, "Obje %d baþarýyla oluþturuldu.", id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir obje oluþturdu. (%d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], ObjeBilgi[id][objeID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_obje.txt", "%s", log_icerik);
		return 1;
    }
	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/aobje [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ISIMLER]:{FFFFFF} olustur, lokasyon, sahip, birlik, pos, model, sil");
		return true;
	}

	if((id < 0 || id >= MAKSIMUM_OBJE) || !ObjeBilgi[id][objeKullanimda]) return HataMesaji(playerid, "Geçersiz obje!");

    if(!strcmp(type, "lokasyon", true))
	{
		static Float:x, Float:y, Float:z, Float:angle;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);
		x += 3.0 * floatsin(-angle, degrees);
		y += 3.0 * floatcos(-angle, degrees);

		ObjeBilgi[id][objePos][0] = x;
		ObjeBilgi[id][objePos][1] = y;
		ObjeBilgi[id][objePos][2] = z;
		ObjeBilgi[id][objePos][3] = 0.0;
		ObjeBilgi[id][objePos][4] = 0.0;
		ObjeBilgi[id][objePos][5] = angle;

		SetDynamicObjectPos(ObjeBilgi[id][objeYarat], x, y, z);
		SetDynamicObjectRot(ObjeBilgi[id][objeYarat], 0.0, 0.0, angle);

		Obje_Kaydet(id);
		SunucuMesaji(playerid, "Bir objenin lokasyonunu deðiþtirdin. (ID: %d)", id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir objenin lokasyonunu deðiþtirdi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], ObjeBilgi[id][objeID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_obje.txt", "%s", log_icerik);
		return 1;
	}
	else if(!strcmp(type, "model", true))
	{
	    static model;
		if(sscanf(string, "d", model))
		    return KullanimMesaji(playerid, "/objeduzenle [id] [model] [obje id]");

        ObjeBilgi[id][objeModel] = model;
		DestroyDynamicObject(ObjeBilgi[id][objeYarat]);
		ObjeBilgi[id][objeYarat] = CreateDynamicObject(ObjeBilgi[id][objeModel], ObjeBilgi[id][objePos][0], ObjeBilgi[id][objePos][1], ObjeBilgi[id][objePos][2], ObjeBilgi[id][objePos][3], ObjeBilgi[id][objePos][4], ObjeBilgi[id][objePos][5], ObjeBilgi[id][objeWorld], ObjeBilgi[id][objeInterior]);

		Obje_Kaydet(id);
		SunucuMesaji(playerid, "Bir objenin modelini deðiþtirdin. (ID: %d | Model: %d)", id, model);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir objenin modelini deðiþtirdi. (ID: %d | Model: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], ObjeBilgi[id][objeID], model);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_obje.txt", "%s", log_icerik);
		return 1;
	}
	else if(!strcmp(type, "sahip", true))
	{
		new sahip;
		if(sscanf(string, "d", sahip)) return KullanimMesaji(playerid, "/objeduzenle [id] [sahip] [oyuncu ID] (silmek için -1)");

		if(sahip == -1) {
        	ObjeBilgi[id][objeSahip] = 0;
			Obje_Kaydet(id);
			SunucuMesaji(playerid, "Bir objenin sahibini sildin. (OBJE ID: %d)", id);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir objenin sahibini sildi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], ObjeBilgi[id][objeID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/admin_obje.txt", "%s", log_icerik);
			return 1;
		}
		else {
 			if(!IsPlayerConnected(sahip)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
			if(BakiyeKontrol(sahip) < 5) return HataMesaji(playerid, "Oyuncunun yeterli bakiyesi bulunmuyor.");
			BakiyeKes(sahip, 5);
			ObjeBilgi[id][objeSahip] = OyuncuBilgi[sahip][oID];
			Obje_Kaydet(id);
			OyuncuKaydet(sahip);
			SunucuMesaji(sahip, "%s adlý yetkili 5TL market bakiyesi karþýlýðýnda sana bir obje verdi.", OyuncuBilgi[playerid][oAdminNick]);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s, %s adlý kiþiye bir obje verdi. (OBJE ID: %d)", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(sahip), id);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(sahip, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiye bir obje verdi. (SQLID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[sahip][oID], ObjeBilgi[id][objeID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/admin_obje.txt", "%s", log_icerik);
			return 1;
		}
	}
    else if(!strcmp(type, "pos", true))
	{
	   	EditDynamicObject(playerid, ObjeBilgi[id][objeYarat]);
		OyuncuBilgi[playerid][oEditlenenObje] = id;

		SunucuMesaji(playerid, "Girilen objenin (%d) pozisyonunu ayarlýyorsunuz.", id);
		return 1;
	}
	else if(!strcmp(type, "birlik", true))
	{
	    static birlikid = -1;

		if(sscanf(string, "d", birlikid))
		    return KullanimMesaji(playerid, "/objeduzenle [id] [birlik] [birlik id] (silmek için -1)");

        if((birlikid < -1 || birlikid >= MAKSIMUM_BIRLIK) || (birlikid != -1 && !BirlikBilgi[birlikid][birlikKullanimda]))
	    	return HataMesaji(playerid, "Geçersiz birlik.");

        ObjeBilgi[id][objeBirlik] = (birlikid == -1) ? (-1) : (BirlikBilgi[birlikid][birlikID]);
		Obje_Kaydet(id);

		if(birlikid == -1)	SunucuMesaji(playerid, "Bir objenin birliðini sildin. (ID: %d)", id);
		else SunucuMesaji(playerid, "Bir objenin birliðini deðiþtirdin. (ID: %d | Birlik: %s)", id, BirlikBilgi[birlikid][birlikAd]);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s adlý birliðe bir obje verdi. (SQLID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BirlikBilgi[birlikid][birlikAd], ObjeBilgi[id][objeID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_obje.txt", "%s", log_icerik);
		return 1;
	}
	else if(!strcmp(type, "sil", true)) {
	    new mesaj[144];
	    SetPVarInt(playerid, "SilmeOnay", id);
	    format(mesaj, sizeof(mesaj), "%d ID'li objeyi silmek üzeresin, onaylýyor musun?", id) ;
	    DialogGoster(playerid, DIALOG_OBJESIL_ONAY, DIALOG_STYLE_MSGBOX, "Obje Sil", mesaj, "Evet", "Hayýr");
	}
	return 1;
}

CMD:agise(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5) return YetkinizYok(playerid);
    
    if(!strcmp(params, "olustur", true)) {
		new id = -1;
		id = Gise_Yarat(playerid);
		if(id == -1) return HataMesaji(playerid, "Sunucu giþe limitine ulaþtýðý için yeni giþe yaratamazsýn.");

		SunucuMesaji(playerid, "Giþe %d baþarýyla oluþturuldu.", id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir giþe oluþturdu. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], GiseBilgi[id][giseID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/gise.txt", "%s", log_icerik);
		return 1;
    }
	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/agise [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ISIMLER]:{FFFFFF} olustur, lokasyon, hiz, menzil, pos, acilis, model, ucret, sil");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_GISE) || !GiseBilgi[id][giseKullanimda])
	    return HataMesaji(playerid, "Geçersiz giþe!");

    if(!strcmp(type, "lokasyon", true))
	{
		new Float:x, Float:y, Float:z, Float:angle;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 3.0 * floatsin(-angle, degrees);
		y += 3.0 * floatcos(-angle, degrees);

		GiseBilgi[id][gisePos][0] = x;
		GiseBilgi[id][gisePos][1] = y;
		GiseBilgi[id][gisePos][2] = z;
		GiseBilgi[id][gisePos][3] = 0.0;
		GiseBilgi[id][gisePos][4] = 0.0;
		GiseBilgi[id][gisePos][5] = angle;
		SetDynamicObjectPos(GiseBilgi[id][giseObje], x, y, z);
		SetDynamicObjectRot(GiseBilgi[id][giseObje], 0.0, 0.0, angle);
		GiseBilgi[id][giseDurum] = 0;
		if(IsValidDynamicObject(GiseBilgi[id][giseObje])) DestroyDynamicObject(GiseBilgi[id][giseObje]), GiseBilgi[id][giseObje] = INVALID_OBJECT_ID;
		GiseBilgi[id][giseObje] = CreateDynamicObject(GiseBilgi[id][giseModel], GiseBilgi[id][gisePos][0], GiseBilgi[id][gisePos][1], GiseBilgi[id][gisePos][2], GiseBilgi[id][gisePos][3], GiseBilgi[id][gisePos][4], GiseBilgi[id][gisePos][5], 0, 0);
		Gise_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir giþenin lokasyonunu deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir giþenin lokasyonunu deðiþtirdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/gise.txt", "%s", log_icerik);
		return 1;
	}
	else if(!strcmp(type, "hiz", true))
	{
	    new Float:hiz;
		if(sscanf(string, "f", hiz)) return KullanimMesaji(playerid, "/agise [id] [hiz] [açýlýþ hýzý]");
		if(hiz < 0.0 || hiz > 20.0) return HataMesaji(playerid, "Girilen hýz sýfýrýn altýnda, yirminin üstünde olamaz!");

        GiseBilgi[id][giseHiz] = hiz;

		Gise_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir giþenin hýzýný deðiþtirdi. (ID: %d | Hýz: %.1f)", OyuncuBilgi[playerid][oAdminNick], id, hiz);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir giþenin hýzýný deðiþtirdi. (ID: %d | Hýz: %.1f)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], id, hiz);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/gise.txt", "%s", log_icerik);
		return 1;
	}
	else if(!strcmp(type, "ucret", true))
	{
	    new ucret;
		if(sscanf(string, "d", ucret)) return KullanimMesaji(playerid, "/agise [id] [ucret] [yeni ücret]");
		if(ucret < 0 || ucret > 100) return HataMesaji(playerid, "Girilen ücret en az 0, en fazla 100 olmalýdýr.");

        GiseBilgi[id][giseUcret] = ucret;

		Gise_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir giþenin ücretini deðiþtirdi. (ID: %d | Ücret: %d)", OyuncuBilgi[playerid][oAdminNick], id, ucret);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir giþenin menzilini deðiþtirdi. (ID: %d | Ücret: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], id, ucret);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/gise.txt", "%s", log_icerik);
		return 1;
	}
	else if(!strcmp(type, "menzil", true))
	{
	    new Float:menzil;
		if(sscanf(string, "f", menzil)) return KullanimMesaji(playerid, "/agise [id] [menzil] [açýlýþ menzili]");
		if(menzil < 0.0 || menzil > 20.0) return HataMesaji(playerid, "Girilen menzil en az 0, en fazla 20 olmalýdýr.");

        GiseBilgi[id][giseMenzil] = menzil;

		Gise_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir giþenin menzilini deðiþtirdi. (ID: %d | Menzil: %.1f)", OyuncuBilgi[playerid][oAdminNick], id, menzil);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir giþenin menzilini deðiþtirdi. (ID: %d | Menzil: %.1f)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], id, menzil);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/gise.txt", "%s", log_icerik);
		return 1;
	}
	else if(!strcmp(type, "model", true))
	{
	    new model;
		if(sscanf(string, "d", model)) return KullanimMesaji(playerid, "/agise [id] [model] [gise modeli]");

        GiseBilgi[id][giseModel] = model;
		if(IsValidDynamicObject(GiseBilgi[id][giseObje])) DestroyDynamicObject(GiseBilgi[id][giseObje]), GiseBilgi[id][giseObje] = INVALID_OBJECT_ID;
		GiseBilgi[id][giseObje] = CreateDynamicObject(GiseBilgi[id][giseModel], GiseBilgi[id][gisePos][0], GiseBilgi[id][gisePos][1], GiseBilgi[id][gisePos][2], GiseBilgi[id][gisePos][3], GiseBilgi[id][gisePos][4], GiseBilgi[id][gisePos][5], 0, 0);

		Gise_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir giþenin modelini deðiþtirdi. (ID: %d | OBJ: %d)", OyuncuBilgi[playerid][oAdminNick], id, model);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir giþenin modelini deðiþtirdi. (ID: %d | OBJ: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], id, model);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/gise.txt", "%s", log_icerik);
		return 1;
	}
    else if(!strcmp(type, "pos", true))
	{
	   	EditDynamicObject(playerid, GiseBilgi[id][giseObje]);
		OyuncuBilgi[playerid][oEditlenenGise] = id;
		OyuncuBilgi[playerid][oDuzenlemeTipi] = 1;

		SunucuMesaji(playerid, "Girilen giþenin (%d) kapalý pozisyonunu ayarlýyorsunuz.", id);
		return 1;
	}
	else if(!strcmp(type, "acilis", true))
	{
	   	EditDynamicObject(playerid, GiseBilgi[id][giseObje]);
		OyuncuBilgi[playerid][oEditlenenGise] = id;
		OyuncuBilgi[playerid][oDuzenlemeTipi] = 2;

		SunucuMesaji(playerid, "Girilen giþenin (%d) açýk pozisyonunu ayarlýyorsunuz.", id);
		return 1;
	}
	else if(!strcmp(type, "sil", true)) {
		Gise_Sil(id);
		SunucuMesaji(playerid, "Giþe %d silindi.", id);
	}
	return 1;
}

CMD:agate(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 6) return YetkinizYok(playerid);
    
    if(!strcmp(params, "olustur", true)) {
		new id = -1;
		id = Gate_Yarat(playerid);
		if(id == -1) return HataMesaji(playerid, "Sunucu gate limitine ulaþtýðý için yeni gate yaratamazsýn.");

		SunucuMesaji(playerid, "Gate %d baþarýyla oluþturuldu.", id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir gate oluþturdu. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], GateBilgi[id][gateID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/gate.txt", "%s", log_icerik);
		return 1;
    }
	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/agate [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ISIMLER]:{FFFFFF} olustur, lokasyon, hiz, menzil, sahip, birlik, pos, acilis, model, int, vw, sil");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_GATE) || !GateBilgi[id][gateKullanimda])
	    return HataMesaji(playerid, "Geçersiz gate!");

    if(!strcmp(type, "lokasyon", true))
	{
		new Float:x, Float:y, Float:z, Float:angle;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 3.0 * floatsin(-angle, degrees);
		y += 3.0 * floatcos(-angle, degrees);

		GateBilgi[id][gatePos][0] = x;
		GateBilgi[id][gatePos][1] = y;
		GateBilgi[id][gatePos][2] = z;
		GateBilgi[id][gatePos][3] = 0.0;
		GateBilgi[id][gatePos][4] = 0.0;
		GateBilgi[id][gatePos][5] = angle;
		GateBilgi[id][gateInterior] = GetPlayerInterior(playerid);
		GateBilgi[id][gateWorld] = GetPlayerVirtualWorld(playerid);
		SetDynamicObjectPos(GateBilgi[id][gateObje], x, y, z);
		SetDynamicObjectRot(GateBilgi[id][gateObje], 0.0, 0.0, angle);
		GateBilgi[id][gateDurum] = false;
		if(IsValidDynamicObject(GateBilgi[id][gateObje])) DestroyDynamicObject(GateBilgi[id][gateObje]), GateBilgi[id][gateObje] = INVALID_OBJECT_ID;
		GateBilgi[id][gateObje] = CreateDynamicObject(GateBilgi[id][gateModel], GateBilgi[id][gatePos][0], GateBilgi[id][gatePos][1], GateBilgi[id][gatePos][2], GateBilgi[id][gatePos][3], GateBilgi[id][gatePos][4], GateBilgi[id][gatePos][5], GateBilgi[id][gateWorld], GateBilgi[id][gateInterior]);
		Gate_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir gatenin lokasyonunu deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir gatenin lokasyonunu deðiþtirdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/gate.txt", "%s", log_icerik);
		return 1;
	}
	else if(!strcmp(type, "hiz", true))
	{
	    new Float:hiz;
		if(sscanf(string, "f", hiz)) return KullanimMesaji(playerid, "/agate [id] [hiz] [açýlýþ hýzý]");
		if(hiz < 0.0 || hiz > 20.0) return HataMesaji(playerid, "Girilen hýz sýfýrýn altýnda, yirminin üstünde olamaz!");

        GateBilgi[id][gateHiz] = hiz;

		Gate_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir gatenin hýzýný deðiþtirdi. (ID: %d | Hýz: %.1f)", OyuncuBilgi[playerid][oAdminNick], id, hiz);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir gatenin hýzýný deðiþtirdi. (ID: %d | Hýz: %.1f)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], id, hiz);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/gate.txt", "%s", log_icerik);
		return 1;
	}
	else if(!strcmp(type, "vw", true))
	{
	    new vw;
		if(sscanf(string, "d", vw)) return KullanimMesaji(playerid, "/agate [id] [vw] [virtual world id]");
		if(vw < 0) return HataMesaji(playerid, "Girilen menzil en az 0, en fazla 20 olmalýdýr.");

        GateBilgi[id][gateWorld] = vw;
		if(IsValidDynamicObject(GateBilgi[id][gateObje])) DestroyDynamicObject(GateBilgi[id][gateObje]), GateBilgi[id][gateObje] = INVALID_OBJECT_ID;
		GateBilgi[id][gateObje] = CreateDynamicObject(GateBilgi[id][gateModel], GateBilgi[id][gatePos][0], GateBilgi[id][gatePos][1], GateBilgi[id][gatePos][2], GateBilgi[id][gatePos][3], GateBilgi[id][gatePos][4], GateBilgi[id][gatePos][5], GateBilgi[id][gateWorld], GateBilgi[id][gateInterior]);
		Gate_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir gatenin worldu deðiþtirdi. (ID: %d | VW: %d)", OyuncuBilgi[playerid][oAdminNick], id, vw);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir gatenin vwsini deðiþtirdi. (ID: %d | VW: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], id, vw);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/gate.txt", "%s", log_icerik);
		return 1;
	}
	else if(!strcmp(type, "int", true))
	{
	    new interior;
		if(sscanf(string, "d", interior)) return KullanimMesaji(playerid, "/agate [id] [int] [interior id]");
		if(interior < 0) return HataMesaji(playerid, "Girilen menzil en az 0, en fazla 20 olmalýdýr.");

        GateBilgi[id][gateInterior] = interior;
		if(IsValidDynamicObject(GateBilgi[id][gateObje])) DestroyDynamicObject(GateBilgi[id][gateObje]), GateBilgi[id][gateObje] = INVALID_OBJECT_ID;
		GateBilgi[id][gateObje] = CreateDynamicObject(GateBilgi[id][gateModel], GateBilgi[id][gatePos][0], GateBilgi[id][gatePos][1], GateBilgi[id][gatePos][2], GateBilgi[id][gatePos][3], GateBilgi[id][gatePos][4], GateBilgi[id][gatePos][5], GateBilgi[id][gateWorld], GateBilgi[id][gateInterior]);
		Gate_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir gatenin interiorunu deðiþtirdi. (ID: %d | Int: %d)", OyuncuBilgi[playerid][oAdminNick], id, interior);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir gatenin interiorunu deðiþtirdi. (ID: %d | Int: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], id, interior);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/gate.txt", "%s", log_icerik);
		return 1;
	}
	else if(!strcmp(type, "menzil", true))
	{
	    new Float:menzil;
		if(sscanf(string, "f", menzil)) return KullanimMesaji(playerid, "/agate [id] [menzil] [açýlýþ menzili]");
		if(menzil < 0.0 || menzil > 20.0) return HataMesaji(playerid, "Girilen menzil en az 0, en fazla 20 olmalýdýr.");

        GateBilgi[id][gateMenzil] = menzil;

		Gate_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir gatenin menzilini deðiþtirdi. (ID: %d | Menzil: %.1f)", OyuncuBilgi[playerid][oAdminNick], id, menzil);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir gatenin menzilini deðiþtirdi. (ID: %d | Menzil: %.1f)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], id, menzil);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/gate.txt", "%s", log_icerik);
		return 1;
	}
	else if(!strcmp(type, "model", true))
	{
	    new model;
		if(sscanf(string, "d", model)) return KullanimMesaji(playerid, "/agate [id] [model] [gate modeli]");

        GateBilgi[id][gateModel] = model;
		if(IsValidDynamicObject(GateBilgi[id][gateObje])) DestroyDynamicObject(GateBilgi[id][gateObje]), GateBilgi[id][gateObje] = INVALID_OBJECT_ID;
		GateBilgi[id][gateObje] = CreateDynamicObject(GateBilgi[id][gateModel], GateBilgi[id][gatePos][0], GateBilgi[id][gatePos][1], GateBilgi[id][gatePos][2], GateBilgi[id][gatePos][3], GateBilgi[id][gatePos][4], GateBilgi[id][gatePos][5], GateBilgi[id][gateWorld], GateBilgi[id][gateInterior]);

		Gate_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir gatenin modelini deðiþtirdi. (ID: %d | OBJ: %d)", OyuncuBilgi[playerid][oAdminNick], id, model);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir gatenin modelini deðiþtirdi. (ID: %d | OBJ: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], id, model);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/gate.txt", "%s", log_icerik);
		return 1;
	}
	else if(!strcmp(type, "sahip", true))
	{
		new sahip;
		if(sscanf(string, "d", sahip)) return KullanimMesaji(playerid, "/agate [id] [sahip] [ID / Oyuncu] (silmek için -1)");

		if(sahip == -1) {
        	GateBilgi[id][gateSahip] = 0;
			Gate_Kaydet(id);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir gatenin sahibini sildi. (GATE ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir gatenin sahibini sildi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], id);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/gate.txt", "%s", log_icerik);
			return 1;
		}
		else {
 			if(!IsPlayerConnected(sahip)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
 			if(playerid == sahip && OyuncuBilgi[playerid][oAdmin] < 7) return HataMesaji(playerid, "Kendine gate veremezsin.");

			GateBilgi[id][gateSahip] = OyuncuBilgi[sahip][oID];
			Gate_Kaydet(id);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili %s kiþisini gatenin sahibi olarak deðiþtirdi. (GATE ID: %d | SQL ID: %d)", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(sahip), id, OyuncuBilgi[sahip][oID]);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(sahip, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiyi gate sahibi yaptý. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[sahip][oID], id);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/gate.txt", "%s", log_icerik);
			return 1;
		}
	}
    else if(!strcmp(type, "pos", true))
	{
	   	EditDynamicObject(playerid, GateBilgi[id][gateObje]);
		OyuncuBilgi[playerid][oEditlenenGate] = id;
		OyuncuBilgi[playerid][oDuzenlemeTipi] = 1;

		SunucuMesaji(playerid, "Girilen gatenin (%d) kapalý pozisyonunu ayarlýyorsunuz.", id);
		return 1;
	}
	else if(!strcmp(type, "acilis", true))
	{
	   	EditDynamicObject(playerid, GateBilgi[id][gateObje]);
		OyuncuBilgi[playerid][oEditlenenGate] = id;
		OyuncuBilgi[playerid][oDuzenlemeTipi] = 2;

		SunucuMesaji(playerid, "Girilen gatenin (%d) açýk pozisyonunu ayarlýyorsunuz.", id);
		return 1;
	}
	else if(!strcmp(type, "birlik", true))
	{
	    new birlikid = -1;

		if(sscanf(string, "d", birlikid))
		    return KullanimMesaji(playerid, "/agate [id] [birlik] [birlik id] (silmek için -1)");

        if((birlikid < -1 || birlikid >= MAKSIMUM_BIRLIK) || (birlikid != -1 && !BirlikBilgi[birlikid][birlikKullanimda]))
	    	return HataMesaji(playerid, "Geçersiz birlik.");

        GateBilgi[id][gateBirlik] = (birlikid == -1) ? (-1) : (BirlikBilgi[birlikid][birlikID]);
		Gate_Kaydet(id);

		if(birlikid == -1) {
			YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir gatenin birliðini sildi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir gatenin birliðini sildi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], id);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/gate.txt", "%s", log_icerik);
		}
		else {
			YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir gatenin birliðini deðiþtirdi. (ID: %d | Birlik: %s)", OyuncuBilgi[playerid][oAdminNick], id, BirlikBilgi[birlikid][birlikAd]);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir gatenin birliðini %s olarak deðiþtirdi.. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BirlikBilgi[birlikid][birlikAd], id);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/gate.txt", "%s", log_icerik);
		}
		return 1;
	}
	else if(!strcmp(type, "sil", true)) {
		new mesaj[144];
	    SetPVarInt(playerid, "SilmeOnay", id);
	    format(mesaj, sizeof(mesaj), "%d ID'li gateyi silmek üzeresin, onaylýyor musun?", id) ;
	    DialogGoster(playerid, DIALOG_GATESIL_ONAY, DIALOG_STYLE_MSGBOX, "Gate Sil", mesaj, "Evet", "Hayýr");
	}
	return 1;
}

CMD:petlerim(playerid)
{
	new peticerik[500], sayi = 0;
	format(peticerik, sizeof(peticerik), "ID\tPet Adý\tDurum\n");
	foreach(new i: Petler) if(PetBilgi[i][petSahip] == OyuncuBilgi[playerid][oID])
	{
		format(peticerik, sizeof(peticerik), "%s%d\t%s\t%s\n", peticerik, i, PetBilgi[i][petAdi], (PetBilgi[i][petDurum] == false) ? ("{afafaf}Gizli") : ("{33aa33}Aktif"));
		sayi++;
	}
	if(sayi == 0) return HataMesaji(playerid, "Size ait bir pet bulamadýk, satýn almak için /oocmarket");
	DialogGoster(playerid, DIALOG_PETLERIM, DIALOG_STYLE_TABLIST_HEADERS, "Petleriniz", peticerik, "Deðiþtir", "Kapat");
	return 1;
}

CMD:pet(playerid)
{
    if(PetKontrol[playerid] != -1)
	{
	    new Float:pos[4], Float:can;
	    GetPlayerHealth(playerid, can);
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    GetPlayerFacingAngle(playerid, pos[3]);
	    FCNPC_SetPosition(PetBilgi[PetKontrol[playerid]][NPCID], pos[0], pos[1], pos[2]);
        FCNPC_SetAngle(PetBilgi[PetKontrol[playerid]][NPCID], pos[3]);
	    FCNPC_SetVirtualWorld(PetBilgi[PetKontrol[playerid]][NPCID], GetPlayerVirtualWorld(playerid));
	    FCNPC_SetInterior(PetBilgi[PetKontrol[playerid]][NPCID], GetPlayerInterior(playerid));
	    FCNPC_SetHealth(PetBilgi[PetKontrol[playerid]][NPCID], can);
	    FCNPC_SetInvulnerable(PetBilgi[PetKontrol[playerid]][NPCID], true);
	    
	    OyuncuBilgi[playerid][oPos][0] = EskiVeriler[playerid][eskiPos][0], OyuncuBilgi[playerid][oPos][1] = EskiVeriler[playerid][eskiPos][1], OyuncuBilgi[playerid][oPos][2] = EskiVeriler[playerid][eskiPos][2];
		OyuncuPosDegistir(playerid, EskiVeriler[playerid][eskiPos][0], EskiVeriler[playerid][eskiPos][1], EskiVeriler[playerid][eskiPos][2]);
		SetPlayerFacingAngle(playerid, EskiVeriler[playerid][eskiPos][3]);
		OyuncuBilgi[playerid][oVW] = EskiVeriler[playerid][eskiVW];
		OyuncuBilgi[playerid][oInterior] = EskiVeriler[playerid][eskiInt];
		SetPlayerVirtualWorld(playerid, EskiVeriler[playerid][eskiVW]);
		SetPlayerInterior(playerid, EskiVeriler[playerid][eskiInt]);
		DondurulmaEtkisi(playerid);
		SetCameraBehindPlayer(playerid);
		CanDuzenle(playerid, EskiVeriler[playerid][eskiCan]);
		ZirhDuzenle(playerid, EskiVeriler[playerid][eskiZirh]);
		SilahAyarla(playerid);
		switch(OyuncuBilgi[playerid][oGeciciKiyafet]) {
			case 0: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oKiyafet]);
			default: KiyafetDegistir(playerid, OyuncuBilgi[playerid][oGeciciKiyafet]);
		}
        PetKontrol[playerid] = -1;
	    return 1;
	}
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0 || OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0 || OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballda bu menüye ulaþamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araç içerisinde kullanýlamaz.");
	new id = PetYakin(playerid, 7.0);
	if(id == -1) return HataMesaji(playerid, "Yakýnýnýzda sahip olduðunuz pet yok.");
	PetDialog(playerid, id);
	return 1;
}

CMD:petolustur(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);
	
	new petsahip, petturu, petcinsiyet;
	if(sscanf(params, "uii", petsahip, petturu, petcinsiyet)) return KullanimMesaji(playerid, "/petolustur [Sahip] [Pet Türü 1-11] [Pet Cinsiyet 1- Erkek 2- Kadýn]");
	if(!IsPlayerConnected(petsahip)) return HataMesaji(playerid, "Geçersiz oyuncu belirledin.");
	if(petturu > 11) return HataMesaji(playerid, "Girdiðin pet türü geçersiz.");
	if(petcinsiyet > 2) return HataMesaji(playerid,"Cinsiyet 1 veya 2 olmalýdýr. 1- erkek 2- kadýn");
	
	new id = Pet_Olustur(OyuncuBilgi[petsahip][oID], petturu, petcinsiyet);
	if(id == -1) return HataMesaji(playerid,"Pet oluþturulamadý.");
	SunucuMesaji(playerid, "Yeni bir pet oluþturdunuz. (ID: %d)", id);
	return 1;
}

CMD:petsil(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);
    new id;
    if(sscanf(params, "i", id)) return KullanimMesaji(playerid, "/petsil [ID]");
    if(!Iter_Contains(Petler, id)) return HataMesaji(playerid, "Geçersiz ID girdiniz.");

    Pet_Sil(id);
    SunucuMesaji(playerid, "Pet baþarýyla silindi. (ID: %d)", id);
	return 1;
}

CMD:petgizle(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
    
    new id;
    if(sscanf(params, "i", id)) return KullanimMesaji(playerid, "/petgizle [ID]");
    if(!Iter_Contains(Petler, id)) return HataMesaji(playerid, "Geçersiz ID girdiniz.");
    if(PetBilgi[id][petDurum] == false) return HataMesaji(playerid, "Bu pet zaten gizlenmiþ.");
    PetBilgi[id][petSaglik] = FCNPC_GetHealth(PetBilgi[id][NPCID]);
   	FCNPC_Destroy(PetBilgi[id][NPCID]);
    PetBilgi[id][petTakip] = -1;
    PetBilgi[id][NPCID] = -1;
    PetBilgi[id][petDurum] = false;
    if(IsValidDynamic3DTextLabel(PetBilgi[id][petText])) DestroyDynamic3DTextLabel(PetBilgi[id][petText]), PetBilgi[id][petText] = Text3D:INVALID_3DTEXT_ID;
	return 1;
}

CMD:vmarket(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(vmarket_kullanim == false) return HataMesaji(playerid, "vMarket eriþimi þu an pasif.");

	new baslik[64], icerik[1024], ekleme[144];
	format(icerik, sizeof(icerik), "Ürün\t\tFiyat\n");
	
	format(ekleme, sizeof(ekleme), "Kilometre Sýfýrlama\t\t%sVP\n", NumaraFormati(VRP_KMSIFIRLA, ""));
	strcat(icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "Özel Telefon Numarasý\t\t%sVP\n", NumaraFormati(VRP_OZELNUMARA, ""));
	strcat(icerik, ekleme);

	format(ekleme, sizeof(ekleme), "Silah Hakký\t\t%sVP\n", NumaraFormati(VRP_SILAHHAKKI, ""));
	strcat(icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "Maske Kullanýmý\t\t%sVP\n", NumaraFormati(VRP_MASKEHAKKI, ""));
	strcat(icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "Bronz VIP - 15 Gün\t\t%sVP\n", NumaraFormati(VRP_BRONZVIP, ""));
	strcat(icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "Gümüþ VIP - 15 Gün\t\t%sVP\n", NumaraFormati(VRP_GUMUSVIP, ""));
	strcat(icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "Altýn VIP - 10 Gün\t\t%sVP\n", NumaraFormati(VRP_ALTINVIP, ""));
	strcat(icerik, ekleme);
	
	format(baslik, sizeof(baslik), "{FFFFFF}vMarket (Bakiye: {338833}%s{FFFFFF}VP)", NumaraFormati(OyuncuBilgi[playerid][oVPoint], ""));
	DialogGoster(playerid, DIALOG_VPMARKET, DIALOG_STYLE_TABLIST_HEADERS, baslik, icerik, "Seç", "Ýptal");
	return 1;
}

CMD:refmarket(playerid, params[])
{
    if(!IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Bu market kýsa süreliðine kapalýdýr.");
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	
	new baslik[64], icerik[1024], ekleme[144];
	format(icerik, sizeof(icerik), "Kazanç\t\tJeton\n");

	format(ekleme, sizeof(ekleme), "$2,000\t\t2\n");
	strcat(icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "$2,250 + 2 Oynama Saati\t\t3\n");
	strcat(icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "$2,500 + 4 Oynama Saati + Rifle\t\t4\n");
	strcat(icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "$3,000 + 6 Oynama Saati + MP5\t\t5\n");
	strcat(icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "$3,250 + 6 Oynama Saati + MP5 ve Shotgun\t\t6\n");
	strcat(icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "$3,500 + 7 Oynama Saati + Shotgun ve Ýsim Deðiþikliði\t\t7\n");
	strcat(icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "$3,750 + 8 Oynama Saati + Desert Eagle ve Zýrh\t\t8\n");
	strcat(icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "$4,000 + 9 Oynama Saati\t\t9\n");
	strcat(icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "$4,250 + 10 Oynama Saati + 1 Günlük 2x PayDay\t\t10\n");
	strcat(icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "$6,000 + 30 Günlük Bronz VIP\t\t15\n");
	strcat(icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "$7,500 + 30 Günlük Gümüþ VIP\t\t25\n");
	strcat(icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "$10,000 + 30 Günlük Altýn VIP\t\t30\n");
	strcat(icerik, ekleme);

	format(baslik, sizeof(baslik), "{FFFFFF}> Referans Market (Bakiye: {338833}%s{FFFFFF} Jeton)", NumaraFormati(OyuncuBilgi[playerid][oOneriJetonu], ""));
	DialogGoster(playerid, DIALOG_REFMARKET, DIALOG_STYLE_TABLIST_HEADERS, baslik, icerik, "Seç", "Ýptal");
	return 1;
}

CMD:oocmarket(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(oocmarket_kullanim == false) return HataMesaji(playerid, "OOC Market satýn alýmlarý Management tarafýndan durdurulmuþ.");

	new baslik[64], icerik[1024], ekleme[144];
	format(icerik, sizeof(icerik), "Ürün\t\tFiyat\nEnvanter\t\t\n");

	format(ekleme, sizeof(ekleme), "Ýsim Deðiþikliði\t\t%sTL\n", NumaraFormati(ISIM_DEGISTIRME_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Soyadý Kilitle\t\t%sTL\n", NumaraFormati(SOYADI_KILITLEME_UCRET, ""));
	strcat(icerik, ekleme);
	/*format(ekleme, sizeof(ekleme), "Karakter Sýfýrlama\t\t%sTL\n", NumaraFormati(KARAKTER_SIFIRLAMA_UCRET, ""));
	strcat(icerik, ekleme);*/
	format(ekleme, sizeof(ekleme), "Özel Telefon Numarasý\t\t%sTL\n", NumaraFormati(OZEL_NUMARA_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Ek Karakter Slotu\t\t%sTL\n", NumaraFormati(EK_SLOT_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Ek Ev Slotu\t\t%sTL\n", NumaraFormati(EK_EVSLOT_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Ek Araç Slotu\t\t%sTL\n", NumaraFormati(EK_ARACSLOT_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Maske Kullanýmý\t\t%sTL\n", NumaraFormati(MASKE_KULLANIM_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Kilometre Sýfýrlama\t\t%sTL\n", NumaraFormati(KMSIFIRLAMA_UCRET, ""));
	strcat(icerik, ekleme);
	/*format(ekleme, sizeof(ekleme), "2 Seviye Araç Zýrhý\t\t%sTL\n", NumaraFormati(IKISEVIYEZIRH_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Ev Vergi Muafiyeti\t\t%sTL\n", NumaraFormati(EVVERGIMUAFIYETI_UCRET, ""));
	strcat(icerik, ekleme);*/
	format(ekleme, sizeof(ekleme), "Son Seviye Ev\t\t%sTL\n", NumaraFormati(EVSONLEVEL_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "2x Payday (1 Gün)\t\t%sTL\n", NumaraFormati(IKIXPAYDAY_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Uyuþturucu Boost (1 gün)\t\t%sTL\n", NumaraFormati(UYUSTURUCUBOOST_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Özel Pet\t\t%sTL\n", NumaraFormati(PET_UCRET, ""));
	strcat(icerik, ekleme);

	format(ekleme, sizeof(ekleme), "Bronz VIP - 30 gün\t\t%sTL\n", NumaraFormati(BRONZ_VIP_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Gümüþ VIP - 30 gün\t\t%sTL\n", NumaraFormati(GUMUS_VIP_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Altýn VIP - 30 gün\t\t%sTL\n", NumaraFormati(ALTIN_VIP_UCRET, ""));
	strcat(icerik, ekleme);

	format(ekleme, sizeof(ekleme), "Birlik Konsept Deðiþikliði\t\t%sTL\n", NumaraFormati(BIRLIKKONSEPT_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Gate\t\t%sTL\n", NumaraFormati(MARKETGATE_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Özel Skin\t\t%sTL\n", NumaraFormati(OZELSKIN_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Özel Mekan\t\tDeðiþken\n");
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Özel Obje\t\t%sTL\n", NumaraFormati(OZELOBJE_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Ýþyeri Tür Deðiþtirme\t\t%sTL\n", NumaraFormati(OZELOBJE_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Özel Interior\t\t%sTL\n", NumaraFormati(OZELINT_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Özel Garaj\t\t%sTL\n", NumaraFormati(OZELGARAJ_UCRET, ""));
	strcat(icerik, ekleme);
	format(ekleme, sizeof(ekleme), "Baðýþ\t\tn/a\n");
	strcat(icerik, ekleme);

	//strcat(icerik, "Bakiye Transferi\t\tÝþlem ücreti: 1TL\nBaðýþ\n");
	format(baslik, sizeof(baslik), "{FFFFFF}> OOC Market (Bakiye: {338833}%s{FFFFFF}TL)", NumaraFormati(BakiyeKontrol(playerid), ""));
	DialogGoster(playerid, DIALOG_OOCMARKET, DIALOG_STYLE_TABLIST_HEADERS, baslik, icerik, "Seç", "Ýptal");
	return 1;
}

CMD:soyadiizin(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

	new sorgu[256];
	format(sorgu, sizeof(sorgu), "SELECT * FROM `soyadikilitleri` WHERE `Kilitleyen` = '%d'", OyuncuBilgi[playerid][oHesap]);
	mysql_tquery(mysqlB, sorgu, "Soyadi_Liste", "d", playerid);
	return 1;
}

CMD:satinal(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

	new id;
	if((id = Ev_Yakin(playerid)) != -1) {
		if(EvBilgi[id][evSahip] == 0) {
		    if(Ev_Sayi(playerid) >= OYUNCU_EV_LIMIT + OyuncuBilgi[playerid][oEkEvSlot]) return HataMesaji(playerid, "Daha fazla ev almak için ek slot satýn almalýsýn.");
			if(OyuncuBilgi[playerid][oPara] < EvBilgi[id][evFiyat]) return HataMesaji(playerid, "Bu evi almak için yeterli paran yok!");

			ParaEkle(playerid, -EvBilgi[id][evFiyat]);
			EvBilgi[id][evSahip] = OyuncuBilgi[playerid][oID];
			EvBilgi[id][evSahipIsim][0] = 0;
			OyuncuKaydet(playerid);
			Ev_Yenile(id);
			Ev_Kaydet(id);
			UyariMesaji(playerid, "%s adresli evi %s fiyatýna satýn aldýn.", EvBilgi[id][evAdres], NumaraFormati(EvBilgi[id][evFiyat]));
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir ev satýn aldý. (SQL: %d)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], EvBilgi[id][evID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/ev.txt", "%s", log_icerik);
		}
		else if(EvBilgi[id][evSatilik] > 0) {
		    if(Ev_Sayi(playerid) >= OYUNCU_EV_LIMIT + OyuncuBilgi[playerid][oEkEvSlot]) return HataMesaji(playerid, "Daha fazla ev almak için ek slot satýn almalýsýn.");
		    if(OyuncuBilgi[playerid][oID] == EvBilgi[id][evSahip]) return HataMesaji(playerid, "Sahip olduðun evi satýn alamazsýn.");
			if(OyuncuBilgi[playerid][oPara] < EvBilgi[id][evSatilik]) return HataMesaji(playerid, "Bu evi almak için yeterli paran yok!");
			new bool:teslim = false, sahip = EvBilgi[id][evSahip];
			ParaEkle(playerid, -EvBilgi[id][evSatilik]);
			new vergilifiyat = 3 * EvBilgi[id][evSatilik] / 100;
			foreach(new i : Player) if(IsPlayerConnected(i) && OyuncuBilgi[i][oID] == sahip) {
				SunucuMesaji(i, "Satýlýða çýkardýðýnýz %d ID'li eviniz %s fiyatýna satýldý. %s3 vergi kesildi.", id, NumaraFormati(EvBilgi[id][evSatilik]), "%%");
				OyuncuBilgi[i][oBankaPara] += EvBilgi[id][evSatilik] - vergilifiyat;
				teslim = true;
				break;
			}
			if(teslim == false) {
		        new sorgu[256];
	   			format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE ID = '%d'", sahip);
				mysql_tquery(mysqlB, sorgu, "EvSatildi", "ddd", sahip, id, EvBilgi[id][evSatilik]);
			}
			EvBilgi[id][evSahip] = OyuncuBilgi[playerid][oID];
			EvBilgi[id][evSahipIsim][0] = 0;
			OyuncuKaydet(playerid);
			UyariMesaji(playerid, "%s adresli evi %s fiyatýna satýn aldýn.", EvBilgi[id][evAdres], NumaraFormati(EvBilgi[id][evSatilik]));
			EvBilgi[id][evSatilik] = 0;
			Ev_Yenile(id);
			Ev_Kaydet(id);
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir ev satýn aldý. (SQL: %d - ALINAN: %d)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], EvBilgi[id][evID], sahip);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/ev.txt", "%s", log_icerik);
		}
		else return HataMesaji(playerid, "Bu ev satýlýk deðil.");
		return 1;
	}
	else if((id = Isyeri_Yakin(playerid)) != -1) {
		if(IsyeriBilgi[id][isyeriSahip] > 0 || IsyeriBilgi[id][isyeriSahip] == -1) return HataMesaji(playerid, "Bu iþyeri satýlýk deðil.");
		if(OyuncuBilgi[playerid][oPara] < IsyeriBilgi[id][isyeriFiyat]) return HataMesaji(playerid, "Bu iþyerini almak için yeterli paran yok!");

		ParaEkle(playerid, -IsyeriBilgi[id][isyeriFiyat]);
		IsyeriBilgi[id][isyeriSahip] = OyuncuBilgi[playerid][oID];
		IsyeriBilgi[id][isyeriSahipIsim][0] = 0;
		IsyeriBilgi[id][isyeriDurum] = 1;
		OyuncuKaydet(playerid);
		Isyeri_Yenile(id);
		Isyeri_Kaydet(id);
		UyariMesaji(playerid, "%s adlý %s türüne sahip iþyerini %s fiyatýna satýn aldýn.", IsyeriBilgi[id][isyeriAd], Isyeri_TurAdi(id), NumaraFormati(IsyeriBilgi[id][isyeriFiyat]));
		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir iþyeri satýn aldý. (SQL: %d)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], IsyeriBilgi[id][isyeriID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/isyeri.txt", "%s", log_icerik);
		return 1;
	}
	else if((id = Oyuncu_Isyerinde(playerid)) != -1) {
	    if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici olarak iþbaþýndayken bu komutu kullanamazsýn.");
        if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return HataMesaji(playerid, "Bu iþyerinde ürün yok.");
		switch(IsyeriBilgi[id][isyeriTur]) {
		    case 1, 9: DialogGoster(playerid, DIALOG_SATINAL, DIALOG_STYLE_TABLIST, "Satýn Al", "Ürünler\nAksesuarlar", "Seç", "Kapat");
		    case 2: DialogGoster(playerid, DIALOG_SATINAL, DIALOG_STYLE_TABLIST, "Satýn Al", "Ürünler\nAksesuarlar", "Seç", "Kapat");
		    case 3: DialogGoster(playerid, DIALOG_SATINAL, DIALOG_STYLE_TABLIST, "Satýn Al", "Ürünler\nAksesuarlar", "Seç", "Kapat");
		    case 4: {
		        //if(OyuncuBilgi[playerid][oEhliyet] == false) return HataMesaji(playerid, "Ehliyetin olmadan bu galeriden araç satýn alamazsýn.");
		        
		        new araclar[MOTORGALERISI_ARACSAYISI], sayi = 0;
				for(new c = 0; c != sizeof(SatilikAraclar); c++) if(SatilikAraclar[c][2] == 1) araclar[sayi] = SatilikAraclar[c][0], sayi++;
				ShowModelSelectionMenuEx(playerid, araclar, sizeof(araclar), IsyeriBilgi[id][isyeriAd], MODELLER_GROTTI, 0.0, 0.0, 40.0);
			}
 		    case 11: {
                //if(OyuncuBilgi[playerid][oEhliyet] == false) return HataMesaji(playerid, "Ehliyetin olmadan bu galeriden araç satýn alamazsýn.");

		        new araclar[DUSUKGALERI_ARACSAYISI], sayi = 0;
				for(new c = 0; c != sizeof(SatilikAraclar); c++) if(SatilikAraclar[c][2] == 2) araclar[sayi] = SatilikAraclar[c][0], sayi++;
				ShowModelSelectionMenuEx(playerid, araclar, sizeof(araclar), IsyeriBilgi[id][isyeriAd], MODELLER_GROTTI, 0.0, 0.0, 40.0);
			}
 		    case 12: {
 		        //if(OyuncuBilgi[playerid][oEhliyet] == false) return HataMesaji(playerid, "Ehliyetin olmadan bu galeriden araç satýn alamazsýn.");

		        new araclar[LUKSGALERI_ARACSAYISI], sayi = 0;
				for(new c = 0; c != sizeof(SatilikAraclar); c++) if(SatilikAraclar[c][2] == 3) araclar[sayi] = SatilikAraclar[c][0], sayi++;
				ShowModelSelectionMenuEx(playerid, araclar, sizeof(araclar), IsyeriBilgi[id][isyeriAd], MODELLER_GROTTI, 0.0, 0.0, 40.0);
			}
 		    case 13: {
		        new araclar[UCAKGALERISI_ARACSAYISI], sayi = 0;
				for(new c = 0; c != sizeof(SatilikAraclar); c++) if(SatilikAraclar[c][2] == 4) araclar[sayi] = SatilikAraclar[c][0], sayi++;
				ShowModelSelectionMenuEx(playerid, araclar, sizeof(araclar), IsyeriBilgi[id][isyeriAd], MODELLER_GROTTI, 0.0, 0.0, 40.0);
			}
 		    case 14: {
		        new araclar[TEKNEGALERISI_ARACSAYISI], sayi = 0;
				for(new c = 0; c != sizeof(SatilikAraclar); c++) if(SatilikAraclar[c][2] == 5) araclar[sayi] = SatilikAraclar[c][0], sayi++;
				ShowModelSelectionMenuEx(playerid, araclar, sizeof(araclar), IsyeriBilgi[id][isyeriAd], MODELLER_GROTTI, 0.0, 0.0, 40.0);
			}
			case 6: DialogGoster(playerid, DIALOG_SEXSHOP, DIALOG_STYLE_TABLIST_HEADERS, "Seks Shop", "Ürün\t\tFiyat\nMor Dildo\t\t$30\nDildo\t\t$25\nVibratör\t\t$30\nGümüþ Vibratör\t\t$55\nÇiçek\t\t$10\nPlastik Jop\t$75", "Seç", "Ýptal");
		    case 7: DialogGoster(playerid, DIALOG_GIYIM, DIALOG_STYLE_TABLIST_HEADERS, "Giyim", "Ürün\nKýyafetler\nAksesuarlar\nÖzel Kýyafetler", "Seç", "Ýptal");
		    case 8: DialogGoster(playerid, DIALOG_BAR, DIALOG_STYLE_TABLIST_HEADERS, "Bar", "Ürün\t\tFiyat\nÞarap\t\t$50\nBira\t\t$5\n", "Seç", "Ýptal");
		    default: SunucuMesaji(playerid, "Bu iþyerinde ürün satýþý yok.");
		}
		return 1;
	}
	HataMesaji(playerid, "Yakýnýnda satýn alabileceðin bir mülk yok veya bir iþyerinde deðilsin.");
	return 1;
}

CMD:maden(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici olarak iþbaþýndayken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oMeslek] != 9) return HataMesaji(playerid, "Madenci mesleðinde deðilsin.");
	if(PetKontrol[playerid] != -1) return HataMesaji(playerid, "Pet kontrol ederken bunu yapamazsýn.");
	if(OyuncuBilgi[playerid][oMadenKaziyor] > 0) return HataMesaji(playerid, "Zaten þu anda maden kazýyorsun.");
	if(MadenPosYakin(playerid) == 0) return HataMesaji(playerid, "Maden kazma noktasýnda deðilsin.");

	new maden_gram = 0;
	maden_gram += OyuncuBilgi[playerid][oMadenler][0], maden_gram += OyuncuBilgi[playerid][oMadenler][1], maden_gram += OyuncuBilgi[playerid][oMadenler][2], maden_gram += OyuncuBilgi[playerid][oMadenler][3], maden_gram += OyuncuBilgi[playerid][oMadenler][4];
	if(maden_gram >= 500) return HataMesaji(playerid, "Daha fazla kazý yapamazsýn, üzerindekileri satmalýsýn.");

	new sure = 20;
	if(OyuncuBilgi[playerid][oMadenYetenek] >= 0 && OyuncuBilgi[playerid][oMadenYetenek] < 100) sure = 35;
	else if(OyuncuBilgi[playerid][oMadenYetenek] >= 100 && OyuncuBilgi[playerid][oMadenYetenek] < 200) sure = 25;
	else if(OyuncuBilgi[playerid][oMadenYetenek] >= 200 && OyuncuBilgi[playerid][oMadenYetenek] < 400) sure = 20;
	else if(OyuncuBilgi[playerid][oMadenYetenek] >= 400) sure = 10;
	else sure = 35;
	OyuncuBilgi[playerid][oMadenKaziyor] = sure;
	TogglePlayerControllable(playerid, false);
	OyuncuBilgi[playerid][oKontrol] = false;
	AnimOynat2(playerid, "SWORD", "sword_4", 4.1, 1, 1, 1, 1, 1);
	return 1;
}

CMD:madenci(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici olarak iþbaþýndayken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oMeslek] != 9) return HataMesaji(playerid, "Madenci mesleðinde deðilsin.");
	if(Meslek_Yakin(playerid) == -1) return HataMesaji(playerid, "Meslek noktasýna yakýn deðilsin.");
	if(MeslekBilgi[Meslek_Yakin(playerid)][mTur] != 9) return HataMesaji(playerid, "Yakýnýnda olduðun meslek noktasý \"%s\" deðil.", MeslekIsim(9));
	if(OyuncuBilgi[playerid][oMeslekIsbasi] != true) return HataMesaji(playerid, "Ýþbaþýnda deðilsin, iþbaþý yapmak için /isbasi komutunu kullanýn.");
	
	DialogGoster(playerid, DIALOG_MADENCI, DIALOG_STYLE_TABLIST, "Madenci", "Maden Sat\nBilgi Al", "Seç", "Kapat");
	return 1;
}

CMD:yat(playerid)
{
    if(OyuncuBilgi[playerid][oAdmin] < 1 && OyuncuBilgi[playerid][oEventMod] == 0) return HataMesaji(playerid, "Sadece yetkililer yat sistemini kullanabilir. Yat etkinliði baþlatmak istiyorsanýz etkinlik modlarýyla iletiþime geçin.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	new yat_bilgi[512];
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 148.4463, -1854.9377, 3.7734))
 	{
 	    if(yat_kiralama == false) return HataMesaji(playerid, "Yat þu anda kiralýk deðildir, management ile iletiþime geçebilirsiniz.");
 		if(YatBilgi[yatKiralayan] != -1) return HataMesaji(playerid, "Yat baþkasý tarafýndan kiralanmýþ. (Kalan kira süresi: %d)", floatround(YatBilgi[yatKiraSure] / 60));
 		format(yat_bilgi, sizeof(yat_bilgi), "{FFFFFF}Bu yatý saatlik kiralayabilirsiniz, kiralama ücreti {2ECC71}%s {FFFFFF}olarak belirlenmiþtir. Eðer kira süresi bitimine kadar yatý teslim etmezseniz para cezasýna çarptýrýlacaksýnýz.\n\n{FFFFFF}Kira süresini uzatmak için (/yat) komutunu kullanabilirsiniz.\n\n{FFFFFF}Bu yatý kiralamak istediðinize emin misiniz?", NumaraFormati(YAT_UCRET));
		DialogGoster(playerid, DIALOG_YAT_KIRALA, DIALOG_STYLE_MSGBOX, "Yat Kiralama", yat_bilgi, "Kirala", "Ýptal");
		return 1;
	}
    new Float:yatPos[3];
    GetObjectPos(YatBilgi[yatObject], yatPos[0], yatPos[1], yatPos[2]);
    if(!IsPlayerInRangeOfPoint(playerid, 20.0, yatPos[0], yatPos[1], yatPos[2]) && OyuncuBilgi[playerid][oYatKontrol][0] == 0) return HataMesaji(playerid, "Yatýnýza yakýn deðilsiniz!");
    if(YatBilgi[yatKiralayan] != OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Yat sizin üzerinize kiralanmamýþ.");
    new baslik[60];
    format(baslik, sizeof(baslik), "{FFFFFF}Yat: Yönetim Menüsü (Süre: %d dakika)", floatround(YatBilgi[yatKiraSure] / 60));
    format(yat_bilgi, sizeof(yat_bilgi), "{FFFFFF}%s\t\t\n{FFFFFF}Müzik Ayarla\t\t\n{FFFFFF}Otomatik Pilot\t\t(%s)\n{FFFFFF}Kira Süresini Uzat\t\t({2ECC71}%s{FFFFFF})", (OyuncuBilgi[playerid][oYatKontrol][0] == 0) ? ("Kontrol Et") : ("Kontrolü Býrak"), (YatBilgi[yatOto] == 1) ? ("{33aa33}Açýk") : ("{b70000}Kapalý"), NumaraFormati(YAT_UCRET));
    DialogGoster(playerid, DIALOG_YAT, DIALOG_STYLE_TABLIST, baslik, yat_bilgi, "Seç", "Kapat");
	return 1;
}

CMD:baliktut(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici olarak iþbaþýndayken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(PetKontrol[playerid] != -1) return HataMesaji(playerid, "Pet kontrol ederken bunu yapamazsýn.");
	if(OyuncuBilgi[playerid][oBalikTutuyor] > 0) return HataMesaji(playerid, "Zaten þu anda balýk tutuyorsun.");
	if(BalikPosYakin(playerid) == 0) return HataMesaji(playerid, "Santa Maria iskelesinde deðilsin.");
	if(avyasagi == true) return HataMesaji(playerid, "Av yasaðý var, þu anda balýk tutamazsýn.");
	
	if(OyuncuBilgi[playerid][oYemler][0] == 0 && OyuncuBilgi[playerid][oYemler][1] == 0 && OyuncuBilgi[playerid][oYemler][2] == 0 && OyuncuBilgi[playerid][oYemler][3] == 0 && OyuncuBilgi[playerid][oYemler][4] == 0)
	    return HataMesaji(playerid, "Üzerinde yem yok, balýkçý dükkanýndan satýn alabilirsin.");
	    
	new balik_gram = 0;
	balik_gram += OyuncuBilgi[playerid][oBaliklar][0], balik_gram += OyuncuBilgi[playerid][oBaliklar][1], balik_gram += OyuncuBilgi[playerid][oBaliklar][2], balik_gram += OyuncuBilgi[playerid][oBaliklar][3], balik_gram += OyuncuBilgi[playerid][oBaliklar][4];
	if(balik_gram >= 175) return HataMesaji(playerid, "Daha fazla balýk tutamazsýn, üstündekileri satmalýsýn.");

	new yem_icerik[256];
	format(yem_icerik, sizeof(yem_icerik), "Yem\tTutma Oraný\tÜzerindeki Adet\nEkmek\t%s55\t%d adet\nBoru Kurdu\t%s65\t%d adet\nSahte Yem\t%s75\t%d adet\nTavuk Göðsü\t%s85\t%d adet\nKarides\t%s95\t%d adet", "%", OyuncuBilgi[playerid][oYemler][0], "%", OyuncuBilgi[playerid][oYemler][1], "%", OyuncuBilgi[playerid][oYemler][2], "%", OyuncuBilgi[playerid][oYemler][3], "%", OyuncuBilgi[playerid][oYemler][4]);
	DialogGoster(playerid, DIALOG_YEMSEC, DIALOG_STYLE_TABLIST_HEADERS, "Yem Seçimi", yem_icerik, "Seç", "Kapat");
	return 1;
}

/*CMD:balikci(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici olarak iþbaþýndayken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 360.7297, -2036.2222, 7.8556)) return HataMesaji(playerid, "Balýkçý noktasýnda deðilsin.");
	if(avyasagi == true) return HataMesaji(playerid, "Av yasaðýndan dolayý balýkçý izin yapýyor, sonra tekrar gelin!");
	
	DialogGoster(playerid, DIALOG_BALIKCI, DIALOG_STYLE_TABLIST, "Balýkçý", "Yemler\nBalýk Sat\nBilgi Al", "Seç", "Kapat");
	return 1;
}*/

CMD:pompayarat(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 5) return YetkinizYok(playerid);
    

	new id, isyeriid = -1, ucret;
	if(sscanf(params, "dd", isyeriid, ucret)) return KullanimMesaji(playerid, "/pompayarat [iþyeri id] [litre ücreti]");
	if((isyeriid < 0 || isyeriid >= MAKSIMUM_ISYERI) || !IsyeriBilgi[isyeriid][isyeriKullanimda]) return HataMesaji(playerid, "Geçersiz iþyeri.");
	if(IsyeriBilgi[isyeriid][isyeriTur] != 9) return HataMesaji(playerid, "Ýþyeri türü benzin istasyonu deðil.");
    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0) return HataMesaji(playerid, "Benzin pompalarý interior ve farklý dünyalara yaratýlamaz.");

	id = Pompa_Yarat(playerid, isyeriid, ucret);
	if(id == -1) return HataMesaji(playerid, "Benzin pompasý limitine ulaþýldýðý için yeni benzin pompasý yaratýlamýyor.");

	SunucuMesaji(playerid, "Benzin pompasý baþarýyla yaratýldý. (ID: %d)", id);
	EditDynamicObject(playerid, BenzinPompasi[id][pompaObje]);
	OyuncuBilgi[playerid][oDuzenlenenPompa] = id;
	return 1;
}

CMD:apompa(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 5) return YetkinizYok(playerid);
    

	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/apompa [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} benzin, yer, ucret, tur, isyeri, x, y, z, a, sil");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_BENZIN_POMPASI) || !BenzinPompasi[id][pompaKullanimda])
	    return HataMesaji(playerid, "Geçersiz benzin pompasý.");

    if(!strcmp(type, "benzin", true))
	{
		new miktar;
		if(sscanf(string, "d", miktar))
		    return KullanimMesaji(playerid, "/pompaduzenle [benzin] [miktar]");

		BenzinPompasi[id][pompaBenzin] = miktar;
		Pompa_Yenile(id);
		Pompa_Kaydet(id);

		SunucuMesaji(playerid, "Pompanýn benzinini deðiþtirdiniz. (ID: %d | Benzin: %d)", id, NumaraFormati(miktar, ""));
	}
    else if(!strcmp(type, "tur", true))
	{
		new tur;
		if(sscanf(string, "d", tur)) return KullanimMesaji(playerid, "/pompaduzenle [tur] [miktar]");
		if(tur < 0 || tur > 1) return HataMesaji(playerid, "Geçersiz tür belirttiniz. (0-1)");
		BenzinPompasi[id][pompaTur] = tur;
		Pompa_Yenile(id);
		Pompa_Kaydet(id);

		SunucuMesaji(playerid, "Pompanýn türünü deðiþtirdiniz. (ID: %d | Tür: %d)", id, tur);
	}
	else if(!strcmp(type, "isyeri", true))
	{
		new isyeri;
		if(sscanf(string, "d", isyeri)) return KullanimMesaji(playerid, "/pompaduzenle [isyeri] [isyeri id]");

		if((id < 0 || id >= MAKSIMUM_ISYERI) || !IsyeriBilgi[isyeri][isyeriKullanimda]) return HataMesaji(playerid, "Geçersiz iþyeri.");

		BenzinPompasi[id][pompaIsyeri] = IsyeriBilgi[isyeri][isyeriID];
		Pompa_Yenile(id);
		Pompa_Kaydet(id);

		SunucuMesaji(playerid, "Pompanýn iþyerini deðiþtirdiniz. (ID: %d | Ýþyeri: %d)", id, isyeri);
	}
    else if(!strcmp(type, "yer", true))
	{
	    EditlemeSifirla(playerid);
		EditDynamicObject(playerid, BenzinPompasi[id][pompaObje]);
		OyuncuBilgi[playerid][oDuzenlenenPompa] = id;
	}
	else if(!strcmp(type, "x", true))
	{
		new Float:x;
		if(sscanf(string, "f", x))
		    return KullanimMesaji(playerid, "/pompaduzenle [x] [x]");

        BenzinPompasi[id][pompaPos][0] = x;
		Pompa_Yenile(id);
		Pompa_Kaydet(id);
	}
	else if(!strcmp(type, "y", true))
	{
		new Float:y;
		if(sscanf(string, "f", y))
		    return KullanimMesaji(playerid, "/pompaduzenle [y] [y]");

		BenzinPompasi[id][pompaPos][1] = y;
		Pompa_Yenile(id);
		Pompa_Kaydet(id);
	}
	else if(!strcmp(type, "z", true))
	{
		new Float:z;
		if(sscanf(string, "f", z))
		    return KullanimMesaji(playerid, "/pompaduzenle [z] [z]");

		BenzinPompasi[id][pompaPos][2] = z;
		Pompa_Yenile(id);
		Pompa_Kaydet(id);
	}
	else if(!strcmp(type, "a", true))
	{
		new Float:a;
		if(sscanf(string, "f", a))
		    return KullanimMesaji(playerid, "/pompaduzenle [a] [a]");

		BenzinPompasi[id][pompaPos][3] = a;
		Pompa_Yenile(id);
		Pompa_Kaydet(id);
	}
	else if(!strcmp(type, "ucret", true))
	{
		new ucret;
		if(sscanf(string, "d", ucret)) return KullanimMesaji(playerid, "/pompaduzenle [ucret] [litre baþý ücret]");

		BenzinPompasi[id][pompaUcret] = ucret;
		Pompa_Yenile(id);
		Pompa_Kaydet(id);
		SunucuMesaji(playerid, "Pompanýn ücretini deðiþtirdiniz. (ID: %d | Ücret: %d)", id, NumaraFormati(ucret));
	}
	else if(!strcmp(type, "sil", true))
	{
 		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), pompa sildi. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BenzinPompasi[id][pompaID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/pompa_admin.txt", "%s", log_icerik);
		Pompa_Kaldir(id);
		SunucuMesaji(playerid, "Benzin pompasý %d baþarýyla kaldýrýldý.", id);
	}
	return 1;
}

CMD:aisyeri(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5) return YetkinizYok(playerid);
	if(!strcmp(params, "olustur", true)) {
	    new id = -1;
		id = Isyeri_Yarat(playerid, 1);

		if(id == -1) return HataMesaji(playerid, "Sunucu iþyeri limitine ulaþtýðý için yeni iþyeri yaratýlamýyor!");

		SunucuMesaji(playerid, "Sunucuya yeni bir iþyeri ekledin. (ID: %d)", id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir iþyeri oluþturdu. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], IsyeriBilgi[id][isyeriID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/isyeri_admin.txt", "%s", log_icerik);
		return 1;
	}
	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/aisyeri [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} olustur, lokasyon, interior, isim, fiyat, durum, tur, urun, sil");
	    if(OyuncuBilgi[playerid][oAdmin] >= 6) SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} sahip");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_ISYERI) || !IsyeriBilgi[id][isyeriKullanimda])
	    return HataMesaji(playerid, "Geçersiz iþyeri!");

	if(!strcmp(type, "lokasyon", true))
	{
	    GetPlayerPos(playerid, IsyeriBilgi[id][isyeriPos][0], IsyeriBilgi[id][isyeriPos][1], IsyeriBilgi[id][isyeriPos][2]);
		GetPlayerFacingAngle(playerid, IsyeriBilgi[id][isyeriPos][3]);

		IsyeriBilgi[id][isyeriDisInt] = GetPlayerInterior(playerid);
		IsyeriBilgi[id][isyeriDisVW] = GetPlayerVirtualWorld(playerid);

		Isyeri_Yenile(id);
		Isyeri_Kaydet(id);

		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir iþyerinin lokasyonunu deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir iþyeri lokasyonunu deðiþtirdi. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], IsyeriBilgi[id][isyeriID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/isyeri_admin.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, IsyeriBilgi[id][isyeriIcPos][0], IsyeriBilgi[id][isyeriIcPos][1], IsyeriBilgi[id][isyeriIcPos][2]);
		GetPlayerFacingAngle(playerid, IsyeriBilgi[id][isyeriIcPos][3]);

		IsyeriBilgi[id][isyeriInterior] = GetPlayerInterior(playerid);
		SetPlayerVirtualWorld(playerid, IsyeriBilgi[id][isyeriVW]);

		Isyeri_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir iþyerinin interiorunu deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir iþyeri interiorunu deðiþtirdi. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], IsyeriBilgi[id][isyeriID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/isyeri_admin.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "isim", true))
	{
	    static yeniisim[128];

	    if(sscanf(string, "s[128]", yeniisim))
	        return KullanimMesaji(playerid, "/aisyeri [id] [isim] [yeni isim]");

	    format(IsyeriBilgi[id][isyeriAd], 128, yeniisim);

	    Isyeri_Yenile(id);
	    Isyeri_Kaydet(id);

		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir iþyerinin ismini deðiþtirdi. (ID: %d | Ýsim: %s)", OyuncuBilgi[playerid][oAdminNick], id, yeniisim);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), iþyeri ismini %s olarak deðiþtirdi. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], yeniisim, IsyeriBilgi[id][isyeriID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/isyeri_admin.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "sahip", true) && OyuncuBilgi[playerid][oAdmin] >= 6)
	{
        if(!strcmp(string, "devlet", true)) {
			if(IsyeriBilgi[id][isyeriSahip] != 0) return HataMesaji(playerid, "Bu iþyerinin bir sahibi olduðu için devlete satýlamýyor.");

			IsyeriBilgi[id][isyeriSahipIsim][0] = 0;
			IsyeriBilgi[id][isyeriSahip] = -1;
			IsyeriBilgi[id][isyeriOrtak] = 0;
			IsyeriBilgi[id][isyeriDurum] = 1;
			Isyeri_Kaydet(id);
			Isyeri_Yenile(id);
			SunucuMesaji(playerid, "Ýþyeri %d baþarýyla devlete satýldý!", id);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), iþyerini devlete sattý. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], IsyeriBilgi[id][isyeriID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/isyeri_admin.txt", "%s", log_icerik);
			return 1;
        }
	    new oyuncuid;
	    if(sscanf(string, "d", oyuncuid)) return KullanimMesaji(playerid, "/aisyeri [id] [sahip] [oyuncu ID] - (-1 kaldýrýr)");

		if(oyuncuid == -1) {
		    IsyeriBilgi[id][isyeriSahip] = 0;
		    Isyeri_Kaydet(id);
		    Isyeri_Yenile(id);
		    YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir iþyeri sahibini sildi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), iþyeri sahibini sildi. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], IsyeriBilgi[id][isyeriID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/isyeri_admin.txt", "%s", log_icerik);
		    return 1;
		}
		else {
			if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

			IsyeriBilgi[id][isyeriSahip] = OyuncuBilgi[oyuncuid][oID];
			Isyeri_Kaydet(id);
			IsyeriBilgi[id][isyeriSahipIsim][0] = 0;
			Isyeri_Yenile(id);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir iþyerinin sahibini deðiþitirdi. (ID: %d | Sahip: %s)", OyuncuBilgi[playerid][oAdminNick], id, OyuncuIsim(oyuncuid));
			new log_icerik[144], hedef_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, hedef_isim, sizeof(hedef_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), iþyeri sahibini deðiþtirdi. (SID: %d | Sahip: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], IsyeriBilgi[id][isyeriID], hedef_isim, OyuncuBilgi[oyuncuid][oID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/isyeri_admin.txt", "%s", log_icerik);
		}
	}
	else if(!strcmp(type, "fiyat", true))
	{
		if(IsyeriBilgi[id][isyeriSahip] != 0 && OyuncuBilgi[playerid][oAdmin] < 6) return HataMesaji(playerid, "Bu iþyerinin fiyatýný sadece Management deðiþtirebilir.");
	    new fiyat;
	    if(sscanf(string, "d", fiyat)) return KullanimMesaji(playerid, "/aisyeri [id] [fiyat] [yeni fiyat]");
		if(fiyat < 1 || fiyat > 10000000) return HataMesaji(playerid, "Fiyat en az 1, en fazla 10,000,000 olabilir.");

		IsyeriBilgi[id][isyeriFiyat] = fiyat;
		Isyeri_Yenile(id);
		Isyeri_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir iþyerinin fiyatýný deðiþtirdi. (ID: %d | Yeni Fiyat: %s)", OyuncuBilgi[playerid][oAdminNick], id, NumaraFormati(fiyat));
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), iþyeri fiyatýný %s yaptý. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], NumaraFormati(fiyat), IsyeriBilgi[id][isyeriID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/isyeri_admin.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "durum", true))
	{
		new durum;
		if(sscanf(string, "d", durum)) {
			KullanimMesaji(playerid, "/aisyeri [id] [durum] [durum id]");
			SendClientMessage(playerid, RENK_SARI, "[DURUMLAR]:{FFFFFF} 1: Kilitsiz, 2: Kilitli, 3: Bakým");
			return 1;
		}

		if(durum < 1 || durum > 3)
		    return HataMesaji(playerid, "Geçersiz durum.");

		IsyeriBilgi[id][isyeriDurum] = durum;
		Isyeri_Yenile(id);
		Isyeri_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir iþyerinin durumunu deðiþtirdi. (ID: %d | Yeni Durum: %d)", OyuncuBilgi[playerid][oAdminNick], id, durum);
	}
	else if(!strcmp(type, "tur", true))
	{
		static tur;
		if(sscanf(string, "d", tur)) {
			KullanimMesaji(playerid, "/aisyeri [id] [tur] [tür id]");
			SendClientMessage(playerid, RENK_SARI, "[TÜRLER]:{FFFFFF} 1: Market - 2: Cafe & Restaurant - 3: Elektronik - 4: Motor Galerisi - 5: Berber");
			SendClientMessage(playerid, RENK_SARI, "[TÜRLER]:{FFFFFF} 6: Sex Shop - 7: Giyim - 8: Bar - 9: Benzinlik Marketi - 10: Silah Satýcýsý");
			SendClientMessage(playerid, RENK_SARI, "[TÜRLER]:{FFFFFF} 11: Araç Galerisi - 12: Lüks Galeri - 13: Uçak Galerisi - 14: Tekne Galerisi");
			SendClientMessage(playerid, RENK_SARI, "[TÜRLER]:{FFFFFF} 15: Kumarhane");
			return 1;
		}

		if(tur < 1 || tur > 15) return HataMesaji(playerid, "Geçersiz bir iþyeri türü belirledin.");

		IsyeriBilgi[id][isyeriTur] = tur;
		Isyeri_Yenile(id);
		Isyeri_Kaydet(id);
		SunucuMesaji(playerid, "Ýþyerinin türünü %s olarak deðiþtirdin. (ID: %d)", Isyeri_TurAdi(id), id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), iþyeri türünü %s yaptý. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], Isyeri_TurAdi(id), IsyeriBilgi[id][isyeriID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/isyeri_admin.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "urun", true))
	{
		new urun;
		if(sscanf(string, "d", urun)) return KullanimMesaji(playerid, "/aisyeri [id] [ürün] [yeni ürün sayýsý]");

		if(urun < 0) return HataMesaji(playerid, "Ürün sayýsý sýfýrýn altýnda olamaz.");

		IsyeriBilgi[id][isyeriUrun] = urun;
		Isyeri_Yenile(id);
		Isyeri_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir iþyerinin ürün sayýsýný deðiþtirdi. (ID: %d | Ürün Sayýsý: %d)", OyuncuBilgi[playerid][oAdminNick], id, urun);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), iþyeri ürün sayýsýný %d yaptý. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], urun, IsyeriBilgi[id][isyeriID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/isyeri_admin.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "sil", true))
	{
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), iþyeri sildi. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], IsyeriBilgi[id][isyeriID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/isyeri_admin.txt", "%s", log_icerik);
		Isyeri_Sil(id);
		SunucuMesaji(playerid, "Ýþyeri %d baþarýyla silindi!", id);
	}
	else HataMesaji(playerid, "Geçersiz fonksiyon.");
	return 1;
}

CMD:imlec(playerid, params[])
{
    SelectTextDraw(playerid, 0xd9b429ff);
	return 1;
}

CMD:telefon(playerid, params[])
{
	if(OyuncuBilgi[playerid][oTelefon] == 0 || OyuncuBilgi[playerid][oTelefonNumarasi] == 0) return HataMesaji(playerid, "Telefonun veya sim kartýn yok.");
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) return HataMesaji(playerid, "Þu anda telefonunu kullanamazsýn.");

	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballda bu komutu kullanamazsýn.");
	switch(OyuncuBilgi[playerid][oTelefonDurum]) {
	case true: {
		switch(OyuncuBilgi[playerid][oTelefonAcik]) {
		case true: {
		for(new i = 0; i != 21; i++) PlayerTextDrawHide(playerid, OyuncuBilgi[playerid][oiphone][i]);
		OyuncuBilgi[playerid][oTelefonAcik] = false;
		cmd_ame(playerid, "telefonun ekranýný kapatýr.");
		}
		case false: {
		SelectTextDraw(playerid, 0xd9b429ff); // Highlight green when hovering over
		for(new i = 0; i != 21; i++) PlayerTextDrawShow(playerid, OyuncuBilgi[playerid][oiphone][i]);
		OyuncuBilgi[playerid][oTelefonAcik] = true;
		cmd_ame(playerid, "elini cebine götürür, telefonunu çýkarýr.");
		UyariMesaji(playerid, "Ýmleç için /imlec, imleci kapatmak için \"ESC\" basýn. Telefonu kapatmak için /telefon komutunu kullanýn.");
		}
	}
	}
	case false: {
	DialogGoster(playerid, DIALOG_TELEFONAC_ONAY, DIALOG_STYLE_MSGBOX, "vTelefon", "Telefonunu açacaksýn, onaylýyor musun?", "Onayla", "Ýptal");
	}
	}
    //for(new i = 0; i < sizeof(iphone[]); i++) return PlayerTextDrawShow(playerid, iphone[playerid][i]);
	/*new icerik[512];
	if(OyuncuBilgi[playerid][oTelefonDurum] == false) format(icerik, sizeof(icerik), "%s\n", (OyuncuBilgi[playerid][oTelefonDurum] == false) ? ("Telefonu Aç") : ("Telefonu Kapat"));
	else {
		format(icerik, sizeof(icerik), "{C2CE1C}[TELEFON] {FFFFFF}Arama\t\n{C2CE1C}[TELEFON] {FFFFFF}Mesaj\t\n{C2CE1C}[TELEFON] {FFFFFF}Arama Kayýtlarý\t\n{C2CE1C}[TELEFON] {FFFFFF}Rehber\t\n{B70000}[HARITA] {FFFFFF}Konum Gönder\t\n{5781FF}[UYGULAMA] {FFFFFF}SanAdvertisement\t\n{5781FF}[UYGULAMA] {FFFFFF}ZCN Banka Mobil\t\n{5781FF}[UYGULAMA] {FFFFFF}Uber\t\n{5781FF}[UYGULAMA] {FFFFFF}Brockway Emlak\t\n");
		format(icerik, sizeof(icerik), "%s{C2CE1C}[TELEFON] {FFFFFF}Gizli Numara\t%s\n", icerik, (OyuncuBilgi[playerid][oGizliNumara] == false) ? ("Aç") : ("Kapat"));
		format(icerik, sizeof(icerik), "%s{AFAFAF}[AYARLAR] {FFFFFF}SOS\t\n{AFAFAF}[AYARLAR] {FFFFFF}Ses\t%s\n%s\t\n", icerik, (OyuncuBilgi[playerid][oTelefonSes] == false) ? ("Aç") : ("Kapat"), (OyuncuBilgi[playerid][oTelefonDurum] == false) ? ("Telefonu Aç") : ("Telefonu Kapat"));
	}
	DialogGoster(playerid, DIALOG_TELEFON, DIALOG_STYLE_TABLIST, "Cep Telefonu", icerik, "Seç", "Ýptal");*/
	return 1;
}

CMD:ankesorlutelefon(playerid, params[])
{
	if(OyuncuBilgi[playerid][oArama] > -1) return HataMesaji(playerid, "Arama yaparken bu komutu kullanamazsýn.");

	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballda bunu kullanamazsýn.");

	new numara, test[64], ankid = Ankesorlu_Telefon_Yakin(playerid);
	if(ankid == -1) return HataMesaji(playerid, "Yakýnýnda ankesörlü telefon bulunmuyor");
	if(ATelBilgi[ankid][aTelKullaniliyor] == true) return UyariMesaji(playerid, "Ankesörlü telefon baþkasý tarafýndan kullanýlýyor.");
	if(sscanf(params, "d", numara)) return KullanimMesaji(playerid, "/ankesorlutelefon [telefon numarasý]");

	format(test, sizeof(test), "%d", numara);
	if(numara != 911 && strlen(test) < 4) return HataMesaji(playerid, "Hatalý ya da eksik numara tuþladýn.");
	if(OyuncuBilgi[playerid][oTelefonNumarasi] == numara) return HataMesaji(playerid, "Kendini arayamazsýn.");
	if(numara == 911) {
	    DialogGoster(playerid, DIALOG_911_SECIM, DIALOG_STYLE_MSGBOX, "911", "Aþaðýdaki servislerden hangisine ulaþmak istiyorsunuz?", "LSPD", "Hastane");
	    return 1;
	}
	foreach(new i : Player) if(OyuncuBilgi[i][oTelefonNumarasi] == numara) {
	    if(OyuncuBilgi[i][oAdminDurum] == true) return HataMesaji(playerid, "Aradýðýn numara þu anda çaðrý kabul etmemektedir lütfen daha sonra tekrar deneyin.");
		if(OyuncuBilgi[i][oTelefonDurum] == false) return HataMesaji(playerid, "Aradýðýn numara þu anda çaðrý kabul etmemektedir lütfen daha sonra tekrar deneyin.");
		if(OyuncuBilgi[i][oArama] > -1) return HataMesaji(playerid, "Aradýðýnýz kiþi meþgul.");
		if(OyuncuBilgi[i][oPaintball] != -1) return HataMesaji(playerid, "Aradýðýnýz kiþi meþgul.");

		cmd_ame(playerid, "ankesörlü telefon üzerinden birkaç tuþlama yaparak arama yapar.");
		switch(OyuncuBilgi[i][oTelefonSes]) {
			case true: cmd_ado(i, "Telefon çalýyor.");
			case false: SunucuMesaji(playerid, "Telefonunuz titriyor.");
		}
		OyuncuBilgi[playerid][oArama] = i;
		OyuncuBilgi[playerid][oAnkesorluTelefon] = true;
		ATelBilgi[ankid][aTelKullaniliyor] = true;
		UyariMesaji(i, "Telefonunuz çalýyor! Arayan: Ankesörlü Telefon");
		KullanimMesaji(i, "Cevap vermek için /cevapla, reddetmek için /kapat komutunu kullanýn.");
		OyuncuBilgi[playerid][oAramaSure] = -2;
		OyuncuBilgi[i][oArama] = playerid;
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
        PlayerPlaySoundEx(i, 23000);
		if(!IsPlayerInAnyVehicle(playerid) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		break;
	}
	if(OyuncuBilgi[playerid][oArama] == -1) HataMesaji(playerid, "Aradýðýn numaraya þu anda ulaþýlamýyor lütfen daha sonra tekrar deneyin.");
	return 1;
}

CMD:ara(playerid, params[])
{
	if(OyuncuBilgi[playerid][oTelefon] != 1 || OyuncuBilgi[playerid][oTelefonNumarasi] == 0) return HataMesaji(playerid, "Telefonun veya sim kartýn yok.");
	if(OyuncuBilgi[playerid][oTelefonDurum] == false) return HataMesaji(playerid, "Telefonunuz kapalý olduðu için bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oArama] > -1) return HataMesaji(playerid, "Arama yaparken bu komutu kullanamazsýn.");

	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballda bunu kullanamazsýn.");

	new numara, test[64];
	if(sscanf(params, "d", numara)) return KullanimMesaji(playerid, "/ara [telefon numarasý]");

	format(test, sizeof(test), "%d", numara);
	if(numara != 911 && strlen(test) < 4) return HataMesaji(playerid, "Hatalý ya da eksik numara tuþladýn.");
	if(OyuncuBilgi[playerid][oTelefonNumarasi] == numara) return HataMesaji(playerid, "Kendini arayamazsýn.");
	if(numara == 911) {
	    DialogGoster(playerid, DIALOG_911_SECIM, DIALOG_STYLE_MSGBOX, "911", "Aþaðýdaki servislerden hangisine ulaþmak istiyorsunuz?", "LSPD", "Hastane");
	    return 1;
	}
	new bool:bulundu = false;
	foreach(new i : Player) if(OyuncuBilgi[i][oTelefonNumarasi] == numara) {
	    if(OyuncuBilgi[i][oAdminDurum] == true) return HataMesaji(playerid, "Aradýðýn numara þu anda çaðrý kabul etmemektedir lütfen daha sonra tekrar deneyin.");
		if(OyuncuBilgi[i][oTelefonDurum] == false) return HataMesaji(playerid, "Aradýðýn numara þu anda çaðrý kabul etmemektedir lütfen daha sonra tekrar deneyin.");
		if(OyuncuBilgi[i][oArama] > -1) return HataMesaji(playerid, "Aradýðýnýz kiþi meþgul.");
		if(OyuncuBilgi[i][oPaintball] != -1) return HataMesaji(playerid, "Aradýðýnýz kiþi meþgul.");

		cmd_ame(playerid, "telefonunu çýkarýr ve bir arama yapar.");
		switch(OyuncuBilgi[i][oTelefonSes]) {
			case true: cmd_ado(i, "Telefon çalýyor.");
			case false: SunucuMesaji(playerid, "Telefonunuz titriyor.");
		}
		OyuncuBilgi[playerid][oArama] = i;
		if(OyuncuBilgi[playerid][oGizliNumara] == true) UyariMesaji(i, "Telefonunuz çalýyor! Arayan: Gizli Numara"), bulundu = true;
		else if(OyuncuBilgi[playerid][oGizliNumara] == false) {
			for(new r = 0; r != MAKSIMUM_REHBER_SAYI; r ++) if(RehberBilgi[i][r][rehberKullanimda] && RehberBilgi[i][r][rehberNumara] == OyuncuBilgi[playerid][oTelefonNumarasi]) {
				UyariMesaji(i, "Telefonunuz çalýyor! Arayan: %s (%d)", RehberBilgi[i][r][rehberIsim], OyuncuBilgi[playerid][oTelefonNumarasi]), bulundu = true;
			}
		}
		if(bulundu == false) UyariMesaji(i, "Telefonunuz çalýyor! Arayan: %d", OyuncuBilgi[playerid][oTelefonNumarasi]);
		KullanimMesaji(i, "Cevap vermek için /cevapla, reddetmek için /kapat komutunu kullanýn.");
		OyuncuBilgi[playerid][oAramaSure] = -2;
		OyuncuBilgi[i][oArama] = playerid;
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
        PlayerPlaySoundEx(i, 23000);
		if(!IsPlayerInAnyVehicle(playerid) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		break;
	}
	if(OyuncuBilgi[playerid][oArama] == -1) HataMesaji(playerid, "Aradýðýn numaraya þu anda ulaþýlamýyor lütfen daha sonra tekrar deneyin.");
	return 1;
}

CMD:cevapla(playerid, params[])
{
	if(OyuncuBilgi[playerid][oArama] == -1 || OyuncuBilgi[playerid][oCevaplandi] == true)
	    return HataMesaji(playerid, "Aramada deðilsin ya da zaten aramaya cevap vermiþsin.");

	if(OyuncuBilgi[playerid][oAdminDurum] == true)
	    return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

	if(OyuncuBilgi[playerid][oAramaSure] == -2 || OyuncuBilgi[playerid][oAnkesorluTelefon] == true)
	    return HataMesaji(playerid, "Aramayý yapan sizseniz bu komutu kullanamazsýn.");

	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

	new oyuncuid = OyuncuBilgi[playerid][oArama];
	SunucuMesaji(oyuncuid, "Karþýdaki kiþi telefonu açtý, çaðrýyý sonlandýrmak için \"/kapat\".");
	SunucuMesaji(playerid, "Telefona cevap verdin, çaðrýyý sonlandýrmak için \"/kapat\".");
	OyuncuBilgi[playerid][oCevaplandi] = true;
	OyuncuBilgi[oyuncuid][oCevaplandi] = true;
	OyuncuBilgi[playerid][oAramaSure] = 0;
	OyuncuBilgi[oyuncuid][oAramaSure] = 0;
	Kayit_Olustur(playerid, oyuncuid, TELEFON_GELEN);
	Kayit_Olustur(oyuncuid, playerid, TELEFON_GIDEN);
	/*if(!IsPlayerInAnyVehicle(playerid) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	if(!IsPlayerInAnyVehicle(oyuncuid) && GetPlayerSpecialAction(oyuncuid) == SPECIAL_ACTION_NONE)
		SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_USECELLPHONE);*/
	return 1;
}

CMD:kapat(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oArama] == -1 && OyuncuBilgi[playerid][oCevaplandi] == false) return HataMesaji(playerid, "Aramada deðilsin.");

	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

	new oyuncuid = OyuncuBilgi[playerid][oArama];
	OyuncuBilgi[playerid][oArama] = -1;
	OyuncuBilgi[oyuncuid][oArama] = -1;
	if(OyuncuBilgi[playerid][oCevaplandi] == true) {
		SunucuMesaji(oyuncuid, "Karþýdaki kiþi telefonu kapattý.");
		SunucuMesaji(playerid, "Telefonu kapattýn.");
	}
	else if(OyuncuBilgi[playerid][oCevaplandi] == false) {
	    if(OyuncuBilgi[playerid][oAramaSure] == -2) {
			Kayit_Olustur(playerid, oyuncuid, TELEFON_GIDEN);
			Kayit_Olustur(oyuncuid, playerid, TELEFON_CEVAPSIZ);
		}
		else if(OyuncuBilgi[oyuncuid][oAramaSure] == -2) {
			Kayit_Olustur(oyuncuid, playerid, TELEFON_GIDEN);
			Kayit_Olustur(playerid, oyuncuid, TELEFON_CEVAPSIZ);
		}
		SunucuMesaji(oyuncuid, "Karþýdaki kiþi aramayý reddetti.");
		SunucuMesaji(playerid, "Aramayý reddettin.");
	}
	OyuncuBilgi[playerid][oAramaSure] = -1;
	OyuncuBilgi[oyuncuid][oAramaSure] = -1;
	OyuncuBilgi[playerid][oCevaplandi] = false;
	OyuncuBilgi[oyuncuid][oCevaplandi] = false;
	OyuncuBilgi[playerid][oAnkesorluTelefon] = false;
	OyuncuBilgi[oyuncuid][oAnkesorluTelefon] = false;
	new ankid1 = Ankesorlu_Telefon_Yakin(playerid), ankid2 = Ankesorlu_Telefon_Yakin(oyuncuid);
	ATelBilgi[ankid1][aTelKullaniliyor] = false;
	ATelBilgi[ankid2][aTelKullaniliyor] = false;
	/*if(!IsPlayerInAnyVehicle(playerid) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	if(!IsPlayerInAnyVehicle(oyuncuid) && GetPlayerSpecialAction(oyuncuid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_STOPUSECELLPHONE);*/
	return 1;
}

CMD:sms(playerid, params[])
{
	if(OyuncuBilgi[playerid][oTelefon] != 1 || OyuncuBilgi[playerid][oTelefonNumarasi] == 0)
	    return HataMesaji(playerid, "Telefonun veya sim kartýn yok, kýsa mesaj atamazsýn.");

	if(OyuncuBilgi[playerid][oTelefonDurum] == false)
	    return HataMesaji(playerid, "Telefonunuz kapalý olduðu için bu komutu kullanamazsýn.");

	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

	new numara, mesaj[128];
	if(sscanf(params, "ds[128]", numara, mesaj))
	    return KullanimMesaji(playerid, "/sms [numara] [mesaj]");

	if(numara == 0) return HataMesaji(playerid, "Bu telefon numarasý geçersizdir!");
	if(numara == 911) return HataMesaji(playerid, "911 hattýna mesaj gönderemezsin.");
	if(OyuncuBilgi[playerid][oTelefonNumarasi] == numara) return HataMesaji(playerid, "Kendine SMS atamazsýn.");

	new bool:bulundu = false, num = INVALID_PLAYER_ID;
	foreach(new i : Player) if(OyuncuBilgi[i][oTelefonNumarasi] == numara) {
	    if(OyuncuBilgi[i][oAdminDurum] == true) return HataMesaji(playerid, "Mesaj iletilemedi.");
		if(OyuncuBilgi[i][oTelefonDurum] == false) return HataMesaji(playerid, "Mesaj iletilemedi.");
		
		if(OyuncuBilgi[playerid][oGizliNumara] == true) SendClientMessageEx(i, RENK_SARI, "[SMS] {D2D2D2}%s | Gönderen: Gizli Numara", mesaj), bulundu = true;
		else if(OyuncuBilgi[playerid][oGizliNumara] == false) {
			for(new r = 0; r != MAKSIMUM_REHBER_SAYI; r ++) if(RehberBilgi[i][r][rehberKullanimda] && RehberBilgi[i][r][rehberNumara] == OyuncuBilgi[playerid][oTelefonNumarasi]) {
				SendClientMessageEx(i, RENK_SARI, "[SMS] {D2D2D2}%s | Gönderen: %s (%d)", mesaj, RehberBilgi[i][r][rehberIsim], OyuncuBilgi[playerid][oTelefonNumarasi]), bulundu = true;
			}
		}
		if(bulundu == false) SendClientMessageEx(i, RENK_SARI, "[SMS] {D2D2D2}%s | Gönderen: %d", mesaj, OyuncuBilgi[playerid][oTelefonNumarasi]);
		switch(OyuncuBilgi[i][oTelefonSes]) {
			case true: cmd_ado(i, "Telefondan mesaj bildirim sesi geldi.");
			case false: SunucuMesaji(i, "Telefonunuz titredi.");
		}
		ParaEkle(playerid, -SMS_UCRET);
		num = i;
		break;
	}
	if(num == INVALID_PLAYER_ID) return UyariMesaji(playerid, "Mesaj iletilemedi.");
	bulundu = false;
	if(OyuncuBilgi[playerid][oGizliNumara] == true) SendClientMessageEx(playerid, RENK_SARI, "[SMS] {D2D2D2}%s | Gönderen: Gizli Numara", mesaj), bulundu = true;
	for(new r = 0; r != MAKSIMUM_REHBER_SAYI; r ++) if(RehberBilgi[playerid][r][rehberKullanimda] && RehberBilgi[playerid][r][rehberNumara] == OyuncuBilgi[num][oTelefonNumarasi]) {
		SendClientMessageEx(playerid, RENK_SARI, "[SMS] {D2D2D2}%s | Gönderilen: %s (%d)", mesaj, RehberBilgi[playerid][r][rehberIsim], OyuncuBilgi[num][oTelefonNumarasi]), bulundu = true;
	}
	if(bulundu == false) SendClientMessageEx(playerid, RENK_SARI, "[SMS] {D2D2D2}%s | Gönderilen: %d", mesaj, OyuncuBilgi[num][oTelefonNumarasi]);
	return 1;
}

CMD:spawnla(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new oyuncuid, yer[32];
	if(sscanf(params, "us[32]", oyuncuid, yer)) return KullanimMesaji(playerid, "/spawnla [ID / Oyuncu] [yer] (ls-lv-sf)");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
    if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0 || OyuncuBilgi[oyuncuid][oHapisSure][1] > 0) return HataMesaji(playerid, "Oyuncu hapiste, bu komutu onun üzerinde kullanamazsýn.");
    if(OyuncuBilgi[oyuncuid][oCK] == 1) return HataMesaji(playerid, "Oyuncu CK olmuþ, bu komutu üzerinde kullanamazsýn.");
    if(OyuncuBilgi[oyuncuid][oPaintball] != -1) return HataMesaji(playerid, "Oyuncu paintballda.");
    if(OyuncuBilgi[playerid][oAdmin] < 1 && OyuncuBilgi[oyuncuid][oAdminDurum] == true) return HataMesaji(playerid, "Ýþbaþýndaki adminleri LS gönderemezsin.");
    if((OyuncuBilgi[playerid][oIncelenenSoruSahibi] == INVALID_PLAYER_ID || OyuncuBilgi[playerid][oIncelenenSoruSahibi] != oyuncuid) && OyuncuBilgi[playerid][oAdmin] < 1) return HataMesaji(playerid, "Bu komutu sadece ilgilendiðin sorunun sahibi üzerinde kullanabilirsin.");
    
	if(!strcmp(yer, "ls", true)) {
		if(IsPlayerInAnyVehicle(oyuncuid)) AracPosDegistir(GetPlayerVehicleID(oyuncuid), 1529.6327, -1683.8873, 13.3828);
		else OyuncuPosDegistir(oyuncuid, 1529.6327, -1683.8873, 13.3828);
		SetPlayerInterior(oyuncuid, 0);
		SetPlayerVirtualWorld(oyuncuid, 0);
		SunucuMesaji(oyuncuid, "%s adlý yetkili sizi Los Santos'a ýþýnladý.", OyuncuBilgi[playerid][oAdminNick]);
		SunucuMesaji(playerid, "%s adlý kiþiyi Los Santos'a ýþýnladýn.", OyuncuIsim(oyuncuid));
 		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
 		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiyi LS gönderdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_basit.txt", "%s", log_icerik);
	}
	else if(!strcmp(yer, "lv", true)) {
	    if(OyuncuBilgi[playerid][oAdmin] == 0) return HataMesaji(playerid, "LV ve SF bölgelerine sadece adminler gönderim yapabilir.");
		if(IsPlayerInAnyVehicle(oyuncuid)) AracPosDegistir(GetPlayerVehicleID(oyuncuid), 2029.8564, 1009.2123, 10.8203);
		else OyuncuPosDegistir(oyuncuid, 2029.8564,1009.2123,10.8203);
		SetPlayerInterior(oyuncuid, 0);
		SetPlayerVirtualWorld(oyuncuid, 0);
		SunucuMesaji(oyuncuid, "%s adlý yetkili sizi Las Venturas'a ýþýnladý.", OyuncuBilgi[playerid][oAdminNick]);
		SunucuMesaji(playerid, "%s adlý kiþiyi Las Venturas'a ýþýnladýn.", OyuncuIsim(oyuncuid));
  		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
 		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiyi LV gönderdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_basit.txt", "%s", log_icerik);
	}
	else if(!strcmp(yer, "sf", true)) {
	    if(OyuncuBilgi[playerid][oAdmin] == 0) return HataMesaji(playerid, "LV ve SF bölgelerine sadece adminler gönderim yapabilir.");
		if(IsPlayerInAnyVehicle(oyuncuid)) AracPosDegistir(GetPlayerVehicleID(oyuncuid), -1986.4033, 137.6835, 27.6875);
		else OyuncuPosDegistir(oyuncuid, -1986.4033, 137.6835, 27.6875);
		
		SetPlayerInterior(oyuncuid, 0);
		SetPlayerVirtualWorld(oyuncuid, 0);
		SunucuMesaji(oyuncuid, "%s adlý yetkili sizi San Fierro'ya ýþýnladý.", OyuncuBilgi[playerid][oAdminNick]);
		SunucuMesaji(playerid, "%s adlý kiþiyi San Fierro'ya ýþýnladýn.", OyuncuIsim(oyuncuid));
   		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
 		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiyi SF gönderdi.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_basit.txt", "%s", log_icerik);
	}
	else { HataMesaji(playerid, "Geçersiz yer!"); }
	return 1;
}

CMD:isyeri(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

	if(Oyuncu_Isyerinde(playerid) == -1 && Isyeri_Yakin(playerid) == -1) return HataMesaji(playerid, "Bir iþyerinin içinde ya da yakýnýnda deðilsin.");

	new id = -1, menu[2048];
	if((id = Oyuncu_Isyerinde(playerid)) != -1 && Isyeri_SahipKontrol(playerid, id) || (id = Oyuncu_Isyerinde(playerid)) != -1 && IsyeriBilgi[id][isyeriOrtak] == OyuncuBilgi[playerid][oID] || (id = Oyuncu_Isyerinde(playerid)) != -1 && IsyeriBilgi[id][isyeriSahip] == -1 && OyuncuBilgi[playerid][oAdmin] > 4) {
	    if(IsyeriBilgi[id][isyeriDurum] == 3 && OyuncuBilgi[playerid][oAdmin] < 6 && !IsPlayerAdmin(playerid))
	        return HataMesaji(playerid, "Bakýmdaki iþyeri üzerinde düzenleme yapýlamaz.");

	    if(IsyeriBilgi[id][isyeriTur] != 9) {
	        format(menu, sizeof(menu), "Seçenek\nKilit Durumunu Deðiþtir\nGiriþ Ücretini Deðiþtir\nMüzik Deðiþtir");
	        if((id = Oyuncu_Isyerinde(playerid)) != -1 && IsyeriBilgi[id][isyeriOrtak] == OyuncuBilgi[playerid][oID]) strcat(menu, "\nOrtaklýktan Ayrýl");
	        if((id = Oyuncu_Isyerinde(playerid)) != -1 && Isyeri_SahipKontrol(playerid, id)) strcat(menu, "\nOrtak Deðiþtir\nOrtak Çýkar\nKasa Ýþlemleri\n{B70000}Sisteme Sat");
			DialogGoster(playerid, DIALOG_ISYERI, DIALOG_STYLE_TABLIST_HEADERS, "Ýþyeri Menüsü", menu, "Seç", "Ýptal");
		}
		else if(IsyeriBilgi[id][isyeriTur] == 9) {
		    format(menu, sizeof(menu), "Seçenek\nKilit Durumunu Deðiþtir\nGiriþ Ücretini Deðiþtir\nMüzik Deðiþtir\nBenzin Ücreti Deðiþtir");
	        if((id = Oyuncu_Isyerinde(playerid)) != -1 && IsyeriBilgi[id][isyeriOrtak] == OyuncuBilgi[playerid][oID]) strcat(menu, "\nOrtaklýktan Ayrýl");
	        if((id = Oyuncu_Isyerinde(playerid)) != -1 && Isyeri_SahipKontrol(playerid, id)) strcat(menu, "\nOrtak Deðiþtir\nOrtak Çýkar\nKasa Ýþlemleri\n{B70000}Sisteme Sat");
			DialogGoster(playerid, DIALOG_ISYERI, DIALOG_STYLE_TABLIST_HEADERS, "Ýþyeri Menüsü", menu, "Seç", "Ýptal");
		}
	}
	else if((id = Isyeri_Yakin(playerid)) != -1 && Isyeri_SahipKontrol(playerid, id) || (id = Isyeri_Yakin(playerid)) != -1 && IsyeriBilgi[id][isyeriOrtak] == OyuncuBilgi[playerid][oID] || (id = Isyeri_Yakin(playerid)) != -1 && IsyeriBilgi[id][isyeriSahip] == -1 && OyuncuBilgi[playerid][oAdmin] > 4) {
	    if(IsyeriBilgi[id][isyeriDurum] == 3 && OyuncuBilgi[playerid][oAdmin] < 6 && !IsPlayerAdmin(playerid))
	        return HataMesaji(playerid, "Bakýmdaki iþyeri üzerinde düzenleme yapýlamaz.");

        if(IsyeriBilgi[id][isyeriTur] != 9) {
            format(menu, sizeof(menu), "Seçenek\nKilit Durumunu Deðiþtir\nGiriþ Ücretini Deðiþtir\nMüzik Deðiþtir\nÝsim Deðiþtir");
            if((id = Isyeri_Yakin(playerid)) != -1 && IsyeriBilgi[id][isyeriOrtak] == OyuncuBilgi[playerid][oID]) strcat(menu, "\nOrtaklýktan Ayrýl");
            if((id = Isyeri_Yakin(playerid)) != -1 && Isyeri_SahipKontrol(playerid, id)) strcat(menu, "\nOrtak Deðiþtir\nOrtak Çýkar\n{B70000}Sisteme Sat");
			DialogGoster(playerid, DIALOG_ISYERI, DIALOG_STYLE_TABLIST_HEADERS, "Ýþyeri Menüsü", menu, "Seç", "Ýptal");
		}
		else if(IsyeriBilgi[id][isyeriTur] == 9) {
		    format(menu, sizeof(menu), "Seçenek\nKilit Durumunu Deðiþtir\nGiriþ Ücretini Deðiþtir\nMüzik Deðiþtir\nÝsim Deðiþtir\nBenzin Ücreti Deðiþtir");
            if((id = Isyeri_Yakin(playerid)) != -1 && IsyeriBilgi[id][isyeriOrtak] == OyuncuBilgi[playerid][oID]) strcat(menu, "\n{B70000}Ortaklýktan Ayrýl");
            if((id = Isyeri_Yakin(playerid)) != -1 && Isyeri_SahipKontrol(playerid, id)) strcat(menu, "\nOrtak Deðiþtir\nOrtak Çýkar\n{B70000}Sisteme Sat");
			DialogGoster(playerid, DIALOG_ISYERI, DIALOG_STYLE_TABLIST_HEADERS, "Ýþyeri Menüsü", menu, "Seç", "Ýptal");
		}
	}
	else HataMesaji(playerid, "Bu iþyerinin sahibi veya ortaðý deðilsin.");
	return 1;
}

CMD:e(playerid, params[])
{
    if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) {
		HataMesaji(playerid, "Taser veya beanbag etkisindeyken konuþamazsýn.");
		cmd_ame(playerid, "konuþmaya çalýþýr ancak elektro þok etkisinde olduðu için söylediði anlaþýlmaz.");
		return 1;
	}
	if(isnull(params)) return KullanimMesaji(playerid, "/e [ev konuþma]");

	if(Ev_Yakin(playerid) != -1) {
		foreach(new o : Player) if(Oyuncu_EvKapida(o) == Ev_Yakin(playerid)) SendClientMessageEx(o, RENK_BEYAZ, "(Ev Dýþý) %s: %s", OyuncuIsim(playerid), params);
		SendClientMessageEx(playerid, RENK_BEYAZ, "(Ev Dýþý) %s: %s", OyuncuIsim(playerid), params);
  		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
 		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] [EVDISI]%s(%d): %s (EVID: %d)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params, EvBilgi[Oyuncu_EvKapida(playerid)][evID]);
		Gunluk_LogKaydet(log_icerik);
	}
	else if(Oyuncu_EvKapida(playerid) != -1) {
		foreach(new o : Player) if(Ev_Yakin(o) == Oyuncu_EvKapida(playerid)) SendClientMessageEx(o, RENK_BEYAZ, "(Ev Ýçi) %s: %s", OyuncuIsim(playerid), params);
		SendClientMessageEx(playerid, RENK_BEYAZ, "(Ev Ýçi) %s: %s", OyuncuIsim(playerid), params);
  		new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
 		GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
		format(log_icerik, sizeof(log_icerik), "[%s] [EVICI]%s(%d): %s (EVID: %d)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], params, EvBilgi[Oyuncu_EvKapida(playerid)][evID]);
		Gunluk_LogKaydet(log_icerik);
	}
	else HataMesaji(playerid, "Bir eve yakýn veya bir evin içinde deðilsin.");
	return 1;
}

CMD:evdolap(playerid, params[])
{
	new evid = Oyuncu_Evde(playerid), id = EvDolap_Yakin(playerid);
	if(evid == -1) return HataMesaji(playerid, "Bir evin içerisinde deðilsin.");
	if(id == -1) return HataMesaji(playerid, "Yakýnýnda bir ev dolabý yok.");
	new maks_slot = 10, dolap_icerik[512];
	switch(DolapBilgi[id][dolapModel]) {
		case 2131: maks_slot = 10;
		case 2141: maks_slot = 6;
		case 2133: maks_slot = 3;
		default: maks_slot = 3;
 	}
	for(new i = 0; i != maks_slot; i++) format(dolap_icerik, sizeof(dolap_icerik), "%sSlot %d:\t\t%d\n", dolap_icerik, i + 1, DolapBilgi[id][dolapKiyafet][i]);
	DialogGoster(playerid, DIALOG_EVDOLAP, DIALOG_STYLE_TABLIST, "Ev - Kýyafet Dolabý", dolap_icerik, "Seç", "Kapat");
	return 1;
}

CMD:ev(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

	new id = -1, menu[2048], ekleme[128], evdurum[32];
	if((id = Oyuncu_Evde(playerid)) != -1 && Ev_SahipKontrol(playerid, id) || (id = Oyuncu_Evde(playerid)) != -1 && EvBilgi[id][evKiraci] == OyuncuBilgi[playerid][oID] || (id = Oyuncu_Evde(playerid)) != -1 && Ev_AnahtarKontrol(playerid, id)) {
	    if(EvBilgi[id][evDurum] == 3 && !IsPlayerAdmin(playerid) || EvBilgi[id][evDurum] == 4 && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Bakýmdaki ve mühürlü evler üzerinde iþlem yapýlamaz.");

		format(menu, sizeof(menu), "Seçenek\t\tDeðer\n");
		if(Oyuncu_EvKapida(playerid) != -1 && Oyuncu_EvKapida(playerid) == id) {
			switch(EvBilgi[id][evDurum]) {
			    case 1: format(evdurum, sizeof(evdurum), "{338833}Kilitsiz");
			    case 2: format(evdurum, sizeof(evdurum), "{B70000}Kilitli");
				case 3: format(evdurum, sizeof(evdurum), "{E0AB2F}Bakým / Tadilat");
				case 4: format(evdurum, sizeof(evdurum), "{B70000}Mühürlü");
				case 5: format(evdurum, sizeof(evdurum), "{BA33D1}Kapý Kýrýlmýþ");
			}
			format(ekleme, sizeof(ekleme), "Kilit\t\t[%s]\n", evdurum);
			strcat(menu, ekleme);
		}
		format(ekleme, sizeof(ekleme), "Lamba\t\t[%s]\n", (EvBilgi[id][evLamba] == true) ? ("{B70000}Kapalý") : ("{338833}Açýk"));
		strcat(menu, ekleme);
		if(Ev_SahipKontrol(playerid, id) || Ev_AnahtarKontrol(playerid, id)) {
		    new mobilyalimit;
			switch(EvBilgi[id][evLevel]) {
				case 1: mobilyalimit = 50;
				case 2: mobilyalimit = 100;
				case 3: mobilyalimit = 150;
				case 4: mobilyalimit = 200;
				case 5: mobilyalimit = 250;
				default: mobilyalimit = 50;
			}
			format(ekleme, sizeof(ekleme), "Mobilyalar\t\t[%d/%d]\n", Mobilya_Sayi(id), mobilyalimit);
			strcat(menu, ekleme);
		}
		if(Ev_SahipKontrol(playerid, id)) {
		    new dolap_sayi = 0;
		    for(new s = 0; s != MAKSIMUM_DOLAP; s++) if(DolapBilgi[s][dolapEv] == EvBilgi[id][evID] && DolapBilgi[s][dolapKullanimda] == true) dolap_sayi++;
			format(ekleme, sizeof(ekleme), "Dolaplar\t\t[%d/%d]\nKasa Ýþlemleri\n", dolap_sayi, MAKSIMUM_DOLAP_LIMIT);
			strcat(menu, ekleme);
		}
		if(Raf_Sayi(id, 1) < EvBilgi[id][evLevel] && Ev_SahipKontrol(playerid, id)) strcat(menu, "Raf Ekle\n");
		if(Raf_Sayi(id, 1) != 0 && Ev_SahipKontrol(playerid, id)) strcat(menu, "Raf Düzenle\nRaf Kaldýr\n");
	    DialogGoster(playerid, DIALOG_EV_SAHIP, DIALOG_STYLE_TABLIST_HEADERS, "Ev Menüsü", menu, "Seç", "Ýptal");
	}
	else if((id = Ev_Yakin(playerid)) != -1) {
	    if(EvBilgi[id][evDurum] == 3 && !IsPlayerAdmin(playerid) || EvBilgi[id][evDurum] == 4 && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Bakýmdaki ve mühürlü evler üzerinde iþlem yapýlamaz.");

		format(menu, sizeof(menu), "Seçenek\t\tDeðer\nZil Çal\t\t\n");
		if(Ev_SahipKontrol(playerid, id) || EvBilgi[id][evKiraci] == OyuncuBilgi[playerid][oID] || Ev_AnahtarKontrol(playerid, id)) {
			switch(EvBilgi[id][evDurum]) {
			    case 1: format(evdurum, sizeof(evdurum), "{33AA33}Kilitsiz");
			    case 2: format(evdurum, sizeof(evdurum), "{B70000}Kilitli");
				case 3: format(evdurum, sizeof(evdurum), "{E0AB2F}Bakým / Tadilat");
				case 4: format(evdurum, sizeof(evdurum), "{B70000}Mühürlü");
				case 5: format(evdurum, sizeof(evdurum), "{BA33D1}Kapý Kýrýlmýþ");
			}
			format(ekleme, sizeof(ekleme), "Kilit\t\t[%s]\n", evdurum);
			strcat(menu, ekleme);
		}
		if(EvBilgi[id][evKiralik] == 1) strcat(menu, "Evi Kirala\t\t\n");
		if(EvBilgi[id][evKiraci] == OyuncuBilgi[playerid][oID]) strcat(menu, "\n{B70000}Kiracýlýktan Ayrýl\t\t\n");
		if(EvBilgi[id][evDurum] == 5 && Ev_SahipKontrol(playerid, id)) strcat(menu, "Kapýyý Tamir Et\t\t[$3,000]\n");
		if(!Ev_SahipKontrol(playerid, id) && OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && EvBilgi[id][evDurum] == 2) strcat(menu, "Kapýyý Kýr\t\t\n");
		if(Ev_SahipKontrol(playerid, id) && EvBilgi[id][evLevel] < 5 && EvBilgi[id][evDurum] < 3) format(ekleme, sizeof(ekleme), "Level Yükselt\t\t[%s]\n", NumaraFormati(EV_LEVEL_UCRET)), strcat(menu, ekleme);
		if(Ev_SahipKontrol(playerid, id)) strcat(menu, "Kira Durumu\t\t\nKira Ücreti\t\t\nKiracý Çýkart\t\t\n{B70000}Evi Sat\n");
		if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && !Ev_SahipKontrol(playerid, id) && OyuncuBilgi[playerid][oBirlikRutbe] >= 13) strcat(menu, "{B70000}Evi Mühürle\n");
        DialogGoster(playerid, DIALOG_EV_KAPI, DIALOG_STYLE_TABLIST_HEADERS, "Ev Menüsü", menu, "Seç", "Ýptal");
	}
	else HataMesaji(playerid, "Bir eve yakýn deðilsin veya içerisinde olduðunuz ev sana ait deðil.");
	return 1;
}

CMD:bina(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

	new id = -1, menu[2048];
	if((id = Oyuncu_CikisKapida(playerid)) != -1 || (id = Cikis_Yakin(playerid)) != -1) {
	    if(!Bina_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Bu arka çýkýþ sana ait deðil.");
		switch(BinaBilgi[id][binaDurum]) {
			case 1: {
			    BinaBilgi[id][binaDurum] = 2;
			    Bina_Yenile(id);
			    cmd_ame(playerid, "bina kapýsýný kilitler.");
			}
			case 2: {
			    BinaBilgi[id][binaDurum] = 1;
			    Bina_Yenile(id);
			    cmd_ame(playerid, "bina kapýsýnýn kilidini açar.");
			    foreach(new i : Player) if(MaymuncukVeri[i][mTur] == 3 && MaymuncukVeri[playerid][mHedef] == id) return SunucuMesaji(i, "Maymuncuk kýrýldý."), MaymuncukVeri[i][mSaniye] = 0, OyuncuBilgi[i][oMaymuncuk]--;
			}
			default: HataMesaji(playerid, "Bu çýkýþ kapýsýnýn kilit durumunu deðiþtiremezsin.");
		}
		return 1;
	}
	if((id = Oyuncu_Binada(playerid)) != -1 && Bina_SahipKontrol(playerid, id) || (id = Oyuncu_Binada(playerid)) != -1 && Bina_AnahtarKontrol(playerid, id)) {
	    if(BinaBilgi[id][binaDurum] == 3 && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Bakýmdaki binalar üzerinde iþlem yapýlamaz.");
	    if(BinaBilgi[id][binaTur] == 8 && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Arka çýkýþ türündeki binalarda bu komut kullanýlamaz.");
		format(menu, sizeof(menu), "Seçenek\t\tDeðer\nKilit Durumunu Deðiþtir\n");
		if(Raf_Sayi(id, 2) < BinaBilgi[id][binaLevel] && BinaBilgi[id][binaTur] != 8 || Raf_Sayi(id, 2) < BinaBilgi[id][binaLevel] * 3 && BinaBilgi[id][binaTur] == 9) strcat(menu, "Raf Ekle\n");
		if(Raf_Sayi(id, 2) != 0 && BinaBilgi[id][binaTur] != 8) strcat(menu, "Raf Düzenle\nRaf Kaldýr\n");
	    DialogGoster(playerid, DIALOG_BINA_SAHIP, DIALOG_STYLE_TABLIST_HEADERS, "Bina Menüsü", menu, "Seç", "Ýptal");
	}
	else if((id = Bina_Yakin(playerid)) != -1) {
		if(BinaBilgi[id][binaTur] == 8 && !IsPlayerAdmin(playerid)) return HataMesaji(playerid, "Arka çýkýþ türündeki binalarda bu komut kullanýlamaz.");
		format(menu, sizeof(menu), "Seçenek\t\tDeðer\nZil Çal\t\t\n");
		if(Bina_SahipKontrol(playerid, id) || Bina_AnahtarKontrol(playerid, id)) strcat(menu, "Kilit Durumunu Deðiþtir\t\t\n");
		if(Bina_SahipKontrol(playerid, id)) {
			strcat(menu, "Level Yükselt\t\t\n");
			if(BinaBilgi[id][binaDurum] == 4) strcat(menu, "Kapýyý Tamir Et\t\t[$5,000]\n");
		}
		if(!Bina_SahipKontrol(playerid, id) && !Bina_AnahtarKontrol(playerid, id) && OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && BinaBilgi[id][binaDurum] == 2) strcat(menu, "Kapýyý Kýr\t\t\n");
        DialogGoster(playerid, DIALOG_BINA_KAPI, DIALOG_STYLE_TABLIST_HEADERS, "Bina Menüsü", menu, "Seç", "Ýptal");
	}
	else HataMesaji(playerid, "Bir binaya yakýn deðilsin veya içerisinde olduðunuz bina sana ait deðil.");
	return 1;
}

CMD:evlamba(playerid, params[])
{
	new id = -1, id2 = -1;
	if((id = Oyuncu_Evde(playerid)) == -1) return HataMesaji(playerid, "Herhangi bir evde deðilsin.");
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

	switch(EvBilgi[id][evLamba]) {
		case true: {
			EvBilgi[id][evLamba] = false;
			cmd_ame(playerid, "ýþýklarý açar.");
 			foreach(new i : Player) if((id2 = Oyuncu_Evde(i)) != -1 && id2 == id) {
				PlayerTextDrawHide(i, LambaText[i]);
			}
		}
		case false: {
			EvBilgi[id][evLamba] = true;
			cmd_ame(playerid, "ýþýklarý kapatýr.");
			foreach(new i : Player) if((id2 = Oyuncu_Evde(i)) != -1 && id2 == id) {
				PlayerTextDrawShow(i, LambaText[i]);
			}
		}
  	}
	return 1;
}

CMD:fabrikalar(playerid, params[])
{
    if(OyuncuBilgi[playerid][oEhliyetTesti] > 0) return HataMesaji(playerid, "Ehliyet testinde bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oKelepceli] != 0) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

	static bilgi[1024], sayi;
	bilgi[0] = 0;
	sayi = 0;
	strcat(bilgi, "Ad\t\tÜrün\n");
	for(new f = 0; f != MAKSIMUM_FABRIKA; f++) if(FabrikaBilgi[f][fKullanimda] == true) {
		format(bilgi, sizeof(bilgi), "%s%s\t\t%s\n", bilgi, FabrikaBilgi[f][fabrikaAd], FabrikaBilgi[f][fUrun]);
		sayi++;
	}
	if(sayi == 0) return HataMesaji(playerid, "Aktif fabrika bulunmuyor.");

	DialogGoster(playerid, DIALOG_FABRIKALAR, DIALOG_STYLE_TABLIST_HEADERS, "Fabrikalar", bilgi, "Seç", "Ýptal");
	return true;
}

CMD:fabrikayarat(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 6) return YetkinizYok(playerid);
    if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return HataMesaji(playerid, "Interior ve farklý dünyalara ev eklenemez.");
	static urun[64], ucret;
	if(sscanf(params, "s[64]d", urun, ucret)) return KullanimMesaji(playerid, "/fabrikayarat [ürün] [ücret]");
	new id;
	id = Fabrika_Yarat(playerid, urun, ucret);

	if(id == -1)
	    return HataMesaji(playerid, "Sunucu fabrika limitine ulaþtýðý için yeni fabrika yaratýlamýyor!");

	SunucuMesaji(playerid, "Yeni bir fabrika yarattýn. (ID: %d)", id);
	return 1;
}

CMD:afabrika(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 6) return YetkinizYok(playerid);

	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/afabrika [id] [parametre]");
	    SendClientMessage(playerid, RENK_SARI, "[PARAMETRELER]:{FFFFFF} lokasyon, urun, ucret, sahip, isim, sil");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_FABRIKA) || !FabrikaBilgi[id][fKullanimda])
	    return HataMesaji(playerid, "Geçersiz fabrika!");

	if(!strcmp(type, "lokasyon", true))
	{
	    GetPlayerPos(playerid, FabrikaBilgi[id][fPos][0], FabrikaBilgi[id][fPos][1], FabrikaBilgi[id][fPos][2]);
		GetPlayerFacingAngle(playerid, FabrikaBilgi[id][fPos][3]);

		Fabrika_Yenile(id);
		Fabrika_Kaydet(id);

		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir fabrikanýn lokasyonunu deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
		return true;
	}
	else if(!strcmp(type, "urun", true))
	{
		static urun[64];
		if(sscanf(string, "s[64]", urun))
		    return KullanimMesaji(playerid, "/afabrika [id] [urun] [ürün ismi]");

	    if(strlen(urun) < 3)
	        return HataMesaji(playerid, "En az 3 karakter kullanmak zorundasýn.");

		format(FabrikaBilgi[id][fUrun], 64, "%s", urun);
		Fabrika_Kaydet(id);
		Fabrika_Yenile(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir fabrikanýn ürününü deðiþtirdi. (ID: %d | Ürün: %s)", OyuncuBilgi[playerid][oAdminNick], id, urun);
		return true;
	}
	else if(!strcmp(type, "sahip", true))
	{
		static sahip[32];
		if(sscanf(string, "s[32]", sahip))
		    return KullanimMesaji(playerid, "/afabrika [id] [sahip] [sahip ismi]");

	    if(strlen(sahip) < 3)
	        return HataMesaji(playerid, "En az 3 karakter kullanmak zorundasýn.");

		format(FabrikaBilgi[id][fSahip], 32, "%s", sahip);
		Fabrika_Kaydet(id);
		Fabrika_Yenile(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir fabrikanýn sahibini deðiþtirdi. (ID: %d | Sahip: %s)", OyuncuBilgi[playerid][oAdminNick], id, sahip);
		return true;
	}
	else if(!strcmp(type, "isim", true))
	{
		static isim[48];
		if(sscanf(string, "s[48]", isim))
		    return KullanimMesaji(playerid, "/afabrika [id] [isim] [fabrika ismi]");

	    if(strlen(isim) < 3)
	        return HataMesaji(playerid, "En az 3 karakter kullanmak zorundasýn.");

		format(FabrikaBilgi[id][fabrikaAd], 32, "%s", isim);
		Fabrika_Kaydet(id);
		Fabrika_Yenile(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir fabrikanýn ismini deðiþtirdi. (ID: %d | Ýsim: %s)", OyuncuBilgi[playerid][oAdminNick], id, isim);
		return true;
	}
	else if(!strcmp(type, "ucret", true))
	{
		new ucret;
		if(sscanf(string, "d", ucret))
		    return KullanimMesaji(playerid, "/afabrika [id] [ucret] [ücret miktarý]");

		if(ucret < 1 || ucret > 1000)
		    return HataMesaji(playerid, "Ürün fiyatý 1 den az, 1000'den fazla olamaz.");

		FabrikaBilgi[id][fUcret] = ucret;
		Fabrika_Kaydet(id);
		Fabrika_Yenile(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir fabrikanýn ürün ücretini deðiþtirdi. (ID: %d | Ücret: %s)", OyuncuBilgi[playerid][oAdminNick], id, NumaraFormati(ucret));
		return true;
	}
	else if(!strcmp(type, "sil", true))
	{
		Fabrika_Sil(id);
		SunucuMesaji(playerid, "Fabrika %d baþarýyla silindi!", id);
	}
	return true;
}

CMD:graffiti(playerid, params[])
{
	if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Birlik üyesi deðilsin.");
	if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikOnay][7] == 0) return HataMesaji(playerid, "Birliðinin graffiti izni yok.");

	new id = Graffiti_Yakin(playerid);
	if(id == -1) return HataMesaji(playerid, "Yakýnýnýzda boyayabileceðiniz bir grafiti noktasý yok.");
	
	DialogGoster(playerid, DIALOG_GRAFFITI_RENK, DIALOG_STYLE_TABLIST, "cGraffiti: Renk Seçimi", "{FFFFFF}Beyaz\n{FF0000}Kýrmýzý\n{FFFF00}Sarý\n{33CC33}Yeþil\n{33CCFF}Açýk Mavi\n{FFA500}Turuncu\n{1394BF}Kapalý Mavi", "Seç", "Kapat");
	return 1;
}

CMD:agraffiti(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 4) return YetkinizYok(playerid);

	if(!strcmp(params, "olustur", true)) {
		new id = -1, Float:graffiti_pos[4];
		GetPlayerPos(playerid, graffiti_pos[0], graffiti_pos[1], graffiti_pos[2]);
		GetPlayerFacingAngle(playerid, graffiti_pos[3]);

		id = Graffiti_Olustur(graffiti_pos[0], graffiti_pos[1], graffiti_pos[2], graffiti_pos[3]);

		if(id == -1) return HataMesaji(playerid, "Graffiti limitine ulaþýldý, yeni graffiti olutþurulamýyor.");

		SunucuMesaji(playerid, "Yeni bir graffiti oluþturdun. (ID: %d)", id);
		return 1;
    }
	new id, tip[24], mesaj[128];
	if(sscanf(params, "ds[24]S()[128]", id, tip, mesaj))
 	{
	 	KullanimMesaji(playerid, "/agraffiti [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} olustur, pos, sil");
		return 1;
	}

	if((id < 0 || id >= MAKSIMUM_GRAFFITI) || !GraffitiBilgi[id][graffitiKullanimda])
	    return HataMesaji(playerid, "Geçersiz ID girdiniz.");

	if(!strcmp(tip, "pos", true))
	{
		EditDynamicObject(playerid, GraffitiBilgi[id][graffitiObje]);
		OyuncuBilgi[playerid][oGraffitiDuzenliyor] = id;
	}
	else if(!strcmp(tip, "sil", true))
	{
		Graffiti_Kaldir(id);
		SunucuMesaji(playerid, "Graffiti %d silindi.", id);
	}
	return 1;
}

CMD:ahizradar(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 4) return YetkinizYok(playerid);
	
	if(!strcmp(params, "olustur", true)) {
		new id = Radar_Olustur(playerid, 50, 30);

		if(id == -1) return HataMesaji(playerid, "Sunucu hýz radarý limitine ulaþtýðý için yeni hýz radarý yaratýlamadý.");

		SunucuMesaji(playerid, "Yeni bir hýz radarý oluþturdun(ID: %d), düzenlemek için /ahizradar komutunu kullan.", id);
		return 1;
    }
	new id, tip[24], mesaj[128];
	if(sscanf(params, "ds[24]S()[128]", id, tip, mesaj))
 	{
	 	KullanimMesaji(playerid, "/radarduzenle [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} olustur, hiz, menzil, pos, sil");
		return 1;
	}

	if((id < 0 || id >= MAKSIMUM_HIZRADARI) || !RadarBilgi[id][radarKullanimda])
	    return HataMesaji(playerid, "Geçersiz ID girdiniz.");

	if(!strcmp(tip, "pos", true))
	{
		EditDynamicObject(playerid, RadarBilgi[id][radarObje]);
		OyuncuBilgi[playerid][oDuzenlenenRadar] = id;
	}
	else if(!strcmp(tip, "menzil", true))
	{
	    new Float:menzil;
	    if(sscanf(mesaj, "f", menzil)) return KullanimMesaji(playerid, "/radarduzenle [id] [menzil] [yeni menzil]");

		RadarBilgi[id][radarMenzil] = menzil;
		Radar_Kaydet(id);
		Radar_Yenile(id);
		SunucuMesaji(playerid, "Radar %d'nin menzilini %.0f olarak deðiþtirdiniz.", id, menzil);
	}
	else if(!strcmp(tip, "hiz", true))
	{
	    new Float:hiz;
	    if(sscanf(mesaj, "f", hiz)) return KullanimMesaji(playerid, "/radarduzenle [id] [hiz] [yeni hýz]");

		RadarBilgi[id][radarLimit] = hiz;
		Radar_Kaydet(id);
		Radar_Yenile(id);
		SunucuMesaji(playerid, "Radar %d'nin hýz limitini %.0f olarak deðiþtirdiniz.", id, hiz);
	}
	else if(!strcmp(tip, "sil", true))
	{
		Radar_Sil(id);
		SunucuMesaji(playerid, "Hýz radarý %d silindi.", id);
	}
	return 1;
}

CMD:aev(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5) return YetkinizYok(playerid);
    //
    if(!strcmp(params, "olustur", true)) {
		new id;
		id = Ev_Yarat(playerid, 50000);
		if(id == -1) return HataMesaji(playerid, "Sunucu ev limitine ulaþtýðý için yeni ev yaratýlamýyor!");

		SunucuMesaji(playerid, "Yeni bir ev oluþturdun. (ID: %d)", id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), yeni bir ev oluþturdu. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], EvBilgi[id][evID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ev_admin.txt", "%s", log_icerik);
		return 1;
    }
	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/aev [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} olustur, lokasyon, interior, int, adres, sanaldunya, fiyat, durum, bakimbitir, level, tur, sil");
	    if(OyuncuBilgi[playerid][oAdmin] >= 6) SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} sahip");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_EV) || !EvBilgi[id][evKullanimda]) return HataMesaji(playerid, "Geçersiz ev!");

	if(!strcmp(type, "lokasyon", true))
	{
	    GetPlayerPos(playerid, EvBilgi[id][evPos][0], EvBilgi[id][evPos][1], EvBilgi[id][evPos][2]);
		GetPlayerFacingAngle(playerid, EvBilgi[id][evPos][3]);

		EvBilgi[id][evDisInt] = GetPlayerInterior(playerid);
		EvBilgi[id][evDisVW] = GetPlayerVirtualWorld(playerid);

		Ev_Yenile(id);
		Ev_Kaydet(id);

		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir evin lokasyonunu deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir evin konumunu deðiþtirdi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], EvBilgi[id][evID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ev_admin.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "int", true))
	{
	    GetPlayerPos(playerid, EvBilgi[id][evIcPos][0], EvBilgi[id][evIcPos][1], EvBilgi[id][evIcPos][2]);
		GetPlayerFacingAngle(playerid, EvBilgi[id][evIcPos][3]);

		EvBilgi[id][evInterior] = GetPlayerInterior(playerid);
		SetPlayerVirtualWorld(playerid, EvBilgi[id][evVW]);

		Ev_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir evin interiorunu deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), yeni bir evin interiorunu deðiþtirdi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], EvBilgi[id][evID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ev_admin.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "interior", true))
	{
	    SetPVarInt(playerid, "Ev_Interior", id);
		new str[1536];
		for(new i = 0; i < sizeof(EvInterior); i ++) {
		    strcat(str, EvInterior[i][intIsim]);
		    strcat(str, "\n");
		}
		DialogGoster(playerid, DIALOG_EVINT, DIALOG_STYLE_LIST, "Ev: Interior Düzenle", str, "Seç", "Kapat");
		return 1;
	}
	else if(!strcmp(type, "sanaldunya", true))
	{
	    static dunyaid;
	    if(sscanf(string, "d", dunyaid))
	        return KullanimMesaji(playerid, "/aev [id] [sanaldunya] [sanal dünya]");

	    EvBilgi[id][evVW] = dunyaid;
		Ev_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir evin sanal dünyasýný(VW'sini) deðiþtirdi. (ID: %d | SD: %d)", OyuncuBilgi[playerid][oAdminNick], id, dunyaid);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), evin sanal dünyasýný deðiþtirdi. (ID: %d / SD: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], EvBilgi[id][evID], dunyaid);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ev_admin.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "adres", true))
	{
	    new adres[64];
	    if(sscanf(string, "s[64]", adres)) return KullanimMesaji(playerid, "/aev [id] [adres] [yeni adres]");

	    format(EvBilgi[id][evAdres], 64, adres);
	    Ev_Yenile(id);
	    Ev_Kaydet(id);

		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir evin adresini deðiþitirdi. (ID: %d | Adres: \"%s\")", OyuncuBilgi[playerid][oAdminNick], id, adres);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), evin adresini %s olarak deðiþtirdi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], adres, EvBilgi[id][evID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ev_admin.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "sahip", true) && OyuncuBilgi[playerid][oAdmin] >= 6)
	{
	    new oyuncuid;
	    if(sscanf(string, "d", oyuncuid)) return KullanimMesaji(playerid, "/aev [id] [sahip] [oyuncu ID] - (-1 kaldýrýr)");

		if(oyuncuid == -1) {
		    EvBilgi[id][evSahip] = 0;
		    Ev_Kaydet(id);
		    Ev_Yenile(id);
		    YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir evin sahibini deðiþitirdi. (ID: %d | Sahip: Yok)", OyuncuBilgi[playerid][oAdminNick], id);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir evin sahibini sildi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], EvBilgi[id][evID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/ev_admin.txt", "%s", log_icerik);
		    return 1;
		}
		else {
			if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

			EvBilgi[id][evSahip] = OyuncuBilgi[oyuncuid][oID];
			Ev_Kaydet(id);
			EvBilgi[id][evSahipIsim][0] = 0;
			Ev_Yenile(id);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir evin sahibini deðiþitirdi. (ID: %d | Sahip: %s)", OyuncuBilgi[playerid][oAdminNick], id, OyuncuIsim(oyuncuid));
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), evin sahibini %s(%d) yaptý. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], EvBilgi[id][evID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/ev_admin.txt", "%s", log_icerik);
		}
	}
	else if(!strcmp(type, "fiyat", true))
	{
	    if(EvBilgi[id][evSahip] != 0 && OyuncuBilgi[playerid][oAdmin] < 6) return HataMesaji(playerid, "Bu evin fiyatýný sadece Management deðiþtirebilir.");
	    new fiyat;
	    if(sscanf(string, "d", fiyat)) return KullanimMesaji(playerid, "/aev [id] [fiyat] [yeni fiyat]");
		if(fiyat < 1 || fiyat > 10000000) return HataMesaji(playerid, "Fiyat en az 1, en fazla 10,000,000 olabilir.");

		EvBilgi[id][evFiyat] = fiyat;
		Ev_Yenile(id);
		Ev_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir evin fiyatýný deðiþtirdi. (ID: %d | Yeni Fiyat: %s)", OyuncuBilgi[playerid][oAdminNick], id, NumaraFormati(fiyat));
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir evin fiyatýný %s yaptý. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], NumaraFormati(fiyat), EvBilgi[id][evID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ev_admin.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "durum", true))
	{
		new durum;
		if(sscanf(string, "d", durum)) {
			KullanimMesaji(playerid, "/aev [id] [durum] [durum id]");
			SendClientMessage(playerid, RENK_SARI, "[DURUMLAR]:{FFFFFF} 1: Kilitsiz, 2: Kilitli, 3: Bakým, 4: Mühürlü");
			return 1;
		}
		if(durum < 1 || durum > 5) return HataMesaji(playerid, "Geçersiz durum.");

		EvBilgi[id][evDurum] = durum;
		Ev_Yenile(id);
		Ev_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir evin durumunu deðiþtirdi. (ID: %d | Yeni Durum: %d)", OyuncuBilgi[playerid][oAdminNick], id, durum);
	}
	else if(!strcmp(type, "tur", true))
	{
		new tur;
		if(sscanf(string, "d", tur)) {
			KullanimMesaji(playerid, "/aev [id] [tur] [tur id]");
			SendClientMessage(playerid, RENK_SARI, "[TURLER]:{FFFFFF} 0: Tek Kat, 1: Tek Kat - Geniþ, 2: Çift Kat, 3: Çift Kat - Geniþ, 4: Malikane, 5: Sabit, 6: Karavan");
			return 1;
		}
		if(tur < 0 || tur > 6) return HataMesaji(playerid, "Geçersiz tür.");
		new turisim[48];
		switch(tur) {
		    case 0: format(turisim, sizeof(turisim), "Tek Kat");
		    case 1: format(turisim, sizeof(turisim), "Tek Kat - Geniþ");
		    case 2: format(turisim, sizeof(turisim), "Çift Kat");
		    case 3: format(turisim, sizeof(turisim), "Çift Kat - Geniþ");
		    case 4: format(turisim, sizeof(turisim), "Malikane");
		    case 6: format(turisim, sizeof(turisim), "Karavan");
		    default: format(turisim, sizeof(turisim), "Sabit");
		}
		EvBilgi[id][evTur] = tur;
		Ev_Yenile(id);
		Ev_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir evin türünü deðiþtirdi. (ID: %d | %s)", OyuncuBilgi[playerid][oAdminNick], id, turisim);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), evin türünü %s yaptý. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], turisim, EvBilgi[id][evID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ev_admin.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "level", true))
	{
		new level;
		if(sscanf(string, "d", level)) return KullanimMesaji(playerid, "/aev [id] [level] [level]");

		if(level < 1 || level > 5) return HataMesaji(playerid, "Geçersiz level.");

		EvBilgi[id][evLevel] = level;
		Ev_Yenile(id);
		Ev_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir evin levelini deðiþtirdi. (ID: %d | Yeni Level: %d)", OyuncuBilgi[playerid][oAdminNick], id, level);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), evin levelini %d yaptý. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], level, EvBilgi[id][evID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ev_admin.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "bakimbitir", true))
	{
	    if(EvBilgi[id][evDurum] != 3) return HataMesaji(playerid, "Bu ev bakýmda deðil.");
		EvBilgi[id][evDurum] = 1;
		EvBilgi[id][evBakimSure] = 0;
		Ev_Yenile(id);
		Ev_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir evin bakým süresini bitirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), evin bakým süresini bitirdi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], EvBilgi[id][evID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ev_admin.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "sil", true))
	{
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), bir evi sildi. (ID: %d / SAHIPSQL: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], EvBilgi[id][evID], EvBilgi[id][evSahip]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/ev_admin.txt", "%s", log_icerik);
		Ev_Sil(id);
		SunucuMesaji(playerid, "Ev %d baþarýyla silindi!", id);
	}
	return 1;
}

CMD:maymuncuk(playerid, params[])
{
	if(OyuncuBilgi[playerid][oMaymuncuk] < 1) return HataMesaji(playerid, "Maymuncuðun yok.");
	if(MaymuncukVeri[playerid][mSaniye] > 0) return HataMesaji(playerid, "Þu anda maymuncuk kullandýðýndan menüye tekrar eriþemezsin.");

	DialogGoster(playerid, DIALOG_MAYMUNCUK, DIALOG_STYLE_TABLIST, "Maymuncuk", "Kullan\nSat", "Seç", "Kapat");
	return 1;
}

CMD:satici(playerid, params[])
{
	if(Satici_Yakin(playerid) == -1) return HataMesaji(playerid, "Satýcýya yakýn deðilsin.");
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oSeviye] < 3) return HataMesaji(playerid, "3 seviye olmadan bu komutu kullanamazsýn.");

	new id, yazi[156];
	id = Satici_Yakin(playerid);
	if(OyuncuBilgi[playerid][oBirlik] == -1 && SaticiBilgi[id][sTur] != 3 && SaticiBilgi[id][sTur] != 2 && SaticiBilgi[id][sTur] != 6) return HataMesaji(playerid, "Bir birlikte deðilsin.");
	//if(SaticiBilgi[id][sTur] == 2 && OyuncuBilgi[playerid][oMeslek] != 3 && OyuncuBilgi[playerid][oMeslek] != 4) return HataMesaji(playerid, "Ýllegal bir meslekte deðilsin.");
	if(SaticiBilgi[id][sTur] == 1 && OyuncuBirlikTuru(playerid) != BIRLIK_ILLEGAL) return HataMesaji(playerid, "Birlik türünün Uyuþturucu onayý yok.");
	if(SaticiBilgi[id][sTur] == 3 && BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikOnay][0] == 0) return HataMesaji(playerid, "Onaylý bir birlikte deðilsin veya silah hakkýn yok.");
	if(SaticiBilgi[id][sTur] == 2 && OyuncuBilgi[playerid][oMaymuncuk] > 2) return HataMesaji(playerid, "Daha fazla maymuncuk taþýyamazsýn.");
	switch(SaticiBilgi[id][sTur]) {
		case 1: format(yazi, sizeof(yazi), "Satýcý size %s fiyatýna %d adet tohum satmak istiyor.", NumaraFormati(SaticiBilgi[id][sFiyat]), SaticiBilgi[id][sAdet]);
		case 2: format(yazi, sizeof(yazi), "Satýcý size %s fiyatýna %d adet maymuncuk satmak istiyor.", NumaraFormati(SaticiBilgi[id][sFiyat]), SaticiBilgi[id][sAdet]);
		/*case 3: {
		    if(OyuncuBilgi[playerid][oOynamaSaati] < 12) return HataMesaji(playerid, "Silah alabilmek için en az 12 oynama saatine ihtiyacýn var.");
		    if(OyuncuBilgi[playerid][oSilahDelay] != 0 && OyuncuBilgi[playerid][oSilahHakki] == 0) {
	 			HataMesaji(playerid, "Bir sonraki silah almana: %s", ConvertTime(OyuncuBilgi[playerid][oSilahDelay] - gettime()));
	 			return 1;
			}
			new icerik[512];
		    format(icerik, sizeof(icerik), "Silah\tFiyat\n");
		    format(yazi, sizeof(yazi), "{FFFFFF}Desert Eagle\t{33aa33}%s\n", NumaraFormati(SATICI_DEAGLE_FIYAT));
		    strcat(icerik, yazi);
		    format(yazi, sizeof(yazi), "{FFFFFF}AK47\t{33aa33}%s\n", NumaraFormati(SATICI_AK47_FIYAT));
		    strcat(icerik, yazi);
		    format(yazi, sizeof(yazi), "{FFFFFF}MP5\t{33aa33}%s\n", NumaraFormati(SATICI_MP5_FIYAT));
		    strcat(icerik, yazi);
		    format(yazi, sizeof(yazi), "{FFFFFF}Rifle\t{33aa33}%s\n", NumaraFormati(SATICI_RIFLE_FIYAT));
		    strcat(icerik, yazi);
		    format(yazi, sizeof(yazi), "{FFFFFF}Shotgun\t{33aa33}%s\n", NumaraFormati(SATICI_SHOTGUN_FIYAT));
		    strcat(icerik, yazi);
		    format(yazi, sizeof(yazi), "{FFFFFF}Colt 45/9mm\t{33aa33}%s\n", NumaraFormati(SATICI_9MM_FIYAT));
		    strcat(icerik, yazi);
		    DialogGoster(playerid, DIALOG_SATICI_SILAH, DIALOG_STYLE_TABLIST_HEADERS, "Satýcý - Silah", icerik, "Seç", "Kapat");
		    return 1;
		}*/
		case 4: {
		    if(OyuncuBilgi[playerid][oOynamaSaati] < 12) return HataMesaji(playerid, "Silah veya mermi alabilmek için en az 12 oynama saatine ihtiyacýn var.");
		    new sayi = 0, silahid, mermi, icerik[256], fiyat = 0, eklenecekmermi = 0;
		    format(icerik, sizeof(icerik), "Silah\tMevcut Mermi\tEklenecek Mermi\tFiyat\n");
		 	for(new i = 0; i < 13; i ++)
			{
				GetPlayerWeaponData(playerid, i, silahid, mermi);
				if(silahid > 0 && OyuncuBilgi[playerid][oSilah][SilahSlotBul[silahid]] == silahid) {
					switch(silahid) {
						case WEAPON_DEAGLE: eklenecekmermi = 7, fiyat = 2000;
                        case WEAPON_AK47: eklenecekmermi = 30, fiyat = 3500;
                        case WEAPON_M4: eklenecekmermi = 30, fiyat = 3500;
                        case WEAPON_MP5: eklenecekmermi = 30, fiyat = 2500;
                        case WEAPON_TEC9: eklenecekmermi = 50, fiyat = 2250;
                        case WEAPON_SHOTGUN: eklenecekmermi = 10, fiyat = 2000;
                        case WEAPON_RIFLE: eklenecekmermi = 10, fiyat = 3000;
                        case WEAPON_UZI: eklenecekmermi = 50, fiyat = 2250;
                        case WEAPON_COLT45: eklenecekmermi = 17, fiyat = 1500;
                        case WEAPON_SHOTGSPA: eklenecekmermi = 7, fiyat = 3500;
                        default: continue;
                    }
                    switch(OyuncuBilgi[playerid][oVIP]) {
						case 1: fiyat = 10 * fiyat / 100;
						case 2: fiyat = 25 * fiyat / 100;
						case 3: fiyat = 50 * fiyat / 100;
                    }
					format(icerik, sizeof(icerik), "%s%s\t%s\t%d\t%s\n", icerik, SilahIsim(silahid), NumaraFormati(mermi, ""), eklenecekmermi, NumaraFormati(fiyat)), sayi++;
				}
			}
			if(!sayi) return HataMesaji(playerid, "Üzerinde mermi alabileceðin bir silah bulunmuyor.");
			DialogGoster(playerid, DIALOG_SATICI_MERMI, DIALOG_STYLE_TABLIST_HEADERS, "Satýcý - Mermi", icerik, "Seç", "Kapat");
			return 1;
		}
		case 5: {
		    if(OyuncuBilgi[playerid][oKelepceli] == 0) return HataMesaji(playerid, "Kelepçeli deðilsin.");
		    
		    format(yazi, sizeof(yazi), "Satýcý size %s fiyatýna kelepçe kýrmayý öneriyor.", NumaraFormati(SaticiBilgi[id][sFiyat]));
		}
		/*case 6: {
			format(yazi, sizeof(yazi), "Ürün\tÜretim Ücreti\tMateryal\nGövde\t%s\t1200\nNamlu\t%s\t300\nHazne\t%s\t600\n", NumaraFormati(GOVDE_UCRET), NumaraFormati(NAMLU_UCRET), NumaraFormati(HAZNE_UCRET));
			DialogGoster(playerid, DIALOG_PARCA_URETIM, DIALOG_STYLE_TABLIST_HEADERS, "Silah Parçasý Üretim", yazi, "Üret", "Kapat");
			return 1;
		}
		case 7: {
			format(yazi, sizeof(yazi), "Colt 45/9mm\nDesert Eagle\nShotgun\nMP5\nAK47\nM4\nTEC-9\nUzi");
			DialogGoster(playerid, DIALOG_URETIM_BILGI, DIALOG_STYLE_TABLIST, "Silah Üretim", yazi, "Bilgi", "Kapat");
			return 1;
		}*/
	}
	DialogGoster(playerid, DIALOG_SATICI, DIALOG_STYLE_MSGBOX, "Satýcý", yazi, "Kabul", "Red");
	return 1;
}

CMD:lisans(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2032.8499, -117.4701, 1035.1719)) return HataMesaji(playerid, "Lisans Merkezinde deðilsin.");

	new icerik[2048];
	format(icerik, sizeof(icerik), "Sürücü Lisansý\t%s\nUber Lisansý\tDeðiþken\t%s\n",
		NumaraFormati(LISANS_UCRET_SURUCU),
		NumaraFormati(LISANS_UCRET_AVUKAT)
	);
	DialogGoster(playerid, DIALOG_LISANSMERKEZI, DIALOG_STYLE_TABLIST, "Lisans Merkezi", icerik, "Seç", "Kapat");
	return 1;
}

CMD:aktor(playerid, params[])
{
	if(NPC_Yakin(playerid) == -1) return HataMesaji(playerid, "Aktöre yakýn deðilsin.");
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

	new id;
	id = NPC_Yakin(playerid);
	switch(NPCBilgi[id][nTur]) {
		case 1: DialogGoster(playerid, DIALOG_ISLEMLER, DIALOG_STYLE_TABLIST, "Ýþlemler", "Ceza Öde\nAraç Sigorta\nVergi Öde", "Seç", "Kapat");
		case 2:
		{
		if((id = Oyuncu_Binada(playerid)) != -1) {
	    if(BinaBilgi[id][binaTur] != 1) return HataMesaji(playerid, "Bankada deðilsin.");
		if(OyuncuBilgi[playerid][oBankaSifre] == 0) return DialogGoster(playerid, DIALOG_BANKASIFRE_BELIRLE, DIALOG_STYLE_PASSWORD, "Þifre Oluþturma", "{FFFFFF}Banka hesabýnýza þifre belirlenmemiþ, lütfen kartýnýzda ve banka hesabýnýzda iþlem yapabilmek için 4 haneli bir þifre belirleyin.\n\n{B70000}NOT: {FFFFFF}Þifrenizi baþkalarýyla paylaþmanýz kötü sonuçlar doðurabilir, lütfen banka personelleri dahil olmak üzere hiç kimseyle þifrenizi paylaþmayýn.", "Tamam", "Kapat");
        new baslik[128];
		format(baslik, sizeof(baslik), "{FFFFFF}%s", BinaBilgi[id][bIsim]);
		DialogGoster(playerid, DIALOG_BANKASIFRE, DIALOG_STYLE_PASSWORD, baslik, "{FFFFFF}Bankaya tekrar hoþ geldin, hesabýnda iþlem yapabilmek için lütfen þifreni gir;", "Tamam", "Kapat");
		}
		}
		case 3:
		{
		new icerik[256];
		format(icerik, sizeof(icerik), "Sürücü Lisansý\t%s\nUber Lisansý\tDeðiþken\t%s\n",
		NumaraFormati(LISANS_UCRET_SURUCU),
		NumaraFormati(LISANS_UCRET_AVUKAT));
		DialogGoster(playerid, DIALOG_LISANSMERKEZI, DIALOG_STYLE_TABLIST, "Lisans Merkezi", icerik, "Seç", "Kapat");
		}
		case 4:
		{
		new icerik[144], ucret[16];
 		switch(OyuncuBilgi[playerid][oVIP])
	 	{
		case 1: ucret = "$10,000";
		case 2: ucret = "$5,000";
		case 3: ucret = "Ücretsiz";
		default: ucret = "$20,000";
		}
		format(icerik, sizeof(icerik), "Stil\tÜcret\nBox\t%s\nKungfu\t%s\nGrabkick\t%s\nSýfýrla\t\n", ucret, ucret, ucret, ucret, ucret);
		DialogGoster(playerid, DIALOG_DOVUSSTILI, DIALOG_STYLE_TABLIST_HEADERS, "Dövüþ Stilleri", icerik, "Seç", "Kapat");
		}
		case 5:
		{
			if(OyuncuBilgi[playerid][oHesapNumarasi] == 0) return HataMesaji(playerid, "Banka hesabýn yok.");
			if(OyuncuBilgi[playerid][oBankaSifre] == 0) return HataMesaji(playerid, "Þifre oluþturmadýðýn için sýfýrlama iþlemi yapamamaktayýz.");
			if(OyuncuBilgi[playerid][oTelefon] == 0 || OyuncuBilgi[playerid][oTelefonNumarasi] == 0) return HataMesaji(playerid, "Telefonun yok veya operatöre baðlý deðil.");
			if(OyuncuBilgi[playerid][oTelefonDurum] == false) return HataMesaji(playerid, "Telefonun kapalýyken bu sisteme ulaþamazsýn.");

			new baslik[128];
			format(baslik, sizeof(baslik), "{FFFFFF}%s", BinaBilgi[id][bIsim]);
			OyuncuBilgi[playerid][oDogrulamaKodu] = randomEx(1000, 9999);
			SendClientMessageEx(playerid, RENK_SARI, "[SMS] {D2D2D2}Kart þifresi sýfýrlama için doðrulama kodunuz: %d | Gönderen: ZCN Banka", OyuncuBilgi[playerid][oDogrulamaKodu]);
			switch(OyuncuBilgi[playerid][oTelefonSes]) {
				case true: cmd_ado(playerid, "Telefondan mesaj bildirim sesi geldi.");
				case false: SunucuMesaji(playerid, "Telefonunuz titredi.");
			}
			DialogGoster(playerid, DIALOG_BANKASIFRE_SIFIRLA, DIALOG_STYLE_INPUT, baslik, "{FFFFFF}Bankaya tekrar hoþ geldin, görüyoruz ki þifre sýfýrlama için gelmiþsin.\n\nBilgilerini doðrulayabilmemiz için lütfen telefonuna gelen þifreyi gir:", "Tamam", "Kapat");
			return true;
		}
		case 6:
		{
		if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici olarak iþbaþýndayken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 360.7297, -2036.2222, 7.8556)) return HataMesaji(playerid, "Balýkçý noktasýnda deðilsin.");
		if(avyasagi == true) return HataMesaji(playerid, "Av yasaðýndan dolayý balýkçý izin yapýyor, sonra tekrar gelin!");

		DialogGoster(playerid, DIALOG_BALIKCI, DIALOG_STYLE_TABLIST, "Balýkçý", "Yemler\nBalýk Sat\nBilgi Al", "Seç", "Kapat");
		}
	}
	return 1;
}

CMD:anpc(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);
	if(!strcmp(params, "olustur", true)) {
	    new id = -1;
		id = NPC_Yarat(playerid, 299, 1);
		if(id == -1) return HataMesaji(playerid, "Sunucu npc limitine ulaþtýðý için yeni npc yaratamazsýn.");
		SunucuMesaji(playerid, "Yeni bir npc oluþturdun. (ID: %d)", id);
		return 1;
	}
	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/anpc [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} olustur, kiyafet, lokasyon, tur, sil, isim");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_NPC) || !NPCBilgi[id][nKullanimda])
	    return HataMesaji(playerid, "Geçersiz npc!");

	if(!strcmp(type, "lokasyon", true))
	{
	    GetPlayerPos(playerid, NPCBilgi[id][nPos][0], NPCBilgi[id][nPos][1], NPCBilgi[id][nPos][2]);
		GetPlayerFacingAngle(playerid, NPCBilgi[id][nPos][3]);

		NPCBilgi[id][nInterior] = GetPlayerInterior(playerid);
		NPCBilgi[id][nWorld] = GetPlayerVirtualWorld(playerid);

        NPC_Kaydet(id);
		NPC_Yenile(id);
		
		
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir NPC'nin yerini deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
	}
	else if(!strcmp(type, "kiyafet", true))
	{
	    new kiyafet;
	    if(sscanf(string, "d", kiyafet))
	        return KullanimMesaji(playerid, "/anpc [id] [kiyafet] [yeni kýyafet]");

		NPCBilgi[id][nKiyafet] = kiyafet;
		NPC_Kaydet(id);
		NPC_Yenile(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir NPC'nin kýyafetini deðiþtirdi. (ID: %d | Kýyafet: %d)", OyuncuBilgi[playerid][oAdminNick], id, kiyafet);
	}
    else if(!strcmp(type, "isim", true))
	{
	    new isim[32];

	    if(sscanf(string, "s[32]", isim))
	        return KullanimMesaji(playerid, "/anpc [id] [isim] [yeni isim]");

	    format(NPCBilgi[id][nAd], 32, isim);

		//NPCBilgi[id][nAd] = ad;
		NPC_Kaydet(id);
		NPC_Yenile(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir NPC'nin adýný deðiþtirdi. (ID: %d | Ad: %s)", OyuncuBilgi[playerid][oAdminNick], id, isim);
	}
	else if(!strcmp(type, "tur", true))
	{
	    new tur;
	    if(sscanf(string, "d", tur)) return KullanimMesaji(playerid, "/anpc [id] [tur] [yeni tür]");
		if(tur < 1 || tur > 7) return HataMesaji(playerid, "Geçersiz tür belirlediniz. (1-7)");

		NPCBilgi[id][nTur] = tur;
		NPC_Yenile(id);
		NPC_Kaydet(id);
		new turisim[32];
		switch(tur) {
		    case 1: format(turisim, sizeof(turisim), "Belediye Ýþlemleri");
		    case 2: format(turisim, sizeof(turisim), "Banka Ýþlemleri");
		    case 3: format(turisim, sizeof(turisim), "Lisans Ýþlemleri");
		    case 4: format(turisim, sizeof(turisim), "Spor Öðretmeni");
		    case 5: format(turisim, sizeof(turisim), "Kart Ýþlemleri");
		    case 6: format(turisim, sizeof(turisim), "Balýkçý");
		    case 7: format(turisim, sizeof(turisim), "Silah Üretici");
		}
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir NPC'nin türünü deðiþtirdi. (ID: %d | %s)", OyuncuBilgi[playerid][oAdminNick], id, turisim);
	}
	else if(!strcmp(type, "sil", true))
	{
	    NPC_Sil(id);
		SunucuMesaji(playerid, "NPC'yi kaldýrdýn. (ID: %d)", id);
	}
	return 1;
}

CMD:asatici(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);
	if(!strcmp(params, "olustur", true)) {
	    new id = -1;
		id = Satici_Yarat(playerid, 299, 1);
		if(id == -1) return HataMesaji(playerid, "Sunucu satýcýsý limitine ulaþtýðý için yeni satýcý yaratamazsýn.");
		SunucuMesaji(playerid, "Yeni bir satýcý oluþturdun. (ID: %d)", id);
		return 1;
	}
	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/asatici [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} olustur, kiyafet, lokasyon, fiyat, adet, tur, sil");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_SATICI) || !SaticiBilgi[id][sKullanimda])
	    return HataMesaji(playerid, "Geçersiz satýcý!");

	if(!strcmp(type, "lokasyon", true))
	{
	    GetPlayerPos(playerid, SaticiBilgi[id][sPos][0], SaticiBilgi[id][sPos][1], SaticiBilgi[id][sPos][2]);
		GetPlayerFacingAngle(playerid, SaticiBilgi[id][sPos][3]);

		SaticiBilgi[id][sInterior] = GetPlayerInterior(playerid);
		SaticiBilgi[id][sWorld] = GetPlayerVirtualWorld(playerid);

		Satici_Yenile(id);
		Satici_Kaydet(id);

		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir satýcýnýn yerini deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
	}
	else if(!strcmp(type, "kiyafet", true))
	{
	    new kiyafet;
	    if(sscanf(string, "d", kiyafet))
	        return KullanimMesaji(playerid, "/asatici [id] [kiyafet] [yeni kýyafet]");

		SaticiBilgi[id][sKiyafet] = kiyafet;
		Satici_Kaydet(id);
		Satici_Yenile(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir satýcýnýn kýyafetini deðiþtirdi. (ID: %d | Kýyafet: %d)", OyuncuBilgi[playerid][oAdminNick], id, kiyafet);
	}
	else if(!strcmp(type, "adet", true))
	{
	    new adetsec;
	    if(sscanf(string, "d", adetsec)) return KullanimMesaji(playerid, "/asatici [id] [adet] [yeni adet]");
	    if(adetsec < 1) return HataMesaji(playerid, "Sayý en az 1 olabilir.");

		SaticiBilgi[id][sAdet] = adetsec;
		Satici_Kaydet(id);
		Satici_Yenile(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir satýcýnýn satýþ adedini deðiþtirdi. (ID: %d | Adet: %d)", OyuncuBilgi[playerid][oAdminNick], id, adetsec);
	}
	else if(!strcmp(type, "fiyat", true))
	{
	    static fiyat;
	    if(sscanf(string, "d", fiyat))
	        return KullanimMesaji(playerid, "/asatici [id] [fiyat] [yeni fiyat]");

		if(fiyat < 1)
		    return HataMesaji(playerid, "Fiyat en az 1 olabilir.");

		SaticiBilgi[id][sFiyat] = fiyat;
		Satici_Yenile(id);
		Satici_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir satýcýnýn satýþ fiyatýný deðiþtirdi. (ID: %d | Yeni Fiyat: %s)", OyuncuBilgi[playerid][oAdminNick], id, NumaraFormati(fiyat));
	}
	else if(!strcmp(type, "tur", true))
	{
	    new tur;
	    if(sscanf(string, "d", tur)) return KullanimMesaji(playerid, "/asatici [id] [tur] [yeni tür]");
		if(tur < 1 || tur > 7) return HataMesaji(playerid, "Geçersiz tür belirlediniz. (1-7)");

		SaticiBilgi[id][sTur] = tur;
		Satici_Yenile(id);
		Satici_Kaydet(id);
		new turisim[32];
		switch(tur) {
		    case 1: format(turisim, sizeof(turisim), "Uyuþturucu");
		    case 2: format(turisim, sizeof(turisim), "Maymuncuk");
		    case 3: format(turisim, sizeof(turisim), "Silah Satýcýsý");
		    case 4: format(turisim, sizeof(turisim), "Mermi Satýcýsý");
		    case 5: format(turisim, sizeof(turisim), "Kelepçe Kýrýcý");
		    case 6: format(turisim, sizeof(turisim), "Parça Üretici");
		    case 7: format(turisim, sizeof(turisim), "Silah Üretici");
		}
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir satýcýnýn türünü deðiþtirdi. (ID: %d | %s)", OyuncuBilgi[playerid][oAdminNick], id, turisim);
	}
	else if(!strcmp(type, "sil", true))
	{
	    Satici_Sil(id);
		SunucuMesaji(playerid, "Satýcýyý kaldýrdýn. (ID: %d)", id);
	}
	return 1;
}

CMD:asandik(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 6) return YetkinizYok(playerid);
	if(!strcmp(params, "olustur", true)) {
		new id = -1;
		id = Sandik_Yarat(playerid);

		if(id == -1)
		    return HataMesaji(playerid, "Sunucu maksimum sandýk limitine ulaþtýðý için yeni sandýk eklenemiyor.");

		SunucuMesaji(playerid, "Sandýk sunucuya eklendi. (ID: %d)", id);
		return 1;
	}
	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/asandik [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} olustur, lokasyon, sahip, sil");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_SANDIK) || !SandikBilgi[id][sKullanimda])
	    return HataMesaji(playerid, "Geçersiz sandýk.");

	if(!strcmp(type, "lokasyon", true))
	{
	    static Float:x, Float:y, Float:z;
	    GetPlayerPos(playerid, x, y, z);

		SandikBilgi[id][sPos][0] = x;
		SandikBilgi[id][sPos][1] = y;
		SandikBilgi[id][sPos][2] = z;
		SandikBilgi[id][sInterior] = GetPlayerInterior(playerid);
		SandikBilgi[id][sWorld] = GetPlayerVirtualWorld(playerid);

	    Sandik_Yenile(id);
	    Sandik_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir sandýðýn yerini deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
	}
 	else if(!strcmp(type, "sahip", true))
	{
	    new sahip;
	    if(sscanf(string, "u", sahip)) return KullanimMesaji(playerid, "/asandik [id] [sahip] [ID / Oyuncu]");
        if(!IsPlayerConnected(sahip)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

		format(SandikBilgi[id][sandikSahip], 32, "%s", OyuncuIsim(sahip));
	    Sandik_Yenile(id);
	    Sandik_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir sandýðýn sahibini deðiþtirdi. (ID: %d | Sahip: %s)", OyuncuBilgi[playerid][oAdminNick], id, OyuncuIsim(sahip));
	}
 	else if(!strcmp(type, "sil", true))
	{
		Sandik_Sil(id);
		SunucuMesaji(playerid, "Sandýk baþarýyla kaldýrýldý. (ID: %d)", id);
	}
	return 1;
}

CMD:oykullan(playerid, params[])
{
	if(Sandik_Yakin(playerid) == -1) return HataMesaji(playerid, "Sandýða yakýn deðilsin.");
    if(GetPVarInt(playerid, "Oy") > 0) return HataMesaji(playerid, "Zaten oy kullanmýþsýn.");
	if(OyuncuBilgi[playerid][oSeviye] < 3 && !IsPlayerAdmin(playerid) && OyuncuBilgi[playerid][oAdmin] < 1 && OyuncuBilgi[playerid][oDestekEkibi] < 1)
		return HataMesaji(playerid, "Oy kullanabilmeniz için 3 seviye ya da yönetici olman gerekmektedir.");

	if(!strcmp(SandikBilgi[Sandik_Yakin(playerid)][sandikSahip], OyuncuIsim(playerid), true)) return HataMesaji(playerid, "Kendine oy kullanamazsýn.");
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

	static id;
	id = Sandik_Yakin(playerid);
	SunucuMesaji(playerid, "%s adlý kiþi için oy kullandýn, teþekkürler.", SandikBilgi[id][sandikSahip]);
	SetPVarInt(playerid, "Oy", 1);
	SandikBilgi[id][sOy]++;
	Sandik_Yenile(id);
	Sandik_Kaydet(id);
	return 1;
}

CMD:hapis(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
	if(Tutuklama_Yakin(playerid) == -1) return HataMesaji(playerid, "Tutuklama noktasýna yakýn deðilsin.");
	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/hapis [ID / Oyuncu]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!YakinlikKontrol(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Kendini hapise atamazsýn.");
	if(OyuncuBilgi[oyuncuid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici iþbaþýndaki kiþiler hapise atýlamaz.");
	if(OyuncuBirlikTuru(oyuncuid) == BIRLIK_POLIS) return HataMesaji(playerid, "Polisler hapise atýlamaz.");
	if(OyuncuBilgi[oyuncuid][oKelepceli] == 0) return HataMesaji(playerid, "Oyuncu kelepçelenmeden hapise atýlamaz.");
	if(OyuncuBilgi[oyuncuid][oYarali]) return HataMesaji(playerid, "Bu kiþi yaralý önce tedavi olmasý gerekiyor.");
	if(OyuncuBilgi[oyuncuid][oSurukleniyor] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Bu oyuncu sürükleniyor, hapise atýlamaz.");

	new isim[MAX_PLAYER_NAME + 1], sorgu[512];
	GetPlayerName(oyuncuid, isim, sizeof(isim));
	format(sorgu, sizeof(sorgu), "SELECT * FROM aranmakayitlari WHERE Oyuncu = '%s'", isim);
	mysql_tquery(mysqlB, sorgu, "Hapis_Sicil", "dd", playerid, oyuncuid);
	return 1;
}

CMD:kefalet(playerid, params[])
{
	if(OyuncuBilgi[playerid][oHapisSure][1] < 600) return HataMesaji(playerid, "Hapiste deðilsin veya süren 10 saniyenin altýnda.");
	
	new gerekliucret = OyuncuBilgi[playerid][oHapisSure][1] / 60 * 200, dialog_mesaj[144];
	format(dialog_mesaj, sizeof(dialog_mesaj), "%s ödeyerek kefalet karþýlýðýnda hapisten çýkacaksýn, onaylýyor musun?", NumaraFormati(gerekliucret));
	DialogGoster(playerid, DIALOG_KEFALET, DIALOG_STYLE_MSGBOX, "vRP: Kefalet", dialog_mesaj, "Evet", "Hayýr");
	return 1;
}

CMD:atutuklama(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);
    if(!strcmp(params, "olustur", true)) {
		new id = -1;
		id = TutuklamaNoktasi_Yarat(playerid);

		if(id == -1)
		    return HataMesaji(playerid, "Sunucu maksimum tutuklama noktasý limitine ulaþtýðý için yeni tutuklama noktasý eklenemiyor.");

		SunucuMesaji(playerid, "Yeni tutuklama noktasý sunucuya eklendi. (ID: %d)", id);
		return 1;
    }
	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/atutuklama [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} olustur, lokasyon, hapis, sil");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_TUTUKLAMANOKTASI) || !TutuklamaNoktasi[id][tKullanimda])
	    return HataMesaji(playerid, "Geçersiz tutuklama noktasý.");

	if(!strcmp(type, "lokasyon", true))
	{
	    GetPlayerPos(playerid, TutuklamaNoktasi[id][tPos][0], TutuklamaNoktasi[id][tPos][1], TutuklamaNoktasi[id][tPos][2]);
	    GetPlayerFacingAngle(playerid, TutuklamaNoktasi[id][tPos][3]);
		TutuklamaNoktasi[id][tInterior] = GetPlayerInterior(playerid);
		TutuklamaNoktasi[id][tWorld] = GetPlayerVirtualWorld(playerid);

	    TutuklamaNoktasi_Yenile(id);
	    TutuklamaNoktasi_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir tutuklama noktasýnýn yerini deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
	}
 	else if(!strcmp(type, "hapis", true))
	{
	    GetPlayerPos(playerid, TutuklamaNoktasi[id][hPos][0], TutuklamaNoktasi[id][hPos][1], TutuklamaNoktasi[id][hPos][2]);
	    GetPlayerFacingAngle(playerid, TutuklamaNoktasi[id][hPos][3]);
		TutuklamaNoktasi[id][hInterior] = GetPlayerInterior(playerid);
		TutuklamaNoktasi[id][hWorld] = GetPlayerVirtualWorld(playerid);

	    TutuklamaNoktasi_Yenile(id);
	    TutuklamaNoktasi_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili tutuklama noktasýnýn hapis interiorunu deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
	}
 	else if(!strcmp(type, "sil", true))
	{
		TutuklamaNoktasi_Kaldir(id);
		SunucuMesaji(playerid, "Tutuklama noktasý kaldýrýldý. (ID: %d)", id);
	}
	return 1;
}

CMD:uyusturucu(playerid, params[])
{
	new icerik[1024];
	format(icerik, sizeof(icerik), "{AFAFAF}Uyuþturucu Kullan\n{AFAFAF}Uyuþturucu Sat\n{AFAFAF}Tohum Ver\n");
	if(OyuncuBilgi[playerid][oBirlik] > -1 && OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) strcat(icerik, "{B70000}Saksý Kaldýr\n");
	if(OyuncuBilgi[playerid][oBirlik] > -1 && OyuncuBirlikTuru(playerid) == BIRLIK_ILLEGAL) format(icerik, sizeof(icerik), "{AFAFAF}Uyuþturucu Kullan\n{AFAFAF}Uyuþturucu Sat\n{AFAFAF}Tohum Ver\n{AFAFAF}Tohum Dik\n{AFAFAF}Saksý Bakým\n{AFAFAF}Saksý Topla\n{B70000}Saksý Kaldýr");

	DialogGoster(playerid, DIALOG_UYUSTURUCU, DIALOG_STYLE_TABLIST, "Uyuþturucu - Menü", icerik, "Seç", "Kapat");
	return 1;
}

CMD:uisle(playerid, params[])
{
	if(OyuncuBilgi[playerid][oIslenmemisMadde] < 1) return HataMesaji(playerid, "Üzerinde iþlenmemiþ madde yok.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 769.40, -335.17, 715.62)) return HataMesaji(playerid, "Laboratuvara yakýn deðilsin.");
	if(OyuncuBilgi[playerid][oPara] < ISLEME_UCRET) {
		HataMesaji(playerid, "Ýþleme için yeterli ücreti karþýlayamýyorsun. (%s)", NumaraFormati(ISLEME_UCRET));
	    return 1;
	}

	OyuncuBilgi[playerid][oIslemeSure] = ISLEME_SANIYE;
	cmd_ame(playerid, "bazý kimyasallarý karýþtýrarak bir þeyler üretir.");
	return 1;
}

/*CMD:uduzenle(playerid, params[])
{
	if(Uyusturucu_Yakin(playerid) == -1) return HataMesaji(playerid, "Yakýnýnda uyuþturucu saksýsý yok.");

	new id;
	id = Uyusturucu_Yakin(playerid);
	EditDynamicObject(playerid, UyusturucuBilgi[id][uObje]);
	OyuncuBilgi[playerid][uDuzenliyor] = id;
	return 1;
}*/

CMD:udakika(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);
	new id;
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/udakika [id]");
	if((id < 0 || id >= MAKSIMUM_UYUSTURUCU) || !UyusturucuBilgi[id][uKullanimda]) return HataMesaji(playerid, "Girilen ID geçersiz.");

    UyusturucuBilgi[id][uGenelDakika]++;
	if(UyusturucuBilgi[id][uBakim] == 1 && UyusturucuBilgi[id][uDakika] < 45) {
	    UyusturucuBilgi[id][uDakika]++;
		switch(UyusturucuBilgi[id][uDakika]) {
			case 9: UyusturucuBilgi[id][uDurum] += 20;
			case 18: UyusturucuBilgi[id][uDurum] += 20;
			case 27: UyusturucuBilgi[id][uDurum] += 20;
			case 36: UyusturucuBilgi[id][uDurum] += 20;
			case 45: UyusturucuBilgi[id][uDurum] = 100;
		}
	}
	if(UyusturucuBilgi[id][uDakika] == 15 && UyusturucuBilgi[id][uTur] < 3 || UyusturucuBilgi[id][uDakika] == 30 && UyusturucuBilgi[id][uTur] < 3) {
	    UyusturucuBilgi[id][uBakim] = 0;
	    Uyusturucu_Yenile(id);
	}
	if(IsValidDynamic3DTextLabel(UyusturucuBilgi[id][uText])) {
		new uyusturucutext[192];
		format(uyusturucutext, sizeof(uyusturucutext), "{FCFCFC}Durum: {10F2C5}%d%%\n{FCFCFC}Bakým: {FF8B26}%s\n{FCFCFC}Bakým Yapýlan: {FF8B26}%d dakika\n{FCFCFC}Toplam Dakika: {FF8B26}%d dakika", UyusturucuBilgi[id][uDurum], (UyusturucuBilgi[id][uBakim] == 1) ? ("Yapýlmýþ") : ("Yapýlmamýþ"), UyusturucuBilgi[id][uDakika], UyusturucuBilgi[id][uGenelDakika]);
		UpdateDynamic3DTextLabelText(UyusturucuBilgi[id][uText], RENK_SERVER, uyusturucutext);
	}
	if(UyusturucuBilgi[id][uGenelDakika] >= 1440) Uyusturucu_Sil(id);
	return 1;
}

CMD:udurum(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);
	new id, durum;
	if(sscanf(params, "dd", id, durum)) return KullanimMesaji(playerid, "/udurum [id] [durum]");
	if((id < 0 || id >= MAKSIMUM_UYUSTURUCU) || !UyusturucuBilgi[id][uKullanimda]) return HataMesaji(playerid, "Girilen ID geçersiz.");
	if(durum < 0 || durum > 100) return HataMesaji(playerid, "Geçersiz durum!");

	UyusturucuBilgi[id][uDurum] = durum;
	Uyusturucu_Yenile(id);
	Uyusturucu_Kaydet(id);
	return 1;
}

CMD:ukaldir(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 4) return YetkinizYok(playerid);
	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/ukaldir [ID / Oyuncu]");
    if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
    if(Uyusturucu_Sayi(oyuncuid) == 0) return HataMesaji(playerid, "Oyuncuya ait ekilmiþ bir saksý yok.");

    for(new i = 0; i != MAKSIMUM_UYUSTURUCU; i ++) if(UyusturucuBilgi[i][uKullanimda] == true && UyusturucuBilgi[i][uSahip] == OyuncuBilgi[oyuncuid][oID]) Uyusturucu_Sil(i);
	SunucuMesaji(playerid, "%s adlý kiþinin ekilmiþ tüm saksýlarýný kaldýrdýn.", OyuncuIsim(oyuncuid));
	SunucuMesaji(playerid, "%s adlý yetkili ekilmiþ tüm saksýlarýný kaldýrdý.", OyuncuBilgi[playerid][oAdminNick]);
	return 1;
}

/*CMD:atmpara(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5) return YetkinizYok(playerid);
    

    new miktar;
    if(sscanf(params, "d", miktar)) return KullanimMesaji(playerid, "/atmpara [yeni miktar]");
    if(miktar < 0 || miktar > 1000000) return HataMesaji(playerid, "Miktar en az $0, en fazla $1,000,000 olmalýdýr.");
    new sayi = 0;
    for(new i = 0; i != MAKSIMUM_ATM; i ++) if(ATMBilgi[i][atmKullanimda]) ATMBilgi[i][atmPara] = miktar, ATM_Yenile(i), ATM_Kaydet(i), sayi++;
    SunucuMesaji(playerid, "%d adet ATM'nin parasýný %s olarak deðiþtirdin.", sayi, NumaraFormati(miktar));
    YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s tüm ATM'lerin içerisindeki parayý %s olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], NumaraFormati(miktar));
	return 1;
}*/

CMD:tezgahkaldir(playerid, params[])
{
	new id = Stand_Yakin(playerid);
    if(Stand_Yakin(playerid) == -1) return HataMesaji(playerid, "Yakýnýnda bir bina yok.");
    if(StandBilgi[id][standSahip] != playerid) return HataMesaji(playerid, "Kendine ait olmayan tezgahlarý silemezsin.");
    Stand_Sil(id);
    SunucuMesaji(playerid, "Tezgahýn baþarýyla kaldýrýldý.");
    cmd_ame(playerid, "tezgahýný toparlar.");
	OyuncuBilgi[playerid][oTezgahtar] = 0;
	return 1;
}

CMD:tezgahkur(playerid, params[])
{
    new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Bu komutu kullanabilmek için giriþ yapmalýsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken bu iþlemi yapamazsýn.");
	if(OyuncuBilgi[playerid][oTezgahtar] > 0) return HataMesaji(playerid, "Birden fazla tezgah kuramazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] != 0 || GetPlayerState(playerid) == PLAYER_STATE_SPECTATING) return HataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");
	if(PetKontrol[playerid] != -1) return HataMesaji(playerid, "Pet kontrolündeyken tezgah kuramazsýn.");
	if(OyuncuBilgi[playerid][oPaintball] != -1) return HataMesaji(playerid, "Paintballdayken tezgah kuramazsýn.");
	DialogGoster(playerid, DIALOG_TEZGAHKUR, DIALOG_STYLE_TABLIST, "Tezgah Kurma Menüsü", "Yemek Tezgahý\nDondurma Tezgahý\nSosisli Tezgahý\nNoodle Tezgahý", "Seç", "Kapat");
	return 1;
}

CMD:aankesorlutelefon(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5) return YetkinizYok(playerid);
    if(!strcmp(params, "olustur", true)) {
		new id = -1;
		id = Ankesorlu_Telefon_Yarat(playerid);

		if(id == -1) return HataMesaji(playerid, "Sunucu ankesörlü telefon limitine ulaþtýðýndan yaratýlamýyor. Texa'ya ulaþýn.");

		SunucuMesaji(playerid, "Yeni bir ankesörlü telefon oluþturdun. (ID: %d)", id);
		return 1;
    }
	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/aankesorlutelefon [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} olustur, lokasyon, sil");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_ANKESORLU_TELEFON) || !ATelBilgi[id][aTelKullanimda])
	    return HataMesaji(playerid, "Geçersiz ID girdiniz.");

	if(!strcmp(type, "lokasyon", true))
	{
	    static Float:x, Float:y, Float:z;
	    GetPlayerPos(playerid, x, y, z);

		ATelBilgi[id][aTelPos][0] = x;
		ATelBilgi[id][aTelPos][1] = y;
		ATelBilgi[id][aTelPos][2] = z - 0.35;
		ATelBilgi[id][aTelInterior] = GetPlayerInterior(playerid);
		ATelBilgi[id][aTelWorld] = GetPlayerVirtualWorld(playerid);

	    Ankesorlu_Telefon_Yenile(id);
	    Ankesorlu_Telefon_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "aLog: %s adlý yetkili bir ankesörlü telefonun yerini deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
	}
	else if(!strcmp(type, "sil", true))
	{
		Ankesorlu_Telefon_Sil(id);
		SunucuMesaji(playerid, "Ankesörlü telefon baþarýyla silindi. (ID: %d)", id);
	}
	return 1;
}

CMD:aatm(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5) return YetkinizYok(playerid);
    
    if(!strcmp(params, "olustur", true)) {
		new id = -1;
		id = ATM_Yarat(playerid);

		if(id == -1) return HataMesaji(playerid, "Sunucu ATM limitine ulaþtýðý için yeni ATM yaratýlamýyor.");

		SunucuMesaji(playerid, "Yeni bir ATM oluþturdun. (AID: %d)", id);
		return 1;
    }
	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/aatm [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} olustur, lokasyon, pos, para, sil");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_ATM) || !ATMBilgi[id][atmKullanimda])
	    return HataMesaji(playerid, "Geçersiz ID girdiniz.");

	if(!strcmp(type, "lokasyon", true))
	{
	    static Float:x, Float:y, Float:z;
	    GetPlayerPos(playerid, x, y, z);

		ATMBilgi[id][atmPos][0] = x;
		ATMBilgi[id][atmPos][1] = y;
		ATMBilgi[id][atmPos][2] = z;
		ATMBilgi[id][atmInterior] = GetPlayerInterior(playerid);
		ATMBilgi[id][atmWorld] = GetPlayerVirtualWorld(playerid);

	    ATM_Yenile(id);
	    ATM_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir atm'nin yerini deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
	}
	else if(!strcmp(type, "pos", true))
	{
		EditDynamicObject(playerid, ATMBilgi[id][atmObje]);
		OyuncuBilgi[playerid][oATMDuzenliyor] = id;
	}
	/*else if(!strcmp(type, "para", true))
	{
	    static miktar;
	    if(sscanf(string, "d", miktar)) return KullanimMesaji(playerid, "/aatm [id] [para] [miktar]");
		if(miktar < 0 || miktar > 1000000) return HataMesaji(playerid, "ATM içerisinde en az 0, en fazla $1,000,000 olabilir.");

		ATMBilgi[id][atmPara] = miktar;
	    ATM_Yenile(id);
	    ATM_Kaydet(id);

		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir atmnin içerisindeki parayý güncelledi. (ID: %d | Miktar: %s)", OyuncuBilgi[playerid][oAdminNick], id, NumaraFormati(ATMBilgi[id][atmPara]));
	}*/
	else if(!strcmp(type, "sil", true))
	{
		ATM_Sil(id);
		SunucuMesaji(playerid, "ATM baþarýyla silindi. (ID: %d)", id);
	}
	return 1;
}

CMD:banka(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýndayken bu komutu kullanamazsýn.");
	new id;
	if((id = Oyuncu_Binada(playerid)) != -1) {
	    if(BinaBilgi[id][binaTur] != 1) return HataMesaji(playerid, "Bankada deðilsin.");
		if(OyuncuBilgi[playerid][oHesapNumarasi] == 0) return HataMesaji(playerid, "Banka hesabýn yok.");
		if(OyuncuBilgi[playerid][oBankaSifre] == 0) return DialogGoster(playerid, DIALOG_BANKASIFRE_BELIRLE, DIALOG_STYLE_PASSWORD, "Þifre Oluþturma", "{FFFFFF}Banka hesabýnýza þifre belirlenmemiþ, lütfen kartýnýzda ve banka hesabýnýzda iþlem yapabilmek için 4 haneli bir þifre belirleyin.\n\n{B70000}NOT: {FFFFFF}Þifrenizi baþkalarýyla paylaþmanýz kötü sonuçlar doðurabilir, lütfen banka personelleri dahil olmak üzere hiç kimseyle þifrenizi paylaþmayýn.", "Tamam", "Kapat");

		new baslik[128];
		format(baslik, sizeof(baslik), "{FFFFFF}%s", BinaBilgi[id][bIsim]);
		DialogGoster(playerid, DIALOG_BANKASIFRE, DIALOG_STYLE_PASSWORD, baslik, "{FFFFFF}Bankaya tekrar hoþ geldin, hesabýnda iþlem yapabilmek için lütfen þifreni gir;", "Tamam", "Kapat");
		return true;
	}
	HataMesaji(playerid, "Bankada deðilsin.");
	return 1;
}

CMD:atm(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýndayken ATM kullanamazsýn.");
	if(ATM_Yakin(playerid) == -1) return HataMesaji(playerid, "ATM makinesinin yanýnda deðilsin.");
	if(OyuncuBilgi[playerid][oHesapNumarasi] == 0) return HataMesaji(playerid, "Banka hesabýn yok.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	
	if(OyuncuBilgi[playerid][oBankaSifre] == 0) return HataMesaji(playerid, "Kartýnýza þifre belirlenmemiþ, lütfen banka üzerinden kartýnýza þifre tanýmlayýn.");

	DialogGoster(playerid, DIALOG_BANKASIFRE, DIALOG_STYLE_PASSWORD, "ATM", "{FFFFFF}hoþ geldiniz, hesabýnda iþlem yapabilmek için lütfen kart þifrenizi giriniz;", "Tamam", "Kapat");
	return 1;
}

CMD:abina(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 5) return YetkinizYok(playerid);
	
	if(!strcmp(params, "olustur", true)) {
		new id = -1;
		id = Bina_Yarat(playerid, VARSAYILAN_BINA_ADI, 1);
		if(id == -1) return HataMesaji(playerid, "Sunucu bina limitine ulaþtýðý için yeni bina yaratýlamýyor!");

		SunucuMesaji(playerid, "Yeni bir bina oluþturdun. (ID: %d)", id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir bina oluþturdu. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BinaBilgi[id][bID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_bina.txt", "%s", log_icerik);
		return 1;
	}
	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/abina [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} olustur, yer, interior, isim, sanaldunya, durum, tur, model, sahip, level, sil");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_BINA) || !BinaBilgi[id][bKullanimda]) return HataMesaji(playerid, "Geçersiz bina!");

	if(!strcmp(type, "yer", true))
	{
	    GetPlayerPos(playerid, BinaBilgi[id][bPos][0], BinaBilgi[id][bPos][1], BinaBilgi[id][bPos][2]);
		GetPlayerFacingAngle(playerid, BinaBilgi[id][bPos][3]);

		BinaBilgi[id][bDisInt] = GetPlayerInterior(playerid);
		BinaBilgi[id][bDisVW] = GetPlayerVirtualWorld(playerid);

		Bina_Yenile(id);
		Bina_Kaydet(id);

		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir binanýn yerini deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir binanýn lokasyonunu deðiþtirdi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BinaBilgi[id][bID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_bina.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "interior", true))
	{
	    if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0 && BinaBilgi[id][binaTur] != 8) return HataMesaji(playerid, "Normal dünyalara interioru koyamazsýn.");
	    GetPlayerPos(playerid, BinaBilgi[id][bIPos][0], BinaBilgi[id][bIPos][1], BinaBilgi[id][bIPos][2]);
		GetPlayerFacingAngle(playerid, BinaBilgi[id][bIPos][3]);

		BinaBilgi[id][bInterior] = GetPlayerInterior(playerid);
		SetPlayerVirtualWorld(playerid, BinaBilgi[id][bVW]);

		Bina_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir binanýn interiorunu deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir binanýn interiorunu deðiþtirdi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BinaBilgi[id][bID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_bina.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "sanaldunya", true))
	{
	    new worldid;
	    if(sscanf(string, "d", worldid)) return KullanimMesaji(playerid, "/abina [id] [sanaldunya] [sanal dünya]");

	    BinaBilgi[id][bVW] = worldid;
		Bina_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir binanýn sanal dünyasýný(VW'sini) deðiþtirdi. (ID: %d | SD: %d)", OyuncuBilgi[playerid][oAdminNick], id, worldid);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) binanýn VW'sini %d yaptý. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], worldid, BinaBilgi[id][bID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_bina.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "isim", true))
	{
	    new isim[32];
	    if(sscanf(string, "s[32]", isim)) return KullanimMesaji(playerid, "/abina [id] [isim] [yeni isim]");
	    format(BinaBilgi[id][bIsim], 32, isim);

	    Bina_Yenile(id);
	    Bina_Kaydet(id);

		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir binanýn ismini deðiþtirdi. (ID: %d | Ýsim: \"%s\")", OyuncuBilgi[playerid][oAdminNick], id, isim);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bina ismini %s yaptý. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], isim, BinaBilgi[id][bID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_bina.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "durum", true))
	{
	    static durum;

	    if(sscanf(string, "d", durum))
	        return KullanimMesaji(playerid, "/abina [id] [durum] [yeni durum]");

		if(durum < 1 || durum > 4)
		    return HataMesaji(playerid, "Geçersiz durum! (1-4)");

	    BinaBilgi[id][binaDurum] = durum;
	    Bina_Yenile(id);
	    Bina_Kaydet(id);

		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir binanýn durumunu deðiþtirdi. (ID: %d | Durum: %d)", OyuncuBilgi[playerid][oAdminNick], id, durum);
	}
	else if(!strcmp(type, "level", true))
	{
	    new level;
	    if(sscanf(string, "d", level)) return KullanimMesaji(playerid, "/abina [id] [level] [yeni level]");
		if(level < 1 || level > 5) return HataMesaji(playerid, "Geçersiz level. (1-5)");

	    BinaBilgi[id][binaLevel] = level;
	    Bina_Yenile(id);
	    Bina_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir binanýn levelini deðiþtirdi. (ID: %d | Level: %d)", OyuncuBilgi[playerid][oAdminNick], id, level);
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bina levelini %d yaptý. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], level, BinaBilgi[id][bID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_bina.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "tur", true))
	{
	    new tur;
	    if(sscanf(string, "d", tur)) {
	        KullanimMesaji(playerid, "/abina [id] [tur] [yeni tür]");
	        SendClientMessageEx(playerid, RENK_SARI, "[TURLER]: {FFFFFF}0: %s - 1: %s - 2: %s - 3: %s - 4: %s - 5: %s", binaturisim(0), binaturisim(1), binaturisim(2), binaturisim(3), binaturisim(4), binaturisim(5));
	        SendClientMessageEx(playerid, RENK_SARI, "[TURLER]: {FFFFFF}6: %s - 7: %s - 8: %s - 9: %s - 10: %s", binaturisim(6), binaturisim(7), binaturisim(8), binaturisim(9), binaturisim(10));
			return 1;
		}
		if(tur < 0 || tur > 10) return HataMesaji(playerid, "Geçersiz bina türü! (0-10)");

	    BinaBilgi[id][binaTur] = tur;
	    Bina_Yenile(id);
	    Bina_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir binanýn türünü deðiþtirdi. (ID: %d | Tür: %s)", OyuncuBilgi[playerid][oAdminNick], id, binaturisim(tur));
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bina türünü %s yaptý. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], binaturisim(tur), BinaBilgi[id][bID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_bina.txt", "%s", log_icerik);
	}
	else if(!strcmp(type, "model", true))
	{
	    static model;
	    if(sscanf(string, "d", model))
			return KullanimMesaji(playerid, "/abina [id] [model] [yeni model]");

		if(model < 1 || model > 21)
		    return HataMesaji(playerid, "Geçersiz model! (1-21)");

	    BinaBilgi[id][bModel] = model;
	    Bina_Yenile(id);
	    Bina_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir binanýn modelini deðiþtirdi. (ID: %d | Model: %d)", OyuncuBilgi[playerid][oAdminNick], id, model);
	}
	else if(!strcmp(type, "sahip", true))
	{
	    new oyuncuid;
	    if(sscanf(string, "d", oyuncuid)) return KullanimMesaji(playerid, "/abina [id] [sahip] [ID / Oyuncu] - (-1 kaldýrýr)");

		if(oyuncuid == -1) {
		    BinaBilgi[id][binaSahip] = 0;
		    Bina_Yenile(id);
		    Bina_Kaydet(id);
		    YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir binanýn sahibini deðiþitirdi. (ID: %d | Sahip: Yok)", OyuncuBilgi[playerid][oAdminNick], id);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir binanýn sahibini sildi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BinaBilgi[id][bID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/admin_bina.txt", "%s", log_icerik);
		    return 1;
		}
		else {
			if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

			BinaBilgi[id][binaSahip] = OyuncuBilgi[oyuncuid][oID];
			BinaBilgi[id][binaSahipIsim][0] = 0;
		    Bina_Yenile(id);
		    Bina_Kaydet(id);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir binanýn sahibini deðiþitirdi. (ID: %d | Sahip: %s)", OyuncuBilgi[playerid][oAdminNick], id, OyuncuIsim(oyuncuid));
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir binanýn sahibini %s(%d) yaptý. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], BinaBilgi[id][bID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/admin_bina.txt", "%s", log_icerik);
		}
	}
	else if(!strcmp(type, "sil", true))
	{
		new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir bina sildi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BinaBilgi[id][bID]);
		Gunluk_LogKaydet(log_icerik);
		Log_Kaydet("loglar/admin_bina.txt", "%s", log_icerik);
		Bina_Sil(id);
		SunucuMesaji(playerid, "Bina %d baþarýyla silindi!", id);
	}
	return 1;
}

CMD:getcar(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new id;
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/getcar [araç id]");
	if(!IsValidVehicle(id) || Arac_IDBul(id) == -1) return HataMesaji(playerid, "Geçersiz araç.");
	new Float:yon, Float:arac_pos[3];
	GetPlayerPos(playerid, arac_pos[0], arac_pos[1], arac_pos[2]);
	GetPlayerFacingAngle(playerid, yon);
	arac_pos[0] += 5.0 * floatsin(-yon, degrees);
	yon += 5.0 * floatcos(-yon, degrees);
	AracPosDegistir(id, arac_pos[0], arac_pos[1], arac_pos[2]);
	SetVehicleVirtualWorld(id, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(id, GetPlayerInterior(playerid));
	SunucuMesaji(playerid, "Araç %d yanýna çekildi.", id);
	if((id = Arac_IDBul(id)) != -1) {
	   	new log_icerik[144];
		format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir aracý yanýna çekti. (SQL: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], AracBilgi[id][aracID]);
		Gunluk_LogKaydet(log_icerik);
		AracBilgi[id][aracWorld] = GetPlayerVirtualWorld(playerid);
		AracBilgi[id][aracInt] = GetPlayerInterior(playerid);
		Arac_Kaydet(id);
	}
	return 1;
}

CMD:respawncar(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	new id;
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/respawncar [araç id]");
	if(!IsValidVehicle(id) || Arac_IDBul(id) == -1) return HataMesaji(playerid, "Geçersiz araç.");

    SunucuMesaji(playerid, "Araç %d respawnlandý.", id);
    id = Arac_IDBul(id);
	Arac_Spawn(id);
	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir araç respawnladý. (SQL: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], AracBilgi[id][aracID]);
	Gunluk_LogKaydet(log_icerik);
	return 1;
}

CMD:respawnallcar(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 2) return HataMesaji(playerid, "Bu komutu kullanma yetkin yok!");

	if(aracrespawn == true) {
		SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili araç respawn iþlemini durdurdu.", OyuncuBilgi[playerid][oAdminNick]);
		KillTimer(arespawntimer);
		aracrespawn = false;
		return 1;
	}
	new saniye;
	if(sscanf(params, "d", saniye)) return KullanimMesaji(playerid, "/respawnallcar [saniye]");
	if(saniye < 1 || saniye > 120) return HataMesaji(playerid, "Saniye en az 1, en fazla 120 olabilir!");

	if(aracrespawn == false) {
		SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili araç respawn iþlemini baþlattý %d saniye sonra araçlar respawnlanacak.", OyuncuBilgi[playerid][oAdminNick], saniye);
		arespawntimer = SetTimerEx("Surucusuz_Arac_Respawn", saniye * 1000, false, "d", playerid);
		aracrespawn = true;
	}
	return 1;
}

CMD:arizakontrol(playerid, params[])
{
	new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araç kullanmýyorsun.");
	if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Birlikte olmadýðýn için bu komutu kullanamazsýn.");
	if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikOnay][4] == 0) return HataMesaji(playerid, "Bu komutu kullanabilmek için birliðine tamirci izni verilmesi gerekiyor.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Aracýn sürücüsü olmalýsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(AracBilgi[aracid][aracArizaTur] == 0 && AracBilgi[aracid][aracTamirde] == 0) return HataMesaji(playerid, "Araç çalýþabilir durumda, bir arýzasý yok.");
	if(OyuncuBilgi[playerid][oArizaTespitDelay] > gettime()) return SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[!]: {FFFFFF}Yeni bir arýza kontrolü için %d saniye beklemelisin.", RENK_KIRMIZI >>> 8, OyuncuBilgi[playerid][oArizaTespitDelay] - gettime());

	
	if(aracid == -1 || !Arac_SahipKontrol(playerid, aracid) && !Arac_Anahtar(playerid, aracid)) return HataMesaji(playerid, "Kendi aracýna veya anahtarýna sahip olduðun araca arýza tespiti yapabilirsin.");
	SunucuMesaji(playerid, "Aracý incelemeye baþladýn, %d saniye sürecek ve sonunda arýza için ipucu alacaksýn.", ARAC_ARIZATESPIT_SURE);
	OyuncuBilgi[playerid][oArizaTespitSure] = ARAC_ARIZATESPIT_SURE;
	OyuncuBilgi[playerid][oArizaliArac] = aracid;
	return 1;
}

CMD:arizatespit(playerid, params[])
{
	new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araç kullanmýyorsun.");
	if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Birlikte olmadýðýn için bu komutu kullanamazsýn.");
	if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikOnay][4] == 0) return HataMesaji(playerid, "Bu komutu kullanabilmek için birliðine tamirci izni verilmesi gerekiyor.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Aracýn sürücüsü olmalýsýn.");
    if(OyuncuBilgi[playerid][oArizaTamirDelay] > gettime()) return SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[!]: {FFFFFF}Yeni bir arýza tamiri için %d saniye beklemelisin.", RENK_KIRMIZI >>> 8, OyuncuBilgi[playerid][oArizaTamirDelay] - gettime());
	if(AracBilgi[aracid][aracArizaTur] == 0 && AracBilgi[aracid][aracTamirde] == 0) return HataMesaji(playerid, "Araç çalýþabilir durumda, bir arýzasý yok.");
	
	if(aracid == -1 || !Arac_SahipKontrol(playerid, aracid) && !Arac_Anahtar(playerid, aracid)) return HataMesaji(playerid, "Kendi aracýný veya anahtarýna sahip olduðun araca aracý tamir edebilirsin.");
	new arizalar[1024], ekleme[256], baslik[64];
	format(arizalar, sizeof(arizalar), "Ýþlem Adý\tFiyat\n");

	format(ekleme, sizeof(ekleme), "{dbdbdb}Marþ Motoru\t[{338833}$200{FFFFFF}]\n");
	strcat(arizalar, ekleme);

	format(ekleme, sizeof(ekleme), "{dbdbdb}Yakýt Pompasý\t[{338833}$125{FFFFFF}]\n");
	strcat(arizalar, ekleme);

	format(ekleme, sizeof(ekleme), "{dbdbdb}Yað Pompasý\t[{338833}$150{FFFFFF}]\n");
	strcat(arizalar, ekleme);

	format(ekleme, sizeof(ekleme), "{dbdbdb}Motor Beyni\t[{338833}$300{FFFFFF}]\n");
	strcat(arizalar, ekleme);

	format(ekleme, sizeof(ekleme), "{dbdbdb}Buji\t[{338833}$100{FFFFFF}]\n");
	strcat(arizalar, ekleme);
	
	format(ekleme, sizeof(ekleme), "{dbdbdb}Diferansiyel\t[{338833}$220{FFFFFF}]\n");
	strcat(arizalar, ekleme);
	

	format(baslik, sizeof(baslik), "Arýza Tamir - Araç", aracid);
	DialogGoster(playerid, DIALOG_ARIZATAMIR, DIALOG_STYLE_TABLIST_HEADERS, baslik, arizalar, "Seç", "Kapat");
	return 1;
}

CMD:modifiye(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araç kullanmýyorsun.");
	if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Birlikte olmadýðýn için bu komutu kullanamazsýn.");
	if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikOnay][4] == 0) return HataMesaji(playerid, "Bu komutu kullanabilmek için birliðine tamirci izni verilmesi gerekiyor.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Aracýn sürücüsü olmalýsýn.");
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(GetEngineStatus(GetPlayerVehicleID(playerid)) == 1) return HataMesaji(playerid, "Önce aracýn motorunu kapatmalýsýn.");
	new a_id = GetPlayerVehicleID(playerid);
    if(BisikletKontrol(a_id) != 0 || BotKontrol(a_id) != 0 || UcakKontrol(a_id) != 0) return HataMesaji(playerid, "Bu araca modifiye yapamazsýn.");

	new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
	if(aracid == -1 || !Arac_SahipKontrol(playerid, aracid) && !Arac_Anahtar(playerid, aracid)) return HataMesaji(playerid, "Sadece kendine ait veya anahtarýna sahip olduðun araca modifiye yapabilirsin.");

	new mesaj[1024], ekleme[256];
    format(mesaj, sizeof(mesaj), "{FFFFFF}Seçenek\t\tÜcret\n");
	format(ekleme, sizeof(ekleme), "{FFFFFF}Renk\t\t{338833}%s\n", NumaraFormati(MODIFIYE_RENK_UCRET));
	strcat(mesaj, ekleme);
	format(ekleme, sizeof(ekleme), "{FFFFFF}Kaplama\t\t{338833}%s\n", NumaraFormati(MODIFIYE_PAINTJOB_UCRET));
	strcat(mesaj, ekleme);
	format(ekleme, sizeof(ekleme), "{FFFFFF}Rüzgarlýk\t\t{338833}%s\n", NumaraFormati(MODIFIYE_RUZGARLIK_UCRET));
	strcat(mesaj, ekleme);
	format(ekleme, sizeof(ekleme), "{FFFFFF}Hood\t\t{338833}%s\n", NumaraFormati(MODIFIYE_HOOD_UCRET));
	strcat(mesaj, ekleme);
	format(ekleme, sizeof(ekleme), "{FFFFFF}Havalandýrma\t\t{338833}%s\n", NumaraFormati(MODIFIYE_HAVALANDIRMA_UCRET));
	strcat(mesaj, ekleme);
	format(ekleme, sizeof(ekleme), "{FFFFFF}Egzoz\t\t{338833}%s\n", NumaraFormati(MODIFIYE_EGZOZ_UCRET));
	strcat(mesaj, ekleme);
	format(ekleme, sizeof(ekleme), "{FFFFFF}Ön Tampon\t\t{338833}%s\n", NumaraFormati(MODIFIYE_ONTAMPON_UCRET));
	strcat(mesaj, ekleme);
	format(ekleme, sizeof(ekleme), "{FFFFFF}Arka Tampon\t\t{338833}%s\n", NumaraFormati(MODIFIYE_ARKATAMPON_UCRET));
	strcat(mesaj, ekleme);
	format(ekleme, sizeof(ekleme), "{FFFFFF}Tavan\t\t{338833}%s\n", NumaraFormati(MODIFIYE_TAVAN_UCRET));
	strcat(mesaj, ekleme);
	format(ekleme, sizeof(ekleme), "{FFFFFF}Yan Etek\t\t{338833}%s\n", NumaraFormati(MODIFIYE_YANETEK_UCRET));
	strcat(mesaj, ekleme);
	format(ekleme, sizeof(ekleme), "{FFFFFF}Bullbars\t\t{338833}%s\n", NumaraFormati(MODIFIYE_BULLBARS_UCRET));
	strcat(mesaj, ekleme);
	format(ekleme, sizeof(ekleme), "{FFFFFF}Tekerlek\t\t{338833}%s\n", NumaraFormati(MODIFIYE_TEKERLEK_UCRET));
	strcat(mesaj, ekleme);
	format(ekleme, sizeof(ekleme), "{FFFFFF}Stereo\t\t{338833}%s\n", NumaraFormati(MODIFIYE_STEREO_UCRET));
	strcat(mesaj, ekleme);
	format(ekleme, sizeof(ekleme), "{FFFFFF}Hidrolik\t\t{338833}%s\n", NumaraFormati(MODIFIYE_HIDROLIK_UCRET));
	strcat(mesaj, ekleme);
	format(ekleme, sizeof(ekleme), "{FFFFFF}Nitro\t\t{338833}%s", NumaraFormati(MODIFIYE_NOS_UCRET));
	strcat(mesaj, ekleme);
	DialogGoster(playerid, DIALOG_MODIFIYE, DIALOG_STYLE_TABLIST_HEADERS, "Modifiye", mesaj, "Tamam", "Iptal");
	return 1;
}

CMD:modsil(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýnda bu komutu kullanamazsýn.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araç kullanmýyorsun.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Aracýn sürücüsü olmalýsýn.");
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(Modifiye_Yakin(playerid) == -1) return HataMesaji(playerid, "Bir modifiye noktasýna yakýn deðilsin.");
	if(GetEngineStatus(GetPlayerVehicleID(playerid)) == 1) return HataMesaji(playerid, "Önce aracýn motorunu kapatmalýsýn.");
	
	new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
	if(aracid == -1) return HataMesaji(playerid, "Bir sorun oluþtu.");

	if(Arac_SahipKontrol(playerid, aracid))
	{
		new icerik[1024], sayi = 0;
	    format(icerik, sizeof(icerik), "Model\tÝsim\n");
		for(new i = 0; i <= 13; i++)
		{
		    AracBilgi[aracid][aracModifiye][i] = GetVehicleComponentInSlot(AracBilgi[aracid][aracYarat], i);
			if(AracBilgi[aracid][aracModifiye][i])  format(icerik, sizeof(icerik), "%s%d\t%s\n", icerik, AracBilgi[aracid][aracModifiye][i], GetComponentName(AracBilgi[aracid][aracModifiye][i])), sayi++;
		}
		if(!sayi) return HataMesaji(playerid, "Bu araçta modifiye yok.");
		strcat(icerik, "Hepsini Sýfýrla\t\n");
		DialogGoster(playerid, DIALOG_MODIFIYE_SIL, DIALOG_STYLE_TABLIST_HEADERS, "Modifikasyon Kaldýrma", icerik, "Sil", "Kapat");
	}
	else HataMesaji(playerid, "Bu aracýn sahibi deðilsin.");
	return 1;
}

CMD:nos(playerid, params[])
{
    if(OyuncuBilgi[playerid][oMeslek] != 5) return HataMesaji(playerid, "Tamirci deðilsin.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");
	if(IsPlayerInInvalidNosVehicle(playerid)) return HataMesaji(playerid, "Bu araca nos takýlamaz.");
	if(OyuncuBilgi[playerid][oPara] < 300) return HataMesaji(playerid, "Yeterli paran yok. ($50)");
	
	AddVehicleComponent(GetPlayerVehicleID(playerid), 1009);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

	ParaEkle(playerid, -300);
    return 1;
}

CMD:tamirkiti(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýnda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oTamirArac] != INVALID_VEHICLE_ID) return HataMesaji(playerid, "Zaten þu anda tamir kiti kullanýyorsun.");
	if(OyuncuBilgi[playerid][oTamirKiti] == 0) return HataMesaji(playerid, "Tamir kitin yok.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta tamir kitini kullanamazsýn.");
	if(OyuncuBilgi[playerid][oMeslek] != 5) return HataMesaji(playerid, "Tamirci deðilsin.");
	
	new aracid;
	if(sscanf(params, "d", aracid)) return KullanimMesaji(playerid, "/tamirkiti [araç id]");
	if(!IsValidVehicle(aracid)) return HataMesaji(playerid, "Geçersiz araç.");
	new Float:arac_pos[4];
	GetVehiclePos(aracid, arac_pos[0], arac_pos[1], arac_pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, arac_pos[0], arac_pos[1], arac_pos[2])) return HataMesaji(playerid, "Araca yakýn deðilsin.");
	if(AracCan(aracid) >= 700) return HataMesaji(playerid, "Araç hasarlý deðil, tamir kiti kullanýlamaz.");
	if(GetEngineStatus(aracid) == 1) return HataMesaji(playerid, "Aracýn motoru açýkken tamir kiti kullanýlamaz.");
	
	switch(OyuncuBilgi[playerid][oVIP]) {
		case 1: OyuncuBilgi[playerid][oTamirKitiSure] = 15;
		case 2: OyuncuBilgi[playerid][oTamirKitiSure] = 10;
		case 3: OyuncuBilgi[playerid][oTamirKitiSure] = 5;
		default: OyuncuBilgi[playerid][oTamirKitiSure] = 20;
	}
	OyuncuBilgi[playerid][oTamirArac] = aracid;
	cmd_ame(playerid, "aracý tamir etmeye baþlar.");
	return 1;
}

CMD:tamir(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýnda bu komutu kullanamazsýn.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araç kullanmýyorsun.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Aracýn sürücüsü olmalýsýn.");
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(Modifiye_Yakin(playerid) == -1) return HataMesaji(playerid, "Bir modifiye noktasýna yakýn deðilsin.");
	if(GetEngineStatus(GetPlayerVehicleID(playerid)) == 1) return HataMesaji(playerid, "Önce aracýn motorunu kapatmalýsýn.");

	new id = Modifiye_Yakin(playerid);
	if(OyuncuBilgi[playerid][oPara] < ModifiyeNoktasi[id][modifiyeUcret]) {
		HataMesaji(playerid, "Tamir ücretini karþýlayamýyorsun. (%s)", NumaraFormati(ModifiyeNoktasi[id][modifiyeUcret]));
		return 1;
	}
	if(ModifiyeNoktasi[id][modifiyeKullanan] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Bu tamir noktasý baþkasý tarafýndan kullanýlýyor, lütfen bekleyiniz.");

	SetTimerEx("TamirSifirla", TAMIR_SURE * 1000, false, "dd", id, playerid);
	OyuncuBilgi[playerid][oTamirSure] = TAMIR_SURE;
	ModifiyeNoktasi[id][modifiyeKullanan] = playerid;
	SunucuMesaji(playerid, "Aracýný tamir ettirmeye baþladýn.");
	return 1;
}

CMD:atamir(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	if(IsPlayerInAnyVehicle(playerid) && isnull(params)) {
		AracTamirEt(GetPlayerVehicleID(playerid));
		new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
		SunucuMesaji(playerid, "%s (#%d) tamir edildi.", AracModel(AracBilgi[aracid][aracModel]), GetPlayerVehicleID(playerid));
	}
	else {
		new id, arac;
		if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/atamir [araç id]");
		if(!IsValidVehicle(id) || Arac_IDBul(id) == -1) return HataMesaji(playerid, "Geçersiz araç.");

		AracTamirEt(id);
		arac = Arac_IDBul(id);
		switch(AracBilgi[arac][aracZirh]) {
			case 1: AracZirh[AracBilgi[arac][aracYarat]] = ARAC_ZIRH_SEVIYE1;
			case 2: AracZirh[AracBilgi[arac][aracYarat]] = ARAC_ZIRH_SEVIYE2;
			case 3: AracZirh[AracBilgi[arac][aracYarat]] = ARAC_ZIRH_SEVIYE3;
			case 4: AracZirh[AracBilgi[arac][aracYarat]] = ARAC_ZIRH_SEVIYE4;
			default: AracZirh[AracBilgi[arac][aracYarat]] = 0;
		}
		SunucuMesaji(playerid, "%s (#%d) tamir edildi.", AracModel(AracBilgi[arac][aracModel]), id);
	}
	return 1;
}

CMD:aracguvenlik(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýnda bu komutu kullanamazsýn.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Aracýnýzda deðilsiniz.");
	if(Modifiye_Yakin(playerid) == -1) return HataMesaji(playerid, "Bir modifiye noktasýna yakýn deðilsin.");

    new id = Arac_IDBul(GetPlayerVehicleID(playerid));
	if(!Arac_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Sadece sahibi olduðunuz aracýn güvenlik levelini arttýrabilirsiniz.");

	if(AracBilgi[id][aracGuvenlik] >= 5) return HataMesaji(playerid, "Bu araç son seviye güvenlik seviyesine sahip.");
	if(OyuncuBilgi[playerid][oPara] < GUVENLIK_LEVEL_UCRET) { HataMesaji(playerid, "Bu aracýn güvenlik seviyesini arttýrabilmen için %s gerekiyor.", NumaraFormati(GUVENLIK_LEVEL_UCRET)); return 1; }
	
	ParaEkle(playerid, -GUVENLIK_LEVEL_UCRET);
	AracBilgi[id][aracGuvenlik]++;
	Arac_Kaydet(id);
	SunucuMesaji(playerid, "Aracýn güvenlik seviyesi yükseltildi, yeni seviye: %d", AracBilgi[id][aracGuvenlik]);
    return 1;
}

/*CMD:araczirhlat(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýnda bu komutu kullanamazsýn.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Aracýnýzda deðilsiniz.");

    new aracid = GetPlayerVehicleID(playerid), id = Arac_IDBul(aracid);
	if(!Arac_SahipKontrol(playerid, id)) return HataMesaji(playerid, "Sadece sahibi olduðunuz aracý zýrhlatabilirsiniz.");

    if(AracBilgi[id][aracZirh] == 0)
    {
		if(OyuncuBilgi[playerid][oPara] < ARACZIRH_SEVIYE1_FIYAT) { HataMesaji(playerid, "Aracýný zýrhlatmak için gereken parayý karþýlayamýyorsun. (%s)", NumaraFormati(ARACZIRH_SEVIYE1_FIYAT)); return 1; }
		ParaEkle(playerid, -ARACZIRH_SEVIYE1_FIYAT);

		AracZirh[aracid] = ARAC_ZIRH_SEVIYE1;
		if(id != -1) AracBilgi[id][aracZirh] = 1, Arac_Kaydet(id);
		SunucuMesaji(playerid, "Araç zýrhýn geliþtirildi.");
    }
    else if(AracBilgi[id][aracZirh] == 1)
    {
		if(OyuncuBilgi[playerid][oPara] < ARACZIRH_SEVIYE2_FIYAT) { HataMesaji(playerid, "Aracýný zýrhlatmak için gereken parayý karþýlayamýyorsun. (%s)", NumaraFormati(ARACZIRH_SEVIYE2_FIYAT)); return 1; }
		ParaEkle(playerid, -ARACZIRH_SEVIYE2_FIYAT);

		AracZirh[aracid] = ARAC_ZIRH_SEVIYE2;
		if(id != -1) AracBilgi[id][aracZirh] = 2, Arac_Kaydet(id);
		SunucuMesaji(playerid, "Araç zýrhýn geliþtirildi.");
    }
	else return HataMesaji(playerid, "Bu araç zaten son seviye zýrha sahip!");
    return 1;
}*/

CMD:aracver(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);
	new oyuncuid, model[32], renk1, renk2, id = -1;
	if(sscanf(params, "us[32]I(-1)I(-1)", oyuncuid, model, renk1, renk2)) return KullanimMesaji(playerid, "/aracver [ID / Oyuncu] [model id/isim] [renk 1] [renk 2]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if((model[0] = AracModelBul(model)) == 0) return HataMesaji(playerid, "Geçersiz model.");

	new Float:yeni_pos[4];
    GetPlayerPos(playerid, yeni_pos[0], yeni_pos[1], yeni_pos[2]);
	GetPlayerFacingAngle(playerid, yeni_pos[3]);

	id = Arac_Yarat(OyuncuBilgi[playerid][oID], model[0], yeni_pos[0], yeni_pos[1], yeni_pos[2], yeni_pos[3], renk1, renk2);

	if(id == -1) return HataMesaji(playerid, "Sunucu dinamik araç limitine ulaþtýðý için yeni araç yaratamýyorsunuz.");

	AracBilgi[id][aracSahip] = OyuncuBilgi[oyuncuid][oID];
	SunucuMesaji(oyuncuid, "%s adlý yetkili sana %s model araç verdi. (Kontrol için /aliste)", OyuncuBilgi[playerid][oAdminNick], AracModel(AracBilgi[id][aracModel]));
	YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s, %s adlý kiþiye %s model araç verdi.", OyuncuBilgi[playerid][oAdminNick], OyuncuIsim(oyuncuid), AracModel(AracBilgi[id][aracModel]));
  	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiye %s model arac verdi. (SID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], AracModel(AracBilgi[id][aracModel]), AracBilgi[id][aracID]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_arac.txt", "%s", log_icerik);
	return 1;
}

CMD:aracyarat(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 6) return YetkinizYok(playerid);
    

	new model[32], renk1, renk2, id = -1;
	if(sscanf(params, "s[32]I(-1)I(-1)", model, renk1, renk2)) return KullanimMesaji(playerid, "/aracyarat [model id/isim] [renk 1] [renk 2]");
	if((model[0] = AracModelBul(model)) == 0) return HataMesaji(playerid, "Geçersiz model.");

    GetPlayerPos(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
	GetPlayerFacingAngle(playerid, OyuncuBilgi[playerid][oPos][3]);

	id = Arac_Yarat(0, model[0], OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2], OyuncuBilgi[playerid][oPos][3], renk1, renk2);

	if(id == -1) return HataMesaji(playerid, "Sunucu dinamik araç limitine ulaþtýðý için yeni araç yaratamýyorsunuz.");

	SunucuMesaji(playerid, "Girilen araç baþarýyla yaratýldý! ID: %d.", AracBilgi[id][aracYarat]);
  	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s model araç yarattý.", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], AracModel(AracBilgi[id][aracModel]));
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_arac.txt", "%s", log_icerik);
	return 1;
}

CMD:aracsil(playerid, params[])
{
    if(OyuncuBilgi[playerid][oAdmin] < 6) return YetkinizYok(playerid);
	new id;
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/aracsil [araç id]");
	if(!IsValidVehicle(id) || Arac_IDBul(id) == -1) return HataMesaji(playerid, "Geçersiz araç.");

	SunucuMesaji(playerid, "Araç %d baþarýyla silindi!", id);
  	new log_icerik[144], aracid = Arac_IDBul(id);
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir aracý sildi. (SAHIP: %d / Model: %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], AracBilgi[aracid][aracID], AracModel(AracBilgi[id][aracModel]));
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_arac.txt", "%s", log_icerik);
	Arac_Sil(aracid);
	return 1;
}

CMD:park(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Herhangi bir aracýn içerisinde deðilsin.");
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum]) return HataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

	new aracid = GetPlayerVehicleID(playerid), Float:hasar;
	if((aracid = Arac_IDBul(GetPlayerVehicleID(playerid))) != -1 && Arac_SahipKontrol(playerid, aracid))
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Sürücü koltuðunda deðilsin.");
		if(GetEngineStatus(GetPlayerVehicleID(playerid)) != 0 && BisikletKontrol(GetPlayerVehicleID(playerid)) == 0) return HataMesaji(playerid, "Park etmek için aracýnýn motorunu kapatmalýsýn.");

		GetVehicleHealth(GetPlayerVehicleID(playerid), hasar);
		if(hasar < 800.0) return HataMesaji(playerid, "Bu araç hasarlý, park etmek için aracý tamir ettirmelisin.");

		GetVehiclePos(AracBilgi[aracid][aracYarat], AracBilgi[aracid][aracPos][0], AracBilgi[aracid][aracPos][1], AracBilgi[aracid][aracPos][2]);
		GetVehicleZAngle(AracBilgi[aracid][aracYarat], AracBilgi[aracid][aracPos][3]);
		Arac_Kaydet(aracid);
		SunucuMesaji(playerid, "%s model aracýný park ettin.", AracModel(AracBilgi[aracid][aracModel]));
	 	return 1;
	}
	if((aracid = Arac_IDBul(GetPlayerVehicleID(playerid))) != -1 && AracBilgi[aracid][aracBirlik] == OyuncuBilgi[playerid][oBirlikSQLID])
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Sürücü koltuðunda deðilsin.");
		if(GetEngineStatus(GetPlayerVehicleID(playerid)) != 0 && BisikletKontrol(GetPlayerVehicleID(playerid)) == 0) return HataMesaji(playerid, "Park etmek için aracýnýn motorunu kapatmalýsýn.");
		if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[playerid][oBirlikRutbe]) return HataMesaji(playerid, "Bu komutu sadece birlik lideri kullanabilir.");
		GetVehicleHealth(GetPlayerVehicleID(playerid), hasar);
		if(hasar < 800.0) return HataMesaji(playerid, "Bu araç hasarlý, park etmek için aracý tamir ettirmelisin.");

		GetVehiclePos(AracBilgi[aracid][aracYarat], AracBilgi[aracid][aracPos][0], AracBilgi[aracid][aracPos][1], AracBilgi[aracid][aracPos][2]);
		GetVehicleZAngle(AracBilgi[aracid][aracYarat], AracBilgi[aracid][aracPos][3]);
		Arac_Kaydet(aracid);
	 	SunucuMesaji(playerid, "%s model birlik aracýný park ettin.", AracModel(AracBilgi[aracid][aracModel]));
	 	return 1;
	}
	else HataMesaji(playerid, "Bu araç sana ait deðil.");
	return 1;
}

CMD:duzkontak(playerid, params[])
{
	if(OyuncuBilgi[playerid][oMeslek] != 3) return HataMesaji(playerid, "Mekanik mesleðinde deðilsin.");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsEngineVehicle(vehicleid)) return HataMesaji(playerid, "Herhangi bir araçta deðilsin.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Bu iþlemi yapabilmen için sürücü koltuðunda olman gerekir!");
    if(OyuncuBilgi[playerid][oMotorCalistir]) return HataMesaji(playerid, "Zaten þu anda motor çalýþtýrýyorsunuz!");
    if(OyuncuBilgi[playerid][oBenzinAliyor] != -1) return HataMesaji(playerid, "Benzin doldururken aracýn motorunu çalýþtýramazsýn.");
    if(OyuncuBilgi[playerid][oDuzKontak] > 0) return HataMesaji(playerid, "Zaten düz kontak yapýyorsun.");
	if(OyuncuBilgi[playerid][oHirsizSure] > 0) {
		OyuncuBilgi[playerid][oHirsizSure] = 0;
		OyuncuBilgi[playerid][oHirsizArac] = INVALID_VEHICLE_ID;
		UyariMesaji(playerid, "Araç parçalatma düz kontak denediðin için iptal edildi.");
	}
    if(BisikletKontrol(vehicleid) != 0 || BotKontrol(vehicleid) != 0 || UcakKontrol(vehicleid) != 0) return HataMesaji(playerid, "Bu araca düz kontak yapamazsýn.");
	switch(GetEngineStatus(vehicleid))
	{
	    case false:
	    {
	        if((vehicleid = Arac_IDBul(vehicleid)) != -1) if(AracBilgi[vehicleid][aracBenzin] == 0) return HataMesaji(playerid, "Bu araçta benzin yok.");
	        if(AracBilgi[vehicleid][aracBirlik] > 0) return HataMesaji(playerid, "Bu araca düz kontak yapamazsýnýz.");
	        UyariMesaji(playerid, "Düz kontak iþlemi baþladý, %d saniye sürecek.", DUZKONTAK_SURE);
	        OyuncuBilgi[playerid][oDuzKontak] = DUZKONTAK_SURE;
			OyuncuBilgi[playerid][oHirsizArac] = GetPlayerVehicleID(playerid);
		}
		case true: HataMesaji(playerid, "Bu aracýn motoru zaten açýk.");
	}
	return 1;
}

CMD:amotor(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	if(!IsPlayerInAnyVehicle(playerid) || !IsEngineVehicle(GetPlayerVehicleID(playerid))) return HataMesaji(playerid, "Herhangi bir araçta deðilsin.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Bu iþlemi yapabilmen için sürücü koltuðunda olman gerekir!");
	if(OyuncuBilgi[playerid][oMotorCalistir]) return HataMesaji(playerid, "Zaten þu anda motor çalýþtýrýyorsunuz!");
	if(OyuncuBilgi[playerid][oTamirSure] > 0) return HataMesaji(playerid, "Aracý tamir ettirirken motorunu çalýþtýramazsýn.");
	if(OyuncuBilgi[playerid][oBenzinAliyor] != -1) return HataMesaji(playerid, "Benzin doldururken aracýn motorunu çalýþtýramazsýn.");
	if(OyuncuBilgi[playerid][oHirsizSure] > 0) {
		OyuncuBilgi[playerid][oHirsizSure] = 0;
		OyuncuBilgi[playerid][oHirsizArac] = INVALID_VEHICLE_ID;
		UyariMesaji(playerid, "Araç parçalatma motoru çalýþtýrmayý denediðin için iptal edildi.");
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	switch(GetEngineStatus(vehicleid))
	{
	    case false:
	    {
	        if((vehicleid = Arac_IDBul(vehicleid)) != -1) if(AracBilgi[vehicleid][aracBenzin] == 0) return HataMesaji(playerid, "Bu araçta benzin yok.");
			SetTimerEx("araccalistir", 100, false, "ii", playerid, GetPlayerVehicleID(playerid));
			cmd_ame(playerid, "anahtarý saat yönünde çevirir ve aracýn motorunu açmaya çalýþýr.");
		}
		case true:
		{
		    SetEngineStatus(GetPlayerVehicleID(playerid), false);
		    cmd_ame(playerid, "sað eliyle kontaðý çevirir ve aracýn motorunu kapatýr.");
		    SetLightStatus(GetPlayerVehicleID(playerid), false);
			if(Arac_BirlikTuru(GetPlayerVehicleID(playerid)) == BIRLIK_POLIS) {
				KillTimer(MDCTimer[GetPlayerVehicleID(playerid)]);
				foreach(new o : Player) if(IsPlayerInVehicle(o, GetPlayerVehicleID(playerid))) { for(new i; i < 4; i++) TextDrawHideForPlayer(o, DashcamText[GetPlayerVehicleID(playerid)][i]); }
			}
		}
	}
	return 1;
}

CMD:motor(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid) || !IsEngineVehicle(GetPlayerVehicleID(playerid))) return HataMesaji(playerid, "Herhangi bir araçta deðilsin.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Bu iþlemi yapabilmen için sürücü koltuðunda olman gerekir!");
	if(OyuncuBilgi[playerid][oMotorCalistir]) return HataMesaji(playerid, "Zaten þu anda motor çalýþtýrýyorsunuz!");
	if(OyuncuBilgi[playerid][oTamirSure] > 0) return HataMesaji(playerid, "Aracý tamir ettirirken motorunu çalýþtýramazsýn.");
	if(OyuncuBilgi[playerid][oBenzinAliyor] != -1) return HataMesaji(playerid, "Benzin doldururken aracýn motorunu çalýþtýramazsýn.");
	if(OyuncuBilgi[playerid][oHirsizSure] > 0) {
		OyuncuBilgi[playerid][oHirsizSure] = 0;
		OyuncuBilgi[playerid][oHirsizArac] = INVALID_VEHICLE_ID;
		UyariMesaji(playerid, "Araç parçalatma motoru çalýþtýrmayý denediðin için iptal edildi.");
	}
	new aracid = GetPlayerVehicleID(playerid);
	switch (GetEngineStatus(GetPlayerVehicleID(playerid)))
	{
	    case false:
	    {
	        if((aracid = Arac_IDBul(aracid)) != -1)
         	{
         	    if(Arac_SahipKontrol(playerid, aracid) || Arac_Anahtar(playerid, aracid) || AracBilgi[aracid][aracBirlik] > 0 && OyuncuBilgi[playerid][oBirlikSQLID] == AracBilgi[aracid][aracBirlik] || OyuncuBilgi[playerid][oEhliyetTesti] > 0 && AracBilgi[aracid][aracTur] == 1) {
					if(AracBilgi[aracid][aracBenzin] == 0) return HataMesaji(playerid, "Bu araçta benzin yok.");
					if(AracBilgi[aracid][aracTamirde] == 1) return HataMesaji(playerid, "Araçta arýza mevcut. Aracý çektirerek veya baþka yolla tamirciye gösterin.");
					if(AracBilgi[aracid][aracSatilik] > 0) {
						AracBilgi[aracid][aracIletisim][0] = 0;
						AracBilgi[aracid][aracSatilik] = 0;
						AracBilgi[aracid][aracFiyat] = 0;
						if(IsValidDynamic3DTextLabel(AracBilgi[aracid][aracIlan])) DestroyDynamic3DTextLabel(AracBilgi[aracid][aracIlan]), AracBilgi[aracid][aracIlan] = Text3D:INVALID_3DTEXT_ID;
						Arac_Kaydet(aracid);
						UyariMesaji(playerid, "Araç motorunu çalýþtýrmayý denediðin için satýlýk durumu iptal edildi.");
					}
					SetTimerEx("araccalistir", floatround(AracBilgi[aracid][aracKM]) / 300 * 1000, false, "ii", playerid, GetPlayerVehicleID(playerid));
					GameTextForPlayer(playerid, "~w~MOTOR CALISTIRILIYOR...", floatround(AracBilgi[aracid][aracKM]) / 300 * 1000, 4);
					cmd_ame(playerid, "anahtarý saat yönünde çevirir ve aracýn motorunu açmaya çalýþýr.");
					OyuncuBilgi[playerid][oMotorCalistir] = true;
				} else { HataMesaji(playerid, "Bu aracýn anahtarý sizde olmadýðý için motoru çalýþtýramazsýn."); }
         	}
		}
		case true:
		{
		    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 574 && OyuncuBilgi[playerid][oTemizlikCP] > 0) return HataMesaji(playerid, "Bu aracýn motorunu kapatamazsýn.");
			SetEngineStatus(GetPlayerVehicleID(playerid), false);
			cmd_ame(playerid, "sað eliyle kontaðý çevirir ve aracýn motorunu kapatýr.");
			SetLightStatus(GetPlayerVehicleID(playerid), false);
			if(Arac_BirlikTuru(GetPlayerVehicleID(playerid)) == BIRLIK_POLIS) {
				KillTimer(MDCTimer[GetPlayerVehicleID(playerid)]);
				foreach(new o : Player) if(IsPlayerInVehicle(o, GetPlayerVehicleID(playerid))) { for(new i; i < 4; i++) TextDrawHideForPlayer(o, DashcamText[GetPlayerVehicleID(playerid)][i]); }
			}
			HileKontrolGecikme[playerid] = gettime() + 4;
		}
	}
	return 1;
}

CMD:banahtarver(playerid, params[])
{
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici iþbaþýnda bu komutu kullanamazsýn.");

	new oyuncuid, binaid;
	if(sscanf(params, "ud", oyuncuid, binaid)) return KullanimMesaji(playerid, "/banahtarver [ID / Oyuncu] [bina id]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Kendine anahtar veremezsin.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return HataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");
	if(OyuncuBilgi[oyuncuid][oDialog] != -1) return HataMesaji(playerid, "Girilen oyuncuya þu anda anahtar önerisi verilemez, diyaloðu kapatmasýný bekleyin.");
	if(binaid < 0 || binaid > MAKSIMUM_BINA || !BinaBilgi[binaid][bKullanimda]) return HataMesaji(playerid, "Girilen binanýn sahibi deðilsin.");
	if(!Bina_SahipKontrol(playerid, binaid)) return HataMesaji(playerid, "Girilen binanýn sahibi deðilsin.");
	if(BinaBilgi[binaid][binaAnahtar][0] != 0 && BinaBilgi[binaid][binaAnahtar][1] != 0 && BinaBilgi[binaid][binaAnahtar][2] != 0 && BinaBilgi[binaid][binaAnahtar][3] != 0 && BinaBilgi[binaid][binaAnahtar][4] != 0) return HataMesaji(playerid, "Bina anahtarý slotlarýn dolu.");

	for(new i = 0; i != 5; i ++) if(BinaBilgi[binaid][binaAnahtar][i] == OyuncuBilgi[oyuncuid][oID]) return HataMesaji(playerid, "Bu oyuncuda zaten anahtarýnýz bulunuyor.");
	new bilgi[144];
	SetPVarInt(oyuncuid, "AnahtarOneren", playerid);
	SetPVarInt(oyuncuid, "AnahtarBina", binaid);
	format(bilgi, sizeof(bilgi), "{FFFFFF}%s adlý oyuncu sana %d ID'li binanýn anahtarýný vermeyi önerdi.", OyuncuIsim(playerid), binaid);
	DialogGoster(oyuncuid, DIALOG_BINAANAHTAR, DIALOG_STYLE_MSGBOX, "Ev Anahtarý", bilgi, "Kabul", "Reddet");
	SunucuMesaji(playerid, "%s adlý kiþiye %d ID'li binanýn anahtarýný vermeyi önerdin.", OyuncuIsim(oyuncuid), binaid);
	return 1;
}

CMD:banahtarsifirla(playerid, params[])
{
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici iþbaþýnda bu komutu kullanamazsýn.");

	new binaid;
	if(sscanf(params, "d", binaid)) return KullanimMesaji(playerid, "/banahtarsifirla [bina id]");
	if(binaid < 0 || binaid > MAKSIMUM_BINA || !BinaBilgi[binaid][bKullanimda]) return HataMesaji(playerid, "Girilen binanýn sahibi deðilsin.");
	if(!Bina_SahipKontrol(playerid, binaid)) return HataMesaji(playerid, "Girilen binanýn sahibi deðilsin.");
	if(BinaBilgi[binaid][binaAnahtar][0] == 0 && BinaBilgi[binaid][binaAnahtar][1] == 0 && BinaBilgi[binaid][binaAnahtar][2] == 0 && BinaBilgi[binaid][binaAnahtar][3] == 0 && BinaBilgi[binaid][binaAnahtar][4] == 0) return HataMesaji(playerid, "Bina anahtarýný kimseye vermedin.");

	for(new i = 0; i != 5; i ++) BinaBilgi[binaid][binaAnahtar][i] = 0;
	Bina_Kaydet(binaid);
	SunucuMesaji(playerid, "Bina anahtarlarý sýfýrlandý.");
	return 1;
}

CMD:evanahtarver(playerid, params[])
{
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici iþbaþýnda bu komutu kullanamazsýn.");

	static oyuncuid, evid;
	if(sscanf(params, "ud", oyuncuid, evid)) return KullanimMesaji(playerid, "/evanahtarver [ID / Oyuncu] [ev id]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return HataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Kendine anahtar veremezsin.");
	if(OyuncuBilgi[oyuncuid][oYarali] > 0) return HataMesaji(playerid, "Girilen kiþi yaralý, komut üzerinde kullanýlamaz.");
	if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0 || OyuncuBilgi[oyuncuid][oHapisSure][1] > 0) return HataMesaji(playerid, "Girilen kiþi hapiste, komut üzerinde kullanýlamaz.");
	if(OyuncuBilgi[oyuncuid][oDonduruldu] > 0) return HataMesaji(playerid, "Girilen kiþi etkisiz halde, bu komutu üzerinde kullanýlamýyor.");
	if(OyuncuBilgi[oyuncuid][oAdminDurum] == true) return HataMesaji(playerid, "Girilen kiþi yönetici iþbaþýnda, komutu üzerinde kullanamazsýn.");
	if(OyuncuBilgi[oyuncuid][oDialog] != -1) return HataMesaji(playerid, "Girilen oyuncuya þu anda anahtar önerisi verilemez, diyaloðu kapatmasýný bekleyin.");
	if(evid < 0 || evid > MAKSIMUM_EV || !EvBilgi[evid][evKullanimda]) return HataMesaji(playerid, "Girilen evin sahibi deðilsin.");
	if(!Ev_SahipKontrol(playerid, evid)) return HataMesaji(playerid, "Girilen evin sahibi deðilsin.");
	if(EvBilgi[evid][evAnahtar][0] != 0 && EvBilgi[evid][evAnahtar][1] != 0 && EvBilgi[evid][evAnahtar][2] != 0 && EvBilgi[evid][evAnahtar][3] != 0 && EvBilgi[evid][evAnahtar][4] != 0) return HataMesaji(playerid, "Ev anahtarý slotlarýn dolu. (/evanahtarsifirla)");

	for(new i = 0; i != 5; i ++) if(EvBilgi[evid][evAnahtar][i] == OyuncuBilgi[oyuncuid][oID]) return HataMesaji(playerid, "Bu oyuncuda zaten anahtarýnýz bulunuyor.");
	new bilgi[144];
	SetPVarInt(oyuncuid, "evanahtaroneren", playerid);
	SetPVarInt(oyuncuid, "evanahtarid", evid);
	format(bilgi, sizeof(bilgi), "{FFFFFF}%s adlý oyuncu sana %d ID'li evinin anahtarýný vermeyi önerdi.", OyuncuIsim(playerid), evid);
	DialogGoster(oyuncuid, DIALOG_EVANAHTAR, DIALOG_STYLE_MSGBOX, "Ev Anahtarý", bilgi, "Kabul", "Reddet");
	SunucuMesaji(playerid, "%s adlý kiþiye %d ID'li evinin anahtarýný vermeyi önerdin.", OyuncuIsim(oyuncuid), evid);
	return 1;
}

CMD:evanahtarsifirla(playerid, params[])
{
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Dondurulma etkisindeyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Yönetici iþbaþýnda bu komutu kullanamazsýn.");

	new evid;
	if(sscanf(params, "d", evid)) return KullanimMesaji(playerid, "/evanahtarsifirla [ev id]");
	if(evid < 0 || evid > MAKSIMUM_EV || !EvBilgi[evid][evKullanimda]) return HataMesaji(playerid, "Girilen evin sahibi deðilsin.");
	if(!Ev_SahipKontrol(playerid, evid)) return HataMesaji(playerid, "Girilen evin sahibi deðilsin.");
	if(EvBilgi[evid][evAnahtar][0] == 0 && EvBilgi[evid][evAnahtar][1] == 0 && EvBilgi[evid][evAnahtar][2] == 0 && EvBilgi[evid][evAnahtar][3] == 0 && EvBilgi[evid][evAnahtar][4] == 0) return HataMesaji(playerid, "Ev anahtarýný kimseye vermedin.");

	for(new i = 0; i != 5; i ++) EvBilgi[evid][evAnahtar][i] = 0;
	Ev_Kaydet(evid);
	SunucuMesaji(playerid, "Ev anahtarlarý sýfýrlandý.");
	return 1;
}

CMD:anahtarver(playerid, params[])
{
 	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut sadece araçta kullanýlabilir.");

    static aracid, oyuncuid, mesaj[144];
	aracid = GetPlayerVehicleID(playerid);
	if((aracid = Arac_IDBul(aracid)) != -1 && Arac_SahipKontrol(playerid, aracid))
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Bu komutu kullanmak için sürücü olmalýsýn.");
		if(AracBilgi[aracid][aracKiralik]) return HataMesaji(playerid, "Araç kiralanabilirken anahtar veremezsin.");
		if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/anahtarver [ID / Oyuncu]");
		if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
		if(oyuncuid == playerid) return HataMesaji(playerid, "Anahtarýný kendine veremezsin.");
		if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return HataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");
		if(AracBilgi[aracid][aracAnahtar] != 0) return HataMesaji(playerid, "Anahtarý zaten baþkasýna vermiþsin.");
		if(OyuncuBilgi[oyuncuid][oDialog] != -1) return HataMesaji(playerid, "Girilen oyuncuya þu anda anahtar önerisi verilemez, diyalogu kapatmasýný bekleyin.");

		SetPVarInt(oyuncuid, "aracid", aracid);
		SetPVarInt(oyuncuid, "anahtarsahip", playerid);
		format(mesaj, sizeof(mesaj), "%s adlý kiþi sana %s model aracýnýn anahtarýný vermek isiyor.", OyuncuIsim(playerid), AracModel(GetVehicleModel(GetPlayerVehicleID(playerid))));
		DialogGoster(oyuncuid, DIALOG_ARACANAHTAR, DIALOG_STYLE_MSGBOX, "Araç Anahtar - Onay", mesaj, "Kabul", "Red");
	}
	else HataMesaji(playerid, "Bu araç senin deðil.");
	return 1;
}

CMD:anahtarsifirla(playerid, params[])
{
 	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut sadece araçta kullanýlabilir.");

	new aracid;
	aracid = GetPlayerVehicleID(playerid);
	if((aracid = Arac_IDBul(aracid)) != -1 && Arac_SahipKontrol(playerid, aracid))
	{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Bu komutu kullanmak için sürücü olmalýsýn.");
			if(AracBilgi[aracid][aracKiralik]) return HataMesaji(playerid, "Araç kiralanabilirken anahtar sýfýrlanamaz.");
   			if(AracBilgi[aracid][aracAnahtar] == 0) return HataMesaji(playerid, "Anahtarý kimseye vermedin.");

  			AracBilgi[aracid][aracAnahtar] = 0;
  			Arac_Kaydet(aracid);
			SunucuMesaji(playerid, "Anahtarlar sýfýrlandý.");
	}
	else HataMesaji(playerid, "Bu araç senin deðil.");
	return 1;
}

CMD:far(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Aracýn sürücüsü olmalýsýn.");
	
	switch(GetLightStatus(GetPlayerVehicleID(playerid)))
	{
		case false: SetLightStatus(GetPlayerVehicleID(playerid), true);
		case true: SetLightStatus(GetPlayerVehicleID(playerid), false);
	}
	return 1;
}

CMD:arackirala(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut sadece araçta kullanýlabilir.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Bu komutu sadece aracýn sürücü koltuðundayken kullanýlabilir.");
	static gerekliucret, id, oid;
    id = Arac_IDBul(GetPlayerVehicleID(playerid));

	if(AracBilgi[id][aracSahip] == 0) gerekliucret = 150;
	else gerekliucret = AracBilgi[id][aKiraUcret];

	if(OyuncuBilgi[playerid][oPara] < gerekliucret) return HataMesaji(playerid, "Bu aracý kiralamak için yeterli paran yok.");
	if(AracBilgi[id][aracKiralik] == 0) return HataMesaji(playerid, "Bu araç kiralýk deðil.");
	if(AracBilgi[id][aracAnahtar] > 0) return HataMesaji(playerid, "Bu araç zaten kiralanmýþ.");
	if(AracBilgi[id][aracSahip] == OyuncuBilgi[playerid][oID]) return HataMesaji(playerid, "Kendi aracýný kiralayamazsýn.");

	AracBilgi[id][aracAnahtar] = OyuncuBilgi[playerid][oID];
	AracBilgi[id][aKiraZaman] = 30;
    Arac_Kaydet(id);
    ParaEkle(playerid, -gerekliucret);
   	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
   	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s model arac kiraladý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], AracModel(AracBilgi[id][aracModel]));
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/arac.txt", "%s", log_icerik);
	oid = SQL_AktiflikKontrol(AracBilgi[id][aracSahip]);
	if(oid != -1 && IsPlayerConnected(oid)) {
		OyuncuBilgi[oid][oBankaPara] += AracBilgi[id][aKiraUcret];
		OyuncuKaydet(oid);
		SunucuMesaji(oid, "**300 numaralý banka hesabýndan banka hesabýna %s miktarýnda transfer gerçekleþti. (Araç Kiralama)", NumaraFormati(AracBilgi[id][aKiraUcret]));
	}
	else if(AracBilgi[id][aracSahip] > 0) OfflineParaVer(AracBilgi[id][aracSahip], AracBilgi[id][aKiraUcret]);
	SunucuMesaji(playerid, "Araç 30 dakikalýðýna kiralandý, iyi yolculuklar!");
	return 1;
}

CMD:entercar(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0 || OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn");
	if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || OyuncuBilgi[playerid][oIzlenen] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Birini izlerken bu komutu kullanamazsýn.");

	new aracid;
	if(sscanf(params, "d", aracid)) return KullanimMesaji(playerid, "/entercar [arac id]");
	if(aracid == INVALID_VEHICLE_ID || !IsValidVehicle(aracid)) return HataMesaji(playerid, "Bu araç geçersiz.");

	new koltukid = KoltukKontrol(aracid, 0);
	if(koltukid == -1) return HataMesaji(playerid, "Araçta boþ koltuk yok.");

	PutPlayerInVehicle(playerid, aracid, koltukid);
	return 1;
}

CMD:aractanat(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bir araçta deðilsin.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Sürücü deðilken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0 || OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn");
	if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/aractanat [ID / Oyuncu]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Geçersiz oyuncu.");
	if(!IsPlayerInAnyVehicle(oyuncuid) || !IsPlayerInVehicle(oyuncuid, GetPlayerVehicleID(playerid))) return HataMesaji(playerid, "Oyuncu senin aracýnda deðil.");

	RemovePlayerFromVehicle(oyuncuid);
	if(OyuncuBilgi[oyuncuid][oKelepceli] == 1) TogglePlayerControllable(oyuncuid, true);
	new emote[48];
	format(emote, sizeof(emote), "%s adlý kiþiyi araçtan atar.", OyuncuIsim(oyuncuid));
	cmd_ame(playerid, emote);
	return 1;
}

CMD:acam(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Ýþbaþýnda bu komutu kullanamazsýn.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Aracýn sürücüsü olmalýsýn.");
	if(CamKontrol(GetPlayerVehicleID(playerid)) == 0) return HataMesaji(playerid, "Bu araçta cam yok.");

	new aracid = GetPlayerVehicleID(playerid);
	switch(AracCamDurum[aracid])
	{
		case false: AracCamDurum[aracid] = true, cmd_ame(playerid, "aracýn camýný açar.");
		case true: AracCamDurum[aracid] = false, cmd_ame(playerid, "aracýn camýný kapatýr.");
	}
	return 1;
}

/*CMD:emniyetkemeri(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut sadece araçlarda kullanýlabilir.");
	new aracid = GetPlayerVehicleID(playerid);
	if(UcakKontrol(aracid) != 0 || BotKontrol(aracid) != 0 || HelikopterKontrol(aracid) != 0) return HataMesaji(playerid, "Bu araç türünde emniyet kemeri kullanýlamaz.");

	new emote[64];
	if(OyuncuBilgi[playerid][oEmniyetKemeri] == false) {
	    OyuncuBilgi[playerid][oEmniyetKemeri] = true;
		if(!BisikletKontrol(aracid)) format(emote, sizeof(emote), "emniyet kemerini takar.");
		else format(emote, sizeof(emote), "kaskýný kafasýna geçirir.");
	    cmd_ame(playerid, emote);
	}
	else if(OyuncuBilgi[playerid][oEmniyetKemeri] == true) {
	    OyuncuBilgi[playerid][oEmniyetKemeri] = false;
		if(!BisikletKontrol(aracid)) format(emote, sizeof(emote), "emniyet kemerini çýkarýr.");
		else format(emote, sizeof(emote), "kaskýný kafasýndan çekiþtirerek çýkarýr.");
	    cmd_ame(playerid, emote);
	}
	return 1;
}*/

CMD:arac(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Ýþbaþýnda bu komutu kullanamazsýn.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Aracýn sürücüsü olmalýsýn.");

    new id = -1;
    if((id = Arac_IDBul(GetPlayerVehicleID(playerid))) != -1) {
		new bilgi[3328], ekleme[512], aracid = GetPlayerVehicleID(playerid);
		bilgi[0] = 0;
		format(ekleme, sizeof(ekleme), "{AFAFAF}Plaka:\t\t{FFFFFF}%s\n", AracBilgi[id][aracPlaka]);
		strcat(bilgi, ekleme, sizeof(ekleme));
		format(ekleme, sizeof(ekleme), "{AFAFAF}Araç Modeli:\t\t{FFFFFF}%s\n", AracModel(AracBilgi[id][aracModel]));
		strcat(bilgi, ekleme, sizeof(ekleme));
		format(ekleme, sizeof(ekleme), "{AFAFAF}Kilometre:\t\t{FFFFFF}%.0f\n", AracBilgi[id][aracKM]);
		strcat(bilgi, ekleme, sizeof(ekleme));
		format(ekleme, sizeof(ekleme), "{AFAFAF}Durum:\t\t\t{FFFFFF}%s\n", AracDurum(id));
		strcat(bilgi, ekleme, sizeof(ekleme));
		format(ekleme, sizeof(ekleme), "{AFAFAF}Araç Zýrhý:\t\t\t{FFFFFF}%d Seviye\n", AracBilgi[id][aracZirh]);
		strcat(bilgi, ekleme, sizeof(ekleme));
		format(ekleme, sizeof(ekleme), "{AFAFAF}Hýz Limiti:\t\t\t{FFFFFF}%d\n", HizLimiti[aracid]);
		strcat(bilgi, ekleme, sizeof(ekleme));
 		format(ekleme, sizeof(ekleme), "{AFAFAF}Uber Lisansý:\t\t\t%s\n", (AracBilgi[id][uberLisans] == 0) ? ("{B70000}Yok") : ("{33AA33}Var"));
		strcat(bilgi, ekleme, sizeof(ekleme));
 		format(ekleme, sizeof(ekleme), "{AFAFAF}Far:\t\t\t%s\n", (GetLightStatus(aracid) == 0) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"));
		strcat(bilgi, ekleme, sizeof(ekleme));
 		format(ekleme, sizeof(ekleme), "{AFAFAF}Kilit:\t\t\t%s\n", (AracBilgi[id][aracKilit] == 0) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"));
		strcat(bilgi, ekleme, sizeof(ekleme));
 		format(ekleme, sizeof(ekleme), "{AFAFAF}Kaput:\t\t\t%s\n", (GetHoodStatus(aracid) == 0) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"));
		strcat(bilgi, ekleme, sizeof(ekleme));
		if(CamKontrol(aracid) == 1) {
	 		format(ekleme, sizeof(ekleme), "{AFAFAF}Camlar:\t\t\t%s\n", (AracCamDurum[aracid] == false) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"));
			strcat(bilgi, ekleme, sizeof(ekleme));
		}
 		format(ekleme, sizeof(ekleme), "{AFAFAF}Motor:\t\t\t%s\n", (GetEngineStatus(aracid) == 0) ? ("{B70000}Kapalý") : ("{33AA33}Açýk"));
		strcat(bilgi, ekleme, sizeof(ekleme));
 		if(Arac_SahipKontrol(playerid, id)) {
 		    new kiraucret[32];
 		    format(kiraucret, sizeof(kiraucret), "%s", NumaraFormati(AracBilgi[id][aKiraUcret]));
 			format(bilgi, sizeof(bilgi), "%s{AFAFAF}Kiralýk:\t\t\t{33AA33}%s\n{AFAFAF}Aracý Sat:\t\t\t(Oyuncuya)\n{AFAFAF}Satýlýða Çýkart:\t\t\t(Sistem)\n", bilgi, (AracBilgi[id][aracKiralik] == 0) ? ("{B70000}Hayýr") : (kiraucret));
		}
		DialogGoster(playerid, DIALOG_ARAC_MENU, DIALOG_STYLE_TABLIST, AracModel(AracBilgi[id][aracModel]), bilgi, "Seç", "Kapat");
	}
	return 1;
}

CMD:camkir(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
	if(OyuncuBilgi[playerid][oIsbasi] == false) return HataMesaji(playerid, "Ýþ baþýnda deðilsin.");
    new id = -1;
    if((id = Arac_Yakin(playerid)) != -1)
	{
	    static engine, lights, alarm, doors, bonnet, boot, objective;
	    GetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, doors, bonnet, boot, objective);
		if(BisikletKontrol(AracBilgi[id][aracYarat]) != 0 || BotKontrol(AracBilgi[id][aracYarat]) != 0 || UcakKontrol(AracBilgi[id][aracYarat]) != 0) return HataMesaji(playerid, "Bu aracýn camý yok.");
		if(!AracBilgi[id][aracKilit]) HataMesaji(playerid, "Bu araç zaten kilitli deðil.");
		else
		{
			new gelensayi = randomEx(1, 3);
			if(!strcmp(params, "admin", true) && OyuncuBilgi[playerid][oAdmin] >= 7) gelensayi = 1;
			switch(gelensayi) {
				case 1: {
					AracBilgi[id][aracKilit] = false;
					Arac_Kaydet(id);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 0, bonnet, boot, objective);
					cmd_ame(playerid, "batonunu cama doðru savurarak camý kýrar, camdan içeriye uzanýp kapýyý açar.");
					foreach(new i : Player) if(MaymuncukVeri[i][mTur] == 5 && MaymuncukVeri[i][mHedef] == id) return SunucuMesaji(i, "Maymuncuk kýrýldý."), MaymuncukVeri[i][mSaniye] = 0, OyuncuBilgi[i][oMaymuncuk]--;
				}
				case 2: cmd_ame(playerid, "batonunu cama doðru savurur, camý kýramaz.");
			}
		}
	}
	else HataMesaji(playerid, "Herhangi bir araca yakýn deðilsin.");
	return 1;
}

CMD:kilit(playerid, params[])
{
    new id = -1, engine, lights, alarm, doors, bonnet, boot, objective;
	if(IsPlayerInAnyVehicle(playerid) && (id = Arac_IDBul(GetPlayerVehicleID(playerid))))
	{
	    GetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, doors, bonnet, boot, objective);
	    if(Arac_SahipKontrol(playerid, id) || Arac_Anahtar(playerid, id) || AracBilgi[id][aracBirlik] > 0 && OyuncuBilgi[playerid][oBirlikSQLID] == AracBilgi[id][aracBirlik] && OyuncuBirlikTuru(playerid) != BIRLIK_POLIS)
	    {
			if(!AracBilgi[id][aracKilit])
			{
				if(AracBilgi[id][aracSatilik] > 0) return HataMesaji(playerid, "Satýlýk araçlarýn kilit durumlarý deðiþtirilemez.");
				AracBilgi[id][aracKilit] = true;
				GameTextForPlayer(playerid, "~r~Arac kilitlendi!", 2000, 3);
				Arac_Kaydet(id);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 1, bonnet, boot, objective);
			}
			else
			{
				AracBilgi[id][aracKilit] = false;
				GameTextForPlayer(playerid, "~g~Aracin kilidi acildi!", 2000, 3);
				Arac_Kaydet(id);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 0, bonnet, boot, objective);
				foreach(new i : Player) if(MaymuncukVeri[i][mTur] == 5 && MaymuncukVeri[i][mHedef] == id) return SunucuMesaji(i, "Maymuncuk kýrýldý."), MaymuncukVeri[i][mSaniye] = 0, OyuncuBilgi[i][oMaymuncuk]--;
			}
		}
		else HataMesaji(playerid, "Bu aracýn kilit durumunu deðiþtiremezsin.");
	}
    else if(!IsPlayerInAnyVehicle(playerid) && (id = Arac_Yakin(playerid)) != -1)
	{
	    GetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, doors, bonnet, boot, objective);
	    if(Arac_SahipKontrol(playerid, id) || Arac_Anahtar(playerid, id) || AracBilgi[id][aracBirlik] > 0 && OyuncuBilgi[playerid][oBirlikSQLID] == AracBilgi[id][aracBirlik] && OyuncuBirlikTuru(playerid) != BIRLIK_POLIS)
	    {
			if(!AracBilgi[id][aracKilit])
			{
				if(AracBilgi[id][aracSatilik] > 0) return HataMesaji(playerid, "Satýlýk araçlarýn kilit durumlarý deðiþtirilemez.");
				AracBilgi[id][aracKilit] = true;
				GameTextForPlayer(playerid, "~r~Arac kilitlendi!", 2000, 3);
				Arac_Kaydet(id);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 1, bonnet, boot, objective);
			}
			else
			{
				AracBilgi[id][aracKilit] = false;
				GameTextForPlayer(playerid, "~g~Aracin kilidi acildi!", 2000, 3);
				Arac_Kaydet(id);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 0, bonnet, boot, objective);
				foreach(new i : Player) if(MaymuncukVeri[i][mTur] == 5 && MaymuncukVeri[i][mHedef] == id) return SunucuMesaji(i, "Maymuncuk kýrýldý."), MaymuncukVeri[i][mSaniye] = 0, OyuncuBilgi[i][oMaymuncuk]--;
			}
		}
		else HataMesaji(playerid, "Bu aracýn kilit durumunu deðiþtiremezsin.");
	}
	else HataMesaji(playerid, "Herhangi bir araca yakýn deðilsin.");
	return 1;
}

CMD:kaput(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid) && IsValidVehicle(GetPlayerVehicleID(playerid))) {
	    if(!IsDoorVehicle(GetPlayerVehicleID(playerid))) return HataMesaji(playerid, "Bu aracýn bir kaputu yok.");

	    if(!GetHoodStatus(GetPlayerVehicleID(playerid))) SetHoodStatus(GetPlayerVehicleID(playerid), true), cmd_ame(playerid, "aracýn kaputunu açar.");
		else SetHoodStatus(GetPlayerVehicleID(playerid), false), cmd_ame(playerid, "aracýn kaputunu kapatýr.");
	    return true;
	}
	foreach(new i : Vehicle) if(IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if(!IsDoorVehicle(i)) return HataMesaji(playerid, "Bu aracýn bir kaputu yok.");

	    if(!GetHoodStatus(i)) SetHoodStatus(i, true), cmd_ame(playerid, "aracýn kaputunu açar.");
		else SetHoodStatus(i, false), cmd_ame(playerid, "aracýn kaputunu kapatýr.");
	    return true;
	}
	HataMesaji(playerid, "Etrafýnda herhangi bir araç yok veya bir aracýn içerisinde deðilsin.");
	return 1;
}

CMD:bagaj(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Etkisiz haldeyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oIlkYardimYapilan] != INVALID_PLAYER_ID) return HataMesaji(playerid, "Ýlk yardým yaparken bu komutu kullanamazsýn.");
	if(MaymuncukVeri[playerid][mSaniye] > 0) return HataMesaji(playerid, "Maymuncuk kullanýrken bu komutu kullanamazsýn.");

	new id = -1, sorgu[512];
	if((id = Arac_Yakin(playerid)) != -1)
	{
		if(Arac_SahipKontrol(playerid, id) || AracBilgi[id][aracBirlik] > 0 && OyuncuBilgi[playerid][oBirlikSQLID] == AracBilgi[id][aracBirlik])
		{
		    if(GetTrunkStatus(AracBilgi[id][aracYarat])) return HataMesaji(playerid, "Bu aracýn bagajý baþkasý tarafýndan kullanýyor, lütfen bekleyin.");
			if(BagajSlotKontrol(AracBilgi[id][aracModel]) == 0 && AracBilgi[id][aracModel] != 416) return HataMesaji(playerid, "Bu aracýn bagajý yok."), SetTrunkStatus(AracBilgi[id][aracYarat], false);

   			format(sorgu, sizeof(sorgu), "SELECT * FROM bagaj WHERE esyaArac = '%d'", AracBilgi[id][aracID]);
			mysql_tquery(mysqlB, sorgu, "Bagaj_Kontrol", "dd", playerid, id);
		    return true;
		}
		else if(!Arac_SahipKontrol(playerid, id) && OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && OyuncuBilgi[playerid][oIsbasi] == true) {
			if(AracBilgi[id][aracKilit]) return HataMesaji(playerid, "Araç kilitli olduðun için bagaja eriþemiyorsun.");
		    if(GetTrunkStatus(AracBilgi[id][aracYarat])) return HataMesaji(playerid, "Bu aracýn bagajý baþkasý tarafýndan kullanýyor, lütfen bekleyin.");
			if(BagajSlotKontrol(AracBilgi[id][aracModel]) == 0) return HataMesaji(playerid, "Bu aracýn bagajý yok."), SetTrunkStatus(AracBilgi[id][aracYarat], false);

   			format(sorgu, sizeof(sorgu), "SELECT * FROM bagaj WHERE esyaArac = '%d'", AracBilgi[id][aracID]);
			mysql_tquery(mysqlB, sorgu, "Bagaj_ElKoy", "dd", playerid, id);
			return true;
		}
		else return HataMesaji(playerid, "Bu aracýn bagajýný kullanamazsýn.");
	}
	HataMesaji(playerid, "Etrafýnda herhangi bir araç yok.");
	return 1;
}

CMD:atamirci(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 7) return YetkinizYok(playerid);
    if(!strcmp(params, "olustur", true)) {
		new id = -1;
		id = ModifiyeNoktasi_Yarat(playerid, 100);

		if(id == -1) return HataMesaji(playerid, "Sunucu maksimum modifiye noktasý limitine ulaþtýðý için yeni modifiye noktasý eklenemiyor.");

		SunucuMesaji(playerid, "Modifiye noktasý oluþturuldu. (ID: %d)", id);
        return 1;
    }
	new id, tip[24], icerik[128];
	if(sscanf(params, "ds[24]S()[128]", id, tip, icerik))
 	{
	 	KullanimMesaji(playerid, "/atamirci [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} olustur, lokasyon, ucret, birlik");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_MODIFIYENOKTASI) || !ModifiyeNoktasi[id][modifiyeKullanimda]) return HataMesaji(playerid, "Geçersiz modifiye noktasý.");
	if(!strcmp(tip, "lokasyon", true))
	{
	    GetPlayerPos(playerid, ModifiyeNoktasi[id][modifiyePos][0], ModifiyeNoktasi[id][modifiyePos][1], ModifiyeNoktasi[id][modifiyePos][2]);
		ModifiyeNoktasi[id][modifiyeInt] = GetPlayerInterior(playerid);
		ModifiyeNoktasi[id][modifiyeDunya] = GetPlayerVirtualWorld(playerid);

	    ModifiyeNoktasi_Yenile(id);
	    ModifiyeNoktasi_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir modifiye noktasýnýn yerini deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], id);
	}
 	else if(!strcmp(tip, "birlik", true))
	{
	    new birlik;
	    if(sscanf(icerik, "d", birlik)) return KullanimMesaji(playerid, "/atamirci [id] [birlik] [birlik id]");
		if((birlik < 0 || birlik >= MAKSIMUM_BIRLIK) || !BirlikBilgi[birlik][birlikKullanimda]) return HataMesaji(playerid, "Geçersiz birlik.");

		ModifiyeNoktasi[id][modifiyeBirlik] = BirlikBilgi[birlik][birlikID];
	    ModifiyeNoktasi_Yenile(id);
	    ModifiyeNoktasi_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili modifiye noktasýnýn birliðini deðiþtirdi. (ID: %d | %s)", OyuncuBilgi[playerid][oAdminNick], id, BirlikBilgi[birlik][birlikAd]);
	}
 	else if(!strcmp(tip, "ucret", true))
	{
	    new ucret;
	    if(sscanf(icerik, "d", ucret)) return KullanimMesaji(playerid, "/atamirci [id] [ucret] [yeni ücret]");
		if(ucret < 100) return HataMesaji(playerid, "Girilen ücret en az $100 olmalýdýr.");

		ModifiyeNoktasi[id][modifiyeUcret] = ucret;
	    ModifiyeNoktasi_Yenile(id);
	    ModifiyeNoktasi_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili modifiye noktasýnýn ücretini deðiþtirdi. (ID: %d | %s)", OyuncuBilgi[playerid][oAdminNick], id, NumaraFormati(ucret));
	}
 	else if(!strcmp(tip, "sil", true))
	{
		ModifiyeNoktasi_Kaldir(id);
		SunucuMesaji(playerid, "Modifiye noktasý kaldýrýldý. (ID: %d)", id);
	}
	return 1;
}

CMD:abagla(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdmin] < 2) return YetkinizYok(playerid);

	new id;
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/abagla [araç id]");
	if(!IsValidVehicle(id) || Arac_IDBul(id) == -1) return HataMesaji(playerid, "Geçersiz araç.");
	
    new aracid = Arac_IDBul(id);
    if(Arac_BirlikTuru(id) == BIRLIK_POLIS || Arac_BirlikTuru(id) == BIRLIK_MEDIKAL || Arac_BirlikTuru(id) == BIRLIK_DEVLET) return HataMesaji(playerid, "Devlete baðlý kurum araçlarý baðlanamaz.");
    if(IsValidVehicle(AracBilgi[aracid][aracYarat])) for(new i = 0; i <= 13; i++) AracBilgi[aracid][aracModifiye][i] = GetVehicleComponentInSlot(AracBilgi[aracid][aracYarat], i);
    AracBilgi[aracid][aracDurum] = 2;
    AracBilgi[aracid][aracBaglama] = 250;
	Arac_Spawn(aracid);
	Arac_Kaydet(aracid);
	SunucuMesaji(playerid, "%s plakalý araç admin olarak baðlandý.", AracBilgi[aracid][aracPlaka]);
	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir araç baðladý. (%s / %s)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], AracBilgi[aracid][aracPlaka], AracModel(AracBilgi[aracid][aracModel]));
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_arac.txt", "%s", log_icerik);
	return 1;
}

CMD:kancabagla(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikOnay][4] == 0) return HataMesaji(playerid, "Tamirci birliðinde deðilsin.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) return HataMesaji(playerid, "Bu iþlemi sadece Tow Truck model araçlarda yapabilirsin.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Sürücü koltuðunda olmalýsýn.");

	if(GetVehicleFromBehind(GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID) return HataMesaji(playerid, "Yakýnýnda çekilebilecek araç yok.");
	new aracid = GetVehicleFromBehind(GetPlayerVehicleID(playerid));
	AttachTrailerToVehicle(aracid, GetPlayerVehicleID(playerid));
	return 1;
}

CMD:aracbagla(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return YetkinizYok(playerid);
    if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Bu iþlemi yaralýyken yapamazsýn.");
    if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Bu iþlemi hapisteyken yapamazsýn.");
    if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Bu iþlemi dondurulma etkisindeyken yapamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu iþlem araçta yapýlamaz.");
	if(Arac_Yakin(playerid) == -1) return HataMesaji(playerid, "Yakýnýnda bir araç yok.");

	new aracid = Arac_Yakin(playerid), arac_id = AracBilgi[aracid][aracYarat];
    if(Arac_BirlikTuru(arac_id) == BIRLIK_POLIS || Arac_BirlikTuru(arac_id) == BIRLIK_MEDIKAL || Arac_BirlikTuru(arac_id) == BIRLIK_DEVLET) return HataMesaji(playerid, "Devlete baðlý kurum araçlarý baðlanamaz.");
    if(IsValidVehicle(AracBilgi[aracid][aracYarat])) for(new i = 0; i <= 13; i++) AracBilgi[aracid][aracModifiye][i] = GetVehicleComponentInSlot(AracBilgi[aracid][aracYarat], i);
	OyuncuBilgi[playerid][oAracBagla] = aracid;
	OyuncuBilgi[playerid][oBaglamaSure] = 10;
	UyariMesaji(playerid, "%s plakalý aracý baðlamaya baþladýn, iþlemini iptal etmek için araçtan uzaklaþ.", AracBilgi[aracid][aracPlaka]);
	return 1;
}

CMD:dmv(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1263.9143, 2436.5393, 3501.4866)) return HataMesaji(playerid, "Ýþlemler noktasýnda deðilsin.");
	if(OyuncuBilgi[playerid][oGiris] == false || OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0 || OyuncuBilgi[playerid][oHapisSure][1] > 0) return HataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oAdminDurum] == true) return HataMesaji(playerid, "Admin iþbaþýnda bu komutu kullanamazsýn.");

	new sayi = 0, veriler[1024];
	format(veriler, sizeof(veriler), "Plaka\tModel\tDurum\tÜcret\n");
	for(new i = 0; i < MAKSIMUM_ARAC; i ++) if((Arac_SahipKontrol(playerid, i) || AracBilgi[i][aracBirlik] > 0 && AracBilgi[i][aracBirlik] == OyuncuBilgi[playerid][oBirlikSQLID]) && AracBilgi[i][aracDurum] == 2) {
		format(veriler, sizeof(veriler), "%s%s\t%s\tBaðlý\t%s\n", veriler, AracBilgi[i][aracPlaka], AracModel(AracBilgi[i][aracModel]), NumaraFormati(AracBilgi[i][aracBaglama]));
		sayi++;
	}
	if(!sayi) return HataMesaji(playerid, "Baðlý aracýn yok.");
	DialogGoster(playerid, DIALOG_DMV, DIALOG_STYLE_TABLIST_HEADERS, "DMV", veriler, "Seç", "Kapat");
	return 1;
}

CMD:aracicek(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
    if(OyuncuBilgi[playerid][oIsbasi] == false) return HataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) return HataMesaji(playerid, "Bu iþlemi sadece Tow Truck model araçlarda yapabilirsin.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Sürücü koltuðunda olmalýsýn.");

	if(GetVehicleFromBehind(GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID) return HataMesaji(playerid, "Yakýnýnda çekilebilecek araç yok.");
	new aracid = GetVehicleFromBehind(GetPlayerVehicleID(playerid));
	AttachTrailerToVehicle(aracid, GetPlayerVehicleID(playerid));
	return 1;
}


CMD:aracibirak(playerid, params[])
{
	if(OyuncuBilgi[playerid][oGiris] == false) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
    if(OyuncuBilgi[playerid][oIsbasi] == false) return HataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) return HataMesaji(playerid, "Bu iþlemi sadece Tow Truck model araçlarda yapabilirsin.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Sürücü koltuðunda olmalýsýn.");

	new cekilenid = GetVehicleTrailer(GetPlayerVehicleID(playerid));
    if(!cekilenid) return HataMesaji(playerid, "Herhangi bir aracý çekmiyorsunuz.");

	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	return 1;
}

CMD:siren(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return HataMesaji(playerid, "LSPD deðilsin.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Herhangi bir aracýn içerisinde deðilsin.");
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Dondurulma etkisindeyken bu komutu kullanamazsýn.");

	static id;
	id = GetPlayerVehicleID(playerid);
	if(!IsValidVehicle(id) || Arac_IDBul(id) == -1) return HataMesaji(playerid, "Geçersiz araç.");

	static sirenid;
	id = Arac_IDBul(id);
	switch (AracBilgi[id][sirenDurum])
	{
	    case 0:
	    {
	        switch(AracBilgi[id][aracModel])
	        {
				case 426: {
			        if(sscanf(params, "d", sirenid))
			            return KullanimMesaji(playerid, "/siren [id]");

					if(sirenid < 1 || sirenid > 4)
					    return HataMesaji(playerid, "Geçersiz ID! (1-4)");

					switch(sirenid) {
					    case 1: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0);
							AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.029052, 0.380187, 0.640010, 0.000000, 0.000000, 179.699996);
					    }
					    case 2: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19419,0.0,0.0,0,0.0,0.0,0.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.000000, -0.290016, 0.800012, 0.000000, 0.000000, 0.000000);
					    }
					    case 3: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19419,0.0,0.0,0,0.0,0.0,0.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.030029, -1.710021, 0.310005, 0.000000, 0.000000, 0.000000);
					    }
					    case 4: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(18646,0.0,0.0,0,0.0,0.0,0.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.480468, 0.000000, 0.870014, 0.000000, 0.000000, 0.000000);
					    }
					}
					AracBilgi[id][sirenDurum] = 1;
					SunucuMesaji(playerid, "Siren takýldý.");
	            }
				case 560: {
			        if(sscanf(params, "d", sirenid))
			            return KullanimMesaji(playerid, "/siren [id]");

					if(sirenid < 1 || sirenid > 4)
					    return HataMesaji(playerid, "Geçersiz ID! (1-4)");

					switch(sirenid) {
					    case 1: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0);
							AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.006347, 0.585411, 0.600008, 0.000000, 0.000000, 179.199951);
					    }
					    case 2: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0 ,0.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.000000, -0.240005, 0.830001, 0.000000, 0.000000, 0.000000);
					    }
					    case 3: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(18646,0.0,0.0,0,0.0,0.0,0.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.590576, 0.239997, 0.870012, 0.000000, 0.000000, 0.000000);
					    }
					    case 4: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19419,0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.000000, -1.370010, 0.350004, 0.000000, 0.000000, 0.000000);
					    }
					}
					AracBilgi[id][sirenDurum] = 1;
					SunucuMesaji(playerid, "Siren takýldý.");
	            }
				case 482: {
			        if(sscanf(params, "d", sirenid))
			            return KullanimMesaji(playerid, "/siren [id]");

					if(sirenid < 1 || sirenid > 4)
					    return HataMesaji(playerid, "Geçersiz ID! (1-4)");

					switch(sirenid) {
					    case 1: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0);
							AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.450317, 1.259994, 0.610006, 0.000000, 0.000000, 179.999954);
					    }
					    case 2: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19419,0.0,0.0,0,0.0,0.0,0.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.000000, 0.210006, 0.909999, 0.000000, 0.000000, 0.000000);
					    }
					    case 3: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(18646,0.0,0.0,0,0.0,0.0,0.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.460449, 0.689971, 1.010009, 0.000000, 0.000000, 0.000000);
					    }
					    case 4: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19419,0.0,0.0,0,0.0,0.0,0.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.040039, -2.230049, -0.490003, 0.000000, 0.000000, 0.000000);
					    }
					}
					AracBilgi[id][sirenDurum] = 1;
					SunucuMesaji(playerid, "Siren takýldý.");
	            }
				case 490: {
			        if(sscanf(params, "d", sirenid))
			            return KullanimMesaji(playerid, "/siren [id]");

					if(sirenid < 1 || sirenid > 4)
					    return HataMesaji(playerid, "Geçersiz ID! (1-4)");

					switch(sirenid) {
					    case 1: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0);
							AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.992675, -1.521820, 0.560005, 0.000000, 0.000000, -85.800117);
					    }
					    case 2: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(18646,0.0,0.0,0,0.0,0.0,0.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.750000, 0.739990, 1.120014, 0.000000, 0.000000, 0.000000);
					    }
					    case 3: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19419,0.0,0.0,0,0.0,0.0,0.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.000000, -2.799926, 0.399993, 0.000000, 0.000000, 0.000000);
					    }
					    case 4: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.938598, -1.464996, 0.510004, 0.000000, 0.000000, 91.600250);
					    }
					}
					AracBilgi[id][sirenDurum] = 1;
					SunucuMesaji(playerid, "Siren takýldý.");
	            }
				case 541: {
			        if(sscanf(params, "d", sirenid))
			            return KullanimMesaji(playerid, "/siren [id]");

					if(sirenid < 1 || sirenid > 4)
					    return HataMesaji(playerid, "Geçersiz ID! (1-4)");

					switch(sirenid) {
					    case 1: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(18646,0.0,0.0,0,0.0,0.0,0.0);
							AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.510498, 0.130020, 0.650007, 0.000000, 0.000000, 0.000000);
					    }
					    case 2: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19620,0.0,0.0,0,0.0,0.0,0.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.000000, -0.299987, 0.620006, 0.000000, 0.000000, 0.000000);
					    }
					    case 3: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.000000, 0.419998, 0.500011, 0.000000, 0.000000, -178.299972);
					    }
					    case 4: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19419,0.0,0.0,0,0.0,0.0,0.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.000000, 1.969985, 0.000000, 0.000000, 0.000000, 0.000000);
					    }
					}
					AracBilgi[id][sirenDurum] = 1;
					SunucuMesaji(playerid, "Siren takýldý.");
	            }
				case 586: {
			        if(sscanf(params, "d", sirenid))
			            return KullanimMesaji(playerid, "/siren [id]");

					if(sirenid < 1 || sirenid > 4)
					    return HataMesaji(playerid, "Geçersiz ID! (1-4)");

					switch(sirenid) {
					    case 1: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
							AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.013671, -1.349929, 0.029233, 0.000000, 178.800216, 0.000000);
					    }
					    case 2: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.021240, -1.384925, 0.413990, -6.200007, -2.599989, 0.900000);
					    }
					    case 3: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(18646,0.0,0.0,0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.030029, 0.579978, 0.269996, 0.000000, 0.000000, 0.000000);
					    }
					    case 4: {
							AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
						    AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.009521, 0.609626, 0.640005, 0.000000, 0.000000, -175.900070);
					    }
					}
					AracBilgi[id][sirenDurum] = 1;
					SunucuMesaji(playerid, "Siren takýldý.");
	            }
				default: HataMesaji(playerid, "Bu araç modeline siren takýlamaz.");
			}
		}
		case 1:
		{
		    AracBilgi[id][sirenDurum] = 0;
			DestroyDynamicObject(AracBilgi[id][sirenObje]);
			SunucuMesaji(playerid, "Siren kaldýrýldý.");
		}
	}
	return 1;
}

CMD:aracduzenle(playerid, params[])
{
	if(OyuncuBilgi[playerid][oAdmin] < 6) return YetkinizYok(playerid);
	

	new id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/aracduzenle [id] [isim]");
	    SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} lokasyon, birlik, renk1, renk2, plaka, tur, benzin, kilit, zirh, kiralik, vip");
	    if(OyuncuBilgi[playerid][oAdmin] >= 6) SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} model, sahip");
		return 1;
	}
	if(!IsValidVehicle(id) || Arac_IDBul(id) == -1) return HataMesaji(playerid, "Geçersiz araç.");
	id = Arac_IDBul(id);

	if(!strcmp(type, "lokasyon", true))
	{
	    if(!IsPlayerInAnyVehicle(playerid)) {
 			GetPlayerPos(playerid, AracBilgi[id][aracPos][0], AracBilgi[id][aracPos][1], AracBilgi[id][aracPos][2]);
			GetPlayerFacingAngle(playerid, AracBilgi[id][aracPos][3]);
		}
		else if(IsPlayerInAnyVehicle(playerid)) {
		    GetVehiclePos(GetPlayerVehicleID(playerid), AracBilgi[id][aracPos][0], AracBilgi[id][aracPos][1], AracBilgi[id][aracPos][2]);
		    GetVehicleZAngle(GetPlayerVehicleID(playerid), AracBilgi[id][aracPos][3]);
		}

		Arac_Kaydet(id);
		Arac_Spawn(id);
		OyuncuPosDegistir(playerid, AracBilgi[id][aracPos][0], AracBilgi[id][aracPos][1], AracBilgi[id][aracPos][2] + 2.0);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir aracýn lokasyonunu deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], AracBilgi[id][aracYarat]);
	}
	else if(!strcmp(type, "vip", true))
	{
	    switch(AracBilgi[id][aracVip]) {
	        case 0: AracBilgi[id][aracVip] = 1, SunucuMesaji(playerid, "Araç artýk VIP aracý.");
	        case 1: AracBilgi[id][aracVip] = 0, SunucuMesaji(playerid, "Araç artýk VIP Aracý deðil.");
	    }
	    Arac_Kaydet(id);
	}
	else if(!strcmp(type, "kiralik", true))
	{
	    switch(AracBilgi[id][aracKiralik]) {
	        case 0: AracBilgi[id][aracKiralik] = 1, AracBilgi[id][aKiraUcret] = 150, Arac_Spawn(id), SunucuMesaji(playerid, "Araç artýk kiralanabilir durumda.");
	        case 1: {
                if(IsValidDynamic3DTextLabel(AracBilgi[id][aracIlan])) DestroyDynamic3DTextLabel(AracBilgi[id][aracIlan]), AracBilgi[id][aracIlan] = Text3D:INVALID_3DTEXT_ID;
				AracBilgi[id][aracKiralik] = 0, AracBilgi[id][aKiraUcret] = 0, SunucuMesaji(playerid, "Araç artýk kiralanamaz.");
			}
		}
	    Arac_Kaydet(id);
	}
	else if(!strcmp(type, "sahip", true) && OyuncuBilgi[playerid][oAdmin] >= 6)
	{
	    new oyuncuid;
	    if(sscanf(string, "d", oyuncuid)) return KullanimMesaji(playerid, "/aracduzenle [id] [sahip] [ID / Oyuncu] (veya -1)");

		if(oyuncuid == -1) {
			AracBilgi[id][aracSahip] = 0;
			Arac_Kaydet(id);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir aracýn sahibini deðiþtirdi. (ID: %d | Sahip: Yok)", OyuncuBilgi[playerid][oAdminNick], AracBilgi[id][aracYarat]);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s bir aracýn sahibini deðiþtirdi. (ID: %d | Sahip: Yok)", Tarih(), OyuncuBilgi[playerid][oAdminNick], AracBilgi[id][aracID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/admin_arac.txt", "%s", log_icerik);
		    return 1;
		}
		else {
			if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

			AracBilgi[id][aracSahip] = OyuncuBilgi[oyuncuid][oID];
			Arac_Kaydet(id);

			YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir aracýn sahibini deðiþtirdi. (ID: %d | Sahip: %s)", OyuncuBilgi[playerid][oAdminNick], AracBilgi[id][aracYarat], OyuncuIsim(oyuncuid));
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s bir aracýn sahibini deðiþtirdi. (ID: %d | Sahip: Yok)", Tarih(), OyuncuBilgi[playerid][oAdminNick], oyuncu_isim, OyuncuBilgi[oyuncuid][oID], AracBilgi[id][aracID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/admin_arac.txt", "%s", log_icerik);
		}
	}
	else if(!strcmp(type, "model", true) && OyuncuBilgi[playerid][oAdmin] >= 6)
	{
	    new yenimodel[32];
	    if(sscanf(string, "s[32]", yenimodel))
     	{
     	    KullanimMesaji(playerid, "/aracduzenle [id] [model] [yeni model]");
		 	return 1;
		}
		if((yenimodel[0] = AracModelBul(yenimodel)) == 0)
		    return HataMesaji(playerid, "Geçersiz model.");

		AracBilgi[id][aracModel] = yenimodel[0];
		Arac_Spawn(id);
		Arac_Kaydet(id);

		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir aracýn modelini deðiþtirdi. (ID: %d | Model: %s)", OyuncuBilgi[playerid][oAdminNick], AracBilgi[id][aracYarat], AracModel(AracBilgi[id][aracModel]));
	}
	else if(!strcmp(type, "tur", true))
	{
	    new tur;
	    if(sscanf(string, "d", tur))
     	{
     	    KullanimMesaji(playerid, "/aracduzenle [id] [tur] [tür id]");
		 	return 1;
		}
		if(tur < 0 || tur > 1) return HataMesaji(playerid, "Geçersiz tür.");

		AracBilgi[id][aracTur] = tur;
		Arac_Kaydet(id);

		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir aracýn türünü deðiþtirdi. (ID: %d | Tür: %s)", OyuncuBilgi[playerid][oAdminNick], AracBilgi[id][aracYarat], aracturisim(id));
	}
	else if(!strcmp(type, "birlik", true))
	{
	    new birlik;
	    if(sscanf(string, "d", birlik))
			return KullanimMesaji(playerid, "/aracduzenle [id] [birlik] [birlik ID]");

		if(birlik == -1) {
			AracBilgi[id][aracBirlik] = birlik;
			YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir aracýn birliðini sildi. (ARAÇ ID: %d)", OyuncuBilgi[playerid][oAdminNick], AracBilgi[id][aracYarat]);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir aracýn birliðini sildi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], AracBilgi[id][aracID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/admin_arac.txt", "%s", log_icerik);
		}
		else {
			if((birlik < 0 || birlik >= MAKSIMUM_BIRLIK) || !BirlikBilgi[birlik][birlikKullanimda]) {
                KullanimMesaji(playerid, "/aracduzenle [id] [birlik] [birlik ID]");
				HataMesaji(playerid, "Geçersiz birlik belirtildi!");
				return 1;
			}
			AracBilgi[id][aracBirlik] = BirlikBilgi[birlik][birlikID];
			YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s adlý yetkili bir aracý birliðe baðladý. (ID: %d | BÝRLÝK: %s)", OyuncuBilgi[playerid][oAdminNick], AracBilgi[id][aracYarat], BirlikBilgi[birlik][birlikAd]);
			new log_icerik[144];
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir aracýn birliðini %s olarak deðiþtirdi. (ID: %d)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], BirlikBilgi[birlik][birlikAd], AracBilgi[id][aracID]);
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/admin_arac.txt", "%s", log_icerik);
		}
		Arac_Kaydet(id);
	}
	else if(!strcmp(type, "plaka", true))
	{
	    new plaka[12];
	    if(sscanf(string, "s[12]", plaka))
     	{
     	    KullanimMesaji(playerid, "/aracduzenle [id] [plaka] [plaka] (sýfýrlamak için \"sýfýrla\" yazýn.)");
		 	return 1;
		}
		if(strlen(plaka) > 8) return HataMesaji(playerid, "Araç plakasý 8 karakterden uzun olamaz.");
		if(strcmp(plaka, "sýfýrla", true) == 0) {
			new iharfler[][] ={"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
			if(AracBilgi[id][aracID] < 100) {
				format(AracBilgi[id][aracPlaka], 12, "%s%s%d %s00%d", iharfler[random(sizeof(iharfler))], iharfler[random(sizeof(iharfler))], randomEx(1, 10), iharfler[random(sizeof(iharfler))], AracBilgi[id][aracID]);
			}
			else if(AracBilgi[id][aracID] < 1000) {
			    format(AracBilgi[id][aracPlaka], 12, "%s%s%d %s0%d", iharfler[random(sizeof(iharfler))], iharfler[random(sizeof(iharfler))], randomEx(1, 10), iharfler[random(sizeof(iharfler))], AracBilgi[id][aracID]);
			}
			else if(AracBilgi[id][aracID] > 1000) {
			    format(AracBilgi[id][aracPlaka], 12, "%s%s%d %s%d", iharfler[random(sizeof(iharfler))], iharfler[random(sizeof(iharfler))], randomEx(1, 10), iharfler[random(sizeof(iharfler))], AracBilgi[id][aracID]);
			}
			SunucuMesaji(playerid, "Plaka sýfýrlandý. (Yeni Plaka: %s)", AracBilgi[id][aracPlaka]);
		}
		else {
			format(AracBilgi[id][aracPlaka], 12, "%s", plaka);
			SetVehicleNumberPlate(AracBilgi[id][aracYarat], AracBilgi[id][aracPlaka]);
			SunucuMesaji(playerid, "Plaka %s olarak düzenlendi.", AracBilgi[id][aracPlaka]);
		}
		Arac_Kaydet(id);
		Arac_Spawn(id);
	}
    else if(!strcmp(type, "renk1", true))
	{
	    new renk1;
	    if(sscanf(string, "d", renk1)) return KullanimMesaji(playerid, "/aracduzenle [id] [renk1] [renk ID]");
		if(renk1 < 0 || renk1 > 255) return HataMesaji(playerid, "Geçersiz bir renk girdiniz, renk ID'leri 0 ilâ 255 arasýndadýr.");

		AracBilgi[id][aracRenk1] = renk1;
		Arac_Kaydet(id);
		ChangeVehicleColor(AracBilgi[id][aracYarat], AracBilgi[id][aracRenk1], AracBilgi[id][aracRenk2]);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s araç %d'nin birincil rengini %d olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], AracBilgi[id][aracYarat], renk1);
	}
    else if(!strcmp(type, "renk2", true))
	{
	    new renk2;
	    if(sscanf(string, "d", renk2))
			return KullanimMesaji(playerid, "/aracduzenle [id] [renk2] [renk ID]");

		if(renk2 < 0 || renk2 > 255)
		    return HataMesaji(playerid, "Geçersiz bir renk girdiniz, renk ID'leri 0 ilâ 255 arasýndadýr.");

		AracBilgi[id][aracRenk2] = renk2;
		Arac_Kaydet(id);
		ChangeVehicleColor(AracBilgi[id][aracYarat], AracBilgi[id][aracRenk1], AracBilgi[id][aracRenk2]);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s araç %d'nin ikincil rengini %d olarak deðiþtirdi.", OyuncuBilgi[playerid][oAdminNick], AracBilgi[id][aracYarat], renk2);
	}
    else if(!strcmp(type, "benzin", true))
	{
	    new Float:benzin;
	    if(sscanf(string, "f", benzin))
			return KullanimMesaji(playerid, "/aracduzenle [id] [benzin] [miktar]");

		if(benzin < 0.0 || benzin > 100.0) return HataMesaji(playerid, "Girilen miktar geçersiz.");

		AracBilgi[id][aracBenzin] = benzin;
		Arac_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir aracýn benzinini %.4f olarak deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], benzin, AracBilgi[id][aracYarat]);
	}
    else if(!strcmp(type, "zirh", true))
	{
	    new zirh;
	    if(sscanf(string, "d", zirh))
			return KullanimMesaji(playerid, "/aracduzenle [id] [zirh] [deðer]");

		if(zirh < 0 || zirh > 4) return HataMesaji(playerid, "Girilen deðer geçersiz. (0-4)");

		AracBilgi[id][aracZirh] = zirh;
		switch(AracBilgi[id][aracZirh]) {
			case 1: AracZirh[AracBilgi[id][aracYarat]] = ARAC_ZIRH_SEVIYE1;
			case 2: AracZirh[AracBilgi[id][aracYarat]] = ARAC_ZIRH_SEVIYE2;
			case 3: AracZirh[AracBilgi[id][aracYarat]] = ARAC_ZIRH_SEVIYE3;
			case 4: AracZirh[AracBilgi[id][aracYarat]] = ARAC_ZIRH_SEVIYE4;
			default: AracZirh[AracBilgi[id][aracYarat]] = 0;
		}
		Arac_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "admCMD: %s bir aracýn zýrhýný %d olarak deðiþtirdi. (ID: %d)", OyuncuBilgi[playerid][oAdminNick], zirh, AracBilgi[id][aracYarat]);
	}
    else if(!strcmp(type, "kilit", true))
	{
	    new engine, lights, alarm, doors, bonnet, boot, objective;
	    GetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, doors, bonnet, boot, objective);
		if(!AracBilgi[id][aracKilit])
		{
			AracBilgi[id][aracKilit] = true;
			Arac_Kaydet(id);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 1, bonnet, boot, objective);
			SunucuMesaji(playerid, "Araç kilitlendi.");
		}
		else {
			AracBilgi[id][aracKilit] = false;
			Arac_Kaydet(id);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 0, bonnet, boot, objective);
			SunucuMesaji(playerid, "Aracýn kilidi açýldý.");
			foreach(new i : Player) if(MaymuncukVeri[i][mTur] == 5 && MaymuncukVeri[i][mHedef] == id) return SunucuMesaji(i, "Maymuncuk kýrýldý."), MaymuncukVeri[i][mSaniye] = 0, OyuncuBilgi[i][oMaymuncuk]--;
		}
	}
	else HataMesaji(playerid, "Geçersiz opsiyonel.");
	return 1;
}

CMD:animlist(playerid, params[])
{
	SendClientMessageEx(playerid, RENK_YESIL, "Kullanýlabilir Animasyonlar:");
	SendClientMessageEx(playerid, RENK_GRI, "/bodypush /lowbodypush /headbutt /airkick /doorkick /leftslap /elbow /coprun /piss /sneak");
	SendClientMessageEx(playerid, RENK_GRI, "/drunk /bomb /rob /laugh /lookout /robman /hide /vomit /eat /slapass /crack /fucku /taichi");
	SendClientMessageEx(playerid, RENK_GRI, "/drinkwater /time /sleep /blob /opendoor /wavedown /cpr /dive /showoff /goggles /throw /cry");
	SendClientMessageEx(playerid, RENK_GRI, "/robbed /hurt /box /washhands /crabs /salute /jerkoff /stop /rap /wank /chat /sit /bat /lean");
	SendClientMessageEx(playerid, RENK_GRI, "/gesture /lay /wave /signal /nobreath /fallover /pedmove /getjiggy /stripclub /smoke /dj /tag");
	SendClientMessageEx(playerid, RENK_GRI, "/deal /crossarms /cheer /lay /siteat /bar /dance /spank /sexy /holdup /stickjup /copa /misc");
	SendClientMessageEx(playerid, RENK_GRI, "/snatch /blowjob /kiss /idles /sunbathe /lowrider /carchat /followme /hitch /giftgiving /handsup");
	SendClientMessageEx(playerid, RENK_GRI, "/cellin /cellout /gkick /knife /basket /reload /aim /celebrate /bed /what /shakehead /carry");

	return 1;
}

CMD:tokalas(playerid, params[])
{
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "OOC hapisteyken animasyon kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralýyken animasyon kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Dondurulma etkisindeyken animasyon kullanamazsýn.");
	if(OyuncuBilgi[playerid][oKelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken animasyon kullanamazsýn.");
	
	new oyuncuid, stil;
	if(sscanf(params, "ud", oyuncuid, stil)) return KullanimMesaji(playerid, "/tokalas [ID / Oyuncu] (1-10)");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Geçersiz oyuncu belirledin.");
	if(playerid == oyuncuid) return HataMesaji(playerid, "Kendinizle tokalaþamazsýnýz.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return HataMesaji(playerid, "Belirlediðin oyuncuya yeterince yakýn deðilsin.");
	if(stil < 1 || stil > 9) return HataMesaji(playerid, "Tokalaþma stilinizi geçerli aralýklarda yazýn. (1-9)");

	OyuncuBilgi[oyuncuid][oTokalasIstek] = playerid;
	OyuncuBilgi[oyuncuid][oTokalasStil] = stil;
	SunucuMesaji(oyuncuid, "%s seninle el sýkýþmak istiyor. (/kabul tokalas)", OyuncuIsim(playerid));
	SunucuMesaji(playerid, "%s tokalaþma isteðin iletildi.", OyuncuIsim(oyuncuid));
	return 1;
}

CMD:bodypush(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    AnimOynat(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
	return 1;
}

CMD:lowbodypush(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
	return 1;
}

CMD:headbutt(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"WAYFARER","WF_Fwd",4.0,0,0,0,0,0);
	return 1;
}

CMD:airkick(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"FIGHT_C","FightC_M",4.0,0,1,1,0,0);
	return 1;
}

CMD:doorkick(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
	return 1;
}

CMD:leftslap(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
	return 1;
}

CMD:elbow(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
	return 1;
}

CMD:coprun(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
	return 1;
}

CMD:piss(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
   	SetPlayerSpecialAction(playerid, 68);
	return 1;
}

CMD:sneak(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	AnimOynat(playerid, "PED", "Player_Sneak", 4.1, 1, 1, 1, 1, 1, 1);
	return 1;
}

CMD:drunk(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
   	AnimOynat(playerid, "PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 1, 1);
    return 1;
}

CMD:bomb(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
   	AnimOynat2(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:rob(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	AnimOynat(playerid, "ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 1, 1);
	return 1;
}

CMD:laugh(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	AnimOynat(playerid, "RAPPING", "Laugh_01", 4.0, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:lookout(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
   	AnimOynat2(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:robman(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:hide(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:vomit(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "FOOD", "EAT_Vomit_P", 3.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:eat(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:slapass(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat2(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:crack(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:fucku(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params)) {
    	case 1: AnimOynat2(playerid, "PED", "fucku", 4.0, 0, 0, 0, 0, 0, 1);
		case 2: AnimOynat2(playerid, "RIOT", "RIOT_FUKU", 4.1, 0, 1, 1, 0, 0, 0);
		default: KullanimMesaji(playerid, "/fucku [1-2]");
	}
    return 1;
}

CMD:taichi(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "PARK", "Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:drinkwater(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:time(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat2(playerid, "COP_AMBIENT", "Coplook_watch", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:sleep(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	new anim;
	if(sscanf(params, "d", anim) || anim < 1 || anim > 2) return KullanimMesaji(playerid, "/sleep [1-2]");
	switch(anim) {
    	case 1: AnimOynat(playerid, "CRACK", "crckdeth4", 4.0, 0, 1, 1, 1, 0, 1);
    	case 2: AnimOynat(playerid, "CRACK", "crckidle2", 4.0, 0, 1, 1, 1, 0, 1);
	}
	return 1;
}

CMD:blob(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "CRACK", "crckidle1", 4.0, 0, 1, 1, 1, 0, 1);
    return 1;
}

CMD:opendoor(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat2(playerid, "AIRPORT", "thrw_barl_thrw", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:wavedown(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat2(playerid, "BD_FIRE", "BD_Panic_01", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:cpr(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat2(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:dive(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params)) {
		case 1: AnimOynat(playerid, "DODGE", "Crush_Jump", 4.0, 0, 1, 1, 1, 0, 1);
		case 2: AnimOynat(playerid, "PED", "EV_dive", 4.1, 0, 1, 1, 1, 0, 1);
		default: KullanimMesaji(playerid, "/dive [1-2]");
	}
    return 1;
}

CMD:showoff(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "Freeweights", "gym_free_celebrate", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:goggles(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat2(playerid, "goggles", "goggles_put_on", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:cry(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "GRAVEYARD", "mrnF_loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:throw(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params)) {
		case 1: AnimOynat2(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0, 1);
		case 2: AnimOynat2(playerid,"GRENADE","WEAPON_throwu", 4.1, 0, 1, 1, 0, 0, 0);
		default: KullanimMesaji(playerid, "/throw [1-2]");
	}
    return 1;
}

CMD:robbed(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "SHOP", "SHP_Rob_GiveCash", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:hurt(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:box(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "GYMNASIUM", "GYMshadowbox", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:washhands(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "BD_FIRE", "wash_up", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:crabs(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "MISC", "Scratchballs_01", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:salute(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "ON_LOOKERS", "Pointup_loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:jerkoff(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "PAULNMAC", "wank_out", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:stop(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
    AnimOynat(playerid, "PED", "endchat_01", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:rap(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: AnimOynat(playerid, "RAPPING", "RAP_B_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: AnimOynat(playerid, "RAPPING", "RAP_C_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/rap [1-3]");
	}
	return 1;
}

CMD:wank(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "PAULNMAC", "wank_in", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: AnimOynat(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: AnimOynat(playerid, "PAULNMAC", "wank_out", 4.0, 1, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/wank [1-3]");
	}
	return 1;
}

CMD:chat(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "PED", "IDLE_CHAT", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: AnimOynat(playerid, "GANGS", "prtial_gngtlkA", 4.0, 1, 0, 0, 0, 0, 1);
		case 3:	AnimOynat(playerid, "GANGS", "prtial_gngtlkB", 4.0, 1, 0, 0, 0, 0, 1);
		case 4: AnimOynat(playerid, "GANGS", "prtial_gngtlkE", 4.0, 1, 0, 0, 0, 0, 1);
		case 5: AnimOynat(playerid, "GANGS", "prtial_gngtlkF", 4.0, 1, 0, 0, 0, 0, 1);
		case 6: AnimOynat(playerid, "GANGS", "prtial_gngtlkG", 4.0, 1, 0, 0, 0, 0, 1);
		case 7:	AnimOynat(playerid, "GANGS", "prtial_gngtlkH", 4.0, 1, 0, 0, 0, 0, 1);
		case 8: AnimOynat(playerid,"MISC","Idle_Chat_02",4.0, 1, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/chat [1-8]");
	}
	return 1;
}

CMD:sit(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "Attractors", "Stepsit_in", 4.0, 0, 0, 0, 1, 0, 1);
		case 2: AnimOynat(playerid, "CRIB", "PED_Console_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: AnimOynat(playerid, "INT_HOUSE", "LOU_In", 4.0, 0, 0, 0, 1, 1, 1);
		case 4: AnimOynat(playerid, "MISC", "SEAT_LR", 4.0, 1, 0, 0, 0, 0, 1);
		case 5: AnimOynat(playerid, "MISC", "Seat_talk_01", 4.0, 1, 0, 0, 0, 0, 1);
		case 6: AnimOynat(playerid, "MISC", "Seat_talk_02", 4.0, 1, 0, 0, 0, 0, 1);
		case 7: AnimOynat(playerid, "ped", "SEAT_down", 4.0, 0, 0, 0, 1, 1, 1);
		case 8: AnimOynat(playerid, "FOOD", "FF_Sit_In_L", 4.0, 0, 0, 0, 1, 0, 1);
		case 9: AnimOynat(playerid, "FOOD", "FF_Sit_In_R", 4.0, 0, 0, 0, 1, 0, 1);
		default: KullanimMesaji(playerid, "/sit [1-9]");
	}
	return 1;
}

CMD:bat(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid,"BASEBALL","Bat_IDLE",4.1, 0, 1, 1, 1, 1, 1);
		case 2: AnimOynat(playerid, "CRACK", "Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: AnimOynat(playerid, "CRACK", "Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/bat [1-3]");
	}
	return 1;
}

CMD:lean(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "GANGS", "leanIDLE", 4.0, 0, 0, 0, 1, 0, 1);
		case 2: AnimOynat(playerid, "MISC", "Plyrlean_loop", 4.0, 0, 0, 0, 1, 0, 1);
		default: KullanimMesaji(playerid, "/lean [1-2]");
	}
	return 1;
}

CMD:gesture(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
	case 1: AnimOynat2(playerid, "GHANDS", "gsign1", 4.0, 0, 0, 0, 0, 0, 1);
	case 2: AnimOynat2(playerid, "GHANDS", "gsign1LH", 4.0, 0, 0, 0, 0, 0, 1);
	case 3: AnimOynat2(playerid, "GHANDS", "gsign2", 4.0, 0, 0, 0, 0, 0, 1);
	case 4: AnimOynat2(playerid, "GHANDS", "gsign2LH", 4.0, 0, 0, 0, 0, 0, 1);
	case 5: AnimOynat2(playerid, "GHANDS", "gsign3", 4.0, 0, 0, 0, 0, 0, 1);
	case 6: AnimOynat2(playerid, "GHANDS", "gsign3LH", 4.0, 0, 0, 0, 0, 0, 1);
	case 7: AnimOynat2(playerid, "GHANDS", "gsign4", 4.0, 0, 0, 0, 0, 0, 1);
	case 8: AnimOynat2(playerid, "GHANDS", "gsign4LH", 4.0, 0, 0, 0, 0, 0, 1);
	case 9: AnimOynat2(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0, 1);
	case 10: AnimOynat2(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0, 1);
	case 11: AnimOynat2(playerid, "GHANDS", "gsign5LH", 4.0, 0, 0, 0, 0, 0, 1);
	case 12: AnimOynat2(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0, 1);
	case 13: AnimOynat2(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0, 1);
	case 14: AnimOynat2(playerid, "GANGS", "prtial_gngtlkD", 4.0, 0, 0, 0, 0, 0, 1);
	default: KullanimMesaji(playerid, "/gesture [1-14]");
	}
	return 1;
}

CMD:wave(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: AnimOynat(playerid, "KISSING", "gfwave2", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: AnimOynat(playerid, "PED", "endchat_03", 4.0, 1, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/wave [1-3]");
	}
	return 1;
}

CMD:signal(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "POLICE", "CopTraf_Come", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: AnimOynat(playerid, "POLICE", "CopTraf_Stop", 4.0, 1, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/signal [1-2]");
	}
	return 1;
}

CMD:nobreath(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
	case 1: AnimOynat(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
	case 2: AnimOynat(playerid, "PED", "IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
	case 3: AnimOynat(playerid, "FAT", "IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
	default: KullanimMesaji(playerid, "/nobreath [1-3]");
	}
	return 1;
}

CMD:fallover(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
		case 2: AnimOynat(playerid, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 0, 1);
		case 3: AnimOynat(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
		case 4: AnimOynat(playerid, "PED", "BIKE_fallR", 4.1, 0, 1, 1, 1, 0, 1);
		case 5: AnimOynat(playerid, "PED", "BIKE_fall_off", 4.1, 0, 1, 1, 1, 0, 1);
		case 6: AnimOynat(playerid, "PARACHUTE", "FALL_skyDive_DIE", 4.1, 0, 1, 1, 1, 0, 1);
		case 7: AnimOynat(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 1, 1, 1, 0, 1);
		case 8: AnimOynat(playerid, "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 0, 1);
		case 9: AnimOynat(playerid, "PED","FLOOR_hit_f", 4.1, 0, 1, 1, 1, 0, 1);
		default: KullanimMesaji(playerid, "/fallover [1-9]");
	}
	return 1;
}

CMD:pedmove(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "PED", "JOG_femaleA", 4.0, 1, 1, 1, 1, 1, 1);
		case 2: AnimOynat(playerid, "PED", "JOG_maleA", 4.0, 1, 1, 1, 1, 1, 1);
		case 3: AnimOynat(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1, 1);
		case 4: AnimOynat(playerid, "PED", "run_fat", 4.0, 1, 1, 1, 1, 1, 1);
		case 5: AnimOynat(playerid, "PED", "run_fatold", 4.0, 1, 1, 1, 1, 1, 1);
		case 6: AnimOynat(playerid, "PED", "run_old", 4.0, 1, 1, 1, 1, 1, 1);
		case 7: AnimOynat(playerid, "PED", "Run_Wuzi", 4.0, 1, 1, 1, 1, 1, 1);
		case 8: AnimOynat(playerid, "PED", "swat_run", 4.0, 1, 1, 1, 1, 1, 1);
		case 9: AnimOynat(playerid, "PED", "WALK_fat", 4.0, 1, 1, 1, 1, 1, 1);
		case 10: AnimOynat(playerid, "PED", "WALK_fatold", 4.0, 1, 1, 1, 1, 1, 1);
		case 11: AnimOynat(playerid, "PED", "WALK_gang1", 4.0, 1, 1, 1, 1, 1, 1);
		case 12: AnimOynat(playerid, "PED", "WALK_gang2", 4.0, 1, 1, 1, 1, 1, 1);
		case 13: AnimOynat(playerid, "PED", "WALK_old", 4.0, 1, 1, 1, 1, 1, 1);
		case 14: AnimOynat(playerid, "PED", "WALK_shuffle", 4.0, 1, 1, 1, 1, 1, 1);
		case 15: AnimOynat(playerid, "PED", "woman_run", 4.0, 1, 1, 1, 1, 1, 1);
		case 16: AnimOynat(playerid, "PED", "WOMAN_runbusy", 4.0, 1, 1, 1, 1, 1, 1);
		case 17: AnimOynat(playerid, "PED", "WOMAN_runfatold", 4.0, 1, 1, 1, 1, 1, 1);
		case 18: AnimOynat(playerid, "PED", "woman_runpanic", 4.0, 1, 1, 1, 1, 1, 1);
		case 19: AnimOynat(playerid, "PED", "WOMAN_runsexy", 4.0, 1, 1, 1, 1, 1, 1);
		case 20: AnimOynat(playerid, "PED", "WOMAN_walkbusy", 4.0, 1, 1, 1, 1, 1, 1);
		case 21: AnimOynat(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1, 1);
		case 22: AnimOynat(playerid, "PED", "WOMAN_walknorm", 4.0, 1, 1, 1, 1, 1, 1);
		case 23: AnimOynat(playerid, "PED", "WOMAN_walkold", 4.0, 1, 1, 1, 1, 1, 1);
		case 24: AnimOynat(playerid, "PED", "WOMAN_walkpro", 4.0, 1, 1, 1, 1, 1, 1);
		case 25: AnimOynat(playerid, "PED", "WOMAN_walksexy", 4.0, 1, 1, 1, 1, 1, 1);
		case 26: AnimOynat(playerid, "PED", "WOMAN_walkshop", 4.0, 1, 1, 1, 1, 1, 1);
		default: KullanimMesaji(playerid, "/pedmove [1-26]");
	}
	return 1;
}

CMD:yuruyus(playerid, params[])
{
	if(OyuncuBilgi[playerid][oYuruyusStil] > 0) {
	    SunucuMesaji(playerid, "Yürütüþ stilin sýfýrlandý.");
	    OyuncuBilgi[playerid][oYuruyusStil] = 0;
	    return 1;
	}
	new stil;
	if(sscanf(params, "d", stil)) return KullanimMesaji(playerid, "/yuruyus [1-10]");
	if(stil < 1 || stil > 10) return HataMesaji(playerid, "Geçersiz yürüyüþ stili. (1-10)");
	switch(strval(params))
	{
		case 1: OyuncuBilgi[playerid][oYuruyusStil] = 3, SunucuMesaji(playerid, "Yeni bir yürüyüþ stili kullanýyorsun.");
		case 2: OyuncuBilgi[playerid][oYuruyusStil] = 4, SunucuMesaji(playerid, "Yeni bir yürüyüþ stili kullanýyorsun.");
		case 3: OyuncuBilgi[playerid][oYuruyusStil] = 5, SunucuMesaji(playerid, "Yeni bir yürüyüþ stili kullanýyorsun.");
		case 4: OyuncuBilgi[playerid][oYuruyusStil] = 6, SunucuMesaji(playerid, "Yeni bir yürüyüþ stili kullanýyorsun.");
		case 5: OyuncuBilgi[playerid][oYuruyusStil] = 8, SunucuMesaji(playerid, "Yeni bir yürüyüþ stili kullanýyorsun.");
		case 6: OyuncuBilgi[playerid][oYuruyusStil] = 9, SunucuMesaji(playerid, "Yeni bir yürüyüþ stili kullanýyorsun.");
		case 7: OyuncuBilgi[playerid][oYuruyusStil] = 10, SunucuMesaji(playerid, "Yeni bir yürüyüþ stili kullanýyorsun.");
		case 8: OyuncuBilgi[playerid][oYuruyusStil] = 11, SunucuMesaji(playerid, "Yeni bir yürüyüþ stili kullanýyorsun.");
		case 9: OyuncuBilgi[playerid][oYuruyusStil] = 12, SunucuMesaji(playerid, "Yeni bir yürüyüþ stili kullanýyorsun.");
		case 10: OyuncuBilgi[playerid][oYuruyusStil] = 13, SunucuMesaji(playerid, "Yeni bir yürüyüþ stili kullanýyorsun.");
	}
	return 1;
}

CMD:getjiggy(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "DANCING", "DAN_Down_A", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: AnimOynat(playerid, "DANCING", "DAN_Left_A", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: AnimOynat(playerid, "DANCING", "DAN_Loop_A", 4.0, 1, 0, 0, 0, 0, 1);
		case 4: AnimOynat(playerid, "DANCING", "DAN_Right_A", 4.0, 1, 0, 0, 0, 0, 1);
		case 5: AnimOynat(playerid, "DANCING", "DAN_Up_A", 4.0, 1, 0, 0, 0, 0, 1);
		case 6: AnimOynat(playerid, "DANCING", "dnce_M_a", 4.0, 1, 0, 0, 0, 0, 1);
		case 7: AnimOynat(playerid, "DANCING", "dnce_M_b", 4.0, 1, 0, 0, 0, 0, 1);
		case 8: AnimOynat(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0, 1);
		case 9: AnimOynat(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0, 1);
		case 10: AnimOynat(playerid, "DANCING", "dnce_M_d", 4.0, 1, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/getjiggy [1-10]");
	}
	return 1;
}

CMD:stripclub(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
	case 1: AnimOynat(playerid, "STRIP", "PLY_CASH", 4.0, 1, 0, 0, 0, 0, 1);
	case 2: AnimOynat(playerid, "STRIP", "PUN_CASH", 4.0, 1, 0, 0, 0, 0, 1);
	default: KullanimMesaji(playerid, "/stripclub [1-2]");
	}
	return 1;
}

CMD:smoke(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
	case 1: AnimOynat2(playerid, "SMOKING", "M_smk_in", 4.0, 0, 0, 0, 0, 0, 1);
	case 2: AnimOynat(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0, 1);
	case 3: AnimOynat2(playerid, "GANGS", "smkcig_prtl", 4.0, 0, 0, 0, 0, 0, 1);
	default: KullanimMesaji(playerid, "/smoke [1-3]");
	}
	return 1;
}

CMD:dj(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "SCRATCHING", "scdldlp", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: AnimOynat(playerid, "SCRATCHING", "scdlulp", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: AnimOynat(playerid, "SCRATCHING", "scdrdlp", 4.0, 1, 0, 0, 0, 0, 1);
		case 4: AnimOynat(playerid, "SCRATCHING", "scdrulp", 4.0, 1, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/dj [1-4]");
	}
	return 1;
}

CMD:tag(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: AnimOynat(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: AnimOynat2(playerid, "SPRAYCAN", "spraycan_full", 4.0, 0, 1, 0, 0, 0, 0);
		default: KullanimMesaji(playerid, "/tag [1-3]");
	}
	return 1;
}

CMD:deal(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
	case 1: AnimOynat(playerid, "DEALER", "DEALER_DEAL", 4.0, 1, 0, 0, 0, 0, 1);
	case 2: AnimOynat(playerid, "DEALER", "shop_pay", 4.0, 1, 0, 0, 0, 0, 1);
	default: KullanimMesaji(playerid, "/deal [1-2]");
	}
	return 1;
}

CMD:crossarms(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1, 1);
		case 2: AnimOynat(playerid, "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: AnimOynat(playerid, "GRAVEYARD", "mrnM_loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 4: AnimOynat(playerid, "GRAVEYARD", "prst_loopa", 4.0, 1, 0, 0, 0, 0, 1);
		case 5: AnimOynat(playerid, "DEALER", "DEALER_IDLE_01", 4.0, 1, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/crossarms [1-5]");
	}
	return 1;
}

CMD:cheer(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
	case 1: AnimOynat(playerid, "ON_LOOKERS", "shout_01", 4.0, 1, 0, 0, 0, 0, 1);
	case 2: AnimOynat(playerid, "ON_LOOKERS", "shout_02", 4.0, 1, 0, 0, 0, 0, 1);
	case 3: AnimOynat(playerid, "ON_LOOKERS", "shout_in", 4.0, 1, 0, 0, 0, 0, 1);
	case 4: AnimOynat(playerid, "RIOT", "RIOT_ANGRY_B", 4.0, 1, 0, 0, 0, 0, 1);
	case 5: AnimOynat(playerid, "RIOT", "RIOT_CHANT", 4.0, 1, 0, 0, 0, 0, 1);
	case 6: AnimOynat(playerid, "RIOT", "RIOT_shout", 4.0, 1, 0, 0, 0, 0, 1);
	case 7: AnimOynat(playerid, "STRIP", "PUN_HOLLER", 4.0, 1, 0, 0, 0, 0, 1);
	case 8: AnimOynat(playerid, "OTB", "wtchrace_win", 4.0, 1, 0, 0, 0, 0, 1);
	default: KullanimMesaji(playerid, "/cheer [1-8]");
	}
	return 1;
}

CMD:lay(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
	case 1: AnimOynat(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0, 1);
	case 2: AnimOynat(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0, 1);
	case 3: AnimOynat(playerid, "BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0, 1);
	case 4: AnimOynat(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
	case 5: AnimOynat(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0, 1);
	default: KullanimMesaji(playerid, "/lay [1-5]");
	}
	return 1;
}

CMD:siteat(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
	case 1: AnimOynat(playerid, "FOOD", "FF_Sit_Eat3", 4.0, 1, 0, 0, 0, 0, 1);
	case 2: AnimOynat(playerid, "FOOD", "FF_Sit_Eat2", 4.0, 1, 0, 0, 0, 0, 1);
	default: KullanimMesaji(playerid, "/siteat [1-2]");
	}
	return 1;
}

CMD:bar(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
	case 1: AnimOynat2(playerid, "BAR", "Barcustom_get", 4.0, 0, 1, 0, 0, 0, 1);
	case 2: AnimOynat2(playerid, "BAR", "Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
	case 3: AnimOynat2(playerid, "BAR", "Barserve_give", 4.0, 0, 0, 0, 0, 0, 1);
	case 4: AnimOynat2(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 0, 0, 0, 0, 1);
	case 5: AnimOynat(playerid, "BAR", "BARman_idle", 4.0, 1, 0, 0, 0, 0, 1);
	default: KullanimMesaji(playerid, "/bar [1-5]");
	}
	return 1;
}

CMD:dance(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
	switch(strval(params))
	{
		case 1: SetPlayerSpecialAction(playerid, 5);
		case 2: SetPlayerSpecialAction(playerid, 6);
		case 3: SetPlayerSpecialAction(playerid, 7);
		case 4: SetPlayerSpecialAction(playerid, 8);
		default: KullanimMesaji(playerid, "/dance [1-4]");
	}
	return 1;
}

CMD:spank(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "SNM", "SPANKINGW", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: AnimOynat(playerid, "SNM", "SPANKINGP", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: AnimOynat(playerid, "SNM", "SPANKEDW", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: AnimOynat(playerid, "SNM", "SPANKEDP", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: AnimOynat(playerid, "MISC", "bitchslap", 4.1, 1, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/spank [1-4]");
	}
	return 1;
}

CMD:sexy(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
	case 1: AnimOynat(playerid, "STRIP", "strip_E", 4.1, 1, 0, 0, 0, 0, 1);
	case 2: AnimOynat(playerid, "STRIP", "strip_G", 4.1, 1, 0, 0, 0, 0, 1);
	case 3: AnimOynat2(playerid, "STRIP", "STR_A2B", 4.1, 0, 0, 0, 0, 0, 1);
	case 4: AnimOynat(playerid, "STRIP", "STR_Loop_A", 4.1, 1, 0, 0, 0, 0, 1);
	case 5: AnimOynat(playerid, "STRIP", "STR_Loop_B", 4.1, 1, 0, 0, 0, 0, 1);
	case 6: AnimOynat(playerid, "STRIP", "STR_Loop_C", 4.1, 1, 0, 0, 0, 0, 1);
	default: KullanimMesaji(playerid, "/sexy [1-6]");
	}
	return 1;
}

CMD:holdup(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
	case 1: AnimOynat(playerid, "POOL", "POOL_ChalkCue", 4.1, 0, 1, 1, 1, 1, 1);
	case 2: AnimOynat(playerid, "POOL", "POOL_Idle_Stance", 4.1, 0, 1, 1, 1, 1, 1);
	default: KullanimMesaji(playerid, "/holdup [1-2]");
	}
	return 1;
}

CMD:stickjup(playerid, params[])
{
    AnimOynat(playerid, "POOL", "POOL_Idle_Stance", 4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:copa(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat2(playerid, "POLICE", "CopTraf_Away", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: AnimOynat2(playerid, "POLICE", "CopTraf_Come", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: AnimOynat2(playerid, "POLICE", "CopTraf_Left", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: AnimOynat2(playerid, "POLICE", "CopTraf_Stop", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: AnimOynat(playerid, "POLICE", "Cop_move_FWD", 4.1, 1, 1, 1, 1, 1, 1);
		case 6: AnimOynat(playerid, "POLICE", "crm_drgbst_01", 4.1, 0, 0, 0, 1, 5000, 1);
		case 7: AnimOynat2(playerid, "POLICE", "Door_Kick", 4.1, 0, 1, 1, 1, 1, 1);
		case 8: AnimOynat2(playerid, "POLICE", "plc_drgbst_01", 4.1, 0, 0, 0, 0, 5000, 1);
		case 9: AnimOynat2(playerid, "POLICE", "plc_drgbst_02", 4.1, 0, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/copa [1-9]");
	}
	return 1;
}

CMD:misc(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "CAR", "Fixn_Car_Loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: AnimOynat2(playerid, "CAR", "flag_drop", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: AnimOynat2(playerid, "PED", "bomber", 4.1, 0, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/misc [1-3]");
	}
	return 1;
}

CMD:snatch(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat2(playerid, "PED", "BIKE_elbowL", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: AnimOynat2(playerid, "PED", "BIKE_elbowR", 4.1, 0, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/snatch [1-2]");
	}
	return 1;
}

CMD:blowjob(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: AnimOynat(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: AnimOynat(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: AnimOynat(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_W", 4.1, 1, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/blowjob [1-4]");
	}
	return 1;
}

CMD:kiss(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat2(playerid, "KISSING", "Playa_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: AnimOynat2(playerid, "KISSING", "Playa_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: AnimOynat2(playerid, "KISSING", "Playa_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: AnimOynat2(playerid, "KISSING", "Grlfrd_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: AnimOynat2(playerid, "KISSING", "Grlfrd_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: AnimOynat2(playerid, "KISSING", "Grlfrd_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/kiss [1-6]");
	}
	return 1;
}

CMD:idles(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
		case 1: AnimOynat(playerid, "PLAYIDLES", "shift", 4.1, 1, 1, 1, 1, 1, 1);
		case 2: AnimOynat(playerid, "PLAYIDLES", "shldr", 4.1, 1, 1, 1, 1, 1, 1);
		case 3: AnimOynat(playerid, "PLAYIDLES", "stretch", 4.1, 1, 1, 1, 1, 1, 1);
		case 4: AnimOynat(playerid, "PLAYIDLES", "strleg", 4.1, 1, 1, 1, 1, 1, 1);
		case 5: AnimOynat(playerid, "PLAYIDLES", "time", 4.1, 1, 1, 1, 1, 1, 1);
		case 6: AnimOynat(playerid, "COP_AMBIENT", "Copbrowse_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 7: AnimOynat(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 8: AnimOynat(playerid, "COP_AMBIENT", "Coplook_shake", 4.1, 1, 0, 0, 0, 0, 1);
		case 9: AnimOynat(playerid, "COP_AMBIENT", "Coplook_think", 4.1, 1, 0, 0, 0, 0, 1);
		case 10: AnimOynat(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 1, 0, 0, 0, 0, 1);
		case 11: AnimOynat(playerid, "PED", "roadcross", 4.1, 1, 0, 0, 0, 0, 1);
		case 12: AnimOynat(playerid, "PED", "roadcross_female", 4.1, 1, 0, 0, 0, 0, 1);
		case 13: AnimOynat(playerid, "PED", "roadcross_gang", 4.1, 1, 0, 0, 0, 0, 1);
		case 14: AnimOynat(playerid, "PED", "roadcross_old", 4.1, 1, 0, 0, 0, 0, 1);
		case 15: AnimOynat(playerid, "PED", "woman_idlestance", 4.1, 1, 0, 0, 0, 0, 1);
		case 16: AnimOynat(playerid, "WUZI","Wuzi_stand_loop", 4.1, 1, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/idles [1-15]");
	}
	return 1;
}

CMD:sunbathe(playerid, params[])
{
	if(!PedAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
	case 1: AnimOynat(playerid, "SUNBATHE", "batherdown", 4.1, 0, 1, 1, 1, 1, 1);
	case 2: AnimOynat(playerid, "SUNBATHE", "batherup", 4.1, 0, 1, 1, 1, 1, 1);
	case 3: AnimOynat(playerid, "SUNBATHE", "Lay_Bac_in", 4.1, 0, 1, 1, 1, 1, 1);
	case 4: AnimOynat(playerid, "SUNBATHE", "Lay_Bac_out", 4.1, 0, 1, 1, 1, 1, 1);
	case 5: AnimOynat(playerid, "SUNBATHE", "ParkSit_M_IdleA", 4.1, 0, 1, 1, 1, 1, 1);
	case 6: AnimOynat(playerid, "SUNBATHE", "ParkSit_M_IdleB", 4.1, 0, 1, 1, 1, 1, 1);
	case 7: AnimOynat(playerid, "SUNBATHE", "ParkSit_M_IdleC", 4.1, 0, 1, 1, 1, 1, 1);
	case 8: AnimOynat(playerid, "SUNBATHE", "ParkSit_M_in", 4.1, 0, 1, 1, 1, 1, 1);
	case 9: AnimOynat(playerid, "SUNBATHE", "ParkSit_M_out", 4.1, 0, 1, 1, 1, 1, 1);
	case 10: AnimOynat(playerid, "SUNBATHE", "ParkSit_W_idleA", 4.1, 0, 1, 1, 1, 1, 1);
	case 11: AnimOynat(playerid, "SUNBATHE", "ParkSit_W_idleB", 4.1, 0, 1, 1, 1, 1, 1);
	case 12: AnimOynat(playerid, "SUNBATHE", "ParkSit_W_idleC", 4.1, 0, 1, 1, 1, 1, 1);
	case 13: AnimOynat(playerid, "SUNBATHE", "ParkSit_W_in", 4.1, 0, 1, 1, 1, 1, 1);
	case 14: AnimOynat(playerid, "SUNBATHE", "ParkSit_W_out", 4.1, 0, 1, 1, 1, 1, 1);
	case 15: AnimOynat(playerid, "SUNBATHE", "SBATHE_F_LieB2Sit", 4.1, 0, 1, 1, 1, 1, 1);
	case 16: AnimOynat(playerid, "SUNBATHE", "SBATHE_F_Out", 4.1, 0, 1, 1, 1, 1, 1);
	case 17: AnimOynat(playerid, "SUNBATHE", "SitnWait_in_W", 4.1, 0, 1, 1, 1, 1, 1);
	case 18: AnimOynat(playerid, "SUNBATHE", "SitnWait_out_W", 4.1, 0, 1, 1, 1, 1, 1);
	default: KullanimMesaji(playerid, "/sunbathe [1-18]");
	}
	return 1;
}

CMD:lowrider(playerid, params[])
{
	if(!AracAnimKontrol(playerid)) return 1;
	new aid = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(aid) == 536 || GetVehicleModel(aid) == 575 || GetVehicleModel(aid) == 567)
	{
		switch(strval(params))
		{
		case 1: AnimOynat2(playerid, "LOWRIDER", "lrgirl_bdbnce", 4.1, 0, 1, 1, 1, 1, 1);
		case 2: AnimOynat2(playerid, "LOWRIDER", "lrgirl_hair", 4.1, 0, 1, 1, 1, 1, 1);
		case 3: AnimOynat2(playerid, "LOWRIDER", "lrgirl_hurry", 4.1, 0, 1, 1, 1, 1, 1);
		case 4: AnimOynat2(playerid, "LOWRIDER", "lrgirl_idleloop", 4.1, 0, 1, 1, 1, 1, 1);
		case 5: AnimOynat2(playerid, "LOWRIDER", "lrgirl_idle_to_l0", 4.1, 0, 1, 1, 1, 1, 1);
		case 6: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l0_bnce", 4.1, 0, 1, 1, 1, 1, 1);
		case 7: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l0_loop", 4.1, 0, 1, 1, 1, 1, 1);
		case 8: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l0_to_l1", 4.1, 0, 1, 1, 1, 1, 1);
		case 9: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l12_to_l0", 4.1, 0, 1, 1, 1, 1, 1);
		case 10: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l1_bnce", 4.1, 0, 1, 1, 1, 1, 1);
		case 11: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l1_loop", 4.1, 0, 1, 1, 1, 1, 1);
		case 12: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l1_to_l2", 4.1, 0, 1, 1, 1, 1, 1);
		case 13: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l2_bnce", 4.1, 0, 1, 1, 1, 1, 1);
		case 14: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l2_loop", 4.1, 0, 1, 1, 1, 1, 1);
		case 15: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l2_to_l3", 4.1, 0, 1, 1, 1, 1, 1);
		case 16: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l345_to_l1", 4.1, 0, 1, 1, 1, 1, 1);
		case 17: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l3_bnce", 4.1, 0, 1, 1, 1, 1, 1);
		case 18: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l3_loop", 4.1, 0, 1, 1, 1, 1, 1);
		case 19: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l3_to_l4", 4.1, 0, 1, 1, 1, 1, 1);
		case 20: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l4_bnce", 4.1, 0, 1, 1, 1, 1, 1);
		case 21: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l4_loop", 4.1, 0, 1, 1, 1, 1, 1);
		case 22: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l4_to_l5", 4.1, 0, 1, 1, 1, 1, 1);
		case 23: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l5_bnce", 4.1, 0, 1, 1, 1, 1, 1);
		case 24: AnimOynat2(playerid, "LOWRIDER", "lrgirl_l5_loop", 4.1, 0, 1, 1, 1, 1, 1);
		case 25: AnimOynat2(playerid, "LOWRIDER", "prtial_gngtlkB", 4.1, 0, 1, 1, 1, 1, 1);
		case 26: AnimOynat2(playerid, "LOWRIDER", "prtial_gngtlkC", 4.1, 0, 1, 1, 1, 1, 1);
		case 27: AnimOynat2(playerid, "LOWRIDER", "prtial_gngtlkD", 4.1, 0, 1, 1, 1, 1, 1);
		case 28: AnimOynat2(playerid, "LOWRIDER", "prtial_gngtlkE", 4.1, 0, 1, 1, 1, 1, 1);
		case 29: AnimOynat2(playerid, "LOWRIDER", "prtial_gngtlkF", 4.1, 0, 1, 1, 1, 1, 1);
		case 30: AnimOynat2(playerid, "LOWRIDER", "prtial_gngtlkG", 4.1, 0, 1, 1, 1, 1, 1);
		case 31: AnimOynat2(playerid, "LOWRIDER", "prtial_gngtlkH", 4.1, 0, 1, 1, 1, 1, 1);
		default: KullanimMesaji(playerid, "/lowrider [1-31]");
		}
	}
	else HataMesaji(playerid, "Bu animasyon sadece lowrider tipi araçlarda kullanýlabilir.");
	return 1;
}

CMD:carchat(playerid, params[])
{
	if(!AracAnimKontrol(playerid)) return 1;
	switch(strval(params))
	{
	case 1: AnimOynat2(playerid, "CAR_CHAT", "carfone_in", 4.1, 0, 1, 1, 1, 1, 1);
	case 2: AnimOynat2(playerid, "CAR_CHAT", "carfone_loopA", 4.1, 0, 1, 1, 1, 1, 1);
	case 3: AnimOynat2(playerid, "CAR_CHAT", "carfone_loopA_to_B", 4.1, 0, 1, 1, 1, 1, 1);
	case 4: AnimOynat2(playerid, "CAR_CHAT", "carfone_loopB", 4.1, 0, 1, 1, 1, 1, 1);
	case 5: AnimOynat2(playerid, "CAR_CHAT", "carfone_loopB_to_A", 4.1, 0, 1, 1, 1, 1, 1);
	case 6: AnimOynat2(playerid, "CAR_CHAT", "carfone_out", 4.1, 0, 1, 1, 1, 1, 1);
	case 7: AnimOynat2(playerid, "CAR_CHAT", "CAR_Sc1_BL", 4.1, 0, 1, 1, 1, 1, 1);
	case 8: AnimOynat2(playerid, "CAR_CHAT", "CAR_Sc1_BR", 4.1, 0, 1, 1, 1, 1, 1);
	case 9: AnimOynat2(playerid, "CAR_CHAT", "CAR_Sc1_FL", 4.1, 0, 1, 1, 1, 1, 1);
	case 10: AnimOynat2(playerid, "CAR_CHAT", "CAR_Sc1_FR", 4.1, 0, 1, 1, 1, 1, 1);
	case 11: AnimOynat2(playerid, "CAR_CHAT", "CAR_Sc2_FL", 4.1, 0, 1, 1, 1, 1, 1);
	case 12: AnimOynat2(playerid, "CAR_CHAT", "CAR_Sc3_BR", 4.1, 0, 1, 1, 1, 1, 1);
	case 13: AnimOynat2(playerid, "CAR_CHAT", "CAR_Sc3_FL", 4.1, 0, 1, 1, 1, 1, 1);
	case 14: AnimOynat2(playerid, "CAR_CHAT", "CAR_Sc3_FR", 4.1, 0, 1, 1, 1, 1, 1);
	case 15: AnimOynat2(playerid, "CAR_CHAT", "CAR_Sc4_BL", 4.1, 0, 1, 1, 1, 1, 1);
	case 16: AnimOynat2(playerid, "CAR_CHAT", "CAR_Sc4_BR", 4.1, 0, 1, 1, 1, 1, 1);
	case 17: AnimOynat2(playerid, "CAR_CHAT", "CAR_Sc4_FL", 4.1, 0, 1, 1, 1, 1, 1);
	case 18: AnimOynat2(playerid, "CAR_CHAT", "CAR_Sc4_FR", 4.1, 0, 1, 1, 1, 1, 1);
	case 19: AnimOynat2(playerid, "CAR", "Sit_relaxed", 4.1, 0, 1, 1, 1, 1, 1);
	//case 20: AnimOynat2(playerid, "CAR", "Tap_hand", 4.1, 1, 0, 0, 0, 0, 1);
	default: KullanimMesaji(playerid, "/carchat [1-19]");
	}
	return 1;
}

CMD:followme(playerid,params[]) {
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");

	AnimOynat2(playerid,"WUZI","Wuzi_follow",4.1, 0, 1, 1, 0, 0, 0);
	return 1;
}

CMD:hitch(playerid,params[]) {
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
	AnimOynat(playerid,"MISC","Hiker_Pose", 4.0, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:giftgiving(playerid,params[]) {
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
	AnimOynat2(playerid,"KISSING","gift_give",4.1, 0, 1, 1, 0, 0, 0);
	return 1;
}

CMD:handsup(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");

	AnimOynat(playerid, "ROB_BANK","SHP_HandsUp_Scr",4.1, 0, 1, 1, 1, 1, 1);
	SetPVarInt(playerid, "kelepce_anim", 1);
    return 1;
}

CMD:cellin(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	return 1;
}

CMD:cellout(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	return 1;
}

CMD:gkick(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
    static anim;
	if(sscanf(params, "d", anim)) return KullanimMesaji(playerid, "/gkick [1-4]");

	switch(anim) {
		case 1: AnimOynat2(playerid,"PED","CAR_pulloutL_LHS", 4.1, 0, 1, 1, 0, 0, 0);
		case 2: AnimOynat2(playerid,"PED","CAR_pullout_LHS", 4.1, 0, 1, 1, 0, 0, 0);
		case 3: AnimOynat2(playerid, "FIGHT_D", "FightD_2", 4.1, 0, 1, 1, 0, 0);
		case 4: AnimOynat2(playerid,"FIGHT_D","FightD_G", 4.1, 0, 1, 1, 0, 0, 0);
		default: KullanimMesaji(playerid, "/rcarjack [1-2]");
	}
    return 1;
}

CMD:knife(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
	static anim;
	if(sscanf(params, "d", anim)) return KullanimMesaji(playerid, "/knife [1-3]");
	switch(anim)
	{
		case 1: AnimOynat2(playerid,"KNIFE","KILL_Knife_Ped_Damage", 4.1, 0, 1, 1, 0, 0, 0);
		case 2: AnimOynat2(playerid,"KNIFE","KILL_Knife_Player", 4.1, 0, 1, 1, 0, 0, 0);
		case 3: AnimOynat(playerid,"KNIFE","KILL_Partial",4.1, 0, 1, 1, 1, 1, 1);
		default: KullanimMesaji(playerid, "/knife [1-3]");
	}
	return 1;
}

CMD:basket(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
	static anim;
	if(sscanf(params, "d", anim)) return KullanimMesaji(playerid, "/basket [1-4]");

    switch(anim)
	{
		case 1: AnimOynat2(playerid, "BSKTBALL", "BBALL_Jump_Shot", 4.1, 0, 1, 1, 0, 0, 0);
		case 2: AnimOynat2(playerid, "BSKTBALL", "BBALL_pickup", 4.1, 0, 1, 1, 0, 0, 0);
		case 3: AnimOynat(playerid, "BSKTBALL", "BBALL_run", 4.1, 1, 1, 1, 1, 1, 1);
		case 4: AnimOynat(playerid, "BSKTBALL", "BBALL_def_loop", 4.1, 1, 0, 0, 0, 0, 1);
		default: KullanimMesaji(playerid, "/basket [1-4]");
	}
   	return 1;
}

CMD:reload(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
    if(strcmp(params,"deagle", true) == 0) AnimOynat2(playerid, "COLT45", "colt45_reload", 4.0, 0, 1, 1, 0, 0, 0);
    else if(strcmp(params,"smg", true) == 0) AnimOynat2(playerid,"UZI","UZI_reload",4.1, 0, 1, 1, 0, 0, 0);
	else if(strcmp(params,"ak", true) == 0) AnimOynat2(playerid,"UZI","UZI_reload",4.1, 0, 1, 1, 0, 0, 0);
	else if(strcmp(params,"m4", true) == 0) AnimOynat2(playerid,"UZI","UZI_reload",4.1, 0, 1, 1, 0, 0, 0);
   	else KullanimMesaji(playerid, "/reload [deagle/smg/ak/m4]");
   	return 1;
}

CMD:aim(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
	static anim;
	if(sscanf(params, "d", anim)) return KullanimMesaji(playerid, "/aim [1-3]");
	switch(anim) {
		case 1: AnimOynat(playerid,"PED","gang_gunstand",4.1, 0, 1, 1, 1, 1, 1);
		case 2: AnimOynat(playerid,"PED","Driveby_L",4.1, 0, 1, 1, 1, 1, 1);
		case 3: AnimOynat(playerid,"PED","Driveby_R",4.1, 0, 1, 1, 1, 1, 1);
		default: KullanimMesaji(playerid, "/aim [1-3]");
	}
    return 1;
}

CMD:celebrate(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
	static anim;
	if(sscanf(params, "d", anim)) return KullanimMesaji(playerid, "/celebrate [1-2]");
	switch(anim) {
		case 1: AnimOynat2(playerid,"benchpress","gym_bp_celebrate", 4.1, 0, 1, 1, 0, 0, 0);
		case 2: AnimOynat2(playerid,"GYMNASIUM","gym_tread_celebrate", 4.1, 0, 1, 1, 0, 0, 0);
		default: KullanimMesaji(playerid, "/celebrate [1-2]");
	}
	return 1;
}

CMD:bed(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
	static anim;
	if(sscanf(params, "d", anim)) return KullanimMesaji(playerid, "/bed [1-4]");
	switch(anim) {
		case 1: AnimOynat(playerid,"INT_HOUSE","BED_In_L",4.0, 0, 0, 0, 1, 1, 1);
		case 2: AnimOynat(playerid,"INT_HOUSE","BED_In_R",4.0, 0, 0, 0, 1, 1, 1);
		case 3: AnimOynat(playerid,"INT_HOUSE","BED_Loop_L", 4.1, 0, 1, 1, 1, 1, 1);
		case 4: AnimOynat(playerid,"INT_HOUSE","BED_Loop_R", 4.1, 0, 1, 1, 1, 1, 1);
		default: KullanimMesaji(playerid, "/bed [1-4]");
	}
	return 1;
}

CMD:what(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
	AnimOynat2(playerid, "RIOT", "RIOT_ANGRY",4.1, 0, 1, 1, 0, 0, 0);
	return 1;
}

CMD:shakehead(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
	AnimOynat2(playerid, "MISC", "plyr_shkhead", 4.1, 0, 1, 1, 0, 0, 0);
	return 1;
}

CMD:carry(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
	static anim;
	if(sscanf(params, "d", anim)) return KullanimMesaji(playerid, "/carry [1-2]");
	switch(anim) {
		case 1: AnimOynat2(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 0, 0, 0);
		case 2: AnimOynat2(playerid, "CARRY", "liftup", 4.1, 0, 1, 1, 0, 0, 0);
		default: KullanimMesaji(playerid, "/carry [1-2]");
	}
	return 1;
}

public SaniyeTimer()
{
	new saat, dakika, saniye;
	gettime(saat, dakika, saniye);
	SetWorldTime(saat);
	switch(saat)
	{
 		case 0: SetWeather(2);
 		case 4: SetWeather(3);
 		case 7: SetWeather(0);
 		case 18: SetWeather(14);
	    case 21: SetWeather(5);
	}
	return 1;
}

public DondurulmaIptal(oyuncuid)
{
    Aksesuar_Ayarla(oyuncuid);
	new Float:pos_oyuncu[3];
	GetPlayerPos(oyuncuid, pos_oyuncu[0], pos_oyuncu[1], pos_oyuncu[2]);
	SetPlayerPos(oyuncuid, pos_oyuncu[0], pos_oyuncu[1], pos_oyuncu[2]);
    Streamer_Update(oyuncuid);
    Streamer_UpdateEx(oyuncuid, pos_oyuncu[0], pos_oyuncu[1], pos_oyuncu[2], GetPlayerVirtualWorld(oyuncuid), GetPlayerInterior(oyuncuid));
	if(OyuncuBilgi[oyuncuid][oYaraliSure] > 0) return false;
	
	TogglePlayerControllable(oyuncuid, true);
	OyuncuBilgi[oyuncuid][oKontrol] = true;
	if(Oyuncu_Evde(oyuncuid) == -1 && Oyuncu_Isyerinde(oyuncuid) == -1 && Oyuncu_Binada(oyuncuid) == -1) foreach(new i : Player) if(OyuncuBilgi[i][oMarker] == oyuncuid) DisablePlayerCheckpoint(i), SetPlayerMarkerForPlayer(i, oyuncuid, 0x207AD3FF);
	return 1;
}

public Eski_Virtual(oyuncuid, dunya) SetPlayerVirtualWorld(oyuncuid, dunya);

public SunucuDakikaTimer()
{
	otokayit++;
	if(vergiler_durum == true) vergidakika++;
	else if(vergiler_durum == false) vergidakika = 0;
	
	if(vergidakika >= 60 && vergiler_durum == true) {
	    vergidakika = 0;
		for(new i = 0; i != MAKSIMUM_EV; i++) if(EvBilgi[i][evKullanimda] == true && EvBilgi[i][evSahip] > 0 && EvBilgi[i][evMuafiyet] == 0) {
			EvBilgi[i][evVergi] += EvBilgi[i][evFiyat] / 2000;
			if(EvBilgi[i][evVergi] > EvBilgi[i][evFiyat] / 2) {
				for(new r = 0; r != MAKSIMUM_RAF; r++) if(RafBilgi[r][rafKullanimda] && RafBilgi[r][rafEv] == EvBilgi[i][evID]) Raf_Sil(r);
				for(new u = 0; u != MAKSIMUM_UYUSTURUCU; u++) if(UyusturucuBilgi[u][uKullanimda] == true && UyusturucuBilgi[u][uEv] == EvBilgi[i][evID]) Uyusturucu_Sil(u);
				Mobilyalari_Sifirla(i);

				EvBilgi[i][evDurum] = 1;
				EvBilgi[i][evSahip] = 0;
				for(new e = 0; e != 5; e++) EvBilgi[i][evAnahtar][e] = 0;
				EvBilgi[i][evKiraci] = 0;
				EvBilgi[i][evKiraUcret] = 20;
				EvBilgi[i][evKiralik] = 0;
				EvBilgi[i][evKasa] = 0;
				EvBilgi[i][evLevel] = 1;
				EvBilgi[i][evVergi] = 0;
			}
			Ev_Kaydet(i);
		}
		for(new a = 0; a != MAKSIMUM_ARAC; a++) if(AracBilgi[a][aracKullanimda] && AracBilgi[a][aracSahip] > 0) {
		    new aracfiyati = 0;
			for(new c = 0; c != sizeof(SatilikAraclar); c ++) if(SatilikAraclar[c][0] == AracBilgi[a][aracModel]) aracfiyati = SatilikAraclar[c][1];
			if(aracfiyati > 0) {
				AracBilgi[a][aracVergi] +=  aracfiyati / 2000;
				if(AracBilgi[a][aracZirh] > 0) AracBilgi[a][aracVergi] += AracBilgi[a][aracZirh] * 25;
				Arac_Kaydet(a);
			}
			if(aracfiyati > 0 && AracBilgi[a][aracVergi] >= aracfiyati / 2) Arac_Sil(a);
		}
	}
	if(otokayit > 4) {
	    otokayit = 0;
	    foreach(new i : Player) if(IsPlayerConnected(i) && OyuncuBilgi[i][oGiris] == true) OyuncuKaydet(i);
		for(new a = 0; a != MAKSIMUM_ARAC; a++) if(AracBilgi[a][aracKullanimda]) Arac_Kaydet(a);
		for(new p = 0; p != MAKSIMUM_BENZIN_POMPASI; p++) if(BenzinPompasi[p][pompaKullanimda]) Pompa_Kaydet(p);
	}
	for(new i = 0; i != MAKSIMUM_REKLAM; i ++) if(!isnull(ReklamBilgi[i][reklamIcerik]) && gettime() >= ReklamBilgi[i][reklamSure]) {
	    foreach(new o : Player) if(OyuncuBilgi[o][oID] == ReklamBilgi[i][reklamVeren] && OyuncuBilgi[o][oGiris] == true) UyariMesaji(o, "Verdiðiniz bir reklamýn süresi bitti.");
		ReklamBilgi[i][reklamAjans] = -1;
		ReklamBilgi[i][reklamIcerik][0] = 0;
		ReklamBilgi[i][reklamVeren] = 0;
		ReklamBilgi[i][reklamOncelik] = -1;
		ReklamBilgi[i][reklamSure] = 0;
		ReklamBilgi[i][reklamIletisim] = 0;
	}
	for(new i = 0; i != MAKSIMUM_UYUSTURUCU; i ++) if(UyusturucuBilgi[i][uKullanimda] == true) {
	    UyusturucuBilgi[i][uGenelDakika]++;
		if(UyusturucuBilgi[i][uBakim] == 1 && UyusturucuBilgi[i][uDakika] < 45) {
		    UyusturucuBilgi[i][uDakika]++;
			switch(UyusturucuBilgi[i][uDakika]) {
				case 9: UyusturucuBilgi[i][uDurum] += 20;
				case 18: UyusturucuBilgi[i][uDurum] += 20;
				case 27: UyusturucuBilgi[i][uDurum] += 20;
				case 36: UyusturucuBilgi[i][uDurum] += 20;
				case 45: UyusturucuBilgi[i][uDurum] = 100;
			}
		}
		if(UyusturucuBilgi[i][uDakika] == 15 && UyusturucuBilgi[i][uTur] < 3 || UyusturucuBilgi[i][uDakika] == 30 && UyusturucuBilgi[i][uTur] < 3) {
		    UyusturucuBilgi[i][uBakim] = 0;
		    Uyusturucu_Yenile(i);
		}
	    if(IsValidDynamic3DTextLabel(UyusturucuBilgi[i][uText])) {
			new uyusturucutext[192];
			format(uyusturucutext, sizeof(uyusturucutext), "{FCFCFC}Durum: {10F2C5}%d%%\n{FCFCFC}Bakým: {FF8B26}%s\n{FCFCFC}Bakým Yapýlan: {FF8B26}%d dakika\n{FCFCFC}Toplam Dakika: {FF8B26}%d dakika", UyusturucuBilgi[i][uDurum], (UyusturucuBilgi[i][uBakim] == 1) ? ("Yapýlmýþ") : ("Yapýlmamýþ"), UyusturucuBilgi[i][uDakika], UyusturucuBilgi[i][uGenelDakika]);
            UpdateDynamic3DTextLabelText(UyusturucuBilgi[i][uText], RENK_SERVER, uyusturucutext);
		}
		if(UyusturucuBilgi[i][uGenelDakika] >= 1440) Uyusturucu_Sil(i);
	}
	for(new i = 0; i != MAKSIMUM_EV; i++) if(EvBilgi[i][evKullanimda] == true && EvBilgi[i][evBakimSure] > 0) {
		if(EvBilgi[i][evBakimSure] == 1) {
			EvBilgi[i][evDurum] = 1;
			Ev_Yenile(i);
			Ev_Kaydet(i);
		}
		EvBilgi[i][evBakimSure]--;
	}
	for(new i = 0; i != MAKSIMUM_BINA; i++) if(BinaBilgi[i][bKullanimda] == true && BinaBilgi[i][binaBakimSure] > 0) {
		if(BinaBilgi[i][binaBakimSure] == 1) {
			BinaBilgi[i][binaDurum] = 1;
			Bina_Yenile(i);
			Bina_Kaydet(i);
		}
		BinaBilgi[i][binaBakimSure]--;
	}
    for(new i = 0; i != MAKSIMUM_ARAC; i++) if(AracBilgi[i][aracKullanimda] == true && AracBilgi[i][aKiraZaman] > 0)
    {
        if(AracBilgi[i][aKiraZaman] == 30 && AracBilgi[i][aracModel] == 499 && AracBilgi[i][aracSahip] == 0) {
            foreach(new o : Player) if(IsPlayerConnected(o) && OyuncuBilgi[o][oID] == AracBilgi[i][aracAnahtar]) UyariMesaji(o, "%d ID'li kamyonunuzun kirasýnýn bitmesine 30 dakika kaldý.", AracBilgi[i][aracYarat]);
        }
        if(AracBilgi[i][aKiraZaman] == 10 && AracBilgi[i][aracModel] == 499 && AracBilgi[i][aracSahip] == 0) {
            foreach(new o : Player) if(IsPlayerConnected(o) && OyuncuBilgi[o][oID] == AracBilgi[i][aracAnahtar]) UyariMesaji(o, "%d ID'li kamyonunuzun kirasýnýn bitmesine 10 dakika kaldý.", AracBilgi[i][aracYarat]);
        }
		if(AracBilgi[i][aKiraZaman] == 1)
		{
			AracBilgi[i][aKiraZaman] = 0;
			AracBilgi[i][aracAnahtar] = -1;
			AracBilgi[i][aracKilit] = 0;
			ASpawn(AracBilgi[i][aracYarat]);
			if(AracBilgi[i][aracKiralik] == 0 && AracBilgi[i][aracSahip] == 0 && AracBilgi[i][aracBirlik] == 0 && AracBilgi[i][aracVip] == 0) return Arac_Sil(i);
  		}
    	AracBilgi[i][aKiraZaman]--;
		Arac_Kaydet(i);
    }
	return 1;
}

public DakikaTimer(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	if(OyuncuBilgi[playerid][oAFK] < 300 && OyuncuBilgi[playerid][oHapisSure][0] == 0 && anti_afk == true || anti_afk == false) OyuncuBilgi[playerid][oDakika]++;
	if(OyuncuBilgi[playerid][oGaspSure] > 0 && gettime() > OyuncuBilgi[playerid][oGaspSure]) OyuncuBilgi[playerid][oGaspSure] = 0, OyuncuKaydet(playerid);
	if(OyuncuBilgi[playerid][oSilahDelay] != 0 && gettime() > OyuncuBilgi[playerid][oSilahDelay])
	{
	    OyuncuBilgi[playerid][oSilahDelay] = 0;
		SunucuMesaji(playerid, "Silah alma süreniz doldu, satýcýdan tekrar silah alabilirsiniz.");
		OyuncuKaydet(playerid);
	}
	if(OyuncuBilgi[playerid][oVIPSure] > -1 && gettime() > OyuncuBilgi[playerid][oVIPSure] && OyuncuBilgi[playerid][oVIP] > 0)
	{
		OyuncuBilgi[playerid][oVIPSure] = 0;
		OyuncuBilgi[playerid][oVIP] = 0;
		SunucuMesaji(playerid, "VIP paketinizin süresi doldu.");
		OyuncuKaydet(playerid);
	}
	if(OyuncuBilgi[playerid][oHirsizVIPTeslim] > 0 && gettime() > OyuncuBilgi[playerid][oHirsizVIPTeslim]) {
	    OyuncuBilgi[playerid][oHirsizVIPTeslim] = 0;
	    SunucuMesaji(playerid, "Araç teslim süreniz doldu, araç teslim edebilirsiniz.");
		OyuncuKaydet(playerid);
	}
	if(OyuncuBilgi[playerid][oEkstraPayday] > 0 && gettime() > OyuncuBilgi[playerid][oEkstraPayday])
	{
		OyuncuBilgi[playerid][oEkstraPayday] = 0;
		SunucuMesaji(playerid, "2x Payday paketinizin süresi doldu.");
		OyuncuKaydet(playerid);
	}
	if(gettime() > OyuncuBilgi[playerid][oUyusturucuBoost] && OyuncuBilgi[playerid][oUyusturucuBoost] > 0)
	{
		OyuncuBilgi[playerid][oUyusturucuBoost] = 0;
		SunucuMesaji(playerid, "Uyuþturucu Boost paketinizin süresi doldu.");
		OyuncuKaydet(playerid);
	}
	if(OyuncuBilgi[playerid][oDakika] > 59)
	{
	    new levelatlamaexp = OyuncuBilgi[playerid][oSeviye] * LEVEL_EXP;
	    OyuncuBilgi[playerid][oExp]++, OyuncuBilgi[playerid][oOynamaSaati]++;
	    if(OyuncuBilgi[playerid][oHediye] < 5) OyuncuBilgi[playerid][oHediye]++;
		if(OyuncuBilgi[playerid][oHesapNumarasi] > 0) {
            SendClientMessageEx(playerid, RENK_BEYAZ, "----------------------------------");

			new devletyardimi = 10 * OyuncuBilgi[playerid][oSeviye] + 50, miktar = 0;
			SendClientMessageEx(playerid, RENK_TURUNCU, "Saatlik Ödeme: {FFFFFF}%s", NumaraFormati(devletyardimi));
			miktar += devletyardimi;
			if(OyuncuBilgi[playerid][oBirlik] > -1) {
				for(new i = 0; i < MAKSIMUM_KASA; i ++) if(KasaBilgi[i][kasaBirlik] == OyuncuBilgi[playerid][oBirlikSQLID]) {
					new secenek = OyuncuBilgi[playerid][oBirlikRutbe] - 1, birlikmaas = BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikMaas][secenek];
					if(KasaBilgi[i][kasaPara] < birlikmaas && birlikmaas > 0) SendClientMessageEx(playerid, RENK_SERVER, "Birliðin maaþýný karþýlayamadý.");
					if(birlikmaas > 0 && KasaBilgi[i][kasaPara] >= birlikmaas) {
                        miktar += birlikmaas;
                        KasaBilgi[i][kasaPara] -= birlikmaas;
                        Kasa_Kaydet(i);
                        SendClientMessageEx(playerid, RENK_TURUNCU, "Birlik Ödemesi: {FFFFFF}%s", NumaraFormati(birlikmaas));
					}
					break;
				}
			}
			if(OyuncuBilgi[playerid][oVIP] > 0) {
			    new vipmaas = 0;
				switch(OyuncuBilgi[playerid][oVIP]) {
					case 1: vipmaas = 50;
					case 2: vipmaas = 75;
					case 3: vipmaas = 125;
				}
				if(vipmaas > 0) SendClientMessageEx(playerid, RENK_TURUNCU, "Ek Gelir: {FFFFFF}%s", NumaraFormati(vipmaas)), miktar += vipmaas;
			}
			for(new e = 0; e != MAKSIMUM_EV; e++) if(EvBilgi[e][evKullanimda] && EvBilgi[e][evKiraci] == OyuncuBilgi[playerid][oID]) {
				if(OyuncuBilgi[playerid][oBankaPara] >=  EvBilgi[e][evKiraUcret]) OyuncuBilgi[playerid][oBankaPara] -= EvBilgi[e][evKiraUcret], EvBilgi[e][evKasa] += EvBilgi[e][evKiraUcret], SendClientMessageEx(playerid, RENK_SERVER, "Ev Kirasý: {FFFFFF}-%s", NumaraFormati(EvBilgi[e][evKiraUcret]));
				else SendClientMessageEx(playerid, RENK_SERVER, "Banka hesabýnda kira ödemesi için yeterli ücret bulunamadý, kiracýlýktan çýkarýldýn."), EvBilgi[e][evKiraci] = 0, Ev_Kaydet(e);
				Ev_Kaydet(e);
				break;
			}
			if(ikixpayday == true || ucxpayday == false && OyuncuBilgi[playerid][oEkstraPayday] > 0) {
				SendClientMessageEx(playerid, RENK_TURUNCU, "2X PayDay: {FFFFFF}%s", NumaraFormati(miktar)), miktar += miktar;
				OyuncuBilgi[playerid][oExp]++, OyuncuBilgi[playerid][oOynamaSaati]++;
				if(OyuncuBilgi[playerid][oHediye] < 5) OyuncuBilgi[playerid][oHediye]++;
			}
			if(ucxpayday == true) {
				SendClientMessageEx(playerid, RENK_TURUNCU, "3X PayDay: {FFFFFF}%s", NumaraFormati(miktar * 2)), miktar += miktar * 2;
				OyuncuBilgi[playerid][oExp] += 2, OyuncuBilgi[playerid][oOynamaSaati] += 2;
				if(OyuncuBilgi[playerid][oHediye] < 5) OyuncuBilgi[playerid][oHediye] += 2;
			}
			new maasvergi = 3 * miktar / 100;
			miktar = miktar - maasvergi;
			OyuncuBilgi[playerid][oBankaPara] += miktar;
			SendClientMessageEx(playerid, RENK_TURUNCU, "Net Gelir: {FFFFFF}%s (Vergi: %s3)", NumaraFormati(miktar), "%%");
			SendClientMessageEx(playerid, RENK_BEYAZ, "----------------------------------");
			if(OyuncuBilgi[playerid][oVIP] > 0) OyuncuBilgi[playerid][oVPoint] += OyuncuBilgi[playerid][oVIP], SendClientMessageEx(playerid, RENK_SERVER, "VIP üyeliðinizden dolayý %d VP kazandýnýz.", OyuncuBilgi[playerid][oVIP]);
			if(OyuncuBilgi[playerid][oHediye] >= 5) SunucuMesaji(playerid, "Beþ saatlik oynama bonusunu alabilirsin. (/ayarlar)");
			OyuncuKaydet(playerid);
		}
		else HataMesaji(playerid, "Banka hesabý oluþturmadýðýn için bonus alamadýn, seviye exp puanýn hesabýna eklendi.");
		OyuncuBilgi[playerid][oDakika] = 0;
	    if(OyuncuBilgi[playerid][oExp] >= levelatlamaexp)
	    {
	        OyuncuBilgi[playerid][oExp] -= levelatlamaexp;
	        OyuncuBilgi[playerid][oSeviye]++;
	        SetPlayerScore(playerid, OyuncuBilgi[playerid][oSeviye]);
	        switch(OyuncuBilgi[playerid][oSeviye]) {
				case 5: OyuncuBilgi[playerid][oVPoint] += 10, SunucuMesaji(playerid, "5 seviyeye ulaþtýðýn için 10 VP kazandýn.");
				case 10: OyuncuBilgi[playerid][oVPoint] += 20, SunucuMesaji(playerid, "10 seviyeye ulaþtýðýn için 20 VP kazandýn.");
				case 15: OyuncuBilgi[playerid][oVPoint] += 30, SunucuMesaji(playerid, "15 seviyeye ulaþtýðýn için 30 VP kazandýn.");
				case 20: OyuncuBilgi[playerid][oVPoint] += 40, SunucuMesaji(playerid, "20 seviyeye ulaþtýðýn için 40 VP kazandýn.");
				case 25: OyuncuBilgi[playerid][oVPoint] += 50, SunucuMesaji(playerid, "25 seviyeye ulaþtýðýn için 50 VP kazandýn.");
				case 30: OyuncuBilgi[playerid][oVPoint] += 60, SunucuMesaji(playerid, "30 seviyeye ulaþtýðýn için 60 VP kazandýn.");
				case 35: OyuncuBilgi[playerid][oVPoint] += 75, SunucuMesaji(playerid, "35 seviyeye ulaþtýðýn için 75 VP kazandýn.");
				case 40: OyuncuBilgi[playerid][oVPoint] += 100, SunucuMesaji(playerid, "40 seviyeye ulaþtýðýn için 100 VP kazandýn.");
	        }
			new mesaj[92];
			format(mesaj, sizeof(mesaj), "~r~SEVIYE ATLADIN~n~~w~Seviye %d oldun", OyuncuBilgi[playerid][oSeviye]);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        SunucuMesaji(playerid, "Bir üst seviyeye(%d) geçtin, artýk yeni özelliklere sahipsin.", OyuncuBilgi[playerid][oSeviye]);
	        GameTextForPlayer(playerid, mesaj, 5000, 1);
	    }
	}
	return 1;
}

public levelsenk(oyuncuid)
{
    new levelatlamaexp = OyuncuBilgi[oyuncuid][oSeviye] * LEVEL_EXP;
	if(OyuncuBilgi[oyuncuid][oExp] >= levelatlamaexp)
	{
		OyuncuBilgi[oyuncuid][oExp] -= levelatlamaexp;
		OyuncuBilgi[oyuncuid][oSeviye]++;
		SetPlayerScore(oyuncuid, OyuncuBilgi[oyuncuid][oSeviye]);
		SetTimerEx("levelsenk", 1, false, "i", oyuncuid);
	}
	return 1;
}

public OyuncuKucukKontrol(oyuncuid)
{
	if(!IsPlayerConnected(oyuncuid)) return 1;
	IsimLabelGuncelle(oyuncuid);
	new silahid, mermi, objectslot, count;
	if(OyuncuBilgi[oyuncuid][oGPSArac] != INVALID_VEHICLE_ID) {
	    new gps_arac = OyuncuBilgi[oyuncuid][oGPSArac];
	    if(IsValidVehicle(gps_arac)) {
			new Float:arac_pos[3];
			GetVehiclePos(gps_arac, arac_pos[0], arac_pos[1], arac_pos[2]);
			SetPlayerCheckpoint(oyuncuid, arac_pos[0], arac_pos[1], arac_pos[2], 5.0);
	    }
	}
	for(new i = 2; i <= 7; i++)
	{
		GetPlayerWeaponData(oyuncuid, i, silahid, mermi);
		if(silahid && mermi)
		{
			objectslot = SilahAksesuarSlot(silahid);
			if(GetPlayerWeapon(oyuncuid) != silahid && objectslot != -1 && OyuncuBilgi[oyuncuid][oSilah][i] == silahid)
				SetPlayerAttachedObject(oyuncuid, objectslot, SilahObjeBul(silahid), SilahKemikSlot[silahid], SilahAksesuarPos[silahid][0], SilahAksesuarPos[silahid][1], SilahAksesuarPos[silahid][2], SilahAksesuarPos[silahid][3], SilahAksesuarPos[silahid][4], SilahAksesuarPos[silahid][5], SilahAksesuarPos[silahid][6], SilahAksesuarPos[silahid][7], SilahAksesuarPos[silahid][8]);

			else if(IsPlayerAttachedObjectSlotUsed(oyuncuid, objectslot) && objectslot != -1) RemovePlayerAttachedObject(oyuncuid, objectslot);
		}
	}
	for(new i = 7; i <= 9; i++) if(IsPlayerAttachedObjectSlotUsed(oyuncuid, i))
	{
		count = 0;
		for(new j = 22; j <= 38; j++) if(SilahKontrol(oyuncuid, j) && SilahAksesuarSlot(j) == i && SilahAksesuarSlot(j) > -1)
			count++;

		if(!count) RemovePlayerAttachedObject(oyuncuid, i);
	}
	if(GetPlayerState(oyuncuid) == PLAYER_STATE_DRIVER)
	{
		new surf = GetPlayerSurfingVehicleID(oyuncuid), surf_object = GetPlayerSurfingObjectID(oyuncuid), aracid = GetPlayerVehicleID(oyuncuid);
		if((AracHiz(aracid) > (GetVehicleTopSpeed(aracid)+float(120))) && !UcakKontrol(aracid) && surf == INVALID_VEHICLE_ID && surf_object == INVALID_OBJECT_ID)
		    return HileKickle(oyuncuid, 11);
	}
	if(IsPlayerInAnyVehicle(oyuncuid)) {
		if(GetPlayerState(oyuncuid) == PLAYER_STATE_DRIVER && AracZirh[GetPlayerVehicleID(oyuncuid)] > 1 || OyuncuBisiklette(oyuncuid) == true)
		{
			new Float:hasar, aracidzirh = GetPlayerVehicleID(oyuncuid);
			GetVehicleHealth(aracidzirh, hasar);
			if(hasar < 999.9) AracZirh[aracidzirh] -= 1000-floatround(hasar), AracTamirEt(aracidzirh);
		}
		new Float:araccan;
		GetVehicleHealth(GetPlayerVehicleID(oyuncuid), araccan);
		if(araccan < 300.0)
		{
			if(OyuncuBilgi[oyuncuid][oTamirSure] == 0 || OyuncuBilgi[oyuncuid][oTamirSure] > 1) SetVehicleHealth(GetPlayerVehicleID(oyuncuid), 251.0);
			GameTextForPlayer(oyuncuid, "~r~ARAC KULLANILAMAZ HALDE!", 1000, 3);
			SetEngineStatus(GetPlayerVehicleID(oyuncuid), false);
		}
	}
	if(GetPlayerState(oyuncuid) != PLAYER_STATE_DRIVER && GetPlayerWeapon(oyuncuid) > 15 && OyuncuBilgi[oyuncuid][oPaintball] == -1) {
	    new limit = 0, silah_id = GetPlayerWeapon(oyuncuid);
		switch(silah_id) {
			case WEAPON_DEAGLE: limit = DEAGLE_LIMIT;
			case WEAPON_AK47: limit = AK47_LIMIT;
			case WEAPON_MP5: limit = MP5_LIMIT;
		    case WEAPON_TEC9: limit = TEC9_LIMIT;
		    case WEAPON_SHOTGUN: limit = SHOTGUN_LIMIT;
		    case WEAPON_RIFLE: limit = RIFLE_LIMIT;
		    case WEAPON_UZI: limit = UZI_LIMIT;
		    case WEAPON_COLT45: limit = COLT45_LIMIT;
		    case WEAPON_M4: limit = M4_LIMIT;
			case WEAPON_SNIPER: limit = SNIPER_LIMIT;
			case WEAPON_SHOTGSPA: limit = COMBATSHOTGUN_LIMIT;
			default: limit = 600;
		}
		if(limit != 0 && mermi > limit && OyuncuBilgi[oyuncuid][oSilah][SilahSlotBul[silah_id]] == silah_id) {
			OyuncuBilgi[oyuncuid][oMermi][SilahSlotBul[silah_id]] = limit;
			SilahAyarla(oyuncuid);
		}
	}
	return 1;
}

public OnPlayerResume(playerid, time)
{
    if(IsValidDynamic3DTextLabel(OyuncuBilgi[playerid][AFKLabel])) DestroyDynamic3DTextLabel(OyuncuBilgi[playerid][AFKLabel]), OyuncuBilgi[playerid][AFKLabel] = Text3D:INVALID_3DTEXT_ID;
	if(eskiworld[playerid] != -1 && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING) {
		SetPlayerVirtualWorld(playerid, eskiworld[playerid]);
		eskiworld[playerid] = -1;
	}
	OyuncuBilgi[playerid][oAltTab] = 0;
    return 1;
}

public OnPlayerPause(playerid)
{
	if(!IsPlayerConnected(playerid)) return false;

    if(IsValidDynamic3DTextLabel(OyuncuBilgi[playerid][AFKLabel])) DestroyDynamic3DTextLabel(OyuncuBilgi[playerid][AFKLabel]), OyuncuBilgi[playerid][AFKLabel] = Text3D:INVALID_3DTEXT_ID;
	OyuncuBilgi[playerid][AFKLabel] = CreateDynamic3DTextLabel("", 0xFFFFFFFF, 0.0, 0.0, 0.3, ISIM_MESAFESI, playerid, INVALID_VEHICLE_ID, 1);
    return 1;
}

public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
	printf("[MySQL]: %d %s", errorid, error);
	return 1;
}

public OyuncuSaniyeTimer(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;

	/*if(OyuncuBilgi[playerid][oHileKontrol] == true) {
	    new Float:hilekontrol[3];
	    SunucuMesaji(playerid, "ai: %d cm: %d act: %d", GetPlayerAnimationIndex(playerid), GetPlayerCameraMode(playerid), GetPlayerSpecialAction(playerid));
	    GetPlayerCameraPos(playerid, hilekontrol[0], hilekontrol[1], hilekontrol[2]);
	    SunucuMesaji(playerid, "cpos: %.4f %.4f %.4f - ps: %d", hilekontrol[0], hilekontrol[1], hilekontrol[2], GetPlayerState(playerid));
	    GetPlayerVelocity(playerid, hilekontrol[0], hilekontrol[1], hilekontrol[2]);
	    SunucuMesaji(playerid, "velo: %.4f %.4f %.4f", hilekontrol[0], hilekontrol[1], hilekontrol[2]);
	}*/
	
	new Float:oyuncu_pos[3];
	GetPlayerPos(playerid, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2]);

	new sz[50], tsok[6], Float: CZ[2];
	getdate(tsok[0], tsok[1], tsok[2]), gettime(tsok[3], tsok[4], tsok[5]), GetPlayerHealth(playerid, CZ[0]), GetPlayerArmour(playerid, CZ[1]);
	
	// Tarih
	/*format(sz, sizeof(sz), "%02d.%02d.%04d, %02d:%02d", tsok[2], tsok[1], tsok[0], tsok[3], tsok[4]);
	PlayerTextDrawSetString(playerid, Hud_SagAlt[playerid][3], sz);*/
	
	// Tarih Saat TextDraw
	format(sz, sizeof(sz), "%02d.%02d.%04d_%02d.%02d", tsok[2], tsok[1], tsok[0], tsok[3], tsok[4]);
	PlayerTextDrawSetString(playerid, Hud_SagAlt[playerid][4], sz);
	
	// Telefon Tarih
	format(sz, sizeof(sz), "%02d.%02d.%04d", tsok[2], tsok[1], tsok[0]);
	PlayerTextDrawSetString(playerid, OyuncuBilgi[playerid][oiphone][4], sz);
	
	// Telefon Saat
	format(sz, sizeof(sz), "%02d.%02d", tsok[3], tsok[4]);
	PlayerTextDrawSetString(playerid, OyuncuBilgi[playerid][oiphone][3], sz);

	// Can
	format(sz, sizeof(sz), "%.0f", CZ[0]);
	PlayerTextDrawSetString(playerid, Hud_SagAlt[playerid][5], sz);

	// Zýrh
	format(sz, sizeof(sz), "%.0f", CZ[1]);
	PlayerTextDrawSetString(playerid, Hud_SagAlt[playerid][3], sz);

	// Toplam Oyuncu
	/*format(sz, sizeof(sz), "%d", Iter_Count(Player));
	PlayerTextDrawSetString(playerid, Hud_SagAlt[playerid][2], sz);

	// Payday
	format(sz, sizeof(sz), "%d", OyuncuBilgi[playerid][oDakika]);
	PlayerTextDrawSetString(playerid, Hud_SagAlt[playerid][4], sz);*/
	
	if(OyuncuBilgi[playerid][oGiris] == true && OyuncuBilgi[playerid][oHapisSure][0] == 0 && OyuncuBilgi[playerid][oHapisSure][1] == 0 && IsPlayerInRangeOfPoint(playerid, 5.0, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2])) {
		OyuncuBilgi[playerid][oAFK]++;
 		if(OyuncuBilgi[playerid][oAFK] == AFK_SURE && afk_aktif == true)
		{
		    if(isnull(OyuncuBilgi[playerid][oyuncuKod])) {
 				new iharfler[][] ={"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
				format(OyuncuBilgi[playerid][oyuncuKod], 12, "%s%s%d%s", iharfler[random(sizeof(iharfler))], iharfler[random(sizeof(iharfler))], randomEx(1, 9), iharfler[random(sizeof(iharfler))]);
				OyuncuBilgi[playerid][oAFKTimer] = SetTimerEx("AFKKick", 60000, false, "d", playerid);
				SunucuMesaji(playerid, "AFK olduðunuz tespit edildi, 1 dakika içerisinde \"/afk [%s]\" kodunu girin.", OyuncuBilgi[playerid][oyuncuKod]);
			}
		}
	}
	if(IsPlayerPaused(playerid))
	{
		OyuncuBilgi[playerid][oAltTab]++;
		if(IsValidDynamic3DTextLabel(OyuncuBilgi[playerid][AFKLabel])) {
			new afkbilgi[128];
			format(afkbilgi, sizeof(afkbilgi), "[AFK, %d saniye]", OyuncuBilgi[playerid][oAltTab]);
			if(OyuncuBilgi[playerid][oAltTab] >= 300) format(afkbilgi, sizeof(afkbilgi), "[AFK, 5+ dakika]");
			UpdateDynamic3DTextLabelText(OyuncuBilgi[playerid][AFKLabel], RENK_GRI, afkbilgi);
		}
	}
	if(GetPlayerSurfingVehicleID(playerid) != INVALID_VEHICLE_ID && OyuncuBilgi[playerid][oAdminDurum] == false && AracHiz(GetPlayerSurfingVehicleID(playerid)) > 5) {
		switch(GetVehicleModel(GetPlayerSurfingVehicleID(playerid))) {
			case 422, 478, 543, 554, 600, 605, 607, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454: {}
			default: {
				GetPlayerPos(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
			    OyuncuPosDegistir(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1]+1.5, OyuncuBilgi[playerid][oPos][2]);
			    GameTextForPlayer(playerid, "~r~ KAYDIN VE ARACTAN DUSTUN!", 1500, 3);
			}
		}
	}
	if(Paintball_ID(playerid) != -1 && PaintballBilgi[Paintball_ID(playerid)][paintballSure] != 0 && gettime() > PaintballBilgi[Paintball_ID(playerid)][paintballSure]) {
		new id = Paintball_ID(playerid);
		PaintballBilgi[id][pKullanimda] = false;
		PaintballBilgi[id][paintballSahip] = INVALID_PLAYER_ID;
		PaintballBilgi[id][paintballSure] = 0;
		PaintballBilgi[id][paintballArena] = 0;
	    foreach(new o : Player) if(OyuncuBilgi[o][oGiris] == true && OyuncuBilgi[o][oPaintball] == id && o != playerid) {
			SendClientMessageEx(o, RENK_BEYAZ, "{%06x}[PAINTBALL]: {FFFFFF}Lobinin süresi doldu.", RENK_PAINTBALL >>> 8);
			SendClientMessageEx(o, RENK_BEYAZ, "{%06x}[PAINTBALL-ISTATISTIK]: {FFFFFF}%s öldürme, %s ölüm.", RENK_PAINTBALL >>> 8, NumaraFormati(OyuncuBilgi[o][oPBOldurme], ""), NumaraFormati(OyuncuBilgi[o][oPBOlum], ""));
			ResetPlayerWeapons(o);
			CanDuzenle(o, EskiVeriler[o][eskiCan]);
			ZirhDuzenle(o, EskiVeriler[o][eskiZirh]);
		   	OyuncuBilgi[o][oPaintball] = -1;
			OyuncuBilgi[o][oPBOldurme] = 0;
			OyuncuBilgi[o][oPBOlum] = 0;
		    SetPlayerVirtualWorld(o, 0);
		    SetPlayerInterior(o, 0);
		    OyuncuPosDegistir(o, 1726.88, -1636.61, 20.22);
		    SilahAyarla(o);
		}
		SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[PAINTBALL]: {FFFFFF}%s lobiyi kapattý.", RENK_PAINTBALL >>> 8, OyuncuIsim(playerid));
		SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[PAINTBALL-ISTATISTIK]: {FFFFFF}%s öldürme, %s ölüm.", RENK_PAINTBALL >>> 8, NumaraFormati(OyuncuBilgi[playerid][oPBOldurme], ""), NumaraFormati(OyuncuBilgi[playerid][oPBOlum], ""));
		CanDuzenle(playerid, EskiVeriler[playerid][eskiCan]);
		ZirhDuzenle(playerid, EskiVeriler[playerid][eskiZirh]);
		OyuncuBilgi[playerid][oPaintball] = -1;
		OyuncuBilgi[playerid][oPBOldurme] = 0;
		OyuncuBilgi[playerid][oPBOlum] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		OyuncuPosDegistir(playerid, 1726.88, -1636.61, 20.22);
		SilahAyarla(playerid);
	}
	if(OyuncuBilgi[playerid][oGasp] != INVALID_PLAYER_ID) {
	    new oyuncuid = OyuncuBilgi[playerid][oGasp];
	    if(!YakinlikKontrol(playerid, oyuncuid, 4.0)) {
			HataMesaji(oyuncuid, "Gasp iþleminde olduðun oyuncudan uzaklaþtýn, iþlem iptal edildi.");
			HataMesaji(playerid, "Gasp iþleminde olduðun oyuncudan uzaklaþtýn, iþlem iptal edildi.");
			DialogGoster(playerid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
			DialogGoster(oyuncuid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
			OyuncuBilgi[oyuncuid][oGasp] = INVALID_PLAYER_ID;
			OyuncuBilgi[playerid][oGasp] = INVALID_PLAYER_ID;
		}
	}
	if(OyuncuBilgi[playerid][oSoruGecikme] > 0 && gettime() > OyuncuBilgi[playerid][oSoruGecikme]) {
		OyuncuBilgi[playerid][oIlgilenenYetkili] = INVALID_PLAYER_ID;
		OyuncuBilgi[playerid][oSoru][0] = 0;
		OyuncuBilgi[playerid][oSoruGecikme] = 0;
		SendClientMessageEx(playerid, RENK_GRI, "Sorunuzun süresi bitti, sorunuz silindi.");
	}
	if(OyuncuBilgi[playerid][oRaporGecikme] > 0 && gettime() > OyuncuBilgi[playerid][oRaporGecikme]) {
		OyuncuBilgi[playerid][oIlgilenenAdmin] = INVALID_PLAYER_ID;
		OyuncuBilgi[playerid][oRapor][0] = 0;
		OyuncuBilgi[playerid][oRaporGecikme] = 0;
		SendClientMessageEx(playerid, RENK_GRI, "Raporunuzun süresi bitti, raporunuz silindi.");
	}
	new mesaj[256], id;
    if(OyuncuBilgi[playerid][oYaraliSure] > 0 && GetPlayerAnimationIndex(playerid) != 1701 && OyuncuBilgi[playerid][oSurukleniyor] == INVALID_PLAYER_ID) ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 0);
    if(OyuncuBilgi[playerid][oYarali] == 0 && OyuncuBilgi[playerid][oYaraliSure] > 0) OyuncuBilgi[playerid][oYarali] = 1;
	if(IsPlayerInAnyVehicle(playerid)) if(Arac_IDBul(GetPlayerVehicleID(playerid)) != -1 && AracBilgi[Arac_IDBul(GetPlayerVehicleID(playerid))][aracTur] == 1 && AracHiz(GetPlayerVehicleID(playerid)) > 100) {
		OyuncuBilgi[playerid][oEhliyetUyari]++;
		if(OyuncuBilgi[playerid][oEhliyetUyari] > 2) EhliyetTestiiptal(playerid), UyariMesaji(playerid, "Sürücü testi hýz sýnýrýný geçtiðin için testin iptal oldu.");
		else if(OyuncuBilgi[playerid][oEhliyetUyari] < 3) UyariMesaji(playerid, "Sürücü testi hýz sýnýrýný geçtiðiniz için uyarý aldýnýz, yavaþ kullanýn. (100KM/h)(%d/3)", OyuncuBilgi[playerid][oEhliyetUyari]);
	}
	if(OyuncuBilgi[playerid][oGiris] == true && GetPlayerPing(playerid) >= MAKSIMUM_PING && !IsPlayerAdmin(playerid)) {
	    YoneticiMesaji(RENK_ACIKKIRMIZI, "aKick: Sistem, %s adlý kiþiyi oyundan attý. sebep: Yüksek Ping (%d)", OyuncuIsim(playerid), GetPlayerPing(playerid));
		return KickEx(playerid);
	}
	if(OyuncuBilgi[playerid][oBenzinDolduruyor] > -1) {
	    if(OyuncuBilgi[playerid][oBenzinDolduruyor] == 0) {
		    new pompaid = OyuncuBilgi[playerid][oBenzinAliyor], ucret = BenzinPompasi[pompaid][pompaUcret], isyeriid = OyuncuBilgi[playerid][oBenzinIsyeri];
		 	if(isyeriid < 0 || isyeriid >= MAKSIMUM_ISYERI || !IsyeriBilgi[isyeriid][isyeriKullanimda]) return HataMesaji(playerid, "Bir sorun oluþtu."), OyuncuBilgi[playerid][oBenzinAliyor] = -1, OyuncuBilgi[playerid][oBenzinIsyeri] = -1;
			if(OyuncuBilgi[playerid][oPara] < ucret) return HataMesaji(playerid, "Benzin ücretini karþýlayamýyorsun."), OyuncuBilgi[playerid][oBenzinAliyor] = -1, OyuncuBilgi[playerid][oBenzinIsyeri] = -1;
			if(pompaid == -1 || Pompa_Yakin(playerid) == -1) return HataMesaji(playerid, "Pompadan uzaklaþtýðýn için iþlem iptal edildi."), OyuncuBilgi[playerid][oBenzinAliyor] = -1, OyuncuBilgi[playerid][oBenzinIsyeri] = -1;
			if(OyuncuBilgi[playerid][oBidonBenzin] > 9) return HataMesaji(playerid, "Bidonun doldu."), OyuncuBilgi[playerid][oBenzinAliyor] = -1, OyuncuBilgi[playerid][oBenzinIsyeri] = -1;

			OyuncuBilgi[playerid][oBidonBenzin] += 1;
			format(mesaj, sizeof(mesaj), "~r~BENZIN ALIYORSUN: ~w~%d litre", OyuncuBilgi[playerid][oBidonBenzin]);
			GameTextForPlayer(playerid, mesaj, 1000, 3);
	 		BenzinPompasi[pompaid][pompaBenzin] -= 1;
	 		ParaEkle(playerid, -ucret);
			if(BenzinPompasi[pompaid][pompaIsyeri] == IsyeriBilgi[isyeriid][isyeriID] && IsyeriBilgi[isyeriid][isyeriTur] == 9)
				IsyeriBilgi[isyeriid][isyeriKasa] += ucret, Isyeri_Kaydet(isyeriid);
		}
		else {
		    if(AracBilgi[OyuncuBilgi[playerid][oBenzinDolduruyor]][aracBenzin] > 99.9) return SunucuMesaji(playerid, "Aracýn benzini doldu."), OyuncuBilgi[playerid][oBenzinDolduruyor] = -1;
		    if(OyuncuBilgi[playerid][oBidonBenzin] < 1) return SunucuMesaji(playerid, "Bidonunda benzin kalmadý."), OyuncuBilgi[playerid][oBenzinDolduruyor] = -1;
			new Float:fX, Float:fY, Float:fZ;
			GetVehiclePos(AracBilgi[OyuncuBilgi[playerid][oBenzinDolduruyor]][aracYarat], fX, fY, fZ);
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ)) return SunucuMesaji(playerid, "Araçtan uzakta kaldýðýn için iþlem iptal edildi."), OyuncuBilgi[playerid][oBenzinDolduruyor] = -1;
		    OyuncuBilgi[playerid][oBidonBenzin] -= 1;
			format(mesaj, sizeof(mesaj), "~r~BENZIN BIDONU: ~w~%d litre", OyuncuBilgi[playerid][oBidonBenzin]);
			GameTextForPlayer(playerid, mesaj, 1000, 3);
			AracBilgi[OyuncuBilgi[playerid][oBenzinDolduruyor]][aracBenzin] += 1.0;
		}
	}
	if(OyuncuBilgi[playerid][oSucIndirimiSure] > 0) {
	    new suclu_id = OyuncuBilgi[playerid][oAvukatSecim];
	    if(!IsPlayerConnected(suclu_id)) return HataMesaji(playerid, "Oyuncu oyunda deðil, iþlem iptal edildi."), OyuncuBilgi[playerid][oAvukatSecim] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oSucIndirimiSure] = 0;
	    if(!YakinlikKontrol(playerid, suclu_id, 5.0)) return HataMesaji(playerid, "Oyuncudan uzaklaþtýðýn için iþlem iptal edildi."), OyuncuBilgi[playerid][oAvukatSecim] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oSucIndirimiSure] = 0;
	    if(OyuncuBilgi[playerid][oSucIndirimiSure] == 1) {
	        new sorgu[256];
			format(sorgu, sizeof(sorgu), "UPDATE oyuncular SET SucIndirimi = '1' WHERE ID = '%d'", OyuncuBilgi[suclu_id][oID]);
			mysql_query(mysqlB, sorgu);
			SunucuMesaji(playerid, "%s adlý kiþiye suç indirimi uyguladýn.", OyuncuIsim(suclu_id));
			SunucuMesaji(suclu_id, "%s adlý avukat tarafýndan size suç indirimi uygulandý.", OyuncuIsim(playerid));
			OyuncuBilgi[playerid][oAvukatYetenek]++;
			OyuncuBilgi[playerid][oAvukatSecim] = INVALID_PLAYER_ID;
			OyuncuBilgi[suclu_id][oAvukatSecim] = INVALID_PLAYER_ID;
			switch(OyuncuBilgi[playerid][oAvukatYetenek]) {
			    case 15: SunucuMesaji(playerid, "Avukatlýðýn artýk 2 seviye.");
			    case 30: SunucuMesaji(playerid, "Avukatlýðýn artýk 3 seviye.");
			    case 60: SunucuMesaji(playerid, "Avukatlýðýn artýk 4 seviye.");
				case 120: SunucuMesaji(playerid, "Avukatlýðýn artýk 5 seviye.");
			}
			new eskisure = OyuncuBilgi[suclu_id][oHapisSure][1], yenisure = 15;
			if(OyuncuBilgi[playerid][oAvukatYetenek] > 0 && OyuncuBilgi[playerid][oAvukatYetenek] < 15) yenisure = eskisure * 9 / 10;
			else if(OyuncuBilgi[playerid][oAvukatYetenek] >= 15 && OyuncuBilgi[playerid][oAvukatYetenek] < 30) yenisure = eskisure * 4 / 5;
			else if(OyuncuBilgi[playerid][oAvukatYetenek] >= 30 && OyuncuBilgi[playerid][oAvukatYetenek] < 60) yenisure = eskisure * 7 / 10;
			else if(OyuncuBilgi[playerid][oAvukatYetenek] >= 60 && OyuncuBilgi[playerid][oAvukatYetenek] < 120) yenisure = eskisure * 3 / 5;
			else if(OyuncuBilgi[playerid][oAvukatYetenek] >= 120) yenisure = eskisure / 2;
			OyuncuBilgi[suclu_id][oHapisSure][1] = yenisure;
	    }
	    OyuncuBilgi[playerid][oSucIndirimiSure]--;
		format(mesaj, sizeof(mesaj), "~r~SUC INDIRIMI: ~w~%d saniye", OyuncuBilgi[playerid][oSucIndirimiSure]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	if(OyuncuBilgi[playerid][oSilmeSure] > 0) {
	    new suclu_id = OyuncuBilgi[playerid][oAvukatSecim];
	    if(!IsPlayerConnected(suclu_id)) return HataMesaji(playerid, "Oyuncu oyunda deðil, iþlem iptal edildi."), OyuncuBilgi[playerid][oAvukatSecim] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oSilmeSure] = 0;
	    if(!YakinlikKontrol(playerid, suclu_id, 5.0)) return HataMesaji(playerid, "Oyuncudan uzaklaþtýðýn için iþlem iptal edildi."), OyuncuBilgi[playerid][oAvukatSecim] = INVALID_PLAYER_ID, OyuncuBilgi[playerid][oSilmeSure] = 0;
	    if(OyuncuBilgi[playerid][oSilmeSure] == 1) {
	        new sorgu[256];
			format(sorgu, sizeof(sorgu), "DELETE FROM `aranmakayitlari` WHERE `id` = '%d'", OyuncuBilgi[playerid][oSucSecim]);
			mysql_query(mysqlB, sorgu);
			SunucuMesaji(playerid, "%s adlý kiþiye ait bir aranma kaydýný temizlediniz.", OyuncuIsim(suclu_id));
			SunucuMesaji(suclu_id, "%s adlý avukat tarafýndan bir aranma kaydýnýz temizlendi.", OyuncuIsim(playerid));
			OyuncuBilgi[suclu_id][oAvukatBekleme] = 600;
			OyuncuBilgi[playerid][oAvukatYetenek]++;
			OyuncuBilgi[playerid][oAvukatSecim] = INVALID_PLAYER_ID;
			OyuncuBilgi[suclu_id][oAvukatSecim] = INVALID_PLAYER_ID;
			switch(OyuncuBilgi[playerid][oAvukatYetenek]) {
			    case 15: SunucuMesaji(playerid, "Avukatlýðýn artýk 2 seviye.");
			    case 30: SunucuMesaji(playerid, "Avukatlýðýn artýk 3 seviye.");
			    case 60: SunucuMesaji(playerid, "Avukatlýðýn artýk 4 seviye.");
				case 120: SunucuMesaji(playerid, "Avukatlýðýn artýk 5 seviye.");
			}
			new sure = 1200;
			if(OyuncuBilgi[playerid][oAvukatYetenek] > 0 && OyuncuBilgi[playerid][oAvukatYetenek] < 15) sure = 1200;
			else if(OyuncuBilgi[playerid][oAvukatYetenek] >= 15 && OyuncuBilgi[playerid][oAvukatYetenek] < 30) sure = 1050;
			else if(OyuncuBilgi[playerid][oAvukatYetenek] >= 30 && OyuncuBilgi[playerid][oAvukatYetenek] < 60) sure = 900;
			else if(OyuncuBilgi[playerid][oAvukatYetenek] >= 60 && OyuncuBilgi[playerid][oAvukatYetenek] < 120) sure = 750;
			else if(OyuncuBilgi[playerid][oAvukatYetenek] >= 120) sure = 600;
			OyuncuBilgi[playerid][oAvukatBekleme] = sure;
	    }
	    OyuncuBilgi[playerid][oSilmeSure]--;
		format(mesaj, sizeof(mesaj), "~r~ARANMA TEMIZLENIYOR: ~w~%d saniye", OyuncuBilgi[playerid][oSilmeSure]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	if(OyuncuBilgi[playerid][oSuruklenen] != INVALID_PLAYER_ID) {
	    new hedefid = OyuncuBilgi[playerid][oSuruklenen], Float:PosX, Float:PosY, Float:PosZ;
	    if(IsPlayerConnected(hedefid) && !IsPlayerInAnyVehicle(playerid)) {
			GetPlayerPos(playerid, PosX, PosY, PosZ);
			if(OyuncuBilgi[playerid][oSuruklemeTipi] == 1 && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
				OyuncuBilgi[playerid][oSuruklenen] = INVALID_PLAYER_ID;
				OyuncuBilgi[playerid][oSuruklemeTipi] = 0;
				if(IsPlayerConnected(hedefid)) {
				    HataMesaji(playerid, "Eðilmeyi býraktýðýn için sürükleme iþlemin iptal edildi.");
					OyuncuBilgi[hedefid][oSurukleniyor] = INVALID_PLAYER_ID;
					new emote[64];
					format(emote, sizeof(emote), "%s isimli kiþiyi sürüklemeyi býrakýr.", OyuncuIsim(hedefid));
					cmd_me(playerid, emote);
					return TogglePlayerControllable(hedefid, true);
				}
			}
			if(GetPlayerVirtualWorld(hedefid) != GetPlayerVirtualWorld(playerid)) SetPlayerVirtualWorld(hedefid, GetPlayerVirtualWorld(playerid));
			if(GetPlayerInterior(hedefid) != GetPlayerInterior(playerid)) SetPlayerInterior(hedefid, GetPlayerInterior(playerid));
			OyuncuPosDegistir(hedefid, PosX + 1, PosY + 1, PosZ);
			GameTextForPlayer(hedefid, "~r~SURUKLENIYORSUN", 5000, 3);
	    }
	}
	if(MaymuncukVeri[playerid][mSaniye] > 0) {
	    if(MaymuncukVeri[playerid][mSaniye] == 1) {
			if(MaymuncukVeri[playerid][mTur] == 1) {
			    if(OyuncuBilgi[MaymuncukVeri[playerid][mHedef]][oKelepceli] == 0) return HataMesaji(playerid, "Oyuncunun kelepçesi zaten çýkarýlmýþ.");

			    new sayi = random(3);
			    if(OyuncuBilgi[playerid][oBirlik] > -1) sayi = random(2);
			    switch(sayi) {
					case 0: {
					    OyuncuBilgi[MaymuncukVeri[playerid][mHedef]][oKelepceli] = 0;
					    SetPlayerSpecialAction(MaymuncukVeri[playerid][mHedef], SPECIAL_ACTION_NONE);
					    RemovePlayerAttachedObject(MaymuncukVeri[playerid][mHedef], 9);
					    cmd_ado(playerid, "Kilit açýldý.");
					}
					default: cmd_ado(playerid, "Maymuncuk kýrýldý."), OyuncuBilgi[playerid][oMaymuncuk]--;
			    }
			}
			else if(MaymuncukVeri[playerid][mTur] == 2) {
				if(EvBilgi[MaymuncukVeri[playerid][mHedef]][evDurum] != 2) return HataMesaji(playerid, "Bu evin üzerinde maymuncuk kullanýlamaz.");

			    new sayi = random(3);
			    if(OyuncuBilgi[playerid][oBirlik] > -1) sayi = random(2);
			    switch(sayi) {
					case 0: {
					    EvBilgi[MaymuncukVeri[playerid][mHedef]][evDurum] = 1;
					    Ev_Yenile(MaymuncukVeri[playerid][mHedef]);
					    cmd_ado(playerid, "Kilit açýldý.");
					}
					default: cmd_ado(playerid, "Maymuncuk kýrýldý."), OyuncuBilgi[playerid][oMaymuncuk]--;
			    }
			}
			else if(MaymuncukVeri[playerid][mTur] == 3) {
				if(BinaBilgi[MaymuncukVeri[playerid][mHedef]][binaDurum] != 2) return HataMesaji(playerid, "Bu binanýn üzerinde maymuncuk kullanýlamaz.");

			    new sayi = random(3);
			    if(OyuncuBilgi[playerid][oBirlik] > -1) sayi = random(2);
			    switch(sayi) {
					case 0: {
					    BinaBilgi[MaymuncukVeri[playerid][mHedef]][binaDurum] = 1;
					    Bina_Yenile(MaymuncukVeri[playerid][mHedef]);
					    cmd_ado(playerid, "Kilit açýldý.");
					}
					default: cmd_ado(playerid, "Maymuncuk kýrýldý."), OyuncuBilgi[playerid][oMaymuncuk]--;
			    }
			}
			else if(MaymuncukVeri[playerid][mTur] == 4) {
				if(IsyeriBilgi[MaymuncukVeri[playerid][mHedef]][isyeriDurum] != 2) return HataMesaji(playerid, "Bu iþyerinin üzerinde maymuncuk kullanýlamaz.");

			    new sayi = random(3);
			    if(OyuncuBilgi[playerid][oBirlik] > -1) sayi = random(2);
			    switch(sayi) {
					case 0: {
					    IsyeriBilgi[MaymuncukVeri[playerid][mHedef]][isyeriDurum] = 1;
					    Isyeri_Yenile(MaymuncukVeri[playerid][mHedef]);
					    cmd_ado(playerid, "Kilit açýldý.");
					}
					default: cmd_ado(playerid, "Maymuncuk kýrýldý."), OyuncuBilgi[playerid][oMaymuncuk]--;
			    }
			}
			else if(MaymuncukVeri[playerid][mTur] == 5) {
				if(!AracBilgi[MaymuncukVeri[playerid][mHedef]][aracKilit]) return HataMesaji(playerid, "Bu aracýn üzerinde maymuncuk kullanýlamaz.");
	    		new engine, lights, alarm, doors, bonnet, boot, objective, aracid = MaymuncukVeri[playerid][mHedef];
	    		GetVehicleParamsEx(AracBilgi[aracid][aracYarat], engine, lights, alarm, doors, bonnet, boot, objective);

			    new sayi = random(3);
			    if(OyuncuBilgi[playerid][oBirlik] > -1) sayi = random(2);
			    switch(sayi) {
					case 0: {
						AracBilgi[aracid][aracKilit] = false;
						Arac_Kaydet(aracid);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						SetVehicleParamsEx(AracBilgi[aracid][aracYarat], engine, lights, alarm, 0, bonnet, boot, objective);
					    cmd_ado(playerid, "Kilit açýldý.");
					}
					default: cmd_ado(playerid, "Maymuncuk kýrýldý."), OyuncuBilgi[playerid][oMaymuncuk]--;
			    }
			}
		}
		if(MaymuncukVeri[playerid][mTur] == 1) if(!YakinlikKontrol(playerid, MaymuncukVeri[playerid][mHedef], 3.0)) return SunucuMesaji(playerid, "Oyuncudan uzaklaþtýðýn için maymuncuk iþlemin iptal edildi, maymuncuðun kýrýldý."), MaymuncukVeri[playerid][mSaniye] = 0, OyuncuBilgi[playerid][oMaymuncuk]--;
        if(MaymuncukVeri[playerid][mTur] == 2) if(Ev_Yakin(playerid) != MaymuncukVeri[playerid][mHedef]) return SunucuMesaji(playerid, "Evden uzaklaþtýðýn için maymuncuk iþlemin iptal edildi, maymuncuðun kýrýldý."), MaymuncukVeri[playerid][mSaniye] = 0, OyuncuBilgi[playerid][oMaymuncuk]--;
        if(MaymuncukVeri[playerid][mTur] == 3) if(Bina_Yakin(playerid) != MaymuncukVeri[playerid][mHedef]) return SunucuMesaji(playerid, "Evden uzaklaþtýðýn için maymuncuk iþlemin iptal edildi, maymuncuðun kýrýldý."), MaymuncukVeri[playerid][mSaniye] = 0, OyuncuBilgi[playerid][oMaymuncuk]--;
        if(MaymuncukVeri[playerid][mTur] == 4) if(Isyeri_Yakin(playerid) != MaymuncukVeri[playerid][mHedef]) return SunucuMesaji(playerid, "Binadan uzaklaþtýðýn için maymuncuk iþlemin iptal edildi, maymuncuðun kýrýldý."), MaymuncukVeri[playerid][mSaniye] = 0, OyuncuBilgi[playerid][oMaymuncuk]--;
        if(MaymuncukVeri[playerid][mTur] == 5) if(Arac_Yakin(playerid) != MaymuncukVeri[playerid][mHedef]) return SunucuMesaji(playerid, "Araçtan uzaklaþtýðýn için maymuncuk iþlemin iptal edildi, maymuncuðun kýrýldý."), MaymuncukVeri[playerid][mSaniye] = 0, OyuncuBilgi[playerid][oMaymuncuk]--;
		MaymuncukVeri[playerid][mSaniye]--;
		format(mesaj, sizeof(mesaj), "~r~MAYMUNCUK: ~w~%d saniye", MaymuncukVeri[playerid][mSaniye]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	if(OyuncuBilgi[playerid][oAnkesorluTelefon] == true) {
	new ankid = Ankesorlu_Telefon_Yakin(playerid);
	if(ankid == -1) {
	new oyuncuid = OyuncuBilgi[playerid][oArama];
	UyariMesaji(playerid, "Ankesörlü telefondan uzaklaþtýðýnýz için çaðrý yarýda kesildi.");
	UyariMesaji(oyuncuid, "Çaðrý yarýda kesildi.");
	cmd_kapat(playerid, "");
	}
	}
	if(OyuncuBilgi[playerid][oBaglamaSure] > 0) {
		new Float:arac_pos[3], aracid = OyuncuBilgi[playerid][oAracBagla];
		GetVehiclePos(AracBilgi[aracid][aracYarat], arac_pos[0], arac_pos[1], arac_pos[2]);
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, arac_pos[0], arac_pos[1], arac_pos[2]) || !IsValidVehicle(AracBilgi[aracid][aracYarat])) return HataMesaji(playerid, "Araca yakýn olmadýðýnýz için iþlem iptal edildi."), OyuncuBilgi[playerid][oBaglamaSure] = 0, OyuncuBilgi[playerid][oAracBagla] = INVALID_VEHICLE_ID;
	    if(OyuncuBilgi[playerid][oBaglamaSure] == 1) {
	        if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yerde yaralý olduðun için iþlem iptal edildi."), OyuncuBilgi[playerid][oBaglamaSure] = 0, OyuncuBilgi[playerid][oAracBagla] = INVALID_VEHICLE_ID;
			AracBilgi[aracid][aracDurum] = 2;
		    AracBilgi[aracid][aracBaglama] = 250;
			Arac_Spawn(aracid);
			Arac_Kaydet(aracid);
			SunucuMesaji(playerid, "%s plakalý araç baðlandý.", AracBilgi[aracid][aracPlaka]);
			BirlikMesaji(OyuncuBilgi[playerid][oBirlik], RENK_BIRLIK, "[BIRLIK] {FFFFFF}%s bir araç baðladý. (%s / %s)", OyuncuIsim(playerid), AracBilgi[aracid][aracPlaka], AracModel(AracBilgi[aracid][aracModel]));
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) bir araç baðladý. (%s / %s)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], AracBilgi[aracid][aracPlaka], AracModel(AracBilgi[aracid][aracModel]));
			Gunluk_LogKaydet(log_icerik);
			Log_Kaydet("loglar/arac.txt", "%s", log_icerik);
	    }
	    OyuncuBilgi[playerid][oBaglamaSure]--;
		format(mesaj, sizeof(mesaj), "~r~ARAC BAGLANIYOR: ~w~%d saniye", OyuncuBilgi[playerid][oBaglamaSure]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	if(OyuncuBilgi[playerid][oDuzKontak] > 0) {
		if(OyuncuBilgi[playerid][oDuzKontak] == 1) {
			SetTimerEx("araccalistir", 100, false, "ii", playerid, GetPlayerVehicleID(playerid));
			OyuncuBilgi[playerid][oHirsizArac] = INVALID_VEHICLE_ID;
		}
		OyuncuBilgi[playerid][oDuzKontak]--;
		format(mesaj, sizeof(mesaj), "~r~DUZ KONTAK: ~w~%d saniye", OyuncuBilgi[playerid][oDuzKontak]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	/*if(OyuncuBilgi[playerid][oUretimYapiyor] > 0) {
		TogglePlayerControllable(playerid, false);
		OyuncuBilgi[playerid][oKontrol] = false;
		if(OyuncuBilgi[playerid][oUretimYapiyor] == 1) {
			new urun[16];
			switch(OyuncuBilgi[playerid][oUretimTuru]) {
			    case 1: urun = "gövdesi", OyuncuBilgi[playerid][oGovde]++;
			    case 2: urun = "namlusu", OyuncuBilgi[playerid][oNamlu]++;
			    case 3: urun = "haznesi", OyuncuBilgi[playerid][oHazne]++;
			}
			SunucuMesaji(playerid, "1 adet silah %s ürettin.", urun);
			TogglePlayerControllable(playerid, true);
			OyuncuBilgi[playerid][oKontrol] = true;
		}
		OyuncuBilgi[playerid][oUretimYapiyor]--;
		format(mesaj, sizeof(mesaj), "~r~PARCA URETIM: ~w~%d saniye", OyuncuBilgi[playerid][oUretimYapiyor]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	if(OyuncuBilgi[playerid][oUretimSure] > 0) {
	    TogglePlayerControllable(playerid, false);
		OyuncuBilgi[playerid][oKontrol] = false;
		if(OyuncuBilgi[playerid][oUretimSure] == 1) {
			new sorgu[256];
			format(sorgu, sizeof(sorgu), "INSERT INTO `silahenvanter` (`karakterID`, `silahID`) VALUES ('%d', '%d')", OyuncuBilgi[playerid][oID], OyuncuBilgi[playerid][oUretimSilah]);
			mysql_query(mysqlB, sorgu);
			SunucuMesaji(playerid, "%s model silah ürettin, silah envanterine eklendi mermi alarak kullanabilirsin. (/senvanter)", SilahIsim(OyuncuBilgi[playerid][oUretimSilah]));
			OyuncuBilgi[playerid][oUretimSilah] = 0;
			TogglePlayerControllable(playerid, true);
			OyuncuBilgi[playerid][oKontrol] = true;
		}
		OyuncuBilgi[playerid][oUretimSure]--;
		format(mesaj, sizeof(mesaj), "~r~SILAH URETIM: ~w~%d saniye", OyuncuBilgi[playerid][oUretimSure]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}*/
	if(OyuncuBilgi[playerid][oEleGecirmeSure] > 0) {
	    new point_id = OyuncuBilgi[playerid][oEleGecirme];
		if(OyuncuBilgi[playerid][oEleGecirmeSure] == 1) {
			if(PointBilgi[point_id][pointKullanimda] == false) return HataMesaji(playerid, "Ele geçirme sisteminde bir sorun oluþtu."), OyuncuBilgi[playerid][oEleGecirme] = -1, OyuncuBilgi[playerid][oEleGecirmeSure] = 0;
			PointBilgi[point_id][pointBirlik] = BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID];
			Point_Yenile(point_id);
			Point_Kaydet(point_id);
			OyuncuBilgi[playerid][oEleGecirme] = -1;
			SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "vPoint: %s bölgesi %s birliði tarafýndan ele geçirildi.", PointBilgi[point_id][pointBolge], BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikAd]);
		}
		if(OyuncuBilgi[playerid][oBirlik] == -1) return HataMesaji(playerid, "Artýk birlik üyesi olmadýðýn için ele geçirme edildi."), OyuncuBilgi[playerid][oEleGecirme] = -1, OyuncuBilgi[playerid][oEleGecirmeSure] = 0;
		if(!IsPlayerInRangeOfPoint(playerid, 75.0, PointBilgi[point_id][pointPos][0], PointBilgi[point_id][pointPos][1], PointBilgi[point_id][pointPos][2])) return UyariMesaji(playerid, "Point noktasýndan uzaklaþtýðýn için ele geçirme iptal edildi."), OyuncuBilgi[playerid][oEleGecirme] = -1, OyuncuBilgi[playerid][oEleGecirmeSure] = 0;
		if(OyuncuBilgi[playerid][oYaraliSure] > 0) return UyariMesaji(playerid, "Yaralandýðýn için ele geçirme iptal edildi."), OyuncuBilgi[playerid][oEleGecirme] = -1, OyuncuBilgi[playerid][oEleGecirmeSure] = 0;
		OyuncuBilgi[playerid][oEleGecirmeSure]--;
		format(mesaj, sizeof(mesaj), "~b~ELE GECIRME: ~w~%d saniye", OyuncuBilgi[playerid][oEleGecirmeSure]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	if(OyuncuBilgi[playerid][oHirsizSure] > 0) {
		if(OyuncuBilgi[playerid][oHirsizSure] == 1) {
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1863.6262, -1683.7197, 21.7500)) {
				OyuncuBilgi[playerid][oHirsizSure] = 0;
				OyuncuBilgi[playerid][oHirsizArac] = INVALID_VEHICLE_ID;
				UyariMesaji(playerid, "Araç parçalatma noktadan uzaklaþtýðýn için iptal edildi.");
				return 1;
			}
			new aracid = Arac_IDBul(GetPlayerVehicleID(playerid)), gun = 0;
			switch(OyuncuBilgi[playerid][oVIP]) {
				case 1: gun = 129600;
				case 2: gun = 86400;
				case 3: gun = 43200;
				default: gun = 172800;
			}
 			OyuncuBilgi[playerid][oHirsizVIPTeslim] = gettime() + gun;
			for(new i = 0; i != sizeof(SatilikAraclar); i ++) if(SatilikAraclar[i][0] == GetVehicleModel(GetPlayerVehicleID(playerid))) {
				SunucuMesaji(playerid, "Aracý parçalattýðýnýz için %s kazandýnýz.", NumaraFormati(SatilikAraclar[i][1] / 10)), ParaEkle(playerid, SatilikAraclar[i][1] / 10);
				new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
				GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
				format(log_icerik, sizeof(log_icerik), "[%s] %s bir aracý parçalattý. (Sahip: %d / Model: %s / Kazanýlan: %s)", Tarih(), oyuncu_isim, AracBilgi[aracid][aracSahip], AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(SatilikAraclar[i][1] / 10));
				Gunluk_LogKaydet(log_icerik);
				Log_Kaydet("loglar/hurdaci.txt", "%s", log_icerik);
				break;
			}
			AracBilgi[aracid][aracDurum] = 0;
			Arac_Spawn(aracid);
			Arac_Kaydet(aracid);
			OyuncuBilgi[playerid][oHirsizArac] = INVALID_VEHICLE_ID;
		}
		OyuncuBilgi[playerid][oHirsizSure]--;
		format(mesaj, sizeof(mesaj), "~r~ARAC PARCALAMA: ~w~%d saniye", OyuncuBilgi[playerid][oHirsizSure]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	if(OyuncuBilgi[playerid][oArizaTespitSure] > 0) {
	    if(OyuncuBilgi[playerid][oArizaTespitSure] == 1) {
			new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
			new arizatur = AracBilgi[aracid][aracArizaTur];
			SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[ARIZA]: {FFFFFF}%s", RENK_PAINTBALL >>> 8, Arac_ArizaIpucu(arizatur));
			OyuncuBilgi[playerid][oArizaTespitDelay] = gettime() + 30;
			OyuncuBilgi[playerid][oArizaliArac] = INVALID_VEHICLE_ID;
			OyuncuKaydet(playerid);
	    }
		OyuncuBilgi[playerid][oArizaTespitSure]--;
		format(mesaj, sizeof(mesaj), "~r~ARIZA ARANIYOR: ~w~%d saniye", OyuncuBilgi[playerid][oArizaTespitSure]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	if(OyuncuBilgi[playerid][oArizaTamirSure] > 0) {
	    if(OyuncuBilgi[playerid][oArizaTamirSure] == 1) {
	     new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
    	 OyuncuBilgi[playerid][oArizaTamirDelay] = gettime() + 45;
		 AracBilgi[aracid][aracArizaTur] = 0;
		 AracBilgi[aracid][aracTamirde] = 0;
		 OyuncuBilgi[playerid][oArizaliArac] = INVALID_VEHICLE_ID;
		 SendClientMessageEx(playerid, RENK_BEYAZ, "{%06x}[ARIZA TAMIR]: {FFFFFF}Araç baþarýyla tamir edildi, artýk kullanýlabilir.", RENK_PAINTBALL >>> 8);
		 OyuncuKaydet(playerid);
		 Arac_Kaydet(aracid);
	    }
	    OyuncuBilgi[playerid][oArizaTamirSure]--;
		format(mesaj, sizeof(mesaj), "~r~ARIZA TAMIR EDILIYOR: ~w~%d saniye", OyuncuBilgi[playerid][oArizaTamirSure]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	if(OyuncuBilgi[playerid][oDekorSure] > 0) {
		if(OyuncuBilgi[playerid][oDekorSure] == 1) {
			OyuncuPosDegistir(playerid, EskiVeriler[playerid][eskiPos][0], EskiVeriler[playerid][eskiPos][1], EskiVeriler[playerid][eskiPos][2]);
            SetPlayerFacingAngle(playerid, EskiVeriler[playerid][eskiPos][3]);
            SetPlayerVirtualWorld(playerid, EskiVeriler[playerid][eskiVW]);
            SetPlayerInterior(playerid, EskiVeriler[playerid][eskiInt]);
			SetCameraBehindPlayer(playerid);
	        DondurulmaEtkisi(playerid);
		}
		OyuncuBilgi[playerid][oDekorSure]--;
		format(mesaj, sizeof(mesaj), "~r~DEKOR ONIZLEME: ~w~%d saniye", OyuncuBilgi[playerid][oDekorSure]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	if(OyuncuBilgi[playerid][oIlkYardimSure] > 0) {
	    if(OyuncuBilgi[OyuncuBilgi[playerid][oIlkYardimYapilan]][oYaraliSure] < 2) {
			ClearAnimations(playerid);
			HataMesaji(playerid, "Oyuncunun yaralý süresi bittiði için iþlem iptal edildi.");
			OyuncuBilgi[playerid][oIlkYardimYapilan] = INVALID_PLAYER_ID;
			OyuncuBilgi[playerid][oIlkYardimSure] = 0;
	    }
	    if(!YakinlikKontrol(playerid, OyuncuBilgi[playerid][oIlkYardimYapilan], 4.0) && OyuncuBilgi[playerid][oIlkYardimYapilan] != playerid) {
			ClearAnimations(playerid);
			HataMesaji(playerid, "Ýlk yardým yaptýðýn kiþiden uzaklaþtýðýn için iþlem iptal edildi.");
			OyuncuBilgi[playerid][oIlkYardimYapilan] = INVALID_PLAYER_ID;
			OyuncuBilgi[playerid][oIlkYardimSure] = 0;
	    }
		if(OyuncuBilgi[playerid][oIlkYardimSure] == 1) {
			new oyuncuid = OyuncuBilgi[playerid][oIlkYardimYapilan];
			if(OyuncuBilgi[playerid][oIlkYardim] > 0) OyuncuBilgi[playerid][oIlkYardim]--;
			if(OyuncuBilgi[oyuncuid][oYaraliSure] > 0) OyuncuBilgi[oyuncuid][oYaraliSure] = 0, BayginlikBitir(oyuncuid);
			else CanDuzenle(oyuncuid, 100);
			UyariMesaji(oyuncuid, "Ýlk yardým yapýldý ancak hala yaralýsýn ve yaralý rolü yapman gerekiyor. Tam olarak iyileþmek için hastaneye giderek tedavi olmalýsýn. ");
			SunucuMesaji(playerid, "Ýlk yardým baþarýyla yapýldý.");
			ClearAnimations(playerid);
			OyuncuBilgi[playerid][oIlkYardimYapilan] = INVALID_PLAYER_ID;
		}
		if(OyuncuBilgi[playerid][oIlkYardimSure] > 0) OyuncuBilgi[playerid][oIlkYardimSure]--;
		format(mesaj, sizeof(mesaj), "~r~ILK YARDIM: ~w~%d saniye", OyuncuBilgi[playerid][oIlkYardimSure]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	if(OyuncuBilgi[playerid][oTamirKitiSure] > 0) {
		if(OyuncuBilgi[playerid][oTamirKitiSure] == 1) {
			SunucuMesaji(playerid, "Araç baþarýyla tamir edildi.");
		    new tamir_arac = OyuncuBilgi[playerid][oTamirArac];
		    SetVehicleHealth(tamir_arac, 700.0);
		    OyuncuBilgi[playerid][oTamirArac] = INVALID_VEHICLE_ID;
		    OyuncuBilgi[playerid][oTamirKiti]--;
		}
		if(OyuncuBilgi[playerid][oTamirKitiSure] > 1) {
			new tamir_arac = OyuncuBilgi[playerid][oTamirArac];
			if(!IsValidVehicle(tamir_arac)) return HataMesaji(playerid, "Bir sorun oluþtu."), OyuncuBilgi[playerid][oTamirKitiSure] = 0, OyuncuBilgi[playerid][oTamirArac] = INVALID_VEHICLE_ID, OyuncuBilgi[playerid][oTamirKiti]--;
			new Float:arac_pos[3];
			GetVehiclePos(tamir_arac, arac_pos[0], arac_pos[1], arac_pos[2]);
			if(!IsPlayerInRangeOfPoint(playerid, 4.0, arac_pos[0], arac_pos[1], arac_pos[2])) return HataMesaji(playerid, "Araçtan uzaklaþtýðýn için iþlem iptal oldu."), OyuncuBilgi[playerid][oTamirKitiSure] = 0, OyuncuBilgi[playerid][oTamirArac] = INVALID_VEHICLE_ID, OyuncuBilgi[playerid][oTamirKiti]--;
			if(AracCan(tamir_arac) >= 700) return HataMesaji(playerid, "Araç tamir edilmiþ, iþlemin iptal edildi."), OyuncuBilgi[playerid][oTamirKitiSure] = 0, OyuncuBilgi[playerid][oTamirArac] = INVALID_VEHICLE_ID, OyuncuBilgi[playerid][oTamirKiti]--;
			if(GetEngineStatus(tamir_arac) == 1) return HataMesaji(playerid, "Aracýn motoru açýldý, iþlemin iptal edildi."), OyuncuBilgi[playerid][oTamirKitiSure] = 0, OyuncuBilgi[playerid][oTamirArac] = INVALID_VEHICLE_ID, OyuncuBilgi[playerid][oTamirKiti]--;
		}
	    if(OyuncuBilgi[playerid][oTamirKitiSure] > 0) OyuncuBilgi[playerid][oTamirKitiSure]--;
	    format(mesaj, sizeof(mesaj), "~r~TAMIR EDILIYOR: ~w~%d saniye", OyuncuBilgi[playerid][oTamirKitiSure]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	if(OyuncuBilgi[playerid][oIslemeSure] > 0) {
	    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 769.40, -335.17, 715.62)) return HataMesaji(playerid, "Laboratuvardan uzaklaþtýðýn için iþlem iptal edildi."), OyuncuBilgi[playerid][oIslemeSure] = 0;
		if(OyuncuBilgi[playerid][oIslemeSure] == 1) {
		    if(OyuncuBilgi[playerid][oPara] >= ISLEME_UCRET) {
                ParaEkle(playerid, -ISLEME_UCRET);
                if(OyuncuBilgi[playerid][oIslenmemisMadde] <= 5) UyariMesaji(playerid, "%d adet iþlenmemiþ maddeyi %s karþýlýðýnda uyuþturucu olarak iþledin.", OyuncuBilgi[playerid][oIslenmemisMadde], NumaraFormati(ISLEME_UCRET)), OyuncuBilgi[playerid][oUyusturucu] += OyuncuBilgi[playerid][oIslenmemisMadde], OyuncuBilgi[playerid][oIslenmemisMadde] = 0;
                else if(OyuncuBilgi[playerid][oIslenmemisMadde] > 5) UyariMesaji(playerid, "5 adet iþlenmemiþ maddeyi %s karþýlýðýnda uyuþturucu olarak iþledin.", NumaraFormati(ISLEME_UCRET)), OyuncuBilgi[playerid][oUyusturucu] += 5, OyuncuBilgi[playerid][oIslenmemisMadde] -= 5;
		    }
			else HataMesaji(playerid, "Ýþleme ücretini karþýlayamadýðýn için iþleme iptal edildi.");
		}
		OyuncuBilgi[playerid][oIslemeSure]--;
		format(mesaj, sizeof(mesaj), "~r~ISLEME: ~w~%d saniye", OyuncuBilgi[playerid][oIslemeSure]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	if(OyuncuBilgi[playerid][oMadenKaziyor] > 0) {
	    if(OyuncuBilgi[playerid][oMadenKaziyor] == 1) {
	        new bool:maden_cikti = false;
	    	switch(random(100)) {
				case 1..80: maden_cikti = true;
				default: maden_cikti = false;
    		}
			if(maden_cikti == true) {
			    new maden_isim[32], gram = 15, maden_id = 1;
			    switch(random(16)) {
			        case 1..5: maden_isim = "Kömür", gram = randomEx(10, 40), maden_id = 0;
			        case 6..9: maden_isim = "Bakýr", gram = randomEx(10, 30), maden_id = 1;
			        case 10..12: maden_isim = "Bronz", gram = randomEx(10, 20), maden_id = 2;
			        case 13, 14: maden_isim = "Gümüþ", gram = randomEx(5, 15), maden_id = 3;
			        case 15: maden_isim = "Altýn", gram = randomEx(3, 6), maden_id = 4;
			        default: maden_isim = "Kömür", gram = randomEx(10, 40), maden_id = 0;
			    }
			    SunucuMesaji(playerid, "%s adlý madene isabet ettin, %s gram envanterine eklendi.", maden_isim, NumaraFormati(gram, ""));
			    OyuncuBilgi[playerid][oMadenler][maden_id] += gram;
			    OyuncuBilgi[playerid][oMadenYetenek]++;
			    ClearAnimations(playerid);
			}
			else if(maden_cikti == false) UyariMesaji(playerid, "Bu kazýda bir þey bulamadýn, lütfen tekrar dene.");
			ClearAnimations(playerid);
			TogglePlayerControllable(playerid, true);
			OyuncuBilgi[playerid][oKontrol] = true;
	    }
		OyuncuBilgi[playerid][oMadenKaziyor]--;
		GameTextForPlayer(playerid, "~r~MADEN KAZILIYOR...", 1000, 3);
	}
	if(OyuncuBilgi[playerid][oBalikTutuyor] > 0) {
	    if(OyuncuBilgi[playerid][oBalikTutuyor] == 1) {
			new yem = GetPVarInt(playerid, "Balik_Yem"), bool:balik_tuttu = false;
			DeletePVar(playerid, "Balik_Yem");
			if(yem == 0) {
			    switch(random(100)) {
			        case 1..50: balik_tuttu = true;
			        default: balik_tuttu = false;
			    }
			}
			else if(yem == 1) {
			    switch(random(100)) {
			        case 1..55: balik_tuttu = true;
			        default: balik_tuttu = false;
			    }
			}
			else if(yem == 2) {
			    switch(random(100)) {
			        case 1..65: balik_tuttu = true;
			        default: balik_tuttu = false;
			    }
			}
			else if(yem == 3) {
			    switch(random(100)) {
			        case 1..75: balik_tuttu = true;
			        default: balik_tuttu = false;
			    }
			}
			else if(yem == 4) {
			    switch(random(100)) {
			        case 1..85: balik_tuttu = true;
			        default: balik_tuttu = false;
			    }
			}
			OyuncuBilgi[playerid][oYemler][yem]--;
			if(balik_tuttu == true) {
			    new balikisim[32], gram = 3, balik_id = 0;
			    switch(random(56)) {
			        case 1..6: balikisim = "Çipura", gram = randomEx(3, 7), balik_id = 0;
					case 7..13: balikisim = "Levrek", gram = randomEx(8, 11), balik_id = 1;
					case 14..18: balikisim = "Lagos", gram = randomEx(12, 15), balik_id = 2;
					case 19..23: balikisim = "Lambuka", gram = randomEx(16, 19), balik_id = 3;
					case 24..27: balikisim = "Orkinos", gram = randomEx(17, 20), balik_id = 4;
					case 28..31: balikisim = "Morina", gram = randomEx(14, 16), balik_id = 5;
					case 32..34: balikisim = "Somon", gram = randomEx(16, 20), balik_id = 6;
					case 35..37: balikisim = "Sarina", gram = randomEx(20, 22), balik_id = 7;
					case 38..40: balikisim = "Barramundi", gram = randomEx(23, 26), balik_id = 8;
					case 41..43: balikisim = "Zargana", gram = randomEx(27, 30), balik_id = 9;
					case 44..47: balikisim = "Kefal", gram = randomEx(30, 32), balik_id = 10;
					case 48, 49: balikisim = "Mazak", gram = randomEx(33, 36), balik_id = 11;
					case 50, 51: balikisim = "Bakalyaro", gram = randomEx(37, 40), balik_id = 12;
					case 52, 53: balikisim = "Akya", gram = randomEx(40, 44), balik_id = 13;
					case 55: balikisim = "Ahtapot", gram = randomEx(45, 55), balik_id = 14;
			        default: balikisim = "Çipura", gram = randomEx(3, 7), balik_id = 0;
			    }
			    SunucuMesaji(playerid, "%s adlý balýðý tuttun, %s gram envanterine eklendi.", balikisim, NumaraFormati(gram, ""));
			    OyuncuBilgi[playerid][oBaliklar][balik_id] += gram;
			    OyuncuBilgi[playerid][oBalikYetenek]++;
			}
			else if(balik_tuttu == false) UyariMesaji(playerid, "Oltana bir þey isabet etmedi, yemini kaybettin.");
			TogglePlayerControllable(playerid, true);
			OyuncuBilgi[playerid][oKontrol] = true;
	    }
		OyuncuBilgi[playerid][oBalikTutuyor]--;
		GameTextForPlayer(playerid, "~r~BALIK TUTULUYOR...", 1000, 3);
	}
	if(OyuncuBilgi[playerid][oGraffiti] != -1 && OyuncuBilgi[playerid][oGraffitiSure] > 0)
	{
		if(Graffiti_Yakin(playerid) != OyuncuBilgi[playerid][oGraffiti])
		{
		    OyuncuBilgi[playerid][oGraffiti] = -1;
 			OyuncuBilgi[playerid][oGraffitiSure] = 0;
		}
		else
		{
			OyuncuBilgi[playerid][oGraffitiSure]--;
			if(OyuncuBilgi[playerid][oGraffitiSure] < 1)
			{
			    new yazi[64];
			    strunpack(yazi, OyuncuBilgi[playerid][oGraffitiYazi]);
				format(GraffitiBilgi[OyuncuBilgi[playerid][oGraffiti]][graffitiYazi], 64, yazi);

				GraffitiBilgi[OyuncuBilgi[playerid][oGraffiti]][graffitiRenk] = OyuncuBilgi[playerid][oGraffitiRenk];
				Graffiti_Yenile(OyuncuBilgi[playerid][oGraffiti]);
				Graffiti_Kaydet(OyuncuBilgi[playerid][oGraffiti]);
				ClearAnimations(playerid, 1);


				OyuncuBilgi[playerid][oGraffiti] = -1;
				OyuncuBilgi[playerid][oGraffitiSure] = 0;
			}
		}
	}
	if(OyuncuBilgi[playerid][oTamirSure] > 0) {
	    if(OyuncuBilgi[playerid][oTamirSure] == 1) {
			new aracid = GetPlayerVehicleID(playerid), aid = Arac_IDBul(aracid), modifiyeid = Modifiye_Yakin(playerid);
			AracTamirEt(aracid);
			TogglePlayerControllable(playerid, true);
			ModifiyeNoktasi[modifiyeid][modifiyeKullanan] = INVALID_PLAYER_ID;
			if(AracBilgi[aid][aracBirlik] > 0) {
				new aracbirlik = BirlikIDBul(AracBilgi[aid][aracBirlik]);
				if(BirlikBilgi[aracbirlik][birlikTur] == BIRLIK_POLIS || BirlikBilgi[aracbirlik][birlikTur] == BIRLIK_MEDIKAL || BirlikBilgi[aracbirlik][birlikTur] == BIRLIK_DEVLET)
					SunucuMesaji(playerid, "Devlet aracýný tamir ettirdiðiniz için ücret alýnmadý.");
				else {
					SunucuMesaji(playerid, "Aracýný tamir ettirmek için %s ödedin.", NumaraFormati(ModifiyeNoktasi[modifiyeid][modifiyeUcret]));
					ParaEkle(playerid, -ModifiyeNoktasi[modifiyeid][modifiyeUcret]);
				}
			}
			else {
				SunucuMesaji(playerid, "Aracýný tamir ettirmek için %s ödedin.", NumaraFormati(ModifiyeNoktasi[modifiyeid][modifiyeUcret]));
				ParaEkle(playerid, -ModifiyeNoktasi[modifiyeid][modifiyeUcret]);
			}
			switch(AracBilgi[aid][aracZirh]) {
				case 1: AracZirh[AracBilgi[aid][aracYarat]] = ARAC_ZIRH_SEVIYE1;
				case 2: AracZirh[AracBilgi[aid][aracYarat]] = ARAC_ZIRH_SEVIYE2;
				case 3: AracZirh[AracBilgi[aid][aracYarat]] = ARAC_ZIRH_SEVIYE3;
				case 4: AracZirh[AracBilgi[aid][aracYarat]] = ARAC_ZIRH_SEVIYE4;
				default: AracZirh[AracBilgi[aid][aracYarat]] = 0;
			}
			if(AracBilgi[aid][aracZirh] > 0) SunucuMesaji(playerid, "Araç zýrhý yenilendi.");
	    }
		OyuncuBilgi[playerid][oTamirSure]--;
		format(mesaj, sizeof(mesaj), "~r~TAMIR: ~w~%d saniye", OyuncuBilgi[playerid][oTamirSure]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	if(OyuncuBilgi[playerid][oTedaviSure] > 0) {
	    if(OyuncuBilgi[playerid][oTedaviSure] <= 1) {
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 7011);
			OyuncuPosDegistir(playerid, -8.8318, 151.3684, 999.0519);
			SetPlayerFacingAngle(playerid, 180);
			OyuncuBilgi[playerid][oKontrol] = true;
			TogglePlayerControllable(playerid, true);
			ClearAnimations(playerid);
			SetCameraBehindPlayer(playerid);
			UyariMesaji(playerid, "Tedavin tamamlandý, taburcu oldun.");
		}
		OyuncuBilgi[playerid][oTedaviSure]--;
		format(mesaj, sizeof(mesaj), "~r~TEDAVI EDILIYORSUN: ~w~%d saniye", OyuncuBilgi[playerid][oTedaviSure]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) {
	    if(OyuncuBilgi[playerid][oYaraliSure] <= 1) {
	        IsimLabelGuncelle(playerid);
		    ClearAnimations(playerid);
		    TogglePlayerControllable(playerid, true);
		    SetPlayerHealth(playerid, 25);
		    DondurulmaTimer[playerid] = SetTimerEx("DondurulmaIptal", 50, false, "i", playerid);
		    OyuncuKaydet(playerid);
		    SetCameraBehindPlayer(playerid);
		}
		OyuncuBilgi[playerid][oYaraliSure]--;
        IsimLabelGuncelle(playerid);
		format(mesaj, sizeof(mesaj), "~r~YARALANDIN: ~w~%d saniye", OyuncuBilgi[playerid][oYaraliSure]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
	}
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) {
	    if(OyuncuBilgi[playerid][oHapisSure][0] == 1) {
			OyuncuPosDegistir(playerid, 1510.12, -1690.96, 14.05);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SunucuMesaji(playerid, "Hapis süreniz bitti.");
			OyuncuKaydet(playerid);
			TogglePlayerControllable(playerid, true);
	    }
		OyuncuBilgi[playerid][oHapisSure][0]--;
	}
	if(OyuncuBilgi[playerid][oHapisSure][1] > 0 && OyuncuBilgi[playerid][oAdminDurum] == false) {
	    if(OyuncuBilgi[playerid][oHapisSure][1] == 1) {
	        new sorgu[144];
			format(sorgu, sizeof(sorgu), "UPDATE oyuncular SET SucIndirimi = '0' WHERE ID = '%d'", OyuncuBilgi[playerid][oID]);
			mysql_query(mysqlB, sorgu);
			OyuncuPosDegistir(playerid, 1529.6327, -1683.8873, 13.3828);
			SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    OyuncuBilgi[playerid][oHapisID] = -1;
		    SunucuMesaji(playerid, "Hapis süren bitti.");
			OyuncuKaydet(playerid);
			TogglePlayerControllable(playerid, true);
	    }
		OyuncuBilgi[playerid][oHapisSure][1]--;
	}
	if(OyuncuBilgi[playerid][oDonduruldu] > 0)
	{
		OyuncuBilgi[playerid][oDonduruldu]--;
		format(mesaj, sizeof(mesaj), "~r~DONDURULMA ETKISI: ~w~%d saniye", OyuncuBilgi[playerid][oDonduruldu]);
		GameTextForPlayer(playerid, mesaj, 1000, 3);
		if(GetPlayerAnimationIndex(playerid) != 386) ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0);
		if(!OyuncuBilgi[playerid][oDonduruldu])
		{
		    ClearAnimations(playerid);
			TogglePlayerControllable(playerid, true);
		}
	}
	if(OyuncuBilgi[playerid][oArama] > -1 && OyuncuBilgi[playerid][oCevaplandi] == true) {
	    OyuncuBilgi[playerid][oAramaSure]++;
	}
	if((id = Boombox_Yakin(playerid)) != INVALID_PLAYER_ID && OyuncuBilgi[playerid][oBoombox] != id && strlen(BoomboxBilgi[id][boomboxURL]) && OyuncuBilgi[playerid][oBoomboxDurum] == true)
	{
	    strunpack(mesaj, BoomboxBilgi[id][boomboxURL]);
	    OyuncuBilgi[playerid][oBoombox] = id;
		StopAudioStreamForPlayer(playerid);
		PlayAudioStreamForPlayer(playerid, mesaj, BoomboxBilgi[id][boomboxPos][0], BoomboxBilgi[id][boomboxPos][1], BoomboxBilgi[id][boomboxPos][2], 30.0, 1);
	}
	else if(OyuncuBilgi[playerid][oBoombox] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxBilgi[OyuncuBilgi[playerid][oBoombox]][boomboxPos][0], BoomboxBilgi[OyuncuBilgi[playerid][oBoombox]][boomboxPos][1], BoomboxBilgi[OyuncuBilgi[playerid][oBoombox]][boomboxPos][2]))
	    OyuncuBilgi[playerid][oBoombox] = INVALID_PLAYER_ID, StopAudioStreamForPlayer(playerid);

	new text_guncelle[144];
    for(new i = 0; i != MAKSIMUM_BIRLIK; i++) if(BirlikBilgi[i][birlikPosDurum] == 1 && IsPlayerInRangeOfPoint(playerid, 75.0, BirlikBilgi[i][birlikPos][0], BirlikBilgi[i][birlikPos][1], BirlikBilgi[i][birlikPos][2]))
    {
		format(text_guncelle, sizeof(text_guncelle), "bu bolge ~r~%s~w~ adli birlige aittir.", BirlikBilgi[i][birlikAd]);
		PlayerTextDrawSetString(playerid, BirlikBolgesiText[playerid][1], text_guncelle);
        PlayerTextDrawShow(playerid, BirlikBolgesiText[playerid][0]);
        PlayerTextDrawShow(playerid, BirlikBolgesiText[playerid][1]);
        return 1;
    }
	PlayerTextDrawHide(playerid, BirlikBolgesiText[playerid][0]);
	PlayerTextDrawHide(playerid, BirlikBolgesiText[playerid][1]);
	return 1;
}

public AFKKick(playerid)
{
	if(isnull(OyuncuBilgi[playerid][oyuncuKod]) && !IsPlayerAdmin(playerid)) return false;

	KickEx(playerid);
	return 1;
}

public Banka_Kontrol(playerid, hesapno)
{
	new rows, query[128];
	cache_get_row_count(rows);
	if(!rows)
	{
		if(OyuncuBilgi[playerid][oHesapNumarasi] > 0) return HataMesaji(playerid, "Zaten banka hesabý yaratmýþsýn.");
		OyuncuBilgi[playerid][oHesapNumarasi] = hesapno;
		OyuncuKaydet(playerid);
		SunucuMesaji(playerid, "ZCN Banka üzerinden bir banka hesabý oluþturdunuz, ilgili hesap no: %d", hesapno);
	}
	else if(rows){
		new hesapno2 = randomEx(100000, 999999);
		format(query, sizeof(query), "SELECT * FROM oyuncular WHERE HesapNumarasi = '%d'", hesapno2);
		mysql_tquery(mysqlB, query, "Banka_Kontrol", "dd", playerid, hesapno2);
	}
	return 1;
}

public Maske_Sorgula(playerid, maskeid)
{
	new rows, query[128];
	cache_get_row_count(rows);
	if(!rows)
	{
		//if(OyuncuBilgi[playerid][oMaskeID] > 0) return 0;
		OyuncuBilgi[playerid][oMaskeID] = maskeid;
		OyuncuKaydet(playerid);
	}
	else if(rows){
		new maskeno = randomEx(10000, 99999);
		format(query, sizeof(query), "SELECT * FROM oyuncular WHERE MaskeID = '%d'", maskeno);
		mysql_tquery(mysqlB, query, "Maske_Sorgula", "dd", playerid, maskeno);
	}
	return 1;
}

public Vatandaslik_Numarasi(playerid, vno)
{
	new rows;
	cache_get_row_count(rows);
	if(!rows)
	{
		if(OyuncuBilgi[playerid][oVatandaslikNo] > 0)
		    return 0;

		OyuncuBilgi[playerid][oVatandaslikNo] = vno;
		OyuncuKaydet(playerid);
	}
	else if(rows){
		new vatandaslik_numarasi = randomEx(10000000, 99999999), sorgu[144];
		format(sorgu, sizeof(sorgu), "SELECT * FROM oyuncular WHERE VatandaslikNo = '%d'", vatandaslik_numarasi);
		mysql_tquery(mysqlB, sorgu, "Vatandaslik_Numarasi", "dd", playerid, vatandaslik_numarasi);
	}
	return 1;
}

public SimNumara_Kontrol(playerid, telefon_num)
{
	new rows;
	cache_get_row_count(rows);
	if(!rows)
	{
		OyuncuBilgi[playerid][oTelefonNumarasi] = telefon_num;
		OyuncuKaydet(playerid);
		SunucuMesaji(playerid, "Sim Kartýn telefonuna tanýmlandý, operatöre baðlandýn. (Numaran: %d)", telefon_num);
	}
	else if(rows) {
		new telefon_numarasi = randomEx(100000, 999999), num_sorgu[144];
		format(num_sorgu, sizeof(num_sorgu), "SELECT `TelefonNumarasi` FROM oyuncular WHERE TelefonNumarasi = '%d'", telefon_numarasi);
		mysql_tquery(mysqlB, num_sorgu, "SimNumara_Kontrol", "dd", playerid, telefon_numarasi);
	}
	return 1;
}

public AracYaratildi(aracid)
{
	if(aracid == -1 || !AracBilgi[aracid][aracKullanimda])
	    return 0;

	static iharfler[][] ={"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
	AracBilgi[aracid][aracID] = cache_insert_id();
	if(AracBilgi[aracid][aracID] < 100) {
		format(AracBilgi[aracid][aracPlaka], 12, "%s%s%d %s00%d", iharfler[random(sizeof(iharfler))], iharfler[random(sizeof(iharfler))], randomEx(1, 10), iharfler[random(sizeof(iharfler))], AracBilgi[aracid][aracID]);
	}
	else if(AracBilgi[aracid][aracID] < 1000) {
	    format(AracBilgi[aracid][aracPlaka], 12, "%s%s%d %s0%d", iharfler[random(sizeof(iharfler))], iharfler[random(sizeof(iharfler))], randomEx(1, 10), iharfler[random(sizeof(iharfler))], AracBilgi[aracid][aracID]);
	}
	else if(AracBilgi[aracid][aracID] > 1000) {
	    format(AracBilgi[aracid][aracPlaka], 12, "%s%s%d %s%d", iharfler[random(sizeof(iharfler))], iharfler[random(sizeof(iharfler))], randomEx(1, 10), iharfler[random(sizeof(iharfler))], AracBilgi[aracid][aracID]);
	}
	Arac_Kaydet(aracid);
	Arac_Spawn(aracid);
	return 1;
}

public araccalistir(playerid, aracid)
{
	new Float:araccan, sayi, tarih[16];
	gettime(tarih[0], tarih[1], tarih[2]);

	GetVehicleHealth(aracid, araccan);
	OyuncuBilgi[playerid][oMotorCalistir] = false;
	if(OyuncuBilgi[playerid][oEhliyetTesti] > 0) SetPlayerCheckpoint(playerid, 1973.7873, -1991.6667, 13.5539, 6.0);
	if(araccan < 351) {
		HataMesaji(playerid, "Aracýn aðýr hasarlý olduðu için motoru çalýþtýramadýn.");
	}
	else if(araccan >= 750) {
		SetEngineStatus(aracid, true);
		SunucuMesaji(playerid, "Aracýn motoru çalýþtý!");
		foreach(new i : Player) if(OyuncuBilgi[i][oHirsizArac] == aracid && OyuncuBilgi[i][oDuzKontak] > 0) {
			OyuncuBilgi[i][oHirsizArac] = INVALID_VEHICLE_ID;
			OyuncuBilgi[i][oDuzKontak] = 0;
			UyariMesaji(i, "Aracýn motoru çalýþtýðý için düz kontak iptal edildi.");
		}
		if(Arac_BirlikTuru(aracid) == BIRLIK_POLIS) MDCTimer[aracid] = SetTimerEx ("RadarGuncelle", 1000, 1, "d", aracid);
		if(tarih[0] > 18 || tarih[0] < 5) return SetLightStatus(aracid, true);
	}
	else if(araccan < 750) {
	    sayi = randomEx(1, 10);
		if(sayi < 8) {
			SetEngineStatus(aracid, true);
			SunucuMesaji(playerid, "Aracýn motoru çalýþtý!");
			if(Arac_BirlikTuru(aracid) == BIRLIK_POLIS) MDCTimer[aracid] = SetTimerEx ("RadarGuncelle", 1000, 1, "d", aracid);
			foreach(new i : Player) if(OyuncuBilgi[i][oHirsizArac] == aracid && OyuncuBilgi[i][oDuzKontak] > 0) {
				OyuncuBilgi[i][oHirsizArac] = INVALID_VEHICLE_ID;
				OyuncuBilgi[i][oDuzKontak] = 0;
				UyariMesaji(i, "Aracýn motoru çalýþtýðý için düz kontak iptal edildi.");
			}
			if(tarih[0] > 18 || tarih[0] < 5) return SetLightStatus(aracid, true);
		}
		else if(sayi > 7) HataMesaji(playerid, "Aracýn hasarlý olduðu için motoru çalýþtýramadýn. Tekrar deneyin.");
	}
	return 1;
}

public UyusturucuBakimYap(playerid, id)
{
	if(UyusturucuBilgi[id][uBakim] == 1) return OyuncuBilgi[playerid][oBakim] = -1, HataMesaji(playerid, "Bakým zaten yapýlmýþ."), TogglePlayerControllable(playerid, true);

    ClearAnimations(playerid);
	UyusturucuBilgi[id][uBakim] = 1;
	OyuncuBilgi[playerid][oBakim] = -1;
	OyuncuBilgi[playerid][oGubre]--;
	Uyusturucu_Kaydet(id);
	Uyusturucu_Yenile(id);
	TogglePlayerControllable(playerid, true);
	return 1;
}

public UyusturucuTopla(playerid, id)
{
	if(UyusturucuBilgi[id][uBakim] == 0) return OyuncuBilgi[playerid][oBakim] = -1, HataMesaji(playerid, "Bu uyuþturucu toplanamaz."), ClearAnimations(playerid), TogglePlayerControllable(playerid, true);

	if(UyusturucuBilgi[id][uDurum] == 100) OyuncuBilgi[playerid][oIslenmemisMadde] += 10;
	ClearAnimations(playerid);
	OyuncuBilgi[playerid][oBakim] = -1;
	TogglePlayerControllable(playerid, true);
	OyuncuKaydet(playerid);
	Uyusturucu_Sil(id);
	SunucuMesaji(playerid, "Saksýdaki maddeyi topladýn, 10 iþlenmemiþ madde envanterine eklendi.");
	return 1;
}

public Surucusuz_Arac_Respawn(playerid)
{
	aracrespawn = false;
	new sayi = 0;
	for(new a = 0; a != MAKSIMUM_ARAC; a++) if(AracBilgi[a][aracKullanimda] && IsValidVehicle(AracBilgi[a][aracYarat]) && SurucuBul(AracBilgi[a][aracYarat]) == INVALID_PLAYER_ID) ASpawn(AracBilgi[a][aracYarat]), sayi++;

	if(!sayi) return HataMesaji(playerid, "Re-spawn edilebilecek araç yok.");

    SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "admCMD: Respawn iþlemi tamamlandý, %d adet sürücüsüz araç yeniden çýkarýldý.", sayi);
	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) tüm araçlarý respawnladý. (%d adet)", Tarih(), OyuncuBilgi[playerid][oAdminNick], OyuncuBilgi[playerid][oID], sayi);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_basit.txt", "%s", log_icerik);
	return 1;
}

public KapiKir_Bina(playerid, id)
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS || Bina_Yakin(playerid) != id)
	    return HataMesaji(playerid, "Binaya yakýn olmadýðýn için iþlem iptal edildi.");

    new mesaj[128];
	switch(random(6))
	{
	    case 0..2:
	    {
			format(mesaj, sizeof(mesaj), "Kapýyý kýrmayý baþaramadý.");
			cmd_ado(playerid, mesaj);
		}
		default:
		{
		    BinaBilgi[id][binaDurum] = 4;
		    Bina_Yenile(id);
			cmd_ado(playerid, "Bina kapýsý kýrýlmýþtýr.");
		}
	}
	return 1;
}

public KapiKir_Ev(playerid, id)
{
	new mesaj[128];
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS || Ev_Yakin(playerid) != id)
	    return HataMesaji(playerid, "Eve yakýn olmadýðýn için iþlem iptal edildi.");

	switch (random(6))
	{
	    case 0..2:
	    {
			format(mesaj, sizeof(mesaj), "%s kapýyý kýrmayý baþaramadý.", OyuncuIsim(playerid));
			cmd_ado(playerid, mesaj);
		}
		default:
		{
		    EvBilgi[id][evDurum] = 5;
		    Ev_Yenile(id);
			cmd_ado(playerid, "Evin kapýsý kýrýlmýþtýr.");
		}
	}
	return 1;
}

public KapiKir_Isyeri(playerid, id)
{
	static mesaj[128];
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS || Isyeri_Yakin(playerid) != id)
	    return 0;

	switch (random(6))
	{
	    case 0..2:
	    {
			format(mesaj, sizeof(mesaj), "Kapý kýrma iþlemi baþarýsýz oldu, %s dengesini kaybederek yere düþtü.", OyuncuIsim(playerid));
			cmd_ado(playerid, mesaj);
		}
		default:
		{
		    IsyeriBilgi[id][isyeriDurum] = 1;
		    Isyeri_Yenile(id);
			cmd_ado(playerid, "Ýþyerinin kapýsý kýrýlmýþtýr.");
		}
	}
	return 1;
}

public CezaArat(oyuncuid, aranan[])
{
	new bilgi[1024], sebep[64], tarih[36], rows, fields, sayi, miktar;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "%s adýna ödenmemiþ bir ceza yok.", aranan);

	bilgi[0] = 0, sayi = 0;
	strcat(bilgi, "Sebep\t\tTarih\t\t\t\tMiktar\n");
	for(new i = 0; i < rows; i ++) if(vericek_int(i, "cezaOdendi") == 0){
		sayi++;
		format(tarih, sizeof(tarih), "%s", vericek_varchar(i, "cezaTarih"));
		format(sebep, sizeof(sebep), "%s", vericek_varchar(i, "cezaSebep"));
		miktar = vericek_int(i, "cezaUcret");

		format(bilgi, sizeof(bilgi), "%s%s\t{FFFFFF}%s\t\t%s\n", bilgi, sebep, tarih, NumaraFormati(miktar));
	}
	if(!sayi) return HataMesaji(oyuncuid, "%s adýna ödenmemiþ bir ceza yok.", aranan);
	format(tarih, sizeof(tarih), "Ceza Kayýtlarý (%s)", vericek_varchar(0, "cezaSQL"));
	DialogGoster(oyuncuid, DIALOG_CEZA_KISISEL, DIALOG_STYLE_TABLIST_HEADERS, tarih, bilgi, "Öde", "Kapat");
	return 1;
}

public Arac_CezaOdeme(oyuncuid)
{
	new rows, fields, miktar;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Bir hata oluþtu tekrar deneyin.");

	miktar = vericek_int(0, "Ucret");
	if(OyuncuBilgi[oyuncuid][oPara] < miktar) return HataMesaji(oyuncuid, "Bu cezayý ödeyecek kadar paran yok.");

	ParaEkle(oyuncuid, -miktar);
	SunucuMesaji(oyuncuid, "Araca kesilmiþ %s miktarýndaki %s sebepli cezayý ödedin.", NumaraFormati(miktar), vericek_varchar(0, "Sebep"));
	new mysql[256];
	format(mysql, sizeof(mysql), "UPDATE `araccezalari` SET `Durum` = '1' WHERE `ID` = '%d'", vericek_int(0, "ID"));
	mysql_tquery(mysqlB, mysql);
	return 1;
}

public CezaOdeme(oyuncuid, odeme)
{
	new rows, fields, miktar;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Bir hata oluþtu tekrar deneyin.");

	if(odeme == 0) {
	    new bilgi[256];
		format(cezaodemesebep[oyuncuid], 96, "%s", vericek_varchar(0, "cezaSebep"));
		format(bilgi, sizeof(bilgi), "%s sebepli %s deðerindeki cezanýzý ödemeyi onaylýyor musunuz?", vericek_varchar(0, "cezaSebep"), NumaraFormati(vericek_int(0, "cezaUcret")));
		DialogGoster(oyuncuid, DIALOG_CEZA_KISISEL_ODE, DIALOG_STYLE_MSGBOX, "Ceza Ödeme Onay", bilgi, "Öde", "Ýptal");
	}
	else if(odeme == 1)
	{
		miktar = vericek_int(0, "cezaUcret");
		if(OyuncuBilgi[oyuncuid][oPara] < miktar) return HataMesaji(oyuncuid, "Bu cezayý ödeyecek kadar paran yok.");

		ParaEkle(oyuncuid, -miktar);
		SunucuMesaji(oyuncuid, "%s miktarýndaki %s sebepli cezaný ödedin.", NumaraFormati(miktar), vericek_varchar(0, "cezaSebep"));
		new mysql[256];
		format(mysql, sizeof(mysql), "UPDATE `cezalar` SET `cezaOdendi` = '1' WHERE `cezaSQL` = '%s' AND `cezaID` = '%d'", OyuncuIsim(oyuncuid), vericek_int(0, "cezaID"));
		mysql_tquery(mysqlB, mysql);
	}
	return 1;
}

public SilahEnvanter(oyuncuid)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Silah envanterin boþ.");

	new dialog_icerik[1024];
	for(new i = 0; i < rows; i ++) format(dialog_icerik, sizeof(dialog_icerik), "%s%d\t\t%s\n", dialog_icerik, vericek_int(i, "ID"), SilahIsim(vericek_int(i, "silahID")));
	DialogGoster(oyuncuid, DIALOG_SILAHENVANTER, DIALOG_STYLE_TABLIST, "vRP: Silah Envanteri", dialog_icerik, "Seç", "Kapat");
	return 1;
}

public CezaListele(oyuncuid, isim[])
{
	new bilgi[1024], sebep[64], tarih[36], rows, fields, sayi, odenmis, durum[24], miktar, memur[MAX_PLAYER_NAME];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "%s adýna kesilmiþ bir ceza yok.", isim);

	bilgi[0] = 0, sayi = 0, odenmis = 0;
	strcat(bilgi, "Sebep\t\tTarih\t\t\t\tMiktar\t\tDurum\tMemur\n");
	for(new i = 0; i < rows; i ++) {
		sayi++;
		format(tarih, sizeof(tarih), "%s", vericek_varchar(i, "cezaTarih"));
		format(sebep, sizeof(sebep), "%s", vericek_varchar(i, "cezaSebep"));
		format(memur, sizeof(memur), "%s", vericek_varchar(i, "cezaMemur"));
		odenmis = vericek_int(i, "cezaOdendi");
		miktar = vericek_int(i, "cezaUcret");

		format(durum, sizeof(durum), "%s", (odenmis == 1) ? ("{33AA33}Ödenmiþ") : ("{B70000}Ödenmemiþ"));
		format(bilgi, sizeof(bilgi), "%s%s\t{FFFFFF}%s\t\t%s\t\t%s\t\n", bilgi, sebep, tarih, NumaraFormati(miktar), durum, memur);
	}
	format(tarih, sizeof(tarih), "Ceza Kayýtlarý (%s)", isim);
	DialogGoster(oyuncuid, 0, DIALOG_STYLE_TABLIST_HEADERS, tarih, bilgi, "Kapat", "");
	return 1;
}

public KisiSorgula(oyuncu[], gosterilenid, secenek)
{
	new bilgi[2048], ekleme[2048], rows, fields, isim[MAX_PLAYER_NAME + 1];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) {
		switch(secenek) {
			case 0: HataMesaji(gosterilenid, "%s adlý kiþiye ait kayýt bulunamadý.", oyuncu);
			case 1: HataMesaji(gosterilenid, "Vatandaþlýk numarasýna ait kayýt bulunamadý. (%s)", oyuncu);
			case 2: HataMesaji(gosterilenid, "Telefon numarasýna ait kayýt bulunamadý. (%s)", oyuncu);
			case 3: HataMesaji(gosterilenid, "Hesap numarasýna ait kayýt bulunamadý. (%s)", oyuncu);
			default: HataMesaji(gosterilenid, "Bir sorun oluþtu.");
		}
		return 1;
	}
	bilgi[0] = 0;
	format(isim, sizeof(isim), "%s", vericek_varchar(0, "isim"));
	SetPVarString(gosterilenid, "kisisorgulamdc", isim);
	SetPVarInt(gosterilenid, "MDCSQLID", vericek_int(0, "ID"));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Konum Bul\t\t\n");
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Sicil Kaydý\t\t\n");
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Suç Ekle\t\t\n");
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Suç Sil\t\t\n");
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Ceza Ekle\t\t\n");
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Araçlar\t\t\n");
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Mülkler\t\t\n");
	strcat(bilgi, ekleme, sizeof(ekleme));
	for(new b = 0, len = strlen(isim); b < len; b ++) if(isim[b] == '_') isim[b] = ' ';
	format(ekleme, sizeof(ekleme), "{AFAFAF}Ad & Soyad:\t\t{FFFFFF}%s\n", isim);
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Doðum Yeri:\t\t{FFFFFF}%s\n", Kokenler[vericek_int(0, "DogumYeri")]);
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Cinsiyet:\t\t{FFFFFF}%s\n\n\n", (vericek_int(0, "Cinsiyet")) ? ("Erkek") : ("Kadýn"));
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Telefon Numarasý:\t{FFFFFF}%d\n", vericek_int(0, "TelefonNumarasi"));
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Vatandaþlýk NO:\t{FFFFFF}%d\n", vericek_int(0, "VatandaslikNo"));
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Sürücü Lisansý:\t\t\t{FFFFFF}%s\n", (vericek_bool(0, "Ehliyet") == 0) ? ("{B70000}Yok") : ("{33AA33}Mevcut"));
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Silah Ruhsatý:\t\t{FFFFFF}%s\n", (vericek_int(0, "Ruhsat") == 0) ? ("{B70000}Yok") : ("{33AA33}Mevcut"));
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "Kiþi Bilgileri (%s)", isim);
	DialogGoster(gosterilenid, DIALOG_MDC_KISISORGULA2, DIALOG_STYLE_TABLIST, ekleme, bilgi, "Geri", "Kapat");
	return 1;
}

public AranmaSorgula(oyuncu[], gosterilenid)
{
	new bilgi[1024], ekleyen[MAX_PLAYER_NAME + 1], tarih[36 + MAX_PLAYER_NAME], rows, fields, sayi, suc[144];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(gosterilenid, "%s adlý kiþinin aranma kaydý yok.", oyuncu);

	bilgi[0] = 0, sayi = 0;
	strcat(bilgi, "Tarih\tEkleyen\tSuç\n");
	for(new i = 0; i < rows; i ++) {
		sayi++;
		format(tarih, sizeof(tarih), "%s", vericek_varchar(i, "Tarih"));
		format(ekleyen, sizeof(ekleyen), "%s", vericek_varchar(i, "Memur"));
		format(suc, sizeof(suc), "%s", vericek_varchar(i, "Suc"));

		format(bilgi, sizeof(bilgi), "%s%s\t%s\t%s\t%s\n", bilgi, tarih, ekleyen, suc);
	}
	format(tarih, sizeof(tarih), "Aranma Kayýtlarý (%s - %d)", oyuncu, sayi);
	DialogGoster(gosterilenid, DIALOG_SUCKONTROL, DIALOG_STYLE_TABLIST_HEADERS, tarih, bilgi, "Geri", "Kapat");
	return 1;
}

public AranmaKayitlari(oyuncuid)
{
	new bilgi[1024], oyuncu[MAX_PLAYER_NAME + 1], rows, fields, sayi, tarih[36], bool:online = false;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Aranma kaydý yok.");

	bilgi[0] = 0, sayi = 0;
	strcat(bilgi, "Oyuncu\tAktif\n");
	for(new i = 0; i < rows; i ++) {
	    online = false;
        format(oyuncu, sizeof(oyuncu), "%s", vericek_varchar(i, "Oyuncu"));
		if(AktiflikKontrol(oyuncu) != INVALID_PLAYER_ID) { online = true; }
		if(strfind(bilgi, oyuncu) == -1) {
			 format(bilgi, sizeof(bilgi), "%s%s\t%s\n", bilgi, oyuncu, (online == false) ? ("{B70000}Hayýr") : ("{338833}Evet")), sayi++;
		}
	}
	if(sayi == 0) return HataMesaji(oyuncuid, "Aranma kaydý yok.");
	format(tarih, sizeof(tarih), "Arananlar Listesi (%d)", sayi);
	DialogGoster(oyuncuid, DIALOG_ARANMAKAYITLARI, DIALOG_STYLE_TABLIST_HEADERS, tarih, bilgi, "Detaylar", "Geri");
	return 1;
}

public BoloKayitlari(oyuncuid)
{
	new bilgi[2048], rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	bilgi[0] = 0;
	format(bilgi, sizeof(bilgi), "ID\tEkleyen\tTarih\nKayýt Ekle\n");
	for(new i = 0; i < rows; i ++) {
		format(bilgi, sizeof(bilgi), "%s%d\t%s\t%s\n", bilgi, vericek_int(i, "ID"), vericek_varchar(i, "Ekleyen"), vericek_varchar(i, "Tarih"));
	}
	DialogGoster(oyuncuid, DIALOG_BOLOKAYITLARI, DIALOG_STYLE_TABLIST_HEADERS, "Bolo", bilgi, "Detaylar", "Geri");
	return 1;
}

public BoloSorgula(gosterilenid)
{
	new bilgi[1024], ekleyen[MAX_PLAYER_NAME + 1], tarih[36], rows, fields, icerik[144];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(gosterilenid, "Bir sorun oluþtu.");

	bilgi[0] = 0;
	format(tarih, sizeof(tarih), "%s", vericek_varchar(0, "Tarih"));
	format(ekleyen, sizeof(ekleyen), "%s", vericek_varchar(0, "Ekleyen"));
	format(icerik, sizeof(icerik), "%s", vericek_varchar(0, "Detay"));

	format(bilgi, sizeof(bilgi), "%s{a9c4e4}Tarih: {FFFFFF}%s\n{a9c4e4}Ekleyen: {FFFFFF}%s\n\n{a9c4e4}Ýçerik: {FFFFFF}%s\n", bilgi, tarih, ekleyen, icerik);
	SetPVarInt(gosterilenid, "Bolo_ID", vericek_int(0, "ID"));
	DialogGoster(gosterilenid, DIALOG_BOLOICERIK, DIALOG_STYLE_MSGBOX, "Bolo - Ýçerik", bilgi, "<< Geri", "Sil");
	return 1;
}

public Avukat_SucTemizle(oyuncuid)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Bu oyuncunun sicil geçmiþi yok.");

	new tarih[36], isim[MAX_PLAYER_NAME + 1], bilgi[1024];
	bilgi[0] = 0;
	strcat(bilgi, "ID\tSebep\tTarih\tMemur\n");
	for(new i = 0; i < rows; i ++) {
		format(bilgi, sizeof(bilgi), "%s%d\t%s\t%s\t%s\n", bilgi, vericek_int(i, "id"), vericek_varchar(i, "Sebep"), vericek_varchar(i, "Tarih"), vericek_varchar(i, "Memur"));
	}
	format(isim, sizeof(isim), "%s", vericek_varchar(0, "Oyuncu"));
	for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
	format(tarih, sizeof(tarih), "Suç Temizleme - %s", isim);
	DialogGoster(oyuncuid, DIALOG_SUCTEMIZLE_SECIM, DIALOG_STYLE_TABLIST_HEADERS, tarih, bilgi, "Seç", "Kapat");
	return 1;
}

public Sicil_Kontrol(oyuncuid)
{
	new rows, fields, tarih[36], isim[MAX_PLAYER_NAME + 1], bilgi[1024];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Bu oyuncunun sicil geçmiþi yok."), cmd_mdc(oyuncuid, "\1");

	bilgi[0] = 0;
	strcat(bilgi, "Sebep\tTarih\tMemur\n");
	for(new i = 0; i < rows; i ++) {
		format(bilgi, sizeof(bilgi), "%s%s\t%s\t%s\n", bilgi, vericek_varchar(i, "Sebep"), vericek_varchar(i, "Tarih"), vericek_varchar(i, "Memur"));
	}
	format(isim, sizeof(isim), "%s", vericek_varchar(0, "Oyuncu"));
	for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
	format(tarih, sizeof(tarih), "Sicil Geçmiþi - %s", isim);
	DialogGoster(oyuncuid, DIALOG_SICIL_KONTROL, DIALOG_STYLE_TABLIST_HEADERS, tarih, bilgi, "<< Geri", "Kapat");
	return 1;
}

public Kiyafet_Duzelt(oyuncuid)
{
	switch(OyuncuBilgi[oyuncuid][oGeciciKiyafet]) {
		case 0: KiyafetDegistir(oyuncuid, OyuncuBilgi[oyuncuid][oKiyafet]);
		default: KiyafetDegistir(oyuncuid, OyuncuBilgi[oyuncuid][oGeciciKiyafet]);
	}
	if(OyuncuBilgi[oyuncuid][oYarali] == 0) {
		ClearAnimations(oyuncuid);
		TogglePlayerControllable(oyuncuid, true);
	}
	if(OyuncuBilgi[oyuncuid][oYaraliSure] > 0) {
		TogglePlayerControllable(oyuncuid, false);
        ApplyAnimation(oyuncuid, "WUZI", "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 0);
	}
	if(OyuncuBilgi[oyuncuid][oPaintball] != -1) Paintball_Arena(oyuncuid);
	return 1;
}

public Yat_Yenile()
{
	if(YatBilgi[yatKiralayan] != -1)
	{
	    if(YatBilgi[yatTeslimSure] > 0)
	    {
	        YatBilgi[yatTeslimSure]--;
         	new Float:x, Float:y, Float:z;
          	GetObjectPos(YatBilgi[yatObject],x,y,z);
           	new id = SQL_AktiflikKontrol(YatBilgi[yatKiralayan]);
            if(GetDistanceBetweenPoints(x, y, z, 134.063171, -1829.491333, 4.759999) < 30.0)
            {
            	YatBilgi[yatKiralayan] = -1;
             	YatBilgi[yatKiraSure] = 0;
              	YatBilgi[yatOto] = 0;
               	YatBilgi[yatStep] = 0;
                YatBilgi[yatUyari] = 0;
                YatBilgi[yatTeslimSure] = 0;
                StopObject(YatBilgi[yatObject]);
                SetObjectPos(YatBilgi[yatObject], 134.063171, -1829.491333, 4.759999);
                SetObjectRot(YatBilgi[yatObject], 0.000000, 0.000000, 183.149398);
                if(id != -1 && OyuncuBilgi[id][oYatKontrol][0] == 1)
                {
                	new Float:yatX, Float:yatY, Float:yatZ;
                	OyuncuBilgi[id][oYatKontrol][0] = 0;
                	TogglePlayerSpectating(id, false);
                	GetObjectPos(YatBilgi[yatObject], yatX, yatY, yatZ);
                	OyuncuPosDegistir(id, yatX, yatY, yatZ+3);
                	SetPlayerInterior(id, 0);
                	SetPlayerVirtualWorld(id, 0);
                	SilahAyarla(id);
                }
            }
            else
            {
                if(YatBilgi[yatTeslimSure] <= 0)
                {
	             	YatBilgi[yatKiraSure] = 0;
	              	YatBilgi[yatOto] = 0;
	               	YatBilgi[yatStep] = 0;
	                YatBilgi[yatUyari] = 0;
	                YatBilgi[yatTeslimSure] = 0;
	                StopObject(YatBilgi[yatObject]);
	                SetObjectPos(YatBilgi[yatObject], 134.063171, -1829.491333, 4.759999);
	                SetObjectRot(YatBilgi[yatObject], 0.000000, 0.000000, 183.149398);
	                if(id != -1)
	                {
	                    ParaEkle(id, -YAT_UCRET / 2);
	                    if(OyuncuBilgi[id][oYatKontrol][0] == 1)
                		{
		                	new Float:yatX, Float:yatY, Float:yatZ;
		                	OyuncuBilgi[id][oYatKontrol][0] = 0;
		                	TogglePlayerSpectating(id, false);
		                	GetObjectPos(YatBilgi[yatObject], yatX, yatY, yatZ);
		                	OyuncuPosDegistir(id, yatX, yatY, yatZ+3);
		                	SetPlayerInterior(id, 0);
		                	SetPlayerVirtualWorld(id, 0);
		                	SilahAyarla(id);
                		}
	                    SunucuMesaji(id, "Yatý kira süresi bitiminden önce teslim edemedin, %s para cezasýna çarptýrýldýn.", NumaraFormati(YAT_UCRET / 2));
	                }
	                else
	                {
	                    OfflineParaVer(YatBilgi[yatKiralayan], -YAT_UCRET / 2);
						new sorgu[256], Cache:sorgu_cache, kiraci_isim[32];
						format(sorgu, sizeof(sorgu), "SELECT `isim` FROM `oyuncular` WHERE `ID` = '%d'", YatBilgi[yatKiralayan]);
						sorgu_cache = mysql_query(mysqlB, sorgu);
						if(cache_num_rows()) format(kiraci_isim, sizeof(kiraci_isim), "%s", vericek_varchar(0, "isim"));
						cache_delete(sorgu_cache);
						format(sorgu, sizeof(sorgu), "Yatýnýzýn kira süresi bittiði için ve yatý teslim etmediðiniz için %s para cezasý kesildi.", NumaraFormati(YAT_UCRET / 2));
						format(sorgu, sizeof(sorgu), "INSERT INTO `bildirimler` (`Eklenen`,`Sebep`, `Tarih`, `Ekleyen`) VALUES ('%s', '%s', '%s', '%s')", kiraci_isim, sorgu, Tarih(), "Viga Roleplay");
						mysql_query(mysqlB, sorgu);
	                }
	                YatBilgi[yatKiralayan] = -1;
                }
            }
	    }
	    if(YatBilgi[yatKiraSure] > 0)
	    {
	        YatBilgi[yatKiraSure]--;
	        if(YatBilgi[yatKiraSure] == 600 && YatBilgi[yatUyari] == 0)
	        {
	            new id = SQL_AktiflikKontrol(YatBilgi[yatKiralayan]);
	            if(id != -1)
	            {
	            	YatBilgi[yatUyari] = 1;
	            	SunucuMesaji(id, "Yat kiranýn süresi bitmek üzere, son 10 dakikan var. /yat menüsü üzerinden uzatabilir ya da yatý geri götürebilirsin.");
	            	SunucuMesaji(id, "Kira süresi bittikten sonra 5 dakika içerisinde yatý geri teslim etmezsen %s para cezasý kesilir.", NumaraFormati(YAT_UCRET / 2));
	            }
	        }
	        else if(YatBilgi[yatKiraSure] <= 0)
	        {
	            new Float:x, Float:y, Float:z;
	            GetObjectPos(YatBilgi[yatObject], x, y, z);
	            new id = SQL_AktiflikKontrol(YatBilgi[yatKiralayan]);
	            if(GetDistanceBetweenPoints(x, y, z, 134.063171, -1829.491333, 4.759999) < 30.0)
	            {
	                YatBilgi[yatKiralayan] = -1;
	                YatBilgi[yatKiraSure] = 0;
	                YatBilgi[yatOto] = 0;
	                YatBilgi[yatStep] = 0;
	                YatBilgi[yatUyari] = 0;
	                YatBilgi[yatTeslimSure] = 0;
	                StopObject(YatBilgi[yatObject]);
	                SetObjectPos(YatBilgi[yatObject], 134.063171, -1829.491333, 4.759999);
	                SetObjectRot(YatBilgi[yatObject], 0.000000, 0.000000, 183.149398);
	                if(OyuncuBilgi[id][oYatKontrol][0] == 1)
	                {
	                    new Float:yatX, Float:yatY, Float:yatZ;
	                	OyuncuBilgi[id][oYatKontrol][0] = 0;
	                	TogglePlayerSpectating(id, false);
	                	GetObjectPos(YatBilgi[yatObject], yatX, yatY, yatZ);
	                	OyuncuPosDegistir(id, yatX, yatY, yatZ+3);
	                	SetPlayerInterior(id, 0);
	                	SetPlayerVirtualWorld(id, 0);
	                	SilahAyarla(id);
	                }
	            }
	            else
	            {
	                YatBilgi[yatTeslimSure] = 300;
	                if(id != -1)
	                {
	                    SunucuMesaji(id, "Yatýnýzýn kira süresi doldu, 5 dakika içerisinde teslim etmezsen %s para cezasý kesilecek.", NumaraFormati(YAT_UCRET / 2));
	                }
	            }
	        }
	    }
	}
	return 1;
}

public Pet_Yenile()
{
	foreach(new i : Petler)
	{
	    if(PetBilgi[i][petDurum] == true)
	    {
			new pet_renkkodu[32], renk, pet_label[144];
			switch(PetBilgi[i][petRenk])
			{
				case 1: pet_renkkodu = "FFFFFF";
				case 2: pet_renkkodu = "0295f7";
				case 3: pet_renkkodu = "f70202";
				case 4: pet_renkkodu = "f77002";
				case 5: pet_renkkodu = "ffff00";
				case 6: pet_renkkodu = "ee00ff";
				case 7: pet_renkkodu = "2aff00";
			}
			if(FCNPC_GetHealth(PetBilgi[i][NPCID]) >= 75) renk = 0x33AA33FF;
			else if(FCNPC_GetHealth(PetBilgi[i][NPCID]) >= 50 && FCNPC_GetHealth(PetBilgi[i][NPCID]) < 75) renk = 0xFFF700FF;
			else if(FCNPC_GetHealth(PetBilgi[i][NPCID]) >= 25 && FCNPC_GetHealth(PetBilgi[i][NPCID]) < 50) renk = 0xFF8000FF;
			else if(FCNPC_GetHealth(PetBilgi[i][NPCID]) <= 25) renk = 0xE70E0EFF;
			format(pet_label, sizeof(pet_label), "{%s}%s (#%d)\n{%06x}%s%.0f", pet_renkkodu, PetBilgi[i][petAdi], i, renk >>> 8, "%", FCNPC_GetHealth(PetBilgi[i][NPCID]));
			if(IsValidDynamic3DTextLabel(PetBilgi[i][petText])) UpdateDynamic3DTextLabelText(PetBilgi[i][petText], -1, pet_label);

			if(PetBilgi[i][petTakip] != -1 && IsPlayerConnected(PetBilgi[i][petTakip]) && !IsPlayerInWater(PetBilgi[i][petTakip]) && !IsPlayerInAnyVehicle(PetBilgi[i][petTakip]) && GetPlayerInterior(PetBilgi[i][petTakip]) == FCNPC_GetInterior(PetBilgi[i][NPCID]) && GetPlayerVirtualWorld(PetBilgi[i][petTakip]) == FCNPC_GetVirtualWorld(PetBilgi[i][NPCID]))
			{
			    new Float:pos[3];
			    FCNPC_GetPosition(PetBilgi[i][NPCID], pos[0], pos[1], pos[2]);
			    FCNPC_StopAttack(PetBilgi[i][NPCID]);
			    if(GetPlayerDistanceFromPoint(PetBilgi[i][petTakip], pos[0], pos[1], pos[2]) >= 20)
			    {
			        PetBilgi[i][petTakip] = -1;
			        PetBilgi[i][petSaldir] = -1;
			        FCNPC_Stop(PetBilgi[i][NPCID]);
			        FCNPC_StopAttack(PetBilgi[i][NPCID]);
			    }
			    if(GetPlayerDistanceFromPoint(PetBilgi[i][petTakip], pos[0], pos[1], pos[2]) >= 1 && GetPlayerDistanceFromPoint(PetBilgi[i][petTakip], pos[0], pos[1], pos[2]) <= 20)
			    {
			        FCNPC_StopAttack(PetBilgi[i][NPCID]);
					FCNPC_GoToPlayer(PetBilgi[i][NPCID], PetBilgi[i][petTakip]);
			    }
			    if(GetPlayerDistanceFromPoint(PetBilgi[i][petTakip], pos[0], pos[1], pos[2]) < 1 && PetBilgi[i][petSaldir] != -1)
			    {
			        FCNPC_MeleeAttack(PetBilgi[i][NPCID], -1, true);
				}

			}
			PetBilgi[i][petAcikma]++;
			if(PetBilgi[i][petAcikma] >= 360 && PetBilgi[i][petAclik] > 0)
			{
			    PetBilgi[i][petAcikma] = 0;
			    PetBilgi[i][petAclik] -= 3;
			    if(PetBilgi[i][petAclik] < 0) PetBilgi[i][petAclik] = 0;
			}
	    }
	}
	return 1;
}

public Pet_Kaldir(id)
{
	PetBilgi[id][petSaglik] = 100.0;
    FCNPC_Destroy(PetBilgi[id][NPCID]);
    PetBilgi[id][petTakip] = -1;
    PetBilgi[id][NPCID] = -1;
    PetBilgi[id][petDurum] = false;
    if(IsValidDynamic3DTextLabel(PetBilgi[id][petText])) DestroyDynamic3DTextLabel(PetBilgi[id][petText]), PetBilgi[id][petText] = Text3D:INVALID_3DTEXT_ID;
	return 1;
}

public KonusmaAnimDurdur(oyuncuid) return ApplyAnimation(oyuncuid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);

public AramaKayitlari(oyuncuid)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Telefonunda arama kaydý bulamadýk.");

	new kayit_icerik[1024], arayan_numara = 0, arayan_isim[64], arama_tur[36];
	format(kayit_icerik, sizeof(kayit_icerik), "Arayan\tArama Turu\tTarih\n");
	for(new i = 0; i < rows; i ++) {
	    arayan_numara = vericek_int(i, "karsiNumara");
		if(arayan_numara != 0) {
			format(arayan_isim, sizeof(arayan_isim), "%d", arayan_numara);
			for(new r = 0; r != MAKSIMUM_REHBER_SAYI; r ++) if(RehberBilgi[oyuncuid][r][rehberKullanimda] && RehberBilgi[oyuncuid][r][rehberNumara] == arayan_numara)
				format(arayan_isim, sizeof(arayan_isim), "%s", RehberBilgi[oyuncuid][r][rehberIsim]);
		}
		else if(arayan_numara == 0) format(arayan_isim, sizeof(arayan_isim), "Gizli Numara");
		switch(vericek_int(i, "kayitTur")) {
			case TELEFON_GIDEN: format(arama_tur, sizeof(arama_tur), "Giden Arama");
			case TELEFON_GELEN: format(arama_tur, sizeof(arama_tur), "Gelen Arama");
			case TELEFON_CEVAPSIZ: format(arama_tur, sizeof(arama_tur), "Cevapsýz Arama");
		}
		format(kayit_icerik, sizeof(kayit_icerik), "%s%s\t%s\t%s\n", kayit_icerik, arayan_isim, arama_tur, vericek_varchar(i, "kayitTarih"));
	}
	DialogGoster(oyuncuid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Arama Kayýtlarý", kayit_icerik, "Kapat", "");
	return 1;
}

stock RandomEx(min, max)
	return random(max - min) + min;

stock Kayit_Olustur(kayitid, oyuncuid, tur)
{
	if(!IsPlayerConnected(kayitid) || !IsPlayerConnected(oyuncuid)) return 0;
	new sorgu[512], karsi_numara = OyuncuBilgi[oyuncuid][oTelefonNumarasi];
	if(OyuncuBilgi[oyuncuid][oGizliNumara] == true) karsi_numara = 0;
	format(sorgu, sizeof(sorgu), "INSERT INTO `aramakayitlari` (`gelenNumara`, `karsiNumara`, `kayitTur`, `kayitTarih`) VALUES ('%d', '%d', '%d', '%s')", OyuncuBilgi[kayitid][oTelefonNumarasi], karsi_numara, tur, SQL_ReturnEscaped(Tarih()));
	mysql_query(mysqlB, sorgu);
	return 1;
}

stock Pet_Kaydet(id)
{
	new pet_sorgu[1024];
	format(pet_sorgu, sizeof(pet_sorgu), "UPDATE `petler` SET `petadi` = '%s', `petsahip` = '%d', `petturu` = '%d', `petcinsiyet` = '%d', `petrenk` = '%d', `petaclik` = '%d', `petsaglik` = '%.1f', `petyarali` = '%d' WHERE `petid` = '%d'",
		PetBilgi[id][petAdi],
		PetBilgi[id][petSahip],
		PetBilgi[id][petTuru],
		PetBilgi[id][petCinsiyet],
		PetBilgi[id][petRenk],
		PetBilgi[id][petAclik],
		(PetBilgi[id][petDurum] == true) ? (FCNPC_GetHealth(PetBilgi[id][NPCID])) : (PetBilgi[id][petSaglik]),
		PetBilgi[id][petYarali],
		PetBilgi[id][petID]
	);
	mysql_query(mysqlB, pet_sorgu, false);
	return 1;
}

stock Pet_Sil(id)
{
	new pet_sorgu[64];
	format(pet_sorgu, sizeof(pet_sorgu), "DELETE FROM `petler` WHERE `petid` = '%d'", PetBilgi[id][petID]);
	mysql_query(mysqlB, pet_sorgu, false);
	FCNPC_Destroy(PetBilgi[id][NPCID]);
 	if(IsValidDynamic3DTextLabel(PetBilgi[id][petText])) DestroyDynamic3DTextLabel(PetBilgi[id][petText]), PetBilgi[id][petText] = Text3D:INVALID_3DTEXT_ID;
	PetBilgi[id][petID] = 0;
	PetBilgi[id][NPCID] = -1;
	format(PetBilgi[id][petAdi], 24, "Yok");
	PetBilgi[id][petSahip] = -1;
	PetBilgi[id][petTuru] = 0;
	PetBilgi[id][petCinsiyet] = 0;
	PetBilgi[id][petRenk] = 0;
	PetBilgi[id][petAclik] = 0;
	PetBilgi[id][petSaglik] = 0.0;
	PetBilgi[id][petTakip] = -1;
	PetBilgi[id][petYarali] = 0;
	PetBilgi[id][petDurum] = false;
	PetBilgi[id][petSaldir] = -1;
	PetBilgi[id][petAcikma] = 0;
	Iter_Remove(Petler, id);
	return 1;
}

stock PetYakin(playerid, Float:radius)
{
	foreach(new i : Petler) if(PetBilgi[i][petDurum] == true)
	{
	    new Float:pos[3];
	    FCNPC_GetPosition(PetBilgi[i][NPCID], pos[0], pos[1], pos[2]);
	    if(IsPlayerInRangeOfPoint(playerid, radius, pos[0], pos[1], pos[2]) && PetBilgi[i][petSahip] == OyuncuBilgi[playerid][oID] && FCNPC_GetVirtualWorld(PetBilgi[i][NPCID]) == GetPlayerVirtualWorld(playerid))
			return i;
	}
	return -1;
}

stock PetDialog(playerid, id)
{
	new str[750], string[124], petrenk[20], petrenkkod[10];
	switch(PetBilgi[id][petRenk])
	{
	    case 1: petrenk = "Beyaz", petrenkkod = "FFFFFF";
	    case 2: petrenk = "Mavi", petrenkkod = "0295f7";
	    case 3: petrenk = "Kýrmýzý", petrenkkod = "f70202";
	    case 4: petrenk = "Turuncu", petrenkkod = "f77002";
	    case 5: petrenk = "Sarý", petrenkkod = "ffff00";
	    case 6: petrenk = "Mor", petrenkkod = "ee00ff";
	    case 7: petrenk = "Yeþil", petrenkkod = "2aff00";
	}
	strcat(str, "Ýþlem\tDurum\n");
	format(string, sizeof(string), "{FFFFFF}Pet Adý\t{AFAFAF}%s\n", PetBilgi[id][petAdi]);
	strcat(str, string);
	format(string, sizeof(string), "{FFFFFF}Pet Ýsim Rengi\t{%s}%s\n", petrenkkod, petrenk);
	strcat(str, string);
	format(string, sizeof(string), "{FFFFFF}Pet Türü\t{AFAFAF}%s\n", PetTurIsim(PetBilgi[id][petTuru]));
	strcat(str, string);
	format(string, sizeof(string), "{FFFFFF}Pet Cinsiyeti\t{AFAFAF}%s\n", (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadýn"));
	strcat(str, string);
	format(string, sizeof(string), "{FFFFFF}Pet Açlýk\t{AFAFAF}%d\n", PetBilgi[id][petAclik]);
	strcat(str, string);
	format(string, sizeof(string), "{FFFFFF}Pet Saðlýk\t{AFAFAF}%.0f\n", FCNPC_GetHealth(PetBilgi[id][NPCID]));
	strcat(str, string);
	format(string, sizeof(string), "{FFFFFF}Pet Moduna Geç\n");
	strcat(str, string);
	format(string, sizeof(string), "{FFFFFF}Pet Takip Modu\t{AFAFAF}%s\n", (PetBilgi[id][petTakip] == -1) ? ("{ff0000}Kapalý") : ("{26ff00}Açýk"));
	strcat(str, string);
	format(string, sizeof(string), "{FFFFFF}Peti Besle\t{33aa33}$250\n");
	strcat(str, string);
	format(string, sizeof(string), "{FFFFFF}Peti Ýyileþtir\t{33aa33}%s", NumaraFormati(floatround(100-FCNPC_GetHealth(PetBilgi[id][NPCID])) * 6));
	strcat(str, string);

	format(string, sizeof(string), "{FFFFFF}%s (ID: %d)", PetBilgi[id][petAdi], id);
	SetPVarInt(playerid, "PetID", id);
	DialogGoster(playerid, DIALOG_PET, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Seç", "Kapat");
	return 1;
}
stock Pet_Olustur(sahip, turu, cinsiyet)
{
	for(new i; i<MAKSIMUM_PET; i++)
	{
	    if(!Iter_Contains(Petler, i))
	    {
	        format(PetBilgi[i][petAdi], 24, "Belirsiz");
	        PetBilgi[i][petSahip] = sahip;
	        PetBilgi[i][petTuru] = turu;
	        PetBilgi[i][petCinsiyet] = cinsiyet;
	        PetBilgi[i][petRenk] = 3;
	        PetBilgi[i][petAclik] = 100;
	        PetBilgi[i][petSaglik] = 100.0;
	        PetBilgi[i][petTakip] = -1;
	        PetBilgi[i][petDurum] = false;
	        PetBilgi[i][petSaldir] = -1;
	        Iter_Add(Petler, i);
	        new query[200];
	        format(query, sizeof(query), "INSERT INTO `petler` (`petadi`, `petsahip`, `petturu`, `petcinsiyet`, `petrenk`, `petaclik`, `petsaglik`) VALUES ('Belirsiz', '%d', '%d', '%d', '3', '100', '100.0')", sahip, turu, cinsiyet);
	        mysql_query(mysqlB, query);
	        PetBilgi[i][petID] = cache_insert_id();
	        return i;
	    }
	}
	return -1;
}

stock PetTurIsim(tur)
{
	new isim[20];
	isim = "Yok";
	switch(tur)
	{
	    case 1: isim = "Black Pitbull";
	    case 2: isim = "Boxer Dog";
	    case 3: isim = "Brown Pitbull";
	    case 4: isim = "Bull Terrier";
	    case 5: isim = "Dalmation";
	    case 6: isim = "Doberman";
	    case 7: isim = "European Shepherd";
	    case 8: isim = "German Shorthair";
	    case 9: isim = "Gray Pitbull";
	    case 10: isim = "Siberian Husky";
	    case 11: isim = "White Pitbull";
	}
	return isim;
}

stock PetTurSkin(tur)
{
	new skin;
	switch(tur)
	{
	    case 1: skin = 23001;
	    case 2: skin = 23002;
	    case 3: skin = 23003;
	    case 4: skin = 23004;
	    case 5: skin = 23005;
	    case 6: skin = 23006;
	    case 7: skin = 23007;
	    case 8: skin = 23008;
	    case 9: skin = 23009;
	    case 10: skin = 23010;
	    case 11: skin = 23011;
	    default: skin = 23001;
	}
	return skin;
}

stock GetMoveDirectionFromKeys(ud, lr)
{
	new direction = 0;

    if(lr < 0)
	{
		if(ud < 0) 		direction = MOVE_FORWARD_LEFT; 	// Up & Left key pressed
		else if(ud > 0) direction = MOVE_BACK_LEFT; 	// Back & Left key pressed
		else            direction = MOVE_LEFT;          // Left key pressed
	}
	else if(lr > 0) 	// Right pressed
	{
		if(ud < 0)      direction = MOVE_FORWARD_RIGHT;  // Up & Right key pressed
		else if(ud > 0) direction = MOVE_BACK_RIGHT;     // Back & Right key pressed
		else			direction = MOVE_RIGHT;          // Right key pressed
	}
	else if(ud < 0) 	direction = MOVE_FORWARD; 	// Up key pressed
	else if(ud > 0) 	direction = MOVE_BACK;		// Down key pressed

	return direction;
}

stock YatSur(playerid)
{
	new Float:pos[3], Float:rot[3];
	GetObjectPos(YatBilgi[yatObject], pos[0], pos[1], pos[2]);
	GetObjectRot(YatBilgi[yatObject], rot[0], rot[1], rot[2]);
	switch(OyuncuBilgi[playerid][oYatKontrol][1])
	{
	    case MOVE_FORWARD:
	    {
	        pos[0] += (1 * floatsin(-rot[2], degrees));
			pos[1] += (1 * floatcos(-rot[2], degrees));
	        MoveObject(YatBilgi[yatObject], pos[0], pos[1], pos[2], 6, rot[0], rot[1], rot[2]);
	    }
	    case MOVE_BACK:
	    {
	        pos[0] += (1 * floatsin(-rot[2]+180, degrees));
			pos[1] += (1 * floatcos(-rot[2]+180, degrees));
	        MoveObject(YatBilgi[yatObject], pos[0], pos[1], pos[2], 6, rot[0], rot[1], rot[2]);
	    }
     	case MOVE_FORWARD_LEFT:
	    {
	        pos[0] += (1 * floatsin(-rot[2], degrees));
			pos[1] += (1 * floatcos(-rot[2], degrees));
			rot[2] += 0.5;
			MoveObject(YatBilgi[yatObject], pos[0], pos[1], pos[2], 6, rot[0], rot[1], rot[2]);
	    }
	    case MOVE_FORWARD_RIGHT:
	    {
	        pos[0] += (1 * floatsin(-rot[2], degrees));
			pos[1] += (1 * floatcos(-rot[2], degrees));
			rot[2] -= 0.5;
			MoveObject(YatBilgi[yatObject], pos[0], pos[1], pos[2], 6, rot[0], rot[1], rot[2]);
	    }
	    case MOVE_BACK_LEFT:
	    {
	        pos[0] += (1 * floatsin(-rot[2]+180, degrees));
			pos[1] += (1 * floatcos(-rot[2]+180, degrees));
			rot[2] -= 0.5;
	        MoveObject(YatBilgi[yatObject], pos[0], pos[1], pos[2], 6, rot[0], rot[1], rot[2]);
	    }
	    case MOVE_BACK_RIGHT:
	    {
	        pos[0] += (1 * floatsin(-rot[2]+180, degrees));
			pos[1] += (1 * floatcos(-rot[2]+180, degrees));
			rot[2] += 0.5;
	        MoveObject(YatBilgi[yatObject], pos[0], pos[1], pos[2], 6, rot[0], rot[1], rot[2]);
	    }
	}
	OyuncuBilgi[playerid][oYatKontrol][2] = GetTickCount();
	return 1;
}

stock MadenPosYakin(oyuncuid)
{
	if(!IsPlayerConnected(oyuncuid)) return 0;

	for(new i = 0; i < sizeof(MadenciPos); i++) if(IsPlayerInRangeOfPoint(oyuncuid, 1.0, MadenciPos[i][madenciPosX], MadenciPos[i][madenciPosY], MadenciPos[i][madenciPosZ])) return 1;
	return 0;
}

stock BalikPosYakin(oyuncuid)
{
	if(!IsPlayerConnected(oyuncuid)) return 0;

	for(new i = 0; i < sizeof(BalikTutPos); i++) if(IsPlayerInRangeOfPoint(oyuncuid, 1.0, BalikTutPos[i][balikPosX], BalikTutPos[i][balikPosY], BalikTutPos[i][balikPosZ])) return 1;
	return 0;
}

stock IsPlayerInInvalidNosVehicle(playerid)
{
	switch(GetVehicleModel(GetPlayerVehicleID(playerid))) {
		case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449: return 1;
	}
	return 0;
}

stock ConvertTime(sure)
{
    new gun, saat, dakika, saniye, string[64];
    gun = sure / 86400;
    saat = (sure / 3600) - (gun * 24);
    dakika = (sure / 60) - (gun * 1440) - (saat * 60);
    saniye = sure % 60;
    format(string, sizeof(string), "%d gün %d saat %d dakika %d saniye", gun, saat, dakika, saniye);
    return string;
}

stock IsimLabelGuncelle(oyuncuid)
{
	if(!IsPlayerConnected(oyuncuid)) return 0;
	new labelduzenle[128], oyuncu_can[96];
	if(IsValidDynamic3DTextLabel(OyuncuBilgi[oyuncuid][oApolet])) {
	    if(OyuncuBilgi[oyuncuid][oAdminDurum] == true) format(labelduzenle, sizeof(labelduzenle), "{%06x}[%s]", GetPlayerColor(oyuncuid) >>> 8, Admin_RutbeIsim(OyuncuBilgi[oyuncuid][oAdmin]));
        else if(OyuncuBilgi[oyuncuid][oEtkinlikDurum] == true) format(labelduzenle, sizeof(labelduzenle), "{1D7A39}[Etkinlikte]");
		else if(OyuncuBilgi[oyuncuid][oYaraliSure] > 0) format(labelduzenle, sizeof(labelduzenle), "{b80000}[Yaralý /hasarlar %d]", oyuncuid);
	    else if(OyuncuBilgi[oyuncuid][oYarali] > 0) format(labelduzenle, sizeof(labelduzenle), "{FF8282}[Yaralý]");
	    else if(OyuncuBilgi[oyuncuid][oKelepceli] > 0) format(labelduzenle, sizeof(labelduzenle), "{FF8282}[Kelepçeli]");
	    else if(OyuncuBilgi[oyuncuid][oBagli] == true) format(labelduzenle, sizeof(labelduzenle), "{FF8282}[Baðlanmýþ]");
	    else if(OyuncuBilgi[oyuncuid][oMeslekIsbasi] == true) format(labelduzenle, sizeof(labelduzenle), "{FF8282}[%s]", Meslek_LabelIsim(OyuncuBilgi[oyuncuid][oMeslek]));
	    else if(OyuncuBilgi[oyuncuid][oPaintball] != -1) format(labelduzenle, sizeof(labelduzenle), "{%06x}[Paintball]", RENK_PAINTBALL >>> 8);
	    else if(OyuncuBilgi[oyuncuid][oCK] > 0) format(labelduzenle, sizeof(labelduzenle), "{%06x}[CK olmuþ]", RENK_ACIKKIRMIZI >>> 8);
		//else if(OyuncuBilgi[oyuncuid][oIsbasi] == true && OyuncuBilgi[oyuncuid][oBirlik] > -1)  format(labelduzenle, sizeof(labelduzenle), "{%06x}[%s]", GetPlayerColor(oyuncuid) >>> 8, OyuncuRutbeAdi(oyuncuid));
        else if(OyuncuBilgi[oyuncuid][oUnlu] == 1 && OyuncuBilgi[oyuncuid][oMaskeDurum] == 0) format(labelduzenle, sizeof(labelduzenle), "{8e1983}[Ünlü]");
		else if(OyuncuBilgi[oyuncuid][oVIP] > 0 && OyuncuBilgi[oyuncuid][oVIPTag] == true) format(labelduzenle, sizeof(labelduzenle), "{40DFF0}(%s)", VIPIsim(oyuncuid));
		else format(labelduzenle, sizeof(labelduzenle), "");
        UpdateDynamic3DTextLabelText(OyuncuBilgi[oyuncuid][oApolet], 0xFFFFFFFF, labelduzenle);
	}
    if(IsValidDynamic3DTextLabel(OyuncuBilgi[oyuncuid][oIsimLabel])) {
        /*switch(OyuncuCan(oyuncuid)) {
            case 91..100: format(oyuncu_can, sizeof(oyuncu_can), "{B70000}||||||||||");
			case 81..90: format(oyuncu_can, sizeof(oyuncu_can), "{B70000}|||||||||{AFAFAF}|");
			case 71..80: format(oyuncu_can, sizeof(oyuncu_can), "{B70000}||||||||{AFAFAF}||");
			case 61..70: format(oyuncu_can, sizeof(oyuncu_can), "{B70000}|||||||{AFAFAF}|||");
			case 51..60: format(oyuncu_can, sizeof(oyuncu_can), "{B70000}||||||{AFAFAF}||||");
			case 41..50: format(oyuncu_can, sizeof(oyuncu_can), "{B70000}|||||{AFAFAF}|||||");
			case 31..40: format(oyuncu_can, sizeof(oyuncu_can), "{B70000}||||{AFAFAF}||||||");
			case 21..30: format(oyuncu_can, sizeof(oyuncu_can), "{B70000}|||{AFAFAF}|||||||");
			case 11..20: format(oyuncu_can, sizeof(oyuncu_can), "{B70000}||{AFAFAF}||||||||");
			case 0: format(oyuncu_can, sizeof(oyuncu_can), "{AFAFAF}||||||||||");
			default: format(oyuncu_can, sizeof(oyuncu_can), "{B70000}|{AFAFAF}|||||||||");
        }*/
        if(OyuncuBilgi[oyuncuid][oMaskeDurum] || OyuncuBilgi[oyuncuid][oAdminDurum] == true) format(labelduzenle, sizeof(labelduzenle), "{%06x}%s\n%s", GetPlayerColor(oyuncuid) >>> 8, OyuncuIsim(oyuncuid), oyuncu_can);
		else if(PetKontrol[oyuncuid] != -1) format(labelduzenle, sizeof(labelduzenle), "{%06x}%s\n{FFFFFF}Saðlýk: {b70000}%d", GetPlayerColor(oyuncuid) >>> 8, PetBilgi[PetKontrol[oyuncuid]][petAdi], OyuncuCan(oyuncuid));
		else format(labelduzenle, sizeof(labelduzenle), "{%06x}%s (%i)\n%s", GetPlayerColor(oyuncuid) >>> 8, OyuncuIsim(oyuncuid), oyuncuid, oyuncu_can);
		UpdateDynamic3DTextLabelText(OyuncuBilgi[oyuncuid][oIsimLabel], 0xFFFFFFFF, labelduzenle);
		return 1;
	}
	return 0;
}

stock KiyafetDegistir(oyuncuid, kiyafet)
{
	return SetPlayerSkin(oyuncuid, kiyafet);
}

stock SembolKontrol(icerik[])
{
	for(new i = 0, len = strlen(icerik); i < len; i++) {
	    if(icerik[i] == '!' || icerik[i] == '?' || icerik[i] == '@' || icerik[i] == '#' || icerik[i] == '&' || icerik[i] == '%' || icerik[i] == '$') return true;
	    if(icerik[i] == '[' || icerik[i] == ']' || icerik[i] == '(' || icerik[i] == ')' || icerik[i] == '_' || icerik[i] == '|' || icerik[i] == '.') return true;
	}
	return false;
}

stock Aksesuar_Sayi(oyuncuid)
{
	new sayi = 0;
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS - 3; i++) if(AksesuarListesi[oyuncuid][i][aksesuarModel] != 0) sayi++;
	return sayi;
}

stock Aksesuar_Ekle(oyuncuid, kemik, model)
{
	new sorgu[64];
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS - 3; i++) if(AksesuarListesi[oyuncuid][i][aksesuarModel] == 0) {

		AksesuarListesi[oyuncuid][i][aksesuarModel] = model;
		AksesuarListesi[oyuncuid][i][aksesuarKemik] = kemik;
		AksesuarListesi[oyuncuid][i][aksesuarKullanimda] = 1;
		AksesuarListesi[oyuncuid][i][aksesuarPos][0] = 0.0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][1] = 0.0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][2] = 0.0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][3] = 0.0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][4] = 0.0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][5] = 0.0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][6] = 1.0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][7] = 1.0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][8] = 1.0;

		SetPlayerAttachedObject(oyuncuid, i, model, kemik);

		format(sorgu, sizeof(sorgu), "INSERT INTO `aksesuarlar` (`Model`) VALUES(%d)", model);
		mysql_tquery(mysqlB, sorgu, "AksesuarYaratildi", "ii", oyuncuid, i);
		return i;
	}
	Aksesuar_Ayarla(oyuncuid);
	return -1;
}

stock Aksesuar_Ayarla(oyuncuid)
{
	new Float:pos[9];
	for(new i; i != MAX_PLAYER_ATTACHED_OBJECTS - 3; i++) if(AksesuarListesi[oyuncuid][i][aksesuarModel] != 0) {
        if(IsPlayerAttachedObjectSlotUsed(oyuncuid, i)) RemovePlayerAttachedObject(oyuncuid, i);

		if(AksesuarListesi[oyuncuid][i][aksesuarKullanimda] == 1) {
		    for(new p = 0; p != 9; p++) pos[p] = AksesuarListesi[oyuncuid][i][aksesuarPos][p];

			SetPlayerAttachedObject(oyuncuid, i, AksesuarListesi[oyuncuid][i][aksesuarModel], AksesuarListesi[oyuncuid][i][aksesuarKemik], pos[0], pos[1], pos[2], pos[3], pos[4], pos[5], pos[6], pos[7], pos[8]);
		}
	}
	return 1;
}

stock Aksesuar_Kaldir(playerid, id)
{
	if(AksesuarListesi[playerid][id][aksesuarID] > 0 && AksesuarListesi[playerid][id][aksesuarModel] != 0)
	{
	    new string[128];
		format(string, sizeof(string), "DELETE FROM `aksesuarlar` WHERE `ID` = '%d'", AksesuarListesi[playerid][id][aksesuarID]);
		mysql_tquery(mysqlB, string);

		AksesuarListesi[playerid][id][aksesuarModel] = 0;
		AksesuarListesi[playerid][id][aksesuarKullanimda] = 0;
		AksesuarListesi[playerid][id][aksesuarKemik] = 0;
		AksesuarListesi[playerid][id][aksesuarPos][0] = 0;
		AksesuarListesi[playerid][id][aksesuarPos][1] = 0;
		AksesuarListesi[playerid][id][aksesuarPos][2] = 0;
		AksesuarListesi[playerid][id][aksesuarPos][3] = 0;
		AksesuarListesi[playerid][id][aksesuarPos][4] = 0;
		AksesuarListesi[playerid][id][aksesuarPos][5] = 0;
		AksesuarListesi[playerid][id][aksesuarPos][6] = 0;
		AksesuarListesi[playerid][id][aksesuarPos][7] = 0;
		AksesuarListesi[playerid][id][aksesuarPos][8] = 0;
		AksesuarListesi[playerid][id][aksesuarID] = 0;
		if(IsPlayerAttachedObjectSlotUsed(playerid, id)) RemovePlayerAttachedObject(playerid, id);
	}
	return 1;
}

stock Olusum_AksesuarSil(oyuncuid)
{
	for(new c = 0; c != sizeof(PolisAksesuar); c++) {
		for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS - 3; i++) if(AksesuarListesi[oyuncuid][i][aksesuarModel] == PolisAksesuar[c][0]) {
		    Aksesuar_Kaldir(oyuncuid, i);
			if(IsPlayerAttachedObjectSlotUsed(oyuncuid, i)) RemovePlayerAttachedObject(oyuncuid, i);
			AksesuarListesi[oyuncuid][i][aksesuarModel] = 0;
		}
	}
	for(new c = 0; c != sizeof(MedikalAksesuar); c++) {
		for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS - 3; i++) if(AksesuarListesi[oyuncuid][i][aksesuarModel] == MedikalAksesuar[c][0]) {
		    Aksesuar_Kaldir(oyuncuid, i);
			if(IsPlayerAttachedObjectSlotUsed(oyuncuid, i)) RemovePlayerAttachedObject(oyuncuid, i);
			AksesuarListesi[oyuncuid][i][aksesuarModel] = 0;
		}
	}
	SunucuMesaji(oyuncuid, "Birliðine ait aksesuarlar sýfýrlandý.");
	return 1;
}

stock Aksesuar_Sifirla(oyuncuid)
{
	for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS - 3; i++) {
		AksesuarListesi[oyuncuid][i][aksesuarModel] = 0;
		AksesuarListesi[oyuncuid][i][aksesuarKullanimda] = 0;
		AksesuarListesi[oyuncuid][i][aksesuarKemik] = 0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][0] = 0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][1] = 0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][2] = 0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][3] = 0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][4] = 0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][5] = 0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][6] = 0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][7] = 0;
		AksesuarListesi[oyuncuid][i][aksesuarPos][8] = 0;
		AksesuarListesi[oyuncuid][i][aksesuarID] = 0;
		if(IsPlayerAttachedObjectSlotUsed(oyuncuid, i)) RemovePlayerAttachedObject(oyuncuid, i);
	}
	return 1;
}

stock Aksesuar_Kaydet(playerid)
{
    if(OyuncuBilgi[playerid][oGiris] == false) return 0;
    new sorgu[1280];
	for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS - 3; i++) if(AksesuarListesi[playerid][i][aksesuarModel] != 0) {
		format(sorgu, sizeof(sorgu), "UPDATE `aksesuarlar` SET `Model` = '%d', `Takili` = '%d', `Kemik` = '%d', `Pos1` = '%.4f', `Pos2` = '%.4f', `Pos3` = '%.4f', `Pos4` = '%.4f', `Pos5` = '%.4f', `Pos6` = '%.4f', `Pos7` = '%.4f', `Pos8` = '%.4f', `Pos9` = '%.4f', `Sahip` = '%d' WHERE `ID` = '%d'",
		    AksesuarListesi[playerid][i][aksesuarModel],
		    AksesuarListesi[playerid][i][aksesuarKullanimda],
		    AksesuarListesi[playerid][i][aksesuarKemik],
			AksesuarListesi[playerid][i][aksesuarPos][0],
			AksesuarListesi[playerid][i][aksesuarPos][1],
			AksesuarListesi[playerid][i][aksesuarPos][2],
			AksesuarListesi[playerid][i][aksesuarPos][3],
			AksesuarListesi[playerid][i][aksesuarPos][4],
			AksesuarListesi[playerid][i][aksesuarPos][5],
			AksesuarListesi[playerid][i][aksesuarPos][6],
			AksesuarListesi[playerid][i][aksesuarPos][7],
			AksesuarListesi[playerid][i][aksesuarPos][8],
			OyuncuBilgi[playerid][oID],
		    AksesuarListesi[playerid][i][aksesuarID]
		);
		mysql_tquery(mysqlB, sorgu);
	}
	return 1;
}

stock GetVehicleInfrontID(vehid)
{
    new Float: temp = 7.0, j = 0;
        foreach(new i : Vehicle)
        {
            new Float: a, Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2;
        	GetVehiclePos (vehid, x1, y1, z1);
        	GetVehicleZAngle (vehid, a);
                if(i != vehid)
                {
                        if(GetVehiclePos (i, x2, y2, z2))
                        {
                                new Float: distance = floatsqroot (floatpower ((x1 - x2), 2) + floatpower ((y1 - y2), 2) + floatpower ((z1 - z2), 2));
                                GetVehicleZAngle (vehid, a);

                                if(distance < 40.0)
                                {
                                x1 = x1 + (distance * floatsin(-a, degrees));
                                        y1 = y1 + (distance * floatcos(-a, degrees));

                                        distance = floatsqroot ((floatpower ((x1 - x2), 2)) + (floatpower ((y1 - y2), 2)));

                                        if(temp > distance)
                                        {
                                                temp = distance;
                                                j = i;
                                        }
                                }
                        }
                }
        }
        if(temp < 7.0) return j;
        return -1;
}

stock GirisDuzelt(oyuncuid)
{
	if(OyuncuYuklemeYapiyor[oyuncuid] == true) return false;
	if(OyuncuBilgi[oyuncuid][oGiris] == true) return false;

	TogglePlayerControllable(oyuncuid, false);
	OyuncuPosDegistir(oyuncuid, 841.8337, -3724.8364, 18.1219);
	SetPlayerFacingAngle(oyuncuid, 270.0);
	HileKontrol1(oyuncuid);

	//SetTimerEx("HileKontrol1", 600, 0, "i", oyuncuid);
	return 1;
}

stock SilahObjeBul(silahid) {
    new const silahmodelleri[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
    };
    if(1 <= silahid <= 46)
        return silahmodelleri[silahid];

	return 0;
}

stock IlkHarfBuyut(ch)
{
	if(ch == 'q') ch = 'Q';
	else if(ch == 'w') ch = 'W';
	else if(ch == 'e') ch = 'E';
	else if(ch == 'r') ch = 'R';
	else if(ch == 't') ch = 'T';
	else if(ch == 'y') ch = 'Y';
	else if(ch == 'u') ch = 'U';
	else if(ch == 'ý') ch = 'I';
	else if(ch == 'o') ch = 'O';
	else if(ch == 'p') ch = 'P';
	else if(ch == 'ð') ch = 'Ð';
	else if(ch == 'ü') ch = 'Ü';
	else if(ch == 'a') ch = 'A';
	else if(ch == 's') ch = 'S';
	else if(ch == 'd') ch = 'D';
	else if(ch == 'f') ch = 'F';
	else if(ch == 'g') ch = 'G';
	else if(ch == 'h') ch = 'H';
	else if(ch == 'j') ch = 'J';
	else if(ch == 'k') ch = 'K';
	else if(ch == 'l') ch = 'L';
	else if(ch == 'þ') ch = 'Þ';
	else if(ch == 'i') ch = 'Ý';
	else if(ch == 'z') ch = 'Z';
	else if(ch == 'x') ch = 'X';
	else if(ch == 'c') ch = 'C';
	else if(ch == 'v') ch = 'V';
	else if(ch == 'b') ch = 'B';
	else if(ch == 'n') ch = 'N';
	else if(ch == 'm') ch = 'M';
	else if(ch == 'ö') ch = 'Ö';
	else if(ch == 'ç') ch = 'Ç';
	return ch;
}

stock EhliyetTestiiptal(playerid)
{
	ASpawn(OyuncuBilgi[playerid][oSonBinilenArac]);
	OyuncuBilgi[playerid][oEhliyetTesti] = 0;
    OyuncuBilgi[playerid][oEhliyetUyari] = 0;
	DisablePlayerCheckpoint(playerid);
	OyuncuPosDegistir(playerid, 2045.4247, -1907.8870, 13.5469);
	SetPlayerFacingAngle(playerid, 270.0);
	return 1;
}

stock PlayerPlaySoundEx(playerid, sound)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player) if(IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
	    PlayerPlaySound(i, sound, x, y, z);
	}
	return 1;
}

stock CezaArat1(oyuncuid, aranan[])
{
	new sorgu[128];
	format(sorgu, sizeof(sorgu), "SELECT * FROM `cezalar` WHERE `cezaSQL` = '%s'", aranan);
	mysql_tquery(mysqlB, sorgu, "CezaArat", "ds", oyuncuid, aranan);
	return 1;
}

stock CezaOde(oyuncuid, ceza[], odeme)
{
	new sorgu[128];
	format(sorgu, sizeof(sorgu), "SELECT * FROM `cezalar` WHERE `cezaSQL` = '%s' AND `cezaSebep` = '%s'", OyuncuIsim(oyuncuid), ceza);
	mysql_tquery(mysqlB, sorgu, "CezaOdeme", "dd", oyuncuid, odeme);
	return 1;
}

stock CezaGoster(oyuncuid, isim[])
{
	new sorgu[128];
	format(sorgu, sizeof(sorgu), "SELECT * FROM `cezalar` WHERE `cezaSQL` = '%s'", isim);
	mysql_tquery(mysqlB, sorgu, "CezaListele", "ds", oyuncuid, isim);
	return 1;
}

stock ArananlarListesi(oyuncuid)
{
	new sorgu[144];
	format(sorgu, sizeof(sorgu), "SELECT * FROM `aranmakayitlari`");
	mysql_tquery(mysqlB, sorgu, "AranmaKayitlari", "d", oyuncuid);
	return 1;
}

stock BildirimListesi(oyuncuid)
{
	new sorgu[256], isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, isim, sizeof(isim));
	format(sorgu, sizeof(sorgu), "SELECT * FROM `bildirimler` WHERE `Eklenen` = '%s'", isim);
	mysql_tquery(mysqlB, sorgu, "BildirimKayitlari", "d", oyuncuid);
	return 1;
}

stock BoloListesi(oyuncuid)
{
	new sorgu[144 + MAX_PLAYER_NAME];
	format(sorgu, sizeof(sorgu), "SELECT * FROM `bolokayitlari`");
	mysql_tquery(mysqlB, sorgu, "BoloKayitlari", "d", oyuncuid);
	return 1;
}

stock NumaraSahibiBul(numara)
{
	foreach (new i : Player) if(OyuncuBilgi[i][oTelefonNumarasi] == numara && OyuncuBilgi[i][oTelefon] != 0) return i;
	return INVALID_PLAYER_ID;
}

stock Gise_Durum_Degistir(playerid, giseid)
{
	if(giseid != -1 && GiseBilgi[giseid][giseKullanimda])
	{
		switch(GiseBilgi[giseid][giseDurum]) {
			case 0: {
				GiseBilgi[giseid][giseDurum] = 1;
				ParaEkle(playerid, -GiseBilgi[giseid][giseUcret]);
				MoveDynamicObject(GiseBilgi[giseid][giseObje], GiseBilgi[giseid][giseAcilis][0], GiseBilgi[giseid][giseAcilis][1], GiseBilgi[giseid][giseAcilis][2], GiseBilgi[giseid][giseHiz], GiseBilgi[giseid][giseAcilis][3], GiseBilgi[giseid][giseAcilis][4], GiseBilgi[giseid][giseAcilis][5]);
            	SetTimerEx("Gise_Kapat", 3500, false, "d", giseid);
			}
			case 1: SunucuMesaji(playerid, "Giþe þu anda açýk.");
			case 2: SunucuMesaji(playerid, "Bu gate LSPD tarafýndan kapatýlmýþ.");
		}
	}
	return 1;
}

stock Gate_Durum_Degistir(gateid)
{
	if(gateid != -1 && GateBilgi[gateid][gateKullanimda])
	{
		if(!GateBilgi[gateid][gateDurum])
		{
			GateBilgi[gateid][gateDurum] = true;
			MoveDynamicObject(GateBilgi[gateid][gateObje], GateBilgi[gateid][gateAcilis][0], GateBilgi[gateid][gateAcilis][1], GateBilgi[gateid][gateAcilis][2], GateBilgi[gateid][gateHiz], GateBilgi[gateid][gateAcilis][3], GateBilgi[gateid][gateAcilis][4], GateBilgi[gateid][gateAcilis][5]);
		}
		else if(GateBilgi[gateid][gateDurum])
		{
			GateBilgi[gateid][gateDurum] = false;
			MoveDynamicObject(GateBilgi[gateid][gateObje], GateBilgi[gateid][gatePos][0], GateBilgi[gateid][gatePos][1], GateBilgi[gateid][gatePos][2], GateBilgi[gateid][gateHiz], GateBilgi[gateid][gatePos][3], GateBilgi[gateid][gatePos][4], GateBilgi[gateid][gatePos][5]);
		}
	}
	return 1;
}

stock Arac_BirlikTuru(arac)
{
	new birlik, aracid = Arac_IDBul(arac);
	if(AracBilgi[aracid][aracBirlik] > 0) {
		birlik = AracBilgi[aracid][aracBirlik];
		return BirlikBilgi[BirlikIDBul(birlik)][birlikTur];
	}
	return -1;
}

stock AracDurum(aracid)
{
	new durum[48];
  	switch(AracBilgi[aracid][aracDurum]) {
		case 0: format(durum, sizeof(durum), "{B70000}Hurda");
		case 1: format(durum, sizeof(durum), "{33AA33}Aktif");
		case 2: format(durum, sizeof(durum), "{B70000}Baðlý");
		case 3: {
		    new kapino = AracBilgi[aracid][aracGaraj] + MAKSIMUM_EV + MAKSIMUM_ISYERI + MAKSIMUM_BINA;
			format(durum, sizeof(durum), "{AFAFAF}Garajda (%d)", kapino);
		}
	}
	return durum;
}

stock BirlikIDBul(sqlid)
{
	for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikKullanimda] && BirlikBilgi[i][birlikID] == sqlid)
	    return i;

	return -1;
}

stock binaturisim(tur)
{
	new turisim[64];
	switch(tur) {
	    case 0: turisim = "Yok";
	    case 1: turisim = "Banka";
	    case 2: turisim = "DMV";
	    case 3: turisim = "Polis Departmaný";
	    case 4: turisim = "Devlet";
	    case 5: turisim = "Hastane";
	    case 6: turisim = "Haber Ajansý";
	    case 7: turisim = "Birlik";
	    case 8: turisim = "Arka Çýkýþ";
		case 9: turisim = "Depo";
		case 10: turisim = "Garaj";
	}
	return turisim;
}

stock YetkinizYok(playerid) return HataMesaji(playerid, YETKINIZ_YOK_BILGI);
stock IsbasiYapmalisin(playerid) return HataMesaji(playerid, ISBASI_YAPMALISIN_BILGI);

stock AracModelBul(const isim[])
{
	if(IsNumeric(isim) && (strval(isim) >= 400 && strval(isim) <= 611))
	    return strval(isim);

	for(new i = 0; i < sizeof(aracIsimler); i++)
	{
	    if(strfind(aracIsimler[i], isim, true) != -1)
	    {
	        return i + 400;
		}
	}
	return 0;
}

stock Arac_IDBul(vehicleid)
{
	for(new i = 0; i != MAKSIMUM_ARAC; i++)  if(AracBilgi[i][aracKullanimda] && AracBilgi[i][aracYarat] == vehicleid) {
	    return i;
	}
	return -1;
}

/*
stock IsNumeric(const str[])
{
	for(new i = 0, l = strlen(str); i != l; i ++)
	{
	    if(i == 0 && str[0] == '-')
			continue;

	    else if(str[i] < '0' || str[i] > '9')
			return 0;
	}
	return 1;
}
*/

stock Pompa_GetFreeID()
{
	for(new i = 0; i < MAKSIMUM_BENZIN_POMPASI; i ++) if(!BenzinPompasi[i][pompaKullanimda]) {
	    return i;
	}
	return -1;
}

stock Pompa_Kaldir(pompaid)
{
	if(pompaid != -1 && BenzinPompasi[pompaid][pompaKullanimda])
	{
	    new string[90];

		format(string, sizeof(string), "DELETE FROM `benzinpompalari` WHERE `pompaID` = '%d'", BenzinPompasi[pompaid][pompaID]);
		mysql_tquery(mysqlB, string);

        if(IsValidDynamic3DTextLabel(BenzinPompasi[pompaid][pompaText3D])) DestroyDynamic3DTextLabel(BenzinPompasi[pompaid][pompaText3D]), BenzinPompasi[pompaid][pompaText3D] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicObject(BenzinPompasi[pompaid][pompaObje])) DestroyDynamicObject(BenzinPompasi[pompaid][pompaObje]), BenzinPompasi[pompaid][pompaObje] = INVALID_OBJECT_ID;

	    BenzinPompasi[pompaid][pompaKullanimda] = false;
	    BenzinPompasi[pompaid][pompaBenzin] = 0;
	}
	return 1;
}

stock Pompa_Yarat(playerid, isyeriid, ucret)
{
    new Float:x, Float:y, Float:z, Float:angle, string[64], id = -1;
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		if((id = Pompa_GetFreeID()) != -1)
  		{
	        x += 5.0 * floatsin(-angle, degrees);
	        y += 5.0 * floatcos(-angle, degrees);

			BenzinPompasi[id][pompaKullanimda] = true;
			BenzinPompasi[id][pompaIsyeri] = IsyeriBilgi[isyeriid][isyeriID];
			BenzinPompasi[id][pompaPos][0] = x;
			BenzinPompasi[id][pompaPos][1] = y;
			BenzinPompasi[id][pompaPos][2] = z;
			BenzinPompasi[id][pompaPos][3] = angle;
            BenzinPompasi[id][pompaBenzin] = 2000;
			BenzinPompasi[id][pompaObje] = CreateDynamicObject(3465, x, y, z, 0.0, 0.0, angle);
			BenzinPompasi[id][pompaUcret] = ucret;
			BenzinPompasi[id][pompaTur] = 0;

			format(string, sizeof(string), "INSERT INTO `benzinpompalari` (`pompaIsyeri`) VALUES(%d)", IsyeriBilgi[isyeriid][isyeriID]);
			mysql_tquery(mysqlB, string, "BenzinPompasiYaratildi", "d", id);
			return id;
		}
	}
	return -1;
}

stock Dolap_Yenile(id)
{
	if(id != -1 && DolapBilgi[id][dolapKullanimda])
	{
        if(IsValidDynamic3DTextLabel(DolapBilgi[id][dolapText])) DestroyDynamic3DTextLabel(DolapBilgi[id][dolapText]), DolapBilgi[id][dolapText] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicObject(DolapBilgi[id][dolapObje])) DestroyDynamicObject(DolapBilgi[id][dolapObje]), DolapBilgi[id][dolapObje] = INVALID_OBJECT_ID;

	    new bilgi[340], kiyafet_sayi = 0, maks_slot = 0;
	    switch(DolapBilgi[id][dolapModel]) {
	        case 2131: maks_slot = 10;
	        case 2141: maks_slot = 6;
	        case 2133: maks_slot = 3;
	        default: maks_slot = 10;
	    }
	    for (new s = 0; s < 13; s++) if(DolapBilgi[id][dolapKiyafet][s] != 0) kiyafet_sayi++;
		format(bilgi, sizeof(bilgi), "[Kýyafet Dolabý %d]\n{a9c4e4}Doluluk: {FFFFFF}%d/%d\n{a9c4e4}Kullaným: {FFFFFF}/evdolap", id, kiyafet_sayi, maks_slot);

		DolapBilgi[id][dolapText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, DolapBilgi[id][dolapPos][0], DolapBilgi[id][dolapPos][1], DolapBilgi[id][dolapPos][2] + 1.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DolapBilgi[id][dolapVW], DolapBilgi[id][dolapInt]);
        DolapBilgi[id][dolapObje] = CreateDynamicObject(DolapBilgi[id][dolapModel], DolapBilgi[id][dolapPos][0], DolapBilgi[id][dolapPos][1], DolapBilgi[id][dolapPos][2], DolapBilgi[id][dolapPos][3], DolapBilgi[id][dolapPos][4], DolapBilgi[id][dolapPos][5], DolapBilgi[id][dolapVW], DolapBilgi[id][dolapInt]);
	}
	return 1;
}

stock Pompa_Yenile(pompaid)
{
	if(pompaid != -1 && BenzinPompasi[pompaid][pompaKullanimda])
	{
        if(IsValidDynamic3DTextLabel(BenzinPompasi[pompaid][pompaText3D])) DestroyDynamic3DTextLabel(BenzinPompasi[pompaid][pompaText3D]), BenzinPompasi[pompaid][pompaText3D] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicObject(BenzinPompasi[pompaid][pompaObje])) DestroyDynamicObject(BenzinPompasi[pompaid][pompaObje]), BenzinPompasi[pompaid][pompaObje] = INVALID_OBJECT_ID;
		
	    new bilgi[340];
		format(bilgi, sizeof(bilgi), "[Benzin Pompasý %d]\n{a9c4e4}Kalan Benzin: {FFFFFF}%s Litre\n{a9c4e4}Litre Ücreti: {FFFFFF}%s\n{a9c4e4}Kullaným: {FFFFFF}/benzinal - /benziniptal", pompaid, NumaraFormati(BenzinPompasi[pompaid][pompaBenzin], ""), NumaraFormati(BenzinPompasi[pompaid][pompaUcret]));

		BenzinPompasi[pompaid][pompaText3D] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, BenzinPompasi[pompaid][pompaPos][0], BenzinPompasi[pompaid][pompaPos][1], BenzinPompasi[pompaid][pompaPos][2] + 1.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
        if(BenzinPompasi[pompaid][pompaTur] != 1) BenzinPompasi[pompaid][pompaObje] = CreateDynamicObject(3465, BenzinPompasi[pompaid][pompaPos][0], BenzinPompasi[pompaid][pompaPos][1], BenzinPompasi[pompaid][pompaPos][2], 0.0, 0.0, BenzinPompasi[pompaid][pompaPos][3]);
	}
	return 1;
}

stock Pompa_Kaydet(pompaid)
{
	new sorgu[512];
	format(sorgu, sizeof(sorgu), "UPDATE `benzinpompalari` SET `pompaPosX` = '%.4f', `pompaPosY` = '%.4f', `pompaPosZ` = '%.4f', `pompaPosA` = '%.4f', `pompaBenzin` = '%d'",
	    BenzinPompasi[pompaid][pompaPos][0],
	    BenzinPompasi[pompaid][pompaPos][1],
	    BenzinPompasi[pompaid][pompaPos][2],
		BenzinPompasi[pompaid][pompaPos][3],
	    BenzinPompasi[pompaid][pompaBenzin]
	);
	format(sorgu, sizeof(sorgu), "%s, `pompaUcret` = '%d', `pompaIsyeri` = '%d', `pompaTur` = '%d' WHERE `pompaID` = '%d'",
	    sorgu,
		BenzinPompasi[pompaid][pompaUcret],
		BenzinPompasi[pompaid][pompaIsyeri],
		BenzinPompasi[pompaid][pompaTur],
	    BenzinPompasi[pompaid][pompaID]
	);
	return mysql_tquery(mysqlB, sorgu);
}

stock BaslangicPos_Ekle(playerid, isim[])
{
    new Float:x, Float:y, Float:z, Float:angle, sorgu[64];
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i < MAKSIMUM_BASLANGICPOS; i ++) if(!BaslangicPoslari[i][posKullanimda]) {

			BaslangicPoslari[i][posKullanimda] = true;
			format(BaslangicPoslari[i][pos_adi], 64, "%s", isim);
			BaslangicPoslari[i][baslangic_pos][0] = x;
			BaslangicPoslari[i][baslangic_pos][1] = y;
			BaslangicPoslari[i][baslangic_pos][2] = z;
			BaslangicPoslari[i][baslangic_pos][3] = angle;
			BaslangicPoslari[i][baslangic_int] = GetPlayerInterior(playerid);
			BaslangicPoslari[i][baslangic_vw] = GetPlayerVirtualWorld(playerid);

			format(sorgu, sizeof(sorgu), "INSERT INTO `baslangicposlari` (`PosAdi`) VALUES(NULL)");
			mysql_tquery(mysqlB, sorgu, "BaslangicPosYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock BaslangicPos_Kaydet(id)
{
	if(BaslangicPoslari[id][posKullanimda] == false) return 0;

	new sorgu[512];
	format(sorgu, sizeof(sorgu), "UPDATE `baslangicposlari` SET `Pos_X` = '%.4f', `Pos_Y` = '%.4f', `Pos_Z` = '%.4f', `Pos_A` = '%.4f', `PosAdi` = '%s', `Interior` = '%d', `VirtualWorld` = '%d' WHERE `ID` = '%d'",
	    BaslangicPoslari[id][baslangic_pos][0],
	    BaslangicPoslari[id][baslangic_pos][1],
	    BaslangicPoslari[id][baslangic_pos][2],
	    BaslangicPoslari[id][baslangic_pos][3],
	    SQL_ReturnEscaped(BaslangicPoslari[id][pos_adi]),
	    BaslangicPoslari[id][baslangic_int],
		BaslangicPoslari[id][baslangic_vw],
	    BaslangicPoslari[id][posID]
	);
	return mysql_tquery(mysqlB, sorgu);
}

stock BaslangicPos_Kaldir(id)
{
	if(id != -1 && BaslangicPoslari[id][posKullanimda])
	{
	    new string[128];
		format(string, sizeof(string), "DELETE FROM `baslangicposlari` WHERE `ID` = '%d'", DekorListesi[id][dekorID]);
		mysql_tquery(mysqlB, string);

	    BaslangicPoslari[id][posKullanimda] = false;
	    BaslangicPoslari[id][posID] = 0;
	}
	return 1;
}

stock Dekor_Ekle(playerid, isim[], tur)
{
    new Float:x, Float:y, Float:z, Float:angle, sorgu[64];
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i < MAKSIMUM_DEKOR; i ++) if(!DekorListesi[i][dekorKullanimda]) {

			DekorListesi[i][dekorKullanimda] = true;
			format(DekorListesi[i][dekorIsim], 64, "%s", isim);
			DekorListesi[i][dekorPos][0] = x;
			DekorListesi[i][dekorPos][1] = y;
			DekorListesi[i][dekorPos][2] = z;
			DekorListesi[i][dekorPos][3] = angle;
			DekorListesi[i][dekorInterior] = GetPlayerInterior(playerid);
			DekorListesi[i][dekorTur] = tur;
			DekorListesi[i][dekorUcret] = 10000;
			DekorListesi[i][dekorOOC] = 0;

			format(sorgu, sizeof(sorgu), "INSERT INTO `dekorlar` (`Tur`) VALUES(0)");
			mysql_tquery(mysqlB, sorgu, "DekorYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Dekor_Kaydet(id)
{
	if(DekorListesi[id][dekorKullanimda] == false) return 0;

	new sorgu[512];
	format(sorgu, sizeof(sorgu), "UPDATE `dekorlar` SET `posX` = '%.4f', `posY` = '%.4f', `posZ` = '%.4f', `posA` = '%.4f', `Tur` = '%d', `Isim` = '%s', `Interior` = '%d', `Ucret` = '%d', `OOCSatis` = '%d' WHERE `ID` = '%d'",
	    DekorListesi[id][dekorPos][0],
	    DekorListesi[id][dekorPos][1],
	    DekorListesi[id][dekorPos][2],
	    DekorListesi[id][dekorPos][3],
	    DekorListesi[id][dekorTur],
		SQL_ReturnEscaped(DekorListesi[id][dekorIsim]),
		DekorListesi[id][dekorInterior],
		DekorListesi[id][dekorUcret],
		DekorListesi[id][dekorOOC],
	    DekorListesi[id][dekorID]
	);
	return mysql_tquery(mysqlB, sorgu);
}

stock Dekor_Kaldir(id)
{
	if(id != -1 && DekorListesi[id][dekorKullanimda])
	{
	    new string[128];
		format(string, sizeof(string), "DELETE FROM `dekorlar` WHERE `ID` = '%d'", DekorListesi[id][dekorID]);
		mysql_tquery(mysqlB, string);

	    DekorListesi[id][dekorKullanimda] = false;
	    DekorListesi[id][dekorID] = 0;
	}
	return 1;
}

stock CCTV_Yarat(playerid, isim[])
{
    new Float:x, Float:y, Float:z, Float:angle, sorgu[64];
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i < MAKSIMUM_CCTV; i ++) if(!CCTVVeri[i][cctvKullanimda]) {

			CCTVVeri[i][cctvKullanimda] = true;
			format(CCTVVeri[i][cctvIsim], 64, "%s", isim);
			CCTVVeri[i][cctvPos][0] = x;
			CCTVVeri[i][cctvPos][1] = y;
			CCTVVeri[i][cctvPos][2] = z;
			CCTVVeri[i][cctvMenzil] = 50.0;

			format(sorgu, sizeof(sorgu), "INSERT INTO `cctv` (`Bolge`) VALUES(NULL)");
			mysql_tquery(mysqlB, sorgu, "CCTVYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock CCTV_Kaldir(id)
{
	if(id != -1 && CCTVVeri[id][cctvKullanimda])
	{
	    new string[128];
		format(string, sizeof(string), "DELETE FROM `cctv` WHERE `ID` = '%d'", CCTVVeri[id][cctvID]);
		mysql_tquery(mysqlB, string);

	    CCTVVeri[id][cctvKullanimda] = false;
	}
	return 1;
}

stock CCTV_Kaydet(id)
{
	new sorgu[256];
	format(sorgu, sizeof(sorgu), "UPDATE `cctv` SET `posX` = '%.4f', `posY` = '%.4f', `posZ` = '%.4f', `Menzil` = '%.4f', `Bolge` = '%s' WHERE `ID` = '%d'",
	    CCTVVeri[id][cctvPos][0],
	    CCTVVeri[id][cctvPos][1],
	    CCTVVeri[id][cctvPos][2],
	    CCTVVeri[id][cctvMenzil],
		SQL_ReturnEscaped(CCTVVeri[id][cctvIsim]),
	    CCTVVeri[id][cctvID]
	);
	return mysql_tquery(mysqlB, sorgu);
}

stock SucListesi_Ekle(isim[], dakika)
{
    new sorgu[64];
	for(new i = 0; i < MAKSIMUM_SUC; i ++) if(!SucListesi[i][sKullanimda]) {

		SucListesi[i][sKullanimda] = true;
		SucListesi[i][sDakika] = dakika;
		format(SucListesi[i][sIsim], 144, "%s", isim);

		format(sorgu, sizeof(sorgu), "INSERT INTO `suclistesi` (`Dakika`) VALUES(0)");
		mysql_tquery(mysqlB, sorgu, "SucListeEklendi", "d", i);
		return i;
	}
	return -1;
}

stock SucListesi_Kaldir(id)
{
	if(id != -1 && SucListesi[id][sKullanimda])
	{
	    new string[128];
		format(string, sizeof(string), "DELETE FROM `suclistesi` WHERE `ID` = '%d'", SucListesi[id][sucID]);
		mysql_tquery(mysqlB, string);

	    SucListesi[id][sKullanimda] = false;
	}
	return 1;
}

stock SucListesi_Kaydet(id)
{
	new sorgu[256];
	format(sorgu, sizeof(sorgu), "UPDATE `suclistesi` SET `Suc` = '%s', `Dakika` = '%d' WHERE `ID` = '%d'",
	    SQL_ReturnEscaped(SucListesi[id][sIsim]),
	    SucListesi[id][sDakika],
	    SucListesi[id][sucID]
	);
	return mysql_tquery(mysqlB, sorgu);
}

stock HirsizListe_Ekle(model)
{
    new sorgu[64];

	for(new i = 0; i < MAKSIMUM_ARACLISTE; i ++) if(!AracHirsiz[i][hKullanimda]) {

		AracHirsiz[i][hKullanimda] = true;
		AracHirsiz[i][hTeslim] = 0;
		AracHirsiz[i][hModel] = model;

		format(sorgu, sizeof(sorgu), "INSERT INTO `hliste` (`Model`) VALUES(0)");
		mysql_tquery(mysqlB, sorgu, "HirsizListeEklendi", "d", i);
		return i;
	}
	return -1;
}

stock Liste_Kaldir(id)
{
	if(id != -1 && AracHirsiz[id][hKullanimda])
	{
	    new string[128];
		format(string, sizeof(string), "DELETE FROM `hliste` WHERE `ID` = '%d'", AracHirsiz[id][hirsizID]);
		mysql_tquery(mysqlB, string);

	    AracHirsiz[id][hKullanimda] = false;
	}
	return 1;
}

stock Liste_Kaydet(id)
{
	new sorgu[256];
	format(sorgu, sizeof(sorgu), "UPDATE `hliste` SET `Model` = '%d', `Teslim` = '%d' WHERE `ID` = '%d'",
	    AracHirsiz[id][hModel],
	    AracHirsiz[id][hTeslim],
	    AracHirsiz[id][hirsizID]
	);
	return mysql_tquery(mysqlB, sorgu);
}

stock Konum_Yarat(playerid, isim[])
{
    new Float:x, Float:y, Float:z, Float:angle, sorgu[64];
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i < MAKSIMUM_GPS; i ++) if(!GPSVeri[i][gpsKullanimda]) {

			GPSVeri[i][gpsKullanimda] = true;
			format(GPSVeri[i][gpsIsim], 64, "%s", isim);
			GPSVeri[i][gpsPos][0] = x;
			GPSVeri[i][gpsPos][1] = y;
			GPSVeri[i][gpsPos][2] = z;

			format(sorgu, sizeof(sorgu), "INSERT INTO `konumlar` (`gpsIsim`) VALUES(NULL)");
			mysql_tquery(mysqlB, sorgu, "KonumYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Rehber_Sayi(oyuncuid)
{
	new sayi = 0;
	for(new i = 0; i < MAKSIMUM_REHBER_SAYI; i ++) if(RehberBilgi[oyuncuid][i][rehberKullanimda] == true) sayi++;
	return sayi;
}

stock Rehber_Ekle(oyuncuid, isim[], numara)
{
	new sorgu[64];
	for(new i = 0; i < MAKSIMUM_REHBER_SAYI; i ++) if(!RehberBilgi[oyuncuid][i][rehberKullanimda]) {
		RehberBilgi[oyuncuid][i][rehberKullanimda] = true;
		format(RehberBilgi[oyuncuid][i][rehberIsim], 64, "%s", isim);
		RehberBilgi[oyuncuid][i][rehberNumara] = numara;

		format(sorgu, sizeof(sorgu), "INSERT INTO `rehberkayitlari` (`Numara`) VALUES(0)");
		mysql_tquery(mysqlB, sorgu, "RehberKisiYaratildi", "id", oyuncuid, i);
		return i;
	}
	return -1;
}

stock Rehber_Sil(playerid, id)
{
	if(id != -1 && RehberBilgi[playerid][id][rehberKullanimda])
	{
	    new sorgu[64];
		format(sorgu, sizeof(sorgu), "DELETE FROM `rehberkayitlari` WHERE `ID` = '%d'", RehberBilgi[playerid][id][rehberID]);
		mysql_query(mysqlB, sorgu);

	    RehberBilgi[playerid][id][rehberKullanimda] = false;
		format(RehberBilgi[playerid][id][rehberIsim], 64, "NULL");
		RehberBilgi[playerid][id][rehberNumara] = 0;
	}
	return 1;
}

stock Rehber_Kaydet(playerid, id)
{
	new sorgu[128 + MAX_PLAYER_NAME];
	format(sorgu, sizeof(sorgu), "UPDATE `rehberkayitlari` SET `Numara` = '%d', `Isim` = '%s', `Kaydeden` = '%d' WHERE `ID` = '%d'",
	    RehberBilgi[playerid][id][rehberNumara],
   		SQL_ReturnEscaped(RehberBilgi[playerid][id][rehberIsim]),
		OyuncuBilgi[playerid][oID],
	    RehberBilgi[playerid][id][rehberID]
	);
	return mysql_tquery(mysqlB, sorgu);
}

stock Oyuncu_Konum_Yarat(playerid, isim[])
{
    new Float:x, Float:y, Float:z, Float:angle, sorgu[64];
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i < MAKSIMUM_OYUNCU_GPS; i ++) if(!GPSOyuncu[playerid][i][gpsKullanimda]) {

			GPSOyuncu[playerid][i][gpsKullanimda] = true;
			format(GPSOyuncu[playerid][i][gpsIsim], 64, "%s", isim);
			GPSOyuncu[playerid][i][gpsPos][0] = x;
			GPSOyuncu[playerid][i][gpsPos][1] = y;
			GPSOyuncu[playerid][i][gpsPos][2] = z;

			format(sorgu, sizeof(sorgu), "INSERT INTO `gps` (`gpsOyuncu`) VALUES(0)");
			mysql_tquery(mysqlB, sorgu, "OyuncuKonumYaratildi", "id", playerid, i);
			return i;
		}
	}
	return -1;
}

stock Oyuncu_Konum_Kaldir(playerid, id)
{
	if(id != -1 && GPSOyuncu[playerid][id][gpsKullanimda])
	{
	    new string[128];
		format(string, sizeof(string), "DELETE FROM `gps` WHERE `gpsID` = '%d'", GPSOyuncu[playerid][id][gpsID]);
		mysql_tquery(mysqlB, string);

	    GPSOyuncu[playerid][id][gpsKullanimda] = false;
	}
	return 1;
}

stock Oyuncu_Konum_Kaydet(playerid, id)
{
	new sorgu[256];
	format(sorgu, sizeof(sorgu), "UPDATE `gps` SET `gpsX` = '%.4f', `gpsY` = '%.4f', `gpsZ` = '%.4f', `gpsOyuncu` = '%d', `gpsIsim` = '%s' WHERE `gpsID` = '%d'",
	    GPSOyuncu[playerid][id][gpsPos][0],
	    GPSOyuncu[playerid][id][gpsPos][1],
	    GPSOyuncu[playerid][id][gpsPos][2],
		OyuncuBilgi[playerid][oID],
		SQL_ReturnEscaped(GPSOyuncu[playerid][id][gpsIsim]),
	    GPSOyuncu[playerid][id][gpsID]
	);
	return mysql_tquery(mysqlB, sorgu);
}

stock Konum_Kaldir(id)
{
	if(id != -1 && GPSVeri[id][gpsKullanimda])
	{
	    new string[128];
		format(string, sizeof(string), "DELETE FROM `konumlar` WHERE `gpsID` = '%d'", GPSVeri[id][gpsID]);
		mysql_tquery(mysqlB, string);

	    GPSVeri[id][gpsKullanimda] = false;
	}
	return 1;
}

stock GPS_Kaydet(id)
{
	new sorgu[256];
	format(sorgu, sizeof(sorgu), "UPDATE `konumlar` SET `gpsX` = '%.4f', `gpsY` = '%.4f', `gpsZ` = '%.4f', `gpsIsim` = '%s' WHERE `gpsID` = '%d'",
	    GPSVeri[id][gpsPos][0],
	    GPSVeri[id][gpsPos][1],
	    GPSVeri[id][gpsPos][2],
		SQL_ReturnEscaped(GPSVeri[id][gpsIsim]),
	    GPSVeri[id][gpsID]
	);
	return mysql_tquery(mysqlB, sorgu);
}

stock Raf_Kaydet(rafid)
{
	new query[1024];
	format(query, sizeof(query), "UPDATE `raflar` SET `rafEv` = '%d', `rafX` = '%.4f', `rafY` = '%.4f', `rafZ` = '%.4f', `rafA` = '%.4f', `rafInt` = '%d', `rafVW` = '%d', `Silah1` = '%d', `Silah2` = '%d', `Silah3` = '%d', `Silah4` = '%d'",
	    RafBilgi[rafid][rafEv],
	    RafBilgi[rafid][rafPos][0],
	    RafBilgi[rafid][rafPos][1],
	    RafBilgi[rafid][rafPos][2],
	    RafBilgi[rafid][rafPos][3],
	    RafBilgi[rafid][rafInt],
	    RafBilgi[rafid][rafVW],
	    RafBilgi[rafid][rafSilahlar][0],
	    RafBilgi[rafid][rafSilahlar][1],
	    RafBilgi[rafid][rafSilahlar][2],
	    RafBilgi[rafid][rafSilahlar][3]
	);
	format(query, sizeof(query), "%s, `Mermi1` = '%d', `Mermi2` = '%d', `Mermi3` = '%d', `Mermi4` = '%d', `rafBina` = '%d' WHERE `ID` = '%d'",
		query,
	    RafBilgi[rafid][rafMermiler][0],
	    RafBilgi[rafid][rafMermiler][1],
	    RafBilgi[rafid][rafMermiler][2],
	    RafBilgi[rafid][rafMermiler][3],
	    RafBilgi[rafid][rafBina],
	    RafBilgi[rafid][rafID]
	);
	return mysql_tquery(mysqlB, query);
}

stock Raf_Yakin(playerid)
{
	for(new i = 0; i != MAKSIMUM_RAF; i ++) if(RafBilgi[i][rafKullanimda] && IsPlayerInRangeOfPoint(playerid, 2.0, RafBilgi[i][rafPos][0], RafBilgi[i][rafPos][1], RafBilgi[i][rafPos][2]))
	{
		if(GetPlayerInterior(playerid) == RafBilgi[i][rafInt] && GetPlayerVirtualWorld(playerid) == RafBilgi[i][rafVW])
		    return i;
	}
	return -1;
}

stock Uyusturucu_Bina_Sayi(binaid)
{
	new sayi = 0;
    for(new i = 0; i != MAKSIMUM_UYUSTURUCU; i ++) if(UyusturucuBilgi[i][uKullanimda] == true && UyusturucuBilgi[i][uBina] == BinaBilgi[binaid][bID]) sayi++;
	return sayi;
}

stock Uyusturucu_Sayi(oyuncuid)
{
	new sayi = 0;
    for(new i = 0; i != MAKSIMUM_UYUSTURUCU; i ++) if(UyusturucuBilgi[i][uKullanimda] == true && UyusturucuBilgi[i][uSahip] == OyuncuBilgi[oyuncuid][oID]) sayi++;
	return sayi;
}

stock Raf_Sayi(id, tip)
{
	new sayi = 0;
	switch(tip) {
		case 1: for(new i = 0; i != MAKSIMUM_RAF; i ++) if(RafBilgi[i][rafKullanimda] && RafBilgi[i][rafEv] == EvBilgi[id][evID]) sayi++;
		case 2: for(new i = 0; i != MAKSIMUM_RAF; i ++) if(RafBilgi[i][rafKullanimda] && RafBilgi[i][rafBina] == BinaBilgi[id][bID]) sayi++;
	}
	return sayi;
}

stock Raf_SilahListele(playerid, rafid)
{
	if(rafid != -1 && RafBilgi[rafid][rafKullanimda])
	{
	    new icerik[144], esya[64], evid = Oyuncu_Evde(playerid), binaid = Oyuncu_Binada(playerid);
		format(icerik, sizeof(icerik), "Eþya\tAdet\n");
		for(new i = 0; i < 4; i ++)
		{
		    switch(RafBilgi[rafid][rafSilahlar][i]) {
			    case 60: format(esya, sizeof(esya), "Uyuþturucu");
			    case 61: format(esya, sizeof(esya), "Çelik Yelek");
			    case 62: format(esya, sizeof(esya), "Ýlk Yardým Kiti");
			    case 63: format(esya, sizeof(esya), "Tamir Kiti");
		        default: format(esya, sizeof(esya), "%s", SilahIsim(RafBilgi[rafid][rafSilahlar][i]));
		    }
		    if(!RafBilgi[rafid][rafSilahlar][i]) format(icerik, sizeof(icerik), "%sBoþ Slot\n", icerik);
			else format(icerik, sizeof(icerik), "%s%s\t%d\n", icerik, esya, RafBilgi[rafid][rafMermiler][i]);
		}
		OyuncuBilgi[playerid][oRaf] = rafid;
		if((evid > -1 && !Ev_SahipKontrol(playerid, evid && Ev_AnahtarKontrol(playerid, evid)) || binaid > -1 && !Bina_SahipKontrol(playerid, binaid) &&  !Bina_AnahtarKontrol(playerid, binaid)) && OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) return DialogGoster(playerid, DIALOG_RAF_ELKOY, DIALOG_STYLE_TABLIST_HEADERS, "Raf", icerik, "Seç", "Kapat");
		if(evid > -1 && (Ev_SahipKontrol(playerid, evid) || Ev_AnahtarKontrol(playerid, evid))) return DialogGoster(playerid, DIALOG_RAF_SILAHLAR, DIALOG_STYLE_TABLIST_HEADERS, "Raf", icerik, "Seç", "Kapat");
		if(binaid > -1 && (Bina_SahipKontrol(playerid, binaid) || Bina_AnahtarKontrol(playerid, binaid))) return DialogGoster(playerid, DIALOG_RAF_SILAHLAR, DIALOG_STYLE_TABLIST_HEADERS, "Raf", icerik, "Seç", "Kapat");
	}
	else HataMesaji(playerid, "Bir sorun oluþtu.");
	return 1;
}

stock Raf_Sil(rafid)
{
    if(rafid != -1 && RafBilgi[rafid][rafKullanimda])
	{
	    new sorgu[64];
	    format(sorgu, sizeof(sorgu), "DELETE FROM `raflar` WHERE `ID` = '%d'", RafBilgi[rafid][rafID]);
	    mysql_query(mysqlB, sorgu);

        for(new i = 0; i < 5; i ++) if(IsValidDynamicObject(RafBilgi[rafid][rafObje][i])) DestroyDynamicObject(RafBilgi[rafid][rafObje][i]), RafBilgi[rafid][rafObje][i] = INVALID_OBJECT_ID;
        for(new i = 0; i < 4; i ++) RafBilgi[rafid][rafSilahlar][i] = 0;
		if(IsValidDynamic3DTextLabel(RafBilgi[rafid][rafText3D])) DestroyDynamic3DTextLabel(RafBilgi[rafid][rafText3D]), RafBilgi[rafid][rafText3D] = Text3D:INVALID_3DTEXT_ID;

		foreach(new i : Player) if(OyuncuBilgi[i][oRaf] == i) OyuncuBilgi[i][oRaf] = -1;
		RafBilgi[rafid][rafKullanimda] = false;
		RafBilgi[rafid][rafID] = 0;
		RafBilgi[rafid][rafEv] = -1;
		RafBilgi[rafid][rafBina] = -1;
	}
	return 1;
}

stock Raf_Yarat(playerid, id, tip)
{
	new Float:x, Float:y, Float:z, Float:angle;

	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i != MAKSIMUM_RAF; i ++) if(!RafBilgi[i][rafKullanimda])
		{
		    x += 1.5 * floatsin(-angle, degrees);
		    y += 1.5 * floatcos(-angle, degrees);

		    RafBilgi[i][rafKullanimda] = true;
		    switch(tip) {
				case 1: RafBilgi[i][rafEv] = (id == -1) ? (-1) : (EvBilgi[id][evID]);
				case 2: RafBilgi[i][rafBina] = (id == -1) ? (-1) : (BinaBilgi[id][bID]);
				default: RafBilgi[i][rafEv] = -1, RafBilgi[i][rafBina] = -1;
			}
		    RafBilgi[i][rafPos][0] = x;
		    RafBilgi[i][rafPos][1] = y;
		    RafBilgi[i][rafPos][2] = z;
		    RafBilgi[i][rafPos][3] = angle;
		    RafBilgi[i][rafInt] = GetPlayerInterior(playerid);
		    RafBilgi[i][rafVW] = GetPlayerVirtualWorld(playerid);
		    for(new r = 0; r < 4; r++) RafBilgi[i][rafSilahlar][r] = 0;

		    Raf_Yenile(i);
		    mysql_tquery(mysqlB, "INSERT INTO `raflar` (`rafEv`) VALUES(0)", "RafYaratildi", "d", i);
		    return i;
		}
	}
	return -1;
}

stock Raf_SilahYenile(rafid)
{
    if(rafid != -1 && RafBilgi[rafid][rafKullanimda])
	{
    	new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, objeid = 0;
		z = RafBilgi[rafid][rafPos][2] + 2.20;

		for(new i = 0; i < 4; i ++) if(IsValidDynamicObject(RafBilgi[rafid][rafObje][i])) DestroyDynamicObject(RafBilgi[rafid][rafObje][i]), RafBilgi[rafid][rafObje][i] = INVALID_OBJECT_ID;
		for(new i = 0; i < 4; i ++)
		{
		    if(RafBilgi[rafid][rafSilahlar][i])
			{
				x = RafBilgi[rafid][rafPos][0] - (0.2 * floatsin(-RafBilgi[rafid][rafPos][3], degrees) + (0.45 * floatsin(-RafBilgi[rafid][rafPos][3] - 90, degrees)));
				y = RafBilgi[rafid][rafPos][1] - (0.2 * floatcos(-RafBilgi[rafid][rafPos][3], degrees) + (0.45 * floatcos(-RafBilgi[rafid][rafPos][3] - 90, degrees)));
				switch(RafBilgi[rafid][rafSilahlar][i]) {
				    case 60: objeid = 1575, rx = 0, ry = 0, rz = RafBilgi[rafid][rafPos][3];
				    case 61: objeid = 19515, rx = 180, ry = 0, rz = RafBilgi[rafid][rafPos][3];
				    case 62: objeid = 11738, rx = 0, ry = 0, rz = RafBilgi[rafid][rafPos][3];
				    case 63: objeid = 19921, rx = 0, ry = 0, rz = RafBilgi[rafid][rafPos][3];
					default: objeid = SilahObjeBul(RafBilgi[rafid][rafSilahlar][i]), rx = 94.7, ry = 93.7, rz = (22 <= RafBilgi[rafid][rafSilahlar][i] <= 38) ? (RafBilgi[rafid][rafPos][3] + 90.0) : (RafBilgi[rafid][rafPos][3]);
				}
		        RafBilgi[rafid][rafObje][i] = CreateDynamicObject(objeid, x, y, z, rx, ry, rz, RafBilgi[rafid][rafVW], RafBilgi[rafid][rafInt]);
			}
			else RafBilgi[rafid][rafObje][i] = INVALID_OBJECT_ID;
			z = z - 0.69;
		}
	}
	return 1;
}

stock Raf_Yenile(rafid)
{
	if(rafid != -1 && RafBilgi[rafid][rafKullanimda])
	{
	    new str[64];

		if(IsValidDynamicObject(RafBilgi[rafid][rafObje][4])) DestroyDynamicObject(RafBilgi[rafid][rafObje][4]), RafBilgi[rafid][rafObje][4] = INVALID_OBJECT_ID;
		if(IsValidDynamic3DTextLabel(RafBilgi[rafid][rafText3D])) DestroyDynamic3DTextLabel(RafBilgi[rafid][rafText3D]), RafBilgi[rafid][rafText3D] = Text3D:INVALID_3DTEXT_ID;
		format(str, sizeof(str), "[Raf %d]\n{FFFFFF}/raf ile açabilirsin.", rafid);
		RafBilgi[rafid][rafText3D] = CreateDynamic3DTextLabel(str, RENK_SERVER, RafBilgi[rafid][rafPos][0], RafBilgi[rafid][rafPos][1], RafBilgi[rafid][rafPos][2] + 1.2, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, RafBilgi[rafid][rafVW], RafBilgi[rafid][rafInt]);

		Raf_SilahYenile(rafid);
        RafBilgi[rafid][rafObje][4] = CreateDynamicObject(2475, RafBilgi[rafid][rafPos][0], RafBilgi[rafid][rafPos][1], RafBilgi[rafid][rafPos][2], 0.0, 0.0, RafBilgi[rafid][rafPos][3], RafBilgi[rafid][rafVW], RafBilgi[rafid][rafInt]);
	}
	return 1;
}

stock Kontrakt_Ekle(isim[], ucret)
{
    new sorgu[64];
	for(new i = 0; i < MAKSIMUM_KONTRAKT; i ++) if(!KontraktVeri[i][kontraktKullanimda]) {

		KontraktVeri[i][kontraktKullanimda] = true;
		KontraktVeri[i][kontraktUcret] = ucret;
		format(KontraktVeri[i][kontraktIsim], 32, "%s", isim);

		format(sorgu, sizeof(sorgu), "INSERT INTO `kontraktlar` (`Ucret`) VALUES(0)");
		mysql_tquery(mysqlB, sorgu, "KontraktEklendi", "d", i);
		return i;
	}
	return -1;
}

stock Kontrakt_Kaydet(id)
{
	new sorgu[256];
	format(sorgu, sizeof(sorgu), "UPDATE `kontraktlar` SET `Ucret` = '%d', `Hedef` = '%s' WHERE `ID` = '%d'",
	    KontraktVeri[id][kontraktUcret],
	    KontraktVeri[id][kontraktIsim],
	    KontraktVeri[id][kontraktID]
	);
	return mysql_tquery(mysqlB, sorgu);
}

stock Kontrakt_Kaldir(id)
{
	if(id != -1 && KontraktVeri[id][kontraktKullanimda])
	{
	    new sorgu[90];
		format(sorgu, sizeof(sorgu), "DELETE FROM `kontraktlar` WHERE `ID` = '%d'", KontraktVeri[id][kontraktID]);
		mysql_tquery(mysqlB, sorgu);

	    KontraktVeri[id][kontraktKullanimda] = false;
	    KontraktVeri[id][kontraktIsim][0] = 0;
	    KontraktVeri[id][kontraktUcret] = 0;
	}
	return 1;
}

stock Kasa_Yarat(playerid, birlikid)
{
    new Float:x, Float:y, Float:z, Float:angle, sorgu[64];
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i < MAKSIMUM_KASA; i ++) if(!KasaBilgi[i][kasaKullanimda]) {
	        x += 5.0 * floatsin(-angle, degrees);
	        y += 5.0 * floatcos(-angle, degrees);

			KasaBilgi[i][kasaKullanimda] = true;
			KasaBilgi[i][kasaBirlik] = birlikid;
			KasaBilgi[i][kasaPos][0] = x;
			KasaBilgi[i][kasaPos][1] = y;
			KasaBilgi[i][kasaPos][2] = z;
			KasaBilgi[i][kasaPos][3] = angle;
			KasaBilgi[i][kasaVW] = GetPlayerVirtualWorld(playerid);
			KasaBilgi[i][kasaInt] = GetPlayerInterior(playerid);
            KasaBilgi[i][kasaPara] = 0;
            KasaBilgi[i][kasaObje] = CreateDynamicObject(2332, x, y, z, 0.0, 0.0, angle, KasaBilgi[i][kasaVW], KasaBilgi[i][kasaInt]);

			format(sorgu, sizeof(sorgu), "INSERT INTO `kasalar` (`kasaPara`) VALUES(0)");
			mysql_tquery(mysqlB, sorgu, "KasaYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Kasa_Kaldir(kasaid)
{
	if(kasaid != -1 && KasaBilgi[kasaid][kasaKullanimda])
	{
	    new sorgu[90];
		format(sorgu, sizeof(sorgu), "DELETE FROM `kasalar` WHERE `kasaID` = '%d'", KasaBilgi[kasaid][kasaID]);
		mysql_tquery(mysqlB, sorgu);

        if(IsValidDynamic3DTextLabel(KasaBilgi[kasaid][kasaText3D])) DestroyDynamic3DTextLabel(KasaBilgi[kasaid][kasaText3D]), KasaBilgi[kasaid][kasaText3D] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicObject(KasaBilgi[kasaid][kasaObje])) DestroyDynamicObject(KasaBilgi[kasaid][kasaObje]), KasaBilgi[kasaid][kasaObje] = INVALID_OBJECT_ID;

	    KasaBilgi[kasaid][kasaKullanimda] = false;
	    KasaBilgi[kasaid][kasaPara] = 0;
	}
	return 1;
}

stock Kasa_Kaydet(kasaid)
{
	new sorgu[512];
	format(sorgu, sizeof(sorgu), "UPDATE `kasalar` SET `kasaX` = '%.4f', `kasaY` = '%.4f', `kasaZ` = '%.4f', `kasaAngle` = '%.4f', `kasaPara` = '%d'",
	    KasaBilgi[kasaid][kasaPos][0],
	    KasaBilgi[kasaid][kasaPos][1],
	    KasaBilgi[kasaid][kasaPos][2],
		KasaBilgi[kasaid][kasaPos][3],
	    KasaBilgi[kasaid][kasaPara]
	);
	format(sorgu, sizeof(sorgu), "%s, `kasaBirlik` = '%d',`kasaVW` = '%d',`kasaInt` = '%d' WHERE `kasaID` = '%d'",
		sorgu,
		KasaBilgi[kasaid][kasaBirlik],
	    KasaBilgi[kasaid][kasaVW],
	    KasaBilgi[kasaid][kasaInt],
	    KasaBilgi[kasaid][kasaID]
	);
	return mysql_tquery(mysqlB, sorgu);
}

stock Kasa_Yenile(kasaid)
{
	if(kasaid != -1 && KasaBilgi[kasaid][kasaKullanimda])
	{
	    new bilgi[128];
	    for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikID] == KasaBilgi[kasaid][kasaBirlik]) format(bilgi, sizeof(bilgi), "[Kasa %d]\n{a9c4e4}Birlik: {FFFFFF}%s", kasaid, BirlikBilgi[i][birlikAd]);
        if(IsValidDynamic3DTextLabel(KasaBilgi[kasaid][kasaText3D])) DestroyDynamic3DTextLabel(KasaBilgi[kasaid][kasaText3D]), KasaBilgi[kasaid][kasaText3D] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicObject(KasaBilgi[kasaid][kasaObje])) DestroyDynamicObject(KasaBilgi[kasaid][kasaObje]), KasaBilgi[kasaid][kasaObje] = INVALID_OBJECT_ID;

		KasaBilgi[kasaid][kasaText3D] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, KasaBilgi[kasaid][kasaPos][0], KasaBilgi[kasaid][kasaPos][1], KasaBilgi[kasaid][kasaPos][2] + 0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, KasaBilgi[kasaid][kasaVW], KasaBilgi[kasaid][kasaInt]);
        KasaBilgi[kasaid][kasaObje] = CreateDynamicObject(2332, KasaBilgi[kasaid][kasaPos][0], KasaBilgi[kasaid][kasaPos][1], KasaBilgi[kasaid][kasaPos][2], 0.0, 0.0, KasaBilgi[kasaid][kasaPos][3], KasaBilgi[kasaid][kasaVW], KasaBilgi[kasaid][kasaInt]);
	}
	return 1;
}

stock Arac_Spawn(aracid)
{
	if(aracid != -1 && AracBilgi[aracid][aracKullanimda])
	{
		if(IsValidVehicle(AracBilgi[aracid][aracYarat])) DestroyVehicle(AracBilgi[aracid][aracYarat]), AracBilgi[aracid][aracYarat] = INVALID_VEHICLE_ID;
		if(IsValidDynamic3DTextLabel(AracBilgi[aracid][aracIlan])) DestroyDynamic3DTextLabel(AracBilgi[aracid][aracIlan]), AracBilgi[aracid][aracIlan] = Text3D:INVALID_3DTEXT_ID;
		if(AracBilgi[aracid][aracDurum] != 1) return false;
		if(AracBilgi[aracid][aracRenk1] == -1) AracBilgi[aracid][aracRenk1] = random(255);
		if(AracBilgi[aracid][aracRenk2] == -1) AracBilgi[aracid][aracRenk2] = random(255);
        AracBilgi[aracid][aracYarat] = CreateVehicle(AracBilgi[aracid][aracModel], AracBilgi[aracid][aracPos][0], AracBilgi[aracid][aracPos][1], AracBilgi[aracid][aracPos][2], AracBilgi[aracid][aracPos][3], AracBilgi[aracid][aracRenk1], AracBilgi[aracid][aracRenk2], (AracBilgi[aracid][aracSahip] != 0) ? (-1) : (1200000));
	    AracSonPos[AracBilgi[aracid][aracYarat]][0] = AracBilgi[aracid][aracPos][0];
		AracSonPos[AracBilgi[aracid][aracYarat]][1] = AracBilgi[aracid][aracPos][1];
		AracSonPos[AracBilgi[aracid][aracYarat]][2] = AracBilgi[aracid][aracPos][2];
		SetVehicleNumberPlate(AracBilgi[aracid][aracYarat], AracBilgi[aracid][aracPlaka]);
		SetVehicleVirtualWorld(AracBilgi[aracid][aracYarat], AracBilgi[aracid][aracWorld]);
		LinkVehicleToInterior(AracBilgi[aracid][aracYarat], AracBilgi[aracid][aracInt]);
		AracMotor[AracBilgi[aracid][aracYarat]] = false;
		AracCamDurum[AracBilgi[aracid][aracYarat]] = true;
		if(AracBilgi[aracid][aracFiyat] > 0) {
	 		new Float:fX, Float:fY, Float:fZ, iletisimbilgi[256];
			GetVehicleBoot(AracBilgi[aracid][aracYarat], fX, fY, fZ);
			format(iletisimbilgi, sizeof(iletisimbilgi), "SATILIK!\n%s\n%s", NumaraFormati(AracBilgi[aracid][aracFiyat]), AracBilgi[aracid][aracIletisim]);
			AracBilgi[aracid][aracIlan] = CreateDynamic3DTextLabel(iletisimbilgi, RENK_YESIL, fX, fY, fZ, ISIM_MESAFESI, INVALID_PLAYER_ID, AracBilgi[aracid][aracYarat], 1);
		}
		switch(AracBilgi[aracid][aracZirh]) {
			case 1: AracZirh[AracBilgi[aracid][aracYarat]] = ARAC_ZIRH_SEVIYE1;
			case 2: AracZirh[AracBilgi[aracid][aracYarat]] = ARAC_ZIRH_SEVIYE2;
			case 3: AracZirh[AracBilgi[aracid][aracYarat]] = ARAC_ZIRH_SEVIYE3;
			case 4: AracZirh[AracBilgi[aracid][aracYarat]] = ARAC_ZIRH_SEVIYE4;
			default: AracZirh[AracBilgi[aracid][aracYarat]] = 0;
		}
 		if(Arac_BirlikTuru(AracBilgi[aracid][aracYarat]) == BIRLIK_MEDIKAL) {
		    AracBilgi[aracid][aracKM] = 0.0;
		    AracBilgi[aracid][aracBenzin] = 100.0;
		}
		if(Arac_BirlikTuru(AracBilgi[aracid][aracYarat]) == BIRLIK_POLIS) {
		    AracBilgi[aracid][aracKM] = 0.0;
		    AracBilgi[aracid][aracBenzin] = 100.0;
		}
		if(!isnull(AracBilgi[aracid][aracYazi])) {
			if(IsValidDynamic3DTextLabel(AracBilgi[aracid][aracText])) DestroyDynamic3DTextLabel(AracBilgi[aracid][aracText]), AracBilgi[aracid][aracText] = Text3D:INVALID_3DTEXT_ID;
			aractabeladurum[AracBilgi[aracid][aracYarat]] = 0;
		    AracBilgi[aracid][aracYazi][0] = 0;
		}
        if(AracBilgi[aracid][aracYarat] != INVALID_VEHICLE_ID)
        {
            if(AracBilgi[aracid][aracPaintjob] != -1) ChangeVehiclePaintjob(AracBilgi[aracid][aracYarat], AracBilgi[aracid][aracPaintjob]);
            SetVehicleHealth(AracBilgi[aracid][aracYarat], 999.9);
			for(new i = 0; i <= 13; i++) if(AracBilgi[aracid][aracModifiye][i] != 0) AddVehicleComponent(AracBilgi[aracid][aracYarat], AracBilgi[aracid][aracModifiye][i]);
            KamyoncuYuk[AracBilgi[aracid][aracYarat]] = -1;
            KamyoncuCP[AracBilgi[aracid][aracYarat]] = -1;
            KamyoncuHileKontrol[AracBilgi[aracid][aracYarat]] = gettime();
			if(AracBilgi[aracid][aracKilit])
			{
			    new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(AracBilgi[aracid][aracYarat], engine, lights, alarm, doors, bonnet, boot, objective);
			    SetVehicleParamsEx(AracBilgi[aracid][aracYarat], engine, lights, alarm, 1, bonnet, boot, objective);
			}
			return 1;
		}
	}
	return 0;
}

stock Arac_Yarat(sahipid, modelid, Float:x, Float:y, Float:z, Float:angle, renk1, renk2)
{
    for(new i = 0; i != MAKSIMUM_ARAC; i ++)
	{
		if(!AracBilgi[i][aracKullanimda])
   		{
   		    if(renk1 == -1) renk1 = random(255);
			if(renk2 == -1) renk2 = random(255);

	        x += 5.0 * floatsin(-angle, degrees);
	        y += 5.0 * floatcos(-angle, degrees);

   		    AracBilgi[i][aracKullanimda] = true;
            AracBilgi[i][aracModel] = modelid;
			AracBilgi[i][aracTur] = 0;
            AracBilgi[i][aracSahip] = sahipid;
            AracBilgi[i][aracBirlik] = -1;

            AracBilgi[i][aracPos][0] = x;
            AracBilgi[i][aracPos][1] = y;
            AracBilgi[i][aracPos][2] = z;
            AracBilgi[i][aracPos][3] = angle;

            AracBilgi[i][aracRenk1] = renk1;
            AracBilgi[i][aracRenk2] = renk2;
            AracBilgi[i][aracPaintjob] = -1;
            AracBilgi[i][aracKilit] = false;
            format(AracBilgi[i][aracYazi], 128, "");
            AracBilgi[i][aracAnahtar] = 0;
            AracBilgi[i][aracKiralik] = 0;
			AracBilgi[i][aKiraUcret] = 0;
			AracBilgi[i][aracKM] = 0.0;
            AracBilgi[i][aracBenzin] = 100.0;
            AracBilgi[i][aracZirh] = 0;
            AracBilgi[i][aracTamirde] = 0;
            AracBilgi[i][aracArizaTur] = 0;
            AracBilgi[i][aracDurum] = 1;
            AracBilgi[i][aracVergi] = 0;
            AracBilgi[i][uberLisans] = 0;
			AracBilgi[i][aTaksiMetreDurum] = false;
			AracBilgi[i][aTaksiMetre] = 0.0;
			AracBilgi[i][aracGuvenlik] = 1;
			if(SQL_AktiflikKontrol(sahipid) != -1) {
				AracBilgi[i][aracInt] = GetPlayerInterior(SQL_AktiflikKontrol(sahipid));
				AracBilgi[i][aracWorld] = GetPlayerVirtualWorld(SQL_AktiflikKontrol(sahipid));
			}
			else {
				AracBilgi[i][aracInt] = 0;
				AracBilgi[i][aracWorld] = 0;
			}
			if(SQL_AktiflikKontrol(sahipid) != -1 && Oyuncu_Isyerinde(SQL_AktiflikKontrol(sahipid)) != -1) {
			    new isy_id = Oyuncu_Isyerinde(SQL_AktiflikKontrol(sahipid));
			    if(IsyeriBilgi[isy_id][isyeriTur] == 4 || IsyeriBilgi[isy_id][isyeriTur] == 11 || IsyeriBilgi[isy_id][isyeriTur] == 12 || IsyeriBilgi[isy_id][isyeriTur] == 13 || IsyeriBilgi[isy_id][isyeriTur] == 14) {
					AracBilgi[i][aracInt] = 0;
					AracBilgi[i][aracWorld] = 0;
				}
			}
			if(IsValidVehicle(AracBilgi[i][aracYarat])) DestroyVehicle(AracBilgi[i][aracYarat]), AracBilgi[i][aracYarat] = INVALID_VEHICLE_ID;
            AracBilgi[i][aracYarat] = CreateVehicle(modelid, x, y, z, angle, renk1, renk2, -1);
		    AracSonPos[AracBilgi[i][aracYarat]][0] = x;
			AracSonPos[AracBilgi[i][aracYarat]][1] = y;
			AracSonPos[AracBilgi[i][aracYarat]][2] = z;
			switch(AracBilgi[i][aracZirh]) {
				case 1: AracZirh[AracBilgi[i][aracYarat]] = ARAC_ZIRH_SEVIYE1;
				case 2: AracZirh[AracBilgi[i][aracYarat]] = ARAC_ZIRH_SEVIYE2;
				case 3: AracZirh[AracBilgi[i][aracYarat]] = ARAC_ZIRH_SEVIYE3;
				case 4: AracZirh[AracBilgi[i][aracYarat]] = ARAC_ZIRH_SEVIYE4;
				default: AracZirh[AracBilgi[i][aracYarat]] = 0;
			}
            SetVehicleHealth(AracBilgi[i][aracYarat], 999.9);
            AracMotor[AracBilgi[i][aracYarat]] = false;
			SetVehicleVirtualWorld(AracBilgi[i][aracYarat], AracBilgi[i][aracWorld]);
			LinkVehicleToInterior(AracBilgi[i][aracYarat], AracBilgi[i][aracInt]);
			for(new m = 0; m <= 13; m++) AracBilgi[i][aracModifiye][m] = 0;
            mysql_tquery(mysqlB, "INSERT INTO `araclar` (`aracModel`) VALUES(0)", "AracYaratildi", "d", i);
            return i;
		}
	}
	return -1;
}

stock Arac_Sil(aracid)
{
    if(aracid != -1 && AracBilgi[aracid][aracKullanimda])
	{
	    new sorgu[256];
		format(sorgu, sizeof(sorgu), "DELETE FROM `araclar` WHERE `aracid` = '%d'", AracBilgi[aracid][aracID]);
		mysql_tquery(mysqlB, sorgu);

		if(aractabeladurum[aracid] == 1)
		{
	 		if(IsValidDynamic3DTextLabel(AracBilgi[aracid][aracText])) DestroyDynamic3DTextLabel(AracBilgi[aracid][aracText]), AracBilgi[aracid][aracText] = Text3D:INVALID_3DTEXT_ID;
		    aractabeladurum[AracBilgi[aracid][aracYarat]] = 0;
		    AracBilgi[aracid][aracYazi][0] = 0;
		}
		if(AracBilgi[aracid][aracSatilik] > 0) {
			AracBilgi[aracid][aracIletisim][0] = 0;
			AracBilgi[aracid][aracSatilik] = 0;
			AracBilgi[aracid][aracFiyat] = 0;
			if(IsValidDynamic3DTextLabel(AracBilgi[aracid][aracIlan])) DestroyDynamic3DTextLabel(AracBilgi[aracid][aracIlan]), AracBilgi[aracid][aracIlan] = Text3D:INVALID_3DTEXT_ID;
		}
		for(new m = 0; m <= 13; m++) AracBilgi[aracid][aracModifiye][m] = 0;
		if(AracBilgi[aracid][aracGaraj] > 0) for(new i = 0; i < MAKSIMUM_GARAJ; i++) if(AracBilgi[aracid][aracGaraj] == GarajBilgi[i][garajID]) { Garaj_Yenile(i); break; }
		format(sorgu, sizeof(sorgu), "SELECT * FROM bagaj WHERE esyaArac = '%d'", AracBilgi[aracid][aracID]);
		mysql_tquery(mysqlB, sorgu, "BagajSifirla");
		if(IsValidVehicle(AracBilgi[aracid][aracYarat])) DestroyVehicle(AracBilgi[aracid][aracYarat]), AracBilgi[aracid][aracYarat] = INVALID_VEHICLE_ID;
        AracBilgi[aracid][aracKullanimda] = false;
        AracBilgi[aracid][aracBirlik] = 0;
	    AracBilgi[aracid][aracID] = 0;
	    AracBilgi[aracid][aracSahip] = 0;
	    AracBilgi[aracid][aracYarat] = 0;
	    AracBilgi[aracid][aracVergi] = 0;
	    AracBilgi[aracid][aracZirh] = 0;
	    AracBilgi[aracid][aracGaraj] = 0;
	}
	return 1;
}

stock Arac_Kaydet(aracid)
{
	if(IsValidVehicle(AracBilgi[aracid][aracYarat])) for(new i = 0; i <= 13; i++) AracBilgi[aracid][aracModifiye][i] = GetVehicleComponentInSlot(AracBilgi[aracid][aracYarat], i);

	new sorgu[2184];
	format(sorgu, sizeof(sorgu), "UPDATE `araclar` SET `aracModel` = '%d', `aracPlaka` = '%s', `aracSahip` = '%d', `aracPosX` = '%.4f', `aracPosY` = '%.4f', `aracPosZ` = '%.4f', `aracPosR` = '%.4f', `aracRenk1` = '%d', `aracRenk2` = '%d', `aracPaintjob` = '%d', `aracKilit` = '%d', `aracGuvenlik` = '%d'",
        AracBilgi[aracid][aracModel],
        AracBilgi[aracid][aracPlaka],
        AracBilgi[aracid][aracSahip],
        AracBilgi[aracid][aracPos][0],
        AracBilgi[aracid][aracPos][1],
        AracBilgi[aracid][aracPos][2],
        AracBilgi[aracid][aracPos][3],
        AracBilgi[aracid][aracRenk1],
        AracBilgi[aracid][aracRenk2],
        AracBilgi[aracid][aracPaintjob],
        AracBilgi[aracid][aracKilit],
        AracBilgi[aracid][aracGuvenlik]
	);
	format(sorgu, sizeof(sorgu), "%s, `AracTamirde` = '%d', `AracArizaTur` = '%d'",
	    sorgu,
	    AracBilgi[aracid][aracTamirde],
	    AracBilgi[aracid][aracArizaTur]
	);
	format(sorgu, sizeof(sorgu), "%s, `Modifiyeler` = '%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d'",
		sorgu,
		AracBilgi[aracid][aracModifiye][0],
		AracBilgi[aracid][aracModifiye][1],
		AracBilgi[aracid][aracModifiye][2],
		AracBilgi[aracid][aracModifiye][3],
		AracBilgi[aracid][aracModifiye][4],
		AracBilgi[aracid][aracModifiye][5],
		AracBilgi[aracid][aracModifiye][6],
		AracBilgi[aracid][aracModifiye][7],
		AracBilgi[aracid][aracModifiye][8],
		AracBilgi[aracid][aracModifiye][9],
		AracBilgi[aracid][aracModifiye][10],
		AracBilgi[aracid][aracModifiye][11],
		AracBilgi[aracid][aracModifiye][12],
		AracBilgi[aracid][aracModifiye][13]
	);
	format(sorgu, sizeof(sorgu), "%s, `aracBirlik` = '%d', `aracTur` = '%d', `Anahtar` = '%d', `Kiralik` = '%d', `KiraUcret` = '%d', `KiraZaman` = '%d', `Durum` = '%d', `Vergi` = '%d', `Fiyat` = '%d', `Iletisim` = '%s'",
		sorgu,
		AracBilgi[aracid][aracBirlik],
		AracBilgi[aracid][aracTur],
		AracBilgi[aracid][aracAnahtar],
		AracBilgi[aracid][aracKiralik],
		AracBilgi[aracid][aKiraUcret],
		AracBilgi[aracid][aKiraZaman],
		AracBilgi[aracid][aracDurum],
		AracBilgi[aracid][aracVergi],
		AracBilgi[aracid][aracFiyat],
		SQL_ReturnEscaped(AracBilgi[aracid][aracIletisim])
	);
	format(sorgu, sizeof(sorgu), "%s, `aracWorld` = '%d', `aracInt` = '%d', `aracKM` = '%.2f', `aracBenzin` = '%.2f', `aracZirh` = '%d', `Baglama` = '%d', `Garaj` = '%d', `UberLisans` = '%d', `AracVip` = '%d' WHERE `aracID` = '%d'",
		sorgu,
		AracBilgi[aracid][aracWorld],
		AracBilgi[aracid][aracInt],
		AracBilgi[aracid][aracKM],
        AracBilgi[aracid][aracBenzin],
        AracBilgi[aracid][aracZirh],
        AracBilgi[aracid][aracBaglama],
        AracBilgi[aracid][aracGaraj],
        AracBilgi[aracid][uberLisans],
        AracBilgi[aracid][aracVip],
		AracBilgi[aracid][aracID]
	);
	return mysql_tquery(mysqlB, sorgu);
}

stock Mobilya_Yarat(playerid, model)
{
	if(Oyuncu_Evde(playerid) == -1) return HataMesaji(playerid, "Bir sorun oluþtu.");

	new Float:x, Float:y, Float:z, Float:angle;
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i < MAKSIMUM_MOBILYA; i ++) if(!MobilyaBilgi[i][mobilyaKullanimda])
		{
		    MobilyaBilgi[i][mobilyaKullanimda] = true;
			MobilyaBilgi[i][mobilyaModel] = model;
			MobilyaBilgi[i][mobilyaEv] = EvBilgi[Oyuncu_Evde(playerid)][evID];

			MobilyaBilgi[i][mobilyaPos][0] = x + (3.0 * floatsin(-angle, degrees));
			MobilyaBilgi[i][mobilyaPos][1] = y + (3.0 * floatcos(-angle, degrees));
			MobilyaBilgi[i][mobilyaPos][2] = z;
			MobilyaBilgi[i][mobilyaPos][3] = 0.0;
			MobilyaBilgi[i][mobilyaPos][4] = 0.0;
			MobilyaBilgi[i][mobilyaPos][5] = angle;

            MobilyaBilgi[i][mobilyaInt] = GetPlayerInterior(playerid);
            MobilyaBilgi[i][mobilyaVW] = GetPlayerVirtualWorld(playerid);
            MobilyaBilgi[i][mobilyaYarat] = CreateDynamicObject(MobilyaBilgi[i][mobilyaModel], MobilyaBilgi[i][mobilyaPos][0], MobilyaBilgi[i][mobilyaPos][1], MobilyaBilgi[i][mobilyaPos][2], MobilyaBilgi[i][mobilyaPos][3], MobilyaBilgi[i][mobilyaPos][4], MobilyaBilgi[i][mobilyaPos][5], MobilyaBilgi[i][mobilyaVW], MobilyaBilgi[i][mobilyaInt]);

			mysql_tquery(mysqlB, "INSERT INTO `mobilyalar` (`Model`) VALUES(0)", "MobilyaYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Mobilya_Sil(mobilyaid)
{
	if(mobilyaid != -1 && MobilyaBilgi[mobilyaid][mobilyaKullanimda])
	{
		new query[64];
		format(query, sizeof(query), "DELETE FROM `mobilyalar` WHERE `ID` = '%d'", MobilyaBilgi[mobilyaid][mobilyaID]);
		mysql_tquery(mysqlB, query);

		if(IsValidDynamicObject(MobilyaBilgi[mobilyaid][mobilyaYarat])) DestroyDynamicObject(MobilyaBilgi[mobilyaid][mobilyaYarat]), MobilyaBilgi[mobilyaid][mobilyaYarat] = INVALID_OBJECT_ID;

	    MobilyaBilgi[mobilyaid][mobilyaKullanimda] = false;
	    MobilyaBilgi[mobilyaid][mobilyaID] = 0;
	}
	return 1;
}

stock Mobilya_Kaydet(mobilyaid)
{
	new query[1280];
	format(query, sizeof(query), "UPDATE `mobilyalar` SET `mobilyaX` = '%.4f', `mobilyaY` = '%.4f', `mobilyaZ` = '%.4f', `mobilyaRX` = '%.4f', `mobilyaRY` = '%.4f', `mobilyaRZ` = '%.4f', `Interior` = '%d', `Virtualworld` = '%d'",
	    MobilyaBilgi[mobilyaid][mobilyaPos][0],
	    MobilyaBilgi[mobilyaid][mobilyaPos][1],
	    MobilyaBilgi[mobilyaid][mobilyaPos][2],
	    MobilyaBilgi[mobilyaid][mobilyaPos][3],
	    MobilyaBilgi[mobilyaid][mobilyaPos][4],
	    MobilyaBilgi[mobilyaid][mobilyaPos][5],
	    MobilyaBilgi[mobilyaid][mobilyaInt],
	    MobilyaBilgi[mobilyaid][mobilyaVW]
	);
	format(query, sizeof(query), "%s, `Ev` = '%d', `Model` = '%d' WHERE `ID` = '%d'",
		query,
		MobilyaBilgi[mobilyaid][mobilyaEv],
		MobilyaBilgi[mobilyaid][mobilyaModel],
		MobilyaBilgi[mobilyaid][mobilyaID]
	);
	return mysql_tquery(mysqlB, query);
}

stock Mobilyalari_Sifirla(evid)
{
	if(!EvBilgi[evid][evKullanimda]) return -1;

	new sayi = 0;
	for(new i = 0; i < MAKSIMUM_MOBILYA; i ++) if(MobilyaBilgi[i][mobilyaKullanimda] && EvBilgi[evid][evID] == MobilyaBilgi[i][mobilyaEv]) Mobilya_Sil(i), sayi++;
	return sayi;
}

stock Mobilya_Sayi(evid)
{
	if(!EvBilgi[evid][evKullanimda]) return -1;

	new sayi = 0;
	for(new i = 0; i < MAKSIMUM_MOBILYA; i ++) if(MobilyaBilgi[i][mobilyaKullanimda] && EvBilgi[evid][evID] == MobilyaBilgi[i][mobilyaEv]) sayi++;
	return sayi;
}

stock Arac_Sayi(oyuncuid)
{
	new sayi = 0;
	for(new i = 0; i < MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracKullanimda] && Arac_SahipKontrol(oyuncuid, i)) sayi++;
	return sayi;
}

stock Ev_Sayi(oyuncuid)
{
	new sayi = 0;
	for(new i = 0; i < MAKSIMUM_EV; i ++) if(EvBilgi[i][evKullanimda] && EvBilgi[i][evSahip] == OyuncuBilgi[oyuncuid][oID]) sayi++;
	return sayi;
}

stock Yaris_ID(oyuncuid)
{
	for(new i = 0; i < MAKSIMUM_YARIS; i ++) if(YarisBilgi[i][yarisKullanimda] == true && YarisBilgi[i][yarisSahip] == oyuncuid) return i;
	return -1;
}

stock Paintball_ID(oyuncuid)
{
	for(new i = 0; i < MAKSIMUM_PAINTBALL; i ++) if(PaintballBilgi[i][pKullanimda] == true && PaintballBilgi[i][paintballSahip] == oyuncuid) return i;
	return -1;
}

stock Paintball_Arena(oyuncuid)
{
	new id = OyuncuBilgi[oyuncuid][oPaintball];
	if(id == -1) return HataMesaji(oyuncuid, "Sistemde bir sorun oluþtu.");
	ResetPlayerWeapons(oyuncuid);
	ClearAnimations(oyuncuid);
	printf("veriyoz");
	GivePlayerWeapon(oyuncuid, 24, 400);
	GivePlayerWeapon(oyuncuid, 29, 600);
	GivePlayerWeapon(oyuncuid, 31, 600);
	SetPlayerArmedWeapon(oyuncuid, 0);
	printf("verdik");
	switch(PaintballBilgi[id][paintballArena]) {
		case 1: {
		    switch(random(6)) {
				case 0: OyuncuPosDegistir(oyuncuid, 1285.07, -27.52, 1001.02);
				case 1: OyuncuPosDegistir(oyuncuid, 1253.5195, -39.1434, 1001.0325);
				case 2: OyuncuPosDegistir(oyuncuid, 1305.6602, -38.1477, 1001.0331);
				case 3: OyuncuPosDegistir(oyuncuid, 1282.4515, -38.0350, 1001.0156);
				case 4: OyuncuPosDegistir(oyuncuid, 1274.3019, -19.3002, 1001.0245);
				case 5: OyuncuPosDegistir(oyuncuid, 1249.1104, 6.9050, 1001.0368);
				case 6: OyuncuPosDegistir(oyuncuid, 1305.4635, 4.0876, 1001.0273);
			}
			SetPlayerInterior(oyuncuid, 18);
		}
		case 2: {
		    switch(random(10)) {
				case 0: OyuncuPosDegistir(oyuncuid, 235.57, 148.58, 1003.03);
				case 1: OyuncuPosDegistir(oyuncuid, 211.2498, 142.0692, 1003.0234);
				case 2: OyuncuPosDegistir(oyuncuid, 230.6031, 167.0981, 1003.0234);
				case 3: OyuncuPosDegistir(oyuncuid, 227.7509, 181.2748, 1003.0313);
				case 4: OyuncuPosDegistir(oyuncuid, 238.4735, 195.6022, 1008.1719);
				case 5: OyuncuPosDegistir(oyuncuid, 190.7482, 158.1293, 1003.0234);
				case 6: OyuncuPosDegistir(oyuncuid, 201.5955, 157.3405, 1003.0234);
				case 7: OyuncuPosDegistir(oyuncuid, 189.5198, 179.4306, 1003.0234);
				case 8: OyuncuPosDegistir(oyuncuid, 291.7581, 179.0513, 1007.1794);
				case 9: OyuncuPosDegistir(oyuncuid, 268.1201, 185.0192, 1008.1719);
				case 10: OyuncuPosDegistir(oyuncuid, 273.2270, 172.7714, 1007.6719);
			}
			SetPlayerInterior(oyuncuid, 3);
		}
		case 3: {
		    switch(random(8)) {
				case 0: OyuncuPosDegistir(oyuncuid, -1130.01, 1057.73, 1346.41);
				case 1: OyuncuPosDegistir(oyuncuid, -1069.1945, 1091.2327, 1343.3479);
				case 2: OyuncuPosDegistir(oyuncuid, -973.7474, 1089.6874, 1344.9832);
				case 3: OyuncuPosDegistir(oyuncuid, -1081.4390, 1049.2577, 1343.3558);
				case 4: OyuncuPosDegistir(oyuncuid, -1131.0063, 1028.9457, 1345.7272);
				case 5: OyuncuPosDegistir(oyuncuid, -1057.3088, 1020.7184, 1343.7584);
				case 6: OyuncuPosDegistir(oyuncuid, -1008.6946, 1021.8956, 1341.0078);
				case 7: OyuncuPosDegistir(oyuncuid, -973.8183, 1061.1798, 1345.6732);
				case 8: OyuncuPosDegistir(oyuncuid, -1041.9174, 1064.8284, 1346.5060);
			}
			SetPlayerInterior(oyuncuid, 10);
		}
	}
	SetPlayerVirtualWorld(oyuncuid, id);
	CanDuzenle(oyuncuid, 100);
	ZirhDuzenle(oyuncuid, 0);
	SetCameraBehindPlayer(oyuncuid);
	DondurulmaEtkisi(oyuncuid);
	return 1;
}

stock Dolap_Olustur(playerid, model)
{
	new Float:x, Float:y, Float:z, Float:angle;
	if(Oyuncu_Evde(playerid) == -1) { HataMesaji(playerid, "Bir sorun oluþtu."); return -1; }
	
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i < MAKSIMUM_DOLAP; i ++) if(!DolapBilgi[i][dolapKullanimda])
		{
		    DolapBilgi[i][dolapKullanimda] = true;
			DolapBilgi[i][dolapModel] = model;
			DolapBilgi[i][dolapEv] = EvBilgi[Oyuncu_Evde(playerid)][evID];
            for (new s = 0; s < 13; s++) DolapBilgi[i][dolapKiyafet][s] = 0;
			DolapBilgi[i][dolapPos][0] = x + (3.0 * floatsin(-angle, degrees));
			DolapBilgi[i][dolapPos][1] = y + (3.0 * floatcos(-angle, degrees));
			DolapBilgi[i][dolapPos][2] = z;
			DolapBilgi[i][dolapPos][3] = 0.0;
			DolapBilgi[i][dolapPos][4] = 0.0;
			DolapBilgi[i][dolapPos][5] = angle;

            DolapBilgi[i][dolapInt] = GetPlayerInterior(playerid);
            DolapBilgi[i][dolapVW] = GetPlayerVirtualWorld(playerid);
            DolapBilgi[i][dolapObje] = CreateDynamicObject(DolapBilgi[i][dolapModel], DolapBilgi[i][dolapPos][0], DolapBilgi[i][dolapPos][1], DolapBilgi[i][dolapPos][2], DolapBilgi[i][dolapPos][3], DolapBilgi[i][dolapPos][4], DolapBilgi[i][dolapPos][5], DolapBilgi[i][dolapVW], DolapBilgi[i][dolapInt]);
            
			mysql_tquery(mysqlB, "INSERT INTO `dolaplar` (`dolapModel`) VALUES(0)", "DolapYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Dolap_Kaldir(id)
{
	if(id != -1 && DolapBilgi[id][dolapKullanimda])
	{
		new query[64];
		format(query, sizeof(query), "DELETE FROM `dolaplar` WHERE `dolapID` = '%d'", DolapBilgi[id][dolapID]);
		mysql_tquery(mysqlB, query);

        if(IsValidDynamic3DTextLabel(DolapBilgi[id][dolapText])) DestroyDynamic3DTextLabel(DolapBilgi[id][dolapText]), DolapBilgi[id][dolapText] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicObject(DolapBilgi[id][dolapObje])) DestroyDynamicObject(DolapBilgi[id][dolapObje]), DolapBilgi[id][dolapObje] = INVALID_OBJECT_ID;

	    DolapBilgi[id][dolapKullanimda] = false;
	    DolapBilgi[id][dolapID] = 0;
	    for (new s = 0; s < 13; s++) DolapBilgi[id][dolapKiyafet][s] = 0;
	}
	return 1;
}

stock Dolap_Kaydet(id)
{
	new kaydet_sorgu[2048];
	format(kaydet_sorgu, sizeof(kaydet_sorgu), "UPDATE `dolaplar` SET `dolapModel` = '%d', `dolapX` = '%.4f', `dolapY` = '%.4f', `dolapZ` = '%.4f', `dolapRX` = '%.4f', `dolapRY` = '%.4f', `dolapRZ` = '%.4f', `dolapInt` = '%d', `dolapWorld` = '%d', `dolapKiyafetler` = '",
		DolapBilgi[id][dolapModel],
	    DolapBilgi[id][dolapPos][0],
	    DolapBilgi[id][dolapPos][1],
	    DolapBilgi[id][dolapPos][2],
	    DolapBilgi[id][dolapPos][3],
	    DolapBilgi[id][dolapPos][4],
	    DolapBilgi[id][dolapPos][5],
	    DolapBilgi[id][dolapInt],
	    DolapBilgi[id][dolapVW]
	);
	for(new s = 0; s != 13; s++) {
		format(kaydet_sorgu, sizeof(kaydet_sorgu), "%s%d", kaydet_sorgu, DolapBilgi[id][dolapKiyafet][s]);
		if(s != 13) strcat(kaydet_sorgu, "|");
	}
	format(kaydet_sorgu, sizeof(kaydet_sorgu), "%s', `dolapEv` = '%d' WHERE `dolapID` = '%d'",
		kaydet_sorgu,
		DolapBilgi[id][dolapEv],
		DolapBilgi[id][dolapID]
	);
	return mysql_tquery(mysqlB, kaydet_sorgu);
}

stock Obje_Yarat(playerid, model)
{
	new Float:x, Float:y, Float:z, Float:angle;

	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i < MAKSIMUM_OBJE; i ++) if(!ObjeBilgi[i][objeKullanimda])
		{
		    ObjeBilgi[i][objeKullanimda] = true;
			ObjeBilgi[i][objeModel] = model;
			ObjeBilgi[i][objeSahip] = 0;
			ObjeBilgi[i][objeBirlik] = 0;

			ObjeBilgi[i][objePos][0] = x + (3.0 * floatsin(-angle, degrees));
			ObjeBilgi[i][objePos][1] = y + (3.0 * floatcos(-angle, degrees));
			ObjeBilgi[i][objePos][2] = z;
			ObjeBilgi[i][objePos][3] = 0.0;
			ObjeBilgi[i][objePos][4] = 0.0;
			ObjeBilgi[i][objePos][5] = angle;

            ObjeBilgi[i][objeInterior] = GetPlayerInterior(playerid);
            ObjeBilgi[i][objeWorld] = GetPlayerVirtualWorld(playerid);
            ObjeBilgi[i][objeYarat] = CreateDynamicObject(ObjeBilgi[i][objeModel], ObjeBilgi[i][objePos][0], ObjeBilgi[i][objePos][1], ObjeBilgi[i][objePos][2], ObjeBilgi[i][objePos][3], ObjeBilgi[i][objePos][4], ObjeBilgi[i][objePos][5], ObjeBilgi[i][objeWorld], ObjeBilgi[i][objeInterior]);

			mysql_tquery(mysqlB, "INSERT INTO `objeler` (`objeModel`) VALUES(0)", "ObjeYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Obje_Sil(objeid)
{
	if(objeid != -1 && ObjeBilgi[objeid][objeKullanimda])
	{
		new query[64];
		format(query, sizeof(query), "DELETE FROM `objeler` WHERE `objeID` = '%d'", ObjeBilgi[objeid][objeID]);
		mysql_tquery(mysqlB, query);

		if(IsValidDynamicObject(ObjeBilgi[objeid][objeYarat])) DestroyDynamicObject(ObjeBilgi[objeid][objeYarat]), ObjeBilgi[objeid][objeYarat] = INVALID_OBJECT_ID;

	    ObjeBilgi[objeid][objeKullanimda] = false;
	    ObjeBilgi[objeid][objeID] = 0;
	}
	return 1;
}

stock Obje_Kaydet(objeid)
{
	new query[1280];
	format(query, sizeof(query), "UPDATE `objeler` SET `objeModel` = '%d', `objeX` = '%.4f', `objeY` = '%.4f', `objeZ` = '%.4f', `objeRX` = '%.4f', `objeRY` = '%.4f', `objeRZ` = '%.4f', `objeInterior` = '%d', `objeWorld` = '%d'",
		ObjeBilgi[objeid][objeModel],
	    ObjeBilgi[objeid][objePos][0],
	    ObjeBilgi[objeid][objePos][1],
	    ObjeBilgi[objeid][objePos][2],
	    ObjeBilgi[objeid][objePos][3],
	    ObjeBilgi[objeid][objePos][4],
	    ObjeBilgi[objeid][objePos][5],
	    ObjeBilgi[objeid][objeInterior],
	    ObjeBilgi[objeid][objeWorld]
	);
	format(query, sizeof(query), "%s, `objeSahip` = '%d', `objeBirlik` = '%d' WHERE `objeID` = '%d'",
		query,
		ObjeBilgi[objeid][objeSahip],
		ObjeBilgi[objeid][objeBirlik],
		ObjeBilgi[objeid][objeID]
	);
	return mysql_tquery(mysqlB, query);
}

stock Gise_Yarat(playerid)
{
	new Float:x, Float:y, Float:z, Float:angle;
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i < MAKSIMUM_GISE; i ++) if(!GiseBilgi[i][giseKullanimda])
		{
		    GiseBilgi[i][giseKullanimda] = true;
			GiseBilgi[i][giseModel] = 980;
			GiseBilgi[i][giseHiz] = 3.0;
			GiseBilgi[i][giseMenzil] = 5.0;
			GiseBilgi[i][giseDurum] = 0;

			GiseBilgi[i][gisePos][0] = x + (3.0 * floatsin(-angle, degrees));
			GiseBilgi[i][gisePos][1] = y + (3.0 * floatcos(-angle, degrees));
			GiseBilgi[i][gisePos][2] = z;
			GiseBilgi[i][gisePos][3] = 0.0;
			GiseBilgi[i][gisePos][4] = 0.0;
			GiseBilgi[i][gisePos][5] = angle;

			GiseBilgi[i][giseAcilis][0] = x + (3.0 * floatsin(-angle, degrees));
			GiseBilgi[i][giseAcilis][1] = y + (3.0 * floatcos(-angle, degrees));
			GiseBilgi[i][giseAcilis][2] = z - 10.0;
			GiseBilgi[i][giseAcilis][3] = -1000.0;
			GiseBilgi[i][giseAcilis][4] = -1000.0;
			GiseBilgi[i][giseAcilis][5] = -1000.0;
			GiseBilgi[i][giseUcret] = 0;

            GiseBilgi[i][giseObje] = CreateDynamicObject(GiseBilgi[i][giseModel], GiseBilgi[i][gisePos][0], GiseBilgi[i][gisePos][1], GiseBilgi[i][gisePos][2], GiseBilgi[i][gisePos][3], GiseBilgi[i][gisePos][4], GiseBilgi[i][gisePos][5], 0, 0);

			mysql_tquery(mysqlB, "INSERT INTO `giseler` (`giseModel`) VALUES(980)", "GiseYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Gise_Sil(giseid)
{
	if(giseid != -1 && GiseBilgi[giseid][giseKullanimda])
	{
		new sorgu[64];
		format(sorgu, sizeof(sorgu), "DELETE FROM `giseler` WHERE `giseID` = '%d'", GiseBilgi[giseid][giseID]);
		mysql_query(mysqlB, sorgu);

		if(IsValidDynamicObject(GiseBilgi[giseid][giseObje])) DestroyDynamicObject(GiseBilgi[giseid][giseObje]), GiseBilgi[giseid][giseObje] = INVALID_OBJECT_ID;

	    GiseBilgi[giseid][giseKullanimda] = false;
	    GiseBilgi[giseid][giseID] = 0;
	    GiseBilgi[giseid][giseDurum] = 0;
	}
	return 1;
}

stock Gise_Kaydet(giseid)
{
	new query[1280];
	format(query, sizeof(query), "UPDATE `giseler` SET `giseModel` = '%d', `giseHiz` = '%.4f', `giseMenzil` = '%.4f', `giseX` = '%.4f', `giseY` = '%.4f', `giseZ` = '%.4f', `giseRX` = '%.4f', `giseRY` = '%.4f', `giseRZ` = '%.4f'",
		GiseBilgi[giseid][giseModel],
	    GiseBilgi[giseid][giseHiz],
	    GiseBilgi[giseid][giseMenzil],
	    GiseBilgi[giseid][gisePos][0],
	    GiseBilgi[giseid][gisePos][1],
	    GiseBilgi[giseid][gisePos][2],
	    GiseBilgi[giseid][gisePos][3],
	    GiseBilgi[giseid][gisePos][4],
	    GiseBilgi[giseid][gisePos][5]
	);
	format(query, sizeof(query), "%s, `giseAcilisX` = '%.4f', `giseAcilisY` = '%.4f', `giseAcilisZ` = '%.4f', `giseAcilisRX` = '%.4f', `giseAcilisRY` = '%.4f', `giseAcilisRZ` = '%.4f', `giseUcret` = '%d' WHERE `giseID` = '%d'",
		query,
		GiseBilgi[giseid][giseAcilis][0],
	    GiseBilgi[giseid][giseAcilis][1],
	    GiseBilgi[giseid][giseAcilis][2],
	    GiseBilgi[giseid][giseAcilis][3],
	    GiseBilgi[giseid][giseAcilis][4],
	    GiseBilgi[giseid][giseAcilis][5],
	    GiseBilgi[giseid][giseUcret],
		GiseBilgi[giseid][giseID]
	);
	return mysql_tquery(mysqlB, query);
}

stock Gate_Yarat(playerid)
{
	new Float:x, Float:y, Float:z, Float:angle;
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i < MAKSIMUM_GATE; i ++) if(!GateBilgi[i][gateKullanimda])
		{
		    GateBilgi[i][gateKullanimda] = true;
			GateBilgi[i][gateModel] = 980;
			GateBilgi[i][gateSahip] = 0;
			GateBilgi[i][gateHiz] = 3.0;
			GateBilgi[i][gateMenzil] = 5.0;
			GateBilgi[i][gateDurum] = 0;

			GateBilgi[i][gatePos][0] = x + (3.0 * floatsin(-angle, degrees));
			GateBilgi[i][gatePos][1] = y + (3.0 * floatcos(-angle, degrees));
			GateBilgi[i][gatePos][2] = z;
			GateBilgi[i][gatePos][3] = 0.0;
			GateBilgi[i][gatePos][4] = 0.0;
			GateBilgi[i][gatePos][5] = angle;

			GateBilgi[i][gateAcilis][0] = x + (3.0 * floatsin(-angle, degrees));
			GateBilgi[i][gateAcilis][1] = y + (3.0 * floatcos(-angle, degrees));
			GateBilgi[i][gateAcilis][2] = z - 10.0;
			GateBilgi[i][gateAcilis][3] = -1000.0;
			GateBilgi[i][gateAcilis][4] = -1000.0;
			GateBilgi[i][gateAcilis][5] = -1000.0;

            GateBilgi[i][gateInterior] = GetPlayerInterior(playerid);
            GateBilgi[i][gateWorld] = GetPlayerVirtualWorld(playerid);
            GateBilgi[i][gateParola] = 0;

            GateBilgi[i][gateBirlik] = -1;
            GateBilgi[i][gateObje] = CreateDynamicObject(GateBilgi[i][gateModel], GateBilgi[i][gatePos][0], GateBilgi[i][gatePos][1], GateBilgi[i][gatePos][2], GateBilgi[i][gatePos][3], GateBilgi[i][gatePos][4], GateBilgi[i][gatePos][5], GateBilgi[i][gateWorld], GateBilgi[i][gateInterior]);

			mysql_tquery(mysqlB, "INSERT INTO `gateler` (`gateModel`) VALUES(980)", "GateYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Gate_Sil(gateid)
{
	if(gateid != -1 && GateBilgi[gateid][gateKullanimda])
	{
		new sorgu[64];
		format(sorgu, sizeof(sorgu), "DELETE FROM `gateler` WHERE `gateID` = '%d'", GateBilgi[gateid][gateID]);
		mysql_query(mysqlB, sorgu);

		if(IsValidDynamicObject(GateBilgi[gateid][gateObje])) DestroyDynamicObject(GateBilgi[gateid][gateObje]), GateBilgi[gateid][gateObje] = INVALID_OBJECT_ID;

	    GateBilgi[gateid][gateKullanimda] = false;
	    GateBilgi[gateid][gateID] = 0;
	    GateBilgi[gateid][gateDurum] = 0;
	}
	return 1;
}

stock Gate_Kaydet(gateid)
{
	new query[1280];
	format(query, sizeof(query), "UPDATE `gateler` SET `gateModel` = '%d', `gateHiz` = '%.4f', `gateMenzil` = '%.4f', `gateX` = '%.4f', `gateY` = '%.4f', `gateZ` = '%.4f', `gateRX` = '%.4f', `gateRY` = '%.4f', `gateRZ` = '%.4f', `gateInterior` = '%d', `gateWorld` = '%d', `gateAcilisX` = '%.4f', `gateAcilisY` = '%.4f', `gateAcilisZ` = '%.4f', `gateAcilisRX` = '%.4f', `gateAcilisRY` = '%.4f', `gateAcilisRZ` = '%.4f'",
		GateBilgi[gateid][gateModel],
	    GateBilgi[gateid][gateHiz],
	    GateBilgi[gateid][gateMenzil],
	    GateBilgi[gateid][gatePos][0],
	    GateBilgi[gateid][gatePos][1],
	    GateBilgi[gateid][gatePos][2],
	    GateBilgi[gateid][gatePos][3],
	    GateBilgi[gateid][gatePos][4],
	    GateBilgi[gateid][gatePos][5],
	    GateBilgi[gateid][gateInterior],
	    GateBilgi[gateid][gateWorld],
	    GateBilgi[gateid][gateAcilis][0],
	    GateBilgi[gateid][gateAcilis][1],
	    GateBilgi[gateid][gateAcilis][2],
	    GateBilgi[gateid][gateAcilis][3],
	    GateBilgi[gateid][gateAcilis][4],
	    GateBilgi[gateid][gateAcilis][5]
	);
	format(query, sizeof(query), "%s, `gateSahip` = '%d', `gateBirlik` = '%d', `Parola` = '%d' WHERE `gateID` = '%d'",
		query,
		GateBilgi[gateid][gateSahip],
		GateBilgi[gateid][gateBirlik],
		GateBilgi[gateid][gateParola],
		GateBilgi[gateid][gateID]
	);
	return mysql_tquery(mysqlB, query);
}

stock Birim_Sayi(birlikid)
{
	new sayi = 0;
	for(new i = 0; i != MAKSIMUM_BIRIM; i ++) if(BirimBilgi[i][birimKullanimda] == true && BirimBilgi[i][birimBirlik] == BirlikBilgi[birlikid][birlikID]) sayi++;
	return sayi;
}

stock Birim_Yarat(isim[], birlik)
{
	for(new i = 0; i != MAKSIMUM_BIRIM; i ++)
	{
		if(!BirimBilgi[i][birimKullanimda])
		{
			BirimBilgi[i][birimKullanimda] = true;
			format(BirimBilgi[i][birimAd], 32, "%s", isim);
			BirimBilgi[i][birimBirlik] = birlik;
			BirimBilgi[i][birimTur] = 0;
			mysql_tquery(mysqlB, "INSERT INTO `birimler` (`birimTur`) VALUES(0)", "BirimYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Boombox_Yerlestir(playerid)
{
    if(IsValidDynamic3DTextLabel(BoomboxBilgi[playerid][boomboxText3D])) DestroyDynamic3DTextLabel(BoomboxBilgi[playerid][boomboxText3D]), BoomboxBilgi[playerid][boomboxText3D] = Text3D:INVALID_3DTEXT_ID;
	new Float:angle, string[512];
	GetPlayerFacingAngle(playerid, angle);

	strpack(BoomboxBilgi[playerid][boomboxURL], "", 128 char);
	GetPlayerPos(playerid, BoomboxBilgi[playerid][boomboxPos][0], BoomboxBilgi[playerid][boomboxPos][1], BoomboxBilgi[playerid][boomboxPos][2]);

	BoomboxBilgi[playerid][boomboxKullanimda] = true;
	BoomboxBilgi[playerid][boomboxInterior] = GetPlayerInterior(playerid);
	BoomboxBilgi[playerid][boomboxWorld] = GetPlayerVirtualWorld(playerid);
	format(string, sizeof(string), "[Müzik Kutusu]\nYerleþtiren: %s", OyuncuIsim(playerid));
    BoomboxBilgi[playerid][boomboxObje] = CreateDynamicObject(2226, BoomboxBilgi[playerid][boomboxPos][0], BoomboxBilgi[playerid][boomboxPos][1], BoomboxBilgi[playerid][boomboxPos][2] - 0.9, 0.0, 0.0, angle, BoomboxBilgi[playerid][boomboxWorld], BoomboxBilgi[playerid][boomboxInterior]);
    BoomboxBilgi[playerid][boomboxText3D] = CreateDynamic3DTextLabel(string, RENK_SERVER, BoomboxBilgi[playerid][boomboxPos][0], BoomboxBilgi[playerid][boomboxPos][1], BoomboxBilgi[playerid][boomboxPos][2] - 0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BoomboxBilgi[playerid][boomboxWorld], BoomboxBilgi[playerid][boomboxInterior]);
	return 1;
}

stock Label_Yarat(playerid, mesaj[])
{
	new Float:x, Float:y, Float:z;
    if(GetPlayerPos(playerid, x, y, z))
	{
  		for(new i = 0; i != MAKSIMUM_OYUNCU_LABEL; i ++) if(!LabelBilgi[i][labelKullanimda])
		{
			LabelBilgi[i][labelKullanimda] = true;
			format(LabelBilgi[i][labelYazi], 128, "%s (%d)", mesaj, i);
			LabelBilgi[i][labelPos][0] = x - 0.5;
			LabelBilgi[i][labelPos][1] = y;
			LabelBilgi[i][labelPos][2] = z;
			LabelBilgi[i][labelVW] = GetPlayerVirtualWorld(playerid);
			LabelBilgi[i][labelSahip] = playerid;
			LabelBilgi[i][labelID] = CreateDynamic3DTextLabel(mesaj, RENK_BEYAZ, LabelBilgi[i][labelPos][0], LabelBilgi[i][labelPos][1], LabelBilgi[i][labelPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LabelBilgi[i][labelVW]);
			return i;
		}
	}
	return -1;
}

stock Label_Sil(labelid)
{
 if(labelid != -1 && LabelBilgi[labelid][labelKullanimda])
	{
	    LabelBilgi[labelid][labelKullanimda] = false;
	    DestroyDynamic3DTextLabel(LabelBilgi[labelid][labelID]);
	}
	return 1;
}

stock Ekip_Yarat(isim[])
{
	for(new i = 0; i != MAKSIMUM_EKIP; i++)
	{
	    if(!EkipBilgi[i][ekipKullanimda])
	    {
			EkipBilgi[i][ekipKullanimda] = true;
			format(EkipBilgi[i][ekipAd], 32, "%s", isim);
			return i;
	    }
	}
	return -1;
}

stock Birlik_Yarat(isim[])
{
	for(new i = 0; i != MAKSIMUM_BIRLIK; i++)
	{
		if(!BirlikBilgi[i][birlikKullanimda])
		{
			BirlikBilgi[i][birlikKullanimda] = true;
			format(BirlikBilgi[i][birlikAd], 32, "%s", isim);

			BirlikBilgi[i][birlikTur] = BIRLIK_LEGAL;
			BirlikBilgi[i][birlikMaksRutbe] = 6;
			BirlikBilgi[i][bDolapPos][0] = 0.0;
			BirlikBilgi[i][bDolapPos][1] = 0.0;
			BirlikBilgi[i][bDolapPos][2] = 0.0;
			BirlikBilgi[i][birlikPos][0] = 0.0;
			BirlikBilgi[i][birlikPos][1] = 0.0;
			BirlikBilgi[i][birlikPos][2] = 0.0;
			BirlikBilgi[i][birlikPosDurum] = 0;
			BirlikBilgi[i][birlikOnayDurum] = 0;
			BirlikBilgi[i][oKanal] = 0;
			BirlikBilgi[i][birlikLevel] = 1;
			for(new d = 0; d < 8; d++) BirlikBilgi[i][birlikOnay][d] = 0;
			for(new d = 0; d < 20; d++) BirlikBilgi[i][birlikMaas][d] = 0;
			BirlikRutbeleriSifirla(i);

			Birlik_Yenile(i);
			mysql_tquery(mysqlB, "INSERT INTO `birlikler` (`Level`) VALUES(1)", "BirlikYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock SQL_Baglan() {
	new MySQLOpt:m_ayar = mysql_init_options();

    mysql_set_option(m_ayar, AUTO_RECONNECT, true);
	mysqlB = mysql_connect(SQL_HOST, SQL_AD, SQL_SIFRE, SQL_DATABASE, m_ayar);
	if(mysql_errno(mysqlB) != 0) {
	    printf("[SUNUCU] %s adlý hosta baðlantý saðlanamadý.\a", SQL_HOST);
	    return SendRconCommand("exit");
	}
	else printf("[SUNUCU] %s adlý hosta baðlantý saðlandý.", SQL_HOST);

	mysql_log(ERROR | WARNING);
	mysql_set_charset("latin5", mysqlB);
	return true;
}

stock Tarih()
{
	new tarih[36];
	getdate(tarih[2], tarih[1], tarih[0]);
	gettime(tarih[3], tarih[4], tarih[5]);

	format(tarih, sizeof(tarih), "%02d/%02d/%d, %02d:%02d", tarih[0], tarih[1], tarih[2], tarih[3], tarih[4]);
	return tarih;
}

stock SaniyeliTarih()
{
	new tarih[36];
	getdate(tarih[2], tarih[1], tarih[0]);
	gettime(tarih[3], tarih[4], tarih[5]);

	format(tarih, sizeof(tarih), "%02d/%02d/%d, %02d:%02d:%02d", tarih[0], tarih[1], tarih[2], tarih[3], tarih[4], tarih[5]);
	return tarih;
}

stock HesapKontrol(playerid, sifre[])
{
	new query[512], isim[MAX_PLAYER_NAME];
	GetPlayerName(playerid, isim, sizeof(isim));
	strdel(isim, 0, 5);
	format(query, sizeof(query), "SELECT `ID` FROM `hesaplar` WHERE `forumID` = '%s' AND `sifre` = '%s'", isim, MD5_Hash(sifre));
	return mysql_tquery(mysqlB, query, "GirisTest", "d", playerid);
}

stock BirlikRutbeleriSifirla(birlikid) {
	format(BirlikBilgi[birlikid][birlikR1], 32, "Rank 1");
	format(BirlikBilgi[birlikid][birlikR2], 32, "Rank 2");
	format(BirlikBilgi[birlikid][birlikR3], 32, "Rank 3");
	format(BirlikBilgi[birlikid][birlikR4], 32, "Rank 4");
	format(BirlikBilgi[birlikid][birlikR5], 32, "Rank 5");
	format(BirlikBilgi[birlikid][birlikR6], 32, "Rank 6");
	format(BirlikBilgi[birlikid][birlikR7], 32, "Rank 7");
	format(BirlikBilgi[birlikid][birlikR8], 32, "Rank 8");
	format(BirlikBilgi[birlikid][birlikR9], 32, "Rank 9");
	format(BirlikBilgi[birlikid][birlikR10], 32, "Rank 10");
	format(BirlikBilgi[birlikid][birlikR11], 32, "Rank 11");
	format(BirlikBilgi[birlikid][birlikR12], 32, "Rank 12");
	format(BirlikBilgi[birlikid][birlikR13], 32, "Rank 13");
	format(BirlikBilgi[birlikid][birlikR14], 32, "Rank 14");
	format(BirlikBilgi[birlikid][birlikR15], 32, "Rank 15");
	format(BirlikBilgi[birlikid][birlikR16], 32, "Rank 16");
	format(BirlikBilgi[birlikid][birlikR17], 32, "Rank 17");
	format(BirlikBilgi[birlikid][birlikR18], 32, "Rank 18");
	format(BirlikBilgi[birlikid][birlikR19], 32, "Rank 19");
	format(BirlikBilgi[birlikid][birlikR20], 32, "Rank 20");
	return true;
}

stock birlikarat(isim[])
{
	static sayi = 0;
	sayi = 0;
	for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikKullanimda] && !strcmp(BirlikBilgi[i][birlikAd], isim, true)) sayi++;
	return sayi;
}

stock BirlikRutbeDuzenle(playerid)
{
	new birlikid, yazi[2048], ekleme[512];
	birlikid = OyuncuBilgi[playerid][oBirlik];
	if(OyuncuBilgi[playerid][oBirlikRutbe] < BirlikBilgi[birlikid][birlikMaksRutbe]) return HataMesaji(playerid, "Bu iþlem sadece birlik lideri tarafýndan yapýlabilir."), cmd_birlik(playerid, "");
	yazi[0] = 0;
	for(new i = 0; i <= BirlikBilgi[birlikid][birlikMaksRutbe]; i++)
	{
	    if(i == 0) continue;
		switch(i) {
			case 1: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR1]);
			case 2: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR2]);
			case 3: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR3]);
			case 4: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR4]);
			case 5: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR5]);
			case 6: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR6]);
			case 7: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR7]);
			case 8: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR8]);
			case 9: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR9]);
			case 10: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR10]);
			case 11: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR11]);
			case 12: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR12]);
			case 13: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR13]);
			case 14: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR14]);
			case 15: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR15]);
			case 16: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR16]);
			case 17: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR17]);
			case 18: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR18]);
			case 19: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR19]);
			case 20: format(ekleme, sizeof(ekleme), "%s\n", BirlikBilgi[birlikid][birlikR20]);
		}
		strcat(yazi, ekleme, sizeof(ekleme));
	}
	DialogGoster(playerid, DIALOG_BIRLIK_RDUZENLE, DIALOG_STYLE_TABLIST, BirlikBilgi[birlikid][birlikAd], yazi, "Düzenle", "Ýptal");
	return 1;
}

stock BirlikMaasDuzenle(playerid)
{
	new birlikid, yazi[2048], ekleme[512];
	birlikid = OyuncuBilgi[playerid][oBirlik];
	if((BirlikBilgi[birlikid][birlikTur] == BIRLIK_POLIS || BirlikBilgi[birlikid][birlikTur] == BIRLIK_MEDIKAL || BirlikBilgi[birlikid][birlikTur] == BIRLIK_DEVLET) && OyuncuBilgi[playerid][oAdmin] < 7) return HataMesaji(playerid, "Bu birlik türü için Management yetkisi gerekiyor."), cmd_birlik(playerid, "");
	if(OyuncuBilgi[playerid][oBirlikRutbe] < BirlikBilgi[birlikid][birlikMaksRutbe]) return HataMesaji(playerid, "Bu iþlem sadece birlik lideri tarafýndan yapýlabilir."), cmd_birlik(playerid, "");
	if(BirlikBilgi[birlikid][birlikLevel] < 6) return HataMesaji(playerid, "Bu seçenek için birlik leveliniz yetersiz."), cmd_birlik(playerid, "");
	format(yazi, sizeof(yazi), "Rütbe\t\tMaaþ\n");
	for(new i = 0; i <= BirlikBilgi[birlikid][birlikMaksRutbe]; i++)
	{
	    if(i == 0) continue;
		switch(i) {
			case 1: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR1], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][0]));
			case 2: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR2], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][1]));
			case 3: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR3], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][2]));
			case 4: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR4], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][3]));
			case 5: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR5], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][4]));
			case 6: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR6], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][5]));
			case 7: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR7], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][6]));
			case 8: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR8], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][7]));
			case 9: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR9], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][8]));
			case 10: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR10], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][9]));
			case 11: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR11], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][10]));
			case 12: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR12], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][11]));
			case 13: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR13], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][12]));
			case 14: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR14], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][13]));
			case 15: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR15], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][14]));
			case 16: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR16], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][15]));
			case 17: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR17], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][16]));
			case 18: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR18], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][17]));
			case 19: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR19], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][18]));
			case 20: format(ekleme, sizeof(ekleme), "%s\t\t%s\n", BirlikBilgi[birlikid][birlikR20], NumaraFormati(BirlikBilgi[birlikid][birlikMaas][19]));
		}
		strcat(yazi, ekleme, sizeof(ekleme));
	}
	DialogGoster(playerid, DIALOG_BIRLIK_MAAS, DIALOG_STYLE_TABLIST_HEADERS, BirlikBilgi[birlikid][birlikAd], yazi, "Düzenle", "Ýptal");
	return 1;
}

stock birlikturadi(birlikid)
{
	static tur[32];
	switch(BirlikBilgi[birlikid][birlikTur]) {
	    case BIRLIK_POLIS: tur = "Polis";
	    case BIRLIK_MEDIKAL: tur = "Medikal";
	    case BIRLIK_DEVLET: tur = "Devlet";
	    case BIRLIK_HABERAJANSI: tur = "Haber Ajansý";
	    case BIRLIK_LEGAL: tur = "Legal";
	    case BIRLIK_ILLEGAL: tur = "Ýllegal";
	    default: tur = "Belirlenemedi";
	}
	return tur;
}

stock birimturadi(birimid)
{
	new tur[32];
	switch(BirimBilgi[birimid][birimTur]) {
	    case 1: tur = "Polis";
	    case 2: tur = "Medikal";
	    case 3: tur = "Diðer";
	    default: tur = "Normal";
	}
	return tur;
}

stock OyuncuBirlikTuru(oyuncuid)
{
	if(OyuncuBilgi[oyuncuid][oBirlik] > -1) return BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikTur];
	return -1;
}

stock BirlikSifirla(oyuncuid)
{
	if(OyuncuBirlikTuru(oyuncuid) == BIRLIK_HABERAJANSI) {
		for(new i = 0; i != MAKSIMUM_YAYIN; i++) if(YayinBilgi[i][yayinKullanimda] == true && YayinBilgi[i][yayinYapan] == oyuncuid)
		{
		    foreach(new o : Player) if(OyuncuBilgi[o][oGiris] == true && OyuncuBilgi[o][oDinlenenYayin] == YayinBilgi[i][yayinBirlik] && YayinBilgi[i][yayinYapan] != o) SendClientMessageEx(o, RENK_YAYIN, "[YAYIN] {FFFFFF}Yayýn kesildi.");

			YayinBilgi[i][yayinKullanimda] = false;
		    YayinBilgi[i][yayinYapan] = INVALID_PLAYER_ID;
		    YayinBilgi[i][yayinDavetli] = INVALID_PLAYER_ID;
			YayinBilgi[i][yayinBirlik] = -1;
			YayinBilgi[i][yayinMuzik][0] = 0;
			YayinBilgi[i][yayinCekilis] = 0;
			new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
			GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
			format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) birlikten atýldýðý için yayýn bitirdi. (Birlik: %s)", Tarih(), oyuncu_isim, OyuncuBilgi[oyuncuid][oID], BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikAd]);
			Gunluk_LogKaydet(log_icerik);
		}
	}
	if(OyuncuBirlikTuru(oyuncuid) == BIRLIK_POLIS || OyuncuBirlikTuru(oyuncuid) == BIRLIK_MEDIKAL || OyuncuBirlikTuru(oyuncuid) == BIRLIK_DEVLET) {
	    if(OyuncuBilgi[oyuncuid][oFrekans] == 911) OyuncuBilgi[oyuncuid][oFrekans] = 0;
		OyuncuBilgi[oyuncuid][oIsbasi] = false;
		if(OyuncuBilgi[oyuncuid][oAdmin] < 6) SilahlariSifirla(oyuncuid);
		SetPlayerColor(oyuncuid, RENK_VARSAYILAN);
		ZirhDuzenle(oyuncuid, 0);
		OyuncuBilgi[oyuncuid][oGeciciKiyafet] = 0;
		KiyafetDegistir(oyuncuid, OyuncuBilgi[oyuncuid][oKiyafet]);
		Olusum_AksesuarSil(oyuncuid);
	}
	for(new i = 0; i != MAKSIMUM_ARAC; i++) if(Arac_SahipKontrol(oyuncuid, i) && OyuncuBilgi[oyuncuid][oBirlikSQLID] == AracBilgi[i][aracBirlik]) {
        AracBilgi[i][aracBirlik] = 0;
        Arac_Kaydet(i);
	}
	OyuncuBilgi[oyuncuid][oBirlikSQLID] = 0;
	OyuncuBilgi[oyuncuid][oBirlik] = -1;
	OyuncuBilgi[oyuncuid][oBirlikRutbe] = 0;
	OyuncuBilgi[oyuncuid][oBirim] = 0;
	OyuncuBilgi[oyuncuid][oBirlikLider] = 0;
	IsimLabelGuncelle(oyuncuid);
	OyuncuKaydet(oyuncuid);
	return 1;
}

stock BirlikAyarla(oyuncuid, id)
{
	if(id != -1 && BirlikBilgi[id][birlikKullanimda])
	{
	    BirlikSifirla(oyuncuid);
	    if((BirlikBilgi[id][birlikTur] == BIRLIK_POLIS || BirlikBilgi[id][birlikTur] == BIRLIK_MEDIKAL || BirlikBilgi[id][birlikTur] == BIRLIK_DEVLET)) if(OyuncuBilgi[oyuncuid][oMeslek] == 3 || OyuncuBilgi[oyuncuid][oMeslek] == 4) OyuncuBilgi[oyuncuid][oMeslek] = 0;
		OyuncuBilgi[oyuncuid][oBirlik] = id;
		OyuncuBilgi[oyuncuid][oBirlikSQLID] = BirlikBilgi[id][birlikID];
		OyuncuBilgi[oyuncuid][oBirlikRutbe] = BirlikBilgi[id][birlikMaksRutbe];
		OyuncuBilgi[oyuncuid][oBirlikLider] = BirlikBilgi[id][birlikID];
		OyuncuKaydet(oyuncuid);
	}
	return 1;
}

stock birlik_id_bul(sqlid)
{
	for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikKullanimda] && BirlikBilgi[i][birlikID] == sqlid)
	    return i;

	return -1;
}

stock Isyeri_Kaydet(isyeriid)
{
	new kayit_sorgu[768];
	format(kayit_sorgu, sizeof(kayit_sorgu), "UPDATE `isyerleri` SET `Ad` = '%s', `Durum` = '%d', `isyeriPosX` = '%.4f', `isyeriPosY` = '%.4f', `isyeriPosZ` = '%.4f', `isyeriPosA` = '%.4f', `isyeriVW` = '%d', `isyeriInt` = '%d'",
		SQL_ReturnEscaped(IsyeriBilgi[isyeriid][isyeriAd]),
		IsyeriBilgi[isyeriid][isyeriDurum],
		IsyeriBilgi[isyeriid][isyeriPos][0],
		IsyeriBilgi[isyeriid][isyeriPos][1],
		IsyeriBilgi[isyeriid][isyeriPos][2],
		IsyeriBilgi[isyeriid][isyeriPos][3],
		IsyeriBilgi[isyeriid][isyeriVW],
		IsyeriBilgi[isyeriid][isyeriInterior]
	);
	format(kayit_sorgu, sizeof(kayit_sorgu), "%s, `isyeriIcPosX` = '%.4f', `isyeriIcPosY` = '%.4f', `isyeriIcPosZ` = '%.4f', `isyeriIcPosA` = '%.4f', `isyeriDisInt` = '%d', `isyeriDisVW` = '%d', `isyeriSahip` = '%d'",
		kayit_sorgu,
		IsyeriBilgi[isyeriid][isyeriIcPos][0],
		IsyeriBilgi[isyeriid][isyeriIcPos][1],
		IsyeriBilgi[isyeriid][isyeriIcPos][2],
		IsyeriBilgi[isyeriid][isyeriIcPos][3],
		IsyeriBilgi[isyeriid][isyeriDisInt],
		IsyeriBilgi[isyeriid][isyeriDisVW],
		IsyeriBilgi[isyeriid][isyeriSahip]
	);
	format(kayit_sorgu, sizeof(kayit_sorgu), "%s, `isyeriFiyat` = '%d', `isyeriTur` = '%d', `GirisUcreti` = '%d', `isyeriKasa` = '%d', `isyeriOrtak` = '%d', `isyeriUrun` = '%d'  WHERE `isyeriID` = '%d'",
		kayit_sorgu,
		IsyeriBilgi[isyeriid][isyeriFiyat],
		IsyeriBilgi[isyeriid][isyeriTur],
		IsyeriBilgi[isyeriid][iGirisUcret],
		IsyeriBilgi[isyeriid][isyeriKasa],
		IsyeriBilgi[isyeriid][isyeriOrtak],
		IsyeriBilgi[isyeriid][isyeriUrun],
		IsyeriBilgi[isyeriid][isyeriID]
	);
	mysql_tquery(mysqlB, kayit_sorgu);
	return 1;
}

stock Fabrika_Kaydet(fabrikaid)
{
	new kayit_sorgu[768];
	format(kayit_sorgu, sizeof(kayit_sorgu), "UPDATE `fabrikalar` SET `Sahip` = '%s', `PosX` = '%.4f', `PosY` = '%.4f', `PosZ` = '%.4f', `PosA` = '%.4f', `FabrikaAd` = '%s', `Urun` = '%s'",
		SQL_ReturnEscaped(FabrikaBilgi[fabrikaid][fSahip]),
		FabrikaBilgi[fabrikaid][fPos][0],
		FabrikaBilgi[fabrikaid][fPos][1],
		FabrikaBilgi[fabrikaid][fPos][2],
		FabrikaBilgi[fabrikaid][fPos][3],
		FabrikaBilgi[fabrikaid][fabrikaAd],
		FabrikaBilgi[fabrikaid][fUrun]
	);
	format(kayit_sorgu, sizeof(kayit_sorgu), "%s, `Ucret` = '%d', `Kapasite` = '%d' WHERE `fID` = '%d'",
		kayit_sorgu,
		FabrikaBilgi[fabrikaid][fUcret],
		FabrikaBilgi[fabrikaid][fKapasite],
		FabrikaBilgi[fabrikaid][fID]
	);
	mysql_tquery(mysqlB, kayit_sorgu);
	return 1;
}

stock Ev_Kaydet(evid)
{
	new sorgu[1536];
	format(sorgu, sizeof(sorgu), "UPDATE `evler` SET `Adres` = '%s', `Durum` = '%d', `evPosX` = '%.4f', `evPosY` = '%.4f', `evPosZ` = '%.4f', `evPosA` = '%.4f', `evVW` = '%d', `evInt` = '%d', `bSure` = '%d'",
		SQL_ReturnEscaped(EvBilgi[evid][evAdres]),
		EvBilgi[evid][evDurum],
		EvBilgi[evid][evPos][0],
		EvBilgi[evid][evPos][1],
		EvBilgi[evid][evPos][2],
		EvBilgi[evid][evPos][3],
		EvBilgi[evid][evVW],
		EvBilgi[evid][evInterior],
		EvBilgi[evid][evBakimSure]
	);
	format(sorgu, sizeof(sorgu), "%s, `evIcPosX` = '%.4f', `evIcPosY` = '%.4f', `evIcPosZ` = '%.4f', `evIcPosA` = '%.4f', `evDisInt` = '%d', `evDisVW` = '%d', `evSahip` = '%d', `evFiyat` = '%d'",
		sorgu,
		EvBilgi[evid][evIcPos][0],
		EvBilgi[evid][evIcPos][1],
		EvBilgi[evid][evIcPos][2],
		EvBilgi[evid][evIcPos][3],
		EvBilgi[evid][evDisInt],
		EvBilgi[evid][evDisVW],
		EvBilgi[evid][evSahip],
		EvBilgi[evid][evFiyat]
	);
	format(sorgu, sizeof(sorgu), "%s, `Kiralik` = '%d', `Kiraci` = '%d', `KiraUcret` = '%d', `Kasa` = '%d', `Level` = '%d', `Vergi` = '%d', `Tur` = '%d', `Satilik` = '%d'",
		sorgu,
		EvBilgi[evid][evKiralik],
		EvBilgi[evid][evKiraci],
		EvBilgi[evid][evKiraUcret],
		EvBilgi[evid][evKasa],
		EvBilgi[evid][evLevel],
		EvBilgi[evid][evVergi],
		EvBilgi[evid][evTur],
		EvBilgi[evid][evSatilik]
	);
	format(sorgu, sizeof(sorgu), "%s, `EvAnahtar` = '%d', `EvAnahtar1` = '%d', `EvAnahtar2` = '%d', `EvAnahtar3` = '%d', `EvAnahtar4` = '%d', `VergiMuafiyet` = '%d' WHERE `evID` = '%d'",
		sorgu,
		EvBilgi[evid][evAnahtar][0],
		EvBilgi[evid][evAnahtar][1],
		EvBilgi[evid][evAnahtar][2],
		EvBilgi[evid][evAnahtar][3],
		EvBilgi[evid][evAnahtar][4],
		EvBilgi[evid][evMuafiyet],
		EvBilgi[evid][evID]
	);
	mysql_tquery(mysqlB, sorgu);
	return 1;
}

stock Birim_Kaydet(id)
{
	new query[512];
	format(query, sizeof(query), "UPDATE `birimler` SET `birimAd` = '%s', `birimTur` = '%d', `birimBirlik` = '%d' WHERE `birimID` = '%d'",
		BirimBilgi[id][birimAd],
		BirimBilgi[id][birimTur],
		BirimBilgi[id][birimBirlik],
		BirimBilgi[id][birimID]
	);
	mysql_tquery(mysqlB, query);
	return 1;
}

stock Birlik_Kaydet(birlikid)
{
	new kaydet[2048];
	format(kaydet, sizeof(kaydet), "UPDATE `birlikler` SET `birlikAd` = '%s', `birlikMaksRutbe` = '%d', `bDolapX` = '%.4f', `bDolapY` = '%.4f', `bDolapZ` = '%.4f', `bDolapVW` = '%d', `bDolapInt` = '%d', `birlikTur` = '%d'",
		SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikAd]),
	    BirlikBilgi[birlikid][birlikMaksRutbe],
	    BirlikBilgi[birlikid][bDolapPos][0],
	    BirlikBilgi[birlikid][bDolapPos][1],
	    BirlikBilgi[birlikid][bDolapPos][2],
	    BirlikBilgi[birlikid][bDolapVW],
	    BirlikBilgi[birlikid][bDolapInt],
	    BirlikBilgi[birlikid][birlikTur]
	);
	for(new i = 0; i < 20; i ++) {
		format(kaydet, sizeof(kaydet), "%s, `Maas%d` = '%d'", kaydet, i + 1, BirlikBilgi[birlikid][birlikMaas][i]);
	}
	format(kaydet, sizeof(kaydet), "%s, `Onay` = '%d|%d|%d|%d|%d|%d|%d|%d'",
		kaydet,
		BirlikBilgi[birlikid][birlikOnay][0],
		BirlikBilgi[birlikid][birlikOnay][1],
		BirlikBilgi[birlikid][birlikOnay][2],
		BirlikBilgi[birlikid][birlikOnay][3],
		BirlikBilgi[birlikid][birlikOnay][4],
		BirlikBilgi[birlikid][birlikOnay][5],
		BirlikBilgi[birlikid][birlikOnay][6],
		BirlikBilgi[birlikid][birlikOnay][7]
	);
	format(kaydet, sizeof(kaydet), "%s, `oDurum` = '%d', `Level` = '%d', `Duyuru` = '%s', `BirlikBolge` = '%.4f|%.4f|%.4f|%d|%d' WHERE `birlikID` = '%d'",
		kaydet,
		BirlikBilgi[birlikid][oKanal],
		BirlikBilgi[birlikid][birlikLevel],
		BirlikBilgi[birlikid][birlikDuyuru],
		BirlikBilgi[birlikid][birlikPos][0],
		BirlikBilgi[birlikid][birlikPos][1],
		BirlikBilgi[birlikid][birlikPos][2],
		BirlikBilgi[birlikid][birlikPosDurum],
		BirlikBilgi[birlikid][birlikOnayDurum],
		BirlikBilgi[birlikid][birlikID]
	);
	mysql_tquery(mysqlB, kaydet);
	BirlikRutbeleriKaydet(birlikid);
	return 1;
}

stock BirlikRutbeleriKaydet(birlikid)
{
	new query[2048 + 512];
	format(query, sizeof(query), "UPDATE `birlikler` SET `birlikRutbe1` = '%s', `birlikRutbe2` = '%s', `birlikRutbe3` = '%s', `birlikRutbe4` = '%s', `birlikRutbe5` = '%s', `birlikRutbe6` = '%s', `birlikRutbe7` = '%s', `birlikRutbe8` = '%s', `birlikRutbe9` = '%s', `birlikRutbe10` = '%s'",
	    BirlikBilgi[birlikid][birlikR1],
	    SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR2]),
        SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR3]),
        SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR4]),
        SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR5]),
        SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR6]),
        SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR7]),
        SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR8]),
        SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR9]),
        SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR10])
	);
	format(query, sizeof(query), "%s, `birlikRutbe11` = '%s', `birlikRutbe12` = '%s', `birlikRutbe13` = '%s', `birlikRutbe14` = '%s', `birlikRutbe15` = '%s', `birlikRutbe16` = '%s', `birlikRutbe17` = '%s', `birlikRutbe18` = '%s', `birlikRutbe19` = '%s', `birlikRutbe20` = '%s' WHERE `birlikID` = '%d'",
		query,
	    SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR11]),
	    SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR12]),
        SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR13]),
        SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR14]),
        SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR15]),
        SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR16]),
        SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR17]),
        SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR18]),
        SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR19]),
        SQL_ReturnEscaped(BirlikBilgi[birlikid][birlikR20]),
        BirlikBilgi[birlikid][birlikID]
	);
	mysql_tquery(mysqlB, query);
	return 1;
}

stock Birlik_Yenile(birlikid)
{
	if(birlikid != -1 && BirlikBilgi[birlikid][birlikKullanimda])
	{
		if(IsValidDynamicPickup(BirlikBilgi[birlikid][birlikPosPickup])) DestroyDynamicPickup(BirlikBilgi[birlikid][birlikPosPickup]), BirlikBilgi[birlikid][birlikPosPickup] = INVALID_PICKUP_ID;
		if(IsValidDynamic3DTextLabel(BirlikBilgi[birlikid][birlikPosText3D])) DestroyDynamic3DTextLabel(BirlikBilgi[birlikid][birlikPosText3D]), BirlikBilgi[birlikid][birlikPosText3D] = Text3D:INVALID_3DTEXT_ID;

		if(IsValidDynamicPickup(BirlikBilgi[birlikid][bDolapPickup])) DestroyDynamicPickup(BirlikBilgi[birlikid][bDolapPickup]), BirlikBilgi[birlikid][bDolapPickup] = INVALID_PICKUP_ID;
		if(IsValidDynamic3DTextLabel(BirlikBilgi[birlikid][bDolapText3D])) DestroyDynamic3DTextLabel(BirlikBilgi[birlikid][bDolapText3D]), BirlikBilgi[birlikid][bDolapText3D] = Text3D:INVALID_3DTEXT_ID;
		new string[128];
	    if(BirlikBilgi[birlikid][bDolapPos][0] != 0.0 && BirlikBilgi[birlikid][bDolapPos][1] != 0.0 && BirlikBilgi[birlikid][bDolapPos][2] != 0.0)
	    {
			BirlikBilgi[birlikid][bDolapPickup] = CreateDynamicPickup(1239, 0, BirlikBilgi[birlikid][bDolapPos][0], BirlikBilgi[birlikid][bDolapPos][1], BirlikBilgi[birlikid][bDolapPos][2], BirlikBilgi[birlikid][bDolapVW], BirlikBilgi[birlikid][bDolapInt]);
			format(string, sizeof(string), "[%s - Dolap]\n{FFFFFF}/dolap", BirlikBilgi[birlikid][birlikAd]);
	  		BirlikBilgi[birlikid][bDolapText3D] = CreateDynamic3DTextLabel(string, RENK_SERVER, BirlikBilgi[birlikid][bDolapPos][0], BirlikBilgi[birlikid][bDolapPos][1], BirlikBilgi[birlikid][bDolapPos][2], 3.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, BirlikBilgi[birlikid][bDolapVW], BirlikBilgi[birlikid][bDolapInt]);
		}
        if(BirlikBilgi[birlikid][birlikPosDurum] == 1)
	    {
			BirlikBilgi[birlikid][birlikPosPickup] = CreateDynamicPickup(1313, 0, BirlikBilgi[birlikid][birlikPos][0], BirlikBilgi[birlikid][birlikPos][1], BirlikBilgi[birlikid][birlikPos][2], 0, 0);
			format(string, sizeof(string), "[%s]", BirlikBilgi[birlikid][birlikAd]);
	  		BirlikBilgi[birlikid][birlikPosText3D] = CreateDynamic3DTextLabel(string, RENK_SERVER, BirlikBilgi[birlikid][birlikPos][0], BirlikBilgi[birlikid][birlikPos][1], BirlikBilgi[birlikid][birlikPos][2], 3.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, 0, 0);
		}
	}
	return 1;
}

stock Birim_Sil(id)
{
	if(id != -1 && BirimBilgi[id][birimKullanimda])
	{
	    new silme_sorgu[64];
		format(silme_sorgu, sizeof(silme_sorgu), "DELETE FROM `birimler` WHERE `birimID` = '%d'", BirimBilgi[id][birimID]);
		mysql_query(mysqlB, silme_sorgu);

		foreach (new i : Player) if(OyuncuBilgi[i][oBirim] == BirimBilgi[id][birimID])
			OyuncuBilgi[i][oBirim] = 0, OyuncuKaydet(i);

		format(silme_sorgu, sizeof(silme_sorgu), "UPDATE `oyuncular` SET `birim` = '0' WHERE `birim` = '%d'", BirimBilgi[id][birimID]);
		mysql_query(mysqlB, silme_sorgu);

	    BirimBilgi[id][birimKullanimda] = false;
	    BirimBilgi[id][birimID] = 0;
	}
	return 1;
}

stock Boombox_Kaldir(playerid)
{
	if(BoomboxBilgi[playerid][boomboxKullanimda])
	{
		if(IsValidDynamicObject(BoomboxBilgi[playerid][boomboxObje])) DestroyDynamicObject(BoomboxBilgi[playerid][boomboxObje]), BoomboxBilgi[playerid][boomboxObje] = INVALID_OBJECT_ID;
		if(IsValidDynamic3DTextLabel(BoomboxBilgi[playerid][boomboxText3D])) DestroyDynamic3DTextLabel(BoomboxBilgi[playerid][boomboxText3D]), BoomboxBilgi[playerid][boomboxText3D] = Text3D:INVALID_3DTEXT_ID;

		foreach (new i : Player) if(OyuncuBilgi[i][oBoombox] == playerid) {
		    StopAudioStreamForPlayer(i);
		}
        BoomboxBilgi[playerid][boomboxKullanimda] = false;
        BoomboxBilgi[playerid][boomboxInterior] = 0;
        BoomboxBilgi[playerid][boomboxWorld] = 0;
	}
	return 1;
}

stock Ekip_Sil(ekipid)
{
	if(ekipid != -1 && EkipBilgi[ekipid][ekipKullanimda])
	{
		foreach (new i : Player)
		{
		    if(OyuncuBilgi[i][oEkip] == ekipid) {
			OyuncuBilgi[i][oEkip] = -1;
			OyuncuBilgi[i][oEkipYoneticisi] = false;
			}
	 	}

		EkipBilgi[ekipid][ekipKullanimda] = false;
		EkipBilgi[ekipid][ekipID] = 0;
	}
	return 1;
}

stock Birlik_Sil(birlikid)
{
	if(birlikid != -1 && BirlikBilgi[birlikid][birlikKullanimda])
	{
	    new sorgu[128];
		format(sorgu, sizeof(sorgu), "DELETE FROM `birlikler` WHERE `birlikID` = '%d'", BirlikBilgi[birlikid][birlikID]);
		mysql_query(mysqlB, sorgu);

		format(sorgu, sizeof(sorgu), "UPDATE `oyuncular` SET `birlik` = '-1' WHERE `birlik` = '%d'", BirlikBilgi[birlikid][birlikID]);
		mysql_query(mysqlB, sorgu);

		foreach (new i : Player)
		{
			if(OyuncuBilgi[i][oBirlik] == birlikid) {
		    	OyuncuBilgi[i][oBirlik] = -1;
		    	OyuncuBilgi[i][oBirlikSQLID] = 0;
		    	OyuncuBilgi[i][oBirlikRutbe] = 0;
			}
		}
		for(new i = 0; i != MAKSIMUM_ARAC; i++) if(BirlikBilgi[birlikid][birlikID] == AracBilgi[i][aracBirlik]) Arac_Sil(i);
		for(new i = 0; i < MAKSIMUM_KASA; i ++) if(KasaBilgi[i][kasaBirlik] == BirlikBilgi[birlikid][birlikID]) Kasa_Kaldir(i);
		if(IsValidDynamicPickup(BirlikBilgi[birlikid][bDolapPickup])) DestroyDynamicPickup(BirlikBilgi[birlikid][bDolapPickup]), BirlikBilgi[birlikid][bDolapPickup] = INVALID_PICKUP_ID;
		if(IsValidDynamic3DTextLabel(BirlikBilgi[birlikid][bDolapText3D])) DestroyDynamic3DTextLabel(BirlikBilgi[birlikid][bDolapText3D]), BirlikBilgi[birlikid][bDolapText3D] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicPickup(BirlikBilgi[birlikid][birlikPosPickup])) DestroyDynamicPickup(BirlikBilgi[birlikid][birlikPosPickup]), BirlikBilgi[birlikid][birlikPosPickup] = INVALID_PICKUP_ID;
		if(IsValidDynamic3DTextLabel(BirlikBilgi[birlikid][birlikPosText3D])) DestroyDynamic3DTextLabel(BirlikBilgi[birlikid][birlikPosText3D]), BirlikBilgi[birlikid][birlikPosText3D] = Text3D:INVALID_3DTEXT_ID;

	    BirlikBilgi[birlikid][birlikKullanimda] = false;
	    BirlikBilgi[birlikid][birlikID] = 0;
	}
	return 1;
}

stock Isyeri_Yarat(playerid, tur)
{
	static Float:x, Float:y, Float:z, Float:angle;
    if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i != MAKSIMUM_ISYERI; i ++)
		{
	    	if(!IsyeriBilgi[i][isyeriKullanimda])
		    {
    	        IsyeriBilgi[i][isyeriKullanimda] = true;
				format(IsyeriBilgi[i][isyeriAd], 128, VARSAYILAN_ISYERI_ADI);
    	        IsyeriBilgi[i][isyeriPos][0] = x;
    	        IsyeriBilgi[i][isyeriPos][1] = y;
    	        IsyeriBilgi[i][isyeriPos][2] = z;
    	        IsyeriBilgi[i][isyeriPos][3] = angle;

                IsyeriBilgi[i][isyeriIcPos][0] = -25.8665;
                IsyeriBilgi[i][isyeriIcPos][1] = -188.2526;
                IsyeriBilgi[i][isyeriIcPos][2] = 1003.5469;
                IsyeriBilgi[i][isyeriIcPos][3] = 360.0000;

				IsyeriBilgi[i][isyeriDisInt] = GetPlayerInterior(playerid);
				IsyeriBilgi[i][isyeriDisVW] = GetPlayerVirtualWorld(playerid);

				IsyeriBilgi[i][isyeriInterior] = 17;
				IsyeriBilgi[i][isyeriDurum] = 3;
				IsyeriBilgi[i][isyeriSahip] = 0;
				IsyeriBilgi[i][isyeriOrtak] = 0;
				IsyeriBilgi[i][isyeriFiyat] = 75000;
				IsyeriBilgi[i][isyeriTur] = tur;
				IsyeriBilgi[i][isyeriKasa] = 0;
				IsyeriBilgi[i][iGirisUcret] = 0;
				IsyeriBilgi[i][isyeriMuzik][0] = 0;
				IsyeriBilgi[i][isyeriUrun] = 50;

				Isyeri_Yenile(i);
				mysql_tquery(mysqlB, "INSERT INTO `isyerleri` (`isyeriSahip`) VALUES(0)", "IsyeriYaratildi", "d", i);
				return i;
			}
		}
	}
	return -1;
}

stock Isyeri_Sil(isyeriid)
{
	if(isyeriid != -1 && IsyeriBilgi[isyeriid][isyeriKullanimda])
	{
	    static string[128];
		format(string, sizeof(string), "DELETE FROM `isyerleri` WHERE `isyeriID` = '%d'", IsyeriBilgi[isyeriid][isyeriID]);
		mysql_tquery(mysqlB, string);

        if(IsValidDynamic3DTextLabel(IsyeriBilgi[isyeriid][isyeriText])) DestroyDynamic3DTextLabel(IsyeriBilgi[isyeriid][isyeriText]), IsyeriBilgi[isyeriid][isyeriText] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicPickup(IsyeriBilgi[isyeriid][isyeriPickup])) DestroyDynamicPickup(IsyeriBilgi[isyeriid][isyeriPickup]), IsyeriBilgi[isyeriid][isyeriPickup] = INVALID_PICKUP_ID;
		if(IsyeriBilgi[isyeriid][isyeriTur] == 9) Isyeri_PompalariKaldir(isyeriid);

	    IsyeriBilgi[isyeriid][isyeriKullanimda] = false;
	    IsyeriBilgi[isyeriid][isyeriID] = 0;
	}
	return 1;
}

stock Isyeri_PompalariKaldir(isyeriid)
{
	if(IsyeriBilgi[isyeriid][isyeriKullanimda] && IsyeriBilgi[isyeriid][isyeriTur] == 9)
	{
	    new string[32];
		for(new i = 0; i != MAKSIMUM_BENZIN_POMPASI; i ++) if(BenzinPompasi[i][pompaKullanimda] && BenzinPompasi[i][pompaIsyeri] == IsyeriBilgi[isyeriid][isyeriID])
		{
  			DestroyDynamicObject(BenzinPompasi[i][pompaObje]);
			DestroyDynamic3DTextLabel(BenzinPompasi[i][pompaText3D]);

		    BenzinPompasi[i][pompaKullanimda] = 0;
		    BenzinPompasi[i][pompaBenzin] = 0;
		}
		format(string, sizeof(string), "DELETE FROM `benzinpompalari` WHERE `pompaIsyeri` = '%d'", IsyeriBilgi[isyeriid][isyeriID]);
		mysql_tquery(mysqlB, string);
	}
	return 1;
}

stock Garaj_Ekle(playerid)
{
	new Float:x, Float:y, Float:z, Float:angle;
    if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i != MAKSIMUM_GARAJ; i++) if(!GarajBilgi[i][garajKullanimda])
		{
			GarajBilgi[i][garajKullanimda] = true;
			GarajBilgi[i][garajPos][0] = x;
			GarajBilgi[i][garajPos][1] = y;
			GarajBilgi[i][garajPos][2] = z;
			GarajBilgi[i][garajPos][3] = 0.0;
			GarajBilgi[i][garajPos][4] = 0.0;
			GarajBilgi[i][garajPos][5] = 0.0;
			GarajBilgi[i][garajInt] = GetPlayerInterior(playerid);
			GarajBilgi[i][garajDunya] = GetPlayerVirtualWorld(playerid);
			GarajBilgi[i][garajDurum] = 1;
			GarajBilgi[i][garajSahip] = 0;
			GarajBilgi[i][garajLimit] = 1;
			GarajBilgi[i][garajSahipIsim][0] = 0;
			GarajBilgi[i][garajUcret] = 0;
            if(IsValidDynamic3DTextLabel(GarajBilgi[i][garajText])) DestroyDynamic3DTextLabel(GarajBilgi[i][garajText]);
			GarajBilgi[i][garajText] = Text3D:INVALID_3DTEXT_ID;
			
			Garaj_Yenile(i);
			mysql_tquery(mysqlB, "INSERT INTO `garajlar` (`Sahip`) VALUES(0)", "GarajYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Garaj_Yenile(id)
{
	if(id == -1 || GarajBilgi[id][garajKullanimda] == false) return 1;

	if(IsValidDynamic3DTextLabel(GarajBilgi[id][garajText])) DestroyDynamic3DTextLabel(GarajBilgi[id][garajText]), GarajBilgi[id][garajText] = Text3D:INVALID_3DTEXT_ID;
	if(IsValidDynamicPickup(GarajBilgi[id][garajPickup])) DestroyDynamicPickup(GarajBilgi[id][garajPickup]), GarajBilgi[id][garajPickup] = INVALID_PICKUP_ID;
    if(isnull(GarajBilgi[id][garajSahipIsim])) return Garaj_SahipBul(id);
    
	new bilgi[512], slot = 0, durum[32], kapino = MAKSIMUM_EV + MAKSIMUM_ISYERI;
	kapino += MAKSIMUM_BINA;
	switch(GarajBilgi[id][garajDurum]) {
	    case 1: format(durum, sizeof(durum), "{33AA33}Kilitsiz");
		case 2: format(durum, sizeof(durum), "{B70000}Kilitli");
		default: format(durum, sizeof(durum), "{33AA33}Kilitsiz");
	}
	for(new i = 0; i != MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracKullanimda] && AracBilgi[i][aracGaraj] == GarajBilgi[id][garajID]) slot++;
	
	if(GarajBilgi[id][garajSahip] == 0) format(bilgi, sizeof(bilgi), "[Garaj %d]\n{a9c4e4}Sahip: {FFFFFF}%s\n{a9c4e4}Kapý Numarasý: {FFFFFF}%d\n{a9c4e4}Doluluk: {FFFFFF}%d/%d\n{a9c4e4}Durum: %s\n{a9c4e4}Ücret: {FFFFFF}%s\n", id, GarajBilgi[id][garajSahipIsim], GarajBilgi[id][garajID] + kapino, slot, GarajBilgi[id][garajLimit], durum, NumaraFormati(GarajBilgi[id][garajUcret]));
    if(GarajBilgi[id][garajSahip] != 0) format(bilgi, sizeof(bilgi), "[Garaj %d]\n{a9c4e4}Sahip: {FFFFFF}%s\n{a9c4e4}Kapý Numarasý: {FFFFFF}%d\n{a9c4e4}Doluluk: {FFFFFF}%d/%d\n{a9c4e4}Durum: %s\n", id, GarajBilgi[id][garajSahipIsim], GarajBilgi[id][garajID] + kapino, slot, GarajBilgi[id][garajLimit], durum);
	GarajBilgi[id][garajText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, GarajBilgi[id][garajPos][0], GarajBilgi[id][garajPos][1], GarajBilgi[id][garajPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GarajBilgi[id][garajDunya], GarajBilgi[id][garajInt]);
	GarajBilgi[id][garajPickup] = CreateDynamicPickup(1277, 23, GarajBilgi[id][garajPos][0], GarajBilgi[id][garajPos][1], GarajBilgi[id][garajPos][2], GarajBilgi[id][garajDunya], GarajBilgi[id][garajInt]);
	return 1;
}

stock Garaj_Kaydet(id)
{
    if(id == -1 || GarajBilgi[id][garajKullanimda] == false) return 1;
    
	new sorgu[1024];
	format(sorgu, sizeof(sorgu), "UPDATE `garajlar` SET `Sahip` = '%d', `Durum` = '%d', `PosX` = '%.4f', `PosY` = '%.4f', `PosZ` = '%.4f', `CikisPosX` = '%.4f', `CikisPosY` = '%.4f', `CikisPosZ` = '%.4f'",
		GarajBilgi[id][garajSahip],
		GarajBilgi[id][garajDurum],
		GarajBilgi[id][garajPos][0],
		GarajBilgi[id][garajPos][1],
		GarajBilgi[id][garajPos][2],
		GarajBilgi[id][garajPos][3],
		GarajBilgi[id][garajPos][4],
		GarajBilgi[id][garajPos][5]
	);
	format(sorgu, sizeof(sorgu), "%s, `Interior` = '%d', `Dunya` = '%d', `AracLimit` = '%d', `Ucret` = '%d' WHERE `ID` = '%d'",
		sorgu,
		GarajBilgi[id][garajInt],
		GarajBilgi[id][garajDunya],
		GarajBilgi[id][garajLimit],
		GarajBilgi[id][garajUcret],
		GarajBilgi[id][garajID]
	);
	mysql_tquery(mysqlB, sorgu);
	return 1;
}

stock Garaj_Sil(id)
{
	if(id == -1 || GarajBilgi[id][garajKullanimda] == false) return 1;
	
    new sorgu[64];
	format(sorgu, sizeof(sorgu), "DELETE FROM `garajlar` WHERE `ID` = '%d'", GarajBilgi[id][garajID]);
	mysql_tquery(mysqlB, sorgu);

	if(IsValidDynamic3DTextLabel(GarajBilgi[id][garajText])) DestroyDynamic3DTextLabel(GarajBilgi[id][garajText]), GarajBilgi[id][garajText] = Text3D:INVALID_3DTEXT_ID;
	if(IsValidDynamicPickup(GarajBilgi[id][garajPickup])) DestroyDynamicPickup(GarajBilgi[id][garajPickup]), GarajBilgi[id][garajPickup] = INVALID_PICKUP_ID;
	for(new i = 0; i != MAKSIMUM_ARAC; i++) if(AracBilgi[i][aracKullanimda] == true && AracBilgi[i][aracGaraj] == GarajBilgi[id][garajID]) {
		AracBilgi[i][aracDurum] = 1;
		Arac_Spawn(i);
		AracBilgi[i][aracGaraj] = 0;
		SetVehiclePos(AracBilgi[i][aracYarat], GarajBilgi[id][garajPos][3], GarajBilgi[id][garajPos][4], GarajBilgi[id][garajPos][5]);
	}
	
	GarajBilgi[id][garajKullanimda] = false;
	GarajBilgi[id][garajID] = 0;
	return 1;
}

stock Garaj_SahipBul(id)
{
	if(GarajBilgi[id][garajSahip] > 0) {
		new sorgu[144];
		format(sorgu, sizeof(sorgu), "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", GarajBilgi[id][garajSahip]);
		return mysql_tquery(mysqlB, sorgu, "Garaj_SahipArat", "d", id);
	}
	else format(GarajBilgi[id][garajSahipIsim], 32, "Devlet"), Garaj_Yenile(id);
	return 1;
}

stock Log_Write(const path[], const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    File:file,
	    string[1024]
	;
	if ((start = strfind(path, "/")) != -1) {
	    strmid(string, path, 0, start + 1);

	    if (!fexist(string))
	        return printf("** Uyari: Dosya \"%s\" bulunmuyor.", string);
	}
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	file = fopen(path, io_append);

	if (!file)
	    return 0;

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 1024
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		fwrite(file, string);
		fwrite(file, "\r\n");
		fclose(file);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	fwrite(file, str);
	fwrite(file, "\r\n");
	fclose(file);

	return 1;
}

stock Graffiti_Yenile(id)
{
	if(id != -1 && GraffitiBilgi[id][graffitiKullanimda])
	{
		if(IsValidDynamicObject(GraffitiBilgi[id][graffitiObje])) DestroyDynamicObject(GraffitiBilgi[id][graffitiObje]), GraffitiBilgi[id][graffitiObje] = INVALID_OBJECT_ID;

		GraffitiBilgi[id][graffitiObje] = CreateDynamicObject(19482, GraffitiBilgi[id][graffitiPos][0], GraffitiBilgi[id][graffitiPos][1], GraffitiBilgi[id][graffitiPos][2], 0.0, 0.0, GraffitiBilgi[id][graffitiPos][3]);
		SetDynamicObjectMaterial(GraffitiBilgi[id][graffitiObje], 0, 0, "none", "none", 0);
		SetDynamicObjectMaterialText(GraffitiBilgi[id][graffitiObje], 0, GraffitiBilgi[id][graffitiYazi], OBJECT_MATERIAL_SIZE_256x128, "Arial", 24, 1, GraffitiBilgi[id][graffitiRenk], 0, 0);
	}
	return 1;
}

stock SprayNoktasiKontrol(id)
{
	foreach (new i : Player)
	{
	    if(OyuncuBilgi[i][oGraffiti] == id && IsPlayerInRangeOfPoint(i, 5.0, GraffitiBilgi[id][graffitiPos][0], GraffitiBilgi[id][graffitiPos][1], GraffitiBilgi[id][graffitiPos][2]))
	        return 1;
	}
	return 0;
}

stock Graffiti_Yakin(playerid)
{
	for (new i = 0; i < MAKSIMUM_GRAFFITI; i ++) if(GraffitiBilgi[i][graffitiKullanimda] && IsPlayerInRangeOfPoint(playerid, 5.0, GraffitiBilgi[i][graffitiPos][0], GraffitiBilgi[i][graffitiPos][1], GraffitiBilgi[i][graffitiPos][2]))
	    return i;

	return -1;
}

stock Graffiti_Kaldir(id)
{
    if(id != -1 && GraffitiBilgi[id][graffitiKullanimda])
	{
		if(IsValidDynamicObject(GraffitiBilgi[id][graffitiObje])) DestroyDynamicObject(GraffitiBilgi[id][graffitiObje]), GraffitiBilgi[id][graffitiObje] = INVALID_OBJECT_ID;

	    new kaldir[64];
		format(kaldir, sizeof(kaldir), "DELETE FROM `graffiti` WHERE `graffitiID` = '%d'", GraffitiBilgi[id][graffitiID]);
		mysql_tquery(mysqlB, kaldir);

		GraffitiBilgi[id][graffitiKullanimda] = false;
		GraffitiBilgi[id][graffitiYazi][0] = 0;
		GraffitiBilgi[id][graffitiID] = 0;
	}
	return 1;
}

stock Graffiti_Kaydet(id)
{
	new kaydet[512];
	format(kaydet, sizeof(kaydet), "UPDATE `graffiti` SET `graffitiX` = '%.4f', `graffitiY` = '%.4f', `graffitiZ` = '%.4f', `graffitiAngle` = '%.4f', `graffitiRenk` = '%d', `graffitiYazi` = '%s' WHERE `graffitiID` = '%d'",
        GraffitiBilgi[id][graffitiPos][0],
        GraffitiBilgi[id][graffitiPos][1],
        GraffitiBilgi[id][graffitiPos][2],
        GraffitiBilgi[id][graffitiPos][3],
		GraffitiBilgi[id][graffitiRenk],
		SQL_ReturnEscaped(GraffitiBilgi[id][graffitiYazi]),
		GraffitiBilgi[id][graffitiID]
	);
	return mysql_tquery(mysqlB, kaydet);
}

stock Graffiti_Olustur(Float:x, Float:y, Float:z, Float:angle)
{
	for (new i = 0; i < MAKSIMUM_GRAFFITI; i ++)
	{
	    if(!GraffitiBilgi[i][graffitiKullanimda])
	    {
			GraffitiBilgi[i][graffitiKullanimda] = true;
			GraffitiBilgi[i][graffitiPos][0] = x;
			GraffitiBilgi[i][graffitiPos][1] = y;
			GraffitiBilgi[i][graffitiPos][2] = z;
			GraffitiBilgi[i][graffitiPos][3] = angle - 90.0;
			GraffitiBilgi[i][graffitiRenk] = 0xFFFFFFFF;
			format(GraffitiBilgi[i][graffitiYazi], 32, "Graffiti");

			Graffiti_Yenile(i);
			mysql_tquery(mysqlB, "INSERT INTO `graffiti` (`graffitiRenk`) VALUES(0)", "GraffitiYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Radar_Yenile(radarid)
{
	if(radarid != -1 && RadarBilgi[radarid][radarKullanimda])
	{
		if(IsValidDynamicObject(RadarBilgi[radarid][radarObje])) DestroyDynamicObject(RadarBilgi[radarid][radarObje]), RadarBilgi[radarid][radarObje] = INVALID_OBJECT_ID;
		if(IsValidDynamic3DTextLabel(RadarBilgi[radarid][radarText3D])) DestroyDynamic3DTextLabel(RadarBilgi[radarid][radarText3D]), RadarBilgi[radarid][radarText3D] = Text3D:INVALID_3DTEXT_ID;
        new label_bilgi[64];
		format(label_bilgi, sizeof(label_bilgi), "[HIZ RADARI %d]\n{FFFFFF}Hýz Limiti: %.0f KM/S", radarid, RadarBilgi[radarid][radarLimit]);

		RadarBilgi[radarid][radarText3D] = CreateDynamic3DTextLabel(label_bilgi, RENK_SERVER, RadarBilgi[radarid][radarPos][0], RadarBilgi[radarid][radarPos][1], RadarBilgi[radarid][radarPos][2] + 2.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
        RadarBilgi[radarid][radarObje] = CreateDynamicObject(18880, RadarBilgi[radarid][radarPos][0], RadarBilgi[radarid][radarPos][1], RadarBilgi[radarid][radarPos][2], 0.0, 0.0, RadarBilgi[radarid][radarPos][3]);
	}
	return 1;
}

stock Radar_Kaydet(radarid)
{
	new kaydet[256];
	format(kaydet, sizeof(kaydet), "UPDATE `hizradarlari` SET `radarMenzil` = '%.4f', `radarLimit` = '%.4f', `radarX` = '%.4f', `radarY` = '%.4f', `radarZ` = '%.4f', `radarAngle` = '%.4f' WHERE `radarID` = '%d'",
	    RadarBilgi[radarid][radarMenzil],
	    RadarBilgi[radarid][radarLimit],
	    RadarBilgi[radarid][radarPos][0],
	    RadarBilgi[radarid][radarPos][1],
	    RadarBilgi[radarid][radarPos][2],
	    RadarBilgi[radarid][radarPos][3],
	    RadarBilgi[radarid][radarID]
	);
	return mysql_tquery(mysqlB, kaydet);
}

stock Radar_Yakin(playerid)
{
	for (new i = 0; i < MAKSIMUM_HIZRADARI; i ++) if(RadarBilgi[i][radarKullanimda] && IsPlayerInRangeOfPoint(playerid, RadarBilgi[i][radarMenzil], RadarBilgi[i][radarPos][0], RadarBilgi[i][radarPos][1], RadarBilgi[i][radarPos][2]))
	    return i;

	return -1;
}

stock Radar_Sil(radarid)
{
    if(radarid != -1 && RadarBilgi[radarid][radarKullanimda])
	{
		if(IsValidDynamicObject(RadarBilgi[radarid][radarObje])) DestroyDynamicObject(RadarBilgi[radarid][radarObje]), RadarBilgi[radarid][radarObje] = INVALID_OBJECT_ID;
		if(IsValidDynamic3DTextLabel(RadarBilgi[radarid][radarText3D])) DestroyDynamic3DTextLabel(RadarBilgi[radarid][radarText3D]), RadarBilgi[radarid][radarText3D] = Text3D:INVALID_3DTEXT_ID;

	    new kaldir[64];
		format(kaldir, sizeof(kaldir), "DELETE FROM `hizradarlari` WHERE `radarID` = '%d'", RadarBilgi[radarid][radarID]);
		mysql_tquery(mysqlB, kaldir);

		RadarBilgi[radarid][radarKullanimda] = false;
		RadarBilgi[radarid][radarLimit] = 0.0;
		RadarBilgi[radarid][radarMenzil] = 0.0;
		RadarBilgi[radarid][radarID] = 0;
	}
	return 1;
}

stock Radar_Olustur(playerid, Float:limit, Float:menzil)
{
	new Float:x, Float:y, Float:z, Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	for (new i = 0; i < MAKSIMUM_HIZRADARI; i ++) if(!RadarBilgi[i][radarKullanimda])
	{
	    RadarBilgi[i][radarKullanimda] = true;
	    RadarBilgi[i][radarMenzil] = menzil;
        RadarBilgi[i][radarLimit] = limit;

		RadarBilgi[i][radarPos][0] = x + (1.5 * floatsin(-angle, degrees));
	    RadarBilgi[i][radarPos][1] = y + (1.5 * floatcos(-angle, degrees));
	    RadarBilgi[i][radarPos][2] = z - 1.2;
	    RadarBilgi[i][radarPos][3] = angle;

	    Radar_Yenile(i);
	    mysql_tquery(mysqlB, "INSERT INTO `hizradarlari` (`radarMenzil`) VALUES(0.0)", "RadarYaratildi", "d", i);
	    return i;
	}
	return -1;
}

stock Point_Olustur(playerid)
{
	new Float:x, Float:y, Float:z;
    if(GetPlayerPos(playerid, x, y, z))
	{
		for(new i = 0; i != MAKSIMUM_POINT; i ++) if(!PointBilgi[i][pointKullanimda])
		{
			PointBilgi[i][pointKullanimda] = true;
			PointBilgi[i][pointPos][0] = x;
			PointBilgi[i][pointPos][1] = y;
			PointBilgi[i][pointPos][2] = z;
			PointBilgi[i][pointBirlik] = 0;
			PointBilgi[i][pointSavas] = false;
			format(PointBilgi[i][pointBolge], 64, "Belirsiz Bölge");

			Point_Yenile(i);
			mysql_tquery(mysqlB, "INSERT INTO `pointler` (`pointBirlik`) VALUES(0)", "PointYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Point_Sil(id)
{
	if(id != -1 && PointBilgi[id][pointKullanimda])
	{
	    new silme_sorgu[64];
		format(silme_sorgu, sizeof(silme_sorgu), "DELETE FROM `pointler` WHERE `pointID` = '%d'", PointBilgi[id][pointID]);
		mysql_query(mysqlB, silme_sorgu);

		PointBilgi[id][pointID] = 0;
		PointBilgi[id][pointKullanimda] = false;
		PointBilgi[id][pointBirlik] = 0;
		PointBilgi[id][pointSavas] = false;
	}
	return 1;
}

stock Point_Kaydet(id)
{
	new kayit_sorgu[512];
	format(kayit_sorgu, sizeof(kayit_sorgu), "UPDATE `pointler` SET `pointBirlik` = '%d', `pointBolge` = '%s', `pointPosX` = '%.4f', `pointPosY` = '%.4f', `pointPosZ` = '%.4f' WHERE `pointID` = '%d'",
		PointBilgi[id][pointBirlik],
		SQL_ReturnEscaped(PointBilgi[id][pointBolge]),
		PointBilgi[id][pointPos][0],
		PointBilgi[id][pointPos][1],
		PointBilgi[id][pointPos][2],
		PointBilgi[id][pointID]
	);
	mysql_tquery(mysqlB, kayit_sorgu);
	return 1;
}

stock Point_Yenile(id)
{
	if(id == -1 || PointBilgi[id][pointKullanimda] == false) return 1;

	if(IsValidDynamic3DTextLabel(PointBilgi[id][pointText])) DestroyDynamic3DTextLabel(PointBilgi[id][pointText]), PointBilgi[id][pointText] = Text3D:INVALID_3DTEXT_ID;
	if(IsValidDynamicPickup(PointBilgi[id][pointPickup])) DestroyDynamicPickup(PointBilgi[id][pointPickup]), PointBilgi[id][pointPickup] = INVALID_PICKUP_ID;

	new bilgi[256];

	if(PointBilgi[id][pointBirlik] == 0) format(bilgi, sizeof(bilgi), "[%s - %d]\nBirlik: {FFFFFF}Yok\n{FFFFFF}/elegecir", PointBilgi[id][pointBolge], id);
	else {
	    new birlik_adi[32];
	    for(new i = 0; i != MAKSIMUM_BIRLIK; i++) if(BirlikBilgi[i][birlikKullanimda] && BirlikBilgi[i][birlikID] == PointBilgi[id][pointBirlik]) { format(birlik_adi, sizeof(birlik_adi), "%s", BirlikBilgi[i][birlikAd]); break;}
	    format(bilgi, sizeof(bilgi), "[%s - %d]\nBirlik: {FFFFFF}%s\n{FFFFFF}/elegecir", PointBilgi[id][pointBolge], id, birlik_adi);
	}
	PointBilgi[id][pointText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, PointBilgi[id][pointPos][0], PointBilgi[id][pointPos][1], PointBilgi[id][pointPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	PointBilgi[id][pointPickup] = CreateDynamicPickup(1239, 23, PointBilgi[id][pointPos][0], PointBilgi[id][pointPos][1], PointBilgi[id][pointPos][2], 0, 0);
	return 1;
}

stock Ev_Yarat(playerid, fiyat)
{
	new Float:x, Float:y, Float:z, Float:angle;
    if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i != MAKSIMUM_EV; i ++) if(!EvBilgi[i][evKullanimda])
		{
			EvBilgi[i][evKullanimda] = true;
			EvBilgi[i][evPos][0] = x;
			EvBilgi[i][evPos][1] = y;
			EvBilgi[i][evPos][2] = z;
			EvBilgi[i][evPos][3] = angle;
			EvBilgi[i][evIcPos][0] = 244.411987;
			EvBilgi[i][evIcPos][1] = 305.032989;
			EvBilgi[i][evIcPos][2] = 999.148437;
			EvBilgi[i][evIcPos][3] = 0.0000;
			EvBilgi[i][evDisInt] = GetPlayerInterior(playerid);
			EvBilgi[i][evDisVW] = GetPlayerVirtualWorld(playerid);
			EvBilgi[i][evTur] = 5;

			EvBilgi[i][evInterior] = 1;
			EvBilgi[i][evDurum] = 1;
			EvBilgi[i][evSahip] = 0;
			EvBilgi[i][evFiyat] = fiyat;
			for(new e = 0; e != 5; e++) EvBilgi[i][evAnahtar][e] = 0;
			EvBilgi[i][evKiraci] = 0;
			EvBilgi[i][evKiraUcret] = 20;
			EvBilgi[i][evKiralik] = 0;
			EvBilgi[i][evKasa] = 0;
			EvBilgi[i][evLevel] = 1;
			EvBilgi[i][evVergi] = 0;
			EvBilgi[i][evMuafiyet] = 0;

			Ev_Yenile(i);
			mysql_tquery(mysqlB, "INSERT INTO `evler` (`evSahip`) VALUES(0)", "EvYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Ev_Sil(evid)
{
	if(evid != -1 && EvBilgi[evid][evKullanimda])
	{
	    static string[64];
		format(string, sizeof(string), "DELETE FROM `evler` WHERE `evID` = '%d'", EvBilgi[evid][evID]);
		mysql_tquery(mysqlB, string);

        if(IsValidDynamic3DTextLabel(EvBilgi[evid][evText])) DestroyDynamic3DTextLabel(EvBilgi[evid][evText]), EvBilgi[evid][evText] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicPickup(EvBilgi[evid][evPickup])) DestroyDynamicPickup(EvBilgi[evid][evPickup]), EvBilgi[evid][evPickup] = INVALID_PICKUP_ID;

		for(new i = 0; i != MAKSIMUM_RAF; i ++) if(RafBilgi[i][rafKullanimda] && RafBilgi[i][rafEv] == EvBilgi[evid][evID]) Raf_Sil(i);
		for(new u = 0; u != MAKSIMUM_UYUSTURUCU; u++) if(UyusturucuBilgi[u][uKullanimda] == true && UyusturucuBilgi[u][uEv] == EvBilgi[evid][evID]) Uyusturucu_Sil(u);
		Mobilyalari_Sifirla(evid);

		EvBilgi[evid][evDurum] = 1;
		EvBilgi[evid][evSahip] = 0;
		for(new e = 0; e != 5; e++) EvBilgi[evid][evAnahtar][e] = 0;
		EvBilgi[evid][evKiraci] = 0;
		EvBilgi[evid][evKiraUcret] = 20;
		EvBilgi[evid][evKiralik] = 0;
		EvBilgi[evid][evKasa] = 0;
		EvBilgi[evid][evLevel] = 1;
		EvBilgi[evid][evVergi] = 0;
		EvBilgi[evid][evMuafiyet] = 0;
	    EvBilgi[evid][evKullanimda] = false;
	    EvBilgi[evid][evID] = 0;
	}
	return 1;
}

stock Barikat_Yarat(playerid, model)
{
	static Float:x, Float:y, Float:z, Float:angle;
    if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i != MAKSIMUM_BARIKAT; i ++) if(!BarikatBilgi[i][barikatKullanimda])
		{
			BarikatBilgi[i][barikatKullanimda] = true;
			BarikatBilgi[i][barikatPos][0] = x + (3.0 * floatsin(-angle, degrees));
			BarikatBilgi[i][barikatPos][1] = y + (3.0 * floatcos(-angle, degrees));
			BarikatBilgi[i][barikatPos][2] = z - 0.7;
			BarikatBilgi[i][barikatPos][3] = 0.0;
			BarikatBilgi[i][barikatPos][4] = 0.0;
			BarikatBilgi[i][barikatPos][5] = angle;
			BarikatBilgi[i][barikatModel] = model;

            BarikatBilgi[i][barikatObje] = CreateDynamicObject(BarikatBilgi[i][barikatModel], BarikatBilgi[i][barikatPos][0], BarikatBilgi[i][barikatPos][1], BarikatBilgi[i][barikatPos][2], BarikatBilgi[i][barikatPos][3], BarikatBilgi[i][barikatPos][4], BarikatBilgi[i][barikatPos][5], 0, 0);
			Barikat_Yenile(i);
			return i;
		}
	}
	return -1;
}

stock Barikat_Kaldir(barikatid)
{
	if(barikatid != -1 && BarikatBilgi[barikatid][barikatKullanimda])
	{
        if(IsValidDynamic3DTextLabel(BarikatBilgi[barikatid][barikatText])) DestroyDynamic3DTextLabel(BarikatBilgi[barikatid][barikatText]), BarikatBilgi[barikatid][barikatText] = Text3D:INVALID_3DTEXT_ID;

		if(IsValidDynamicObject(BarikatBilgi[barikatid][barikatObje])) DestroyDynamicObject(BarikatBilgi[barikatid][barikatObje]), BarikatBilgi[barikatid][barikatObje] = INVALID_OBJECT_ID;

	    BarikatBilgi[barikatid][barikatKullanimda] = false;
	}
	return 1;
}

stock Fabrika_Yarat(playerid, urun[], ucret)
{
	static Float:x, Float:y, Float:z, Float:angle;
    if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i != MAKSIMUM_FABRIKA; i ++) if(!FabrikaBilgi[i][fKullanimda])
		{
			FabrikaBilgi[i][fKullanimda] = true;
			FabrikaBilgi[i][fPos][0] = x;
			FabrikaBilgi[i][fPos][1] = y;
			FabrikaBilgi[i][fPos][2] = z;
			FabrikaBilgi[i][fPos][3] = angle;
			format(FabrikaBilgi[i][fabrikaAd], 48, VARSAYILAN_FABRIKA_ADI);
			format(FabrikaBilgi[i][fSahip], 32, VARSAYILAN_FABRIKA_ADI);
			format(FabrikaBilgi[i][fUrun], 64, "%s", urun);
			FabrikaBilgi[i][fUcret] = ucret;
			FabrikaBilgi[i][fKapasite] = 250;

			Fabrika_Yenile(i);
			mysql_tquery(mysqlB, "INSERT INTO `fabrikalar` (`Ucret`) VALUES(0)", "FabrikaYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Fabrika_Sil(fabrikaid)
{
	if(fabrikaid != -1 && FabrikaBilgi[fabrikaid][fKullanimda])
	{
	    static kaldir[64];
		format(kaldir, sizeof(kaldir), "DELETE FROM `fabrikalar` WHERE `fID` = '%d'", FabrikaBilgi[fabrikaid][fID]);
		mysql_tquery(mysqlB, kaldir);

        if(IsValidDynamic3DTextLabel(FabrikaBilgi[fabrikaid][fText])) DestroyDynamic3DTextLabel(FabrikaBilgi[fabrikaid][fText]), FabrikaBilgi[fabrikaid][fText] = Text3D:INVALID_3DTEXT_ID;

		if(IsValidDynamicPickup(FabrikaBilgi[fabrikaid][fPickup]))
		    DestroyDynamicPickup(FabrikaBilgi[fabrikaid][fPickup]), FabrikaBilgi[fabrikaid][fPickup] = INVALID_PICKUP_ID;

	    FabrikaBilgi[fabrikaid][fKullanimda] = false;
	    FabrikaBilgi[fabrikaid][fID] = 0;
	}
	return 1;
}

stock Bina_Yarat(playerid, isim[], model)
{
	static Float:x, Float:y, Float:z, Float:angle;
    if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i != MAKSIMUM_BINA; i ++) if(!BinaBilgi[i][bKullanimda])
 		{
			BinaBilgi[i][bKullanimda] = true;
			BinaBilgi[i][bModel] = model;
			format(BinaBilgi[i][bIsim], 32, isim);
			BinaBilgi[i][bPos][0] = x;
			BinaBilgi[i][bPos][1] = y;
			BinaBilgi[i][bPos][2] = z;
			BinaBilgi[i][bPos][3] = angle;

			BinaBilgi[i][bIPos][0] = x;
			BinaBilgi[i][bIPos][1] = y;
			BinaBilgi[i][bIPos][2] = z + 10000;
			BinaBilgi[i][bIPos][3] = 0.0000;

			BinaBilgi[i][bDisInt] = GetPlayerInterior(playerid);
			BinaBilgi[i][bDisVW] = GetPlayerVirtualWorld(playerid);
			BinaBilgi[i][bInterior] = 0;
			BinaBilgi[i][bVW] = 0;
			BinaBilgi[i][binaDurum] = 1;
			BinaBilgi[i][binaTur] = 0;
			BinaBilgi[i][binaSahip] = 0;
			BinaBilgi[i][binaLevel] = 1;
			BinaBilgi[i][binaBakimSure] = 0;
			for(new e = 0; e != 5; e++) BinaBilgi[i][binaAnahtar][e] = 0;
			Bina_Yenile(i);
			mysql_tquery(mysqlB, "INSERT INTO `binalar` (`binaModel`) VALUES(0)", "BinaYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Bina_Sil(binaid)
{
	if(binaid != -1 && BinaBilgi[binaid][bKullanimda])
	{
	    new string[64];
		format(string, sizeof(string), "DELETE FROM `binalar` WHERE `bID` = '%d'", BinaBilgi[binaid][bID]);
		mysql_tquery(mysqlB, string);

		if(IsValidDynamic3DTextLabel(BinaBilgi[binaid][binaText])) DestroyDynamic3DTextLabel(BinaBilgi[binaid][binaText]), BinaBilgi[binaid][binaText] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicPickup(BinaBilgi[binaid][bPickup])) DestroyDynamicPickup(BinaBilgi[binaid][bPickup]), BinaBilgi[binaid][bPickup] = INVALID_PICKUP_ID;
		if(IsValidDynamicPickup(BinaBilgi[binaid][bIntPickup])) DestroyDynamicPickup(BinaBilgi[binaid][bIntPickup]), BinaBilgi[binaid][bIntPickup] = INVALID_PICKUP_ID;
		for(new i = 0; i != MAKSIMUM_RAF; i ++) if(RafBilgi[i][rafKullanimda] && RafBilgi[i][rafBina] == BinaBilgi[binaid][bID]) Raf_Sil(i);
		for(new e = 0; e != 5; e++) BinaBilgi[binaid][binaAnahtar][e] = 0;

	    BinaBilgi[binaid][bKullanimda] = false;
	    BinaBilgi[binaid][binaBakimSure] = 0;
	    BinaBilgi[binaid][bID] = 0;
	}
	return 1;
}

stock Ankesorlu_Telefon_Yarat(playerid)
{
	static Float:x, Float:y, Float:z, Float:angle;
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i != MAKSIMUM_ANKESORLU_TELEFON; i ++) if(!ATelBilgi[i][aTelKullanimda])
		{
			ATelBilgi[i][aTelKullanimda] = true;
			
			x += 1.0 * floatsin(-angle, degrees);
            y += 1.0 * floatsin(-angle, degrees);
            
            ATelBilgi[i][aTelPos][0] = x;
            ATelBilgi[i][aTelPos][1] = y;
            ATelBilgi[i][aTelPos][2] = z - 0.35;
            ATelBilgi[i][aTelPos][3] = angle;
			ATelBilgi[i][aTelKullaniliyor] = false;
            
            ATelBilgi[i][aTelInterior] = GetPlayerInterior(playerid);
            ATelBilgi[i][aTelWorld] = GetPlayerVirtualWorld(playerid);
            
            Ankesorlu_Telefon_Yenile(i);
            mysql_tquery(mysqlB, "INSERT INTO `anktelefonlar` (`aTelWorld`) VALUES ('0')", "AnkesorluTelefonYaratildi", "d", i);
            return i;
		}
	}
	return -1;
}

stock Stand_Yarat(playerid, tur)
{
	static Float:x, Float:y, Float:z, Float:angle;
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i != MAKSIMUM_STAND; i ++) if(!StandBilgi[i][standKullanimda])
		{
			StandBilgi[i][standKullanimda] = true;

			x += 1.0 * floatsin(-angle, degrees);
            y += 1.0 * floatsin(-angle, degrees);

            StandBilgi[i][standPos][0] = x;
            StandBilgi[i][standPos][1] = y;
            StandBilgi[i][standPos][2] = z - 0.35;
            StandBilgi[i][standPos][3] = angle;
            StandBilgi[i][standSahip] = playerid;
            StandBilgi[i][standTur] = tur;
			OyuncuBilgi[playerid][oTezgahtar] = 1;

            StandBilgi[i][standInterior] = GetPlayerInterior(playerid);
            StandBilgi[i][standWorld] = GetPlayerVirtualWorld(playerid);
            UyariMesaji(playerid, "Baþarýyla tezgah oluþturdun. Lisanssýz kullanýmlar sýkýntý yaratabilir.");
            return i;
		}
	}
	return -1;
}

stock ATM_Yarat(playerid)
{
    static Float:x, Float:y, Float:z, Float:angle;
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i != MAKSIMUM_ATM; i ++) if(!ATMBilgi[i][atmKullanimda])
		{
		    ATMBilgi[i][atmKullanimda] = true;

		    x += 1.0 * floatsin(-angle, degrees);
			y += 1.0 * floatcos(-angle, degrees);

            ATMBilgi[i][atmPos][0] = x;
            ATMBilgi[i][atmPos][1] = y;
            ATMBilgi[i][atmPos][2] = z;
            ATMBilgi[i][atmPos][3] = angle;

            ATMBilgi[i][atmInterior] = GetPlayerInterior(playerid);
            ATMBilgi[i][atmWorld] = GetPlayerVirtualWorld(playerid);
			//ATMBilgi[i][atmPara] = 10000;

			ATM_Yenile(i);
			mysql_tquery(mysqlB, "INSERT INTO `atm` (`atmWorld`) VALUES ('0')", "ATMYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Stand_Sil(standid)
{
    if(standid != -1 && StandBilgi[standid][standKullanimda])
	{

        if(IsValidDynamicObject(StandBilgi[standid][standObje])) DestroyDynamicObject(StandBilgi[standid][standObje]), StandBilgi[standid][standObje] = INVALID_OBJECT_ID;
	    if(IsValidDynamic3DTextLabel(StandBilgi[standid][standText])) DestroyDynamic3DTextLabel(StandBilgi[standid][standText]), StandBilgi[standid][standText] = Text3D:INVALID_3DTEXT_ID;

	    StandBilgi[standid][standKullanimda] = false;
	    StandBilgi[standid][standID] = 0;
	    StandBilgi[standid][standSahip] = -1;
	}
	return 1;
}

stock Ankesorlu_Telefon_Sil(atelid)
{
    if(atelid != -1 && ATelBilgi[atelid][aTelKullanimda])
	{
	    static string[128];
		format(string, sizeof(string), "DELETE FROM `anktelefonlar` WHERE `aTelID` = '%d'", ATelBilgi[atelid][aTelID]);
		mysql_tquery(mysqlB, string);

        if(IsValidDynamicObject(ATelBilgi[atelid][aTelObje])) DestroyDynamicObject(ATelBilgi[atelid][aTelObje]), ATelBilgi[atelid][aTelObje] = INVALID_OBJECT_ID;
	    if(IsValidDynamic3DTextLabel(ATelBilgi[atelid][aTelText])) DestroyDynamic3DTextLabel(ATelBilgi[atelid][aTelText]), ATelBilgi[atelid][aTelText] = Text3D:INVALID_3DTEXT_ID;

	    ATelBilgi[atelid][aTelKullanimda] = false;
	    ATelBilgi[atelid][aTelID] = 0;
	}
	return 1;
}

stock ATM_Sil(atmid)
{
	if(atmid != -1 && ATMBilgi[atmid][atmKullanimda])
	{
	    static string[128];
		format(string, sizeof(string), "DELETE FROM `atm` WHERE `atmID` = '%d'", ATMBilgi[atmid][atmID]);
		mysql_tquery(mysqlB, string);

        if(IsValidDynamicObject(ATMBilgi[atmid][atmObje])) DestroyDynamicObject(ATMBilgi[atmid][atmObje]), ATMBilgi[atmid][atmObje] = INVALID_OBJECT_ID;
	    if(IsValidDynamic3DTextLabel(ATMBilgi[atmid][atmText3D])) DestroyDynamic3DTextLabel(ATMBilgi[atmid][atmText3D]), ATMBilgi[atmid][atmText3D] = Text3D:INVALID_3DTEXT_ID;

	    ATMBilgi[atmid][atmKullanimda] = false;
	    ATMBilgi[atmid][atmID] = 0;
	}
	return 1;
}

stock Stand_Yenile(standid)
{
	if(standid != -1 && StandBilgi[standid][standKullanimda])
	{
	    if(IsValidDynamicObject(StandBilgi[standid][standObje])) DestroyDynamicObject(StandBilgi[standid][standObje]), StandBilgi[standid][standObje] = INVALID_OBJECT_ID;
	    if(IsValidDynamic3DTextLabel(StandBilgi[standid][standText])) DestroyDynamic3DTextLabel(StandBilgi[standid][standText]), StandBilgi[standid][standText] = Text3D: INVALID_3DTEXT_ID;

		new bilgi[128], tur = StandBilgi[standid][standTur], obje = StandBilgi[standid][standTur];
		format(bilgi, sizeof(bilgi), "[%s]", Stand_TurIsim(tur), RENK_TURUNCU >>> 8);
		StandBilgi[standid][standObje] = CreateDynamicObject(Stand_Obje(obje), StandBilgi[standid][standPos][0] + 2.0, StandBilgi[standid][standPos][1], StandBilgi[standid][standPos][2] + 0.2, 0.0, 0.0, StandBilgi[standid][standPos][3], StandBilgi[standid][standWorld], StandBilgi[standid][standInterior]);
		StandBilgi[standid][standText] = CreateDynamic3DTextLabel(bilgi, RENK_TURUNCU, StandBilgi[standid][standPos][0], StandBilgi[standid][standPos][1], StandBilgi[standid][standPos][2] + 0.7, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, StandBilgi[standid][standWorld], StandBilgi[standid][standInterior]);
		return 1;
	}
	return 0;
}


stock Ankesorlu_Telefon_Yenile(atelid)
{
	if(atelid != -1 && ATelBilgi[atelid][aTelKullanimda])
	{
	    if(IsValidDynamicObject(ATelBilgi[atelid][aTelObje])) DestroyDynamicObject(ATelBilgi[atelid][aTelObje]), ATelBilgi[atelid][aTelObje] = INVALID_OBJECT_ID;
	    if(IsValidDynamic3DTextLabel(ATelBilgi[atelid][aTelText])) DestroyDynamic3DTextLabel(ATelBilgi[atelid][aTelText]), ATelBilgi[atelid][aTelText] = Text3D: INVALID_3DTEXT_ID;

		new bilgi[128];
		format(bilgi, sizeof(bilgi), "[Ankesörlü Telefon]\n{FFFFFF}/ankesorlutelefon (Numara)", atelid, RENK_TURUNCU >>> 8);
		ATelBilgi[atelid][aTelObje] = CreateDynamicObject(1216, ATelBilgi[atelid][aTelPos][0], ATelBilgi[atelid][aTelPos][1], ATelBilgi[atelid][aTelPos][2], 0.0, 0.0, ATelBilgi[atelid][aTelPos][3], ATelBilgi[atelid][aTelWorld], ATelBilgi[atelid][aTelInterior]);
		ATelBilgi[atelid][aTelText] = CreateDynamic3DTextLabel(bilgi, RENK_TURUNCU, ATelBilgi[atelid][aTelPos][0], ATelBilgi[atelid][aTelPos][1], ATelBilgi[atelid][aTelPos][2] + 0.7, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, ATelBilgi[atelid][aTelWorld], ATelBilgi[atelid][aTelInterior]);
		return 1;
	}
	return 0;
}

stock ATM_Yenile(atmid)
{
	if(atmid != -1 && ATMBilgi[atmid][atmKullanimda])
	{
	    if(IsValidDynamicObject(ATMBilgi[atmid][atmObje])) DestroyDynamicObject(ATMBilgi[atmid][atmObje]), ATMBilgi[atmid][atmObje] = INVALID_OBJECT_ID;
	    if(IsValidDynamic3DTextLabel(ATMBilgi[atmid][atmText3D])) DestroyDynamic3DTextLabel(ATMBilgi[atmid][atmText3D]), ATMBilgi[atmid][atmText3D] = Text3D:INVALID_3DTEXT_ID;

		new bilgi[128];
		format(bilgi, sizeof(bilgi), "[ATM]\n{FFFFFF}/atm komutuyla menüye eriþebilirsin.", RENK_TURUNCU >>> 8);
		ATMBilgi[atmid][atmObje] = CreateDynamicObject(-2018, ATMBilgi[atmid][atmPos][0], ATMBilgi[atmid][atmPos][1], ATMBilgi[atmid][atmPos][2], 0.0, 0.0, ATMBilgi[atmid][atmPos][3], ATMBilgi[atmid][atmWorld], ATMBilgi[atmid][atmInterior]);
        ATMBilgi[atmid][atmText3D] = CreateDynamic3DTextLabel(bilgi, RENK_TURUNCU, ATMBilgi[atmid][atmPos][0], ATMBilgi[atmid][atmPos][1], ATMBilgi[atmid][atmPos][2] + 0.7, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, ATMBilgi[atmid][atmWorld], ATMBilgi[atmid][atmInterior]);
		return 1;
	}
	return 0;
}

stock NPC_Yarat(playerid, kiyafet, tur)
{
    new Float:x, Float:y, Float:z, Float:angle;
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i != MAKSIMUM_NPC; i++) if(!NPCBilgi[i][nKullanimda])
		{
			NPCBilgi[i][nKullanimda] = true;
			new ad[32];
            format(ad, sizeof(ad), "Ýsimsiz");
			NPCBilgi[i][nPos][0] = x;
			NPCBilgi[i][nPos][1] = y;
			NPCBilgi[i][nPos][2] = z;
			NPCBilgi[i][nPos][3] = angle;
			NPCBilgi[i][nInterior] = GetPlayerInterior(playerid);
			NPCBilgi[i][nWorld] = GetPlayerVirtualWorld(playerid);
			NPCBilgi[i][nKiyafet] = kiyafet;
			NPCBilgi[i][nAd] = ad;
			NPCBilgi[i][nTur] = tur;
			mysql_tquery(mysqlB, "INSERT INTO `npcler` (`nWorld`) VALUES ('0')", "NPCYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Satici_Yarat(playerid, kiyafet, tur)
{
    new Float:x, Float:y, Float:z, Float:angle;
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i != MAKSIMUM_SATICI; i++) if(!SaticiBilgi[i][sKullanimda])
		{
			SaticiBilgi[i][sKullanimda] = true;

			SaticiBilgi[i][sPos][0] = x;
			SaticiBilgi[i][sPos][1] = y;
			SaticiBilgi[i][sPos][2] = z;
			SaticiBilgi[i][sPos][3] = angle;
			SaticiBilgi[i][sInterior] = GetPlayerInterior(playerid);
			SaticiBilgi[i][sWorld] = GetPlayerVirtualWorld(playerid);
			SaticiBilgi[i][sFiyat] = 500;
			SaticiBilgi[i][sAdet] = 1;
			SaticiBilgi[i][sKiyafet] = kiyafet;
			SaticiBilgi[i][sTur] = tur;
			mysql_tquery(mysqlB, "INSERT INTO `saticilar` (`sWorld`) VALUES ('0')", "SaticiYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Satici_Sil(id)
{
	if(id != -1 && SaticiBilgi[id][sKullanimda])
	{
	    new string[128];
		format(string, sizeof(string), "DELETE FROM `saticilar` WHERE `sID` = '%d'", SaticiBilgi[id][sID]);
		mysql_tquery(mysqlB, string);

        if(IsValidDynamicActor(SaticiBilgi[id][sActor])) DestroyDynamicActor(SaticiBilgi[id][sActor]);
	    if(IsValidDynamic3DTextLabel(SaticiBilgi[id][sText])) DestroyDynamic3DTextLabel(SaticiBilgi[id][sText]), SaticiBilgi[id][sText] = Text3D:INVALID_3DTEXT_ID;

	    SaticiBilgi[id][sKullanimda] = false;
	    SaticiBilgi[id][sID] = 0;
	}
	return 1;
}

stock NPC_Sil(id)
{
	if(id != -1 && NPCBilgi[id][nKullanimda])
	{
	    new string[128];
		format(string, sizeof(string), "DELETE FROM `npcler` WHERE `nID` = '%d'", NPCBilgi[id][nID]);
		mysql_tquery(mysqlB, string);

        if(IsValidDynamicActor(NPCBilgi[id][nActor])) DestroyDynamicActor(NPCBilgi[id][nActor]);
	    if(IsValidDynamic3DTextLabel(NPCBilgi[id][nText])) DestroyDynamic3DTextLabel(NPCBilgi[id][nText]), NPCBilgi[id][nText] = Text3D:INVALID_3DTEXT_ID;

	    NPCBilgi[id][nKullanimda] = false;
	    NPCBilgi[id][nID] = 0;
	}
	return 1;
}

stock Uyusturucu_Yarat(playerid)
{
    new Float:x, Float:y, Float:z, Float:angle;
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i != MAKSIMUM_UYUSTURUCU; i++) if(!UyusturucuBilgi[i][uKullanimda])
		{
			UyusturucuBilgi[i][uKullanimda] = true;
			UyusturucuBilgi[i][uPos][0] = x;
			UyusturucuBilgi[i][uPos][1] = y;
			UyusturucuBilgi[i][uPos][2] = z - 0.70;
			UyusturucuBilgi[i][uPos][3] = angle;
			UyusturucuBilgi[i][uInterior] = GetPlayerInterior(playerid);
			UyusturucuBilgi[i][uWorld] = GetPlayerVirtualWorld(playerid);
			UyusturucuBilgi[i][uDakika] = 0;
			UyusturucuBilgi[i][uGenelDakika] = 0;
			UyusturucuBilgi[i][uDurum] = 0;
			UyusturucuBilgi[i][uBakim] = 1;
			if(Oyuncu_Evde(playerid) > -1) UyusturucuBilgi[i][uEv] = EvBilgi[Oyuncu_Evde(playerid)][evID];
			if(Oyuncu_Binada(playerid) > -1) UyusturucuBilgi[i][uBina] = BinaBilgi[Oyuncu_Binada(playerid)][bID];
			UyusturucuBilgi[i][uSahip] = OyuncuBilgi[playerid][oID];
			if(OyuncuBilgi[playerid][oVIP] > 0 && OyuncuBilgi[playerid][oUyusturucuBoost] == 0) UyusturucuBilgi[i][uTur] = OyuncuBilgi[playerid][oVIP];
			else if(OyuncuBilgi[playerid][oUyusturucuBoost] > 0) UyusturucuBilgi[i][uTur] = 4;
			OyuncuBilgi[playerid][oTohum]--;
			OyuncuBilgi[playerid][oSaksi]--;
			mysql_tquery(mysqlB, "INSERT INTO `uyusturucular` (`uWorld`) VALUES ('0')", "UyusturucuYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Uyusturucu_Sil(uid)
{
	if(uid != -1 && UyusturucuBilgi[uid][uKullanimda])
	{
	    static kaldir[128];
		format(kaldir, sizeof(kaldir), "DELETE FROM `uyusturucular` WHERE `uID` = '%d'", UyusturucuBilgi[uid][uID]);
		mysql_tquery(mysqlB, kaldir);

        if(IsValidDynamicObject(UyusturucuBilgi[uid][uObje])) DestroyDynamicObject(UyusturucuBilgi[uid][uObje]), UyusturucuBilgi[uid][uObje] = INVALID_OBJECT_ID;
	    if(IsValidDynamic3DTextLabel(UyusturucuBilgi[uid][uText])) DestroyDynamic3DTextLabel(UyusturucuBilgi[uid][uText]), UyusturucuBilgi[uid][uText] = Text3D:INVALID_3DTEXT_ID;
	    foreach(new i : Player) if(OyuncuBilgi[i][oBakim] == uid) HataMesaji(i, "Üzerinde iþlem yaptýðýnýz uyuþturucu kaldýrýldýðý için iþleminiz iptal edildi."), OyuncuBilgi[i][oBakim] = -1, KillTimer(OyuncuBilgi[i][oUyusturucuTimer]);

	    UyusturucuBilgi[uid][uKullanimda] = false;
	    UyusturucuBilgi[uid][uID] = 0;
	}
	return 1;
}

stock Uyusturucu_Yenile(uid)
{
	if(uid != -1 && UyusturucuBilgi[uid][uKullanimda])
	{
	    if(IsValidDynamicObject(UyusturucuBilgi[uid][uObje])) DestroyDynamicObject(UyusturucuBilgi[uid][uObje]), UyusturucuBilgi[uid][uObje] = INVALID_OBJECT_ID;
	    if(IsValidDynamic3DTextLabel(UyusturucuBilgi[uid][uText])) DestroyDynamic3DTextLabel(UyusturucuBilgi[uid][uText]), UyusturucuBilgi[uid][uText] = Text3D:INVALID_3DTEXT_ID;

		new bilgi[512];
		format(bilgi, sizeof(bilgi), "{FCFCFC}Durum: {10F2C5}%d%%\n{FCFCFC}Bakým: {FF8B26}%s\n{FCFCFC}Bakým Yapýlan: {FF8B26}%d dakika\n{FCFCFC}Toplam Dakika: {FF8B26}%d dakika", UyusturucuBilgi[uid][uDurum], (UyusturucuBilgi[uid][uBakim] == 1) ? ("Yapýlmýþ") : ("Yapýlmamýþ"), UyusturucuBilgi[uid][uDakika], UyusturucuBilgi[uid][uGenelDakika]);
		UyusturucuBilgi[uid][uObje] = CreateDynamicObject(2244, UyusturucuBilgi[uid][uPos][0], UyusturucuBilgi[uid][uPos][1], UyusturucuBilgi[uid][uPos][2], 0.0, 0.0, UyusturucuBilgi[uid][uPos][3], UyusturucuBilgi[uid][uWorld], UyusturucuBilgi[uid][uInterior]);
        UyusturucuBilgi[uid][uText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, UyusturucuBilgi[uid][uPos][0], UyusturucuBilgi[uid][uPos][1], UyusturucuBilgi[uid][uPos][2] + 0.30, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, UyusturucuBilgi[uid][uWorld], UyusturucuBilgi[uid][uInterior]);
        if(UyusturucuBilgi[uid][uDurum] < 15) SetDynamicObjectMaterial(UyusturucuBilgi[uid][uObje], 2, 19478, "signsurf", "sign", 0xFFFFFFFF);
		else if(UyusturucuBilgi[uid][uDurum] >= 15) SetDynamicObjectMaterial(UyusturucuBilgi[uid][uObje], 2, 2, "plants_TABLETOP", "CJ_PLANT", 0xFF2ECC71);
		return 1;
	}
	return 0;
}

stock Uyusturucu_Kaydet(uid)
{
	new query[640];
	format(query, sizeof(query), "UPDATE `uyusturucular` SET `posX` = '%.4f', `posY` = '%.4f', `posZ` = '%.4f', `posA` = '%.4f', `uInterior` = '%d', `uWorld` = '%d'",
		UyusturucuBilgi[uid][uPos][0],
	    UyusturucuBilgi[uid][uPos][1],
	    UyusturucuBilgi[uid][uPos][2],
	    UyusturucuBilgi[uid][uPos][3],
	    UyusturucuBilgi[uid][uInterior],
	    UyusturucuBilgi[uid][uWorld]
	);
	format(query, sizeof(query), "%s, `Bakim` = '%d', `Durum` = '%d', `Dakika` = '%d', `Ev` = '%d', `Bina` = '%d', `Sahip` = '%d', `Tur` = '%d', `GenelDakika` = '%d' WHERE `uID` = '%d'",
	    query,
	    UyusturucuBilgi[uid][uBakim],
	    UyusturucuBilgi[uid][uDurum],
	    UyusturucuBilgi[uid][uDakika],
	    UyusturucuBilgi[uid][uEv],
	    UyusturucuBilgi[uid][uBina],
	    UyusturucuBilgi[uid][uSahip],
	    UyusturucuBilgi[uid][uTur],
	    UyusturucuBilgi[uid][uGenelDakika],
	    UyusturucuBilgi[uid][uID]
	);
	return mysql_tquery(mysqlB, query);
}

stock NPC_Kaydet(id)
{
	new query[512];
	format(query, sizeof(query), "UPDATE `npcler` SET `X` = '%.4f', `Y` = '%.4f', `Z` = '%.4f', `A` = '%.4f', `nInterior` = '%d', `nWorld` = '%d', `Ad` = '%s'",
		NPCBilgi[id][nPos][0],
	    NPCBilgi[id][nPos][1],
	    NPCBilgi[id][nPos][2],
	    NPCBilgi[id][nPos][3],
	    NPCBilgi[id][nInterior],
	    NPCBilgi[id][nWorld],
	    SQL_ReturnEscaped(NPCBilgi[id][nAd])
	);
	format(query, sizeof(query), "%s, `Kiyafet` = '%d', `Tur` = '%d' WHERE `nID` = '%d'",
	    query,
		NPCBilgi[id][nKiyafet],
		NPCBilgi[id][nTur],
	    NPCBilgi[id][nID]
	);
	return mysql_tquery(mysqlB, query);
}

stock Satici_Yenile(id)
{
	if(id != -1 && SaticiBilgi[id][sKullanimda])
	{
	    if(IsValidDynamicActor(SaticiBilgi[id][sActor])) DestroyDynamicActor(SaticiBilgi[id][sActor]);
	    if(IsValidDynamic3DTextLabel(SaticiBilgi[id][sText])) DestroyDynamic3DTextLabel(SaticiBilgi[id][sText]), SaticiBilgi[id][sText] = Text3D:INVALID_3DTEXT_ID;

		new bilgi[256], tur[32];
		switch(SaticiBilgi[id][sTur]) {
		    case 1: format(tur, sizeof(tur), "Tohum");
		    case 2: format(tur, sizeof(tur), "Maymuncuk");
		    case 3: format(tur, sizeof(tur), "Silah Satýcýsý");
		    case 4: format(tur, sizeof(tur), "Mermi Satýcýsý");
		    case 5: format(tur, sizeof(tur), "Kelepçe Kýrýcý");
		    case 6: format(tur, sizeof(tur), "Parça Üretici");
		    case 7: format(tur, sizeof(tur), "Silah Üretici");
		}
		format(bilgi, sizeof(bilgi), "[SATICI %d]\nTür: {FFFFFF}%s\n{FFFFFF}/satici", id, tur);
		SaticiBilgi[id][sActor] = CreateDynamicActor(SaticiBilgi[id][sKiyafet], SaticiBilgi[id][sPos][0], SaticiBilgi[id][sPos][1], SaticiBilgi[id][sPos][2], SaticiBilgi[id][sPos][3], 1, 100.0, SaticiBilgi[id][sWorld], SaticiBilgi[id][sInterior]);
        SaticiBilgi[id][sText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, SaticiBilgi[id][sPos][0], SaticiBilgi[id][sPos][1], SaticiBilgi[id][sPos][2] + 1.5, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, SaticiBilgi[id][sWorld], SaticiBilgi[id][sInterior]);
        ClearDynamicActorAnimations(SaticiBilgi[id][sActor]);
        SetActorVirtualWorld(SaticiBilgi[id][sActor], SaticiBilgi[id][sWorld]);
		return 1;
	}
	return 0;
}

stock NPC_Yenile(id)
{
	if(id != -1 && NPCBilgi[id][nKullanimda])
	{
	    if(IsValidDynamicActor(NPCBilgi[id][nActor])) DestroyDynamicActor(NPCBilgi[id][nActor]);
	    if(IsValidDynamic3DTextLabel(NPCBilgi[id][nText])) DestroyDynamic3DTextLabel(NPCBilgi[id][nText]), NPCBilgi[id][nText] = Text3D:INVALID_3DTEXT_ID;

		new bilgi[256], tur[32];
		switch(NPCBilgi[id][nTur]) {
		    case 1: format(tur, sizeof(tur), "Belediye Ýþlemleri");
		    case 2: format(tur, sizeof(tur), "Banka Ýþlemleri");
		    case 3: format(tur, sizeof(tur), "Lisans Ýþlemleri");
		    case 4: format(tur, sizeof(tur), "Spor Öðretmeni");
		    case 5: format(tur, sizeof(tur), "Kart Ýþlemleri");
		    case 6: format(tur, sizeof(tur), "Balýkçý");
		}
		format(bilgi, sizeof(bilgi), "[Aktör]\n{FFFFFF}%s\n{FFFFFF}/aktor", NPCBilgi[id][nAd]);
		NPCBilgi[id][nActor] = CreateDynamicActor(NPCBilgi[id][nKiyafet], NPCBilgi[id][nPos][0], NPCBilgi[id][nPos][1], NPCBilgi[id][nPos][2], NPCBilgi[id][nPos][3], 1, 100.0, NPCBilgi[id][nWorld], NPCBilgi[id][nInterior]);
        NPCBilgi[id][nText] = CreateDynamic3DTextLabel(bilgi, RENK_TURUNCU, NPCBilgi[id][nPos][0], NPCBilgi[id][nPos][1], NPCBilgi[id][nPos][2] + 1.1, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, NPCBilgi[id][nWorld], NPCBilgi[id][nInterior]);
        ClearDynamicActorAnimations(NPCBilgi[id][nActor]);
        //SetActorVirtualWorld(NPCBilgi[id][nActor], -1);
		return 1;
	}
	return 0;
}

stock Satici_Kaydet(id)
{
	new query[512];
	format(query, sizeof(query), "UPDATE `saticilar` SET `X` = '%.4f', `Y` = '%.4f', `Z` = '%.4f', `A` = '%.4f', `sInterior` = '%d', `sWorld` = '%d'",
		SaticiBilgi[id][sPos][0],
	    SaticiBilgi[id][sPos][1],
	    SaticiBilgi[id][sPos][2],
	    SaticiBilgi[id][sPos][3],
	    SaticiBilgi[id][sInterior],
	    SaticiBilgi[id][sWorld]
	);
	format(query, sizeof(query), "%s, `Fiyat` = '%d', `Adet` = '%d', `Kiyafet` = '%d', `Tur` = '%d' WHERE `sID` = '%d'",
	    query,
	    SaticiBilgi[id][sFiyat],
	    SaticiBilgi[id][sAdet],
		SaticiBilgi[id][sKiyafet],
		SaticiBilgi[id][sTur],
	    SaticiBilgi[id][sID]
	);
	return mysql_tquery(mysqlB, query);
}


stock ATM_Kaydet(atmid)
{
	static query[512];
	format(query, sizeof(query), "UPDATE `atm` SET `atmX` = '%.4f', `atmY` = '%.4f', `atmZ` = '%.4f', `atmA` = '%.4f', `atmInterior` = '%d', `atmWorld` = '%d' WHERE `atmID` = '%d'",
		ATMBilgi[atmid][atmPos][0],
	    ATMBilgi[atmid][atmPos][1],
	    ATMBilgi[atmid][atmPos][2],
	    ATMBilgi[atmid][atmPos][3],
	    ATMBilgi[atmid][atmInterior],
	    ATMBilgi[atmid][atmWorld],
	    ATMBilgi[atmid][atmID]
	);
	return mysql_tquery(mysqlB, query);
}

stock Ankesorlu_Telefon_Kaydet(atelid)
{
	static query[512];
	format(query, sizeof(query), "UPDATE `anktelefonlar` SET `atelX` = '%.4f', `atelY` = '%.4f', `atelZ` = '%.4f', `atelA` = '%.4f', `atelInterior` = '%d', `atelWorld` = '%d' WHERE `atelID` = '%d'",
		ATelBilgi[atelid][aTelPos][0],
	    ATelBilgi[atelid][aTelPos][1],
	    ATelBilgi[atelid][aTelPos][2],
	    ATelBilgi[atelid][aTelPos][3],
	    ATelBilgi[atelid][aTelInterior],
	    ATelBilgi[atelid][aTelWorld],
	    ATelBilgi[atelid][aTelID]
	);
	return mysql_tquery(mysqlB, query);
}

stock Sandik_Yarat(playerid)
{
    static Float:x, Float:y, Float:z, Float:angle;
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i < MAKSIMUM_SANDIK; i ++) if(!SandikBilgi[i][sKullanimda])
		{
		    SandikBilgi[i][sKullanimda] = true;

		    x += 1.0 * floatsin(-angle, degrees);
			y += 1.0 * floatcos(-angle, degrees);

            SandikBilgi[i][sPos][0] = x;
            SandikBilgi[i][sPos][1] = y;
            SandikBilgi[i][sPos][2] = z;
            SandikBilgi[i][sPos][3] = angle;

			format(SandikBilgi[i][sandikSahip], 32, VARSAYILAN_SANDIK_SAHIBI);

            SandikBilgi[i][sInterior] = GetPlayerInterior(playerid);
            SandikBilgi[i][sWorld] = GetPlayerVirtualWorld(playerid);
            SandikBilgi[i][sOy] = 0;

		 	Sandik_Yenile(i);
			mysql_tquery(mysqlB, "INSERT INTO `sandiklar` (`sandikOy`) VALUES(0)", "SandikYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Sandik_Sil(sandikid)
{
	if(sandikid != -1 && SandikBilgi[sandikid][sKullanimda])
	{
	    static sil[64];
		format(sil, sizeof(sil), "DELETE FROM `sandiklar` WHERE `sandikID` = '%d'", SandikBilgi[sandikid][sID]);
		mysql_tquery(mysqlB, sil);

        if(IsValidDynamicObject(SandikBilgi[sandikid][sObje])) DestroyDynamicObject(SandikBilgi[sandikid][sObje]), SandikBilgi[sandikid][sObje] = INVALID_OBJECT_ID;
	    if(IsValidDynamic3DTextLabel(SandikBilgi[sandikid][sandikText])) DestroyDynamic3DTextLabel(SandikBilgi[sandikid][sandikText]), SandikBilgi[sandikid][sandikText] = Text3D:INVALID_3DTEXT_ID;

	    SandikBilgi[sandikid][sKullanimda] = false;
	    SandikBilgi[sandikid][sID] = 0;
        SandikBilgi[sandikid][sOy] = 0;
	}
	return 1;
}

stock Sandik_Kaydet(sandikid)
{
	static kaydet[1024];
	format(kaydet, sizeof(kaydet), "UPDATE `sandiklar` SET `sandikX` = '%.4f', `sandikY` = '%.4f', `sandikZ` = '%.4f', `sandikA` = '%.4f', `sandikInterior` = '%d', `sandikWorld` = '%d', `sandikOy` = '%d', `Sahip` = '%s' WHERE `sandikID` = '%d'",
	    SandikBilgi[sandikid][sPos][0],
	    SandikBilgi[sandikid][sPos][1],
	    SandikBilgi[sandikid][sPos][2],
	    SandikBilgi[sandikid][sPos][3],
	    SandikBilgi[sandikid][sInterior],
	    SandikBilgi[sandikid][sWorld],
	    SandikBilgi[sandikid][sOy],
	    SandikBilgi[sandikid][sandikSahip],
	    SandikBilgi[sandikid][sID]
	);
	mysql_tquery(mysqlB, kaydet);
	return 1;
}

stock Sandik_Yenile(sandikid)
{
	if(sandikid != -1 && SandikBilgi[sandikid][sKullanimda])
	{
	    if(IsValidDynamicObject(SandikBilgi[sandikid][sObje])) DestroyDynamicObject(SandikBilgi[sandikid][sObje]), SandikBilgi[sandikid][sObje] = INVALID_OBJECT_ID;
	    if(IsValidDynamic3DTextLabel(SandikBilgi[sandikid][sandikText])) DestroyDynamic3DTextLabel(SandikBilgi[sandikid][sandikText]), SandikBilgi[sandikid][sandikText] = Text3D:INVALID_3DTEXT_ID;

		new bilgi[512];
		format(bilgi, sizeof(bilgi), "[Sandýk %d]\n{FFFFFF}%s\n{2B3C50}Toplam Oy: {FFFFFF}%s\n/oykullan", sandikid, SandikBilgi[sandikid][sandikSahip], NumaraFormati(SandikBilgi[sandikid][sOy], ""));
		SandikBilgi[sandikid][sObje] = CreateDynamicObject(2461, SandikBilgi[sandikid][sPos][0], SandikBilgi[sandikid][sPos][1], SandikBilgi[sandikid][sPos][2]-1, 0.0, 0.0, SandikBilgi[sandikid][sPos][3]-1, SandikBilgi[sandikid][sWorld], SandikBilgi[sandikid][sInterior]);
        SandikBilgi[sandikid][sandikText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, SandikBilgi[sandikid][sPos][0], SandikBilgi[sandikid][sPos][1], SandikBilgi[sandikid][sPos][2]+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, SandikBilgi[sandikid][sWorld], SandikBilgi[sandikid][sInterior]);
		return 1;
	}
	return 0;
}

stock ModifiyeNoktasi_Yarat(playerid, ucret)
{
    new Float:x, Float:y, Float:z;
	if(GetPlayerPos(playerid, x, y, z))
	{
		for(new i = 0; i < MAKSIMUM_MODIFIYENOKTASI; i++) if(!ModifiyeNoktasi[i][modifiyeKullanimda])
		{
		    ModifiyeNoktasi[i][modifiyeKullanimda] = true;
            ModifiyeNoktasi[i][modifiyePos][0] = x;
            ModifiyeNoktasi[i][modifiyePos][1] = y;
            ModifiyeNoktasi[i][modifiyePos][2] = z;
            ModifiyeNoktasi[i][modifiyeInt] = GetPlayerInterior(playerid);
            ModifiyeNoktasi[i][modifiyeDunya] = GetPlayerVirtualWorld(playerid);
            ModifiyeNoktasi[i][modifiyeUcret] = ucret;
            ModifiyeNoktasi[i][modifiyeBirlik] = 0;
            ModifiyeNoktasi[i][modifiyeKullanan] = INVALID_PLAYER_ID;

		 	ModifiyeNoktasi_Yenile(i);
			mysql_tquery(mysqlB, "INSERT INTO `modifiyenoktalari` (`Dunya`) VALUES(0)", "ModifiyeNoktasiYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock ModifiyeNoktasi_Kaldir(id)
{
	if(id != -1 && ModifiyeNoktasi[id][modifiyeKullanimda])
	{
	    new sil[64];
		format(sil, sizeof(sil), "DELETE FROM `modifiyenoktalari` WHERE `ID` = '%d'", ModifiyeNoktasi[id][modifiyeID]);
		mysql_tquery(mysqlB, sil);

		if(IsValidDynamicPickup(ModifiyeNoktasi[id][mPickup])) DestroyDynamicPickup(ModifiyeNoktasi[id][mPickup]), ModifiyeNoktasi[id][mPickup] = INVALID_PICKUP_ID;
	    if(IsValidDynamic3DTextLabel(ModifiyeNoktasi[id][mText])) DestroyDynamic3DTextLabel(ModifiyeNoktasi[id][mText]), ModifiyeNoktasi[id][mText] = Text3D:INVALID_3DTEXT_ID;

        ModifiyeNoktasi[id][modifiyeKullanan] = INVALID_PLAYER_ID;
	    ModifiyeNoktasi[id][modifiyeKullanimda] = false;
	    ModifiyeNoktasi[id][modifiyeID] = 0;
	}
	return 1;
}

stock ModifiyeNoktasi_Kaydet(id)
{
    if(id == -1 || ModifiyeNoktasi[id][modifiyeKullanimda] == false) return 0;

	new kaydet[1024];
	format(kaydet, sizeof(kaydet), "UPDATE `modifiyenoktalari` SET `X` = '%.4f', `Y` = '%.4f', `Z` = '%.4f', `Interior` = '%d', `Dunya` = '%d', `Ucret` = '%d', `Birlik` = '%d' WHERE `ID` = '%d'",
	    ModifiyeNoktasi[id][modifiyePos][0],
	    ModifiyeNoktasi[id][modifiyePos][1],
	    ModifiyeNoktasi[id][modifiyePos][2],
	    ModifiyeNoktasi[id][modifiyeInt],
	    ModifiyeNoktasi[id][modifiyeDunya],
	    ModifiyeNoktasi[id][modifiyeUcret],
	    ModifiyeNoktasi[id][modifiyeBirlik],
		ModifiyeNoktasi[id][modifiyeID]
	);
	mysql_tquery(mysqlB, kaydet);
	return 1;
}

stock ModifiyeNoktasi_Yenile(id)
{
	if(id != -1 && ModifiyeNoktasi[id][modifiyeKullanimda])
	{
		if(IsValidDynamicPickup(ModifiyeNoktasi[id][mPickup])) DestroyDynamicPickup(ModifiyeNoktasi[id][mPickup]), ModifiyeNoktasi[id][mPickup] = INVALID_PICKUP_ID;
	    if(IsValidDynamic3DTextLabel(ModifiyeNoktasi[id][mText])) DestroyDynamic3DTextLabel(ModifiyeNoktasi[id][mText]), ModifiyeNoktasi[id][mText] = Text3D:INVALID_3DTEXT_ID;
	    new sahip[64];
		switch(ModifiyeNoktasi[id][modifiyeBirlik]) {
			case 0: format(sahip, sizeof(sahip), "Row");
			default: for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikID] == ModifiyeNoktasi[id][modifiyeBirlik]) { format(sahip, sizeof(sahip), "%s", BirlikBilgi[i][birlikAd]); break; }
		}
		new bilgi[512];
		format(bilgi, sizeof(bilgi), "[Tamir Noktasý %d]\n{FFFFFF}/tamir - /modsil", id);
		ModifiyeNoktasi[id][mPickup] = CreateDynamicPickup(19627, 23, ModifiyeNoktasi[id][modifiyePos][0], ModifiyeNoktasi[id][modifiyePos][1], ModifiyeNoktasi[id][modifiyePos][2], ModifiyeNoktasi[id][modifiyeDunya], ModifiyeNoktasi[id][modifiyeInt]); // + 0.7
        ModifiyeNoktasi[id][mText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, ModifiyeNoktasi[id][modifiyePos][0], ModifiyeNoktasi[id][modifiyePos][1], ModifiyeNoktasi[id][modifiyePos][2]+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, ModifiyeNoktasi[id][modifiyeDunya], ModifiyeNoktasi[id][modifiyeInt]);
		return 1;
	}
	return 0;
}

stock TutuklamaNoktasi_Yarat(playerid)
{
    new Float:x, Float:y, Float:z, Float:angle;
	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for(new i = 0; i < MAKSIMUM_TUTUKLAMANOKTASI; i++) if(!TutuklamaNoktasi[i][tKullanimda])
		{
		    TutuklamaNoktasi[i][tKullanimda] = true;
            TutuklamaNoktasi[i][tPos][0] = x;
            TutuklamaNoktasi[i][tPos][1] = y;
            TutuklamaNoktasi[i][tPos][2] = z;
            TutuklamaNoktasi[i][tPos][3] = angle;
            TutuklamaNoktasi[i][tInterior] = GetPlayerInterior(playerid);
            TutuklamaNoktasi[i][tWorld] = GetPlayerVirtualWorld(playerid);

            TutuklamaNoktasi[i][hPos][0] = 0.0;
            TutuklamaNoktasi[i][hPos][1] = 0.0;
            TutuklamaNoktasi[i][hPos][2] = 0.0;
            TutuklamaNoktasi[i][hPos][3] = 0.0;
            TutuklamaNoktasi[i][hInterior] = 0;
            TutuklamaNoktasi[i][hWorld] = 0;

		 	TutuklamaNoktasi_Yenile(i);
			mysql_tquery(mysqlB, "INSERT INTO `tutuklamanoktalari` (`tWorld`) VALUES(0)", "TNoktasiYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock TutuklamaNoktasi_Kaldir(tid)
{
	if(tid != -1 && TutuklamaNoktasi[tid][tKullanimda])
	{
	    new sil[64];
		format(sil, sizeof(sil), "DELETE FROM `tutuklamanoktalari` WHERE `tID` = '%d'", TutuklamaNoktasi[tid][tID]);
		mysql_query(mysqlB, sil);

		if(IsValidDynamicPickup(TutuklamaNoktasi[tid][tPickup])) DestroyDynamicPickup(TutuklamaNoktasi[tid][tPickup]), TutuklamaNoktasi[tid][tPickup] = INVALID_PICKUP_ID;
	    if(IsValidDynamic3DTextLabel(TutuklamaNoktasi[tid][tText])) DestroyDynamic3DTextLabel(TutuklamaNoktasi[tid][tText]), TutuklamaNoktasi[tid][tText] = Text3D:INVALID_3DTEXT_ID;

	    TutuklamaNoktasi[tid][tKullanimda] = false;
	    TutuklamaNoktasi[tid][tID] = 0;
	}
	return 1;
}

stock TutuklamaNoktasi_Kaydet(tid)
{
	static kaydet[1024];
	kaydet[0] = 0;
	format(kaydet, sizeof(kaydet), "UPDATE `tutuklamanoktalari` SET `x` = '%.4f', `y` = '%.4f', `z` = '%.4f', `a` = '%.4f', `tInterior` = '%d', `tWorld` = '%d'",
	    TutuklamaNoktasi[tid][tPos][0],
	    TutuklamaNoktasi[tid][tPos][1],
	    TutuklamaNoktasi[tid][tPos][2],
	    TutuklamaNoktasi[tid][tPos][3],
	    TutuklamaNoktasi[tid][tInterior],
	    TutuklamaNoktasi[tid][tWorld]
	);
	format(kaydet, sizeof(kaydet), "%s, `hx` = '%.4f', `hy` = '%.4f', `hz` = '%.4f', `ha` = '%.4f', `hInterior` = '%d', `hWorld` = '%d' WHERE `tID` = '%d'",
		kaydet,
	    TutuklamaNoktasi[tid][hPos][0],
	    TutuklamaNoktasi[tid][hPos][1],
	    TutuklamaNoktasi[tid][hPos][2],
	    TutuklamaNoktasi[tid][hPos][3],
	    TutuklamaNoktasi[tid][hInterior],
	    TutuklamaNoktasi[tid][hWorld],
		TutuklamaNoktasi[tid][tID]
	);
	mysql_tquery(mysqlB, kaydet);
	return 1;
}

stock TutuklamaNoktasi_Yenile(tid)
{
	if(tid != -1 && TutuklamaNoktasi[tid][tKullanimda])
	{
		if(IsValidDynamicPickup(TutuklamaNoktasi[tid][tPickup])) DestroyDynamicPickup(TutuklamaNoktasi[tid][tPickup]), TutuklamaNoktasi[tid][tPickup] = INVALID_PICKUP_ID;
	    if(IsValidDynamic3DTextLabel(TutuklamaNoktasi[tid][tText])) DestroyDynamic3DTextLabel(TutuklamaNoktasi[tid][tText]), TutuklamaNoktasi[tid][tText] = Text3D:INVALID_3DTEXT_ID;

		new bilgi[512];
		format(bilgi, sizeof(bilgi), "[Tutuklama Noktasý %d]\n{FFFFFF}Tutuklama için /hapis", tid);
		TutuklamaNoktasi[tid][tPickup] = CreateDynamicPickup(1247, 23, TutuklamaNoktasi[tid][tPos][0], TutuklamaNoktasi[tid][tPos][1], TutuklamaNoktasi[tid][tPos][2], TutuklamaNoktasi[tid][tWorld], TutuklamaNoktasi[tid][tInterior]); // + 0.7
        TutuklamaNoktasi[tid][tText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, TutuklamaNoktasi[tid][tPos][0], TutuklamaNoktasi[tid][tPos][1], TutuklamaNoktasi[tid][tPos][2]+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, TutuklamaNoktasi[tid][tWorld], TutuklamaNoktasi[tid][tInterior]);
		return 1;
	}
	return 0;
}

stock Meslek_Yarat(playerid, tur)
{
	static Float:x, Float:y, Float:z;
	if(GetPlayerPos(playerid, x, y, z))
	{
		for(new i = 0; i != MAKSIMUM_MESLEK; i ++) if(!MeslekBilgi[i][mKullanimda])
		{
			MeslekBilgi[i][mKullanimda] = true;
			MeslekBilgi[i][mTur] = tur;

			MeslekBilgi[i][mPos][0] = x;
			MeslekBilgi[i][mPos][1] = y;
			MeslekBilgi[i][mPos][2] = z;
			MeslekBilgi[i][mInterior] = GetPlayerInterior(playerid);
			MeslekBilgi[i][mWorld] = GetPlayerVirtualWorld(playerid);
			Meslek_Yenile(i);
			mysql_tquery(mysqlB, "INSERT INTO `meslekler` (`mInterior`) VALUES(0)", "MeslekYaratildi", "d", i);
			return i;
	    }
	}
	return -1;
}

stock Meslek_Yenile(meslekid)
{
	if(meslekid != -1 && MeslekBilgi[meslekid][mKullanimda])
	{
		if(IsValidDynamic3DTextLabel(MeslekBilgi[meslekid][mText])) DestroyDynamic3DTextLabel(MeslekBilgi[meslekid][mText]), MeslekBilgi[meslekid][mText] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicPickup(MeslekBilgi[meslekid][mPickup])) DestroyDynamicPickup(MeslekBilgi[meslekid][mPickup]), MeslekBilgi[meslekid][mPickup] = INVALID_PICKUP_ID;
		if(MeslekBilgi[meslekid][mTur] == 8) return 1;
		
		new bilgi[128];
		switch(MeslekBilgi[meslekid][mTur]) {
		    case 1: format(bilgi, sizeof(bilgi), "[%s]\n{FFFFFF}Yük almak için /kamyoncu\n", MeslekIsim(MeslekBilgi[meslekid][mTur]));
		    case 2: format(bilgi, sizeof(bilgi), "[%s]\n{FFFFFF}Mesleðe baþlamak için /temizlikci\n", MeslekIsim(MeslekBilgi[meslekid][mTur]));
		    case 9: format(bilgi, sizeof(bilgi), "[%s]\n{FFFFFF}Menüye eriþmek için /madenci\n", MeslekIsim(MeslekBilgi[meslekid][mTur]));
		    default: format(bilgi, sizeof(bilgi), "[%s]\n", MeslekIsim(MeslekBilgi[meslekid][mTur]));
		}
		strcat(bilgi, "{FFFFFF}Mesleðe katýlmak için /meslek komutunu kullanabilirsin.");
		MeslekBilgi[meslekid][mText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, MeslekBilgi[meslekid][mPos][0], MeslekBilgi[meslekid][mPos][1], MeslekBilgi[meslekid][mPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, MeslekBilgi[meslekid][mWorld], MeslekBilgi[meslekid][mInterior]);
        MeslekBilgi[meslekid][mPickup] = CreateDynamicPickup(1210, 23, MeslekBilgi[meslekid][mPos][0], MeslekBilgi[meslekid][mPos][1], MeslekBilgi[meslekid][mPos][2], MeslekBilgi[meslekid][mWorld], MeslekBilgi[meslekid][mInterior]);
	}
	return 1;
}

stock Meslek_Sil(meslekid)
{
	if(meslekid != -1 && MeslekBilgi[meslekid][mKullanimda])
	{
	    new sorgu[96];
		format(sorgu, sizeof(sorgu), "DELETE FROM `meslekler` WHERE `mID` = '%d'", MeslekBilgi[meslekid][mID]);
		mysql_tquery(mysqlB, sorgu);

		if(IsValidDynamic3DTextLabel(MeslekBilgi[meslekid][mText])) DestroyDynamic3DTextLabel(MeslekBilgi[meslekid][mText]), MeslekBilgi[meslekid][mText] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicPickup(MeslekBilgi[meslekid][mPickup])) DestroyDynamicPickup(MeslekBilgi[meslekid][mPickup]), MeslekBilgi[meslekid][mPickup] = INVALID_PICKUP_ID;

		MeslekBilgi[meslekid][mKullanimda] = false;
	    MeslekBilgi[meslekid][mTur] = 0;
	    MeslekBilgi[meslekid][mID] = 0;
	}
	return 1;
}

stock Meslek_Kaydet(meslekid)
{
	new sorgu[512];
	format(sorgu, sizeof(sorgu), "UPDATE `meslekler` SET `meslekTur` = '%d', `mPosX` = '%.4f', `mPosY` = '%.4f', `mPosZ` = '%.4f', `mInterior` = '%d', `mWorld` = '%d' WHERE `mID` = '%d'",
	    MeslekBilgi[meslekid][mTur],
	    MeslekBilgi[meslekid][mPos][0],
	    MeslekBilgi[meslekid][mPos][1],
	    MeslekBilgi[meslekid][mPos][2],
	    MeslekBilgi[meslekid][mInterior],
	    MeslekBilgi[meslekid][mWorld],
	    MeslekBilgi[meslekid][mID]
	);
	return mysql_tquery(mysqlB, sorgu);
}

stock MeslekIsim(tur)
{
	new isim[24];
	switch(tur)
	{
	    case 1: isim = "Kamyon Þöförü";
	    case 2: isim = "Temizlik Þöförü";
	    case 3: isim = "Mekanik";
	    case 4: isim = "Hýrsýz";
	    case 5: isim = "Tamirci";
	    case 6: isim = "Avukat";
	    case 7: isim = "Ýnþaat Taþýmacýsý";
	    case 8: isim = "Balýkçý";
	    case 9: isim = "Madenci";
	    case 10: isim = "Bodyguard";
	    default: isim = "Yok";
	}
	return isim;
}

public KarakterKontrol(oyuncuid, isim[])
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	if(rows) return DialogGoster(oyuncuid, DIALOG_KARAKTER_YARAT, DIALOG_STYLE_INPUT, "vRP: Karaker Oluþturma", "{B70000}HATA: {FFFFFF}Bu karakter ismi kullanýmda.\n{FFFFFF}Yeni karakteriniz için isim girin;", "Tamam", "Ýptal");

	new sorgu[256 + MAX_PLAYER_NAME];
	format(sorgu, sizeof(sorgu),"INSERT INTO `oyuncular` (`isim`, `hesap`, `oSonGiris`, `yaratildi`) VALUES ('%s', '%d', '%s', '0')", SQL_ReturnEscaped(isim), OyuncuBilgi[oyuncuid][oHesap], Tarih());
	mysql_tquery(mysqlB, sorgu, "OyuncuYaratildi", "d", oyuncuid);
	format(OyuncuBilgi[oyuncuid][oIsim], MAX_PLAYER_NAME, "%s", isim);
	SetPlayerName(oyuncuid, OyuncuBilgi[oyuncuid][oIsim]);
	IsimLabelGuncelle(oyuncuid);
	OyuncuCinsiyetSec(oyuncuid);
	SunucuMesaji(oyuncuid, "Karakterinizi baþarýyla oluþturdunuz ve hesabýnýza tanýmladýnýz.");
	for(new i = 0; i != 20; i++) PlayerTextDrawHide(oyuncuid, OyuncuBilgi[oyuncuid][oGirisTextdraw][i]);
	return 1;
}

public OyuncuYaratildi(playerid)
{
	OyuncuBilgi[playerid][oID] = cache_insert_id();
	new vno = randomEx(10000000, 99999999), query[256];
	format(query, sizeof(query), "SELECT * FROM oyuncular WHERE VatandaslikNo = '%d'", vno);
	mysql_tquery(mysqlB, query, "Vatandaslik_Numarasi", "dd", playerid, vno);
	new hesapno = randomEx(100000, 999999);
	format(query, sizeof(query), "SELECT * FROM oyuncular WHERE HesapNumarasi = '%d'", hesapno);
	mysql_tquery(mysqlB, query, "Banka_Kontrol", "dd", playerid, hesapno);
	OyuncuBilgi[playerid][oGiris] = false;
	OyuncuKaydet(playerid);
	return 1;
}

public HesapYaratildi(playerid)
{
	OyuncuBilgi[playerid][oHesap] = cache_insert_id();
	new isim[MAX_PLAYER_NAME], query[256];
	GetPlayerName(playerid, isim, sizeof(isim));
	format(query, sizeof(query),"INSERT INTO `oyuncular` (`isim`, `hesap`) VALUES ('%s', '%d')", isim, OyuncuBilgi[playerid][oHesap]);
	mysql_tquery(mysqlB, query, "OyuncuYaratildi", "d", playerid);
	return 1;
}

public MeslekYaratildi(meslekid)
{
	if(meslekid == -1 || !MeslekBilgi[meslekid][mKullanimda]) return 0;

	MeslekBilgi[meslekid][mID] = cache_insert_id();
	Meslek_Kaydet(meslekid);
	return 1;
}

public isyeriisimarat(isyeriid)
{
	static rows, fields, isim[32];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows) {
		cache_get_value_name(0, "isim", isim);
		for(new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		format(IsyeriBilgi[isyeriid][isyeriSahipIsim], sizeof(isim), "%s", isim);
		Isyeri_Yenile(isyeriid);
	}
	return 1;
}

public evkiraciisimarat(evid)
{
	static rows, fields, isim[32];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows) {
		cache_get_value_name(0, "isim", isim);
		for(new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		format(EvBilgi[evid][evKiraciIsim], sizeof(isim), "%s", isim);
		Ev_Yenile(evid);
	}
	return 1;
}

public Garaj_SahipArat(id)
{
	new rows, fields, isim[32];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows) {
		cache_get_value_name(0, "isim", isim);
		for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
		format(GarajBilgi[id][garajSahipIsim], sizeof(isim), "%s", isim);
		Garaj_Yenile(id);
	}
	return 1;
}

public evisimarat(evid)
{
	new rows, fields, isim[32];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows) {
		cache_get_value_name(0, "isim", isim);
		for(new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		format(EvBilgi[evid][evSahipIsim], sizeof(isim), "%s", isim);
		Ev_Yenile(evid);
	}
	return 1;
}

public binasahiparat(binaid)
{
	new rows, fields, isim[32];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows) {
		cache_get_value_name(0, "isim", isim);
		for(new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		format(BinaBilgi[binaid][binaSahipIsim], sizeof(isim), "%s", isim);
		Bina_Yenile(binaid);
	}
	return 1;
}

public RadarYaratildi(radarid)
{
	if(radarid == -1 || !RadarBilgi[radarid][radarKullanimda])
	    return 0;

	RadarBilgi[radarid][radarID] = cache_insert_id();
	Radar_Kaydet(radarid);
	return 1;
}

public BoxGizle(playerid, PlayerText:boxid)
{
	if(!IsPlayerConnected(playerid)) return 0;

	PlayerTextDrawHide(playerid, boxid);
	PlayerTextDrawDestroy(playerid, boxid);
	return 1;
}

public EvYaratildi(evid)
{
	if(evid == -1 || !EvBilgi[evid][evKullanimda])
	    return 0;

	EvBilgi[evid][evID] = cache_insert_id();
	EvBilgi[evid][evVW] = EvBilgi[evid][evID];
	format(EvBilgi[evid][evAdres], 64, "%s %d", LokasyonBul(EvBilgi[evid][evPos][0], EvBilgi[evid][evPos][1], EvBilgi[evid][evPos][2]), EvBilgi[evid][evID]);
	Ev_Kaydet(evid);
	Ev_Yenile(evid);
	return 1;
}

public PointYaratildi(id)
{
	if(id == -1 || PointBilgi[id][pointKullanimda] == false) return 0;
	
	PointBilgi[id][pointID] = cache_insert_id();
	Point_Kaydet(id);
	Point_Yenile(id);
	return 1;
}

public GarajYaratildi(id)
{
	if(id == -1 || !GarajBilgi[id][garajKullanimda]) return 0;
	
	GarajBilgi[id][garajID] = cache_insert_id();
	Garaj_Kaydet(id);
	Garaj_Yenile(id);
	return 1;
}

public FabrikaYaratildi(fabrikaid)
{
	if(fabrikaid == -1 || !FabrikaBilgi[fabrikaid][fKullanimda])
	    return false;

	FabrikaBilgi[fabrikaid][fID] = cache_insert_id();
	Fabrika_Kaydet(fabrikaid);
	Fabrika_Yenile(fabrikaid);
	return true;
}

public SandikYaratildi(sid)
{
    if(sid == -1 || !SandikBilgi[sid][sKullanimda])
		return 0;

	SandikBilgi[sid][sID] = cache_insert_id();
 	Sandik_Kaydet(sid);
	return 1;
}

public ModifiyeNoktasiYaratildi(id)
{
	if(id == -1 || !ModifiyeNoktasi[id][modifiyeKullanimda]) return 0;

	ModifiyeNoktasi[id][modifiyeID] = cache_insert_id();
	ModifiyeNoktasi_Kaydet(id);
	return 1;
}

public GraffitiYaratildi(id)
{
	GraffitiBilgi[id][graffitiID] = cache_insert_id();
	Graffiti_Kaydet(id);
	return 1;
}

public TNoktasiYaratildi(tid)
{
	if(tid == -1 || !TutuklamaNoktasi[tid][tKullanimda])
		return 0;

	TutuklamaNoktasi[tid][tID] = cache_insert_id();
	TutuklamaNoktasi_Kaydet(tid);
	return 1;
}

public IsyeriYaratildi(isyeriid)
{
	if(isyeriid == -1 || !IsyeriBilgi[isyeriid][isyeriKullanimda])
	    return 0;

	IsyeriBilgi[isyeriid][isyeriID] = cache_insert_id();
	IsyeriBilgi[isyeriid][isyeriVW] = IsyeriBilgi[isyeriid][isyeriID] + 30000;
	Isyeri_Kaydet(isyeriid);
	Isyeri_Yenile(isyeriid);
	return 1;
}

public BenzinPompasiYaratildi(pompaid)
{
    BenzinPompasi[pompaid][pompaID] = cache_insert_id();
	Pompa_Kaydet(pompaid);
	Pompa_Yenile(pompaid);
	return 1;
}

public KasaYaratildi(kasaid)
{
	if(kasaid == -1 || KasaBilgi[kasaid][kasaKullanimda] == false) return 0;

    KasaBilgi[kasaid][kasaID] = cache_insert_id();
	Kasa_Kaydet(kasaid);
	Kasa_Yenile(kasaid);
	return 1;
}

public RafYaratildi(rafid)
{
	if(rafid == -1 || !RafBilgi[rafid][rafKullanimda]) return 0;

	RafBilgi[rafid][rafID] = cache_insert_id();
	Raf_Kaydet(rafid);
	return 1;
}

public BaslangicPosYaratildi(baslangicid)
{
	if(baslangicid == -1 || BaslangicPoslari[baslangicid][posKullanimda] == false) return 0;

    BaslangicPoslari[baslangicid][posID] = cache_insert_id();
	BaslangicPos_Kaydet(baslangicid);
	return 1;
}

public DekorYaratildi(dekorid)
{
	if(dekorid == -1 || DekorListesi[dekorid][dekorKullanimda] == false) return 0;

    DekorListesi[dekorid][dekorID] = cache_insert_id();
	Dekor_Kaydet(dekorid);
	return 1;
}

public CCTVYaratildi(cctvid)
{
	if(cctvid == -1 || CCTVVeri[cctvid][cctvKullanimda] == false) return 0;

    CCTVVeri[cctvid][cctvID] = cache_insert_id();
	CCTV_Kaydet(cctvid);
	return 1;
}

public SucListeEklendi(id)
{
	if(id == -1 || SucListesi[id][sKullanimda] == false) return 0;

	SucListesi[id][sucID] = cache_insert_id();
	SucListesi_Kaydet(id);
	return 1;
}

public HirsizListeEklendi(id)
{
	if(id == -1 || AracHirsiz[id][hKullanimda] == false) return 0;

    AracHirsiz[id][hirsizID] = cache_insert_id();
	Liste_Kaydet(id);
	return 1;
}

public KontraktEklendi(id)
{
	if(id == -1 || KontraktVeri[id][kontraktKullanimda] == false) return 0;

	KontraktVeri[id][kontraktID] = cache_insert_id();
	Kontrakt_Kaydet(id);
	return 1;
}

public RehberKisiYaratildi(playerid, id)
{
	if(id == -1 || RehberBilgi[playerid][id][rehberKullanimda] == false) return 0;

	RehberBilgi[playerid][id][rehberID] = cache_insert_id();
	Rehber_Kaydet(playerid, id);
	return 1;
}

public OyuncuKonumYaratildi(playerid, konumid)
{
	if(konumid == -1 || GPSOyuncu[playerid][konumid][gpsKullanimda] == false) return 0;

    GPSOyuncu[playerid][konumid][gpsID] = cache_insert_id();
	Oyuncu_Konum_Kaydet(playerid, konumid);
	return 1;
}

public AksesuarYaratildi(oyuncuid, slot)
{
	if(slot == -1 || AksesuarListesi[oyuncuid][slot][aksesuarModel] == 0) return 0;

	AksesuarListesi[oyuncuid][slot][aksesuarID] = cache_insert_id();
	Aksesuar_Kaydet(oyuncuid);
	return 1;
}

public KonumYaratildi(konumid)
{
	if(konumid == -1 || GPSVeri[konumid][gpsKullanimda] == false) return 0;

    GPSVeri[konumid][gpsID] = cache_insert_id();
	GPS_Kaydet(konumid);
	return 1;
}

public BinaYaratildi(binaid)
{
	if(binaid == -1 || !BinaBilgi[binaid][bKullanimda]) return 0;

	BinaBilgi[binaid][bID] = cache_insert_id();
	BinaBilgi[binaid][bVW] = BinaBilgi[binaid][bID] + 7000;
	Bina_Kaydet(binaid);
	return 1;
}

public ATMYaratildi(atmid)
{
    if(atmid == -1 || !ATMBilgi[atmid][atmKullanimda])
		return 0;

	ATMBilgi[atmid][atmID] = cache_insert_id();
 	ATM_Kaydet(atmid);
	return 1;
}

public UyusturucuYaratildi(uid)
{
	if(uid == -1 || !UyusturucuBilgi[uid][uKullanimda])
	    return 0;

	UyusturucuBilgi[uid][uID] = cache_insert_id();
	Uyusturucu_Yenile(uid);
	Uyusturucu_Kaydet(uid);
	return 1;
}

public SaticiYaratildi(id)
{
	if(id == -1 || !SaticiBilgi[id][sKullanimda])
		return 0;

	SaticiBilgi[id][sID] = cache_insert_id();
	Satici_Kaydet(id);
	Satici_Yenile(id);
	return 1;
}

public NPCYaratildi(id)
{
	if(id == -1 || !NPCBilgi[id][nKullanimda])
		return 0;

	NPCBilgi[id][nID] = cache_insert_id();
	NPC_Kaydet(id);
	NPC_Yenile(id);
	return 1;
}

public BirlikYaratildi(birlikid)
{
	if(birlikid == -1 || !BirlikBilgi[birlikid][birlikKullanimda])
	    return 0;

	BirlikBilgi[birlikid][birlikID] = cache_insert_id();
	foreach(new i : Player) if(OyuncuBilgi[i][oBirlikRutbe] == BirlikBilgi[birlikid][birlikMaksRutbe]) OyuncuBilgi[i][oBirlikSQLID] = BirlikBilgi[birlikid][birlikID], OyuncuKaydet(i);
	Birlik_Kaydet(birlikid);
	return 1;
}

public BirimYaratildi(id)
{
	if(id == -1 || !BirimBilgi[id][birimKullanimda])
	    return 0;

	BirimBilgi[id][birimID] = cache_insert_id();
	Birim_Kaydet(id);
	return 1;
}

stock PetleriYukle()
{
	mysql_query(mysqlB, "SELECT * FROM `petler`");
	new rows, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	if(!rows) return 1;
	for(new i; i<rows; i++)
	{
	    PetBilgi[i][petID] = vericek_int(i, "petid");
	    format(PetBilgi[i][petAdi], 24, "%s", vericek_varchar(i, "petadi"));
	    PetBilgi[i][petSahip] = vericek_int(i, "petsahip");
	    PetBilgi[i][petTuru] = vericek_int(i, "petturu");
	    PetBilgi[i][petCinsiyet] = vericek_int(i, "petcinsiyet");
	    PetBilgi[i][petRenk] = vericek_int(i, "petrenk");
	    PetBilgi[i][petAclik] = vericek_int(i, "petaclik");
	    PetBilgi[i][petSaglik] = vericek_float(i, "petsaglik");
	    PetBilgi[i][petYarali] = vericek_int(i, "petyarali");
	    PetBilgi[i][petTakip] = -1;
	    PetBilgi[i][petDurum] = false;
	    Iter_Add(Petler, i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek pet bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet pet yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Garajlari_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_GARAJ)
	{
	    GarajBilgi[i][garajKullanimda] = true;
	    GarajBilgi[i][garajID] = vericek_int(i, "ID");
	    GarajBilgi[i][garajSahip] = vericek_int(i, "Sahip");
	    GarajBilgi[i][garajDurum] = vericek_int(i, "Durum");
	    GarajBilgi[i][garajLimit] = vericek_int(i, "AracLimit");
	    GarajBilgi[i][garajDunya] = vericek_int(i, "Dunya");
	    GarajBilgi[i][garajInt] = vericek_int(i, "Interior");
	    GarajBilgi[i][garajPos][0] = vericek_float(i, "PosX");
	    GarajBilgi[i][garajPos][1] = vericek_float(i, "PosY");
	    GarajBilgi[i][garajPos][2] = vericek_float(i, "PosZ");
	    GarajBilgi[i][garajPos][3] = vericek_float(i, "CikisPosX");
	    GarajBilgi[i][garajPos][4] = vericek_float(i, "CikisPosY");
	    GarajBilgi[i][garajPos][5] = vericek_float(i, "CikisPosZ");
	    GarajBilgi[i][garajUcret] = vericek_int(i, "Ucret");
	    Garaj_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek garaj bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet garaj yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Pointleri_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_POINT)
	{
	    PointBilgi[i][pointKullanimda] = true;
	    PointBilgi[i][pointID] = vericek_int(i, "pointID");
	    PointBilgi[i][pointBirlik] = vericek_int(i, "pointBirlik");
	    PointBilgi[i][pointPos][0] = vericek_float(i, "pointPosX");
	    PointBilgi[i][pointPos][1] = vericek_float(i, "pointPosY");
	    PointBilgi[i][pointPos][2] = vericek_float(i, "pointPosZ");
	    PointBilgi[i][pointSavas] = false;
	    format(PointBilgi[i][pointBolge], 64, "%s", vericek_varchar(i, "pointBolge"));
	    Point_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek point bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet point yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Dolaplari_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0, kiyafetler[256];
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_DOLAP)
	{
	    DolapBilgi[i][dolapKullanimda] = true;
    	DolapBilgi[i][dolapID] = vericek_int(i, "dolapID");
    	DolapBilgi[i][dolapEv] = vericek_int(i, "dolapEv");
    	DolapBilgi[i][dolapModel] = vericek_int(i, "dolapModel");
    	DolapBilgi[i][dolapInt] = vericek_int(i, "dolapInt");
    	DolapBilgi[i][dolapVW] = vericek_int(i, "dolapWorld");
    	DolapBilgi[i][dolapPos][0] = vericek_float(i, "dolapX");
    	DolapBilgi[i][dolapPos][1] = vericek_float(i, "dolapY");
    	DolapBilgi[i][dolapPos][2] = vericek_float(i, "dolapZ");
    	DolapBilgi[i][dolapPos][3] = vericek_float(i, "dolapRX");
    	DolapBilgi[i][dolapPos][4] = vericek_float(i, "dolapRY");
    	DolapBilgi[i][dolapPos][5] = vericek_float(i, "dolapRZ");
    	format(kiyafetler, sizeof(kiyafetler), "%s", vericek_varchar(i, "dolapKiyafetler"));
		sscanf(kiyafetler, "p<|>ddddddddddddd", DolapBilgi[i][dolapKiyafet][0], DolapBilgi[i][dolapKiyafet][1], DolapBilgi[i][dolapKiyafet][2], DolapBilgi[i][dolapKiyafet][3], DolapBilgi[i][dolapKiyafet][4], DolapBilgi[i][dolapKiyafet][5], DolapBilgi[i][dolapKiyafet][6], DolapBilgi[i][dolapKiyafet][7], DolapBilgi[i][dolapKiyafet][8], DolapBilgi[i][dolapKiyafet][9], DolapBilgi[i][dolapKiyafet][10], DolapBilgi[i][dolapKiyafet][11], DolapBilgi[i][dolapKiyafet][12]);
	    Dolap_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek kýyafet dolabý bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet kýyafet dolabý yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Evleri_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_EV)
	{
	    EvBilgi[i][evKullanimda] = true;
    	EvBilgi[i][evID] = vericek_int(i, "evID");
		format(EvBilgi[i][evAdres], 64, "%s", vericek_varchar(i, "Adres"));
	    EvBilgi[i][evDurum] = vericek_int(i, "Durum");
	    EvBilgi[i][evPos][0] = vericek_float(i, "evPosX");
	    EvBilgi[i][evPos][1] = vericek_float(i, "evPosY");
	    EvBilgi[i][evPos][2] = vericek_float(i, "evPosZ");
	    EvBilgi[i][evPos][3] = vericek_float(i, "evPosA");
	    EvBilgi[i][evIcPos][0] = vericek_float(i, "evIcPosX");
	    EvBilgi[i][evIcPos][1] = vericek_float(i, "evIcPosY");
	    EvBilgi[i][evIcPos][2] = vericek_float(i, "evIcPosZ");
	    EvBilgi[i][evIcPos][3] = vericek_float(i, "evIcPosA");
	    EvBilgi[i][evInterior] = vericek_int(i, "evInt");
	    EvBilgi[i][evVW] = vericek_int(i, "evVW");
	    EvBilgi[i][evDisVW] = vericek_int(i, "evDisVW");
	    EvBilgi[i][evDisInt] = vericek_int(i, "evDisInt");
	    EvBilgi[i][evSahip] = vericek_int(i, "evSahip");
	    EvBilgi[i][evFiyat] = vericek_int(i, "evFiyat");
	    EvBilgi[i][evBakimSure] = vericek_int(i, "bSure");
	    EvBilgi[i][evKiralik] = vericek_int(i, "Kiralik");
	    EvBilgi[i][evKiraci] = vericek_int(i, "Kiraci");
	    EvBilgi[i][evKiraUcret] = vericek_int(i, "KiraUcret");
	    EvBilgi[i][evKasa] = vericek_int(i, "Kasa");
	    EvBilgi[i][evLevel] = vericek_int(i, "Level");
	    EvBilgi[i][evAnahtar][0] = vericek_int(i, "EvAnahtar");
	    EvBilgi[i][evAnahtar][1] = vericek_int(i, "EvAnahtar1");
	    EvBilgi[i][evAnahtar][2] = vericek_int(i, "EvAnahtar2");
	    EvBilgi[i][evAnahtar][3] = vericek_int(i, "EvAnahtar3");
	    EvBilgi[i][evAnahtar][4] = vericek_int(i, "EvAnahtar4");
	    EvBilgi[i][evVergi] = vericek_int(i, "Vergi");
	    EvBilgi[i][evSatilik] = vericek_int(i, "Satilik");
		EvBilgi[i][evMuafiyet] = vericek_int(i, "VergiMuafiyet");
	    EvBilgi[i][evLamba] = true;
	    Ev_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek ev bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet ev yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Fabrikalari_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_FABRIKA)
	{
	    FabrikaBilgi[i][fKullanimda] = true;
    	FabrikaBilgi[i][fID] = vericek_int(i, "fID");
		format(FabrikaBilgi[i][fUrun], 64, "%s", vericek_varchar(i, "Urun"));
		format(FabrikaBilgi[i][fSahip], 32, "%s", vericek_varchar(i, "Sahip"));
		format(FabrikaBilgi[i][fabrikaAd], 48, "%s", vericek_varchar(i, "FabrikaAd"));
	    FabrikaBilgi[i][fPos][0] = vericek_float(i, "PosX");
	    FabrikaBilgi[i][fPos][1] = vericek_float(i, "PosY");
	    FabrikaBilgi[i][fPos][2] = vericek_float(i, "PosZ");
	    FabrikaBilgi[i][fPos][3] = vericek_float(i, "PosA");
	    FabrikaBilgi[i][fUcret] = vericek_int(i, "Ucret");
	    FabrikaBilgi[i][fKapasite] = vericek_int(i, "Kapasite");
	    Fabrika_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek fabrika bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet fabrika yüklendi.", sayi, rows, sayi);
	return printf(mesaj);
}

public Isyerlerini_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_ISYERI)
	{
	    IsyeriBilgi[i][isyeriKullanimda] = true;
    	IsyeriBilgi[i][isyeriID] = vericek_int(i, "isyeriID");

		format(IsyeriBilgi[i][isyeriAd], 128, "%s", vericek_varchar(i, "Ad"));
	    IsyeriBilgi[i][isyeriDurum] = vericek_int(i, "Durum");
	    IsyeriBilgi[i][isyeriPos][0] = vericek_float(i, "isyeriPosX");
	    IsyeriBilgi[i][isyeriPos][1] = vericek_float(i, "isyeriPosY");
	    IsyeriBilgi[i][isyeriPos][2] = vericek_float(i, "isyeriPosZ");
	    IsyeriBilgi[i][isyeriPos][3] = vericek_float(i, "isyeriPosA");
	    IsyeriBilgi[i][isyeriIcPos][0] = vericek_float(i, "isyeriIcPosX");
	    IsyeriBilgi[i][isyeriIcPos][1] = vericek_float(i, "isyeriIcPosY");
	    IsyeriBilgi[i][isyeriIcPos][2] = vericek_float(i, "isyeriIcPosZ");
	    IsyeriBilgi[i][isyeriIcPos][3] = vericek_float(i, "isyeriIcPosA");
	    IsyeriBilgi[i][isyeriInterior] = vericek_int(i, "isyeriInt");
	    IsyeriBilgi[i][isyeriVW] = vericek_int(i, "isyeriVW");
	    IsyeriBilgi[i][isyeriDisVW] = vericek_int(i, "isyeriDisVW");
	    IsyeriBilgi[i][isyeriDisInt] = vericek_int(i, "isyeriDisInt");
	    IsyeriBilgi[i][isyeriSahip] = vericek_int(i, "isyeriSahip");
	    IsyeriBilgi[i][isyeriOrtak] = vericek_int(i, "isyeriOrtak");
	    IsyeriBilgi[i][isyeriFiyat] = vericek_int(i, "isyeriFiyat");
	    IsyeriBilgi[i][isyeriTur] = vericek_int(i, "isyeriTur");
	    IsyeriBilgi[i][isyeriKasa] = vericek_int(i, "isyeriKasa");
	    IsyeriBilgi[i][iGirisUcret] = vericek_int(i, "GirisUcreti");
		IsyeriBilgi[i][isyeriUrun] = vericek_int(i, "isyeriUrun");
		Isyeri_Yenile(i);
		sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek iþyeri bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet iþyeri yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Pompalari_Yukle(isyeriid)
{
	new rows, fields, id = -1, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if((id = Pompa_GetFreeID()) != -1)
	{
	    BenzinPompasi[id][pompaKullanimda] = true;
	    BenzinPompasi[id][pompaIsyeri] = vericek_int(i, "pompaIsyeri");
	    BenzinPompasi[id][pompaID] = vericek_int(i, "pompaID");
	    BenzinPompasi[id][pompaPos][0] = vericek_float(i, "pompaPosX");
	    BenzinPompasi[id][pompaPos][1] = vericek_float(i, "pompaPosY");
	    BenzinPompasi[id][pompaPos][2] = vericek_float(i, "pompaPosZ");
	    BenzinPompasi[id][pompaPos][3] = vericek_float(i, "pompaPosA");
	    BenzinPompasi[id][pompaBenzin] = vericek_int(i, "pompaBenzin");
		BenzinPompasi[id][pompaUcret] = vericek_int(i, "pompaUcret");

	    BenzinPompasi[id][pompaObje] = CreateDynamicObject(3465, BenzinPompasi[id][pompaPos][0], BenzinPompasi[id][pompaPos][1], BenzinPompasi[id][pompaPos][2], 0.0, 0.0, BenzinPompasi[id][pompaPos][3]);
	    Pompa_Yenile(id);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek benzin pompasý bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet benzin pompasý yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public SucListesi_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_SUC)
	{
	    SucListesi[i][sKullanimda] = true;
    	SucListesi[i][sucID] = vericek_int(i, "ID");
	    format(SucListesi[i][sIsim], 144, "%s", vericek_varchar(i, "Suc"));
	    SucListesi[i][sDakika] = vericek_int(i, "Dakika");
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek suç bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet suç yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public InsaatAyar_Yukle()
{
    new rows, fields, mesaj[128];
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	insaat_Pos[0] = vericek_float(0, "PosX");
	insaat_Pos[1] = vericek_float(0, "PosY");
	insaat_Pos[2] = vericek_float(0, "PosZ");
	insaat_Ucret = vericek_int(0, "Ucret");
	insaat_Kota = vericek_int(0, "Kota");
	
	if(rows) format(mesaj, sizeof(mesaj), "=> Ýnþaat mesleði ayarlarý yüklendi.");
	else if(!rows) format(mesaj, sizeof(mesaj), "=> Ýnþaat mesleði ayarlarý yüklenemedi, veritabanýný kontrol edin.");
	printf(mesaj);
	return 1;
}

public Kontraktlari_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_KONTRAKT)
	{
	    KontraktVeri[i][kontraktKullanimda] = true;
    	KontraktVeri[i][kontraktID] = vericek_int(i, "ID");
	    KontraktVeri[i][kontraktUcret] = vericek_int(i, "Ucret");
	    format(KontraktVeri[i][kontraktIsim], 32, "%s", vericek_varchar(i, "Hedef"));
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek kontrakt bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet kontrakt yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Liste_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_ARACLISTE)
	{
	    AracHirsiz[i][hKullanimda] = true;
    	AracHirsiz[i][hirsizID] = vericek_int(i, "ID");
	    AracHirsiz[i][hModel] = vericek_int(i, "Model");
	    AracHirsiz[i][hTeslim] = vericek_int(i, "Teslim");
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek Hýrsýz Aracý bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet Hýrsýz Aracý yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public BaslangicPos_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_BASLANGICPOS)
	{
	    BaslangicPoslari[i][posKullanimda] = true;
    	BaslangicPoslari[i][posID] = vericek_int(i, "ID");
		format(BaslangicPoslari[i][pos_adi], 64, "%s", vericek_varchar(i, "PosAdi"));
	    BaslangicPoslari[i][baslangic_pos][0] = vericek_float(i, "Pos_X");
	    BaslangicPoslari[i][baslangic_pos][1] = vericek_float(i, "Pos_Y");
	    BaslangicPoslari[i][baslangic_pos][2] = vericek_float(i, "Pos_Z");
	    BaslangicPoslari[i][baslangic_pos][3] = vericek_float(i, "Pos_A");
	    BaslangicPoslari[i][baslangic_vw] = vericek_int(i, "VirtualWorld");
	    BaslangicPoslari[i][baslangic_int] = vericek_int(i, "Interior");
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek baþlangýç pozisyonu bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet baþlangýç pozisyonu yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Graffiti_Yukle()
{
	new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAKSIMUM_GRAFFITI)
	{
	    format(GraffitiBilgi[i][graffitiYazi], 64, "%s", vericek_varchar(i, "graffitiYazi"));

    	GraffitiBilgi[i][graffitiKullanimda] = true;
	    GraffitiBilgi[i][graffitiID] = vericek_int(i, "graffitiID");
	    GraffitiBilgi[i][graffitiPos][0] = vericek_float(i, "graffitiX");
	    GraffitiBilgi[i][graffitiPos][1] = vericek_float(i, "graffitiY");
	    GraffitiBilgi[i][graffitiPos][2] = vericek_float(i, "graffitiZ");
	    GraffitiBilgi[i][graffitiPos][3] = vericek_float(i, "graffitiAngle");
	    GraffitiBilgi[i][graffitiRenk] = vericek_int(i, "graffitiRenk");

		Graffiti_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek graffiti bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet graffiti yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Radarlari_Yukle()
{
	new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAKSIMUM_HIZRADARI)
	{
	    RadarBilgi[i][radarKullanimda] = true;
	    RadarBilgi[i][radarID] = vericek_int(i, "radarID");
	    RadarBilgi[i][radarMenzil] = vericek_float(i, "radarMenzil");
	    RadarBilgi[i][radarLimit] = vericek_float(i, "radarLimit");
	    RadarBilgi[i][radarPos][0] = vericek_float(i, "radarX");
	    RadarBilgi[i][radarPos][1] = vericek_float(i, "radarY");
	    RadarBilgi[i][radarPos][2] = vericek_float(i, "radarZ");
	    RadarBilgi[i][radarPos][3] = vericek_float(i, "radarAngle");
	    Radar_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek hýz radarý bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet hýz radarý yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Dekorlari_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_DEKOR)
	{
	    DekorListesi[i][dekorKullanimda] = true;
    	DekorListesi[i][dekorID] = vericek_int(i, "ID");
		format(DekorListesi[i][dekorIsim], 64, "%s", vericek_varchar(i, "Isim"));
	    DekorListesi[i][dekorPos][0] = vericek_float(i, "posX");
	    DekorListesi[i][dekorPos][1] = vericek_float(i, "posY");
	    DekorListesi[i][dekorPos][2] = vericek_float(i, "posZ");
	    DekorListesi[i][dekorPos][3] = vericek_float(i, "posA");
	    DekorListesi[i][dekorUcret] = vericek_int(i, "Ucret");
	    DekorListesi[i][dekorTur] = vericek_int(i, "Tur");
	    DekorListesi[i][dekorInterior] = vericek_int(i, "Interior");
	    DekorListesi[i][dekorOOC] = vericek_int(i, "OOCSatis");
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek dekor bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet dekor yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public CCTV_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_CCTV)
	{
	    CCTVVeri[i][cctvKullanimda] = true;
    	CCTVVeri[i][cctvID] = vericek_int(i, "ID");
		format(CCTVVeri[i][cctvIsim], 64, "%s", vericek_varchar(i, "Bolge"));
	    CCTVVeri[i][cctvPos][0] = vericek_float(i, "posX");
	    CCTVVeri[i][cctvPos][1] = vericek_float(i, "posY");
	    CCTVVeri[i][cctvPos][2] = vericek_float(i, "posZ");
	    CCTVVeri[i][cctvMenzil] = vericek_float(i, "Menzil");
	    CCTVVeri[i][cctvDelay] = 0;
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek CCTV bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet CCTV yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public AksesuarYukle(playerid)
{
    new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAX_PLAYER_ATTACHED_OBJECTS - 3)
	{
		AksesuarListesi[playerid][i][aksesuarID] = vericek_int(i, "ID");
		AksesuarListesi[playerid][i][aksesuarModel] = vericek_int(i, "Model");
		AksesuarListesi[playerid][i][aksesuarKullanimda] = vericek_int(i, "Takili");
		AksesuarListesi[playerid][i][aksesuarKemik] = vericek_int(i, "Kemik");
		AksesuarListesi[playerid][i][aksesuarPos][0] = vericek_float(i, "Pos1");
		AksesuarListesi[playerid][i][aksesuarPos][1] = vericek_float(i, "Pos2");
		AksesuarListesi[playerid][i][aksesuarPos][2] = vericek_float(i, "Pos3");
		AksesuarListesi[playerid][i][aksesuarPos][3] = vericek_float(i, "Pos4");
		AksesuarListesi[playerid][i][aksesuarPos][4] = vericek_float(i, "Pos5");
		AksesuarListesi[playerid][i][aksesuarPos][5] = vericek_float(i, "Pos6");
		AksesuarListesi[playerid][i][aksesuarPos][6] = vericek_float(i, "Pos7");
		AksesuarListesi[playerid][i][aksesuarPos][7] = vericek_float(i, "Pos8");
		AksesuarListesi[playerid][i][aksesuarPos][8] = vericek_float(i, "Pos9");
	}
	return 1;
}

public RehberYukle(oyuncuid)
{
    new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_REHBER_SAYI)
	{
	    RehberBilgi[oyuncuid][i][rehberKullanimda] = true;
    	RehberBilgi[oyuncuid][i][rehberID] = vericek_int(i, "ID");
		format(RehberBilgi[oyuncuid][i][rehberIsim], 64, "%s", vericek_varchar(i, "Isim"));
	    RehberBilgi[oyuncuid][i][rehberNumara] = vericek_int(i, "Numara");
	}
	return 1;
}

public GPSYukle(oyuncuid)
{
    new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_OYUNCU_GPS)
	{
	    GPSOyuncu[oyuncuid][i][gpsKullanimda] = true;
    	GPSOyuncu[oyuncuid][i][gpsID] = vericek_int(i, "gpsID");
		format(GPSOyuncu[oyuncuid][i][gpsIsim], 64, "%s", vericek_varchar(i, "gpsIsim"));
	    GPSOyuncu[oyuncuid][i][gpsPos][0] = vericek_float(i, "gpsX");
	    GPSOyuncu[oyuncuid][i][gpsPos][1] = vericek_float(i, "gpsY");
	    GPSOyuncu[oyuncuid][i][gpsPos][2] = vericek_float(i, "gpsZ");
	}
	return 1;
}

public Konumlari_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_GPS)
	{
	    GPSVeri[i][gpsKullanimda] = true;
    	GPSVeri[i][gpsID] = vericek_int(i, "gpsID");
		format(GPSVeri[i][gpsIsim], 64, "%s", vericek_varchar(i, "gpsIsim"));
	    GPSVeri[i][gpsPos][0] = vericek_float(i, "gpsX");
	    GPSVeri[i][gpsPos][1] = vericek_float(i, "gpsY");
	    GPSVeri[i][gpsPos][2] = vericek_float(i, "gpsZ");
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek GPS Konumu bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet GPS Konumu yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Kasalari_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_BIRLIK)
	{
	    KasaBilgi[i][kasaKullanimda] = true;
    	KasaBilgi[i][kasaID] = vericek_int(i, "kasaID");
	    KasaBilgi[i][kasaPara] = vericek_int(i, "kasaPara");
	    KasaBilgi[i][kasaBirlik] = vericek_int(i, "kasaBirlik");
	    KasaBilgi[i][kasaPos][0] = vericek_float(i, "kasaX");
	    KasaBilgi[i][kasaPos][1] = vericek_float(i, "kasaY");
	    KasaBilgi[i][kasaPos][2] = vericek_float(i, "kasaZ");
	    KasaBilgi[i][kasaPos][3] = vericek_float(i, "kasaAngle");
	    KasaBilgi[i][kasaVW] = vericek_int(i, "kasaVW");
	    KasaBilgi[i][kasaInt] = vericek_int(i, "kasaInt");
	    Kasa_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek birlik kasasý bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet birlik kasasý yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Raflari_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0, str[32];
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_RAF)
	{
	    RafBilgi[i][rafKullanimda] = true;
	    RafBilgi[i][rafID] = vericek_int(i, "ID");
	    RafBilgi[i][rafEv] = vericek_int(i, "rafEv");
	    RafBilgi[i][rafBina] = vericek_int(i, "rafBina");
     	RafBilgi[i][rafPos][0] = vericek_float(i, "rafX");
        RafBilgi[i][rafPos][1] = vericek_float(i, "rafY");
        RafBilgi[i][rafPos][2] = vericek_float(i, "rafZ");
        RafBilgi[i][rafPos][3] = vericek_float(i, "rafA");
        RafBilgi[i][rafInt] = vericek_int(i, "rafInt");
		RafBilgi[i][rafVW] = vericek_int(i, "rafVW");

		for(new j = 0; j < 4; j ++) {
		    format(str, 24, "Silah%d", j + 1);
		    RafBilgi[i][rafSilahlar][j] = vericek_int(i, str);

            format(str, 24, "Mermi%d", j + 1);
		    RafBilgi[i][rafMermiler][j] = vericek_int(i, str);
		}
		Raf_Yenile(i);
		sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek raf bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet raf yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Binalari_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_BINA)
	{
	    BinaBilgi[i][bKullanimda] = true;
    	BinaBilgi[i][bID] = vericek_int(i, "bID");

		format(BinaBilgi[i][bIsim], 32, "%s", vericek_varchar(i, "binaAdi"));
	    BinaBilgi[i][bModel] = vericek_int(i, "binaModel");
	    BinaBilgi[i][bPos][0] = vericek_float(i, "bPosX");
	    BinaBilgi[i][bPos][1] = vericek_float(i, "bPosY");
	    BinaBilgi[i][bPos][2] = vericek_float(i, "bPosZ");
	    BinaBilgi[i][bPos][3] = vericek_float(i, "bPosA");
	    BinaBilgi[i][bIPos][0] = vericek_float(i, "bIPosX");
	    BinaBilgi[i][bIPos][1] = vericek_float(i, "bIPosY");
	    BinaBilgi[i][bIPos][2] = vericek_float(i, "bIPosZ");
	    BinaBilgi[i][bIPos][3] = vericek_float(i, "bIPosA");
	    BinaBilgi[i][bInterior] = vericek_int(i, "bInterior");
	    BinaBilgi[i][bVW] = vericek_int(i, "bVW");
	    BinaBilgi[i][bDisVW] = vericek_int(i, "bDisVW");
	    BinaBilgi[i][bDisInt] = vericek_int(i, "bDisInt");
	    BinaBilgi[i][binaDurum] = vericek_int(i, "binaDurum");
		BinaBilgi[i][binaTur] = vericek_int(i, "binaTur");
		BinaBilgi[i][binaSahip] = vericek_int(i, "Sahip");
		BinaBilgi[i][binaLevel] = vericek_int(i, "Level");
		BinaBilgi[i][binaBakimSure] = vericek_int(i, "BakimSure");
	    BinaBilgi[i][binaAnahtar][0] = vericek_int(i, "BinaAnahtar");
	    BinaBilgi[i][binaAnahtar][1] = vericek_int(i, "BinaAnahtar1");
	    BinaBilgi[i][binaAnahtar][2] = vericek_int(i, "BinaAnahtar2");
	    BinaBilgi[i][binaAnahtar][3] = vericek_int(i, "BinaAnahtar3");
	    BinaBilgi[i][binaAnahtar][4] = vericek_int(i, "BinaAnahtar4");
	    Bina_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek bina bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet bina yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Atmleri_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_ATM)
	{
	    ATMBilgi[i][atmKullanimda] = true;
    	ATMBilgi[i][atmID] = vericek_int(i, "atmID");

	    ATMBilgi[i][atmPos][0] = vericek_float(i, "atmX");
	    ATMBilgi[i][atmPos][1] = vericek_float(i, "atmY");
	    ATMBilgi[i][atmPos][2] = vericek_float(i, "atmZ");
	    ATMBilgi[i][atmPos][3] = vericek_float(i, "atmA");
	    ATMBilgi[i][atmInterior] = vericek_int(i, "atmInterior");
	    ATMBilgi[i][atmWorld] = vericek_int(i, "atmWorld");
	    //ATMBilgi[i][atmPara] = vericek_int(i, "atmPara");
	    ATM_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek atm bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet atm yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Meslekleri_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_MESLEK)
	{
	    MeslekBilgi[i][mKullanimda] = true;
    	MeslekBilgi[i][mID] = vericek_int(i, "mID");

	    MeslekBilgi[i][mPos][0] = vericek_float(i, "mPosX");
	    MeslekBilgi[i][mPos][1] = vericek_float(i, "mPosY");
	    MeslekBilgi[i][mPos][2] = vericek_float(i, "mPosZ");
	    MeslekBilgi[i][mInterior] = vericek_int(i, "mInterior");
	    MeslekBilgi[i][mWorld] = vericek_int(i, "mWorld");
	    MeslekBilgi[i][mTur] = vericek_int(i, "meslekTur");
	    Meslek_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek meslek bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet meslek yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Sandiklari_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_SANDIK)
	{
	    SandikBilgi[i][sKullanimda] = true;
	    SandikBilgi[i][sID] = vericek_int(i, "sandikID");
	    SandikBilgi[i][sPos][0] = vericek_int(i, "sandikX");
        SandikBilgi[i][sPos][1] = vericek_int(i, "sandikY");
        SandikBilgi[i][sPos][2] = vericek_int(i, "sandikZ");
        SandikBilgi[i][sPos][3] = vericek_int(i, "sandikA");
        SandikBilgi[i][sInterior] = vericek_int(i, "sandikInterior");
		SandikBilgi[i][sWorld] = vericek_int(i, "sandikWorld");
        SandikBilgi[i][sOy] = vericek_int(i, "sandikOy");
        format(SandikBilgi[i][sandikSahip], 32, "%s", vericek_varchar(i, "Sahip"));
  		Sandik_Yenile(i);
  		sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek oy sandýðý bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet oy sandýðý yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Uyusturuculari_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_UYUSTURUCU)
	{
	    UyusturucuBilgi[i][uKullanimda] = true;
    	UyusturucuBilgi[i][uID] = vericek_int(i, "uID");

	    UyusturucuBilgi[i][uPos][0] = vericek_float(i, "posX");
	    UyusturucuBilgi[i][uPos][1] = vericek_float(i, "posY");
	    UyusturucuBilgi[i][uPos][2] = vericek_float(i, "posZ");
	    UyusturucuBilgi[i][uPos][3] = vericek_float(i, "posA");
	    UyusturucuBilgi[i][uInterior] = vericek_int(i, "uInterior");
	    UyusturucuBilgi[i][uWorld] = vericek_int(i, "uWorld");
		UyusturucuBilgi[i][uDurum] = vericek_int(i, "Durum");
		UyusturucuBilgi[i][uDakika] = vericek_int(i, "Dakika");
		UyusturucuBilgi[i][uGenelDakika] = vericek_int(i, "GenelDakika");
		UyusturucuBilgi[i][uEv] = vericek_int(i, "Ev");
		UyusturucuBilgi[i][uBina] = vericek_int(i, "Bina");
		UyusturucuBilgi[i][uSahip] = vericek_int(i, "Sahip");
		UyusturucuBilgi[i][uTur] = vericek_int(i, "Tur");
	    Uyusturucu_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek uyuþturucu saksýsý bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet uyuþturucu saksýsý yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public ModifiyeNoktasi_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_MODIFIYENOKTASI)
	{
	    ModifiyeNoktasi[i][modifiyeKullanimda] = true;
    	ModifiyeNoktasi[i][modifiyeID] = vericek_int(i, "ID");

	    ModifiyeNoktasi[i][modifiyePos][0] = vericek_float(i, "X");
	    ModifiyeNoktasi[i][modifiyePos][1] = vericek_float(i, "Y");
	    ModifiyeNoktasi[i][modifiyePos][2] = vericek_float(i, "Z");
	    ModifiyeNoktasi[i][modifiyeInt] = vericek_int(i, "Interior");
	    ModifiyeNoktasi[i][modifiyeDunya] = vericek_int(i, "Dunya");
	    ModifiyeNoktasi[i][modifiyeUcret] = vericek_int(i, "Ucret");
	    ModifiyeNoktasi[i][modifiyeBirlik] = vericek_int(i, "Birlik");
	    ModifiyeNoktasi[i][modifiyeKullanan] = INVALID_PLAYER_ID;
	    ModifiyeNoktasi_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek modifiye noktasý bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet modifiye noktasý yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public TutuklamaNoktasi_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_TUTUKLAMANOKTASI)
	{
	    TutuklamaNoktasi[i][tKullanimda] = true;
    	TutuklamaNoktasi[i][tID] = vericek_int(i, "tID");

	    TutuklamaNoktasi[i][tPos][0] = vericek_float(i, "x");
	    TutuklamaNoktasi[i][tPos][1] = vericek_float(i, "y");
	    TutuklamaNoktasi[i][tPos][2] = vericek_float(i, "z");
	    TutuklamaNoktasi[i][tPos][3] = vericek_float(i, "a");
	    TutuklamaNoktasi[i][tInterior] = vericek_int(i, "tInterior");
	    TutuklamaNoktasi[i][tWorld] = vericek_int(i, "tWorld");

	    TutuklamaNoktasi[i][hPos][0] = vericek_float(i, "hx");
	    TutuklamaNoktasi[i][hPos][1] = vericek_float(i, "hy");
	    TutuklamaNoktasi[i][hPos][2] = vericek_float(i, "hz");
	    TutuklamaNoktasi[i][hPos][3] = vericek_float(i, "ha");
	    TutuklamaNoktasi[i][hInterior] = vericek_int(i, "hInterior");
	    TutuklamaNoktasi[i][hWorld] = vericek_int(i, "hWorld");
	    TutuklamaNoktasi_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek tutuklama noktasý bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet tutuklama noktasý yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}


public Saticilari_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_SATICI)
	{
	    SaticiBilgi[i][sKullanimda] = true;
    	SaticiBilgi[i][sID] = vericek_int(i, "sID");

	    SaticiBilgi[i][sPos][0] = vericek_float(i, "X");
	    SaticiBilgi[i][sPos][1] = vericek_float(i, "Y");
	    SaticiBilgi[i][sPos][2] = vericek_float(i, "Z");
	    SaticiBilgi[i][sPos][3] = vericek_float(i, "A");
	    SaticiBilgi[i][sInterior] = vericek_int(i, "sInterior");
	    SaticiBilgi[i][sWorld] = vericek_int(i, "sWorld");
		SaticiBilgi[i][sAdet] = vericek_int(i, "Adet");
		SaticiBilgi[i][sFiyat] = vericek_int(i, "Fiyat");
		SaticiBilgi[i][sKiyafet] = vericek_int(i, "Kiyafet");
		SaticiBilgi[i][sTur] = vericek_int(i, "Tur");
	    Satici_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek satýcý bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet satýcý yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Ankesorlu_Telefonlari_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_ANKESORLU_TELEFON)
	{
	    ATelBilgi[i][aTelKullanimda] = true;
    	ATelBilgi[i][aTelID] = vericek_int(i, "atelID");

	    ATelBilgi[i][aTelPos][0] = vericek_float(i, "atelX");
	    ATelBilgi[i][aTelPos][1] = vericek_float(i, "atelY");
	    ATelBilgi[i][aTelPos][2] = vericek_float(i, "atelZ");
	    ATelBilgi[i][aTelPos][3] = vericek_float(i, "atelA");
	    ATelBilgi[i][aTelInterior] = vericek_int(i, "atelInterior");
	    ATelBilgi[i][aTelWorld] = vericek_int(i, "atelWorld");
		ATelBilgi[i][aTelKullaniliyor] = false;
	    Ankesorlu_Telefon_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek ankesörlü telefon bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet ankesörlü telefon yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Npcleri_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0, isim[32];

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_NPC)
	{
	    NPCBilgi[i][nKullanimda] = true;
    	NPCBilgi[i][nID] = vericek_int(i, "nID");
        format(isim, sizeof(isim), "%s", vericek_varchar(0, "Ad"));
	    NPCBilgi[i][nPos][0] = vericek_float(i, "X");
	    NPCBilgi[i][nPos][1] = vericek_float(i, "Y");
	    NPCBilgi[i][nPos][2] = vericek_float(i, "Z");
	    NPCBilgi[i][nPos][3] = vericek_float(i, "A");
	    NPCBilgi[i][nInterior] = vericek_int(i, "nInterior");
	    NPCBilgi[i][nWorld] = vericek_int(i, "nWorld");
		NPCBilgi[i][nKiyafet] = vericek_int(i, "Kiyafet");
		NPCBilgi[i][nTur] = vericek_int(i, "Tur");
		format(NPCBilgi[i][nAd], 32, isim);
	    NPC_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek NPC bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet NPC yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Araclari_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_ARAC)
	{
	    AracBilgi[i][aracKullanimda] = true;
    	AracBilgi[i][aracID] = vericek_int(i, "aracID");
        AracBilgi[i][aracSatilik] = 0;
		format(AracBilgi[i][aracPlaka], 12, "%s", vericek_varchar(i, "aracPlaka"));
	    AracBilgi[i][aracModel] = vericek_int(i, "aracModel");
	    AracBilgi[i][aracTur] = vericek_int(i, "aracTur");
	    AracBilgi[i][aracPos][0] = vericek_float(i, "aracPosX");
	    AracBilgi[i][aracPos][1] = vericek_float(i, "aracPosY");
	    AracBilgi[i][aracPos][2] = vericek_float(i, "aracPosZ");
	    AracBilgi[i][aracPos][3] = vericek_float(i, "aracPosR");
	    AracBilgi[i][aracKilit] = vericek_int(i, "aracKilit");
	    AracBilgi[i][aracRenk1] = vericek_int(i, "aracRenk1");
	    AracBilgi[i][aracRenk2] = vericek_int(i, "aracRenk2");
	    AracBilgi[i][aracPaintjob] = vericek_int(i, "aracPaintjob");
	    AracBilgi[i][aracBirlik] = vericek_int(i, "aracBirlik");
	    AracBilgi[i][aracSahip] = vericek_int(i, "aracSahip");
	    AracBilgi[i][aracAnahtar] = vericek_int(i, "Anahtar");
	    AracBilgi[i][aracKiralik] = vericek_int(i, "Kiralik");
        AracBilgi[i][aKiraZaman] = vericek_int(i, "KiraZaman");
        AracBilgi[i][aKiraUcret] = vericek_int(i, "KiraUcret");
        AracBilgi[i][aracWorld] = vericek_int(i, "aracWorld");
        AracBilgi[i][aracInt] = vericek_int(i, "aracInt");
		AracBilgi[i][aracKM] = vericek_float(i, "aracKM");
        AracBilgi[i][aracBenzin] = vericek_float(i, "aracBenzin");
        AracBilgi[i][aracZirh] = vericek_int(i, "aracZirh");
        AracBilgi[i][aracDurum] = vericek_int(i, "Durum");
        AracBilgi[i][aracVergi] = vericek_int(i, "Vergi");
        AracBilgi[i][aracFiyat] = vericek_int(i, "Fiyat");
        AracBilgi[i][aracBaglama] = vericek_int(i, "Baglama");
        AracBilgi[i][aracGaraj] = vericek_int(i, "Garaj");
        AracBilgi[i][uberLisans] = vericek_int(i, "UberLisans");
        AracBilgi[i][aracVip] = vericek_int(i, "AracVip");
        AracBilgi[i][aracGuvenlik] = vericek_int(i, "aracGuvenlik");
		AracBilgi[i][aTaksiMetreDurum] = false;
		AracBilgi[i][aTaksiMetre] = 0.0;
        if(AracBilgi[i][aracFiyat] > 0) AracBilgi[i][aracSatilik] = 1;
		format(AracBilgi[i][aracIletisim], 144, "%s", vericek_varchar(i, "Iletisim"));
		new modifiyeler[512];
		format(modifiyeler, sizeof(modifiyeler), "%s", vericek_varchar(i, "Modifiyeler"));
		sscanf(modifiyeler, "p<|>iiiiiiiiiiiiii", AracBilgi[i][aracModifiye][0], AracBilgi[i][aracModifiye][1], AracBilgi[i][aracModifiye][2], AracBilgi[i][aracModifiye][3], AracBilgi[i][aracModifiye][4], AracBilgi[i][aracModifiye][5], AracBilgi[i][aracModifiye][6], AracBilgi[i][aracModifiye][7], AracBilgi[i][aracModifiye][8], AracBilgi[i][aracModifiye][9], AracBilgi[i][aracModifiye][10], AracBilgi[i][aracModifiye][11], AracBilgi[i][aracModifiye][12], AracBilgi[i][aracModifiye][13]);
	    Arac_Spawn(i);
	    if(AracBilgi[i][aracSahip] == 0 && AracBilgi[i][aracBirlik] == 0 && AracBilgi[i][aracKiralik] == 0) Arac_Sil(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek araç bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet araç yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Birimleri_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_BIRIM)
	{
	    BirimBilgi[i][birimKullanimda] = true;
    	BirimBilgi[i][birimID] = vericek_int(i, "birimID");

		format(BirimBilgi[i][birimAd], 32, "%s", vericek_varchar(i, "birimAd"));
	    BirimBilgi[i][birimTur] = vericek_int(i, "birimTur");
	    BirimBilgi[i][birimBirlik] = vericek_int(i, "birimBirlik");
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek birim bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet birim yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Birlikleri_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_BIRLIK)
	{
	    BirlikBilgi[i][birlikKullanimda] = true;
    	BirlikBilgi[i][birlikID] = vericek_int(i, "birlikID");

		format(BirlikBilgi[i][birlikAd], 32, "%s", vericek_varchar(i, "birlikAd"));
	    BirlikBilgi[i][bDolapPos][0] = vericek_float(i, "bDolapX");
	    BirlikBilgi[i][bDolapPos][1] = vericek_float(i, "bDolapY");
	    BirlikBilgi[i][bDolapPos][2] = vericek_float(i, "bDolapZ");
	    BirlikBilgi[i][birlikTur] = vericek_int(i, "birlikTur");
	    BirlikBilgi[i][bDolapInt] = vericek_int(i, "bDolapInt");
	    BirlikBilgi[i][bDolapVW] = vericek_int(i, "bDolapVW");
	    BirlikBilgi[i][birlikMaksRutbe] = vericek_int(i, "birlikMaksRutbe");
	    BirlikBilgi[i][oKanal] = vericek_int(i, "oDurum");
		format(BirlikBilgi[i][birlikR1], 32, "%s", vericek_varchar(i, "birlikRutbe1"));
		format(BirlikBilgi[i][birlikR2], 32, "%s", vericek_varchar(i, "birlikRutbe2"));
		format(BirlikBilgi[i][birlikR3], 32, "%s", vericek_varchar(i, "birlikRutbe3"));
		format(BirlikBilgi[i][birlikR4], 32, "%s", vericek_varchar(i, "birlikRutbe4"));
		format(BirlikBilgi[i][birlikR5], 32, "%s", vericek_varchar(i, "birlikRutbe5"));
		format(BirlikBilgi[i][birlikR6], 32, "%s", vericek_varchar(i, "birlikRutbe6"));
		format(BirlikBilgi[i][birlikR7], 32, "%s", vericek_varchar(i, "birlikRutbe7"));
		format(BirlikBilgi[i][birlikR8], 32, "%s", vericek_varchar(i, "birlikRutbe8"));
		format(BirlikBilgi[i][birlikR9], 32, "%s", vericek_varchar(i, "birlikRutbe9"));
		format(BirlikBilgi[i][birlikR10], 32, "%s", vericek_varchar(i, "birlikRutbe10"));
		format(BirlikBilgi[i][birlikR11], 32, "%s", vericek_varchar(i, "birlikRutbe11"));
		format(BirlikBilgi[i][birlikR12], 32, "%s", vericek_varchar(i, "birlikRutbe12"));
		format(BirlikBilgi[i][birlikR13], 32, "%s", vericek_varchar(i, "birlikRutbe13"));
		format(BirlikBilgi[i][birlikR14], 32, "%s", vericek_varchar(i, "birlikRutbe14"));
		format(BirlikBilgi[i][birlikR15], 32, "%s", vericek_varchar(i, "birlikRutbe15"));
		format(BirlikBilgi[i][birlikR16], 32, "%s", vericek_varchar(i, "birlikRutbe16"));
		format(BirlikBilgi[i][birlikR17], 32, "%s", vericek_varchar(i, "birlikRutbe17"));
		format(BirlikBilgi[i][birlikR18], 32, "%s", vericek_varchar(i, "birlikRutbe18"));
		format(BirlikBilgi[i][birlikR19], 32, "%s", vericek_varchar(i, "birlikRutbe19"));
		format(BirlikBilgi[i][birlikR20], 32, "%s", vericek_varchar(i, "birlikRutbe20"));
		new onay[256];
		format(onay, sizeof(onay), "%s", vericek_varchar(i, "Onay"));
		sscanf(onay, "p<|>dddddddd", BirlikBilgi[i][birlikOnay][0], BirlikBilgi[i][birlikOnay][1], BirlikBilgi[i][birlikOnay][2], BirlikBilgi[i][birlikOnay][3], BirlikBilgi[i][birlikOnay][4], BirlikBilgi[i][birlikOnay][5], BirlikBilgi[i][birlikOnay][6], BirlikBilgi[i][birlikOnay][7]);
		format(onay, sizeof(onay), "%s", vericek_varchar(i, "BirlikBolge"));
		sscanf(onay, "p<|>fffdd", BirlikBilgi[i][birlikPos][0], BirlikBilgi[i][birlikPos][1], BirlikBilgi[i][birlikPos][2], BirlikBilgi[i][birlikPosDurum], BirlikBilgi[i][birlikOnayDurum]);
		for(new d = 0; d < 20; d++) {
			format(mesaj, sizeof(mesaj), "Maas%d", d + 1);
			BirlikBilgi[i][birlikMaas][d] = vericek_int(i, mesaj);
		}
		BirlikBilgi[i][birlikLevel] = vericek_int(i, "Level");
		format(BirlikBilgi[i][birlikDuyuru], 48, "%s", vericek_varchar(i, "Duyuru"));
	    Birlik_Yenile(i);
	    sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek birlik bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet birlik yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Giseleri_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_GISE)
	{
	    GiseBilgi[i][giseKullanimda] = true;
	    GiseBilgi[i][giseDurum] = 0;

	    GiseBilgi[i][giseID] = vericek_int(i, "giseID");
	    GiseBilgi[i][giseModel] = vericek_int(i, "giseModel");
	    GiseBilgi[i][giseHiz] = vericek_float(i, "giseHiz");
	    GiseBilgi[i][giseMenzil] = vericek_float(i, "giseMenzil");
	    GiseBilgi[i][giseUcret] = vericek_int(i, "giseUcret");

	    GiseBilgi[i][gisePos][0] = vericek_float(i, "giseX");
	    GiseBilgi[i][gisePos][1] = vericek_float(i, "giseY");
	    GiseBilgi[i][gisePos][2] = vericek_float(i, "giseZ");
	    GiseBilgi[i][gisePos][3] = vericek_float(i, "giseRX");
	    GiseBilgi[i][gisePos][4] = vericek_float(i, "giseRY");
	    GiseBilgi[i][gisePos][5] = vericek_float(i, "giseRZ");

        GiseBilgi[i][giseAcilis][0] = vericek_float(i, "giseAcilisX");
	    GiseBilgi[i][giseAcilis][1] = vericek_float(i, "giseAcilisY");
	    GiseBilgi[i][giseAcilis][2] = vericek_float(i, "giseAcilisZ");
	    GiseBilgi[i][giseAcilis][3] = vericek_float(i, "giseAcilisRX");
	    GiseBilgi[i][giseAcilis][4] = vericek_float(i, "giseAcilisRY");
	    GiseBilgi[i][giseAcilis][5] = vericek_float(i, "giseAcilisRZ");

	    GiseBilgi[i][giseObje] = CreateDynamicObject(GiseBilgi[i][giseModel], GiseBilgi[i][gisePos][0], GiseBilgi[i][gisePos][1], GiseBilgi[i][gisePos][2], GiseBilgi[i][gisePos][3], GiseBilgi[i][gisePos][4], GiseBilgi[i][gisePos][5], 0, 0);
		sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek giþe bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet giþe yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Gateleri_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_GATE)
	{
	    GateBilgi[i][gateKullanimda] = true;
	    GateBilgi[i][gateDurum] = false;

	    GateBilgi[i][gateID] = vericek_int(i, "gateID");
	    GateBilgi[i][gateModel] = vericek_int(i, "gateModel");
	    GateBilgi[i][gateSahip] = vericek_int(i, "gateSahip");
	    GateBilgi[i][gateHiz] = vericek_float(i, "gateHiz");
	    GateBilgi[i][gateMenzil] = vericek_float(i, "gateMenzil");
	    GateBilgi[i][gateInterior] = vericek_int(i, "gateInterior");
	    GateBilgi[i][gateWorld] = vericek_int(i, "gateWorld");
	    GateBilgi[i][gateBirlik] = vericek_int(i, "gateBirlik");

	    GateBilgi[i][gatePos][0] = vericek_float(i, "gateX");
	    GateBilgi[i][gatePos][1] = vericek_float(i, "gateY");
	    GateBilgi[i][gatePos][2] = vericek_float(i, "gateZ");
	    GateBilgi[i][gatePos][3] = vericek_float(i, "gateRX");
	    GateBilgi[i][gatePos][4] = vericek_float(i, "gateRY");
	    GateBilgi[i][gatePos][5] = vericek_float(i, "gateRZ");

        GateBilgi[i][gateAcilis][0] = vericek_float(i, "gateAcilisX");
	    GateBilgi[i][gateAcilis][1] = vericek_float(i, "gateAcilisY");
	    GateBilgi[i][gateAcilis][2] = vericek_float(i, "gateAcilisZ");
	    GateBilgi[i][gateAcilis][3] = vericek_float(i, "gateAcilisRX");
	    GateBilgi[i][gateAcilis][4] = vericek_float(i, "gateAcilisRY");
	    GateBilgi[i][gateAcilis][5] = vericek_float(i, "gateAcilisRZ");
	    GateBilgi[i][gateParola] = vericek_int(i, "Parola");

	    GateBilgi[i][gateObje] = CreateDynamicObject(GateBilgi[i][gateModel], GateBilgi[i][gatePos][0], GateBilgi[i][gatePos][1], GateBilgi[i][gatePos][2], GateBilgi[i][gatePos][3], GateBilgi[i][gatePos][4], GateBilgi[i][gatePos][5], GateBilgi[i][gateWorld], GateBilgi[i][gateInterior]);
		sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek gate bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet gate yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public GiseYaratildi(giseid)
{
	if(giseid == -1 || !GiseBilgi[giseid][giseKullanimda]) return 0;

	GiseBilgi[giseid][giseID] = cache_insert_id();
	Gise_Kaydet(giseid);
	return 1;
}

public Gise_Kapat(giseid) {
    if(GiseBilgi[giseid][giseDurum] != 2) GiseBilgi[giseid][giseDurum] = 0;
	MoveDynamicObject(GiseBilgi[giseid][giseObje], GiseBilgi[giseid][gisePos][0], GiseBilgi[giseid][gisePos][1], GiseBilgi[giseid][gisePos][2], GiseBilgi[giseid][giseHiz], GiseBilgi[giseid][gisePos][3], GiseBilgi[giseid][gisePos][4], GiseBilgi[giseid][gisePos][5]);
	return 1;
}

public GateYaratildi(gateid)
{
	if(gateid == -1 || !GateBilgi[gateid][gateKullanimda]) return 0;

	GateBilgi[gateid][gateID] = cache_insert_id();
	Gate_Kaydet(gateid);
	return 1;
}

public Mobilyalari_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_MOBILYA)
	{
	    MobilyaBilgi[i][mobilyaKullanimda] = true;
	    MobilyaBilgi[i][mobilyaID] = vericek_int(i, "ID");
		MobilyaBilgi[i][mobilyaModel] = vericek_int(i, "Model");
		MobilyaBilgi[i][mobilyaEv] = vericek_int(i, "Ev");

		MobilyaBilgi[i][mobilyaPos][0] = vericek_float(i, "mobilyaX");
		MobilyaBilgi[i][mobilyaPos][1] = vericek_float(i, "mobilyaY");
		MobilyaBilgi[i][mobilyaPos][2] = vericek_float(i, "mobilyaZ");
		MobilyaBilgi[i][mobilyaPos][3] = vericek_float(i, "mobilyaRX");
		MobilyaBilgi[i][mobilyaPos][4] = vericek_float(i, "mobilyaRY");
		MobilyaBilgi[i][mobilyaPos][5] = vericek_float(i, "mobilyaRZ");

		MobilyaBilgi[i][mobilyaInt] = vericek_int(i, "Interior");
		MobilyaBilgi[i][mobilyaVW] = vericek_int(i, "Virtualworld");
		if(IsValidDynamicObject(MobilyaBilgi[i][mobilyaYarat])) DestroyDynamicObject(MobilyaBilgi[i][mobilyaYarat]), MobilyaBilgi[i][mobilyaYarat] = INVALID_OBJECT_ID;
		MobilyaBilgi[i][mobilyaYarat] = CreateDynamicObject(MobilyaBilgi[i][mobilyaModel], MobilyaBilgi[i][mobilyaPos][0], MobilyaBilgi[i][mobilyaPos][1], MobilyaBilgi[i][mobilyaPos][2], MobilyaBilgi[i][mobilyaPos][3], MobilyaBilgi[i][mobilyaPos][4], MobilyaBilgi[i][mobilyaPos][5], MobilyaBilgi[i][mobilyaVW], MobilyaBilgi[i][mobilyaInt]);
		sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek mobilya bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet mobilya yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public Objeleri_Yukle()
{
    new rows, fields, mesaj[128], sayi = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new i = 0; i < rows; i ++) if(i < MAKSIMUM_OBJE)
	{
	    ObjeBilgi[i][objeKullanimda] = true;
	    ObjeBilgi[i][objeID] = vericek_int(i, "objeID");
	    ObjeBilgi[i][objeModel] = vericek_int(i, "objeModel");
	    ObjeBilgi[i][objeSahip] = vericek_int(i, "objeSahip");
	    ObjeBilgi[i][objeInterior] = vericek_int(i, "objeInterior");
	    ObjeBilgi[i][objeWorld] = vericek_int(i, "objeWorld");
	    ObjeBilgi[i][objeBirlik] = vericek_int(i, "objeBirlik");

	    ObjeBilgi[i][objePos][0] = vericek_float(i, "objeX");
	    ObjeBilgi[i][objePos][1] = vericek_float(i, "objeY");
	    ObjeBilgi[i][objePos][2] = vericek_float(i, "objeZ");
	    ObjeBilgi[i][objePos][3] = vericek_float(i, "objeRX");
	    ObjeBilgi[i][objePos][4] = vericek_float(i, "objeRY");
	    ObjeBilgi[i][objePos][5] = vericek_float(i, "objeRZ");
	    ObjeBilgi[i][objeYarat] = CreateDynamicObject(ObjeBilgi[i][objeModel], ObjeBilgi[i][objePos][0], ObjeBilgi[i][objePos][1], ObjeBilgi[i][objePos][2], ObjeBilgi[i][objePos][3], ObjeBilgi[i][objePos][4], ObjeBilgi[i][objePos][5], ObjeBilgi[i][objeWorld], ObjeBilgi[i][objeInterior]);
		sayi++;
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "=> Veritabanýnda sunucuya entegre edilecek obje bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "=> %d adet obje yüklendi. (%d/%d)", sayi, rows, sayi);
	printf(mesaj);
	return 1;
}

public DolapYaratildi(id)
{
	if(id == -1 || !DolapBilgi[id][dolapKullanimda])
	    return 0;

	DolapBilgi[id][dolapID] = cache_insert_id();
	Dolap_Kaydet(id);
	return 1;
}

public ObjeYaratildi(objeid)
{
	if(objeid == -1 || !ObjeBilgi[objeid][objeKullanimda])
	    return 0;

	ObjeBilgi[objeid][objeID] = cache_insert_id();
	Obje_Kaydet(objeid);
	return 1;
}

public MobilyaYaratildi(id)
{
	if(id == -1 || !MobilyaBilgi[id][mobilyaKullanimda])
	    return 0;

	MobilyaBilgi[id][mobilyaID] = cache_insert_id();
	Mobilya_Kaydet(id);
	return 1;
}

public pdaractamir(playerid, aracid)
{
	if(!IsPlayerConnected(playerid)) return 0;

	OyuncuBilgi[playerid][oTamirSure] = 0;
	AracTamirEt(aracid);
	TogglePlayerControllable(playerid, true);
	new id = Arac_IDBul(aracid);
	switch(AracBilgi[id][aracZirh]) {
		case 1: AracZirh[AracBilgi[id][aracYarat]] = ARAC_ZIRH_SEVIYE1;
		case 2: AracZirh[AracBilgi[id][aracYarat]] = ARAC_ZIRH_SEVIYE2;
		case 3: AracZirh[AracBilgi[id][aracYarat]] = ARAC_ZIRH_SEVIYE3;
		case 4: AracZirh[AracBilgi[id][aracYarat]] = ARAC_ZIRH_SEVIYE4;
		default: AracZirh[AracBilgi[id][aracYarat]] = 0;
	}
	return 1;
}

public EtkiSifirla(playerid) return SetPlayerWeather(playerid, 0);

HileKontrol1(playerid)
{
    if(OyuncuYuklemeYapiyor[playerid] == true) return false;
    SetCameraBehindPlayer(playerid);
    CancelSelectTextDraw(playerid);
	new Float:x, Float:y, Float:z;
	GetPlayerCameraFrontVector(playerid, x, y, z);
	#pragma unused x
	#pragma unused y
	if(z < -0.8) {
		UyariMesaji(playerid, "Hile ile giriþ yapamazsýn.");
		return KickEx(playerid);
	}
	new sorgu[128 + MAX_PLAYER_NAME], isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, isim, sizeof(isim));
	format(sorgu, sizeof(sorgu), "SELECT * FROM yasaklamalar WHERE Yasaklanan = '%s'", isim);
	mysql_tquery(mysqlB, sorgu, "Yasaklama_Kontrol", "d", playerid);
    /*format(sorgu, sizeof(sorgu), "SELECT * FROM `serials` WHERE `username` = '%s' LIMIT 1", isim);
    mysql_tquery(mysqlB, sorgu, "Client_Kontrol", "i", playerid);*/
	return false;
}

/*public Client_Kontrol(oyuncuid)
{
    new rows, fields, isim[MAX_PLAYER_NAME];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
    GetPlayerName(oyuncuid, isim, sizeof(isim));
    if(!rows && !!strcmp(isim, "001") && !!strcmp(isim, "002") || rows > 0 && vericek_int(0, "onaylandi") == 0) {
		DialogGoster(oyuncuid, 0, DIALOG_STYLE_MSGBOX, "Hata", "Sunucumuza giriþler sadece client kontrolünde yapýlmaktadýr, clienti indirmek için www.viga-roleplay.com adresini ziyaret edebilirsiniz.", "Tamam", "");
		return KickEx(oyuncuid);
    }
	new sorgu[96 + MAX_PLAYER_NAME];
    format(sorgu, sizeof(sorgu), "UPDATE `serials` SET `onaylandi` = '0' WHERE `username` = '%s'", isim);
    mysql_tquery(mysqlB, sorgu);
	format(sorgu, sizeof(sorgu), "SELECT * FROM yasaklamalar WHERE Yasaklanan = '%s'", isim);
	mysql_tquery(mysqlB, sorgu, "Yasaklama_Kontrol", "d", oyuncuid);
    return true;
}*/

public Benzin_Al(oyuncuid, aracid) {
	if(!IsPlayerConnected(oyuncuid)) return OyuncuBilgi[oyuncuid][oBenzinAliyor] = -1, OyuncuBilgi[oyuncuid][oBenzinIsyeri] = -1;
	
	new pompaid = OyuncuBilgi[oyuncuid][oBenzinAliyor], ucret = BenzinPompasi[pompaid][pompaUcret], isyeriid = OyuncuBilgi[oyuncuid][oBenzinIsyeri];
	if(isyeriid < 0 || isyeriid >= MAKSIMUM_ISYERI || !IsyeriBilgi[isyeriid][isyeriKullanimda]) return OyuncuBilgi[oyuncuid][oBenzinAliyor] = -1, OyuncuBilgi[oyuncuid][oBenzinIsyeri] = -1;
	if(OyuncuBilgi[oyuncuid][oPara] < ucret) return OyuncuBilgi[oyuncuid][oBenzinAliyor] = -1, OyuncuBilgi[oyuncuid][oBenzinIsyeri] = -1;
	if(AracBilgi[aracid][aracBenzin] > 99.9) return OyuncuBilgi[oyuncuid][oBenzinAliyor] = -1, OyuncuBilgi[oyuncuid][oBenzinIsyeri] = -1;
	if((pompaid < 0 || pompaid >= MAKSIMUM_BENZIN_POMPASI) || !BenzinPompasi[pompaid][pompaKullanimda]) return OyuncuBilgi[oyuncuid][oBenzinAliyor] = -1, OyuncuBilgi[oyuncuid][oBenzinIsyeri] = -1;
	if(BenzinPompasi[pompaid][pompaBenzin] < 1) return OyuncuBilgi[oyuncuid][oBenzinAliyor] = -1, OyuncuBilgi[oyuncuid][oBenzinIsyeri] = -1;

	ParaEkle(oyuncuid, -ucret);
	AracBilgi[aracid][aracBenzin] += 1.0;
	BenzinPompasi[pompaid][pompaBenzin] -= 1;
	if(BenzinPompasi[pompaid][pompaIsyeri] == IsyeriBilgi[isyeriid][isyeriID] && IsyeriBilgi[isyeriid][isyeriTur] == 9) // Arac_BirlikTuru(GetPlayerVehicleID(oyuncuid)) != BIRLIK_POLIS && Arac_BirlikTuru(GetPlayerVehicleID(oyuncuid)) != BIRLIK_DEVLET && Arac_BirlikTuru(GetPlayerVehicleID(oyuncuid)) != BIRLIK_MEDIKAL
		IsyeriBilgi[isyeriid][isyeriKasa] += ucret, Isyeri_Kaydet(isyeriid);

	new icerik[144];
	format(icerik, sizeof(icerik), "[Benzin Pompasý %d]\n{a9c4e4}Kalan Benzin: {FFFFFF}%s Litre\n{a9c4e4}Litre Ücreti: {FFFFFF}%s\n{a9c4e4}Kullaným: {FFFFFF}/benzinal - /benziniptal", pompaid, NumaraFormati(BenzinPompasi[pompaid][pompaBenzin], ""), NumaraFormati(BenzinPompasi[pompaid][pompaUcret]));
    UpdateDynamic3DTextLabelText(BenzinPompasi[pompaid][pompaText3D], RENK_SERVER, icerik);
    SetTimerEx("Benzin_Al", 500, false, "id", oyuncuid, aracid);
	return false;
}

public Admin_Maas(playerid)
{
	if(!cache_num_rows()) return HataMesaji(playerid, "Yetkili hesap bulunamadý.");

	new rows, fields, str[1024], level, isim[MAX_PLAYER_NAME], durum[32], sqlid;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	str[0] = 0;
	str = "SQL ID\tYetkili Ýsmi\tSeviye\tDurum\n";
	strcat(str, "Maaþ Ver\t\t\t\n");
	for(new i = 0; i < rows; i++)
	{
	    sqlid = vericek_int(i, "forumID");
		level = vericek_int(i, "Admin");
		format(isim, sizeof(isim), "%s", vericek_varchar(i, "AdminIsim"));
		format(durum, sizeof(durum), "%s", (vericek_int(i, "Durum") == 0) ? ("{B70000}Pasif") : ("{33aa33}Aktif"));
		format(str, sizeof(str), "%s%d\t%s\t%s(%d)\t%s\n", str, sqlid, isim, Admin_RutbeIsim(level), level, durum);
	}
	DialogGoster(playerid, DIALOG_ADMINMAAS, DIALOG_STYLE_TABLIST_HEADERS, "{ffffff}Admin Maaþ", str, "Seç", "Kapat");
	return 1;
}

public yetkilihesaplar(playerid)
{
	if(!cache_num_rows()) return HataMesaji(playerid, "Yetkili hesap bulunamadý.");

	new rows, fields, str[1024], level, isim[MAX_PLAYER_NAME], sqlid;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	str[0] = 0;
	str = "SQL ID\tYönetici Ýsmi\tSeviye\n";
	for(new i = 0; i < rows; i++)
	{
		sqlid = vericek_int(i, "forumID");
		level = vericek_int(i, "Admin");
		format(isim, sizeof(isim), "%s", vericek_varchar(i, "AdminIsim"));
		format(str, sizeof(str), "%s%d\t%s\t%s(%d)\n", str, sqlid, isim, Admin_RutbeIsim(level), level);
	}
	DialogGoster(playerid, DIALOG_YONETIMGOREV, DIALOG_STYLE_TABLIST_HEADERS, "{ffffff}Yetkili Hesaplar", str, "Seç", "Kapat");
	return 1;
}

public Hitman_KontraktKontrol(oyuncuid, ucret)
{
	new rows, fields, isim[MAX_PLAYER_NAME + 1];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Bu isimde birisi bulunamadý.");
	if(OyuncuBilgi[oyuncuid][oBankaPara] < ucret) {
		SendClientMessageEx(oyuncuid, RENK_SARI, "[SMS] {D2D2D2}Bizimle dalga geçmek akýllý insanlarýn iþi deðil, kendine dikkat et. | Gönderen: Gizli Numara");
		SendClientMessageEx(oyuncuid, RENK_SARI, "[SMS] {D2D2D2}Banka hesabýnda kontrakt için para yok, birikim yapmalýsýn %s. | Gönderen: Gizli Numara", OyuncuSoyadi(oyuncuid, OyuncuBilgi[oyuncuid][oIsim]));
	    return 1;
	}
	format(isim, sizeof(isim), "%s", vericek_varchar(0, "isim"));
	new id = -1;
	id = Kontrakt_Ekle(isim, ucret);
	if(id == -1) return HataMesaji(oyuncuid, "Kontrakt listesi dolu olduðu için isteðini alamadýk.");

	SunucuMesaji(oyuncuid, "%s adýna %s ücretinde kontrakt tuttun, ücret banka hesabýndan tahsil edildi.", isim, NumaraFormati(ucret));
	SunucuMesaji(oyuncuid, "Unutma ki iadesiz olarak bu kontraktý iptal edebiliriz, kabul edersek zaten haberini alacaksýn.");
	OyuncuBilgi[oyuncuid][oBankaPara] -= ucret;
	new sorgu[512];
	format(sorgu, sizeof(sorgu), "Giden Havale: %s (-%s)", "Anonim Þirket", NumaraFormati(ucret));
	format(sorgu, sizeof(sorgu), "INSERT INTO `bankaislemler` (`Islem`, `Tarih`, `HesapNumarasi`, `Tur`) VALUES ('%s', '%s', '%d', '1')", SQL_ReturnEscaped(sorgu), Tarih(), OyuncuBilgi[oyuncuid][oHesapNumarasi]);
	mysql_query(mysqlB, sorgu);
	OyuncuKaydet(oyuncuid);
	return 1;
}

public Hitman_UyeArat(oyuncuid)
{
	new rows, fields, isim[MAX_PLAYER_NAME + 1];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Hitman üyesi yok!");
    new bilgi[7200];
	format(bilgi, sizeof(bilgi), "{FFFFFF}Ýsim\tTelefon\tKontrakt Sayýsý\tSon Giriþ\nÜye Ekle\t\t\t\n");
	foreach(new i : Player) if(OyuncuBilgi[i][oHitman] > 0) {
	    GetPlayerName(i, isim, sizeof(isim));
		for(new s = 0, len = strlen(isim); s < len; s ++) if(isim[s] == '_') isim[s] = ' ';
		format(bilgi, sizeof(bilgi), "%s\t{FFFFFF}%s\t%d\t%d\t{338833}Aktif\n", bilgi, isim, OyuncuBilgi[i][oTelefonNumarasi], 0);
	}
	for(new i = 0; i < rows; i++) if(vericek_int(i, "Aktif") == 0) {
		format(isim, sizeof(isim), "%s", vericek_varchar(i, "isim"));
		for(new s = 0, len = strlen(isim); s < len; s ++) if(isim[s] == '_') isim[s] = ' ';
		format(bilgi, sizeof(bilgi), "%s{FFFFFF}%s\t%d\t%d\t%s\n", bilgi, isim, vericek_int(i, "TelefonNumarasi"), 0, vericek_varchar(i, "oSonGiris"));
	}
	DialogGoster(oyuncuid, DIALOG_HITMAN_UYELER, DIALOG_STYLE_TABLIST_HEADERS, "Hitman: {FFFFFF}Üye Listesi", bilgi, "Seç", "Kapat");
	return 1;
}

public Birlik_UyeArat(oyuncuid)
{
	new rows, fields, isim[MAX_PLAYER_NAME + 1];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	new bilgi[10240], birim[64], rutbe[64];

	format(bilgi, sizeof(bilgi), "{FFFFFF}Ýsim\tSon Giriþ\tRütbe\tBirim\n");
	foreach(new i : Player) if(OyuncuBilgi[i][oBirlikSQLID] == OyuncuBilgi[oyuncuid][oBirlikSQLID]) {
	    GetPlayerName(i, isim, sizeof(isim));
		for(new s = 0, len = strlen(isim); s < len; s ++) {
			if(isim[s] == '_') isim[s] = ' ';
		}
		if(OyuncuBilgi[i][oBirim] != 0) for(new b = 0; b != MAKSIMUM_BIRIM; b++) if(BirimBilgi[b][birimID] == OyuncuBilgi[i][oBirim]) format(birim, sizeof(birim), "%s", BirimBilgi[b][birimAd]);
		if(OyuncuBilgi[i][oBirim] == 0) format(birim, sizeof(birim), "Yok");
		format(bilgi, sizeof(bilgi), "%s{FFFFFF}%s\t{338833}Aktif\t{FFFFFF}%s\t%s\n", bilgi, isim, OyuncuRutbeAdi(i), birim);
	}
	for(new i = 0; i < rows; i++) if(vericek_int(i, "Aktif") == 0) {
		format(isim, sizeof(isim), "%s", vericek_varchar(i, "isim"));
		for(new s = 0, len = strlen(isim); s < len; s ++) if(isim[s] == '_') isim[s] = ' ';
		switch(vericek_int(i, "birlikrutbe")) {
			case 1: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR1]);
			case 2: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR2]);
			case 3: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR3]);
			case 4: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR4]);
			case 5: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR5]);
			case 6: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR6]);
			case 7: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR7]);
			case 8: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR8]);
			case 9: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR9]);
			case 10: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR10]);
			case 11: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR11]);
			case 12: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR12]);
			case 13: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR13]);
			case 14: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR14]);
			case 15: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR15]);
			case 16: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR16]);
			case 17: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR17]);
			case 18: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR18]);
			case 19: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR19]);
			case 20: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR20]);
		}
		if(vericek_int(i, "Birim") != 0) for(new b = 0; b != MAKSIMUM_BIRIM; b++) if(BirimBilgi[b][birimID] == vericek_int(i, "Birim")) format(birim, sizeof(birim), "%s", BirimBilgi[b][birimAd]);
		if(vericek_int(i, "Birim") == 0) format(birim, sizeof(birim), "Yok");
		format(bilgi, sizeof(bilgi), "%s{FFFFFF}%s\t%s\t%s\t%s\n", bilgi, isim, vericek_varchar(i, "oSonGiris"), rutbe, birim);
	}
	if(BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikMaksRutbe] != OyuncuBilgi[oyuncuid][oBirlikRutbe] && OyuncuBilgi[oyuncuid][oBirlikLider] != BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikID]) return DialogGoster(oyuncuid, DIALOG_BIRLIK_UYELER, DIALOG_STYLE_TABLIST_HEADERS, "{ffffff}Birlik Üyeleri", bilgi, "", "Kapat");

	DialogGoster(oyuncuid, DIALOG_BIRLIK_UYELER, DIALOG_STYLE_TABLIST_HEADERS, "Birlik: {FFFFFF}Üye Listesi", bilgi, "Birlikten At", "Kapat");
	return 1;
}

public Bagaj_ElKoy(oyuncuid, aracid) {
	new rows, fields, baslik[64], icerik[512];
	icerik[0] = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(BagajSlotKontrol(AracBilgi[aracid][aracModel]) == 0) return HataMesaji(oyuncuid, "Bu aracýn bagajý yok."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
	if(!rows && KamyoncuYuk[AracBilgi[aracid][aracYarat]] == -1) return HataMesaji(oyuncuid, "Bu aracýn bagajýnda bir þey yok."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;

	OyuncuBilgi[oyuncuid][oBagaj] = aracid;
	SetTrunkStatus(AracBilgi[aracid][aracYarat], true);
	format(baslik, sizeof(baslik), "%s - Bagaj", AracModel(AracBilgi[aracid][aracModel]));
	format(icerik, sizeof(icerik), "Eþya\t\tAdet\n");
	if(KamyoncuYuk[AracBilgi[aracid][aracYarat]] != -1) strcat(icerik, "Yük Kontrol\t\t\n");
	for(new i = 0; i < rows; i ++) {
		format(icerik, sizeof(icerik), "%s%s\t\t%d\n", icerik, vericek_varchar(i, "esyaIsim"), vericek_int(i, "esyaAdet"));
	}
	DialogGoster(oyuncuid, DIALOG_ARACBAGAJ_ELKOY, DIALOG_STYLE_TABLIST_HEADERS, baslik, icerik, "Seç", "Ýptal");
	return 1;
}

public Bagaj_Elkoyuldu(oyuncuid) {
    new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Bir hata oluþtu."), SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;

	new emote[256], query[512];
	format(emote, sizeof(emote), "%s model aracýn bagajýndaki \"%s\" adlý eþyaya el koydu.", AracModel(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracModel]), vericek_varchar(0, "esyaIsim"));
	cmd_me(oyuncuid, emote);
	format(query, sizeof(query), "DELETE FROM `bagaj` WHERE `esyaID` = '%d'", vericek_int(0, "esyaID"));
	mysql_tquery(mysqlB, query);
	SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
	return 1;
}

public Bagaj_Kontrol(oyuncuid, aracid)
{
	new rows, fields, baslik[64], icerik[512];
	icerik[0] = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(BagajSlotKontrol(AracBilgi[aracid][aracModel]) == 0) return HataMesaji(oyuncuid, "Bu aracýn bagajý yok."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
	if(Arac_BirlikTuru(AracBilgi[aracid][aracYarat]) == BIRLIK_POLIS && OyuncuBilgi[oyuncuid][oIsbasi] == false) {
		if(OyuncuBilgi[oyuncuid][oBirim] == 0) return HataMesaji(oyuncuid, "Ýþ baþýnda olmadýðýn için bagajý kullanamazsýn.");
		for(new i = 0; i != MAKSIMUM_BIRIM; i ++) if(BirimBilgi[i][birimID] == OyuncuBilgi[oyuncuid][oBirim])
			if(!!strcmp(BirimBilgi[i][birimAd], "SWAT", true) && !!strcmp(BirimBilgi[i][birimAd], "DET", true)) return HataMesaji(oyuncuid, "Ýþ baþýnda olmadýðýn için bagajý kullanamazsýn."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
	}
	if(AracBilgi[aracid][aracModel] == 528 || AracBilgi[aracid][aracModel] == 427) {
		if(OyuncuBilgi[oyuncuid][oBirim] == 0) return HataMesaji(oyuncuid, "SWAT biriminde olmadýðýn için bu aracýn bagajýný kullanamazsýn."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
		for(new i = 0; i != MAKSIMUM_BIRIM; i ++) if(BirimBilgi[i][birimID] == OyuncuBilgi[oyuncuid][oBirim])
			if(!!strcmp(BirimBilgi[i][birimAd], "SWAT", true)) return HataMesaji(oyuncuid, "SWAT biriminde olmadýðýn için bu aracýn bagajýný kullanamazsýn."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
	}
	OyuncuBilgi[oyuncuid][oBagaj] = aracid;
	SetTrunkStatus(AracBilgi[aracid][aracYarat], true);
	format(baslik, sizeof(baslik), "%s - Bagaj", AracModel(AracBilgi[aracid][aracModel]));
	format(icerik, sizeof(icerik), "Eþya\t\tAdet\n");

	for(new i = 0; i < rows; i ++) {
		format(icerik, sizeof(icerik), "%s%s\t\t%d\n", icerik, vericek_varchar(i, "esyaIsim"), vericek_int(i, "esyaAdet"));
	}
	if(rows < BagajSlotKontrol(AracBilgi[aracid][aracModel])) for(new b = 0; b != BagajSlotKontrol(AracBilgi[aracid][aracModel]) - rows; b++) { strcat(icerik, "Boþ Slot\n"); }
	if(AracBilgi[aracid][aracModel] == 416) format(icerik, sizeof(icerik), "%sÝlk Yardým Kiti", icerik);
	DialogGoster(oyuncuid, DIALOG_ARACBAGAJ, DIALOG_STYLE_TABLIST_HEADERS, baslik, icerik, "Seç", "Ýptal");
	return 1;
}


public BagajSilah(oyuncuid)
{
    new rows, fields, query[256], emote[128];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Bir hata oluþtu."), SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;

    OyuncuKaydet(oyuncuid);
    new silahisim[35];
    for(new i; i <= 46; i++)
    {
        switch (i)
        {
            case 0, 19, 20, 21, 44, 45: continue;
            default:
            {
                GetWeaponName(i, silahisim, sizeof (silahisim));
                if(strfind(vericek_varchar(0, "esyaIsim"), silahisim, true) != -1) {
                    if(SilahSlotKontrol(oyuncuid, SilahSlotBul[i]) && SilahSlotBul[i] != 0) return HataMesaji(oyuncuid, "Bu silah türü sende bulunuyor."), SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
					Silahver(oyuncuid, i, vericek_int(0, "esyaAdet"));
				}
            }
        }
    }
	format(emote, sizeof(emote), "araç bagajýndan %s aldý.", vericek_varchar(0, "esyaIsim"));
	cmd_ame(oyuncuid, emote);
	format(query, sizeof(query), "DELETE FROM `bagaj` WHERE `esyaID` = '%d'", vericek_int(0, "esyaID"));
	mysql_tquery(mysqlB, query);
	SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
	return 1;
}

public BagajEsya(oyuncuid, esya) {
    new rows, fields, query[256], emote[128], esyaisim[64], limit = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Bir hata oluþtu."), SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;

	switch(esya) {
	    case 0: OyuncuBilgi[oyuncuid][oUyusturucu] += vericek_int(0, "esyaAdet"), format(esyaisim, sizeof(esyaisim), "Uyuþturucu");
	    case 1: ZirhDuzenle(oyuncuid, floatround(vericek_int(0, "esyaAdet"))), format(esyaisim, sizeof(esyaisim), "Çelik Yelek");
	    case 2: OyuncuBilgi[oyuncuid][oBeanbag] = true, GetPlayerWeaponData(oyuncuid, 3, OyuncuBilgi[oyuncuid][oSilah][3], OyuncuBilgi[oyuncuid][oMermi][3]), GivePlayerWeapon(oyuncuid, 25, 99999), format(esyaisim, sizeof(esyaisim), "Beanbag Tüfeði");
	    case 3: {
			switch(OyuncuBilgi[oyuncuid][oVIP]) {
                case 3: limit = 2;
                default: limit = 1;
            }
	        if(vericek_int(0, "esyaAdet") + OyuncuBilgi[oyuncuid][oIlkYardim] > limit) return HataMesaji(oyuncuid, "Daha fazla ilk yardým kiti taþýyamazsýn."), SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
			OyuncuBilgi[oyuncuid][oIlkYardim] += vericek_int(0, "esyaAdet"), format(esyaisim, sizeof(esyaisim), "Ýlk Yardým Kiti");
		}
		case 4: {
	        if(vericek_int(0, "esyaAdet") + OyuncuBilgi[oyuncuid][oMaymuncuk] > 3) return HataMesaji(oyuncuid, "Daha fazla maymuncuk taþýyamazsýn."), SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
			OyuncuBilgi[oyuncuid][oMaymuncuk] += vericek_int(0, "esyaAdet"), format(esyaisim, sizeof(esyaisim), "Maymuncuk");
		}
		case 5: {
			switch(OyuncuBilgi[oyuncuid][oVIP]) {
                case 2: limit = 2;
                case 3: limit = 3;
                default: limit = 1;
            }
		    if(vericek_int(0, "esyaAdet") + OyuncuBilgi[oyuncuid][oTamirKiti] > limit) return HataMesaji(oyuncuid, "Daha fazla tamir kiti taþýyamazsýn."), SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
			OyuncuBilgi[oyuncuid][oTamirKiti] += vericek_int(0, "esyaAdet"), format(esyaisim, sizeof(esyaisim), "Tamir Kiti");
		}
		case 6: {
		    new adet = vericek_int(0, "esyaAdet");
			switch(OyuncuBilgi[oyuncuid][oVIP]) {
			    case 1: if(adet + OyuncuBilgi[oyuncuid][oTohum] > 7) return HataMesaji(oyuncuid, "Üzerinde en fazla 7 tohum bulunabilir."), SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
			    case 2: if(adet + OyuncuBilgi[oyuncuid][oTohum] > 10) return HataMesaji(oyuncuid, "Üzerinde en fazla 10 tohum bulunabilir."), SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
			    case 3: if(adet + OyuncuBilgi[oyuncuid][oTohum] > 15) return HataMesaji(oyuncuid, "Üzerinde en fazla 15 tohum bulunabilir."), SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
			    default: if(adet + OyuncuBilgi[oyuncuid][oTohum] > 5) return HataMesaji(oyuncuid, "Üzerinde en fazla 5 tohum bulunabilir."), SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
			}
			OyuncuBilgi[oyuncuid][oTohum] += adet, format(esyaisim, sizeof(esyaisim), "Tohum");
		}
	}
	format(emote, sizeof(emote), "araç bagajýndan %s aldý.", esyaisim);
	cmd_ame(oyuncuid, emote);
	format(query, sizeof(query), "DELETE FROM `bagaj` WHERE `esyaID` = '%d'", vericek_int(0, "esyaID"));
	mysql_tquery(mysqlB, query);
	SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
	return 1;
}

public BagajEsyaSayi(oyuncuid, sayi) {
    new rows, fields, query[256], emote[128], esyaisim[64];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Bir hata oluþtu."), SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
	if(vericek_int(0, "esyaAdet") < sayi) return DialogGoster(oyuncuid, DIALOG_BAGAJ_AL_SAYI, DIALOG_STYLE_INPUT, "Bagaj - Eþya Alma", "{B70000}HATA: {FFFFFF}Bagajda bu kadar yok.\nLütfen bagajdan almak istediðiniz adeti girin;", "Tamam", "Kapat");

	switch(GetPVarInt(oyuncuid, "Bagaj_Esya_Al")) {
	    case 1: OyuncuBilgi[oyuncuid][oUyusturucu] += sayi, format(esyaisim, sizeof(esyaisim), "Uyuþturucu");
	    case 2: {
	        if(sayi + OyuncuBilgi[oyuncuid][oMaymuncuk] > 3) return HataMesaji(oyuncuid, "Daha fazla maymuncuk ekleyemezsin."), SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
			OyuncuBilgi[oyuncuid][oMaymuncuk] += sayi, format(esyaisim, sizeof(esyaisim), "Maymuncuk");
		}
	}
	OyuncuKaydet(oyuncuid);
	format(emote, sizeof(emote), "araç bagajýndan %s aldý.", esyaisim);
	cmd_ame(oyuncuid, emote);
	if(vericek_int(0, "esyaAdet") - sayi == 0) format(query, sizeof(query), "DELETE FROM `bagaj` WHERE `esyaID` = '%d'", vericek_int(0, "esyaID"));
	else format(query, sizeof(query), "UPDATE `bagaj` SET `esyaAdet` = %d WHERE `esyaID` = '%d'", vericek_int(0, "esyaAdet") - sayi, vericek_int(0, "esyaID"));
	mysql_tquery(mysqlB, query);
	SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
	return 1;
}

public BagajEsyaSayiEkle(oyuncuid, sayi) {
    new rows, fields, query[256], emote[128], esyaisim[64];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Bir hata oluþtu."), SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;

	switch(GetPVarInt(oyuncuid, "Bagaj_Esya_Al")) {
	    case 1: OyuncuBilgi[oyuncuid][oUyusturucu] -= sayi, format(esyaisim, sizeof(esyaisim), "Uyuþturucu");
	    case 2: {
	        if(sayi + OyuncuBilgi[oyuncuid][oMaymuncuk] > 3) return HataMesaji(oyuncuid, "Daha fazla maymuncuk taþýyamazsýn."), SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
			OyuncuBilgi[oyuncuid][oMaymuncuk] -= sayi, format(esyaisim, sizeof(esyaisim), "Maymuncuk");
		}
	}
	OyuncuKaydet(oyuncuid);
	format(emote, sizeof(emote), "araç bagajýna %s koydu.", esyaisim);
	cmd_ame(oyuncuid, emote);
	format(query, sizeof(query), "UPDATE `bagaj` SET `esyaAdet` = %d WHERE `esyaID` = '%d'", vericek_int(0, "esyaAdet") + sayi, vericek_int(0, "esyaID"));
	mysql_tquery(mysqlB, query);
	SetTrunkStatus(AracBilgi[OyuncuBilgi[oyuncuid][oBagaj]][aracYarat], false), OyuncuBilgi[oyuncuid][oBagaj] = -1;
	return 1;
}

public PlakaSorgula(oyuncuid, aracid)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows && AracBilgi[aracid][aracBirlik] < 1) return HataMesaji(oyuncuid, "Bir sorun oluþtu.");

    new isim[64], bilgi[1280], ekleme[256];
	bilgi[0] = 0;
	if(rows && AracBilgi[aracid][aracSahip] > 0) {
		format(isim, sizeof(isim), "%s", vericek_varchar(0, "isim"));
		SetPVarInt(oyuncuid, "aracPlaka", aracid);
		SetPVarString(oyuncuid, "PlakaSahip", isim);
        for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
	}
	else if(AracBilgi[aracid][aracBirlik] > 0) {
		for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(AracBilgi[aracid][aracBirlik] == BirlikBilgi[i][birlikID]) format(isim, sizeof(isim), "%s", BirlikBilgi[i][birlikAd]);
	}
	format(ekleme, sizeof(ekleme), "{AFAFAF}Lokasyon Bul\t\t\n");
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Ceza Kes\t\t\n");
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Ceza Sorgula\t\t\n");
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Araç Sahibi:\t\t{FFFFFF}%s\n", isim);
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Plaka:\t\t{FFFFFF}%s\n", AracBilgi[aracid][aracPlaka]);
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Araç Modeli:\t\t{FFFFFF}%s\n", AracModel(AracBilgi[aracid][aracModel]));
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Durum:\t\t\t{FFFFFF}%s\n", AracDurum(aracid));
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "{AFAFAF}Araç Zýrhý:\t\t\t{FFFFFF}%d Seviye\n", AracBilgi[aracid][aracZirh]);
	strcat(bilgi, ekleme, sizeof(ekleme));
 	format(ekleme, sizeof(ekleme), "{AFAFAF}Uber Lisansý:\t\t\t%s\n", (AracBilgi[aracid][uberLisans] == 0) ? ("{B70000}Yok") : ("{33AA33}Var"));
	strcat(bilgi, ekleme, sizeof(ekleme));
	format(ekleme, sizeof(ekleme), "Plaka Sorgulama - %s", AracBilgi[aracid][aracPlaka]);
	DialogGoster(oyuncuid, DIALOG_MDC_KISISORGULA2, DIALOG_STYLE_TABLIST, ekleme, bilgi, "Geri", "Kapat");
	return 1;
}

public Ceza_Toplam()
{
	new rows, fields, isim[MAX_PLAYER_NAME + 1], sorgu[512];
	cache_get_row_count(rows);
	cache_get_field_count(fields);

    if(!rows) return 0;
	new sayi = 0;
	format(isim, sizeof(isim), "%s", vericek_varchar(0, "cezaSQL"));
	for(new i = 0; i != rows; i ++) sayi += vericek_int(i, "cezaUcret");
	if(sayi > 15000) {
	    for(new i = 0; i != rows; i ++) format(sorgu, sizeof(sorgu), "UPDATE `cezalar` SET `cezaOdendi` = '1' WHERE `cezaSQL` = '%s'", isim), mysql_query(mysqlB, sorgu);
		for(new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == ' ') isim[i] = '_';
		}
		new sebep[144];
		format(sebep, sizeof(sebep), "Ödenmemiþ cezalarýnýzýn toplamý $15.000 tutarýný geçtiði için $5.000 ek ceza ile birlikte haciz iþlemi uygulandý.");
		format(sorgu, sizeof(sorgu), "INSERT INTO `bildirimler` (`Eklenen`,`Sebep`, `Tarih`, `Ekleyen`) VALUES ('%s', '%s', '%s', '%s')", isim, sebep, Tarih(), "Sistem");
		mysql_query(mysqlB, sorgu);

     	new oyuncuid = AktiflikKontrol(isim);
		if(oyuncuid != INVALID_PLAYER_ID && IsPlayerConnected(oyuncuid)) {
		    ParaEkle(oyuncuid, -20000);
			return SunucuMesaji(oyuncuid, "Yeni bir bildiriminiz var, \"/ayarlar\" komutunu kullanarak görüntüleyebilirsiniz.");
		}
		OfflineParaKes(isim, 20000);
    }
	return 1;
}

public MDC_AranmaSil(oyuncuid)
{
	new rows, fields, isim[MAX_PLAYER_NAME + 1], sorgu[512];
	cache_get_row_count(rows);
	cache_get_field_count(fields);

    if(!rows) return HataMesaji(oyuncuid, "Bu oyuncunun aranma kaydý yok.");

	format(isim, sizeof(isim), "%s", vericek_varchar(0, "Oyuncu"));
	for(new i = 0; i != rows; i ++) {
		format(sorgu, sizeof(sorgu), "DELETE FROM `aranmakayitlari` WHERE `Oyuncu` = '%s'", isim);
		mysql_query(mysqlB, sorgu);
	}
	if(IsPlayerConnected(oyuncuid)) SunucuMesaji(oyuncuid, "%s adlý kiþinin %s adet aranma kaydýný sildin.", isim, NumaraFormati(rows, ""));
	return 1;
}

public RutbeDuzenlemeBirlik(oyuncuid) {
	new rows, fields, query[512];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows) {
		for(new i = 0; i < rows; i ++) {
			format(query, sizeof(query),"UPDATE `oyuncular` SET `birlikrutbe` = 1 WHERE `isim` = '%s'", vericek_varchar(i, "isim"));
			mysql_query(mysqlB, query);
		}
	}
	OyuncuBilgi[oyuncuid][oBirlikRutbe] = BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikMaksRutbe];
	OyuncuKaydet(oyuncuid);
	return 1;
}

public Birlik_LevelYukselt(oyuncuid)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	new birlikid = OyuncuBilgi[oyuncuid][oBirlik];
	if(BirlikBilgi[birlikid][birlikMaksRutbe] != OyuncuBilgi[oyuncuid][oBirlikRutbe] && OyuncuBilgi[oyuncuid][oBirlikLider] != BirlikBilgi[birlikid][birlikID]) return HataMesaji(oyuncuid, "Bu seçeneði sadece birlik liderleri kullanabilir."), cmd_birlik(oyuncuid, "null");
	switch(BirlikBilgi[birlikid][birlikLevel]) {
		case 1: {
			if(rows < 3) return HataMesaji(oyuncuid, "Birlik level yükseltme gereksinimini karþýlayamýyorsun.");
			BirlikBilgi[birlikid][birlikLevel]++;
			Birlik_Kaydet(birlikid);
			SunucuMesaji(oyuncuid, "Birliðiniz level atladý, yeni level: %d", BirlikBilgi[birlikid][birlikLevel]);
		}
		case 2: {
			if(rows < 5) return HataMesaji(oyuncuid, "Birlik level yükseltme gereksinimini karþýlayamýyorsun.");
			BirlikBilgi[birlikid][birlikLevel]++;
			Birlik_Kaydet(birlikid);
			SunucuMesaji(oyuncuid, "Birliðiniz level atladý, yeni level: %d", BirlikBilgi[birlikid][birlikLevel]);
		}
		case 3: {
			if(rows < 7 && OyuncuBilgi[oyuncuid][oPara] < BIRLIK_LEVELUCRET) return HataMesaji(oyuncuid, "Birlik level yükseltme gereksinimini karþýlayamýyorsun.");

			if(rows < 7) ParaEkle(oyuncuid, -BIRLIK_LEVELUCRET), OyuncuKaydet(oyuncuid);

			BirlikBilgi[birlikid][birlikLevel]++;
			Birlik_Kaydet(birlikid);
			SunucuMesaji(oyuncuid, "Birliðiniz level atladý, yeni level: %d", BirlikBilgi[birlikid][birlikLevel]);
		}
		case 4: {
			if(rows < 10 && OyuncuBilgi[oyuncuid][oPara] < BIRLIK_LEVELUCRET) return HataMesaji(oyuncuid, "Birlik level yükseltme gereksinimini karþýlayamýyorsun.");

			if(rows < 10) ParaEkle(oyuncuid, -BIRLIK_LEVELUCRET), OyuncuKaydet(oyuncuid);

			BirlikBilgi[birlikid][birlikLevel]++;
			Birlik_Kaydet(birlikid);
			SunucuMesaji(oyuncuid, "Birliðiniz level atladý, yeni level: %d", BirlikBilgi[birlikid][birlikLevel]);
		}
		case 5..9: {
		    if(rows < 15 && OyuncuBilgi[oyuncuid][oPara] < BIRLIK_LEVELUCRET) return HataMesaji(oyuncuid, "Birlik level yükseltme gereksinimini karþýlayamýyorsun.");

			if(rows < 15) ParaEkle(oyuncuid, -BIRLIK_LEVELUCRET), OyuncuKaydet(oyuncuid);

			BirlikBilgi[birlikid][birlikLevel]++;
			Birlik_Kaydet(birlikid);
			SunucuMesaji(oyuncuid, "Birliðiniz level atladý, yeni level: %d", BirlikBilgi[birlikid][birlikLevel]);
		}
	}
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) birlik levelini yükseltti. (%d / birlik: %s).", Tarih(), oyuncu_isim, OyuncuBilgi[oyuncuid][oID], BirlikBilgi[birlikid][birlikLevel], BirlikBilgi[birlikid][birlikAd]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
	return 1;
}

public Maske_Isim(oyuncuid)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Sonuç bulunamadý.");

	SunucuMesaji(oyuncuid, "Girilen maske ID'sinin sahibi: %s(#%d)", vericek_varchar(0, "isim"), vericek_int(0, "MaskeID"));
	return 1;
}

public BagajSifirla()
{
	new rows, fields, sorgu[512];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return 0;

    for(new i = 0; i != rows; i ++) format(sorgu, sizeof(sorgu), "DELETE FROM `bagaj` WHERE `esyaID` = '%d'", vericek_int(i, "esyaID")), mysql_tquery(mysqlB, sorgu);
	return 1;
}

public Hapis_Sicil(playerid, oyuncuid)
{
	new rows, fields, sorgu[512], cezatarih[36], emote[96], dakika = 0;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

    if(!rows) return HataMesaji(playerid, "Bu oyuncunun aranma kaydý yok, hapise atýlamaz.");
	format(cezatarih, 36, Tarih());

    for(new i = 0; i != rows; i ++) {
		format(sorgu, sizeof(sorgu), "INSERT INTO `sicilkaydi` (`Oyuncu`, `Memur`, `Tarih`, `Sebep`) VALUES('%s', '%s','%s', '%s')", vericek_varchar(i, "Oyuncu"), vericek_varchar(i, "Memur"), cezatarih, vericek_varchar(i, "Suc"));
		mysql_tquery(mysqlB, sorgu);
		for(new s = 0; s != MAKSIMUM_SUC; s++) if(SucListesi[s][sKullanimda] && !strcmp(SucListesi[s][sIsim], vericek_varchar(i, "Suc"), true)) dakika += SucListesi[s][sDakika];
	}
	format(sorgu, sizeof(sorgu), "SELECT * FROM aranmakayitlari WHERE Oyuncu = '%s'", vericek_varchar(0, "Oyuncu"));
	mysql_tquery(mysqlB, sorgu, "MDC_AranmaSil", "d", INVALID_PLAYER_ID);
	format(emote, sizeof(emote), "%s isimli kiþiyi hapishane görevlilerine teslim etti.", OyuncuIsim(oyuncuid));
	cmd_ado(playerid, emote);
	BirlikMesaji(OyuncuBilgi[playerid][oBirlik], RENK_BIRLIK, "[BIRLIK] %s %s, %s isimli kiþiyi hapse attý.", OyuncuRutbeAdi(playerid), OyuncuIsim(playerid), OyuncuIsim(oyuncuid));
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME], hedef_isim[MAX_PLAYER_NAME];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	GetPlayerName(oyuncuid, hedef_isim, sizeof(hedef_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d), %s(%d) adlý kiþiyi hapise attý.", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oID], hedef_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
	SilahlariSifirla(oyuncuid);
	OyuncuBilgi[oyuncuid][oHapisSure][1] = dakika * 60;
	OyuncuBilgi[oyuncuid][oHapisID] = TutuklamaNoktasi[Tutuklama_Yakin(playerid)][tID];
	ICHapiseAt(oyuncuid, OyuncuBilgi[oyuncuid][oHapisID]);
	if(OyuncuBilgi[oyuncuid][oAvukatLisans] == 1) {
		UyariMesaji(oyuncuid, "Suç iþlediðiniz için otomatik olarak avukatlýk lisansýnýz iptal edildi.");
		OyuncuBilgi[oyuncuid][oAvukatLisans] = 0;
	}
	return 1;
}

public Gorev_Sorgula(playerid)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(playerid, "Bir hata oluþtu.");

	new mesaj[256];
	SetPVarInt(playerid, "dialog_admingorev", vericek_int(0, "forumID"));
	format(mesaj, sizeof(mesaj), "Girilen kiþinin görevlerini girin:\n\nÞu anki görevleri: %s", vericek_varchar(0, "Gorev"));
    DialogGoster(playerid, DIALOG_GOREVDUZENLE, DIALOG_STYLE_INPUT, "Görev Düzenle", mesaj, "Seç", "Kapat");
	return 1;
}

public Bildirim_Kontrol(oyuncuid)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return 0;

	UyariMesaji(oyuncuid, "%s adet okunmamýþ bildirimin var, \"/ayarlar\" komutuyla görüntüleyebilirsiniz.", NumaraFormati(rows, ""));
	return 1;
}

public Bildirim_Ekle(oyuncuid, sebep[]) {
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Oyuncu bulunamadý.");

	new sorgu[512], id, isim[MAX_PLAYER_NAME + 1];
	id = vericek_int(0, "ID");
	format(isim, sizeof(isim), "%s", vericek_varchar(0, "isim"));
	format(sorgu, sizeof(sorgu), "INSERT INTO `bildirimler` (`Eklenen`,`Sebep`, `Tarih`, `Ekleyen`) VALUES ('%s', '%s', '%s', '%s')", isim, sebep, Tarih(), OyuncuBilgi[oyuncuid][oAdminNick]);
	mysql_query(mysqlB, sorgu);
	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] %s, %s adlý kiþiye bildiri ekledi. Sebep: %s", Tarih(), OyuncuBilgi[oyuncuid][oAdminNick], isim, sebep);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/admin_log.txt", "%s", log_icerik);
	SunucuMesaji(oyuncuid, "Bildirim eklendi.");
	foreach(new i : Player) if(OyuncuBilgi[i][oID] == id) return SunucuMesaji(i, "Yeni bir bildiriminiz var, \"/ayarlar\" komutunu kullanarak görüntüleyebilirsiniz.");
	return 1;
}

public Soyadi_Liste(oyuncuid)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Kilitli soyadýn yok.");

	new bilgi[1024];
	format(bilgi, sizeof(bilgi), "ID\tSoyadý\tTarih\tÝzin (Hesap ID)\n");
	for(new i = 0; i < rows; i ++) format(bilgi, sizeof(bilgi), "%s%d\t%s\t%s\t%d\n", bilgi, vericek_int(i, "ID"), vericek_varchar(i, "Soyad"), vericek_varchar(i, "Tarih"), vericek_int(i, "izin"));
	DialogGoster(oyuncuid, DIALOG_SOYADI_LISTE, DIALOG_STYLE_TABLIST_HEADERS, "Soyadý Ýzin - Seçim", bilgi, "Seç", "Kapat");
	return 1;
}

public Arac_CezaListele(oyuncuid)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Bu plakaya ait bir ceza yok.");

	new bilgi[1024];
	format(bilgi, sizeof(bilgi), "ID\tTarih\tSebep\tMiktar\n");
	for(new i = 0; i < rows; i ++) format(bilgi, sizeof(bilgi), "%s%d\t%s\t%s\t%s\n", bilgi, vericek_int(i, "ID"), vericek_varchar(i, "Tarih"), vericek_varchar(i, "Sebep"), NumaraFormati(vericek_int(i, "Ucret")));
	DialogGoster(oyuncuid, DIALOG_ACEZALAR, DIALOG_STYLE_TABLIST_HEADERS, "Cezalar", bilgi, "Öde", "Kapat");
	return 1;
}

public IslemGecmisi(oyuncuid)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Hesabýnýzdan daha önce iþlem yapýlmamýþ.");

	new bilgi[10240], renk;
	format(bilgi, sizeof(bilgi), "{FFFFFF}Ýþlem\t\t{FFFFFF}Tarih\n");
	for(new i = 0; i < rows; i ++) {
	    switch(vericek_int(i, "Tur")) {
			case 1: renk = 0xB70000FF;
			case 2: renk = 0x33AA33FF;
			default: renk = 0xAFAFAFFF;
	    }
		format(bilgi, sizeof(bilgi), "%s{%06x}%s\t\t{FFFFFF}%s\n", bilgi, renk >>> 8, vericek_varchar(i, "Islem"), vericek_varchar(i, "Tarih"));
	}
	DialogGoster(oyuncuid, 0, DIALOG_STYLE_TABLIST_HEADERS, "ZCN Banka - Ýþlem Geçmiþi (Son 100 Ýþlem)", bilgi, "Kapat", "");
	return 1;
}

public BildirimKayitlari(oyuncuid)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Bildiriminiz yok.");

	new bilgi[1024];
	format(bilgi, sizeof(bilgi), "ID\tEkleyen\tTarih\n");
	for(new i = 0; i < rows; i ++) format(bilgi, sizeof(bilgi), "%s%d\t%s\t%s\n", bilgi, vericek_int(i, "ID"), vericek_varchar(i, "Ekleyen"), vericek_varchar(i, "Tarih"));
	DialogGoster(oyuncuid, DIALOG_BILDIRIMLER, DIALOG_STYLE_TABLIST_HEADERS, "Bildirimler", bilgi, "Seç", "Kapat");
	return 1;
}

public MDC_CezaSorgula(oyuncuid)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Bu araca ait bir ceza kaydý yok."), cmd_mdc(oyuncuid, "");

	new bilgi[1024];
	format(bilgi, sizeof(bilgi), "Tarih\tEkleyen\tSebep\tDurum\n");
	for(new i = 0; i < rows; i ++) format(bilgi, sizeof(bilgi), "%s{FFFFFF}%s\t%s\t%s\t%s\n", bilgi, vericek_int(i, "Tarih"), vericek_varchar(i, "Ekleyen"), vericek_varchar(i, "Sebep"), (vericek_int(i, "Durum") == 0) ? ("{B70000}Ödenmemiþ") : ("{33aa33}Ödenmiþ"));
	DialogGoster(oyuncuid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Ceza Sorgulama", bilgi, "Kapat", "");
	return 1;
}

public BildirimSorgula(oyuncuid)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Bir sorun oluþtu.");

	new bilgi[1024];
    OyuncuBilgi[oyuncuid][oBildirim] = vericek_int(0, "ID");

	format(bilgi, sizeof(bilgi), "{AFAFAF}Ekleyen: {FFFFFF}%s\n{AFAFAF}Tarih: {FFFFFF}%s\n\n{AFAFAF}Bildirim: {FFFFFF}%s", vericek_varchar(0, "Ekleyen"), vericek_varchar(0, "Tarih"), vericek_varchar(0, "Sebep"));
	DialogGoster(oyuncuid, DIALOG_BILDIRIMICERIK, DIALOG_STYLE_MSGBOX, "Bildirim", bilgi, "Sil", "Kapat");

	format(bilgi, sizeof(bilgi),"UPDATE `bildirimler` SET `Okundu` = '1' WHERE `ID` = '%d'", vericek_int(0, "ID"));
	mysql_query(mysqlB, bilgi);
	return 1;
}

public RadarGuncelle(aracid)
{
    	new id = GetVehicleInfrontID(aracid);
        if(id < 0)
        {
			TextDrawSetString(DashcamText[aracid][2], "PLAKA: ~w~N/A");
			TextDrawSetString(DashcamText[aracid][1], "MODEL: ~w~N/A");
			TextDrawSetString(DashcamText[aracid][3], "HIZ: ~w~N/A");
        }
        else
        {
			new str[256], ids = Arac_IDBul(id);
			format(str, sizeof(str), "PLAKA: ~w~%s", AracBilgi[ids][aracPlaka]);
			TextDrawSetString(DashcamText[aracid][2], str);
			format(str, sizeof(str), "MODEL: ~w~%s", AracModel(GetVehicleModel(id)));
			TextDrawSetString(DashcamText[aracid][1], str);
			format(str, sizeof(str), "HIZ: ~w~%d", AracHiz(id));
			TextDrawSetString(DashcamText[aracid][3], str);
        }
        foreach(new i : Player) if(IsPlayerInVehicle(i, aracid)) for(new ia; ia < 4; ia++) TextDrawShowForPlayer(i, DashcamText[aracid][ia]);
        return 1;
}

public AracSatildi(sahip, fiyat, model)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return 0;

	new sebep[256], sorgu[256], vergilifiyat = 3 * fiyat / 100;
	format(sebep, sizeof(sebep), "Satýlýða çýkardýðýnýz %s model aracýnýz satýldý! %s banka hesabýnýza eklendi. (Vergi: %s)", AracModel(model), NumaraFormati(fiyat), NumaraFormati(vergilifiyat));
	format(sorgu, sizeof(sorgu), "INSERT INTO `bildirimler` (`Eklenen`, `Sebep`, `Tarih`, `Ekleyen`) VALUES ('%s', '%s', '%s', '%s')", vericek_varchar(0, "isim"), sebep, Tarih(), "Sistem");
	mysql_tquery(mysqlB, sorgu);
	OfflineParaVer(sahip, fiyat);
	return 1;
}

public EvSatildi(sahip, id, fiyat)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return 0;

	new sebep[256], sorgu[256];
	new vergilifiyat = 3 * EvBilgi[id][evSatilik] / 100;
	format(sebep, sizeof(sebep), "Satýlýða çýkardýðýnýz %d ID'li eviniz %s fiyatýna satýldý. %s3 vergi kesildi.", id, NumaraFormati(fiyat), "%%");
	format(sorgu, sizeof(sorgu), "INSERT INTO `bildirimler` (`Eklenen`, `Sebep`, `Tarih`, `Ekleyen`) VALUES ('%s', '%s', '%s', '%s')", vericek_varchar(0, "isim"), sebep, Tarih(), "Sistem");
	mysql_tquery(mysqlB, sorgu);
	OfflineParaVer(sahip, fiyat - vergilifiyat);
	return 1;
}

public Kamyoncu_Yukle(oyuncuid, tur)
{
	if(!IsPlayerInAnyVehicle(oyuncuid) || GetPlayerState(oyuncuid) != PLAYER_STATE_DRIVER) return HataMesaji(oyuncuid, "Bir sorun oluþtu.");
	if(OyuncuBilgi[oyuncuid][oGiris] == false) return HataMesaji(oyuncuid, "Giriþ yapmadan komut kullanamazsýn.");
	if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0) return HataMesaji(oyuncuid, "Hapisteyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[oyuncuid][oYarali] > 0) return HataMesaji(oyuncuid, "Yaralýyken bu komutu kullanamazsýn.");
	if(OyuncuBilgi[oyuncuid][oYaris] != -1) return HataMesaji(oyuncuid, "Yarýþtayken bunu yapamazsýn.");
	if(OyuncuBilgi[oyuncuid][oKamyoncu] != -1) return HataMesaji(oyuncuid, "Yük taþýrken bunu yapamazsýn.");
    if(OyuncuBilgi[oyuncuid][oTemizlikCP] > 0) return HataMesaji(oyuncuid, "Temizlik yaparken bunu yapamazsýn.");
    // if(OyuncuBilgi[oyuncuid][oMateryalTasiyor] == true) return HataMesaji(oyuncuid, "Paket taþýrken bunu yapamazsýn.");
	if(OyuncuBilgi[oyuncuid][oMarker] > -1) return HataMesaji(oyuncuid, "Konum araþtýrýrken bunu yapamazsýn.");
	if(OyuncuBilgi[oyuncuid][oKonum] != -1) return HataMesaji(oyuncuid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[oyuncuid][oLokasyon] != -1) return HataMesaji(oyuncuid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[oyuncuid][oAdres] != -1) return HataMesaji(oyuncuid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[oyuncuid][objeLokasyon] != -1) return HataMesaji(oyuncuid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[oyuncuid][oGPSArac] != INVALID_VEHICLE_ID) return HataMesaji(oyuncuid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[oyuncuid][oIsaretliKonum] != 0) return HataMesaji(oyuncuid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
	if(OyuncuBilgi[oyuncuid][oIsaretliMeslek] != -1) return HataMesaji(oyuncuid, "Þu anda bunu yapamazsýn. (\"/cpsifirla\")");
    
	KamyoncuHileKontrol[GetPlayerVehicleID(oyuncuid)] = gettime() + 30;
	TogglePlayerControllable(oyuncuid, true);
	OyuncuBilgi[oyuncuid][oKamyoncu] = tur;
	KamyoncuYuk[GetPlayerVehicleID(oyuncuid)] = tur;
	if(tur == 0) {
		switch(random(5)) {
		    case 0: SetPlayerCheckpoint(oyuncuid, 1116.4115, -926.6071, 43.1797, 5.0), KamyoncuCP[GetPlayerVehicleID(oyuncuid)] = 0;
		    case 1: SetPlayerCheckpoint(oyuncuid, 994.1617, -1350.8613, 13.3562, 5.0), KamyoncuCP[GetPlayerVehicleID(oyuncuid)] = 1;
		    case 2: SetPlayerCheckpoint(oyuncuid, 1355.0039, -1749.1360, 13.3728, 5.0), KamyoncuCP[GetPlayerVehicleID(oyuncuid)] = 2;
		    case 3: SetPlayerCheckpoint(oyuncuid, 2151.4697, -1176.2104, 23.8203, 5.0), KamyoncuCP[GetPlayerVehicleID(oyuncuid)] = 3;
		    case 4: SetPlayerCheckpoint(oyuncuid, 1997.1281,-1275.4493,23.8203, 5.0), KamyoncuCP[GetPlayerVehicleID(oyuncuid)] = 4;
		    default: SetPlayerCheckpoint(oyuncuid, 2411.2388, -1485.9032, 23.8281, 5.0), KamyoncuCP[GetPlayerVehicleID(oyuncuid)] = 0;
		}
	}
	else if(tur == 1) SetPlayerCheckpoint(oyuncuid, 814.9379, -1551.8552, 13.5536, 5.0), KamyoncuCP[GetPlayerVehicleID(oyuncuid)] = 8;
	else if(tur == 2) SetPlayerCheckpoint(oyuncuid, 2769.8667 ,-1615.1829, 10.9219, 5.0), KamyoncuCP[GetPlayerVehicleID(oyuncuid)] = 9;
	SunucuMesaji(oyuncuid, "Ürünleri yükledin, haritanda çýkan noktaya teslim etmelisin.");
	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s(%d) mesleðe baþladý.", SaniyeliTarih(), oyuncu_isim, OyuncuBilgi[oyuncuid][oID]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/kamyoncu.txt", "%s", log_icerik);
	if(tur == 1) UyariMesaji(oyuncuid, "Aracýnýza Silah yüklendi, polislere yakalanýrsanýz hapise atýlabilirsiniz.");
	if(tur == 2) UyariMesaji(oyuncuid, "Aracýnýza uyuþturucu yüklendi, polislere yakalanýrsanýz hapise atýlabilirsiniz.");
	return 1;
}

public TamirSifirla(id, oyuncuid)
{
	if(id == -1 || ModifiyeNoktasi[id][modifiyeKullanimda] == false) return 0;

	if(ModifiyeNoktasi[id][modifiyeKullanan] == oyuncuid) ModifiyeNoktasi[id][modifiyeKullanan] = INVALID_PLAYER_ID;
	return 1;
}

public Market_Envanter(oyuncuid)
{
	if(!IsPlayerConnected(oyuncuid)) return false;
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Marketten hiç ürün satýn almamýþsýn."), cmd_oocmarket(oyuncuid, "");
	new sayi = 0, icerik[1024], baslik[24 + MAX_PLAYER_NAME];
	format(icerik, sizeof(icerik), "Ürün\t\tAlým Tarihi\n");
	for(new i = 0; i < rows; i ++) format(icerik, sizeof(icerik), "%s%s\t\t%s\n", icerik, vericek_varchar(i, "Urun"), vericek_varchar(i, "Tarih")), sayi++;
	new isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, isim, sizeof(isim));
	for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
	format(baslik, sizeof(baslik), "%s - Market Envanteri (%s ürün)", isim, NumaraFormati(sayi, ""));
	DialogGoster(oyuncuid, DIALOG_OOCMARKET_ENVANTER, DIALOG_STYLE_TABLIST_HEADERS, baslik, icerik, "Kullan", "<< Geri");
	return 1;
}

public Birlik_Kov(oyuncuid)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Bir sorun oluþtu."), cmd_birlik(oyuncuid, "");

	new sqlid = vericek_int(0, "ID"), rutbe = vericek_int(0, "birlikrutbe"), birlik = vericek_int(0, "birlik"), isimcek[MAX_PLAYER_NAME + 1];
	format(isimcek, sizeof(isimcek), "%s", vericek_varchar(0, "isim"));
	if(OyuncuBilgi[oyuncuid][oBirlikRutbe] < rutbe) return HataMesaji(oyuncuid, "Oyuncunun rütbesi senden büyük, birlikten atamazsýn."), cmd_birlik(oyuncuid, "");
	if(OyuncuBilgi[oyuncuid][oBirlikSQLID] != birlik || birlik == 0) return HataMesaji(oyuncuid, "Oyuncu senin birliðinde deðil."), cmd_birlik(oyuncuid, "");
	if(BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikMaksRutbe] == rutbe) return HataMesaji(oyuncuid, "Birlik lideri birlikten atýlamaz."), cmd_birlik(oyuncuid, "");

	new sorgu[144];
	format(sorgu, sizeof(sorgu), "UPDATE `oyuncular` SET `birlik` = '0', `birlikrutbe` = '0', `Birim` = '0', `GKiyafet` = '0', `isbasi` = '0' WHERE `ID` = '%d'", sqlid);
	mysql_query(mysqlB, sorgu);
	format(sorgu,sizeof(sorgu),"SELECT * FROM aksesuarlar WHERE Sahip = '%d'", sqlid);
	mysql_tquery(mysqlB, sorgu, "PD_AksesuarSifirla");

	new log_icerik[144], oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
	format(log_icerik, sizeof(log_icerik), "[%s] %s, %s adlý kiþiyi birlikten attý. (birlik: %s)", Tarih(), oyuncu_isim, OyuncuBilgi[oyuncuid][oID], isimcek, BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikAd]);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/birlik.txt", "%s", log_icerik);
	for(new i = 0, len = strlen(isimcek); i < len; i ++) if(isimcek[i] == '_') isimcek[i] = ' ';
	SunucuMesaji(oyuncuid, "%s adlý kiþiyi offline olarak birlikten attýn.", isimcek);
	return 1;
}

public Forum_ID(oyuncuid)
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Sonuç bulunamadý.");

	for(new i = 0; i < rows; i ++) {
		SendClientMessageEx(oyuncuid, RENK_SERVER, "[HESAP]: {FFFFFF}Ýsim: %s - Level: %d", vericek_varchar(i, "isim"), vericek_int(i, "Level"));
	}
	return 1;
}

public PD_AksesuarSifirla()
{
	new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return 0;

	new sorgu[144];
	for(new i = 0; i < rows; i ++) {
		for(new c = 0; c != sizeof(PolisAksesuar); c++) if(vericek_int(i, "Model") == PolisAksesuar[c][0])
		{
			format(sorgu, sizeof(sorgu), "DELETE FROM `aksesuarlar` WHERE `ID` = '%d'", vericek_int(i, "ID"));
			mysql_query(mysqlB, sorgu);
		}
	}
	return 1;
}

public FCNPC_OnDeath(npcid, killerid, reason)
{
	foreach(new i : Petler) if(PetBilgi[i][NPCID] == npcid)
	{
	    PetBilgi[i][petYarali] = 1;
	    SetTimerEx("Pet_Kaldir", 1000, false, "i", i);
	}
	return 1;
}

public AracaBindir(playerid, aracid, koltuk) return PutPlayerInVehicle(playerid, aracid, koltuk);

public fcreate(filename[])
{
    if(fexist(filename)){return false;}
    new File:fhandle = fopen(filename,io_write);
    fclose(fhandle);
    return true;
}

stock Barikat_Yenile(barikatid)
{
	if(barikatid != -1 && BarikatBilgi[barikatid][barikatKullanimda])
	{
        if(IsValidDynamic3DTextLabel(BarikatBilgi[barikatid][barikatText])) DestroyDynamic3DTextLabel(BarikatBilgi[barikatid][barikatText]), BarikatBilgi[barikatid][barikatText] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicObject(BarikatBilgi[barikatid][barikatObje])) DestroyDynamicObject(BarikatBilgi[barikatid][barikatObje]), BarikatBilgi[barikatid][barikatObje] = INVALID_OBJECT_ID;

		new bilgi[96];
		format(bilgi, sizeof(bilgi), "BARIKAT\nID: {FFFFFF}%d", barikatid);
		BarikatBilgi[barikatid][barikatText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, BarikatBilgi[barikatid][barikatPos][0], BarikatBilgi[barikatid][barikatPos][1], BarikatBilgi[barikatid][barikatPos][2] + 3.0, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
        BarikatBilgi[barikatid][barikatObje] = CreateDynamicObject(BarikatBilgi[barikatid][barikatModel], BarikatBilgi[barikatid][barikatPos][0], BarikatBilgi[barikatid][barikatPos][1], BarikatBilgi[barikatid][barikatPos][2], BarikatBilgi[barikatid][barikatPos][3], BarikatBilgi[barikatid][barikatPos][4], BarikatBilgi[barikatid][barikatPos][5], 0, 0);
	}
	return 1;
}

stock Fabrika_Yenile(fabrikaid)
{
	if(fabrikaid != -1 && FabrikaBilgi[fabrikaid][fKullanimda])
	{
		if(IsValidDynamic3DTextLabel(FabrikaBilgi[fabrikaid][fText])) DestroyDynamic3DTextLabel(FabrikaBilgi[fabrikaid][fText]), FabrikaBilgi[fabrikaid][fText] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicPickup(FabrikaBilgi[fabrikaid][fPickup])) DestroyDynamicPickup(FabrikaBilgi[fabrikaid][fPickup]), FabrikaBilgi[fabrikaid][fPickup] = INVALID_PICKUP_ID;

		new bilgi[320];
		bilgi[0] = 0;
		format(bilgi, sizeof(bilgi), "ID: {FFFFFF}%d\n{FFFFFF}%s\n{a9c4e4}Sahip: {FFFFFF}%s\n{a9c4e4}Ürün: {FFFFFF}%s\n{a9c4e4}Stok: {FFFFFF}%s", fabrikaid, FabrikaBilgi[fabrikaid][fabrikaAd], FabrikaBilgi[fabrikaid][fSahip], FabrikaBilgi[fabrikaid][fUrun], NumaraFormati(FabrikaBilgi[fabrikaid][fKapasite], ""));
		FabrikaBilgi[fabrikaid][fText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, FabrikaBilgi[fabrikaid][fPos][0], FabrikaBilgi[fabrikaid][fPos][1], FabrikaBilgi[fabrikaid][fPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
        FabrikaBilgi[fabrikaid][fPickup] = CreateDynamicPickup(1239, 23, FabrikaBilgi[fabrikaid][fPos][0], FabrikaBilgi[fabrikaid][fPos][1], FabrikaBilgi[fabrikaid][fPos][2], 0, 0);
	}
	return 1;
}

stock Ev_Yenile(evid)
{
	new bilgi[1408], evdurum[128], model;
	bilgi[0] = 0;
	if(evid != -1 && EvBilgi[evid][evKullanimda])
	{
		if(IsValidDynamic3DTextLabel(EvBilgi[evid][evText])) DestroyDynamic3DTextLabel(EvBilgi[evid][evText]), EvBilgi[evid][evText] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicPickup(EvBilgi[evid][evPickup])) DestroyDynamicPickup(EvBilgi[evid][evPickup]), EvBilgi[evid][evPickup] = INVALID_PICKUP_ID;

		switch(EvBilgi[evid][evDurum]) {
		    case 1: model = 1273, format(evdurum, sizeof(evdurum), "{33AA33}Kilitsiz");
		    case 2: model = 19523, format(evdurum, sizeof(evdurum), "{B70000}Kilitli");
			case 3: model = 19524, format(evdurum, sizeof(evdurum), "{E0AB2F}Bakým / Tadilat");
			case 4: model = 19522, format(evdurum, sizeof(evdurum), "{B70000}Mühürlü");
			case 5: model = 1273, format(evdurum, sizeof(evdurum), "{BA33D1}Kapý Kýrýlmýþ");
		}
		if(EvBilgi[evid][evSahip] == 0) {
		    model = 1273;
			format(bilgi, sizeof(bilgi), "{FF8000}%d, %s\n\n\n{a9c4e4}ID: {FFFFFF}%d\n{a9c4e4}Fiyat: {6596d8}%s\n{a9c4e4}Durum: {6596d8}Satýlýk", EvBilgi[evid][evID], EvBilgi[evid][evAdres], evid, NumaraFormati(EvBilgi[evid][evFiyat]));
		}
		else if(EvBilgi[evid][evSahip] > 0) {
		    if(isnull(EvBilgi[evid][evSahipIsim])) return evisimbul(evid);

			if(EvBilgi[evid][evSatilik] == 0) format(bilgi, sizeof(bilgi), "{FF8000}%d, %s\n{FFFFFF}Bu ev {a9c4e4}%s{FFFFFF} adýna kayýtlýdýr.\n\n{a9c4e4}ID: {FFFFFF}%d\n{a9c4e4}Level: {FFFFFF}%d\n{a9c4e4}Durum: %s", EvBilgi[evid][evID], EvBilgi[evid][evAdres], EvBilgi[evid][evSahipIsim], evid, EvBilgi[evid][evLevel], evdurum);
			else if(EvBilgi[evid][evSatilik] != 0) format(bilgi, sizeof(bilgi), "{FF8000}%d, %s\n{FFFFFF}Bu ev {a9c4e4}%s{FFFFFF} adýna kayýtlýdýr.\n\n{a9c4e4}ID: {FFFFFF}%d\n{a9c4e4}Level: {FFFFFF}%d\n{a9c4e4}Durum: Satýlýk {33aa33}(%s)", EvBilgi[evid][evID], EvBilgi[evid][evAdres], EvBilgi[evid][evSahipIsim], evid, EvBilgi[evid][evLevel], NumaraFormati(EvBilgi[evid][evSatilik]));
		}
		if(EvBilgi[evid][evKiralik] == 1 && EvBilgi[evid][evKiraci] == 0 && EvBilgi[evid][evSatilik] == 0) format(bilgi, sizeof(bilgi), "%s\n{a9c4e4}Bu ev kiralýk!\n{a9c4e4}Kira Ücreti: {33AA33}%s", bilgi, NumaraFormati(EvBilgi[evid][evKiraUcret]));
		else if(EvBilgi[evid][evKiralik] == 1 && EvBilgi[evid][evKiraci] > 0 && EvBilgi[evid][evSatilik] == 0) {
		    if(isnull(EvBilgi[evid][evKiraciIsim])) return evkiraciisimbul(evid);
			format(bilgi, sizeof(bilgi), "%s\n{a9c4e4}Kiracý: {FFFFFF}%s", bilgi, EvBilgi[evid][evKiraciIsim]);
		}
		EvBilgi[evid][evText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, EvBilgi[evid][evPos][0], EvBilgi[evid][evPos][1], EvBilgi[evid][evPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EvBilgi[evid][evDisVW], EvBilgi[evid][evDisInt]);
        if(model == 19471) EvBilgi[evid][evPickup] = CreateDynamicPickup(model, 23, EvBilgi[evid][evPos][0], EvBilgi[evid][evPos][1], EvBilgi[evid][evPos][2] - 0.7, EvBilgi[evid][evDisVW], EvBilgi[evid][evDisInt]);
        else EvBilgi[evid][evPickup] = CreateDynamicPickup(model, 23, EvBilgi[evid][evPos][0], EvBilgi[evid][evPos][1], EvBilgi[evid][evPos][2], EvBilgi[evid][evDisVW], EvBilgi[evid][evDisInt]);
	}
	return 1;
}

stock evkiraciisimbul(evid)
{
	if(EvBilgi[evid][evKiraci] > 0) {
		static query[256];
		format(query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", EvBilgi[evid][evKiraci]);
		mysql_tquery(mysqlB, query, "evkiraciisimarat", "d", evid);
	}
	return 1;
}

stock evisimbul(evid)
{
	if(EvBilgi[evid][evSahip] > 0) {
		new sorgu[144];
		format(sorgu, sizeof(sorgu), "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", EvBilgi[evid][evSahip]);
		return mysql_tquery(mysqlB, sorgu, "evisimarat", "d", evid);
	}
	else format(EvBilgi[evid][evSahipIsim], 32, "Yok"), Ev_Yenile(evid);
	return 1;
}

stock Isyeri_Yenile(isyeriid)
{
	if(isyeriid != -1 && IsyeriBilgi[isyeriid][isyeriKullanimda])
	{
	    new bilgi[2048], isyeridurum[128], model;
		if(IsValidDynamic3DTextLabel(IsyeriBilgi[isyeriid][isyeriText])) DestroyDynamic3DTextLabel(IsyeriBilgi[isyeriid][isyeriText]), IsyeriBilgi[isyeriid][isyeriText] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicPickup(IsyeriBilgi[isyeriid][isyeriPickup])) DestroyDynamicPickup(IsyeriBilgi[isyeriid][isyeriPickup]), IsyeriBilgi[isyeriid][isyeriPickup] = INVALID_PICKUP_ID;

		switch(IsyeriBilgi[isyeriid][isyeriDurum]) {
		    case 1: isyeridurum = "{33AA33}Kilitsiz";
		    case 2: isyeridurum = "{B70000}Kilitli";
			case 3: isyeridurum = "{E0AB2F}Bakým / Tadilat";
		}
		switch(IsyeriBilgi[isyeriid][isyeriTur]) {
		    case 1, 9: model = 19133;
		    case 2: model = 1314;
		    case 3: model = 19893;
		    case 4: model = 18977;
		    case 5: model = 19274;
		    case 6: model = 1240;
		    case 7: model = 1275;
		    case 8: model = 19159;
		    case 10: model = 352;
		    case 11, 12: model = 2485;
		    case 13: model = 19520;
		    case 14: model = 1609;
		    case 15: model = 1212;
		}
		if(IsyeriBilgi[isyeriid][isyeriSahip] < 1 && IsyeriBilgi[isyeriid][isyeriSahip] != -1) {
			format(bilgi, sizeof(bilgi), "Ýþyeri ID: {FFFFFF}%d\n{a9c4e4}Kapý Numarasý: {FFFFFF}%d\n{a9c4e4}Ad: {FFFFFF}%s\n{a9c4e4}Ýþyeri Türü: {FFFFFF}%s\n{a9c4e4}Fiyat: {33AA33}%s\n{a9c4e4}Durum: {33AA33}Satýlýk",
				isyeriid,
				IsyeriBilgi[isyeriid][isyeriID] + MAKSIMUM_EV,
				IsyeriBilgi[isyeriid][isyeriAd],
				Isyeri_TurAdi(isyeriid),
				NumaraFormati(IsyeriBilgi[isyeriid][isyeriFiyat])
			);
		}
		else if(IsyeriBilgi[isyeriid][isyeriSahip] > 0 || IsyeriBilgi[isyeriid][isyeriSahip] == -1) {
		    if(isnull(IsyeriBilgi[isyeriid][isyeriSahipIsim])) return isyeriisimbul(isyeriid);
		    if(IsyeriBilgi[isyeriid][iGirisUcret] >= 1)
		    {
			format(bilgi, sizeof(bilgi), "Ýþyeri ID: {FFFFFF}%d\n{a9c4e4}Kapý Numarasý: {FFFFFF}%d\n{a9c4e4}Ad: {FFFFFF}%s\n{a9c4e4}Sahip: {FFFFFF}%s\n{a9c4e4}Giriþ Ücreti: {33AA33}%s\n{a9c4e4}Ýþyeri Türü: {FFFFFF}%s\n{a9c4e4}Durum: %s",
				isyeriid,
				IsyeriBilgi[isyeriid][isyeriID] + MAKSIMUM_EV,
				IsyeriBilgi[isyeriid][isyeriAd],
				IsyeriBilgi[isyeriid][isyeriSahipIsim],
				NumaraFormati(IsyeriBilgi[isyeriid][iGirisUcret]),
				Isyeri_TurAdi(isyeriid),
				isyeridurum
			);
			}
			else {
			format(bilgi, sizeof(bilgi), "Ýþyeri ID: {FFFFFF}%d\n{a9c4e4}Kapý Numarasý: {FFFFFF}%d\n{a9c4e4}Ad: {FFFFFF}%s\n{a9c4e4}Sahip: {FFFFFF}%s\n{a9c4e4}Ýþyeri Türü: {FFFFFF}%s\n{a9c4e4}Durum: %s",
				isyeriid,
				IsyeriBilgi[isyeriid][isyeriID] + MAKSIMUM_EV,
				IsyeriBilgi[isyeriid][isyeriAd],
				IsyeriBilgi[isyeriid][isyeriSahipIsim],
				Isyeri_TurAdi(isyeriid),
				isyeridurum
			);
			}
		}
		IsyeriBilgi[isyeriid][isyeriText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, IsyeriBilgi[isyeriid][isyeriPos][0], IsyeriBilgi[isyeriid][isyeriPos][1], IsyeriBilgi[isyeriid][isyeriPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, IsyeriBilgi[isyeriid][isyeriDisVW], IsyeriBilgi[isyeriid][isyeriDisInt]);
        IsyeriBilgi[isyeriid][isyeriPickup] = CreateDynamicPickup(model, 23, IsyeriBilgi[isyeriid][isyeriPos][0], IsyeriBilgi[isyeriid][isyeriPos][1], IsyeriBilgi[isyeriid][isyeriPos][2], IsyeriBilgi[isyeriid][isyeriDisVW], IsyeriBilgi[isyeriid][isyeriDisInt]); // + 0.7
	}
	return 1;
}

stock isyeriisimbul(isyeriid)
{
	if(IsyeriBilgi[isyeriid][isyeriSahip] > 0) {
		new query[64];
		format(query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", IsyeriBilgi[isyeriid][isyeriSahip]);
		mysql_tquery(mysqlB, query, "isyeriisimarat", "d", isyeriid);
	}
	else if(IsyeriBilgi[isyeriid][isyeriSahip] == -1) {
		for(new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikTur] == BIRLIK_DEVLET)
		{
			format(IsyeriBilgi[isyeriid][isyeriSahipIsim], 32, "%s", BirlikBilgi[i][birlikAd]);
		    Isyeri_Yenile(isyeriid);
		    return 1;
        }
		format(IsyeriBilgi[isyeriid][isyeriSahipIsim], 32, "Devlet");
		Isyeri_Yenile(isyeriid);
	}
	return 1;
}

stock Isyeri_TurAdi(isyeriid) {
	new tur[64];
	switch(IsyeriBilgi[isyeriid][isyeriTur]) {
	    case 1: tur = "Market";
	    case 2: tur = "Cafe & Restaurant";
	    case 3: tur = "Elektronik";
	    case 4: tur = "Motor Galerisi";
	    case 5: tur = "Berber";
	    case 6: tur = "Sex Shop";
	    case 7: tur = "Giyim";
	    case 8: tur = "Bar";
	    case 9: tur = "Benzinlik Marketi";
	    case 10: tur = "Silah Satýcýsý";
	    case 11: tur = "Araç Galerisi";
	    case 12: tur = "Lüks Galeri";
	    case 13: tur = "Uçak Galerisi";
	    case 14: tur = "Tekne Galerisi";
	    case 15: tur = "Kumarhane";
	}
	return tur;
}

stock Bina_Yenile(binaid)
{
	new string[512], binadurum[64], pickup;
	if(binaid != -1 && BinaBilgi[binaid][bKullanimda])
	{
		if(IsValidDynamic3DTextLabel(BinaBilgi[binaid][binaText])) DestroyDynamic3DTextLabel(BinaBilgi[binaid][binaText]), BinaBilgi[binaid][binaText] = Text3D:INVALID_3DTEXT_ID;
		if(IsValidDynamicPickup(BinaBilgi[binaid][bPickup])) DestroyDynamicPickup(BinaBilgi[binaid][bPickup]), BinaBilgi[binaid][bPickup] = INVALID_PICKUP_ID;
		if(IsValidDynamicPickup(BinaBilgi[binaid][bIntPickup])) DestroyDynamicPickup(BinaBilgi[binaid][bIntPickup]), BinaBilgi[binaid][bIntPickup] = INVALID_PICKUP_ID;

		switch(BinaBilgi[binaid][binaDurum]) {
		    case 1: binadurum = "{33AA33}Kilitsiz";
		    case 2: binadurum = "{B70000}Kilitli";
			case 3: binadurum = "{E0AB2F}Bakým / Tadilat";
			case 4: binadurum = "{BA33D1}Kapý Kýrýlmýþ";
		}
		switch(BinaBilgi[binaid][bModel]) {
		    case 1: pickup = 1212;
		    case 2: pickup = 1239;
		    case 3: pickup = 1240;
		    case 4: pickup = 1241;
		    case 5: pickup = 1247;
		    case 6: pickup = 1274;
		    case 7: pickup = 1254;
		    case 8: pickup = 1276;
		    case 9: pickup = 1277;
		    case 10: pickup = 1313;
		    case 11: pickup = 1314;
			case 12: pickup = 1318;
			case 13: pickup = 1581;
			case 14: pickup = 1650;
			case 15: pickup = 19522;
			case 16: pickup = 19627;
			case 17: pickup = 11712;
			case 18: pickup = 1253;
			case 19: pickup = 18631;
			case 20: pickup = 19605;
			case 21: pickup = 1582;
			default: pickup = 1318;
		}
		new kapino = MAKSIMUM_EV + MAKSIMUM_ISYERI;
		if(BinaBilgi[binaid][binaSahip] > 0) {
		    if(isnull(BinaBilgi[binaid][binaSahipIsim])) return binasahipbul(binaid);
			if(BinaBilgi[binaid][binaTur] != 8) format(string, sizeof(string), "ID: {FFFFFF}%d\n{a9c4e4}Sahip: {FFFFFF}%s\n{a9c4e4}Kapý Numarasý: {FFFFFF}%d\n{a9c4e4}Ad: {FFFFFF}%s\n{a9c4e4}Durum: %s", binaid, BinaBilgi[binaid][binaSahipIsim], BinaBilgi[binaid][bID] + kapino, BinaBilgi[binaid][bIsim], binadurum);
			else if(BinaBilgi[binaid][binaTur] == 8) {
				format(string, sizeof(string), "ID: {FFFFFF}%d\n{a9c4e4}Sahip: {FFFFFF}%s\n{a9c4e4}Durum: %s", binaid, BinaBilgi[binaid][binaSahipIsim], binadurum);
				BinaBilgi[binaid][bIntPickup] = CreateDynamicPickup(pickup, 23, BinaBilgi[binaid][bIPos][0], BinaBilgi[binaid][bIPos][1], BinaBilgi[binaid][bIPos][2], BinaBilgi[binaid][bVW], BinaBilgi[binaid][bInterior]);
			}
		}
		else {
			if(BinaBilgi[binaid][binaTur] != 8) format(string, sizeof(string), "ID: {FFFFFF}%d\n{a9c4e4}Kapý Numarasý: {FFFFFF}%d\n{a9c4e4}Ad: {FFFFFF}%s\n{a9c4e4}Durum: %s", binaid, BinaBilgi[binaid][bID] + kapino, BinaBilgi[binaid][bIsim], binadurum);
            else if(BinaBilgi[binaid][binaTur] == 8) {
 		    format(string, sizeof(string), "ID: {FFFFFF}%d\n{a9c4e4}Durum: %s", binaid, binadurum);
				BinaBilgi[binaid][bIntPickup] = CreateDynamicPickup(pickup, 23, BinaBilgi[binaid][bPos][0], BinaBilgi[binaid][bPos][1], BinaBilgi[binaid][bPos][2], BinaBilgi[binaid][bDisVW], BinaBilgi[binaid][bDisInt]);
            }
		}
		BinaBilgi[binaid][binaText] = CreateDynamic3DTextLabel(string, RENK_SERVER, BinaBilgi[binaid][bPos][0], BinaBilgi[binaid][bPos][1], BinaBilgi[binaid][bPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BinaBilgi[binaid][bDisVW], BinaBilgi[binaid][bDisInt]);
        BinaBilgi[binaid][bPickup] = CreateDynamicPickup(pickup, 23, BinaBilgi[binaid][bPos][0], BinaBilgi[binaid][bPos][1], BinaBilgi[binaid][bPos][2], BinaBilgi[binaid][bDisVW], BinaBilgi[binaid][bDisInt]); // + 0.7
	}
	return 1;
}

stock binasahipbul(binaid)
{
	if(BinaBilgi[binaid][binaSahip] > 0) {
		new query[256];
		format(query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", BinaBilgi[binaid][binaSahip]);
		mysql_tquery(mysqlB, query, "binasahiparat", "d", binaid);
	}
	return 1;
}

stock Bina_Kaydet(binaid)
{
	new query[512 * 3];
	format(query, sizeof(query), "UPDATE `binalar` SET `binaAdi` = '%s', `binaModel` = '%d', `bPosX` = '%.4f', `bPosY` = '%.4f', `bPosZ` = '%.4f', `bPosA` = '%.4f', `bIPosX` = '%.4f', `bIPosY` = '%.4f', `bIPosZ` = '%.4f', `bIPosA` = '%.4f', `bInterior` = '%d'",
		SQL_ReturnEscaped(BinaBilgi[binaid][bIsim]),
	    BinaBilgi[binaid][bModel],
	    BinaBilgi[binaid][bPos][0],
	    BinaBilgi[binaid][bPos][1],
	    BinaBilgi[binaid][bPos][2],
	    BinaBilgi[binaid][bPos][3],
	    BinaBilgi[binaid][bIPos][0],
	    BinaBilgi[binaid][bIPos][1],
	    BinaBilgi[binaid][bIPos][2],
	    BinaBilgi[binaid][bIPos][3],
	    BinaBilgi[binaid][bInterior]
	);
	format(query, sizeof(query), "%s, `bVW` = '%d', `bDisVW` = '%d', `bDisInt` = '%d', `binaDurum` = '%d', `binaTur` = '%d', `Sahip` = '%d', `Level` = '%d', `BakimSure` = '%d'",
	    query,
	    BinaBilgi[binaid][bVW],
	    BinaBilgi[binaid][bDisVW],
	    BinaBilgi[binaid][bDisInt],
	    BinaBilgi[binaid][binaDurum],
	    BinaBilgi[binaid][binaTur],
	    BinaBilgi[binaid][binaSahip],
	    BinaBilgi[binaid][binaLevel],
	    BinaBilgi[binaid][binaBakimSure]
	);
	format(query, sizeof(query), "%s, `BinaAnahtar` = '%d', `BinaAnahtar1` = '%d', `BinaAnahtar2` = '%d', `BinaAnahtar3` = '%d', `BinaAnahtar4` = '%d' WHERE `bID` = '%d'",
		query,
		BinaBilgi[binaid][binaAnahtar][0],
		BinaBilgi[binaid][binaAnahtar][1],
		BinaBilgi[binaid][binaAnahtar][2],
		BinaBilgi[binaid][binaAnahtar][3],
		BinaBilgi[binaid][binaAnahtar][4],
		BinaBilgi[binaid][bID]
	);
	mysql_tquery(mysqlB, query);
	return 1;
}

stock TextdrawlariYarat(playerid)
{
	siyahekran[playerid] = CreatePlayerTextDraw(playerid, 644.000000, 1.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, siyahekran[playerid], 0x000000FF);
	PlayerTextDrawFont(playerid, siyahekran[playerid], 1);
	PlayerTextDrawLetterSize(playerid, siyahekran[playerid], 0.530000, 51.000000);
	PlayerTextDrawColor(playerid, siyahekran[playerid], -1);
	PlayerTextDrawSetOutline(playerid, siyahekran[playerid], 0);
	PlayerTextDrawSetProportional(playerid, siyahekran[playerid], 1);
	PlayerTextDrawSetShadow(playerid, siyahekran[playerid], 1);
	PlayerTextDrawUseBox(playerid, siyahekran[playerid], 1);
	PlayerTextDrawBoxColor(playerid, siyahekran[playerid], 0x000000FF);
	PlayerTextDrawTextSize(playerid, siyahekran[playerid], -6.000000, 30.000000);
	PlayerTextDrawSetSelectable(playerid, siyahekran[playerid], 0);
	
	// Birlik Bölge
	BirlikBolgesiText[playerid][0] = CreatePlayerTextDraw(playerid, 570.000000, 225.000000, "Birlik Bolgesi");
	PlayerTextDrawLetterSize(playerid, BirlikBolgesiText[playerid][0], 0.200000, 1.000000);
	PlayerTextDrawTextSize(playerid, BirlikBolgesiText[playerid][0], 642.082763, 0.000000);
	PlayerTextDrawAlignment(playerid, BirlikBolgesiText[playerid][0], 1);
	PlayerTextDrawColor(playerid, BirlikBolgesiText[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, BirlikBolgesiText[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, BirlikBolgesiText[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, BirlikBolgesiText[playerid][0], 255);
	PlayerTextDrawFont(playerid, BirlikBolgesiText[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, BirlikBolgesiText[playerid][0], 1);

	BirlikBolgesiText[playerid][1] = CreatePlayerTextDraw(playerid, 635.000000, 240.000000, "bu bolge ~r~los santos police department~w~ adli birlige aittir.");
	PlayerTextDrawLetterSize(playerid, BirlikBolgesiText[playerid][1], 0.150000, 0.899999);
	PlayerTextDrawTextSize(playerid, BirlikBolgesiText[playerid][1], 703.165832, 0.000000);
	PlayerTextDrawAlignment(playerid, BirlikBolgesiText[playerid][1], 3);
	PlayerTextDrawColor(playerid, BirlikBolgesiText[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, BirlikBolgesiText[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, BirlikBolgesiText[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, BirlikBolgesiText[playerid][1], 255);
	PlayerTextDrawFont(playerid, BirlikBolgesiText[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, BirlikBolgesiText[playerid][1], 1);

	// Lamba
	LambaText[playerid] = CreatePlayerTextDraw(playerid, 644.000000, 1.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, LambaText[playerid], 255);
	PlayerTextDrawFont(playerid, LambaText[playerid], 1);
	PlayerTextDrawLetterSize(playerid, LambaText[playerid], 0.530000, 51.000000);
	PlayerTextDrawColor(playerid, LambaText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, LambaText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, LambaText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, LambaText[playerid], 1);
	PlayerTextDrawUseBox(playerid, LambaText[playerid], 1);
	PlayerTextDrawBoxColor(playerid, LambaText[playerid], 119);
	PlayerTextDrawTextSize(playerid, LambaText[playerid], -6.000000, 30.000000);
	PlayerTextDrawSetSelectable(playerid, LambaText[playerid], 0);
	
	OyuncuBilgi[playerid][oGirisTextdraw][0] = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "mdl-2002:background");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][0], 4);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][0], 641.000000, 451.500000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][0], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][0], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][0], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][0], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][0], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][0], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][0], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][0], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][0], 0);

	OyuncuBilgi[playerid][oGirisTextdraw][1] = CreatePlayerTextDraw(playerid, 320.000000, 141.000000, "_");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][1], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][1], 2.137500, 8.900008);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][1], 300.000000, 258.500000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][1], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][1], 3);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][1], 2);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][1], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][1], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][1], -1061109625);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][1], 1);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][1], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][1], 0);

	OyuncuBilgi[playerid][oGirisTextdraw][2] = CreatePlayerTextDraw(playerid, 229.000000, 144.000000, "Bbbbbbbbbbbbbbbbbbbb_Aaaaaaaaaaa");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][2], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][2], 0.341666, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][2], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][2], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][2], 1);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][2], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][2], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][2], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][2], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][2], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][2], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][2], 1);

	OyuncuBilgi[playerid][oGirisTextdraw][3] = CreatePlayerTextDraw(playerid, 321.000000, 106.000000, "Karakterlerim");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][3], 2);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][3], 0.349999, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][3], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][3], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][3], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][3], 2);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][3], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][3], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][3], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][3], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][3], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][3], 0);

	OyuncuBilgi[playerid][oGirisTextdraw][4] = CreatePlayerTextDraw(playerid, 154.000000, 115.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][4], 5);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][4], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][4], 112.500000, 125.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][4], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][4], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][4], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][4], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][4], 0);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][4], 255);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][4], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][4], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][4], 0);
	PlayerTextDrawSetPreviewModel(playerid, OyuncuBilgi[playerid][oGirisTextdraw][4], 0);
	PlayerTextDrawSetPreviewRot(playerid, OyuncuBilgi[playerid][oGirisTextdraw][4], -10.000000, 0.000000, 25.000000, 1.369999);
	PlayerTextDrawSetPreviewVehCol(playerid, OyuncuBilgi[playerid][oGirisTextdraw][4], 1, 1);

	OyuncuBilgi[playerid][oGirisTextdraw][5] = CreatePlayerTextDraw(playerid, 230.000000, 186.000000, "Son Giris: 20.01.2001_23.54");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][5], 2);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][5], 0.416666, 1.549998);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][5], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][5], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][5], 1);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][5], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][5], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][5], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][5], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][5], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][5], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][5], 0);

	OyuncuBilgi[playerid][oGirisTextdraw][6] = CreatePlayerTextDraw(playerid, 230.000000, 167.000000, "Level:_4");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][6], 2);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][6], 0.416666, 1.549998);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][6], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][6], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][6], 1);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][6], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][6], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][6], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][6], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][6], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][6], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][6], 0);

	OyuncuBilgi[playerid][oGirisTextdraw][7] = CreatePlayerTextDraw(playerid, 320.000000, 231.000000, "_");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][7], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][7], 2.137500, 8.900008);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][7], 300.000000, 258.500000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][7], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][7], 3);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][7], 2);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][7], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][7], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][7], -1061109625);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][7], 1);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][7], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][7], 0);

	OyuncuBilgi[playerid][oGirisTextdraw][8] = CreatePlayerTextDraw(playerid, 320.000000, 321.000000, "_");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][8], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][8], 2.137500, 8.900008);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][8], 300.000000, 258.500000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][8], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][8], 3);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][8], 2);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][8], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][8], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][8], -1061109625);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][8], 1);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][8], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][8], 0);

	OyuncuBilgi[playerid][oGirisTextdraw][9] = CreatePlayerTextDraw(playerid, 154.000000, 205.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][9], 5);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][9], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][9], 112.500000, 125.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][9], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][9], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][9], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][9], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][9], 0);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][9], 255);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][9], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][9], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][9], 0);
	PlayerTextDrawSetPreviewModel(playerid, OyuncuBilgi[playerid][oGirisTextdraw][9], 0);
	PlayerTextDrawSetPreviewRot(playerid, OyuncuBilgi[playerid][oGirisTextdraw][9], -10.000000, 0.000000, 25.000000, 1.369999);
	PlayerTextDrawSetPreviewVehCol(playerid, OyuncuBilgi[playerid][oGirisTextdraw][9], 1, 1);

	OyuncuBilgi[playerid][oGirisTextdraw][10] = CreatePlayerTextDraw(playerid, 229.000000, 234.000000, "Bbbbbbbbbbbbbbbbbbbb_Aaaaaaaaaaa");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][10], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][10], 0.341666, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][10], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][10], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][10], 1);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][10], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][10], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][10], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][10], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][10], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][10], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][10], 1);

	OyuncuBilgi[playerid][oGirisTextdraw][11] = CreatePlayerTextDraw(playerid, 230.000000, 256.000000, "Level:_4");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][11], 2);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][11], 0.416666, 1.549998);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][11], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][11], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][11], 1);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][11], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][11], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][11], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][11], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][11], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][11], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][11], 0);

	OyuncuBilgi[playerid][oGirisTextdraw][12] = CreatePlayerTextDraw(playerid, 230.000000, 275.000000, "Son Giris: 20.01.2001_23.54");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][12], 2);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][12], 0.416666, 1.549998);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][12], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][12], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][12], 1);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][12], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][12], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][12], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][12], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][12], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][12], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][12], 0);

	OyuncuBilgi[playerid][oGirisTextdraw][13] = CreatePlayerTextDraw(playerid, 154.000000, 295.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][13], 5);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][13], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][13], 112.500000, 125.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][13], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][13], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][13], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][13], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][13], 0);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][13], 255);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][13], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][13], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][13], 0);
	PlayerTextDrawSetPreviewModel(playerid, OyuncuBilgi[playerid][oGirisTextdraw][13], 0);
	PlayerTextDrawSetPreviewRot(playerid, OyuncuBilgi[playerid][oGirisTextdraw][13], -10.000000, 0.000000, 25.000000, 1.369999);
	PlayerTextDrawSetPreviewVehCol(playerid, OyuncuBilgi[playerid][oGirisTextdraw][13], 1, 1);

	OyuncuBilgi[playerid][oGirisTextdraw][14] = CreatePlayerTextDraw(playerid, 229.000000, 324.000000, "Bbbbbbbbbbbbbbbbbbbb_Aaaaaaaaaaa");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][14], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][14], 0.341666, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][14], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][14], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][14], 1);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][14], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][14], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][14], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][14], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][14], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][14], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][14], 1);

	OyuncuBilgi[playerid][oGirisTextdraw][15] = CreatePlayerTextDraw(playerid, 230.000000, 345.000000, "Level:_4");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][15], 2);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][15], 0.416666, 1.549998);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][15], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][15], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][15], 1);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][15], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][15], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][15], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][15], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][15], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][15], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][15], 0);

	OyuncuBilgi[playerid][oGirisTextdraw][16] = CreatePlayerTextDraw(playerid, 230.000000, 365.000000, "Son Giris: 20.01.2001_23.54");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][16], 2);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][16], 0.416666, 1.549998);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][16], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][16], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][16], 1);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][16], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][16], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][16], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][16], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][16], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][16], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][16], 0);

	OyuncuBilgi[playerid][oGirisTextdraw][17] = CreatePlayerTextDraw(playerid, 229.000000, 406.000000, "Tum Karakterler");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][17], 2);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][17], 0.204165, 1.450000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][17], 394.500000, 21.500000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][17], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][17], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][17], 2);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][17], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][17], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][17], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][17], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][17], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][17], 1);

	OyuncuBilgi[playerid][oGirisTextdraw][18] = CreatePlayerTextDraw(playerid, 420.000000, 408.000000, "CIKIS YAP");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][18], 2);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][18], 0.295832, 1.350000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][18], 394.500000, 21.500000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][18], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][18], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][18], 2);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][18], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][18], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][18], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][18], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][18], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][18], 1);

	OyuncuBilgi[playerid][oGirisTextdraw][19] = CreatePlayerTextDraw(playerid, 189.000000, 124.000000, "+_Karakter_Olustur");
	PlayerTextDrawFont(playerid, OyuncuBilgi[playerid][oGirisTextdraw][19], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][19], 0.262500, 1.400000);
	PlayerTextDrawTextSize(playerid, OyuncuBilgi[playerid][oGirisTextdraw][19], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuBilgi[playerid][oGirisTextdraw][19], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuBilgi[playerid][oGirisTextdraw][19], 0);
	PlayerTextDrawAlignment(playerid, OyuncuBilgi[playerid][oGirisTextdraw][19], 1);
	PlayerTextDrawColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][19], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][19], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuBilgi[playerid][oGirisTextdraw][19], 50);
	PlayerTextDrawUseBox(playerid, OyuncuBilgi[playerid][oGirisTextdraw][19], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuBilgi[playerid][oGirisTextdraw][19], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuBilgi[playerid][oGirisTextdraw][19], 1);
	
	adminduty[playerid] = CreatePlayerTextDraw(playerid, 3.666635, 230.651733, "Admin_Duty");
	PlayerTextDrawLetterSize(playerid, adminduty[playerid], 0.186999, 0.998518);
	PlayerTextDrawAlignment(playerid, adminduty[playerid], 1);
	PlayerTextDrawColor(playerid, adminduty[playerid], -2147483393);
	PlayerTextDrawSetShadow(playerid, adminduty[playerid], 0);
	PlayerTextDrawSetOutline(playerid, adminduty[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, adminduty[playerid], 255);
	PlayerTextDrawFont(playerid, adminduty[playerid], 1);
	PlayerTextDrawSetProportional(playerid, adminduty[playerid], 1);
	PlayerTextDrawSetShadow(playerid, adminduty[playerid], 0);

	godduty[playerid] = CreatePlayerTextDraw(playerid, 3.999968, 220.281402, "GODMODE");
	PlayerTextDrawLetterSize(playerid, godduty[playerid], 0.186999, 0.998518);
	PlayerTextDrawAlignment(playerid, godduty[playerid], 1);
	PlayerTextDrawColor(playerid, godduty[playerid], -5963521);
	PlayerTextDrawSetShadow(playerid, godduty[playerid], 0);
	PlayerTextDrawSetOutline(playerid, godduty[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, godduty[playerid], 255);
	PlayerTextDrawFont(playerid, godduty[playerid], 1);
	PlayerTextDrawSetProportional(playerid, godduty[playerid], 1);
	PlayerTextDrawSetShadow(playerid, godduty[playerid], 0);
	
	return 1;
}

stock ObjeleriYarat()
{

	HavaAlaniKapi[0] = CreateDynamicObject(988, 1964.48792, -2189.76563, 13.55250,   0.00000, 0.00000, 180.00000);
	HavaAlaniKapi[1] = CreateDynamicObject(988, 1958.99146, -2189.76563, 13.56700,   0.00000, 0.00000, 180.00000);
	return 1;
}

stock MulkListesi(gosterilenid, oyuncuid)
{
	new sayi = 0;
	for(new i = 0; i < MAKSIMUM_EV; i ++) if(Ev_SahipKontrol(oyuncuid, i)) {
	    SendClientMessageEx(gosterilenid, RENK_BEYAZ, "** (Ev) ID: %d | Kapý Numarasý: %d | Level: %d | Adres: %s | Vergi: %s/%s", i, EvBilgi[i][evID], EvBilgi[i][evLevel], EvBilgi[i][evAdres], NumaraFormati(EvBilgi[i][evVergi]), NumaraFormati(EvBilgi[i][evFiyat] / 2));
	    sayi++;
	}
	for(new i = 0; i < MAKSIMUM_ISYERI; i ++) if(Isyeri_SahipKontrol(oyuncuid, i)) {
	    SendClientMessageEx(gosterilenid, RENK_BEYAZ, "** (Ýþyeri) ID: %d | Kapý Numarasý: %d | Ad: %s", i, IsyeriBilgi[i][isyeriID] + MAKSIMUM_EV, IsyeriBilgi[i][isyeriAd]);
	    sayi++;
	}
	for(new i = 0; i < MAKSIMUM_BINA; i ++) if(Bina_SahipKontrol(oyuncuid, i)) {
	    new kapino = MAKSIMUM_EV + MAKSIMUM_ISYERI;
	    SendClientMessageEx(gosterilenid, RENK_BEYAZ, "** (Bina) ID: %d | Kapý Numarasý: %d | Ad: %s", i, BinaBilgi[i][bID] + kapino, BinaBilgi[i][bIsim]);
	    sayi++;
	}
	if(!sayi) {
		new oyuncu_isim[MAX_PLAYER_NAME + 1];
		GetPlayerName(oyuncuid, oyuncu_isim, sizeof(oyuncu_isim));
		for(new is = 0, len = strlen(oyuncu_isim); is < len; is++) if(oyuncu_isim[is] == '_') oyuncu_isim[is] = ' ';
		HataMesaji(gosterilenid, "%s adýna kayýtlý mülk yok.", oyuncu_isim);
	}
	return 1;
}

stock AracListesi(gosterilenid, oyuncuid)
{
	new menu_icerik[2048], sayi = 0;
	format(menu_icerik, sizeof(menu_icerik), "ID\tModel\tDurum\tPlaka\n");
	for(new i = 0; i < MAKSIMUM_ARAC; i ++) if(Arac_SahipKontrol(oyuncuid, i)) {
        if(IsValidVehicle(AracBilgi[i][aracYarat])) format(menu_icerik, sizeof(menu_icerik), "%s%d\t%s\t%s\t%s\n", menu_icerik, AracBilgi[i][aracYarat], AracModel(AracBilgi[i][aracModel]), AracDurum(i), AracBilgi[i][aracPlaka]);
	    else format(menu_icerik, sizeof(menu_icerik), "%s00\t%s\t%s\t%s\n", menu_icerik, AracModel(AracBilgi[i][aracModel]), AracDurum(i), AracBilgi[i][aracPlaka]);
	    sayi++;
	}
	if(!sayi && oyuncuid == gosterilenid) return HataMesaji(gosterilenid, "Aracýn yok, bu menüyü kullanamazsýn.");
	else if(!sayi && oyuncuid != gosterilenid) return HataMesaji(gosterilenid, "%s adlý kiþiye kayýtlý araç yok.", OyuncuIsim(oyuncuid));
	DialogGoster(gosterilenid, DIALOG_ARACLARIM, DIALOG_STYLE_TABLIST_HEADERS, "Araç Menüsü", menu_icerik, "Seç", "Kapat");
	return 1;
}

stock OyuncuBilgileri2(gosterilenid, oyuncuid)
{
	new ustlevel, hesapdurumu[24], birlik[64], rutbe[64], hapis;
	ustlevel = OyuncuBilgi[oyuncuid][oSeviye] * LEVEL_EXP;
	if(OyuncuBilgi[oyuncuid][oBirlik] > -1) {
	    format(birlik, sizeof(birlik), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikAd]);
		format(rutbe, sizeof(rutbe), "%s", OyuncuRutbeAdi(oyuncuid));
	}
	else if(OyuncuBilgi[oyuncuid][oBirlik] == -1) birlik = "Yok", rutbe = "Yok";

	if(OyuncuBilgi[oyuncuid][oAdmin] > 0) format(hesapdurumu, sizeof(hesapdurumu), "%s", Admin_RutbeIsim(OyuncuBilgi[oyuncuid][oAdmin]));
	else if(OyuncuBilgi[oyuncuid][oDestekEkibi] > 0) hesapdurumu = "Destek";
	else if(OyuncuBilgi[oyuncuid][oAdmin] < 1 && OyuncuBilgi[oyuncuid][oDestekEkibi] < 1) hesapdurumu = "Oyuncu";

	if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0) hapis = OyuncuBilgi[oyuncuid][oHapisSure][0] / 60;
	else if(OyuncuBilgi[oyuncuid][oHapisSure][1] > 0) hapis = OyuncuBilgi[oyuncuid][oHapisSure][1] / 60;

	SendClientMessageEx(gosterilenid, RENK_BEYAZ, "====================[SQLID: %d] (%s)====================", OyuncuBilgi[oyuncuid][oID], OyuncuIsim(oyuncuid));
	SendClientMessageEx(gosterilenid, RENK_BEYAZ, "Hesap ID: [%03d] - Hesap: [%s] - Seviye: [%d] - EXP: [%d/%d] - Oynama Saati: [%d] - Maaþ: [%d]", OyuncuBilgi[oyuncuid][oHesap], hesapdurumu, OyuncuBilgi[oyuncuid][oSeviye], OyuncuBilgi[oyuncuid][oExp], ustlevel, OyuncuBilgi[oyuncuid][oOynamaSaati], OyuncuBilgi[oyuncuid][oDakika]);
	SendClientMessageEx(gosterilenid, RENK_BEYAZ, "Para: [%s] - Cinsiyet: [%s] - Doðum Yeri: [%s] - Ten Rengi [%s] - Kýyafet: [%d] - VIP: [%s]", NumaraFormati(OyuncuBilgi[oyuncuid][oPara]), (OyuncuBilgi[oyuncuid][oCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), Kokenler[OyuncuBilgi[oyuncuid][oDogumYeri]], (OyuncuBilgi[oyuncuid][oTenRengi] == 1) ? ("Beyaz") : ("Siyah"), OyuncuBilgi[oyuncuid][oKiyafet], VIPIsim(oyuncuid));
	SendClientMessageEx(gosterilenid, RENK_BEYAZ, "Meslek: [%s] - Birlik: [%s] - Rütbe: [%s] - Uyarýlar: [%d] - Hapis Süre: [%d]", MeslekIsim(OyuncuBilgi[oyuncuid][oMeslek]), birlik, rutbe, OyuncuBilgi[oyuncuid][oUyari], hapis);
	SendClientMessageEx(gosterilenid, RENK_BEYAZ, "Interior: [%d] - Virtual World: [%d] - Market Bakiyesi: [{33aa33}%s{FFFFFF}TL] - vPoint: [%d] - Telefon No: [%d]", GetPlayerInterior(oyuncuid), GetPlayerVirtualWorld(oyuncuid), NumaraFormati(BakiyeKontrol(oyuncuid), ""), NumaraFormati(OyuncuBilgi[oyuncuid][oVPoint], ""), OyuncuBilgi[oyuncuid][oTelefonNumarasi]);
	SendClientMessageEx(gosterilenid, RENK_BEYAZ, "=========================================================");
	return 1;
}

/*stock OyuncuBilgileri(gosterilenid, oyuncuid)
{
	new ustlevel, hesapdurumu[24], birlik[64], rutbe[64], hapis;
	ustlevel = OyuncuBilgi[oyuncuid][oSeviye] * LEVEL_EXP;
	if(OyuncuBilgi[oyuncuid][oBirlik] > -1) {
	    format(birlik, sizeof(birlik), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikAd]);
		format(rutbe, sizeof(rutbe), "%s", OyuncuRutbeAdi(oyuncuid));
	}
	else if(OyuncuBilgi[oyuncuid][oBirlik] == -1) birlik = "Yok", rutbe = "Yok";

	if(OyuncuBilgi[oyuncuid][oAdmin] > 0) format(hesapdurumu, sizeof(hesapdurumu), "%s", Admin_RutbeIsim(OyuncuBilgi[oyuncuid][oAdmin]));
	else if(OyuncuBilgi[oyuncuid][oDestekEkibi] > 0) hesapdurumu = "Helper";
	else if(OyuncuBilgi[oyuncuid][oAdmin] < 1 && OyuncuBilgi[oyuncuid][oDestekEkibi] < 1) hesapdurumu = "Oyuncu";
	
	if(OyuncuBilgi[oyuncuid][oHapisSure][0] > 0) hapis = OyuncuBilgi[oyuncuid][oHapisSure][0] / 60;
	else if(OyuncuBilgi[oyuncuid][oHapisSure][1] > 0) hapis = OyuncuBilgi[oyuncuid][oHapisSure][1] / 60;
    
	new karakter_icerik[3072], ekleme[256];
	format(karakter_icerik, sizeof(karakter_icerik), "{afafaf}%s {FFFFFF}adlý kiþiye ait karakter bilgileri:\t\n", OyuncuIsim(oyuncuid));
	format(ekleme, sizeof(ekleme), "{%06x}Hesap ID:\t{FFFFFF}%03d\n", RENK_KARAKTER >>> 8, OyuncuBilgi[oyuncuid][oHesap]), strcat(karakter_icerik, ekleme);
	format(ekleme, sizeof(ekleme), "{%06x}Hesap:\t{FFFFFF}%s\n", RENK_KARAKTER >>> 8, hesapdurumu), strcat(karakter_icerik, ekleme);
	format(ekleme, sizeof(ekleme), "{%06x}Seviye:\t{FFFFFF}%d\n", RENK_KARAKTER >>> 8, OyuncuBilgi[oyuncuid][oSeviye]), strcat(karakter_icerik, ekleme);
	format(ekleme, sizeof(ekleme), "{%06x}EXP:\t{FFFFFF}%d/%d\n", RENK_KARAKTER >>> 8, OyuncuBilgi[oyuncuid][oExp], ustlevel), strcat(karakter_icerik, ekleme);
	format(ekleme, sizeof(ekleme), "{%06x}Oynama Saati:\t{FFFFFF}%d\n", RENK_KARAKTER >>> 8, OyuncuBilgi[oyuncuid][oOynamaSaati]), strcat(karakter_icerik, ekleme);
	format(ekleme, sizeof(ekleme), "{%06x}Maaþ:\t{FFFFFF}%d/60dk\n", RENK_KARAKTER >>> 8, OyuncuBilgi[oyuncuid][oDakika]), strcat(karakter_icerik, ekleme);
	format(ekleme, sizeof(ekleme), "{%06x}Para:\t{FFFFFF}%s\n", RENK_KARAKTER >>> 8, NumaraFormati(OyuncuBilgi[oyuncuid][oPara])), strcat(karakter_icerik, ekleme);

	if(OyuncuBilgi[oyuncuid][oTelefonNumarasi] > 0) format(ekleme, sizeof(ekleme), "{%06x}Telefon Numarasý:\t{FFFFFF}%d\n", RENK_KARAKTER >>> 8, OyuncuBilgi[oyuncuid][oTelefonNumarasi]), strcat(karakter_icerik, ekleme);
	else if(OyuncuBilgi[oyuncuid][oTelefonNumarasi] == 0) format(ekleme, sizeof(ekleme), "{%06x}Telefon Numarasý:\t{FFFFFF}Yok\n", RENK_KARAKTER >>> 8), strcat(karakter_icerik, ekleme);
	format(ekleme, sizeof(ekleme), "{%06x}Cinsiyet:\t{FFFFFF}%s\n", RENK_KARAKTER >>> 8, (OyuncuBilgi[oyuncuid][oCinsiyet] == 1) ? ("Erkek") : ("Kadýn")), strcat(karakter_icerik, ekleme);
	format(ekleme, sizeof(ekleme), "{%06x}Doðum Yeri:\t{FFFFFF}%s\n", RENK_KARAKTER >>> 8, Kokenler[OyuncuBilgi[oyuncuid][oDogumYeri]]), strcat(karakter_icerik, ekleme);
	format(ekleme, sizeof(ekleme), "{%06x}Ten Rengi:\t{FFFFFF}%s\n", RENK_KARAKTER >>> 8, (OyuncuBilgi[oyuncuid][oTenRengi] == 1) ? ("Beyaz") : ("Siyah")), strcat(karakter_icerik, ekleme);
	format(ekleme, sizeof(ekleme), "{%06x}Kýyafet:\t{FFFFFF}%d\n", RENK_KARAKTER >>> 8, OyuncuBilgi[oyuncuid][oKiyafet]), strcat(karakter_icerik, ekleme);

	format(ekleme, sizeof(ekleme), "{%06x}Meslek:\t{FFFFFF}%s\n", RENK_KARAKTER >>> 8, MeslekIsim(OyuncuBilgi[oyuncuid][oMeslek])), strcat(karakter_icerik, ekleme);
	format(ekleme, sizeof(ekleme), "{%06x}Birlik:\t{FFFFFF}%s\n", RENK_KARAKTER >>> 8, birlik), strcat(karakter_icerik, ekleme);
	format(ekleme, sizeof(ekleme), "{%06x}Rütbe:\t{FFFFFF}%s\n", RENK_KARAKTER >>> 8, rutbe), strcat(karakter_icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "{%06x}Uyarýlar:\t{FFFFFF}%d\n", RENK_KARAKTER >>> 8, OyuncuBilgi[oyuncuid][oUyari]), strcat(karakter_icerik, ekleme);
	format(ekleme, sizeof(ekleme), "{%06x}Hapis Süresi:\t{FFFFFF}%d dakika\n", RENK_KARAKTER >>> 8, hapis), strcat(karakter_icerik, ekleme);
	
	format(ekleme, sizeof(ekleme), "{%06x}Ýnterior:\t{FFFFFF}%d\n", RENK_KARAKTER >>> 8, GetPlayerInterior(oyuncuid)), strcat(karakter_icerik, ekleme);
	format(ekleme, sizeof(ekleme), "{%06x}Virtual World:\t{FFFFFF}%d\n", RENK_KARAKTER >>> 8, GetPlayerVirtualWorld(oyuncuid)), strcat(karakter_icerik, ekleme);

	format(ekleme, sizeof(ekleme), "{%06x}Market Bakiyesi:\t{33aa33}%s{FFFFFF}TL\n", RENK_KARAKTER >>> 8, NumaraFormati(BakiyeKontrol(oyuncuid), "")), strcat(karakter_icerik, ekleme);
	format(ekleme, sizeof(ekleme), "{%06x}expPoint:\t{FFFFFF}%s\n", RENK_KARAKTER >>> 8, NumaraFormati(OyuncuBilgi[oyuncuid][oVPoint], "")), strcat(karakter_icerik, ekleme);
	format(ekleme, sizeof(ekleme), "{%06x}VIP:\t{FFFFFF}%s\n", RENK_KARAKTER >>> 8, VIPIsim(oyuncuid)), strcat(karakter_icerik, ekleme);

	if(OyuncuBilgi[gosterilenid][oAdmin] > 0) {
		format(ekleme, sizeof(ekleme), "{%06x}SQL ID:\t{FFFFFF}%03d\n", RENK_KARAKTER >>> 8, OyuncuBilgi[oyuncuid][oID]), strcat(karakter_icerik, ekleme);
		format(ekleme, sizeof(ekleme), "{%06x}AFK Süresi:\t{FFFFFF}%d saniye\n", RENK_KARAKTER >>> 8, OyuncuBilgi[oyuncuid][oAltTab]), strcat(karakter_icerik, ekleme);
		format(ekleme, sizeof(ekleme), "{%06x}AFK Süresi:\t{FFFFFF}%d saniye\n", RENK_KARAKTER >>> 8, OyuncuBilgi[oyuncuid][oAFK]), strcat(karakter_icerik, ekleme);
		format(ekleme, sizeof(ekleme), "{%06x}Zýrh:\t{FFFFFF}%d\n", RENK_KARAKTER >>> 8, OyuncuZirh(oyuncuid)), strcat(karakter_icerik, ekleme);
	}
	DialogGoster(gosterilenid, DIALOG_KARAKTER, DIALOG_STYLE_TABLIST_HEADERS, "{afafaf}vRP: {FFFFFF}Karakter Bilgileri", karakter_icerik, "Seç", "Kapat");
	return 1;
}*/

stock OyuncuRutbeAdi(oyuncuid)
{
	new rutbe[64];
	switch(OyuncuBilgi[oyuncuid][oBirlikRutbe]) {
		case 1: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR1]);
		case 2: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR2]);
		case 3: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR3]);
		case 4: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR4]);
		case 5: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR5]);
		case 6: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR6]);
		case 7: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR7]);
		case 8: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR8]);
		case 9: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR9]);
		case 10: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR10]);
		case 11: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR11]);
		case 12: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR12]);
		case 13: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR13]);
		case 14: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR14]);
		case 15: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR15]);
		case 16: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR16]);
		case 17: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR17]);
		case 18: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR18]);
		case 19: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR19]);
		case 20: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[OyuncuBilgi[oyuncuid][oBirlik]][birlikR20]);
	}
	return rutbe;
}

stock SQL_ReturnEscaped(const mesaj[])
{
	new geri[256];
	mysql_escape_string(mesaj, geri);
	return geri;
}

stock SohbetTemizle(playerid, bool:istek)
{
	for(new i = 0; i < 100; i++) SendClientMessage(playerid, RENK_BEYAZ, " ");
	if(istek == true) return SunucuMesaji(playerid, "Chatbox baþarýyla temizlendi.");
	return true;
}

stock Boombox_URLAyarla(playerid, url[])
{
	if(BoomboxBilgi[playerid][boomboxKullanimda])
	{
	    strpack(BoomboxBilgi[playerid][boomboxURL], url, 128 char);
		foreach (new i : Player) if(OyuncuBilgi[i][oBoombox] == playerid)
		{
			StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, url, BoomboxBilgi[playerid][boomboxPos][0], BoomboxBilgi[playerid][boomboxPos][1], BoomboxBilgi[playerid][boomboxPos][2], 30.0, 1);
		}
	}
	return 1;
}

stock Boombox_Yakin(playerid)
{
	foreach (new i : Player) if(BoomboxBilgi[i][boomboxKullanimda] && GetPlayerInterior(playerid) == BoomboxBilgi[i][boomboxInterior] && GetPlayerVirtualWorld(playerid) == BoomboxBilgi[i][boomboxWorld] && IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxBilgi[i][boomboxPos][0], BoomboxBilgi[i][boomboxPos][1], BoomboxBilgi[i][boomboxPos][2])) {
     	return i;
	}
	return INVALID_PLAYER_ID;
}

stock Cikis_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_BINA; i ++) if(BinaBilgi[i][bKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, BinaBilgi[i][bPos][0], BinaBilgi[i][bPos][1], BinaBilgi[i][bPos][2]) && BinaBilgi[i][binaTur] == 8)
	{
		if(GetPlayerInterior(playerid) == BinaBilgi[i][bDisInt] && GetPlayerVirtualWorld(playerid) == BinaBilgi[i][bDisVW])
			return i;
	}
	return -1;
}

stock Bina_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_BINA; i ++) if(BinaBilgi[i][bKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, BinaBilgi[i][bPos][0], BinaBilgi[i][bPos][1], BinaBilgi[i][bPos][2]) && BinaBilgi[i][binaTur] != 8)
	{
		if(GetPlayerInterior(playerid) == BinaBilgi[i][bDisInt] && GetPlayerVirtualWorld(playerid) == BinaBilgi[i][bDisVW])
			return i;
	}
	return -1;
}

stock Point_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_POINT; i++) if(PointBilgi[i][pointKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, PointBilgi[i][pointPos][0], PointBilgi[i][pointPos][1], PointBilgi[i][pointPos][2])) return i;
	return -1;
}

stock Stand_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_STAND; i++) if(StandBilgi[i][standKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, StandBilgi[i][standPos][0], StandBilgi[i][standPos][1], StandBilgi[i][standPos][2]))
	{
		if(GetPlayerInterior(playerid) == StandBilgi[i][standInterior] && GetPlayerVirtualWorld(playerid) == StandBilgi[i][standWorld])
			return i;
	}
	return -1;
}

stock Garaj_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_GARAJ; i++) if(GarajBilgi[i][garajKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, GarajBilgi[i][garajPos][0], GarajBilgi[i][garajPos][1], GarajBilgi[i][garajPos][2]))
	{
		if(GetPlayerInterior(playerid) == GarajBilgi[i][garajInt] && GetPlayerVirtualWorld(playerid) == GarajBilgi[i][garajDunya])
			return i;
	}
	return -1;
}

stock EvDolap_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_DOLAP; i++) if(DolapBilgi[i][dolapKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, DolapBilgi[i][dolapPos][0], DolapBilgi[i][dolapPos][1], DolapBilgi[i][dolapPos][2])) {
		if(DolapBilgi[i][dolapInt] == GetPlayerInterior(playerid) || DolapBilgi[i][dolapVW] == GetPlayerVirtualWorld(playerid)) return i;
	}
	return -1;
}

stock Ev_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_EV; i ++) if(EvBilgi[i][evKullanimda] && IsPlayerInRangeOfPoint(playerid, 2.0, EvBilgi[i][evPos][0], EvBilgi[i][evPos][1], EvBilgi[i][evPos][2]))
	{
		if(GetPlayerInterior(playerid) == EvBilgi[i][evDisInt] && GetPlayerVirtualWorld(playerid) == EvBilgi[i][evDisVW])
			return i;
	}
	return -1;
}

stock Modifiye_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_MODIFIYENOKTASI; i ++) if(ModifiyeNoktasi[i][modifiyeKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, ModifiyeNoktasi[i][modifiyePos][0], ModifiyeNoktasi[i][modifiyePos][1], ModifiyeNoktasi[i][modifiyePos][2]))
	{
		if(GetPlayerInterior(playerid) == ModifiyeNoktasi[i][modifiyeInt] && GetPlayerVirtualWorld(playerid) == ModifiyeNoktasi[i][modifiyeDunya])
			return i;
	}
	return -1;
}

stock Tutuklama_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_TUTUKLAMANOKTASI; i ++) if(TutuklamaNoktasi[i][tKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, TutuklamaNoktasi[i][tPos][0], TutuklamaNoktasi[i][tPos][1], TutuklamaNoktasi[i][tPos][2]))
	{
		if(GetPlayerInterior(playerid) == TutuklamaNoktasi[i][tInterior] && GetPlayerVirtualWorld(playerid) == TutuklamaNoktasi[i][tWorld])
			return i;
	}
	return -1;
}

stock Sandik_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_SANDIK; i ++) if(SandikBilgi[i][sKullanimda] && IsPlayerInRangeOfPoint(playerid, 2, SandikBilgi[i][sPos][0], SandikBilgi[i][sPos][1], SandikBilgi[i][sPos][2]))
	{
		if(GetPlayerInterior(playerid) == SandikBilgi[i][sInterior] && GetPlayerVirtualWorld(playerid) == SandikBilgi[i][sWorld])
			return i;
	}
	return -1;
}

stock Uyusturucu_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_UYUSTURUCU; i ++) if(UyusturucuBilgi[i][uKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, UyusturucuBilgi[i][uPos][0], UyusturucuBilgi[i][uPos][1], UyusturucuBilgi[i][uPos][2]))
	{
		if(GetPlayerInterior(playerid) == UyusturucuBilgi[i][uInterior] && GetPlayerVirtualWorld(playerid) == UyusturucuBilgi[i][uWorld])
			return i;
	}
	return -1;
}

stock Satici_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_SATICI; i ++) if(SaticiBilgi[i][sKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, SaticiBilgi[i][sPos][0], SaticiBilgi[i][sPos][1], SaticiBilgi[i][sPos][2]))
	{
		if(GetPlayerInterior(playerid) == SaticiBilgi[i][sInterior] && GetPlayerVirtualWorld(playerid) == SaticiBilgi[i][sWorld])
			return i;
	}
	return -1;
}

stock NPC_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_NPC; i ++) if(NPCBilgi[i][nKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, NPCBilgi[i][nPos][0], NPCBilgi[i][nPos][1], NPCBilgi[i][nPos][2]))
	{
		if(GetPlayerInterior(playerid) == NPCBilgi[i][nInterior] && GetPlayerVirtualWorld(playerid) == NPCBilgi[i][nWorld])
			return i;
	}
	return -1;
}

stock Isyeri_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_ISYERI; i ++) if(IsyeriBilgi[i][isyeriKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, IsyeriBilgi[i][isyeriPos][0], IsyeriBilgi[i][isyeriPos][1], IsyeriBilgi[i][isyeriPos][2]))
	{
		if(GetPlayerInterior(playerid) == IsyeriBilgi[i][isyeriDisInt] && GetPlayerVirtualWorld(playerid) == IsyeriBilgi[i][isyeriDisVW])
			return i;
	}
	return -1;
}

stock Oyuncu_Isyerinde(playerid)
{
	for(new i = 0; i != MAKSIMUM_ISYERI; i ++) if(IsyeriBilgi[i][isyeriKullanimda] && GetPlayerInterior(playerid) == IsyeriBilgi[i][isyeriInterior] && GetPlayerVirtualWorld(playerid) == IsyeriBilgi[i][isyeriVW]) {
		return i;
	}
	return -1;
}

stock Oyuncu_IsyeriKapida(playerid)
{
    for(new i = 0; i != MAKSIMUM_ISYERI; i ++) if(IsyeriBilgi[i][isyeriKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, IsyeriBilgi[i][isyeriIcPos][0], IsyeriBilgi[i][isyeriIcPos][1], IsyeriBilgi[i][isyeriIcPos][2]))
	{
		if(GetPlayerInterior(playerid) == IsyeriBilgi[i][isyeriInterior] && GetPlayerVirtualWorld(playerid) == IsyeriBilgi[i][isyeriVW])
			return i;
	}
	return -1;
}

stock Oyuncu_EvKapida(playerid)
{
    for(new i = 0; i != MAKSIMUM_EV; i ++) if(EvBilgi[i][evKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, EvBilgi[i][evIcPos][0], EvBilgi[i][evIcPos][1], EvBilgi[i][evIcPos][2]))
	{
		if(GetPlayerInterior(playerid) == EvBilgi[i][evInterior] && GetPlayerVirtualWorld(playerid) == EvBilgi[i][evVW])
			return i;
	}
	return -1;
}

stock Oyuncu_BinaKapida(playerid)
{
    for(new i = 0; i != MAKSIMUM_BINA; i ++) if(BinaBilgi[i][bKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, BinaBilgi[i][bIPos][0], BinaBilgi[i][bIPos][1], BinaBilgi[i][bIPos][2]))
	{
		if(GetPlayerInterior(playerid) == BinaBilgi[i][bInterior] && GetPlayerVirtualWorld(playerid) == BinaBilgi[i][bVW])
			return i;
	}
	return -1;
}

stock Oyuncu_CikisKapida(playerid)
{
    for(new i = 0; i != MAKSIMUM_BINA; i ++) if(BinaBilgi[i][bKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, BinaBilgi[i][bIPos][0], BinaBilgi[i][bIPos][1], BinaBilgi[i][bIPos][2]) && BinaBilgi[i][binaTur] == 8)
	{
		if(GetPlayerInterior(playerid) == BinaBilgi[i][bInterior] && GetPlayerVirtualWorld(playerid) == BinaBilgi[i][bVW])
			return i;
	}
	return -1;
}

stock Oyuncu_Binada(playerid)
{
	for(new i = 0; i != MAKSIMUM_BINA; i ++) if(BinaBilgi[i][bKullanimda] && GetPlayerInterior(playerid) == BinaBilgi[i][bInterior] && GetPlayerVirtualWorld(playerid) == BinaBilgi[i][bVW] && BinaBilgi[i][binaTur] != 8) {
		return i;
	}
	return -1;
}

stock CCTV_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_CCTV; i ++) if(CCTVVeri[i][cctvKullanimda] && IsPlayerInRangeOfPoint(playerid, CCTVVeri[i][cctvMenzil], CCTVVeri[i][cctvPos][0], CCTVVeri[i][cctvPos][1], CCTVVeri[i][cctvPos][2]))
		return i;

	return -1;
}

stock Gise_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_GISE; i ++) if(GiseBilgi[i][giseKullanimda] && IsPlayerInRangeOfPoint(playerid, GiseBilgi[i][giseMenzil], GiseBilgi[i][gisePos][0], GiseBilgi[i][gisePos][1], GiseBilgi[i][gisePos][2]))
		return i;
		
	return -1;
}

stock Gate_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_GATE; i ++) if(GateBilgi[i][gateKullanimda] && IsPlayerInRangeOfPoint(playerid, GateBilgi[i][gateMenzil], GateBilgi[i][gatePos][0], GateBilgi[i][gatePos][1], GateBilgi[i][gatePos][2]))
	{
		if(GetPlayerInterior(playerid) == GateBilgi[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateBilgi[i][gateWorld])
			return i;
	}
	return -1;
}

stock Meslek_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_MESLEK; i ++) if(MeslekBilgi[i][mKullanimda] && IsPlayerInRangeOfPoint(playerid, 5.0, MeslekBilgi[i][mPos][0], MeslekBilgi[i][mPos][1], MeslekBilgi[i][mPos][2]))
	{
		if(GetPlayerInterior(playerid) == MeslekBilgi[i][mInterior] && GetPlayerVirtualWorld(playerid) == MeslekBilgi[i][mWorld])
			return i;
	}
	return -1;
}

stock Obje_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_OBJE; i++) if(ObjeBilgi[i][objeKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, ObjeBilgi[i][objePos][0], ObjeBilgi[i][objePos][1], ObjeBilgi[i][objePos][2]))
	{
		if(GetPlayerInterior(playerid) == ObjeBilgi[i][objeInterior] && GetPlayerVirtualWorld(playerid) == ObjeBilgi[i][objeWorld])
			return i;
	}
	return -1;
}

stock Pompa_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_BENZIN_POMPASI; i ++) if(BenzinPompasi[i][pompaKullanimda] && IsPlayerInRangeOfPoint(playerid, 4.0, BenzinPompasi[i][pompaPos][0], BenzinPompasi[i][pompaPos][1], BenzinPompasi[i][pompaPos][2])) {
	    return i;
	}
	return -1;
}

stock GetComponentName(component)
{
	new modname[50];
	switch(component)
	{
	   case 1000: format(modname, sizeof(modname), "Pro Spoiler");
	   case 1001: format(modname, sizeof(modname), "Win Spoiler");
	   case 1002: format(modname, sizeof(modname), "Drag Spoiler");
	   case 1003: format(modname, sizeof(modname), "Alpha Spoiler");
	   case 1004: format(modname, sizeof(modname), "Champ Scoop");
	   case 1005: format(modname, sizeof(modname), "Fury Scoop");
	   case 1006: format(modname, sizeof(modname), "Roof Scoop");
	   case 1007: format(modname, sizeof(modname), "Right Sideskirt");
	   case 1008: format(modname, sizeof(modname), "Nitrous x5");
	   case 1009: format(modname, sizeof(modname), "Nitrous x2");
	   case 1010: format(modname, sizeof(modname), "Nitrous x10");
	   case 1011: format(modname, sizeof(modname), "Race Scoop");
	   case 1012: format(modname, sizeof(modname), "Worx Scoop");
	   case 1013: format(modname, sizeof(modname), "Round Fog Lights");
	   case 1014: format(modname, sizeof(modname), "Champ Spoiler");
	   case 1015: format(modname, sizeof(modname), "Race Spoiler");
	   case 1016: format(modname, sizeof(modname), "Worx Spoiler");
	   case 1017: format(modname, sizeof(modname), "Left Sideskirt");
	   case 1018: format(modname, sizeof(modname), "Upswept Exhaust");
	   case 1019: format(modname, sizeof(modname), "Twin Exhaust");
	   case 1020: format(modname, sizeof(modname), "Large Exhaust");
	   case 1021: format(modname, sizeof(modname), "Medium Exhaust");
	   case 1022: format(modname, sizeof(modname), "Small Exhaust");
	   case 1023: format(modname, sizeof(modname), "Fury Spoiler");
	   case 1024: format(modname, sizeof(modname), "Square Fog Lights");
	   case 1025: format(modname, sizeof(modname), "Offroad Wheels");
	   case 1026, 1036, 1047, 1056, 1069, 1090: format(modname, sizeof(modname), "Right Alien Sideskirt");
	   case 1027, 1040, 1051, 1062, 1071, 1094: format(modname, sizeof(modname), "Left Alien Sideskirt");
	   case 1028, 1034, 1046, 1064, 1065, 1092: format(modname, sizeof(modname), "Alien Exhaust");
	   case 1029, 1037, 1045, 1059, 1066, 1089: format(modname, sizeof(modname), "X-Flow Exhaust");
	   case 1030, 1039, 1048, 1057, 1070, 1095: format(modname, sizeof(modname), "Right X-Flow Sideskirt");
	   case 1031, 1041, 1052, 1063, 1072, 1093: format(modname, sizeof(modname), "Left X-Flow Sideskirt");
	   case 1032, 1038, 1054, 1055, 1067, 1088: format(modname, sizeof(modname), "Alien Roof Vent");
	   case 1033, 1035, 1053, 1061, 1068, 1091: format(modname, sizeof(modname), "X-Flow Roof Vent");
	   case 1042: format(modname, sizeof(modname), "Right Chrome Sideskirt");
	   case 1099: format(modname, sizeof(modname), "Left Chrome Sideskirt");
	   case 1043, 1105, 1114, 1127, 1132, 1135: format(modname, sizeof(modname), "Slamin Exhaust");
	   case 1044, 1104, 1113, 1126, 1129, 1136: format(modname, sizeof(modname), "Chrome Exhaust");
	   case 1050, 1058, 1139, 1146, 1158, 1163: format(modname, sizeof(modname), "X-Flow Spoiler");
	   case 1049, 1060, 1138, 1147, 1162, 1164: format(modname, sizeof(modname), "Alien Spoiler");
	   case 1073: format(modname, sizeof(modname), "Shadow Wheels");
	   case 1074: format(modname, sizeof(modname), "Mega Wheels");
	   case 1075: format(modname, sizeof(modname), "Rimshine Wheels");
	   case 1076: format(modname, sizeof(modname), "Wires Wheels");
	   case 1077: format(modname, sizeof(modname), "Classic Wheels");
	   case 1078: format(modname, sizeof(modname), "Twist Wheels");
	   case 1079: format(modname, sizeof(modname), "Cutter Wheels");
	   case 1080: format(modname, sizeof(modname), "Stitch Wheels");
	   case 1081: format(modname, sizeof(modname), "Grove Wheels");
	   case 1082: format(modname, sizeof(modname), "Import Wheels");
	   case 1083: format(modname, sizeof(modname), "Dollar Wheels");
	   case 1084: format(modname, sizeof(modname), "Trance Wheels");
	   case 1085: format(modname, sizeof(modname), "Atomic Wheels");
	   case 1086: format(modname, sizeof(modname), "Stereo");
	   case 1087: format(modname, sizeof(modname), "Hydraulics");
	   case 1096: format(modname, sizeof(modname), "Ahab Wheels");
	   case 1097: format(modname, sizeof(modname), "Virtual Wheels");
	   case 1098: format(modname, sizeof(modname), "Access Wheels");
	   case 1100: format(modname, sizeof(modname), "Chrome Grill");
	   case 1101: format(modname, sizeof(modname), "Left Chrome Flames Sideskirt");
	   case 1102, 1107: format(modname, sizeof(modname), "Left Chrome Strip Sideskirt");
	   case 1103: format(modname, sizeof(modname), "Convertible Roof");
	   case 1106, 1124: format(modname, sizeof(modname), "Left Chrome Arches Sideskirt");
	   case 1108, 1133, 1134: format(modname, sizeof(modname), "Right Chrome Strip Sideskirt");
	   case 1109: format(modname, sizeof(modname), "Chrome Rear Bullbars");
	   case 1110: format(modname, sizeof(modname), "Slamin Rear Bullbars");
	   case 1111, 1112: format(modname, sizeof(modname), "Front Sign");
	   case 1115: format(modname, sizeof(modname), "Chrome Front Bullbars");
	   case 1116: format(modname, sizeof(modname), "Slamin Front Bullbars");
	   case 1117, 1174, 1179, 1182, 1189, 1191: format(modname, sizeof(modname), "Chrome Front Bumper");
	   case 1175, 1181, 1185, 1188, 1190: format(modname, sizeof(modname), "Slamin Front Bumper");
	   case 1176, 1180, 1184, 1187, 1192: format(modname, sizeof(modname), "Chrome Rear Bumper");
	   case 1177, 1178, 1183, 1186, 1193: format(modname, sizeof(modname), "Slamin Rear Bumper");
	   case 1118: format(modname, sizeof(modname), "Right Chrome Trim Sideskirt");
	   case 1119: format(modname, sizeof(modname), "Right Wheelcovers Sideskirt");
	   case 1120: format(modname, sizeof(modname), "Left Chrome Trim Sideskirt");
	   case 1121: format(modname, sizeof(modname), "Left Wheelcovers Sideskirt");
	   case 1122: format(modname, sizeof(modname), "Right Chrome Flames Sideskirt");
	   case 1123: format(modname, sizeof(modname), "Bullbar Chrome Bars");
	   case 1125: format(modname, sizeof(modname), "Bullbar Chrome Lights");
	   case 1128: format(modname, sizeof(modname), "Vinyl Hardtop Roof");
	   case 1130: format(modname, sizeof(modname), "Hardtop Roof");
	   case 1131: format(modname, sizeof(modname), "Softtop Roof");
	   case 1140, 1148, 1151, 1156, 1161, 1167: format(modname, sizeof(modname), "X-Flow Rear Bumper");
	   case 1141, 1149, 1150, 1154, 1159, 1168: format(modname, sizeof(modname), "Alien Rear Bumper");
	   case 1142: format(modname, sizeof(modname), "Left Oval Vents");
	   case 1143: format(modname, sizeof(modname), "Right Oval Vents");
	   case 1144: format(modname, sizeof(modname), "Left Square Vents");
	   case 1145: format(modname, sizeof(modname), "Right Square Vents");
	   case 1152, 1157, 1165, 1170, 1172, 1173: format(modname, sizeof(modname), "X-Flow Front Bumper");
	   case 1153, 1155, 1160, 1166, 1169, 1171: format(modname, sizeof(modname), "Alien Front Bumper");

	}
	return modname;
}

stock adminrenk(playerid)
{
	switch(OyuncuBilgi[playerid][oAdmin])
	{
		case 1: SetPlayerColor(playerid, RENK_Y1);
		case 2: SetPlayerColor(playerid, RENK_Y2);
		case 3: SetPlayerColor(playerid, RENK_Y3);
		case 4: SetPlayerColor(playerid, RENK_Y4);
		case 5: SetPlayerColor(playerid, RENK_Y5);
		case 6: SetPlayerColor(playerid, RENK_Y6);
		case 7: SetPlayerColor(playerid, RENK_Y7);
		case 8: SetPlayerColor(playerid, RENK_Y8);
		default: SetPlayerColor(playerid, RENK_Y1);
	}
	return 1;
}

stock Destek_RutbeIsim(level)
{
	new mesaj[48];
	switch(level)
	{
		case 1: mesaj = "Destek";
		case 2: mesaj = "Destek";
		case 3: mesaj = "Destek";
		case 4: mesaj = "Destek";
		default: mesaj = "Oyuncu";
	}
	return mesaj;
}

stock GozRengi(level)
{
	new mesaj[48];
	switch(level)
	{
		case 1: mesaj = "Açýk Kahverengi";
		case 2: mesaj = "Kahverengi";
		case 3: mesaj = "Koyu Kahverengi";
		case 4: mesaj = "Mavi";
		case 5: mesaj = "Yeþil";
		case 6: mesaj = "Ela";
		case 7: mesaj = "Kehribar";
		case 8: mesaj = "Gri";
		default: mesaj = "Belirtilmemiþ";
	}
	return mesaj;
}

stock SacRengi(level)
{
	new mesaj[48];
	switch(level)
	{
		case 1: mesaj = "Siyah";
		case 2: mesaj = "Kahverengi";
		case 3: mesaj = "Kumral";
		case 4: mesaj = "Sarý";
		case 5: mesaj = "Kýzýl";
		case 6: mesaj = "Kestane";
		case 7: mesaj = "Buzul Sarý";
		case 8: mesaj = "Turuncu";
		default: mesaj = "Belirtilmemiþ";
	}
	return mesaj;
}

stock Meslek_LabelIsim(mtur)
{
	new mesaj[48];
	switch(mtur)
	{
		case 1: mesaj = "Kamyon Þöförü";
		case 9: mesaj = "Madenci";
		default: mesaj = "Kamyon Þöförü";
	}
	return mesaj;
}

/*stock Admin_RutbeIsim(level)
{
	new mesaj[48];
	switch(level)
	{
		case 1: mesaj = "Forum Görevlisi";
        case 2: mesaj = "Oyun Görevlisi";
        case 3: mesaj = "Game Admin";
        case 4: mesaj = "Senior Admin";
        case 5: mesaj = "High Senior Admin";
        case 6: mesaj = "Lead Admin";
        case 7: mesaj = "Server Management";
		case 8: mesaj = "Developer";
		default: mesaj = "Oyuncu";
	}
	return mesaj;
}*/

stock Admin_RutbeIsim(level)
{
	new mesaj[48];
	switch(level)
	{
		case 1: mesaj = "Oyun Yetkilisi";
        case 2: mesaj = "Oyun Yetkilisi";
        case 3: mesaj = "Oyun Yetkilisi";
        case 4: mesaj = "Oyun Yetkilisi";
        case 5: mesaj = "Oyun Yetkilisi";
        case 6: mesaj = "Oyun Yetkilisi";
        case 7: mesaj = "Oyun Yetkilisi";
		case 8: mesaj = "Genel Yönetici";
		default: mesaj = "Oyuncu";
	}
	return mesaj;
}

stock Stand_TurIsim(tur)
{
	new mesaj[26];
	switch(tur)
 {
    case 1: mesaj = "Yemek Tezgahý"; // 1342
    case 2: mesaj = "Dondurma Tezgahý"; // 1341
    case 3: mesaj = "Sosisli Tezgahý"; // 1340
    case 4: mesaj = "Noodle Tezgahý"; // 1570
 }
 	return mesaj;
}

stock Stand_Obje(tur)
{
	new obje;
	switch(tur)
 {
    case 1: obje = 1342; // 1342
    case 2: obje = 1341; // 1341
    case 3: obje = 1340; // 1340
    case 4: obje = 1570; // 1570
 }
 	return obje;
}

stock Arac_ArizaIpucu(arizatur)
{
	new mesaj[256];
	switch(arizatur)
	{
	    case 1: {
			switch(random(3)) { // Marþ Motoru
			case 1: mesaj = "Aracýn geç çalýþmasý ve marþý geç almasý.";
			case 2: mesaj = "Marþ dönmesi sýrasýnda hýz ve sesinde dalgalanma olmasý.";
			case 3: mesaj = "Marþýn eskiye oranla daha yavaþ bir þekilde dönmesi";
   }
		}
	    case 2: {
			switch(random(3)) { // Yakýt Pompasý
			case 1: mesaj = "Motor, ilk çalýþtýrma esnasýnda gaz yemiyor ve stop ediyor.";
			case 2: mesaj = "Aracýnýz marþ aldýktan sonra rölantide boðuluyor.";
			case 3: mesaj = "Araç marþ basýyor, ancak motor çalýþmýyor.";
			}
		}
		case 3: {
			switch(random(3)) { // Yað Pompasý
			case 1: mesaj = "Var ise, motor stop ikaz lambasý tarafýndan uyarý verilir.";
			case 2: mesaj = "Araç performansý ve çekiþ kuvvetinde önemli oranda azalma meydana gelir.";
			case 3: mesaj = "Motorda sürtünme artacaðý için, ýsý ve hararet yükselir.";
			}
		}
		case 4: {
			switch(random(3)) { // Motor Beyni
			case 1: mesaj = "Araçta performans kaybý, çekiþte düþüklükler görülür";
			case 2: mesaj = "Araç devirli halde hýzlý giderken ani stop etme sorunlarý baþlayabilir.";
			case 3: mesaj = "Araç bazen düzenli rolantide çalýþýr iken bazen rolanti tutmayarak sürekli stop edebilir.";
			}
		}
		case 5: {
			switch(random(3)) { // Buji
			case 1: mesaj = "Gaz pedalýna basýldýðýnda motor tekliyor.";
			case 2: mesaj = "Marþa basýldýðýnda motor geç çalýþýyorsa ya da hiç çalýþmýyor.";
			case 3: mesaj = "Araç artýk eskisi kadar hýzlý çalýþmýyor.";
			}
		}
		case 6: {
			switch(random(3)) { // Diferansiyel
			case 1: mesaj = "Kalkýþta, vites deðiþikliðinde ve ani gazlamada tak diye bir vuruntu olmasý.";
			case 2: mesaj = "Virajlarda yol tutuþununu azaltýr.";
			case 3: mesaj = "Diferansiyelden yað kaçaklarý.";
			}
		}
	}
	return mesaj;
}

stock VIPIsim(oyuncuid)
{
	new vipisim[24];
	switch(OyuncuBilgi[oyuncuid][oVIP])
	{
		case 1: vipisim = "Bronz VIP";
		case 2: vipisim = "Gümüþ VIP";
		case 3: vipisim = "Altýn VIP"; 
		default: vipisim = "Yok";
	}
	return vipisim;
}

stock BakiyeKontrol(oyuncuid)
{
	new sorgu[256], Cache:sorgu_cache, bakiye = 0;
	format(sorgu, sizeof(sorgu), "SELECT `Bakiye` FROM `hesaplar` WHERE `forumID` = '%d'", OyuncuBilgi[oyuncuid][oHesap]);
	sorgu_cache = mysql_query(mysqlB, sorgu);
	if(cache_num_rows()) bakiye = vericek_int(0, "Bakiye");
	cache_delete(sorgu_cache);
	return bakiye;
}

stock BakiyeEkle(oyuncuid, miktar)
{
	new bakiye = BakiyeKontrol(oyuncuid), sorgu[256];
	format(sorgu, sizeof(sorgu),"UPDATE `hesaplar` SET `Bakiye` = %d WHERE `forumID` = '%d'", bakiye + miktar, OyuncuBilgi[oyuncuid][oHesap]);
	mysql_query(mysqlB, sorgu);
	return 1;
}

stock BakiyeKes(oyuncuid, miktar)
{
	new bakiye = BakiyeKontrol(oyuncuid), sorgu[256];
	format(sorgu, sizeof(sorgu),"UPDATE `hesaplar` SET `Bakiye` = %d WHERE `forumID` = '%d'", bakiye - miktar, OyuncuBilgi[oyuncuid][oHesap]);
	mysql_query(mysqlB, sorgu);
	return 1;
}

stock ParaDuzenle(playerid, miktar)
{
	OyuncuBilgi[playerid][oPara] = 0;
	return ParaEkle(playerid, miktar);
}

stock ParaEkle(playerid, miktar)
{
	OyuncuBilgi[playerid][oPara] += miktar;
	new bilgi_goster[64];
	if(miktar < 0) format(bilgi_goster, sizeof(bilgi_goster), "~r~%s", NumaraFormati(miktar));
	else if(miktar > 0) format(bilgi_goster, sizeof(bilgi_goster), "~g~+%s", NumaraFormati(miktar));
	GameTextForPlayer(playerid, bilgi_goster, 1500, 1);
	return GivePlayerMoney(playerid, miktar);
}

stock KickEx(playerid)
{
    if(IsPlayerNPC(playerid)) return false;
	OyuncuKaydet(playerid);
	SetPVarInt(playerid, "Kick", 1);
	return SetTimerEx("KickTimer", 200, false, "d", playerid);
}

public GirisKick(playerid)
{
	if(OyuncuBilgi[playerid][oGiris] == true || IsPlayerAdmin(playerid) || OyuncuBilgi[playerid][oHesap] > 0 || OyuncuYuklemeYapiyor[playerid] == true) return 1;
	
	return KickEx(playerid);
}

public KickTimer(playerid) return Kick(playerid);

forward AntiSlap(playerid);
public AntiSlap(playerid)
{
    if(Spawned[playerid] == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        if(GetPlayerSpeed3(playerid) >= 400 && !IsPlayerInWater(playerid))
        {
            if(GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID)
            {
                YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s, Slapper hilesi kullandýðý için oyundan atýldý. (CODE-1)", OyuncuIsim(playerid));
                KickEx(playerid);
            }
        }
    }
    return 1;
}

forward Slapper();
public Slapper()
{
for(new i = 0; i < MAX_PLAYERS; i++)
if(GetPlayerSpeed3(i) >= 500 && !IsPlayerInWater(i))
{
//GetPlayerPos(i, bitx, bity, bitz);
//SetPlayerPos(i, bitx, bity, bitz);
YoneticiMesaji(RENK_ACIKKIRMIZI, "ADM: %s Slapper hilesi kullanmaya çalýþtýðý için atýldý. (CODE-2)", OyuncuIsim(i));
KickEx(i);
}
}

stock GetPlayerSpeed3(playerid)
{
    new Float:ST[4];
    if(IsPlayerInAnyVehicle(playerid))
    GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
    else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 179.28625;
    return floatround(ST[3]);
}

stock GetPlayerSpeed2(playerid)
{
    new Float:ST[4];
    if(IsPlayerInAnyVehicle(playerid))
    GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
    else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 179.28625;
    return floatround(ST[3]);
}

stock OyuncuHiz(playerid)
{
    new Float:ST[4];
    if(IsPlayerInAnyVehicle(playerid))
    GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
    else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 179.28625;
    return floatround(ST[3]);
}

stock OyuncuIsim(playerid, cizgi = 0)
{
	new isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, isim, sizeof(isim));
    if(!isnull(OyuncuBilgi[playerid][oSahteIsim])) format(isim, sizeof(isim), "%s", OyuncuBilgi[playerid][oSahteIsim]);
	if(cizgi == 0) for(new i = 0, len = strlen(isim); i < len; i ++) if(isim[i] == '_') isim[i] = ' ';
	if(OyuncuBilgi[playerid][oMaskeDurum]) format(isim, sizeof(isim), "Maske #%d", OyuncuBilgi[playerid][oMaskeID]);
	return isim;
}

stock OyuncuSoyadi(playerid, soyad[], ayar = 0)
{
    new isim_yazi[2][MAX_PLAYER_NAME];

	if(ayar != 0) {
		new	oyuncu_isim[MAX_PLAYER_NAME + 1];
	    GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	    split(oyuncu_isim, isim_yazi, '_');
	} else split(soyad, isim_yazi, '_');
	return isim_yazi[1];
}

stock SoyadKilitlimi(oyuncuid, soyad[])
{
	new sorgu[256], Cache:sorgu_cache;
	format(sorgu, sizeof(sorgu), "SELECT * FROM `soyadikilitleri` WHERE `Soyad` = '%s'", SQL_ReturnEscaped(soyad), OyuncuBilgi[oyuncuid][oHesap]);
	sorgu_cache = mysql_query(mysqlB, sorgu);
	if(cache_num_rows()) return 1;

	cache_delete(sorgu_cache);
	return 0;
}

stock TaserKontrol(playerid) return (GetPlayerWeapon(playerid) == 23 && OyuncuBilgi[playerid][oTaser]);
stock BeanbagKontrol(playerid) return (GetPlayerWeapon(playerid) == 25 && OyuncuBilgi[playerid][oBeanbag]);

stock SilahIsim(silahid)
{
	new silahisim[32];
	GetWeaponName(silahid, silahisim, sizeof(silahisim));

	if(!silahid) silahisim = "Yumruk";
	else if(silahid == 27) silahisim = "SPAS12";
	else if(silahid == 18) silahisim = "Molotov Cocktail";
	else if(silahid == 44) silahisim = "Nightvision";
	else if(silahid == 45) silahisim = "Infrared";
	else if(silahid == 28) silahisim = "Uzi";
	return silahisim;
}

stock insaat_Kayit()
{
	new kaydet[1024];
	format(kaydet, sizeof(kaydet), "UPDATE `insaatayarlar` SET `PosX` = '%.4f', `PosY` = '%.4f', `PosZ` = '%.4f', `Ucret` = '%d', `Kota` = '%d' WHERE `ID` = '1'",
		insaat_Pos[0],
		insaat_Pos[1],
		insaat_Pos[2],
		insaat_Ucret,
		insaat_Kota
	);
	return 1;
}

stock OyuncuKaydet(playerid)
{
	if(!OyuncuBilgi[playerid][oGiris] || !IsPlayerConnected(playerid)) return 0;
	if(OyuncuBilgi[playerid][oBirlik] > -1) OyuncuBilgi[playerid][oBirlikSQLID] = BirlikBilgi[OyuncuBilgi[playerid][oBirlik]][birlikID];
	if(OyuncuBilgi[playerid][oPaintball] == -1 && OyuncuBilgi[playerid][oAdminDurum] == false && OyuncuBilgi[playerid][oEtkinlikDurum] == false) {
		GetPlayerPos(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
		GetPlayerFacingAngle(playerid, OyuncuBilgi[playerid][oPos][3]);
		OyuncuBilgi[playerid][oInterior] = GetPlayerInterior(playerid);
		OyuncuBilgi[playerid][oVW] = GetPlayerVirtualWorld(playerid);
		GetPlayerArmour(playerid, OyuncuBilgi[playerid][oZirh]);
		GetPlayerHealth(playerid, OyuncuBilgi[playerid][oCan]);
		SilahKaydet(playerid);
	}
	new kaydet[4096];
	format(kaydet, sizeof(kaydet), "UPDATE `oyuncular` SET `Kiyafet` = '%d', `x` = '%.4f', `y` = '%.4f', `z` = '%.4f', `a` = '%.4f', `Can` = '%.4f', `Zirh` = '%.4f', `hesap` = '%d', `SahteLevel` = '%d'",
		OyuncuBilgi[playerid][oKiyafet],
		OyuncuBilgi[playerid][oPos][0],
		OyuncuBilgi[playerid][oPos][1],
		OyuncuBilgi[playerid][oPos][2],
		OyuncuBilgi[playerid][oPos][3],
		OyuncuBilgi[playerid][oCan],
		OyuncuBilgi[playerid][oZirh],
		OyuncuBilgi[playerid][oHesap],
		OyuncuBilgi[playerid][oSahteLevel]
	);
	for (new i = 0; i < 13; i ++) {
		format(kaydet, sizeof(kaydet), "%s, `Silah%d` = '%d', `Mermi%d` = '%d'", kaydet, i + 1, OyuncuBilgi[playerid][oSilah][i], i + 1, OyuncuBilgi[playerid][oMermi][i]);
	}
	format(kaydet, sizeof(kaydet), "%s, `Para` = '%d', `interior` = '%d', `vw` = '%d', `Cinsiyet` = '%d', `Level` = '%d', `Exp` = '%d', `Dakika` = '%d', `OynamaSaati` = '%d', `DogumYeri` = '%d', `AvukatBekleme` = '%d', `AvukatYetenek` = '%d'",
		kaydet,
		OyuncuBilgi[playerid][oPara],
		OyuncuBilgi[playerid][oInterior],
		OyuncuBilgi[playerid][oVW],
		OyuncuBilgi[playerid][oCinsiyet],
		OyuncuBilgi[playerid][oSeviye],
		OyuncuBilgi[playerid][oExp],
		OyuncuBilgi[playerid][oDakika],
		OyuncuBilgi[playerid][oOynamaSaati],
		OyuncuBilgi[playerid][oDogumYeri],
		OyuncuBilgi[playerid][oAvukatBekleme],
		OyuncuBilgi[playerid][oAvukatYetenek]
	);
	format(kaydet, sizeof(kaydet), "%s, `isim` = '%s', `yaratildi` = '%d', `birlik` = '%d', `birlikrutbe` = '%d', `BirlikLider` = '%d', `Yarali` = '%d', `YaraliSure` = '%d', `CK` = '%d', `EkstraPayday` = '%d', `SahteIsim` = '%s'",
		kaydet,
		SQL_ReturnEscaped(OyuncuBilgi[playerid][oIsim]),
		OyuncuBilgi[playerid][oKarakterYaratildi],
		OyuncuBilgi[playerid][oBirlikSQLID],
		OyuncuBilgi[playerid][oBirlikRutbe],
		OyuncuBilgi[playerid][oBirlikLider],
		OyuncuBilgi[playerid][oYarali],
		OyuncuBilgi[playerid][oYaraliSure],
		OyuncuBilgi[playerid][oCK],
		OyuncuBilgi[playerid][oEkstraPayday],
		SQL_ReturnEscaped(OyuncuBilgi[playerid][oSahteIsim])
	);
	format(kaydet, sizeof(kaydet), "%s, `isbasi` = '%b', `MeslekIsbasi` = '%b', `GKiyafet` = '%d', `Ehliyet` = '%b', `Kibrit` = '%d', `Cakmak` = '%b', `Odun` = '%d', `HesapNumarasi` = '%d', `TenRengi` = '%d', `GPS` = '%d', `TamirKiti` = '%d', `IpUrun` = '%d'",
		kaydet,
		OyuncuBilgi[playerid][oIsbasi],
		OyuncuBilgi[playerid][oMeslekIsbasi],
		OyuncuBilgi[playerid][oGeciciKiyafet],
		OyuncuBilgi[playerid][oEhliyet],
		OyuncuBilgi[playerid][oKibrit],
		OyuncuBilgi[playerid][oCakmak],
		OyuncuBilgi[playerid][oOdun],
		OyuncuBilgi[playerid][oHesapNumarasi],
		OyuncuBilgi[playerid][oTenRengi],
		OyuncuBilgi[playerid][oGPS],
		OyuncuBilgi[playerid][oTamirKiti],
		OyuncuBilgi[playerid][oIpUrun]
	);
	format(kaydet, sizeof(kaydet), "%s, `KarakterDetay` = '%s', `SacRengi` = '%d', `Boy` = '%d', `Kilogram` = '%d', `GozRengi` = '%d'",
		kaydet,
		SQL_ReturnEscaped(OyuncuBilgi[playerid][oKarakterDetay]),
		OyuncuBilgi[playerid][oSacRengi],
		OyuncuBilgi[playerid][oBoy],
		OyuncuBilgi[playerid][oKilogram],
		OyuncuBilgi[playerid][oGozRengi]
	);
	format(kaydet, sizeof(kaydet), "%s, `Sigara` = '%d', `BankaPara` = '%d', `Telefon` = '%d', `TelefonNumarasi` = '%d', `Gubre` = '%d', `Saksi` = '%d', `Maymuncuk` = '%d', `KamyoncuTeslimat` = '%d', `DovusStil` = '%d', `NewbieMute` = '%d'",
		kaydet,
		OyuncuBilgi[playerid][oSigara],
		OyuncuBilgi[playerid][oBankaPara],
		OyuncuBilgi[playerid][oTelefon],
		OyuncuBilgi[playerid][oTelefonNumarasi],
		OyuncuBilgi[playerid][oGubre],
		OyuncuBilgi[playerid][oSaksi],
		OyuncuBilgi[playerid][oMaymuncuk],
		OyuncuBilgi[playerid][oKamyoncuTeslimat],
		OyuncuBilgi[playerid][oDovusStil],
		OyuncuBilgi[playerid][oNewbieMute]
	);
	format(kaydet, sizeof(kaydet), "%s, `Tohum` = '%d', `IslenmemisMadde` = '%d',`Uyusturucu` = '%d', `IlkYardim` = '%d', `Hapis` = '%d', `ICHapis` = '%d', `Bidon` = '%d', `BidonBenzin` = '%d', `PRadyo` = '%d', `Frekans` = '%d'",
		kaydet,
		OyuncuBilgi[playerid][oTohum],
		OyuncuBilgi[playerid][oIslenmemisMadde],
		OyuncuBilgi[playerid][oUyusturucu],
		OyuncuBilgi[playerid][oIlkYardim],
		OyuncuBilgi[playerid][oHapisSure][0],
		OyuncuBilgi[playerid][oHapisSure][1],
		OyuncuBilgi[playerid][oBidon],
		OyuncuBilgi[playerid][oBidonBenzin],
		OyuncuBilgi[playerid][oPortatifRadyo],
		OyuncuBilgi[playerid][oFrekans]
	);
	format(kaydet, sizeof(kaydet), "%s, `VatandaslikNo` = '%d', `Ruhsat` = '%d', `IDHapis` = '%d', `EkstraDil` = '%d', `Birim` = '%d', `boombox` = '%d', `EkEvSlot` = '%d', `EkAracSlot` = '%d', `vPoint` = '%d', `BankaSifre` = '%d'",
		kaydet,
		OyuncuBilgi[playerid][oVatandaslikNo],
		OyuncuBilgi[playerid][oRuhsat],
		OyuncuBilgi[playerid][oHapisID],
		OyuncuBilgi[playerid][oEkstraDil],
		OyuncuBilgi[playerid][oBirim],
		OyuncuBilgi[playerid][oMuzikKutusu],
		OyuncuBilgi[playerid][oEkEvSlot],
		OyuncuBilgi[playerid][oEkAracSlot],
		OyuncuBilgi[playerid][oVPoint],
		OyuncuBilgi[playerid][oBankaSifre]
	);
	format(kaydet, sizeof(kaydet), "%s, `Zar` = '%d', `Uyari` = '%d', `Aktif` = '%d', `DinlenenYayin` = '%d', `Hitman` = '%d', `GaspSure` = '%d', `HirsizVIP` = '%d', `SilahDelay` = '%d', `SilahHakki` = '%d', `YuruyusStil` = '%d', `Papaz` = '%d'",
		kaydet,
		OyuncuBilgi[playerid][oZar],
		OyuncuBilgi[playerid][oUyari],
		OyuncuBilgi[playerid][oAktif],
		OyuncuBilgi[playerid][oDinlenenYayin],
		OyuncuBilgi[playerid][oHitman],
		OyuncuBilgi[playerid][oGaspSure],
		OyuncuBilgi[playerid][oHirsizVIPTeslim],
		OyuncuBilgi[playerid][oSilahDelay],
		OyuncuBilgi[playerid][oSilahHakki],
		OyuncuBilgi[playerid][oYuruyusStil],
		OyuncuBilgi[playerid][oPapaz]
	);
	format(kaydet, sizeof(kaydet), "%s, `oSonGiris` = '%s', `Maske` = '%d', `MaskeID` = '%d', `VIP` = '%d', `VIPSure` = '%d', `Hediye` = '%d', `UyusturucuBoost` = '%d', `Kelepce` = '%d', `Meslek` = '%d', `AvukatLisans` = '%d', `Unlu` = '%d' WHERE `ID` = '%d'",
		kaydet,
		SQL_ReturnEscaped(Tarih()),
		OyuncuBilgi[playerid][oMaske],
		OyuncuBilgi[playerid][oMaskeID],
		OyuncuBilgi[playerid][oVIP],
		OyuncuBilgi[playerid][oVIPSure],
		OyuncuBilgi[playerid][oHediye],
		OyuncuBilgi[playerid][oUyusturucuBoost],
		OyuncuBilgi[playerid][oKelepceli],
		OyuncuBilgi[playerid][oMeslek],
		OyuncuBilgi[playerid][oAvukatLisans],
		OyuncuBilgi[playerid][oUnlu],
		OyuncuBilgi[playerid][oID]
	);
	mysql_tquery(mysqlB, kaydet);

	format(kaydet, sizeof(kaydet), "UPDATE `oyuncular` SET `BalikYetenek` = '%d', `Baliklar` = '%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d', `Yemler` = '%d|%d|%d|%d|%d'",
		OyuncuBilgi[playerid][oBalikYetenek],
		OyuncuBilgi[playerid][oBaliklar][0],
		OyuncuBilgi[playerid][oBaliklar][1],
		OyuncuBilgi[playerid][oBaliklar][2],
		OyuncuBilgi[playerid][oBaliklar][3],
		OyuncuBilgi[playerid][oBaliklar][4],
		OyuncuBilgi[playerid][oBaliklar][5],
		OyuncuBilgi[playerid][oBaliklar][6],
		OyuncuBilgi[playerid][oBaliklar][7],
		OyuncuBilgi[playerid][oBaliklar][8],
		OyuncuBilgi[playerid][oBaliklar][9],
		OyuncuBilgi[playerid][oBaliklar][10],
		OyuncuBilgi[playerid][oBaliklar][11],
		OyuncuBilgi[playerid][oBaliklar][12],
		OyuncuBilgi[playerid][oBaliklar][13],
		OyuncuBilgi[playerid][oBaliklar][14],
		OyuncuBilgi[playerid][oYemler][0],
		OyuncuBilgi[playerid][oYemler][1],
		OyuncuBilgi[playerid][oYemler][2],
		OyuncuBilgi[playerid][oYemler][3],
		OyuncuBilgi[playerid][oYemler][4]
	);
	format(kaydet, sizeof(kaydet), "%s, `MadenYetenek` = '%d', `Madenler` = '%d|%d|%d|%d|%d' WHERE `ID` = '%d'",
	    kaydet,
		OyuncuBilgi[playerid][oMadenYetenek],
		OyuncuBilgi[playerid][oMadenler][0],
		OyuncuBilgi[playerid][oMadenler][1],
		OyuncuBilgi[playerid][oMadenler][2],
		OyuncuBilgi[playerid][oMadenler][3],
		OyuncuBilgi[playerid][oMadenler][4],
		/*OyuncuBilgi[playerid][oGovde],
		OyuncuBilgi[playerid][oNamlu],
		OyuncuBilgi[playerid][oHazne],
		OyuncuBilgi[playerid][oUretimSure],
		OyuncuBilgi[playerid][oUretimSilah],*/
  		OyuncuBilgi[playerid][oID]
	);
	mysql_tquery(mysqlB, kaydet);

	format(kaydet, sizeof(kaydet), "UPDATE `hesaplar` SET `AdminIsim` = '%s', `Admin` = '%d', `DestekEkibi` = '%d', `EventMod` = '%d', `BirlikMod` = '%d', `RaporSayisi` = '%d', `SoruSayisi` = '%d', `EkSlot` = '%d', `OneriJetonu` = '%d', `Referans` = '%s' WHERE `forumID` = '%d'",
		SQL_ReturnEscaped(OyuncuBilgi[playerid][oAdminNick]),
		OyuncuBilgi[playerid][oAdmin],
		OyuncuBilgi[playerid][oDestekEkibi],
		OyuncuBilgi[playerid][oEventMod],
		OyuncuBilgi[playerid][oBirlikMod],
		OyuncuBilgi[playerid][oRaporSayisi],
		OyuncuBilgi[playerid][oSoruSayisi],
		OyuncuBilgi[playerid][oEkSlot],
		OyuncuBilgi[playerid][oOneriJetonu],
		SQL_ReturnEscaped(OyuncuBilgi[playerid][oReferans]),
  		OyuncuBilgi[playerid][oHesap]
	);
	mysql_tquery(mysqlB, kaydet);
	return 1;
}

stock OyuncuCinsiyetSec(playerid)
	return DialogGoster(playerid, DIALOG_CINSIYET, DIALOG_STYLE_MSGBOX, "vRP: Cinsiyet Seçimi", "Karakterinizin cinsiyetini seçin:", "Erkek", "Kadýn");

stock OyuncuTenRengiSec(playerid)
	return DialogGoster(playerid, DIALOG_TEN_RENGI, DIALOG_STYLE_TABLIST, "vRP: Ten Rengi Seçimi", "Beyaz\nSiyah", "Seç", "");

stock SendClientMessageEx(playerid, color, const text[], {Float, _}:...)
{
	static args, str[144];
	if((args = numargs()) == 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while (--args >= 3)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendSplitMessage(playerid, color, str);

		#emit RETN
	}
	return true;
}

stock SendSplitMessage(playerid, color, final[])
{
	static buffer[EX_SPLITLENGTH + 5], len;
	len = strlen(final);
	if(len > EX_SPLITLENGTH)
	{
	    new times = (len/EX_SPLITLENGTH);
		for(new i = 0; i < times+1; i++)
		{
			strdel(buffer, 0, EX_SPLITLENGTH+5);
			if(len-(i*EX_SPLITLENGTH)>EX_SPLITLENGTH)
			{
				strmid(buffer, final, EX_SPLITLENGTH*i, EX_SPLITLENGTH*(i+1));
				format(buffer, sizeof(buffer), "%s ...", buffer);
			}
			else
			{
			    strmid(buffer, final, EX_SPLITLENGTH*i, len);
			}
			SendClientMessage(playerid, color, buffer);
		}
	}
	else SendClientMessage(playerid, color, final);
}

stock BirlikMesaji(birlikid, renk, const str[], {Float,_}:...)
{
	static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if(args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for(end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if(OyuncuBilgi[i][oBirlik] == birlikid) {
		    SendSplitMessage(i, renk, string);
		}
		return 1;
	}
	foreach (new i : Player) if(OyuncuBilgi[i][oBirlik] == birlikid) {
 		SendClientMessage(i, renk, str);
	}
	return 1;
}

stock BirlikMesajiEx(tip, color, const str[], {Float,_}:...)
{
	static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if(args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for(end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if(OyuncuBilgi[i][oBirlik] != -1 && OyuncuBirlikTuru(i) == tip) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if(OyuncuBilgi[i][oBirlik] != -1 && OyuncuBirlikTuru(i) == tip) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock ProxDetectorArac(Float:mesafe, playerid, string[], renk1, renk2, renk3, renk4, renk5)
{
    new Float:oyuncu_pos[3];
    GetPlayerPos(playerid, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2]);

    foreach(new i : Player) {
        if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid) && (IsPlayerInAnyVehicle(i) && AracCamDurum[GetPlayerVehicleID(i)] == true || !IsPlayerInAnyVehicle(i))) {
            if(IsPlayerInRangeOfPoint(i, mesafe / 16, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2])) {
                SendClientMessage(i, renk1, string);
            }
            else if(IsPlayerInRangeOfPoint(i, mesafe / 8, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2])) {
                SendClientMessage(i, renk2, string);
            }
            else if(IsPlayerInRangeOfPoint(i, mesafe / 4, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2])) {
                SendClientMessage(i, renk3, string);
            }
            else if(IsPlayerInRangeOfPoint(i, mesafe / 2, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2])) {
                SendClientMessage(i, renk4, string);
            }
            else if(IsPlayerInRangeOfPoint(i, mesafe, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2])) {
                SendClientMessage(i, renk5, string);
            }
        }
    }
    return 1;
}

stock ProxDetector(Float:mesafe, playerid, string[], renk1, renk2, renk3, renk4, renk5)
{
    new Float:oyuncu_pos[3];
    GetPlayerPos(playerid, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2]);

    foreach(new i : Player) {
		if((InsideShamal[playerid] == GetPlayerVehicleID(i) && GetPlayerState(i) == 2) || (InsideShamal[i] == GetPlayerVehicleID(playerid) && GetPlayerState(playerid) == 2) || (InsideShamal[playerid] != INVALID_VEHICLE_ID && InsideShamal[playerid] == InsideShamal[i])) {
            SendClientMessage(i, renk1, string);
        }
        else if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) {
            if(IsPlayerInRangeOfPoint(i, mesafe / 16, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2])) {
                SendClientMessage(i, renk1, string);
            }
            else if(IsPlayerInRangeOfPoint(i, mesafe / 8, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2])) {
                SendClientMessage(i, renk2, string);
            }
            else if(IsPlayerInRangeOfPoint(i, mesafe / 4, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2])) {
                SendClientMessage(i, renk3, string);
            }
            else if(IsPlayerInRangeOfPoint(i, mesafe / 2, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2])) {
                SendClientMessage(i, renk4, string);
            }
            else if(IsPlayerInRangeOfPoint(i, mesafe, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2])) {
                SendClientMessage(i, renk5, string);
            }
        }
    }
    return 1;
}

stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if(args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for(end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if(YakinlikKontrol(i, playerid, radius)) {
  				SendSplitMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if(YakinlikKontrol(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock YoneticiMesaji(color, const str[], {Float,_}:...)
{
	static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if(args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for(end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if(OyuncuBilgi[i][oAdmin] > 0) {
  				SendSplitMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if(OyuncuBilgi[i][oAdmin] > 0) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock DestekMesaji(color, const str[], {Float,_}:...)
{
	static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if(args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for(end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if(OyuncuBilgi[i][oDestekEkibi] > 0 || OyuncuBilgi[i][oAdmin] > 0)
  				SendSplitMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if(OyuncuBilgi[i][oDestekEkibi] > 0 || OyuncuBilgi[i][oAdmin] > 0)
			SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendClientMessageToAllEx(color, const text[], {Float, _}:...)
{
	static args, str[144];

	if((args = numargs()) == 2)
	{
	    SendClientMessageToAll(color, text);
	}
	else
	{
		while (--args >= 2)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessageToAll(color, str);
		#emit RETN
	}
	return 1;
}

stock split(const src[], dest[][], const delimiter)
{
    new n_pos,num,old,str[1];
    str[0] = delimiter;
    while(n_pos != -1)
    {
        n_pos = strfind(src,str,false,n_pos+1);
        strmid(dest[num++], src, (!num)?0:old+1,(n_pos==-1)?strlen(src):n_pos,256);
        old=n_pos;
    }
    return 1;
}

stock NumaraFormati(numara, onek[] = "$")
{
	static mesaj[32], length;
	format(mesaj, sizeof(mesaj), "%d", (numara < 0) ? (-numara) : (numara));

	if((length = strlen(mesaj)) > 3)
	{
		for(new i = length, l = 0; --i >= 0; l ++) {
		    if((l > 0) && (l % 3 == 0)) strins(mesaj, ",", i + 1);
		}
	}
	if(onek[0] != 0)
	    strins(mesaj, onek, 0);

	if(numara < 0)
		strins(mesaj, "-", 0);

	return mesaj;
}

stock Float:vericek_float(row, const field_name[])
{
	static Float:str;
	cache_get_value_name_float(row, field_name, str);
	return str;
}

stock vericek_int(row, const field_name[])
{
    static str;
    cache_get_value_name_int(row, field_name, str);
    return str;
}

stock vericek_bool(row, const field_name[])
{
    static bool:test, bool:test2;
    cache_get_value_name_bool(row, field_name, test);
    switch(test) {
		case 1: test2 = true;
		default: test2 = false;
    }
    return test2;
}

stock vericek_varchar(row, const field_name[])
{
    new bilgi[1024];
    cache_get_value_name(row, field_name, bilgi);
    return bilgi;
}

stock RolePlayIsimKontrol(const isim[]) {
	if(!isim[0] || strfind(isim, "_") == -1)
	    return 0;

	else for(new i = 0, len = strlen(isim); i != len; i ++) {
	    if((i == 0) && (isim[i] < 'A' || isim[i] > 'Z'))
	        return 0;

		else if((i != 0 && i < len  && isim[i] == '_') && (isim[i + 1] < 'A' || isim[i + 1] > 'Z'))
		    return 0;

		else if((isim[i] < 'A' || isim[i] > 'Z') && (isim[i] < 'a' || isim[i] > 'z') && isim[i] != '_' && isim[i] != '.')
		    return 0;
	}
	return 1;
}

stock YakinlikKontrol(playerid, hedefid, Float:mesafe)
{
	new Float:fX, Float:fY, Float:fZ;
	GetPlayerPos(hedefid, fX, fY, fZ);
	return (GetPlayerInterior(playerid) == GetPlayerInterior(hedefid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(hedefid)) && IsPlayerInRangeOfPoint(playerid, mesafe, fX, fY, fZ);
}

stock OyuncuyuOyuncuyaGonder(playerid, hedefid)
{
	GetPlayerPos(hedefid, OyuncuBilgi[hedefid][oPos][0], OyuncuBilgi[hedefid][oPos][1], OyuncuBilgi[hedefid][oPos][2]);
	HileKontrolGecikme[playerid] = gettime() + 2;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    AracPosDegistir(GetPlayerVehicleID(playerid), OyuncuBilgi[hedefid][oPos][0], OyuncuBilgi[hedefid][oPos][1] + 2, OyuncuBilgi[hedefid][oPos][2]);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(hedefid));
	}
	else OyuncuPosDegistir(playerid, OyuncuBilgi[hedefid][oPos][0] + 1, OyuncuBilgi[hedefid][oPos][1], OyuncuBilgi[hedefid][oPos][2]);
	SetPlayerInterior(playerid, GetPlayerInterior(hedefid));
	return SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(hedefid));
}

stock AracPosDegistir(aracid, Float:pos_x, Float:pos_y, Float:pos_z)
{
	if(!IsValidVehicle(aracid)) return 0;
    AracSonPos[aracid][0] = pos_x;
	AracSonPos[aracid][1] = pos_y;
	AracSonPos[aracid][2] = pos_z;
	foreach(new i : Player) if(OyuncuBilgi[i][oGiris] == true && IsPlayerInVehicle(i, aracid)) OyuncuBilgi[i][oPos][0] = pos_x, OyuncuBilgi[i][oPos][1] = pos_y, OyuncuBilgi[i][oPos][2] = pos_z;
	return SetVehiclePos(aracid, pos_x, pos_y, pos_z);
}

stock OyuncuSpawnla(playerid)
{
	OyuncuPosDegistir(playerid, 1743.0420, -1864.4590, 13.5738);
	SetPlayerFacingAngle(playerid, 360);
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, true);
	if(OyuncuBilgi[playerid][oGiris] == false) OyuncuBilgi[playerid][oGiris] = true;
	return 1;
}

stock AracSpawnla(aracid)
{
	AracPosDegistir(aracid, 1735.8523,-1854.9976,13.4141);
	SetVehicleZAngle(aracid, 270.0);
	LinkVehicleToInterior(aracid, 0);
	return 1;
}

stock Ev_SahipKontrol(playerid, evid)
{
    if(EvBilgi[evid][evKullanimda] && EvBilgi[evid][evSahip] == OyuncuBilgi[playerid][oID])
		return 1;

	return 0;
}

stock Bina_SahipKontrol(playerid, binaid)
{
    if(BinaBilgi[binaid][bKullanimda] && BinaBilgi[binaid][binaSahip] == OyuncuBilgi[playerid][oID])
		return 1;

	return 0;
}

stock Bina_AnahtarKontrol(playerid, binaid)
{
    if(BinaBilgi[binaid][bKullanimda] == false) return 0;

	for(new i = 0; i != 5; i ++) if(BinaBilgi[binaid][binaAnahtar][i] == OyuncuBilgi[playerid][oID]) return 1;
	return 0;
}

stock Ev_AnahtarKontrol(playerid, evid)
{
    if(EvBilgi[evid][evKullanimda] == false) return 0;

	for(new i = 0; i != 5; i ++) if(EvBilgi[evid][evAnahtar][i] == OyuncuBilgi[playerid][oID]) return 1;
	return 0;
}

stock Isyeri_SahipKontrol(playerid, isyeriid)
{
    if(IsyeriBilgi[isyeriid][isyeriKullanimda] && IsyeriBilgi[isyeriid][isyeriSahip] == OyuncuBilgi[playerid][oID]) return 1;
	return 0;
}

stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius) {

	new Float:Floats[3];

	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

stock GetClosestCar(iPlayer, iException = INVALID_VEHICLE_ID, Float: fRange = Float: 0x7F800000) {

	new iReturnID = -1, Float: fVehiclePos[4];

	foreach(new i : Vehicle) if(GetVehicleModel(i) && i != iException) {
		GetVehiclePos(i, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
		if((fVehiclePos[3] = GetPlayerDistanceFromPoint(iPlayer, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2])) < fRange) {
			fRange = fVehiclePos[3];
			iReturnID = i;
		}
	}
	return iReturnID;
}

stock GetEngineStatus(vehicleid)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if(engine != 1) return 0;
	return 1;
}

stock GetHoodStatus(vehicleid)
{
	static engine, lights, alarm, doors, bonnet, boot, objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if(bonnet != 1) return 0;
	return 1;
}

stock GetTrunkStatus(vehicleid)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if(boot != 1) return 0;
	return 1;
}

stock GetLightStatus(vehicleid)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(lights != 1) return 0;
	return 1;
}

stock SetEngineStatus(aracid, bool:durum)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;

	GetVehicleParamsEx(aracid, engine, lights, alarm, doors, bonnet, boot, objective);
	AracMotor[aracid] = durum;
	return SetVehicleParamsEx(aracid, durum, lights, alarm, doors, bonnet, boot, objective);
}

stock SetLightStatus(vehicleid, status)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, status, alarm, doors, bonnet, boot, objective);
}

stock SetTrunkStatus(vehicleid, status)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, status, objective);
}

stock SetHoodStatus(vehicleid, status)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, status, boot, objective);
}

stock Arac_SahipKontrol(playerid, aracid)
{
    if((AracBilgi[aracid][aracKullanimda] && AracBilgi[aracid][aracSahip] != 0) && AracBilgi[aracid][aracSahip] == OyuncuBilgi[playerid][oID]) return 1;
	return 0;
}

stock Arac_Anahtar(playerid, aracid)
{
	if(!OyuncuBilgi[playerid][oGiris] || OyuncuBilgi[playerid][oID] == -1) return false;
    if(AracBilgi[aracid][aracAnahtar] == OyuncuBilgi[playerid][oID]) return true;
	return false;
}

stock CamKontrol(aracid)
{
	new const aracCamListesi[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
	    1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1,
		1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
	new modelid = GetVehicleModel(aracid);

    if(modelid < 400 || modelid > 611) return 0;

    return (aracCamListesi[modelid - 400]);
}

stock IsEngineVehicle(vehicleid)
{
	new const g_aengineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid;
	modelid = GetVehicleModel(vehicleid);
    if(modelid < 400 || modelid > 611)
        return 0;

    return (g_aengineStatus[modelid - 400]);
}

stock IsDoorVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
		    return 1;

		case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
		    return 1;

		case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
	}
	return 0;
}

stock randomEx(min, max) return random(max-min)+min;

stock UcakPos(&Float:x, &Float:y, &Float:z, &Float:angle)
{
	new bool:sayi[3] = false;
	foreach(new i : Vehicle) {
		if(IsVehicleInRangeOfPoint(i, 5.0, 1990.4822, -2253.2437, 13.7625)) sayi[0] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 1990.2947, -2316.3088, 14.4498)) sayi[1] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 1991.5443, -2381.9521, 14.4695)) sayi[2] = true;
	}
	for(new a = 0; a != sizeof(sayi); a++) if(sayi[a] == false) {
		switch(a) {
			case 0: x = 1990.4822, y = -2253.2437, z = 13.7625, angle = 90;
			case 1: x = 1990.2947, y = -2316.3088, z = 14.4498, angle = 90;
			case 2: x = 1991.5443, y = -2381.9521, z = 14.4695, angle = 90;
		}
		return 1;
	}
	x = 0.0, y = 0.0, z = 0.0, angle = 0;
	return 0;
}

stock MotorPos(&Float:x, &Float:y, &Float:z, &Float:angle)
{
	new bool:sayi[5] = false;
	foreach(new i : Vehicle) {
		if(IsVehicleInRangeOfPoint(i, 2.0, 2491.5122, -1756.6144, 13.0813)) sayi[0] = true;
		if(IsVehicleInRangeOfPoint(i, 2.0, 2491.3098, -1754.3433, 13.0815)) sayi[1] = true;
		if(IsVehicleInRangeOfPoint(i, 2.0, 2490.9263, -1751.4658, 13.0834)) sayi[2] = true;
		if(IsVehicleInRangeOfPoint(i, 2.0, 2490.9958, -1748.8616, 13.0785)) sayi[3] = true;
		if(IsVehicleInRangeOfPoint(i, 2.0, 2490.8540, -1746.5858, 13.0816)) sayi[4] = true;
	}
	for(new a = 0; a != sizeof(sayi); a++) if(sayi[a] == false) {
		switch(a) {
			case 0: x = 2491.5122, y = -1756.6144, z = 13.0813, angle = 270;
			case 1: x = 1990.2947, y = -1754.3433, z = 13.0815, angle = 270;
			case 2: x = 2491.3098, y = -1751.4658, z = 13.0834, angle = 270;
			case 3: x = 2490.9263, y = -1748.8616, z = 13.0785, angle = 270;
			case 4: x = 2490.8540, y = -1746.5858, z = 13.0816, angle = 270;
		}
		return 1;
	}
	x = 0.0, y = 0.0, z = 0.0, angle = 0;
	return 0;
}

stock TeknePos(&Float:x, &Float:y, &Float:z, &Float:angle)
{
	new bool:sayi[5] = false;
	foreach(new i : Vehicle) {
		if(IsVehicleInRangeOfPoint(i, 5.0, 177.9649, -1911.0031, 0.2192)) sayi[0] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 187.6609, -1912.6572, -0.0010)) sayi[1] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 199.8789, -1909.6235, 0.2172)) sayi[2] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 211.1281, -1910.3129, -0.0238)) sayi[3] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 222.3670, -1907.5513, -0.0074)) sayi[4] = true;
	}
	for(new a = 0; a != sizeof(sayi); a++) if(sayi[a] == false) {
		switch(a) {
			case 0: x = 177.9649, y = -1911.0031, z = 0.2192, angle = 180;
			case 1: x = 187.6609, y = -1912.6572, z = -0.0010, angle = 180;
			case 2: x = 199.8789, y = -1909.6235, z = 0.2172, angle = 180;
			case 3: x = 211.1281, y = -1910.3129, z = -0.0238, angle = 180;
			case 4: x = 222.3670, y = -1907.5513, z = -0.0074, angle = 180;
		}
		return 1;
	}
	x = 0.0, y = 0.0, z = 0.0, angle = 0;
	return 0;
}

stock LuksGaleriPos(&Float:x, &Float:y, &Float:z, &Float:angle)
{
	new bool:sayi[10] = false;
	foreach(new i : Vehicle) {
		if(IsVehicleInRangeOfPoint(i, 5.0, 567.5906, -1289.0666, 17.3917)) sayi[0] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 560.5906, -1290.0666, 17.3917)) sayi[1] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 535.5906, -1289.0666, 17.3917)) sayi[2] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 525.5906, -1282.0666, 17.3917)) sayi[3] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 535.5906, -1275.0666, 17.3917)) sayi[4] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 546.5906, -1265.0666, 17.3917)) sayi[5] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 563.5906, -1265.0666, 17.3917)) sayi[6] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 558.5906, -1278.0666, 17.3917)) sayi[7] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 550.5906, -1281.0666, 17.3917)) sayi[8] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 509.5906, -1295.0666, 17.3917)) sayi[9] = true;
	}
	for(new a = 0; a != sizeof(sayi); a++) if(sayi[a] == false) {
		switch(a) {
			case 0: x = 567.6114, y = -1289.6305, z = 17.8318, angle = 0;
			case 1: x = 560.2314, y = -1290.7733, z = 17.7528, angle = 0;
			case 2: x = 535.5065, y = -1289.6769, z = 17.7060, angle = 0;
			case 3: x = 525.2863, y = -1282.7058, z = 17.7244, angle = 0;
			case 4: x = 535.3898, y = -1275.9583, z = 17.7424, angle = 0;
			case 5: x = 546.6639, y = -1265.1558, z = 17.5693, angle = 180;
			case 6: x = 563.6664, y = -1265.7953, z = 17.6721, angle = 180;
			case 7: x = 558.7950, y = -1278.9882, z = 17.6960, angle = 180;
			case 8: x = 550.4377, y = -1281.7290, z = 17.8297, angle = 180;
			case 9: x = 509.0967, y = -1295.6044, z = 17.9752, angle = 180;
		}
		return 1;
	}
	x = 0.0, y = 0.0, z = 0.0, angle = 0;
	return 0;
}

stock DusukGaleriPos(&Float:x, &Float:y, &Float:z, &Float:angle)
{
	new bool:sayi[8] = false;
	foreach(new i : Vehicle) {
		if(IsVehicleInRangeOfPoint(i, 5.0, 2135.0012, -1145.6304, 24.5919)) sayi[0] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 2135.0415, -1139.9877, 25.2320)) sayi[1] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 2135.3772, -1134.8960, 25.6126)) sayi[2] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 2134.9226, -1129.5619, 25.5337)) sayi[3] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 2120.9119, -1128.8859, 25.2494)) sayi[4] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 2120.5303, -1135.0254, 25.2030)) sayi[5] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 2120.5552, -1140.5602, 24.8110)) sayi[6] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 2120.4705, -1145.4773, 24.4441)) sayi[7] = true;
	}
	for(new a = 0; a != sizeof(sayi); a++) if(sayi[a] == false) {
		switch(a) {
			case 0: x = 2135.0012, y = -1145.6304, z = 24.5919, angle = 87.4661;
			case 1: x = 2135.0415, y = -1139.9877, z = 25.2320, angle = 91.5102;
			case 2: x = 2135.3772, y = -1134.8960, z = 25.6126, angle = 90.1209;
			case 3: x = 2134.9226, y = -1129.5619, z = 25.5337, angle = 88.9053;
			case 4: x = 2120.9119, y = -1128.8859, z = 25.2494, angle = 271.5185;
			case 5: x = 2120.5303, y = -1135.0254, z = 25.2030, angle = 266.6817;
			case 6: x = 2120.5552, y = -1140.5602, z = 24.8110, angle = 269.9573;
			case 7: x = 2120.4705, y = -1145.4773, z = 24.4441, angle = 267.2291;
		}
		return 1;
	}
	x = 0.0, y = 0.0, z = 0.0, angle = 0;
	return 0;
}

stock KamyoncuPos(&Float:x, &Float:y, &Float:z, &Float:angle)
{
	new bool:sayi[2] = false;
	foreach(new i : Vehicle) {
		if(IsVehicleInRangeOfPoint(i, 5.0, 2172.1746,-2315.4912,13.5469)) sayi[0] = true;
		if(IsVehicleInRangeOfPoint(i, 5.0, 2168.6211,-2312.7949,13.5469)) sayi[1] = true;
	}
	for(new a = 0; a != sizeof(sayi); a++) if(sayi[a] == false) {
		switch(a) {
			case 0: x = 2172.1746, y = -2315.4912, z = 13.5469, angle = 315.7240;
			case 1: x = 2168.6211, y = -2312.7949, z = 13.5469, angle = 316.1647;
			
			
		}
		return 1;
	}
	x = 0.0, y = 0.0, z = 0.0, angle = 0;
	return 0;
}

stock GetVehicleBoot(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if(!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	new Float:pos[7];
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] - (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];
	return 1;
}

stock IsPlayerNearHood(playerid, vehicleid)
{
	new Float:fX, Float:fY, Float:fZ;
	GetVehicleHood(vehicleid, fX, fY, fZ);
	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ);
}

stock GetVehicleHood(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if(!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	new Float:pos[7];
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] + (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] + (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];
	return 1;
}

stock SilahHilesiIslem(playerid, aldigisilah)
{
	if(aldigisilah == 0) return 1;
	if(aldigisilah == 23 && OyuncuBilgi[playerid][oTaser] || aldigisilah == 25 && OyuncuBilgi[playerid][oBeanbag]) return 1;
	if(aldigisilah == WEAPON_PARACHUTE) return 1;
	if(OyuncuBilgi[playerid][oPaintball] != -1) return 1;
	if(OyuncuBilgi[playerid][oEtkinlikDurum] == true && (aldigisilah == EtkinlikBilgi[etkSilah][0] || aldigisilah == EtkinlikBilgi[etkSilah][1])) return 1;
	if((aldigisilah == 35 || aldigisilah == 36) && OyuncuBilgi[playerid][oSilah][SilahSlotBul[aldigisilah]] != aldigisilah) {
		new sorgu[128], oIP[16], isim[MAX_PLAYER_NAME];
		GetPlayerIp(playerid, oIP, sizeof(oIP));
		format(isim, sizeof(isim), "%03d", OyuncuBilgi[playerid][oHesap]);
		format(sorgu, sizeof(sorgu),"INSERT INTO yasaklamalar (Yasaklanan, Yasaklayan, Sebep, IP) VALUES ('%s','%s','%s','%s')", isim, "Sistem", "Hile (#13)", oIP);
		mysql_query(mysqlB, sorgu);
		SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "admCMD: %s, %s adlý kiþinin hesabýný yasakladý. sebep: %s", "Sistem", OyuncuIsim(playerid), "Hile (#13)");
		//KickEx(playerid);
		return 1;
	}
	new oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	for(new i = 0, len = strlen(oyuncu_isim); i < len; i ++) if(oyuncu_isim[i] == '_') oyuncu_isim[i] = ' ';
	if(GetPVarInt(playerid, "Kick") == 0) {
		SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "admCMD: Sistem, %s silah hilesi kullanýyo olabilir. Sebep: (#013-%d)", oyuncu_isim, aldigisilah);
		SilahKaydet(playerid);
	}
	/*
	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] %s(HESAP ID: %d) hile yaptýðý için kicklendi. (#013-%d)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oHesap], aldigisilah);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/hile.txt", "%s", log_icerik);
	return KickEx(playerid);
	*/
	return 1;
}

stock HileKickle(playerid, kod)
{
    if(IsPlayerNPC(playerid)) return false;
	new oyuncu_isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, oyuncu_isim, sizeof(oyuncu_isim));
	for(new i = 0, len = strlen(oyuncu_isim); i < len; i ++) if(oyuncu_isim[i] == '_') oyuncu_isim[i] = ' ';
	if(GetPVarInt(playerid, "Kick") == 0) {
	    if(kod == 24) SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "admCMD: Sistem, %s adlý kiþiyi oyundan attý. sebep: C-BUG (#%03d)", oyuncu_isim, kod);
		else SendClientMessageToAllEx(RENK_ACIKKIRMIZI, "admCMD: Sistem, %s adlý kiþiyi oyundan attý. sebep: Hile (#%03d)", oyuncu_isim, kod);
	}
	new log_icerik[144];
	format(log_icerik, sizeof(log_icerik), "[%s] %s(HESAP ID: %d) hile yaptýðý için kicklendi. (#%03d)", Tarih(), oyuncu_isim, OyuncuBilgi[playerid][oHesap], kod);
	Gunluk_LogKaydet(log_icerik);
	Log_Kaydet("loglar/hile.txt", "%s", log_icerik);
	return KickEx(playerid);
}

stock aracturisim(aracid)
{
	new tur[48];
	switch(AracBilgi[aracid][aracTur]) {
		case 1: tur = "Kurs Aracý";
		default: tur = "Yok";
	}
	return tur;
}

stock AracModel(model)
{
	new modelisim[32] = "Yok";
    if(model < 400 || model > 611) return modelisim;

	format(modelisim, sizeof(modelisim), aracIsimler[model - 400]);
	return modelisim;
}

stock OyuncuSilah(playerid)
{
	new silahid;
    silahid = GetPlayerWeapon(playerid);
	if(1 <= silahid <= 46 && OyuncuBilgi[playerid][oSilah][SilahSlotBul[silahid]] == silahid)
 		return silahid;

	return 0;
}

stock SilahKaydet(playerid)
{
	if(!IsPlayerConnected(playerid) || OyuncuBilgi[playerid][oPaintball] != -1 || OyuncuBilgi[playerid][oEtkinlikDurum] == true || PetKontrol[playerid] != -1) return false;
	new silahid = 0;
	for(new i = 0; i < 13; i ++) if(OyuncuBilgi[playerid][oSilah][i])
    {
		if((i == 2 && OyuncuBilgi[playerid][oTaser]) || (i == 3 && OyuncuBilgi[playerid][oBeanbag]))
		    continue;

        GetPlayerWeaponData(playerid, i, silahid, OyuncuBilgi[playerid][oMermi][i]);

        if(OyuncuBilgi[playerid][oSilah][i] != 0 && !OyuncuBilgi[playerid][oMermi][i]) OyuncuBilgi[playerid][oSilah][i] = 0;
	}
	return silahid;
}

stock SilahAyarla(playerid)
{
	ResetPlayerWeapons(playerid);
	for (new i = 0; i < 13; i ++) if(OyuncuBilgi[playerid][oSilah][i] > 0 && OyuncuBilgi[playerid][oMermi][i] > 0) {
	    GivePlayerWeapon(playerid, OyuncuBilgi[playerid][oSilah][i], OyuncuBilgi[playerid][oMermi][i]);
	}
	return 1;
}

stock SilahSil(playerid, silahid)
{
	ResetPlayerWeapons(playerid);
	for (new i = 0; i < 13; i ++) {
	    if(OyuncuBilgi[playerid][oSilah][i] != silahid) {
	        GivePlayerWeapon(playerid, OyuncuBilgi[playerid][oSilah][i], OyuncuBilgi[playerid][oMermi][i]);
		}
		else {
			OyuncuBilgi[playerid][oSilah][i] = 0;
			OyuncuBilgi[playerid][oMermi][i] = 0;
	    }
	}
	return 1;
}

stock SilahSlotKontrol(playerid, slotid)
{
	new silah, mermi, slot;
	for (new i = 0; i < 13; i ++) {
	    GetPlayerWeaponData(playerid, i, silah, mermi);
		slot = SilahSlotBul[silah];
	    if(slot == slotid) return 1;
	}
	return 0;
}

stock SilahlariSifirla(playerid)
{
	ResetPlayerWeapons(playerid);
	for (new i = 0; i < 13; i ++) {
		OyuncuBilgi[playerid][oSilah][i] = 0;
		OyuncuBilgi[playerid][oMermi][i] = 0;
	}
	return 1;
}

stock Silahver(playerid, silahid, mermi)
{
	if(silahid < 0 || silahid > 46) return silahid;

	OyuncuBilgi[playerid][oSilah][SilahSlotBul[silahid]] = silahid;
	OyuncuBilgi[playerid][oMermi][SilahSlotBul[silahid]] += mermi;
	return GivePlayerWeapon(playerid, silahid, mermi);
}

stock OyuncuSilahDegistirdi(playerid, eskisilah, yenisilah)
{
    if(!IsPlayerConnected(playerid)) return false;
	eskisilah = GetPlayerWeapon(playerid);
	if(eskisilah == 23 && OyuncuBilgi[playerid][oTaser] || eskisilah == 25 && OyuncuBilgi[playerid][oBeanbag]) return 1;
	if(eskisilah == WEAPON_PARACHUTE) return 1;

	if(OyuncuBilgi[playerid][oSilah][SilahSlotBul[yenisilah]] != GetPlayerWeapon(playerid)) SilahHilesiIslem(playerid, yenisilah);
	return 1;
}

stock SilahAksesuarSlot(silahid)
{
    new objectslot;
    switch(silahid)
    {
        case 25..27: objectslot = 7;
        case 28, 29, 32: objectslot = 8;
        case 30, 31: objectslot = 9;
        default: objectslot = -1;
    }
    return objectslot;
}

stock SilahKontrol(playerid, silahid)
{
    new silah, mermi;
    for(new i; i < 13; i++)
    {
        GetPlayerWeaponData(playerid, i, silah, mermi);
        if(silah == silahid && mermi && OyuncuBilgi[playerid][oSilah][i] == silah) return 1;
    }
    return 0;
}

stock LokasyonBul(Float:fX, Float:fY, Float:fZ)
{
    enum bolgeBilgi
	{
     	bolgeAdi[32 char],
     	Float:bolgePos[6]
	};
	new const bolgelerBilgi[][bolgeBilgi] =
	{
		{!"The Big Ear", 	              {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
		{!"Aldea Malvada",                {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
		{!"Angel Pine",                   {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
		{!"Arco del Oeste",               {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
		{!"Avispa Country Club",          {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
		{!"Avispa Country Club",          {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
		{!"Avispa Country Club",          {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
		{!"Avispa Country Club",          {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
		{!"Back o Beyond",                {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
		{!"Battery Point",                {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
		{!"Bayside",                      {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
		{!"Bayside Marina",               {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
		{!"Beacon Hill",                  {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
		{!"Blackfield",                   {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
		{!"Blackfield",                   {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
		{!"Blackfield Chapel",            {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
		{!"Blackfield Chapel",            {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
		{!"Blackfield Intersection",      {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
		{!"Blackfield Intersection",      {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
		{!"Blackfield Intersection",      {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
		{!"Blackfield Intersection",      {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
		{!"Blueberry",                    {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
		{!"Blueberry",                    {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
		{!"Blueberry Acres",              {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
		{!"Caligula's Palace",            {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
		{!"Caligula's Palace",            {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
		{!"Calton Heights",               {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
		{!"Chinatown",                    {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
		{!"City Hall",                    {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
		{!"Come-A-Lot",                   {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
		{!"Commerce",                     {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
		{!"Commerce",                     {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
		{!"Commerce",                     {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
		{!"Commerce",                     {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
		{!"Commerce",                     {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
		{!"Commerce",                     {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
		{!"Conference Center",            {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
		{!"Conference Center",            {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
		{!"Cranberry Station",            {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
		{!"Creek",                        {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
		{!"Dillimore",                    {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
		{!"Doherty",                      {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
		{!"Doherty",                      {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
		{!"Downtown",                     {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
		{!"Downtown",                     {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
		{!"Downtown",                     {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
		{!"Downtown",                     {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
		{!"Downtown",                     {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
		{!"Downtown",                     {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
		{!"Downtown Los Santos",          {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
		{!"Downtown Los Santos",          {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
		{!"Downtown Los Santos",          {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
		{!"Downtown Los Santos",          {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
		{!"Downtown Los Santos",          {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
		{!"East Beach",                   {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
		{!"East Beach",                   {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
		{!"East Beach",                   {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
		{!"East Beach",                   {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
		{!"East Los Santos",              {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
		{!"East Los Santos",              {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
		{!"East Los Santos",              {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
		{!"East Los Santos",              {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
		{!"East Los Santos",              {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
		{!"Easter Basin",                 {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
		{!"Easter Basin",                 {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
		{!"Easter Bay Chemicals",         {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
		{!"Easter Bay Chemicals",         {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
		{!"El Castillo del Diablo",       {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
		{!"El Corona",                    {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
		{!"El Corona",                    {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
		{!"El Quebrados",                 {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
		{!"Esplanade East",               {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
		{!"Esplanade East",               {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
		{!"Esplanade East",               {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
		{!"Esplanade North",              {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
		{!"Esplanade North",              {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
		{!"Esplanade North",              {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
		{!"Fallen Tree",                  {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
		{!"Fallow Bridge",                {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
		{!"Fern Ridge",                   {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
		{!"Financial",                    {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
		{!"Fisher's Lagoon",              {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
		{!"Flint Intersection",           {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
		{!"Flint Range",                  {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
		{!"Fort Carson",                  {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
		{!"Foster Valley",                {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
		{!"Foster Valley",                {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
		{!"Frederick Bridge",             {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
		{!"Gant Bridge",                  {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
		{!"Gant Bridge",                  {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
		{!"Ganton",                       {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
		{!"Ganton",                       {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
		{!"Garcia",                       {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
		{!"Garcia",                       {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
		{!"Garver Bridge",                {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
		{!"Garver Bridge",                {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
		{!"Garver Bridge",                {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
		{!"Glen Park",                    {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
		{!"Glen Park",                    {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
		{!"Glen Park",                    {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
		{!"Green Palms",                  {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
		{!"Greenglass College",           {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
		{!"Greenglass College",           {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
		{!"Hampton Barns",                {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
		{!"Hankypanky Point",             {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
		{!"Harry Gold Parkway",           {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
		{!"Hashbury",                     {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
		{!"Hilltop Farm",                 {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
		{!"Hunter Quarry",                {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
		{!"Idlewood",                     {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
		{!"Idlewood",                     {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
		{!"Idlewood",                     {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
		{!"Jefferson",                    {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
		{!"Jefferson",                    {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
		{!"Jefferson",                    {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
		{!"Jefferson",                    {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
		{!"Jefferson",                    {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
		{!"Jefferson",                    {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
		{!"Julius Thruway East",          {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
		{!"Julius Thruway East",          {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
		{!"Julius Thruway East",          {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
		{!"Julius Thruway East",          {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
		{!"Julius Thruway North",         {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
		{!"Julius Thruway North",         {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
		{!"Julius Thruway North",         {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
		{!"Julius Thruway North",         {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
		{!"Julius Thruway North",         {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
		{!"Julius Thruway North",         {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
		{!"Julius Thruway North",         {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
		{!"Julius Thruway North",         {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
		{!"Julius Thruway South",         {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
		{!"Julius Thruway South",         {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
		{!"Julius Thruway West",          {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
		{!"Julius Thruway West",          {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
		{!"Juniper Hill",                 {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
		{!"Juniper Hollow",               {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
		{!"K.A.C.C. Military Fuels",      {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
		{!"Kincaid Bridge",               {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
		{!"Kincaid Bridge",               {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
		{!"Kincaid Bridge",               {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
		{!"King's",                       {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
		{!"King's",                       {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
		{!"King's",                       {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
		{!"LVA Freight Depot",            {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
		{!"LVA Freight Depot",            {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
		{!"LVA Freight Depot",            {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
		{!"Las Barrancas",                {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
		{!"Las Brujas",                   {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
		{!"Las Colinas",                  {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
		{!"Las Colinas",                  {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
		{!"Las Colinas",                  {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
		{!"Las Colinas",                  {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
		{!"Las Colinas",                  {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
		{!"Las Payasadas",                {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
		{!"Las Venturas Airport",         {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
		{!"Las Venturas Airport",         {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
		{!"Last Dime Motel",              {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
		{!"Leafy Hollow",                 {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
		{!"Liberty City",                 {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
		{!"Lil' Probe Inn",               {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
		{!"Linden Side",                  {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
		{!"Linden Station",               {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
		{!"Linden Station",               {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
		{!"Little Mexico",                {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
		{!"Little Mexico",                {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
		{!"Los Flores",                   {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
		{!"Los Flores",                   {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
		{!"Los Santos International",     {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
		{!"Los Santos International",     {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
		{!"Los Santos International",     {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
		{!"Los Santos International",     {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
		{!"Marina",                       {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
		{!"Marina",                       {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
		{!"Marina",                       {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
		{!"Market",                       {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
		{!"Market",                       {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
		{!"Market",                       {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
		{!"Market",                       {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
		{!"Market Station",               {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
		{!"Martin Bridge",                {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
		{!"Missionary Hill",              {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
		{!"Montgomery",                   {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
		{!"Montgomery",                   {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
		{!"Montgomery Intersection",      {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
		{!"Montgomery Intersection",      {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
		{!"Mulholland",                   {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
		{!"Mulholland",                   {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
		{!"Mulholland",                   {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
		{!"Mulholland",                   {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
		{!"Mulholland",                   {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
		{!"Mulholland",                   {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
		{!"Mulholland",                   {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
		{!"Mulholland",                   {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
		{!"Mulholland",                   {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
		{!"Mulholland",                   {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
		{!"Mulholland",                   {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
		{!"Mulholland",                   {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
		{!"Mulholland",                   {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
		{!"Mulholland Intersection",      {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
		{!"North Rock",                   {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
		{!"Ocean Docks",                  {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
		{!"Ocean Docks",                  {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
		{!"Ocean Docks",                  {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
		{!"Ocean Flats",                  {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
		{!"Octane Springs",               {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
		{!"Old Venturas Strip",           {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
		{!"Palisades",                    {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
		{!"Palomino Creek",               {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
		{!"Paradiso",                     {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
		{!"Pershing Square",              {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
		{!"Pilgrim",                      {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
		{!"Pilgrim",                      {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
		{!"Pilson Intersection",          {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
		{!"Pirates in Men's Pants",       {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
		{!"Playa del Seville",            {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
		{!"Prickle Pine",                 {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
		{!"Prickle Pine",                 {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
		{!"Queens",                       {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
		{!"Queens",                       {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
		{!"Queens",                       {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
		{!"Randolph Industrial Estate",   {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
		{!"Redsands East",                {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
		{!"Redsands East",                {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
		{!"Redsands East",                {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
		{!"Redsands West",                {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
		{!"Redsands West",                {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
		{!"Redsands West",                {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
		{!"Redsands West",                {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
		{!"Regular Tom",                  {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
		{!"Richman",                      {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
		{!"Richman",                      {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
		{!"Richman",                      {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
		{!"Richman",                      {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
		{!"Richman",                      {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
		{!"Richman",                      {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
		{!"Richman",                      {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
		{!"Richman",                      {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
		{!"Robada Intersection",          {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
		{!"Roca Escalante",               {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
		{!"Roca Escalante",               {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
		{!"Rockshore East",               {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
		{!"Rockshore West",               {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
		{!"Rockshore West",               {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
		{!"Rodeo",                        {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
		{!"Rodeo",                        {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
		{!"Rodeo",                        {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
		{!"Rodeo",                        {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
		{!"Rodeo",                        {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
		{!"Rodeo",                        {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
		{!"Rodeo",                        {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
		{!"Rodeo",                        {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
		{!"Rodeo",                        {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
		{!"Rodeo",                        {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
		{!"Rodeo",                        {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
		{!"Rodeo",                        {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
		{!"Royal Casino",                 {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
		{!"San Andreas Sound",            {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
		{!"Santa Flora",                  {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
		{!"Santa Maria Beach",            {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
		{!"Santa Maria Beach",            {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
		{!"Shady Cabin",                  {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
		{!"Shady Creeks",                 {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
		{!"Shady Creeks",                 {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
		{!"Sobell Rail Yards",            {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
		{!"Spinybed",                     {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
		{!"Starfish Casino",              {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
		{!"Starfish Casino",              {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
		{!"Starfish Casino",              {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
		{!"Temple",                       {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
		{!"Temple",                       {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
		{!"Temple",                       {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
		{!"Temple",                       {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
		{!"Temple",                       {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
		{!"Temple",                       {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
		{!"The Camel's Toe",              {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
		{!"The Clown's Pocket",           {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
		{!"The Emerald Isle",             {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
		{!"The Farm",                     {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
		{!"The Four Dragons Casino",      {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
		{!"The High Roller",              {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
		{!"The Mako Span",                {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
		{!"The Panopticon",               {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
		{!"The Pink Swan",                {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
		{!"The Sherman Dam",              {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
		{!"The Strip",                    {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
		{!"The Strip",                    {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
		{!"The Strip",                    {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
		{!"The Strip",                    {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
		{!"The Visage",                   {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
		{!"The Visage",                   {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
		{!"Unity Station",                {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
		{!"Valle Ocultado",               {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
		{!"Verdant Bluffs",               {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
		{!"Verdant Bluffs",               {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
		{!"Verdant Bluffs",               {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
		{!"Verdant Meadows",              {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
		{!"Verona Beach",                 {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
		{!"Verona Beach",                 {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
		{!"Verona Beach",                 {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
		{!"Vinewood",                     {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
		{!"Vinewood",                     {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
		{!"Vinewood",                     {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
		{!"Vinewood",                     {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
		{!"Whitewood Estates",            {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
		{!"Whitewood Estates",            {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
		{!"Willowfield",                  {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
		{!"Willowfield",                  {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
		{!"Willowfield",                  {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
		{!"Willowfield",                  {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
		{!"Willowfield",                  {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
		{!"Yellow Bell Station",          {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
		{!"Los Santos",                   {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
		{!"Las Venturas",                 {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
		{!"Bone County",                  {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
		{!"Tierra Robada",                {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
		{!"Tierra Robada",                {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
		{!"San Fierro",                   {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
		{!"Red County",                   {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
		{!"Flint County",                 {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
		{!"Viga",                    {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
	};
	new isim[32] = "San Andreas";

	for(new i = 0; i != sizeof(bolgelerBilgi); i ++) if((fX >= bolgelerBilgi[i][bolgePos][0] && fX <= bolgelerBilgi[i][bolgePos][3]) && (fY >= bolgelerBilgi[i][bolgePos][1] && fY <= bolgelerBilgi[i][bolgePos][4]) && (fZ >= bolgelerBilgi[i][bolgePos][2] && fZ <= bolgelerBilgi[i][bolgePos][5])) {
		strunpack(isim, bolgelerBilgi[i][bolgeAdi]);
		break;
	}
	return isim;
}

stock KoltukKontrol(vehicleid, start = 1)
{
	new seats = KoltukSayiKontrol(vehicleid);
	for(new i = start; i < seats; i ++) if(!AracKoltukKullanimda(vehicleid, i)) return i;

	return -1;
}

stock GetVehicleFromBehind(vehicleid)
{
	new Float:fCoords[7];
	GetVehiclePos(vehicleid, fCoords[0], fCoords[1], fCoords[2]);
	GetVehicleZAngle(vehicleid, fCoords[3]);

	foreach(new i : Vehicle) if(i != vehicleid && GetVehiclePos(i, fCoords[4], fCoords[5], fCoords[6]))
	{
		if(floatabs(fCoords[0] - fCoords[4]) < 6 && floatabs(fCoords[1] - fCoords[5]) < 6 && floatabs(fCoords[2] - fCoords[6]) < 6)
			return i;
	}
	return INVALID_VEHICLE_ID;
}

stock KoltukSayiKontrol(vehicleid)
{
    static const koltuklar[] = {
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4, 4,
		2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2,
		4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1,
		1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
		4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 4,
		4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 4,
		0, 0
	};
	new model;
	model = GetVehicleModel(vehicleid);
	if(400 <= model <= 611) return koltuklar[model - 400];
	return 0;
}

stock YakinAracKontrol(playerid)
{
	static Float:fX, Float:fY, Float:fZ;
	foreach(new i : Vehicle) if(IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
		if(IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ)) return i;

	return INVALID_VEHICLE_ID;
}

stock AracKoltukKullanimda(vehicleid, seat)
{
	foreach (new i : Player) if(IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) {
	    return 1;
	}
	return 0;
}

stock SurucuBul(vehicleid) {
	foreach (new i : Player) if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid) return i;

	return INVALID_PLAYER_ID;
}

stock AracDuzelt(aracid)
{
	new Float:fAngle;
	GetVehicleZAngle(aracid, fAngle);
	SetVehicleZAngle(aracid, fAngle);
	return SetVehicleVelocity(aracid, 0.0, 0.0, 0.0);
}

stock Oyuncu_Evde(playerid)
{
	for(new i = 0; i != MAKSIMUM_EV; i ++) if(EvBilgi[i][evKullanimda] && GetPlayerInterior(playerid) == EvBilgi[i][evInterior] && GetPlayerVirtualWorld(playerid) == EvBilgi[i][evVW]) {
		return i;
	}
	return -1;
}

stock OyuncuDolapYakin(playerid)
{
	new birlikid = OyuncuBilgi[playerid][oBirlik];
	if(birlikid == -1)
	    return 0;

	if(IsPlayerInRangeOfPoint(playerid, 5.0, BirlikBilgi[birlikid][bDolapPos][0], BirlikBilgi[birlikid][bDolapPos][1], BirlikBilgi[birlikid][bDolapPos][2]) && GetPlayerInterior(playerid) == BirlikBilgi[birlikid][bDolapInt] && GetPlayerVirtualWorld(playerid) == BirlikBilgi[birlikid][bDolapVW])
	    return 1;

	return 0;
}

stock SarjorYenilemeAnimasyon(playerid, silahid)
{
	switch(silahid)
	{
	    case 22: ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0);
		case 23: ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.1, 0, 0, 0, 0, 0);
		case 24: ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
		case 25, 27: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 0, 0, 0, 0, 0);
		case 26: ApplyAnimation(playerid, "COLT45", "sawnoff_reload", 4.1, 0, 0, 0, 0, 0);
		case 29..31, 33, 34: ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.1, 0, 0, 0, 0, 0);
		case 28, 32: ApplyAnimation(playerid, "TEC", "tec_reload", 4.1, 0, 0, 0, 0, 0);
	}
	return 1;
}

stock Ankesorlu_Telefon_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_ANKESORLU_TELEFON; i ++) if(ATelBilgi[i][aTelKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, ATelBilgi[i][aTelPos][0], ATelBilgi[i][aTelPos][1], ATelBilgi[i][aTelPos][2]))
	{
		if(GetPlayerInterior(playerid) == ATelBilgi[i][aTelInterior] && GetPlayerVirtualWorld(playerid) == ATelBilgi[i][aTelWorld])
			return i;
	}
	return -1;
}

stock ATM_Yakin(playerid)
{
    for(new i = 0; i != MAKSIMUM_ATM; i ++) if(ATMBilgi[i][atmKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, ATMBilgi[i][atmPos][0], ATMBilgi[i][atmPos][1], ATMBilgi[i][atmPos][2]))
	{
		if(GetPlayerInterior(playerid) == ATMBilgi[i][atmInterior] && GetPlayerVirtualWorld(playerid) == ATMBilgi[i][atmWorld])
			return i;
	}
	return -1;
}

stock CanDuzenle(playerid, Float:can) {
	OyuncuBilgi[playerid][oCan] = can;
	HileKontrolGecikme[playerid] = gettime() + 2;
	return SetPlayerHealth(playerid, can);
}

stock ZirhDuzenle(playerid, Float:zirh) {
	OyuncuBilgi[playerid][oZirh] = zirh;
	HileKontrolGecikme[playerid] = gettime() + 2;
	return SetPlayerArmour(playerid, zirh);
}

stock Arac_Yakin(playerid)
{
	static Float:fX, Float:fY, Float:fZ;
	for(new i = 0; i != MAKSIMUM_ARAC; i ++) if(AracBilgi[i][aracKullanimda]) {
		GetVehiclePos(AracBilgi[i][aracYarat], fX, fY, fZ);
		if(IsPlayerInRangeOfPoint(playerid, 4.0, fX, fY, fZ)) {
		    return i;
		}
	}
	return -1;
}

stock Hasar_Ekle(playerid, bodypart, Float:hasar, hasarveren, silahid)
{
	for(new i = 0; i != MAKSIMUM_HASAR; i ++)
	{
	    if(!HasarBilgi[playerid][i][hasarVarmi])
	    {
			HasarBilgi[playerid][i][hasarVarmi] = true;
		    HasarBilgi[playerid][i][hasarBolge] = bodypart;
		    HasarBilgi[playerid][i][hasarVeren] = hasarveren;
            HasarBilgi[playerid][i][hasarDeger] = hasar;
            HasarBilgi[playerid][i][hasarSilah] = silahid;
			return i;
		}
	}
	return -1;
}

stock Ceza_Ekle(oyuncuid, ceza, sebep[], memur[])
{
	if(!IsPlayerConnected(oyuncuid)) return 0;
	if(ceza < 1 || ceza > MAKSIMUM_CEZA) return 0;
	new string[1024], cezatarih[36], cezasebep[64];
	format(cezatarih, 36, Tarih());
	format(cezasebep, 64, sebep);
	format(string, sizeof(string), "INSERT INTO `cezalar` (`cezaSQL`, `cezaMemur`, `cezaUcret`, `cezaTarih`, `cezaSebep`) VALUES('%s', '%s','%d', '%s', '%s')", OyuncuIsim(oyuncuid), memur, ceza, cezatarih, SQL_ReturnEscaped(sebep));
	return mysql_tquery(mysqlB, string);
}

stock HasarBolge(bolge)
{
	new bilgi[24];
	switch(bolge)
	{
	    case 3: bilgi = "Karýn";
	    case 4: bilgi = "Kalça";
	    case 5: bilgi = "Sol El";
	    case 6: bilgi = "Sað El";
	    case 7: bilgi = "Sol Ayak";
	    case 8: bilgi = "Sað Ayak";
	    case 9: bilgi = "Kafa";
	    default: bilgi = "Yok & Diðer";
	}
	return bilgi;
}

stock HapiseAt(oyuncuid)
{
    switch(random(4))
	{
		case 0: OyuncuPosDegistir(oyuncuid, -9.8222,2337.3325,24.3034);
		case 1: OyuncuPosDegistir(oyuncuid, -10.4860,2330.1338,24.3034);
		case 2: OyuncuPosDegistir(oyuncuid, -18.2210,2322.5164,24.3034);
		case 3: OyuncuPosDegistir(oyuncuid, -26.6612,2321.0889,24.3034);
	}
	SetPlayerInterior(oyuncuid, 0);
	SetPlayerVirtualWorld(oyuncuid, OyuncuBilgi[oyuncuid][oID]);
	SilahlariSifirla(oyuncuid);
	return TogglePlayerControllable(oyuncuid, false);
}

stock ICHapiseAt(oyuncuid, id)
{
	for(new i = 0; i < MAKSIMUM_TUTUKLAMANOKTASI; i++) if(TutuklamaNoktasi[i][tKullanimda] && TutuklamaNoktasi[i][tID] == id)
	{
		OyuncuPosDegistir(oyuncuid, TutuklamaNoktasi[i][hPos][0], TutuklamaNoktasi[i][hPos][1], TutuklamaNoktasi[i][hPos][2]);
		SetPlayerFacingAngle(oyuncuid, TutuklamaNoktasi[i][hPos][3]);
		SetPlayerInterior(oyuncuid, TutuklamaNoktasi[i][hInterior]);
		SetPlayerVirtualWorld(oyuncuid, oyuncuid);
		DondurulmaEtkisi(oyuncuid);
	    OyuncuBilgi[oyuncuid][oKelepceli] = 0;
	    SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_NONE);
	    RemovePlayerAttachedObject(oyuncuid, 9);
		return OyuncuKaydet(oyuncuid);
	}
	if((id < 0 || id >= MAKSIMUM_TUTUKLAMANOKTASI) || !TutuklamaNoktasi[id][tKullanimda]) ICHapiseAt(oyuncuid, 1);
	return 1;
}

stock DondurulmaEtkisi(oyuncuid)
{
	KillTimer(DondurulmaTimer[oyuncuid]);
	OyuncuBilgi[oyuncuid][oKontrol] = false;
	TogglePlayerControllable(oyuncuid, false);
	DondurulmaTimer[oyuncuid] = SetTimerEx("DondurulmaIptal", 3072, false, "i", oyuncuid);
	return 1;
}

stock OyuncuPosDegistir(oyuncuid, Float:pos_x, Float:pos_y, Float:pos_z)
{
	OyuncuBilgi[oyuncuid][oPos][0] = pos_x, OyuncuBilgi[oyuncuid][oPos][1] = pos_y, OyuncuBilgi[oyuncuid][oPos][2] = pos_z;
	HileKontrolGecikme[oyuncuid] = gettime() + 2;
	Streamer_Update(oyuncuid, STREAMER_TYPE_OBJECT);
	Streamer_UpdateEx(oyuncuid, pos_x, pos_y, pos_z, GetPlayerVirtualWorld(oyuncuid), GetPlayerInterior(oyuncuid), STREAMER_TYPE_OBJECT, -1, 1);
	return SetPlayerPos(oyuncuid, pos_x, pos_y, pos_z);
}

stock AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
 		"Brass K"
	};
	#pragma unused a
}

stock WasteDeAMXersTime()
{
    new b;
    #emit load.pri b
    #emit stor.pri b
}

stock IsPlayerBot(playerid)
{
    if(IsPlayerNPC(playerid)) return 0;

    new temp_id[80], temp_number;
    gpci(playerid, temp_id, sizeof(temp_id));

    for(new i = 0; i < strlen(temp_id); i++)
    {
        if(temp_id[i] >=  0  && temp_id[i] <=  9 ) temp_number++;
    }
    return (temp_number >= 30 || strlen(temp_id) <= 30) ? true : false;
}

stock IsPlayerInWater(playerid)
{
	GetPlayerPos(playerid, OyuncuBilgi[playerid][oPos][0], OyuncuBilgi[playerid][oPos][1], OyuncuBilgi[playerid][oPos][2]);
	if(OyuncuBilgi[playerid][oPos][2] < 0.7) switch(GetPlayerAnimationIndex(playerid)) { case 1543, 1538, 1539: return 1; }
	if(GetPlayerDistanceFromPoint(playerid, -965, 2438, 42) <= 700 && OyuncuBilgi[playerid][oPos][2] < 45) return 1;
	new Float:water_places[][] =
	{
		{25.0,  2313.0, -1417.0, 23.0},
		{15.0,  1280.0, -773.0, 1082.0},
		{15.0,  1279.0, -804.0, 86.0},
		{20.0,  1094.0, -674.0, 111.0},
		{26.0,  194.0,  -1232.0, 76.0},
		{25.0,  2583.0, 2385.0, 15.0},
		{25.0,  225.0,  -1187.0, 73.0},
		{50.0,  1973.0, -1198.0, 17.0},
		{70.0,	1244.1962, -2376.4524, 2.8635}
	};
	for(new t = 0; t < sizeof water_places; t++)
 		if(GetPlayerDistanceFromPoint(playerid, water_places[t][1], water_places[t][2], water_places[t][3]) <= water_places[t][0]) return 1;

	return 0;
}

stock HileKontrol(playerid)
{
	if(IsPlayerAdmin(playerid)) return false;
	if(IsPlayerInAnyVehicle(playerid) && AracCan(GetPlayerVehicleID(playerid)) > 999.9) {
	    SetVehicleHealth(GetPlayerVehicleID(playerid), 999.9);
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) 
	        return HileKickle(playerid, 8);
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && OyuncuBilgi[playerid][oJetpack] == false) return HileKickle(playerid, 9);
	switch(GetPlayerAnimationIndex(playerid))
	{
		case 1543, 1538, 1539:
		{
			if(!IsPlayerInWater(playerid)) return HileKickle(playerid, 10);
		}
	}
	return 0;
}

stock Float:AracCan(aracid) {
	new Float:araccan;
	GetVehicleHealth(aracid, araccan);
	return araccan;
}

stock AktiflikKontrol(text[]) {

	new strPos, returnID = 0, bool: isnum = true;
	while(text[strPos]) {
		if(isnum) {
			if('0' <= text[strPos] <= '9') returnID = (returnID * 10) + (text[strPos] - '0');
			else isnum = false;
		}
		strPos++;
	}
	if(isnum) {
		if(IsPlayerConnected(returnID)) return returnID;
	}
	else {

		new sz_playerName[MAX_PLAYER_NAME];
		foreach(new i : Player) {
			GetPlayerName(i, sz_playerName, MAX_PLAYER_NAME);
			if(!strcmp(sz_playerName, text, true, strPos)) return i;
		}
	}
	return INVALID_PLAYER_ID;
}

stock OfflineParaKes(isim[], miktar)
{
 	new query[256];
    format(query, sizeof(query), "UPDATE `oyuncular` SET `Para` = `Para`-%d WHERE `isim` = '%s'", miktar, isim);
	mysql_query(mysqlB, query);
	return 1;
}

stock OfflineParaVer(id, miktar)
{
 	static query[256];
    format(query, sizeof(query), "UPDATE `oyuncular` SET `BankaPara` = `BankaPara`+%d WHERE `ID` = '%d'", miktar, id);
	mysql_query(mysqlB, query);
	return 1;
}

stock SQL_AktiflikKontrol(sqlid)
{
	foreach(new i : Player) if(OyuncuBilgi[i][oID] == sqlid) return i;
	return -1;
}

stock PlayerText:ShowPlayerBox(playerid, color)
{
	new PlayerText:textid;
    textid = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawFont(playerid, textid, 1);
	PlayerTextDrawLetterSize(playerid, textid, 0.500000, 50.000000);
	PlayerTextDrawColor(playerid, textid, -1);
	PlayerTextDrawUseBox(playerid, textid, 1);
	PlayerTextDrawBoxColor(playerid, textid, color);
	PlayerTextDrawTextSize(playerid, textid, 640.000000, 30.000000);
	PlayerTextDrawShow(playerid, textid);
	return textid;
}

stock BagajSlotKontrol(aracmodel)
{
	switch(aracmodel) {
		case 424, 434, 461, 462, 463, 468, 471, 473, 521, 522, 545, 581, 523: return 1;
		case 402, 411, 415, 429, 446, 451, 452, 475, 477, 480, 487, 493, 494, 496, 502, 503, 504, 506, 541, 542, 555, 558, 559, 562, 565, 587, 586: return 2;
		case 401, 410, 412, 419, 436, 439, 474, 491, 500, 517, 518, 526, 527, 534, 549, 575, 576, 589, 602, 603, 405, 409, 421, 426, 445, 454, 458, 466, 467, 492, 507, 516, 529, 533, 535, 536, 540, 546, 547, 550, 551, 560, 566, 567, 580, 585, 400, 404, 470, 479, 561, 579, 600: return 3;
		case 416, 422, 478, 489, 505, 543, 554, 528, 490, 418: return 4;
		case 413, 440, 482, 427, 596, 597, 598, 599: return 6;
		case 499, 453: return 10;
		case 456: return 20;
		case 435: return 50;
		default: return 0;
	}
	return 0;
}

stock BotKontrol(aracid)
{
	switch(GetVehicleModel(aracid)) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return 1;
	}
	return 0;
}

stock BisikletKontrol(aracid)
{
	new sonuc;
	switch(GetVehicleModel(aracid))
	{
		case 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: sonuc = GetVehicleModel(aracid);
		default: sonuc = 0;
	}
	return sonuc;
}

stock LSPDAracKontrol(aracid)
{
	switch(GetVehicleModel(aracid)) {
	    case 523, 427, 490, 528, 596..599, 601: return 1;
	}
	return 0;
}

stock GetVehicleTopSpeed(aracid)
{
    new model = GetVehicleModel(aracid);

    if(model)
    {
        return s_TopSpeed[(model - 400)];
    }
    return 0;
}

stock UcakKontrol(aracid)
{
	switch(GetVehicleModel(aracid)) {
		case 592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469: return 1;
	}
	return 0;
}

stock HelikopterKontrol(aracid)
{
	switch(GetVehicleModel(aracid)) {
		case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
	}
	return 0;
}

stock OyuncuZirh(playerid)
{
	new Float:amount;
	GetPlayerArmour(playerid, amount);
	return floatround(amount, floatround_round);
}

stock OyuncuCan(playerid)
{
	new Float:amount;
	GetPlayerHealth(playerid, amount);
	return floatround(amount, floatround_round);
}

stock Gunluk_LogKaydet(icerik[])
{
	if(isnull(icerik)) return 0;
	new yil, ay, gun, klasor[64];
	getdate(yil, ay, gun);
	format(klasor, sizeof(klasor), "loglar/gunluk/%d/%02d/%02d.log", yil, ay, gun);
	Log_Kaydet(klasor, "%s", icerik);
	/*
	new DCC_Channel:dcid = DCC_FindChannelById("646339792979886120"), duzeltmeli[144];
	format(duzeltmeli, sizeof(duzeltmeli), "```%s```", ConvertToTurkish(icerik));
    DCC_SendChannelMessage(dcid, duzeltmeli);
	*/
	return 1;
}

stock ConvertToTurkish(txt[])
{
    new converted_txt[256];
    strcat(converted_txt, txt);

    for (new i = 0; i < 256; i++)
    {
        switch (converted_txt[i])
        {
            case 'ð': converted_txt[i] = 'g';
            case 'Ð': converted_txt[i] = 'G';
            case 'þ': converted_txt[i] = 's';
            case 'Þ': converted_txt[i] = 'S';
            case 'ý': converted_txt[i] = 'i';
            case 'ö': converted_txt[i] = 'o';
            case 'Ö': converted_txt[i] = 'O';
            case 'ç': converted_txt[i] = 'c';
            case 'Ç': converted_txt[i] = 'C';
            case 'ü': converted_txt[i] = 'u';
            case 'Ü': converted_txt[i] = 'U';
            case 'Ý': converted_txt[i] = 'I';
        }
    }
    return converted_txt;
}

stock Log_Kaydet(const path[], const str[], {Float,_}:...)
{
	static args, start, end, File:file, string[1024];
	if((start = strfind(path, "/")) != -1) {
	    strmid(string, path, 0, start + 1);

	   if(!fexist(string)) fcreate(string);
	}
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	file = fopen(path, io_append);

	if(!file)
	    return 0;

	if(args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for(end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 1024
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		fwrite(file, string);
		fwrite(file, "\r\n");
		fclose(file);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	fwrite(file, str);
	fwrite(file, "\r\n");
	fclose(file);
	return 1;
}

stock AnimleriYukle(playerid) {
	PreloadAnimLib(playerid,"AIRPORT");
	PreloadAnimLib(playerid,"Attractors");
	PreloadAnimLib(playerid,"BAR");
	PreloadAnimLib(playerid,"BASEBALL");
	PreloadAnimLib(playerid,"BD_FIRE");
	PreloadAnimLib(playerid,"benchpress");
	PreloadAnimLib(playerid,"BF_injection");
	PreloadAnimLib(playerid,"BIKED");
	PreloadAnimLib(playerid,"BIKEH");
	PreloadAnimLib(playerid,"BIKELEAP");
	PreloadAnimLib(playerid,"BIKES");
	PreloadAnimLib(playerid,"BIKEV");
	PreloadAnimLib(playerid,"BIKE_DBZ");
	PreloadAnimLib(playerid,"BMX");
	PreloadAnimLib(playerid,"BOX");
	PreloadAnimLib(playerid,"BSKTBALL");
	PreloadAnimLib(playerid,"BUDDY");
	PreloadAnimLib(playerid,"BUS");
	PreloadAnimLib(playerid,"CAMERA");
	PreloadAnimLib(playerid,"CAR");
	PreloadAnimLib(playerid,"CAR_CHAT");
	PreloadAnimLib(playerid,"CASINO");
	PreloadAnimLib(playerid,"CHAINSAW");
	PreloadAnimLib(playerid,"CHOPPA");
	PreloadAnimLib(playerid,"CLOTHES");
	PreloadAnimLib(playerid,"COACH");
	PreloadAnimLib(playerid,"COLT45");
	PreloadAnimLib(playerid,"COP_DVBYZ");
	PreloadAnimLib(playerid,"CRIB");
	PreloadAnimLib(playerid,"DAM_JUMP");
	PreloadAnimLib(playerid,"DANCING");
	PreloadAnimLib(playerid,"DILDO");
	PreloadAnimLib(playerid,"DODGE");
	PreloadAnimLib(playerid,"DOZER");
	PreloadAnimLib(playerid,"DRIVEBYS");
	PreloadAnimLib(playerid,"FAT");
	PreloadAnimLib(playerid,"FIGHT_B");
	PreloadAnimLib(playerid,"FIGHT_C");
	PreloadAnimLib(playerid,"FIGHT_D");
	PreloadAnimLib(playerid,"FIGHT_E");
	PreloadAnimLib(playerid,"FINALE");
	PreloadAnimLib(playerid,"FINALE2");
	PreloadAnimLib(playerid,"Flowers");
	PreloadAnimLib(playerid,"FOOD");
	PreloadAnimLib(playerid,"Freeweights");
	PreloadAnimLib(playerid,"GANGS");
	PreloadAnimLib(playerid,"GHANDS");
	PreloadAnimLib(playerid,"GHETTO_DB");
	PreloadAnimLib(playerid,"goggles");
	PreloadAnimLib(playerid,"GRAFFITI");
	PreloadAnimLib(playerid,"GRAVEYARD");
	PreloadAnimLib(playerid,"GRENADE");
	PreloadAnimLib(playerid,"GYMNASIUM");
	PreloadAnimLib(playerid,"HAIRCUTS");
	PreloadAnimLib(playerid,"HEIST9");
	PreloadAnimLib(playerid,"INT_HOUSE");
	PreloadAnimLib(playerid,"INT_OFFICE");
	PreloadAnimLib(playerid,"INT_SHOP");
	PreloadAnimLib(playerid,"JST_BUISNESS");
	PreloadAnimLib(playerid,"KART");
	PreloadAnimLib(playerid,"KISSING");
	PreloadAnimLib(playerid,"KNIFE");
	PreloadAnimLib(playerid,"LAPDAN1");
	PreloadAnimLib(playerid,"LAPDAN2");
	PreloadAnimLib(playerid,"LAPDAN3");
	PreloadAnimLib(playerid,"LOWRIDER");
	PreloadAnimLib(playerid,"MD_CHASE");
	PreloadAnimLib(playerid,"MEDIC");
	PreloadAnimLib(playerid,"MD_END");
	PreloadAnimLib(playerid,"MISC");
	PreloadAnimLib(playerid,"MTB");
	PreloadAnimLib(playerid,"MUSCULAR");
	PreloadAnimLib(playerid,"NEVADA");
	PreloadAnimLib(playerid,"ON_LOOKERS");
	PreloadAnimLib(playerid,"OTB");
	PreloadAnimLib(playerid,"PARACHUTE");
	PreloadAnimLib(playerid,"PARK");
	PreloadAnimLib(playerid,"PAULNMAC");
	PreloadAnimLib(playerid,"PED");
	PreloadAnimLib(playerid,"PLAYER_DVBYS");
	PreloadAnimLib(playerid,"PLAYIDLES");
	PreloadAnimLib(playerid,"POLICE");
	PreloadAnimLib(playerid,"POOL");
	PreloadAnimLib(playerid,"POOR");
	PreloadAnimLib(playerid,"PYTHON");
	PreloadAnimLib(playerid,"QUAD");
	PreloadAnimLib(playerid,"QUAD_DBZ");
	PreloadAnimLib(playerid,"RIFLE");
	PreloadAnimLib(playerid,"RIOT");
	PreloadAnimLib(playerid,"ROB_BANK");
	PreloadAnimLib(playerid,"ROCKET");
	PreloadAnimLib(playerid,"RUSTLER");
	PreloadAnimLib(playerid,"RYDER");
	PreloadAnimLib(playerid,"SCRATCHING");
	PreloadAnimLib(playerid,"SHAMAL");
	PreloadAnimLib(playerid,"SHOTGUN");
	PreloadAnimLib(playerid,"SILENCED");
	PreloadAnimLib(playerid,"SKATE");
	PreloadAnimLib(playerid,"SPRAYCAN");
	PreloadAnimLib(playerid,"STRIP");
	PreloadAnimLib(playerid,"SUNBATHE");
	PreloadAnimLib(playerid,"SWAT");
	PreloadAnimLib(playerid,"SWEET");
	PreloadAnimLib(playerid,"SWIM");
	PreloadAnimLib(playerid,"SWORD");
	PreloadAnimLib(playerid,"TANK");
	PreloadAnimLib(playerid,"TATTOOS");
	PreloadAnimLib(playerid,"TEC");
	PreloadAnimLib(playerid,"TRAIN");
	PreloadAnimLib(playerid,"TRUCK");
	PreloadAnimLib(playerid,"UZI");
	PreloadAnimLib(playerid,"VAN");
	PreloadAnimLib(playerid,"VENDING");
	PreloadAnimLib(playerid,"VORTEX");
	PreloadAnimLib(playerid,"WAYFARER");
	PreloadAnimLib(playerid,"WEAPONS");
	PreloadAnimLib(playerid,"WUZI");
	PreloadAnimLib(playerid,"SNM");
	PreloadAnimLib(playerid,"BLOWJOBZ");
	PreloadAnimLib(playerid,"SEX");
	PreloadAnimLib(playerid,"BOMBER");
	PreloadAnimLib(playerid,"RAPPING");
	PreloadAnimLib(playerid,"SHOP");
	PreloadAnimLib(playerid,"BEACH");
	PreloadAnimLib(playerid,"SMOKING");
	PreloadAnimLib(playerid,"FOOD");
	PreloadAnimLib(playerid,"ON_LOOKERS");
	PreloadAnimLib(playerid,"DEALER");
	PreloadAnimLib(playerid,"CRACK");
	PreloadAnimLib(playerid,"CARRY");
	PreloadAnimLib(playerid,"COP_AMBIENT");
	PreloadAnimLib(playerid,"PARK");
	PreloadAnimLib(playerid,"INT_HOUSE");
	PreloadAnimLib(playerid,"FOOD");
	return 1;
}

stock DialogGoster(playerid, dialogid, stil, baslik[], icerik[], mesaj1[], mesaj2[]) {
	OyuncuBilgi[playerid][oDialog] = dialogid;
	return ShowPlayerDialog(playerid, dialogid, stil, baslik, icerik, mesaj1, mesaj2);
}

stock PreloadAnimLib(playerid, animlib[]) return ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0, 1);

static stock GetPosOffset(Float: p_p_x, Float: p_p_y, Float: p_p_z, Float: p_c_x, Float: p_c_y, Float: p_c_z, &Float:p_n_x, &Float:p_n_y, &Float: p_n_z)
{
	p_n_x = (p_p_x > p_c_x) ? (p_p_x - p_c_x) : (p_c_x - p_p_x);
	p_n_y = (p_p_y > p_c_y) ? (p_p_y - p_c_y) : (p_c_y - p_p_y);
	p_n_z = (p_p_z > p_c_z) ? (p_p_z - p_c_z) : (p_c_z - p_p_z);
	return true;
}

stock Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
    return VectorSize(x1-x2, y1-y2, z1-z2);
}

stock PedAnimKontrol(playerid)
{
    if(OyuncuBilgi[playerid][oKelepceli] == 1 || OyuncuBilgi[playerid][oYaraliSure] > 0 || OyuncuBilgi[playerid][oDonduruldu] > 0 || OyuncuBilgi[playerid][oHapisSure][0] > 0)
	{
   		HataMesaji(playerid, "Þu anda bunu yapamazsýn.");
   		return 0;
	}
    if(IsPlayerInAnyVehicle(playerid))
    {
		HataMesaji(playerid, "Bu animasyon araçta kullanýlamaz.");
		return 0;
	}
	return 1;
}

stock AracAnimKontrol(playerid)
{
    if(OyuncuBilgi[playerid][oKelepceli] == 1 || OyuncuBilgi[playerid][oYaraliSure] > 0 || OyuncuBilgi[playerid][oDonduruldu] > 0 || OyuncuBilgi[playerid][oHapisSure][0] > 0)
	{
   		HataMesaji(playerid, "Þu anda bunu yapamazsýn.");
   		return 0;
	}
    if(!IsPlayerInAnyVehicle(playerid))
    {
		HataMesaji(playerid, "Bu animasyon sadece araçta kullanýlabilir.");
		return 0;
	}
	return 1;
}

stock AnimOynat(playerid, animlib[], animname[], Float:Speed, looping, lockx, locky, freeze, time, lp = 0)
{
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "OOC hapisteyken animasyon kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken animasyon kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Dondurulma etkisindeyken animasyon kullanamazsýn.");

	if(!IsPlayerInAnyVehicle(playerid)) ClearAnimations(playerid);
	SetPVarInt(playerid, "anim", 1);
	TextDrawShowForPlayer(playerid, AnimBozText);
	return ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, freeze, time, lp);
}

stock AnimOynat2(playerid, animlib[], animname[], Float:Speed, looping, lockx, locky, freeze, time, lp = 0)
{
	if(OyuncuBilgi[playerid][oHapisSure][0] > 0) return HataMesaji(playerid, "OOC hapisteyken animasyon kullanamazsýn.");
	if(OyuncuBilgi[playerid][oYaraliSure] > 0) return HataMesaji(playerid, "Yaralýyken animasyon kullanamazsýn.");
	if(OyuncuBilgi[playerid][oDonduruldu] > 0) return HataMesaji(playerid, "Dondurulma etkisindeyken animasyon kullanamazsýn.");

	ClearAnimations(playerid);
	return ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, freeze, time, lp);
}

stock OyuncuIP(playerid) {
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

stock AracTamirEt(aracid) return RepairVehicle(aracid), SetVehicleHealth(aracid, 999.9);
stock ASpawn(aracid) return Arac_Spawn(Arac_IDBul(aracid));
stock GostergeKontrol(aracid)
{
	if(GetVehicleModel(aracid) == 509 || GetVehicleModel(aracid) == 510 || GetVehicleModel(aracid) == 481 || !IsEngineVehicle(aracid)) return 0;
	return 1;
}

stock IsVehicleInRangeOfPoint(vehicleid, Float: radius, Float: x, Float: y, Float: z) {
    if(GetVehicleDistanceFromPoint(vehicleid, x, y, z) <= radius) return true;
    return false;
}

stock AracHiz(aracid)
{
	new Float:velo_pos[3], get3d = 0;
	GetVehicleVelocity(aracid, velo_pos[0], velo_pos[1], velo_pos[2]);
	return SpeedCheck(velo_pos[0], velo_pos[1], velo_pos[2], 100.0, get3d);
}

stock AracHizDuzenle(vehicleid, mph)
{
	new Float:Vx,Float:Vy,Float:Vz,Float:DV,Float:multiple;
	GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
	DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
	if(DV > 0)
	{
		multiple = ((mph + DV * 100) / (DV * 100));
		return SetVehicleVelocity(vehicleid,Vx*multiple,Vy*multiple,Vz*multiple);
	}
	return 0;
}

stock EkstraDilCek(playerid)
{
	new dil[24];
	format(dil, sizeof(dil), "%s", EkstraDiller[OyuncuBilgi[playerid][oEkstraDil]]);
	return dil;
}
/*
const BULLET_SYNC = 206;
IPacket:BULLET_SYNC(playerid, BitStream:bs)
{
    new bulletData[PR_BulletSync], silah = GetPlayerWeapon(playerid), mermi = GetPlayerAmmo(playerid);

    BS_IgnoreBits(bs, 8);
    BS_ReadBulletSync(bs, bulletData);

	if(silah >= 22 && silah <= 38)
	{
		if(mermi == 1 && OyuncuBirlikTuru(playerid) != BIRLIK_POLIS)
		{
			//SilahSil(playerid, silah);
			new sorgu[256];
			format(sorgu, sizeof(sorgu), "INSERT INTO `silahenvanter` (`karakterID`, `silahID`) VALUES ('%d', '%d')", OyuncuBilgi[playerid][oID], silah);
			mysql_query(mysqlB, sorgu);
			SetPlayerArmedWeapon(playerid, 0);
			ClearAnimations(playerid);
			SunucuMesaji(playerid, "%s model silahýnýn mermisi bitti, silah envanterine eklendi. (/senvanter)", SilahIsim(silah));
			SilahKaydet(playerid);
		}
	}
	return 1;
}
*/
